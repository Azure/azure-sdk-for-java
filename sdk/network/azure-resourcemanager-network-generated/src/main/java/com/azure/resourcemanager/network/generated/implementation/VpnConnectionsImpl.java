// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.VpnConnectionsClient;
import com.azure.resourcemanager.network.generated.fluent.models.VpnConnectionInner;
import com.azure.resourcemanager.network.generated.models.VpnConnection;
import com.azure.resourcemanager.network.generated.models.VpnConnectionPacketCaptureStartParameters;
import com.azure.resourcemanager.network.generated.models.VpnConnectionPacketCaptureStopParameters;
import com.azure.resourcemanager.network.generated.models.VpnConnections;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class VpnConnectionsImpl implements VpnConnections {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VpnConnectionsImpl.class);

    private final VpnConnectionsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public VpnConnectionsImpl(
        VpnConnectionsClient innerClient, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public VpnConnection get(String resourceGroupName, String gatewayName, String connectionName) {
        VpnConnectionInner inner = this.serviceClient().get(resourceGroupName, gatewayName, connectionName);
        if (inner != null) {
            return new VpnConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VpnConnection> getWithResponse(
        String resourceGroupName, String gatewayName, String connectionName, Context context) {
        Response<VpnConnectionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, gatewayName, connectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VpnConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VpnConnection createOrUpdate(
        String resourceGroupName,
        String gatewayName,
        String connectionName,
        VpnConnectionInner vpnConnectionParameters) {
        VpnConnectionInner inner =
            this
                .serviceClient()
                .createOrUpdate(resourceGroupName, gatewayName, connectionName, vpnConnectionParameters);
        if (inner != null) {
            return new VpnConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VpnConnection createOrUpdate(
        String resourceGroupName,
        String gatewayName,
        String connectionName,
        VpnConnectionInner vpnConnectionParameters,
        Context context) {
        VpnConnectionInner inner =
            this
                .serviceClient()
                .createOrUpdate(resourceGroupName, gatewayName, connectionName, vpnConnectionParameters, context);
        if (inner != null) {
            return new VpnConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String gatewayName, String connectionName) {
        this.serviceClient().delete(resourceGroupName, gatewayName, connectionName);
    }

    public void delete(String resourceGroupName, String gatewayName, String connectionName, Context context) {
        this.serviceClient().delete(resourceGroupName, gatewayName, connectionName, context);
    }

    public String startPacketCapture(
        String resourceGroupName,
        String gatewayName,
        String vpnConnectionName,
        VpnConnectionPacketCaptureStartParameters parameters) {
        return this.serviceClient().startPacketCapture(resourceGroupName, gatewayName, vpnConnectionName, parameters);
    }

    public String startPacketCapture(String resourceGroupName, String gatewayName, String vpnConnectionName) {
        return this.serviceClient().startPacketCapture(resourceGroupName, gatewayName, vpnConnectionName);
    }

    public String startPacketCapture(
        String resourceGroupName,
        String gatewayName,
        String vpnConnectionName,
        VpnConnectionPacketCaptureStartParameters parameters,
        Context context) {
        return this
            .serviceClient()
            .startPacketCapture(resourceGroupName, gatewayName, vpnConnectionName, parameters, context);
    }

    public String stopPacketCapture(
        String resourceGroupName,
        String gatewayName,
        String vpnConnectionName,
        VpnConnectionPacketCaptureStopParameters parameters) {
        return this.serviceClient().stopPacketCapture(resourceGroupName, gatewayName, vpnConnectionName, parameters);
    }

    public String stopPacketCapture(String resourceGroupName, String gatewayName, String vpnConnectionName) {
        return this.serviceClient().stopPacketCapture(resourceGroupName, gatewayName, vpnConnectionName);
    }

    public String stopPacketCapture(
        String resourceGroupName,
        String gatewayName,
        String vpnConnectionName,
        VpnConnectionPacketCaptureStopParameters parameters,
        Context context) {
        return this
            .serviceClient()
            .stopPacketCapture(resourceGroupName, gatewayName, vpnConnectionName, parameters, context);
    }

    public PagedIterable<VpnConnection> listByVpnGateway(String resourceGroupName, String gatewayName) {
        PagedIterable<VpnConnectionInner> inner = this.serviceClient().listByVpnGateway(resourceGroupName, gatewayName);
        return Utils.mapPage(inner, inner1 -> new VpnConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<VpnConnection> listByVpnGateway(
        String resourceGroupName, String gatewayName, Context context) {
        PagedIterable<VpnConnectionInner> inner =
            this.serviceClient().listByVpnGateway(resourceGroupName, gatewayName, context);
        return Utils.mapPage(inner, inner1 -> new VpnConnectionImpl(inner1, this.manager()));
    }

    private VpnConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }
}
