// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.SubnetsClient;
import com.azure.resourcemanager.network.generated.fluent.models.SubnetInner;
import com.azure.resourcemanager.network.generated.models.PrepareNetworkPoliciesRequest;
import com.azure.resourcemanager.network.generated.models.Subnet;
import com.azure.resourcemanager.network.generated.models.Subnets;
import com.azure.resourcemanager.network.generated.models.UnprepareNetworkPoliciesRequest;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SubnetsImpl implements Subnets {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SubnetsImpl.class);

    private final SubnetsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public SubnetsImpl(
        SubnetsClient innerClient, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String virtualNetworkName, String subnetName) {
        this.serviceClient().delete(resourceGroupName, virtualNetworkName, subnetName);
    }

    public void delete(String resourceGroupName, String virtualNetworkName, String subnetName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualNetworkName, subnetName, context);
    }

    public Subnet get(String resourceGroupName, String virtualNetworkName, String subnetName) {
        SubnetInner inner = this.serviceClient().get(resourceGroupName, virtualNetworkName, subnetName);
        if (inner != null) {
            return new SubnetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Subnet> getWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, String expand, Context context) {
        Response<SubnetInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, virtualNetworkName, subnetName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SubnetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void prepareNetworkPolicies(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters) {
        this
            .serviceClient()
            .prepareNetworkPolicies(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters);
    }

    public void prepareNetworkPolicies(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters,
        Context context) {
        this
            .serviceClient()
            .prepareNetworkPolicies(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters, context);
    }

    public void unprepareNetworkPolicies(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        UnprepareNetworkPoliciesRequest unprepareNetworkPoliciesRequestParameters) {
        this
            .serviceClient()
            .unprepareNetworkPolicies(
                resourceGroupName, virtualNetworkName, subnetName, unprepareNetworkPoliciesRequestParameters);
    }

    public void unprepareNetworkPolicies(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        UnprepareNetworkPoliciesRequest unprepareNetworkPoliciesRequestParameters,
        Context context) {
        this
            .serviceClient()
            .unprepareNetworkPolicies(
                resourceGroupName, virtualNetworkName, subnetName, unprepareNetworkPoliciesRequestParameters, context);
    }

    public PagedIterable<Subnet> list(String resourceGroupName, String virtualNetworkName) {
        PagedIterable<SubnetInner> inner = this.serviceClient().list(resourceGroupName, virtualNetworkName);
        return Utils.mapPage(inner, inner1 -> new SubnetImpl(inner1, this.manager()));
    }

    public PagedIterable<Subnet> list(String resourceGroupName, String virtualNetworkName, Context context) {
        PagedIterable<SubnetInner> inner = this.serviceClient().list(resourceGroupName, virtualNetworkName, context);
        return Utils.mapPage(inner, inner1 -> new SubnetImpl(inner1, this.manager()));
    }

    public Subnet getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualNetworkName = Utils.getValueFromIdByName(id, "virtualNetworks");
        if (virtualNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualNetworks'.", id)));
        }
        String subnetName = Utils.getValueFromIdByName(id, "subnets");
        if (subnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subnets'.", id)));
        }
        String localExpand = null;
        return this
            .getWithResponse(resourceGroupName, virtualNetworkName, subnetName, localExpand, Context.NONE)
            .getValue();
    }

    public Response<Subnet> getByIdWithResponse(String id, String expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualNetworkName = Utils.getValueFromIdByName(id, "virtualNetworks");
        if (virtualNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualNetworks'.", id)));
        }
        String subnetName = Utils.getValueFromIdByName(id, "subnets");
        if (subnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subnets'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualNetworkName, subnetName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualNetworkName = Utils.getValueFromIdByName(id, "virtualNetworks");
        if (virtualNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualNetworks'.", id)));
        }
        String subnetName = Utils.getValueFromIdByName(id, "subnets");
        if (subnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subnets'.", id)));
        }
        this.delete(resourceGroupName, virtualNetworkName, subnetName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualNetworkName = Utils.getValueFromIdByName(id, "virtualNetworks");
        if (virtualNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualNetworks'.", id)));
        }
        String subnetName = Utils.getValueFromIdByName(id, "subnets");
        if (subnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subnets'.", id)));
        }
        this.delete(resourceGroupName, virtualNetworkName, subnetName, context);
    }

    private SubnetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public SubnetImpl define(String name) {
        return new SubnetImpl(name, this.manager());
    }
}
