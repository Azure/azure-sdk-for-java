// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.fluent.models.ExpressRouteConnectionInner;
import com.azure.resourcemanager.network.generated.fluent.models.ExpressRouteGatewayInner;
import com.azure.resourcemanager.network.generated.models.ExpressRouteConnection;
import com.azure.resourcemanager.network.generated.models.ExpressRouteGateway;
import com.azure.resourcemanager.network.generated.models.ExpressRouteGatewayPropertiesAutoScaleConfiguration;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import com.azure.resourcemanager.network.generated.models.TagsObject;
import com.azure.resourcemanager.network.generated.models.VirtualHubId;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class ExpressRouteGatewayImpl
    implements ExpressRouteGateway, ExpressRouteGateway.Definition, ExpressRouteGateway.Update {
    private ExpressRouteGatewayInner innerObject;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public ExpressRouteGatewayPropertiesAutoScaleConfiguration autoScaleConfiguration() {
        return this.innerModel().autoScaleConfiguration();
    }

    public List<ExpressRouteConnection> expressRouteConnections() {
        List<ExpressRouteConnectionInner> inner = this.innerModel().expressRouteConnections();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new ExpressRouteConnectionImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public VirtualHubId virtualHub() {
        return this.innerModel().virtualHub();
    }

    public String id() {
        return this.innerModel().id();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ExpressRouteGatewayInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String expressRouteGatewayName;

    private TagsObject updateExpressRouteGatewayParameters;

    public ExpressRouteGatewayImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ExpressRouteGateway create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteGateways()
                .createOrUpdate(resourceGroupName, expressRouteGatewayName, this.innerModel(), Context.NONE);
        return this;
    }

    public ExpressRouteGateway create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteGateways()
                .createOrUpdate(resourceGroupName, expressRouteGatewayName, this.innerModel(), context);
        return this;
    }

    ExpressRouteGatewayImpl(String name, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerObject = new ExpressRouteGatewayInner();
        this.serviceManager = serviceManager;
        this.expressRouteGatewayName = name;
    }

    public ExpressRouteGatewayImpl update() {
        this.updateExpressRouteGatewayParameters = new TagsObject();
        return this;
    }

    public ExpressRouteGateway apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteGateways()
                .updateTags(
                    resourceGroupName, expressRouteGatewayName, updateExpressRouteGatewayParameters, Context.NONE);
        return this;
    }

    public ExpressRouteGateway apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteGateways()
                .updateTags(resourceGroupName, expressRouteGatewayName, updateExpressRouteGatewayParameters, context);
        return this;
    }

    ExpressRouteGatewayImpl(
        ExpressRouteGatewayInner innerObject,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.expressRouteGatewayName = Utils.getValueFromIdByName(innerObject.id(), "expressRouteGateways");
    }

    public ExpressRouteGateway refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteGateways()
                .getByResourceGroupWithResponse(resourceGroupName, expressRouteGatewayName, Context.NONE)
                .getValue();
        return this;
    }

    public ExpressRouteGateway refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteGateways()
                .getByResourceGroupWithResponse(resourceGroupName, expressRouteGatewayName, context)
                .getValue();
        return this;
    }

    public ExpressRouteGatewayImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ExpressRouteGatewayImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ExpressRouteGatewayImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateExpressRouteGatewayParameters.withTags(tags);
            return this;
        }
    }

    public ExpressRouteGatewayImpl withAutoScaleConfiguration(
        ExpressRouteGatewayPropertiesAutoScaleConfiguration autoScaleConfiguration) {
        this.innerModel().withAutoScaleConfiguration(autoScaleConfiguration);
        return this;
    }

    public ExpressRouteGatewayImpl withVirtualHub(VirtualHubId virtualHub) {
        this.innerModel().withVirtualHub(virtualHub);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
