/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_04_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.network.v2020_04_01.implementation.BackendAddressPoolInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.network.v2020_04_01.implementation.NetworkManager;
import java.util.List;
import com.microsoft.azure.SubResource;

/**
 * Type representing BackendAddressPool.
 */
public interface BackendAddressPool extends HasInner<BackendAddressPoolInner>, Indexable, Refreshable<BackendAddressPool>, Updatable<BackendAddressPool.Update>, HasManager<NetworkManager> {
    /**
     * @return the backendIPConfigurations value.
     */
    List<VirtualMachineScaleSetNetworkInterfaceIPConfiguration> backendIPConfigurations();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the loadBalancerBackendAddresses value.
     */
    List<LoadBalancerBackendAddress> loadBalancerBackendAddresses();

    /**
     * @return the loadBalancingRules value.
     */
    List<SubResource> loadBalancingRules();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the outboundRule value.
     */
    SubResource outboundRule();

    /**
     * @return the outboundRules value.
     */
    List<SubResource> outboundRules();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the BackendAddressPool definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLoadBalancer, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of BackendAddressPool definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a BackendAddressPool definition.
         */
        interface Blank extends WithLoadBalancer {
        }

        /**
         * The stage of the backendaddresspool definition allowing to specify LoadBalancer.
         */
        interface WithLoadBalancer {
           /**
            * Specifies resourceGroupName, loadBalancerName.
            * @param resourceGroupName The name of the resource group
            * @param loadBalancerName The name of the load balancer
            * @return the next definition stage
            */
            WithCreate withExistingLoadBalancer(String resourceGroupName, String loadBalancerName);
        }

        /**
         * The stage of the backendaddresspool definition allowing to specify Id.
         */
        interface WithId {
            /**
             * Specifies id.
             * @param id Resource ID
             * @return the next definition stage
             */
            WithCreate withId(String id);
        }

        /**
         * The stage of the backendaddresspool definition allowing to specify LoadBalancerBackendAddresses.
         */
        interface WithLoadBalancerBackendAddresses {
            /**
             * Specifies loadBalancerBackendAddresses.
             * @param loadBalancerBackendAddresses An array of backend addresses
             * @return the next definition stage
             */
            WithCreate withLoadBalancerBackendAddresses(List<LoadBalancerBackendAddress> loadBalancerBackendAddresses);
        }

        /**
         * The stage of the backendaddresspool definition allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource
             * @return the next definition stage
             */
            WithCreate withName(String name);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<BackendAddressPool>, DefinitionStages.WithId, DefinitionStages.WithLoadBalancerBackendAddresses, DefinitionStages.WithName {
        }
    }
    /**
     * The template for a BackendAddressPool update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<BackendAddressPool>, UpdateStages.WithId, UpdateStages.WithLoadBalancerBackendAddresses, UpdateStages.WithName {
    }

    /**
     * Grouping of BackendAddressPool update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the backendaddresspool update allowing to specify Id.
         */
        interface WithId {
            /**
             * Specifies id.
             * @param id Resource ID
             * @return the next update stage
             */
            Update withId(String id);
        }

        /**
         * The stage of the backendaddresspool update allowing to specify LoadBalancerBackendAddresses.
         */
        interface WithLoadBalancerBackendAddresses {
            /**
             * Specifies loadBalancerBackendAddresses.
             * @param loadBalancerBackendAddresses An array of backend addresses
             * @return the next update stage
             */
            Update withLoadBalancerBackendAddresses(List<LoadBalancerBackendAddress> loadBalancerBackendAddresses);
        }

        /**
         * The stage of the backendaddresspool update allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource
             * @return the next update stage
             */
            Update withName(String name);
        }

    }
}
