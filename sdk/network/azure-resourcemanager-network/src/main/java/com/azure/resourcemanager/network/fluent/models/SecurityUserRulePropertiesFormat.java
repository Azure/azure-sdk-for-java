// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.network.models.AddressPrefixItem;
import com.azure.resourcemanager.network.models.ProvisioningState;
import com.azure.resourcemanager.network.models.SecurityConfigurationRuleDirection;
import com.azure.resourcemanager.network.models.SecurityConfigurationRuleProtocol;
import java.io.IOException;
import java.util.List;

/**
 * Security rule resource.
 */
@Fluent
public final class SecurityUserRulePropertiesFormat implements JsonSerializable<SecurityUserRulePropertiesFormat> {
    /*
     * A description for this rule.
     */
    private String description;

    /*
     * Network protocol this rule applies to.
     */
    private SecurityConfigurationRuleProtocol protocol;

    /*
     * The CIDR or source IP ranges.
     */
    private List<AddressPrefixItem> sources;

    /*
     * The destination address prefixes. CIDR or destination IP ranges.
     */
    private List<AddressPrefixItem> destinations;

    /*
     * The source port ranges.
     */
    private List<String> sourcePortRanges;

    /*
     * The destination port ranges.
     */
    private List<String> destinationPortRanges;

    /*
     * Indicates if the traffic matched against the rule in inbound or outbound.
     */
    private SecurityConfigurationRuleDirection direction;

    /*
     * The provisioning state of the security configuration user rule resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Unique identifier for this resource.
     */
    private String resourceGuid;

    /**
     * Creates an instance of SecurityUserRulePropertiesFormat class.
     */
    public SecurityUserRulePropertiesFormat() {
    }

    /**
     * Get the description property: A description for this rule.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description for this rule.
     * 
     * @param description the description value to set.
     * @return the SecurityUserRulePropertiesFormat object itself.
     */
    public SecurityUserRulePropertiesFormat withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the protocol property: Network protocol this rule applies to.
     * 
     * @return the protocol value.
     */
    public SecurityConfigurationRuleProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Network protocol this rule applies to.
     * 
     * @param protocol the protocol value to set.
     * @return the SecurityUserRulePropertiesFormat object itself.
     */
    public SecurityUserRulePropertiesFormat withProtocol(SecurityConfigurationRuleProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the sources property: The CIDR or source IP ranges.
     * 
     * @return the sources value.
     */
    public List<AddressPrefixItem> sources() {
        return this.sources;
    }

    /**
     * Set the sources property: The CIDR or source IP ranges.
     * 
     * @param sources the sources value to set.
     * @return the SecurityUserRulePropertiesFormat object itself.
     */
    public SecurityUserRulePropertiesFormat withSources(List<AddressPrefixItem> sources) {
        this.sources = sources;
        return this;
    }

    /**
     * Get the destinations property: The destination address prefixes. CIDR or destination IP ranges.
     * 
     * @return the destinations value.
     */
    public List<AddressPrefixItem> destinations() {
        return this.destinations;
    }

    /**
     * Set the destinations property: The destination address prefixes. CIDR or destination IP ranges.
     * 
     * @param destinations the destinations value to set.
     * @return the SecurityUserRulePropertiesFormat object itself.
     */
    public SecurityUserRulePropertiesFormat withDestinations(List<AddressPrefixItem> destinations) {
        this.destinations = destinations;
        return this;
    }

    /**
     * Get the sourcePortRanges property: The source port ranges.
     * 
     * @return the sourcePortRanges value.
     */
    public List<String> sourcePortRanges() {
        return this.sourcePortRanges;
    }

    /**
     * Set the sourcePortRanges property: The source port ranges.
     * 
     * @param sourcePortRanges the sourcePortRanges value to set.
     * @return the SecurityUserRulePropertiesFormat object itself.
     */
    public SecurityUserRulePropertiesFormat withSourcePortRanges(List<String> sourcePortRanges) {
        this.sourcePortRanges = sourcePortRanges;
        return this;
    }

    /**
     * Get the destinationPortRanges property: The destination port ranges.
     * 
     * @return the destinationPortRanges value.
     */
    public List<String> destinationPortRanges() {
        return this.destinationPortRanges;
    }

    /**
     * Set the destinationPortRanges property: The destination port ranges.
     * 
     * @param destinationPortRanges the destinationPortRanges value to set.
     * @return the SecurityUserRulePropertiesFormat object itself.
     */
    public SecurityUserRulePropertiesFormat withDestinationPortRanges(List<String> destinationPortRanges) {
        this.destinationPortRanges = destinationPortRanges;
        return this;
    }

    /**
     * Get the direction property: Indicates if the traffic matched against the rule in inbound or outbound.
     * 
     * @return the direction value.
     */
    public SecurityConfigurationRuleDirection direction() {
        return this.direction;
    }

    /**
     * Set the direction property: Indicates if the traffic matched against the rule in inbound or outbound.
     * 
     * @param direction the direction value to set.
     * @return the SecurityUserRulePropertiesFormat object itself.
     */
    public SecurityUserRulePropertiesFormat withDirection(SecurityConfigurationRuleDirection direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the security configuration user rule resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceGuid property: Unique identifier for this resource.
     * 
     * @return the resourceGuid value.
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (protocol() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property protocol in model SecurityUserRulePropertiesFormat"));
        }
        if (sources() != null) {
            sources().forEach(e -> e.validate());
        }
        if (destinations() != null) {
            destinations().forEach(e -> e.validate());
        }
        if (direction() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property direction in model SecurityUserRulePropertiesFormat"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecurityUserRulePropertiesFormat.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("destinations", this.destinations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sourcePortRanges", this.sourcePortRanges,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("destinationPortRanges", this.destinationPortRanges,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityUserRulePropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityUserRulePropertiesFormat if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecurityUserRulePropertiesFormat.
     */
    public static SecurityUserRulePropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityUserRulePropertiesFormat deserializedSecurityUserRulePropertiesFormat
                = new SecurityUserRulePropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protocol".equals(fieldName)) {
                    deserializedSecurityUserRulePropertiesFormat.protocol
                        = SecurityConfigurationRuleProtocol.fromString(reader.getString());
                } else if ("direction".equals(fieldName)) {
                    deserializedSecurityUserRulePropertiesFormat.direction
                        = SecurityConfigurationRuleDirection.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSecurityUserRulePropertiesFormat.description = reader.getString();
                } else if ("sources".equals(fieldName)) {
                    List<AddressPrefixItem> sources = reader.readArray(reader1 -> AddressPrefixItem.fromJson(reader1));
                    deserializedSecurityUserRulePropertiesFormat.sources = sources;
                } else if ("destinations".equals(fieldName)) {
                    List<AddressPrefixItem> destinations
                        = reader.readArray(reader1 -> AddressPrefixItem.fromJson(reader1));
                    deserializedSecurityUserRulePropertiesFormat.destinations = destinations;
                } else if ("sourcePortRanges".equals(fieldName)) {
                    List<String> sourcePortRanges = reader.readArray(reader1 -> reader1.getString());
                    deserializedSecurityUserRulePropertiesFormat.sourcePortRanges = sourcePortRanges;
                } else if ("destinationPortRanges".equals(fieldName)) {
                    List<String> destinationPortRanges = reader.readArray(reader1 -> reader1.getString());
                    deserializedSecurityUserRulePropertiesFormat.destinationPortRanges = destinationPortRanges;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSecurityUserRulePropertiesFormat.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("resourceGuid".equals(fieldName)) {
                    deserializedSecurityUserRulePropertiesFormat.resourceGuid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityUserRulePropertiesFormat;
        });
    }
}
