// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.network.models.ProvisioningState;
import com.azure.resourcemanager.network.models.RoutingConfiguration;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the NetworkVirtualApplianceConnection subresource.
 */
@Fluent
public final class NetworkVirtualApplianceConnectionProperties
    implements JsonSerializable<NetworkVirtualApplianceConnectionProperties> {
    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The provisioning state of the NetworkVirtualApplianceConnection resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Network Virtual Appliance ASN.
     */
    private Long asn;

    /*
     * Unique identifier for the connection.
     */
    private Long tunnelIdentifier;

    /*
     * List of bgpPeerAddresses for the NVA instances
     */
    private List<String> bgpPeerAddress;

    /*
     * Enable internet security.
     */
    private Boolean enableInternetSecurity;

    /*
     * The Routing Configuration indicating the associated and propagated route tables on this connection.
     */
    private RoutingConfiguration routingConfiguration;

    /**
     * Creates an instance of NetworkVirtualApplianceConnectionProperties class.
     */
    public NetworkVirtualApplianceConnectionProperties() {
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the resource.
     * 
     * @param name the name value to set.
     * @return the NetworkVirtualApplianceConnectionProperties object itself.
     */
    public NetworkVirtualApplianceConnectionProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the NetworkVirtualApplianceConnection resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the asn property: Network Virtual Appliance ASN.
     * 
     * @return the asn value.
     */
    public Long asn() {
        return this.asn;
    }

    /**
     * Set the asn property: Network Virtual Appliance ASN.
     * 
     * @param asn the asn value to set.
     * @return the NetworkVirtualApplianceConnectionProperties object itself.
     */
    public NetworkVirtualApplianceConnectionProperties withAsn(Long asn) {
        this.asn = asn;
        return this;
    }

    /**
     * Get the tunnelIdentifier property: Unique identifier for the connection.
     * 
     * @return the tunnelIdentifier value.
     */
    public Long tunnelIdentifier() {
        return this.tunnelIdentifier;
    }

    /**
     * Set the tunnelIdentifier property: Unique identifier for the connection.
     * 
     * @param tunnelIdentifier the tunnelIdentifier value to set.
     * @return the NetworkVirtualApplianceConnectionProperties object itself.
     */
    public NetworkVirtualApplianceConnectionProperties withTunnelIdentifier(Long tunnelIdentifier) {
        this.tunnelIdentifier = tunnelIdentifier;
        return this;
    }

    /**
     * Get the bgpPeerAddress property: List of bgpPeerAddresses for the NVA instances.
     * 
     * @return the bgpPeerAddress value.
     */
    public List<String> bgpPeerAddress() {
        return this.bgpPeerAddress;
    }

    /**
     * Set the bgpPeerAddress property: List of bgpPeerAddresses for the NVA instances.
     * 
     * @param bgpPeerAddress the bgpPeerAddress value to set.
     * @return the NetworkVirtualApplianceConnectionProperties object itself.
     */
    public NetworkVirtualApplianceConnectionProperties withBgpPeerAddress(List<String> bgpPeerAddress) {
        this.bgpPeerAddress = bgpPeerAddress;
        return this;
    }

    /**
     * Get the enableInternetSecurity property: Enable internet security.
     * 
     * @return the enableInternetSecurity value.
     */
    public Boolean enableInternetSecurity() {
        return this.enableInternetSecurity;
    }

    /**
     * Set the enableInternetSecurity property: Enable internet security.
     * 
     * @param enableInternetSecurity the enableInternetSecurity value to set.
     * @return the NetworkVirtualApplianceConnectionProperties object itself.
     */
    public NetworkVirtualApplianceConnectionProperties withEnableInternetSecurity(Boolean enableInternetSecurity) {
        this.enableInternetSecurity = enableInternetSecurity;
        return this;
    }

    /**
     * Get the routingConfiguration property: The Routing Configuration indicating the associated and propagated route
     * tables on this connection.
     * 
     * @return the routingConfiguration value.
     */
    public RoutingConfiguration routingConfiguration() {
        return this.routingConfiguration;
    }

    /**
     * Set the routingConfiguration property: The Routing Configuration indicating the associated and propagated route
     * tables on this connection.
     * 
     * @param routingConfiguration the routingConfiguration value to set.
     * @return the NetworkVirtualApplianceConnectionProperties object itself.
     */
    public NetworkVirtualApplianceConnectionProperties
        withRoutingConfiguration(RoutingConfiguration routingConfiguration) {
        this.routingConfiguration = routingConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (routingConfiguration() != null) {
            routingConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("asn", this.asn);
        jsonWriter.writeNumberField("tunnelIdentifier", this.tunnelIdentifier);
        jsonWriter.writeArrayField("bgpPeerAddress", this.bgpPeerAddress,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("enableInternetSecurity", this.enableInternetSecurity);
        jsonWriter.writeJsonField("routingConfiguration", this.routingConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkVirtualApplianceConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkVirtualApplianceConnectionProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkVirtualApplianceConnectionProperties.
     */
    public static NetworkVirtualApplianceConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkVirtualApplianceConnectionProperties deserializedNetworkVirtualApplianceConnectionProperties
                = new NetworkVirtualApplianceConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNetworkVirtualApplianceConnectionProperties.name = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkVirtualApplianceConnectionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("asn".equals(fieldName)) {
                    deserializedNetworkVirtualApplianceConnectionProperties.asn
                        = reader.getNullable(JsonReader::getLong);
                } else if ("tunnelIdentifier".equals(fieldName)) {
                    deserializedNetworkVirtualApplianceConnectionProperties.tunnelIdentifier
                        = reader.getNullable(JsonReader::getLong);
                } else if ("bgpPeerAddress".equals(fieldName)) {
                    List<String> bgpPeerAddress = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkVirtualApplianceConnectionProperties.bgpPeerAddress = bgpPeerAddress;
                } else if ("enableInternetSecurity".equals(fieldName)) {
                    deserializedNetworkVirtualApplianceConnectionProperties.enableInternetSecurity
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("routingConfiguration".equals(fieldName)) {
                    deserializedNetworkVirtualApplianceConnectionProperties.routingConfiguration
                        = RoutingConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkVirtualApplianceConnectionProperties;
        });
    }
}
