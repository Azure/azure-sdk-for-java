/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_03_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.network.v2020_03_01.NetworkVirtualAppliance;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.SubResource;
import com.microsoft.azure.management.network.v2020_03_01.VirtualApplianceNicProperties;
import com.microsoft.azure.management.network.v2020_03_01.ProvisioningState;
import com.microsoft.azure.management.network.v2020_03_01.ManagedServiceIdentity;
import com.microsoft.azure.management.network.v2020_03_01.VirtualApplianceSkuProperties;

class NetworkVirtualApplianceImpl extends GroupableResourceCoreImpl<NetworkVirtualAppliance, NetworkVirtualApplianceInner, NetworkVirtualApplianceImpl, NetworkManager> implements NetworkVirtualAppliance, NetworkVirtualAppliance.Definition, NetworkVirtualAppliance.Update {
    NetworkVirtualApplianceImpl(String name, NetworkVirtualApplianceInner inner, NetworkManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<NetworkVirtualAppliance> createResourceAsync() {
        NetworkVirtualAppliancesInner client = this.manager().inner().networkVirtualAppliances();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<NetworkVirtualAppliance> updateResourceAsync() {
        NetworkVirtualAppliancesInner client = this.manager().inner().networkVirtualAppliances();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<NetworkVirtualApplianceInner> getInnerAsync() {
        NetworkVirtualAppliancesInner client = this.manager().inner().networkVirtualAppliances();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<String> bootStrapConfigurationBlob() {
        return this.inner().bootStrapConfigurationBlob();
    }

    @Override
    public List<String> cloudInitConfigurationBlob() {
        return this.inner().cloudInitConfigurationBlob();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public ManagedServiceIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public VirtualApplianceSkuProperties sku() {
        return this.inner().sku();
    }

    @Override
    public Long virtualApplianceAsn() {
        return this.inner().virtualApplianceAsn();
    }

    @Override
    public List<VirtualApplianceNicProperties> virtualApplianceNics() {
        return this.inner().virtualApplianceNics();
    }

    @Override
    public SubResource virtualHub() {
        return this.inner().virtualHub();
    }

    @Override
    public NetworkVirtualApplianceImpl withBootStrapConfigurationBlob(List<String> bootStrapConfigurationBlob) {
        this.inner().withBootStrapConfigurationBlob(bootStrapConfigurationBlob);
        return this;
    }

    @Override
    public NetworkVirtualApplianceImpl withCloudInitConfigurationBlob(List<String> cloudInitConfigurationBlob) {
        this.inner().withCloudInitConfigurationBlob(cloudInitConfigurationBlob);
        return this;
    }

    @Override
    public NetworkVirtualApplianceImpl withIdentity(ManagedServiceIdentity identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public NetworkVirtualApplianceImpl withSku(VirtualApplianceSkuProperties sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public NetworkVirtualApplianceImpl withVirtualApplianceAsn(Long virtualApplianceAsn) {
        this.inner().withVirtualApplianceAsn(virtualApplianceAsn);
        return this;
    }

    @Override
    public NetworkVirtualApplianceImpl withVirtualHub(SubResource virtualHub) {
        this.inner().withVirtualHub(virtualHub);
        return this;
    }

}
