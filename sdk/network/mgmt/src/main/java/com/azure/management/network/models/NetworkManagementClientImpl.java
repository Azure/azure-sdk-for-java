// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.network.models;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.CloudException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.management.AzureServiceClient;
import com.azure.management.network.ErrorException;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the NetworkManagementClientImpl type. */
public final class NetworkManagementClientImpl extends AzureServiceClient {
    /** The proxy service used to perform REST calls. */
    private final NetworkManagementClientService service;

    /**
     * The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms
     * part of the URI for every service call.
     */
    private String subscriptionId;

    /**
     * Gets The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID
     * forms part of the URI for every service call.
     *
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Sets The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID
     * forms part of the URI for every service call.
     *
     * @param subscriptionId the subscriptionId value.
     * @return the service client itself.
     */
    public NetworkManagementClientImpl setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /** server parameter. */
    private String host;

    /**
     * Gets server parameter.
     *
     * @return the host value.
     */
    public String getHost() {
        return this.host;
    }

    /**
     * Sets server parameter.
     *
     * @param host the host value.
     * @return the service client itself.
     */
    public NetworkManagementClientImpl setHost(String host) {
        this.host = host;
        return this;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The ApplicationGatewaysInner object to access its operations. */
    private final ApplicationGatewaysInner applicationGateways;

    /**
     * Gets the ApplicationGatewaysInner object to access its operations.
     *
     * @return the ApplicationGatewaysInner object.
     */
    public ApplicationGatewaysInner applicationGateways() {
        return this.applicationGateways;
    }

    /** The ApplicationSecurityGroupsInner object to access its operations. */
    private final ApplicationSecurityGroupsInner applicationSecurityGroups;

    /**
     * Gets the ApplicationSecurityGroupsInner object to access its operations.
     *
     * @return the ApplicationSecurityGroupsInner object.
     */
    public ApplicationSecurityGroupsInner applicationSecurityGroups() {
        return this.applicationSecurityGroups;
    }

    /** The AvailableDelegationsInner object to access its operations. */
    private final AvailableDelegationsInner availableDelegations;

    /**
     * Gets the AvailableDelegationsInner object to access its operations.
     *
     * @return the AvailableDelegationsInner object.
     */
    public AvailableDelegationsInner availableDelegations() {
        return this.availableDelegations;
    }

    /** The AvailableResourceGroupDelegationsInner object to access its operations. */
    private final AvailableResourceGroupDelegationsInner availableResourceGroupDelegations;

    /**
     * Gets the AvailableResourceGroupDelegationsInner object to access its operations.
     *
     * @return the AvailableResourceGroupDelegationsInner object.
     */
    public AvailableResourceGroupDelegationsInner availableResourceGroupDelegations() {
        return this.availableResourceGroupDelegations;
    }

    /** The AzureFirewallsInner object to access its operations. */
    private final AzureFirewallsInner azureFirewalls;

    /**
     * Gets the AzureFirewallsInner object to access its operations.
     *
     * @return the AzureFirewallsInner object.
     */
    public AzureFirewallsInner azureFirewalls() {
        return this.azureFirewalls;
    }

    /** The AzureFirewallFqdnTagsInner object to access its operations. */
    private final AzureFirewallFqdnTagsInner azureFirewallFqdnTags;

    /**
     * Gets the AzureFirewallFqdnTagsInner object to access its operations.
     *
     * @return the AzureFirewallFqdnTagsInner object.
     */
    public AzureFirewallFqdnTagsInner azureFirewallFqdnTags() {
        return this.azureFirewallFqdnTags;
    }

    /** The BastionHostsInner object to access its operations. */
    private final BastionHostsInner bastionHosts;

    /**
     * Gets the BastionHostsInner object to access its operations.
     *
     * @return the BastionHostsInner object.
     */
    public BastionHostsInner bastionHosts() {
        return this.bastionHosts;
    }

    /** The DdosCustomPoliciesInner object to access its operations. */
    private final DdosCustomPoliciesInner ddosCustomPolicies;

    /**
     * Gets the DdosCustomPoliciesInner object to access its operations.
     *
     * @return the DdosCustomPoliciesInner object.
     */
    public DdosCustomPoliciesInner ddosCustomPolicies() {
        return this.ddosCustomPolicies;
    }

    /** The DdosProtectionPlansInner object to access its operations. */
    private final DdosProtectionPlansInner ddosProtectionPlans;

    /**
     * Gets the DdosProtectionPlansInner object to access its operations.
     *
     * @return the DdosProtectionPlansInner object.
     */
    public DdosProtectionPlansInner ddosProtectionPlans() {
        return this.ddosProtectionPlans;
    }

    /** The AvailableEndpointServicesInner object to access its operations. */
    private final AvailableEndpointServicesInner availableEndpointServices;

    /**
     * Gets the AvailableEndpointServicesInner object to access its operations.
     *
     * @return the AvailableEndpointServicesInner object.
     */
    public AvailableEndpointServicesInner availableEndpointServices() {
        return this.availableEndpointServices;
    }

    /** The ExpressRouteCircuitAuthorizationsInner object to access its operations. */
    private final ExpressRouteCircuitAuthorizationsInner expressRouteCircuitAuthorizations;

    /**
     * Gets the ExpressRouteCircuitAuthorizationsInner object to access its operations.
     *
     * @return the ExpressRouteCircuitAuthorizationsInner object.
     */
    public ExpressRouteCircuitAuthorizationsInner expressRouteCircuitAuthorizations() {
        return this.expressRouteCircuitAuthorizations;
    }

    /** The ExpressRouteCircuitPeeringsInner object to access its operations. */
    private final ExpressRouteCircuitPeeringsInner expressRouteCircuitPeerings;

    /**
     * Gets the ExpressRouteCircuitPeeringsInner object to access its operations.
     *
     * @return the ExpressRouteCircuitPeeringsInner object.
     */
    public ExpressRouteCircuitPeeringsInner expressRouteCircuitPeerings() {
        return this.expressRouteCircuitPeerings;
    }

    /** The ExpressRouteCircuitConnectionsInner object to access its operations. */
    private final ExpressRouteCircuitConnectionsInner expressRouteCircuitConnections;

    /**
     * Gets the ExpressRouteCircuitConnectionsInner object to access its operations.
     *
     * @return the ExpressRouteCircuitConnectionsInner object.
     */
    public ExpressRouteCircuitConnectionsInner expressRouteCircuitConnections() {
        return this.expressRouteCircuitConnections;
    }

    /** The PeerExpressRouteCircuitConnectionsInner object to access its operations. */
    private final PeerExpressRouteCircuitConnectionsInner peerExpressRouteCircuitConnections;

    /**
     * Gets the PeerExpressRouteCircuitConnectionsInner object to access its operations.
     *
     * @return the PeerExpressRouteCircuitConnectionsInner object.
     */
    public PeerExpressRouteCircuitConnectionsInner peerExpressRouteCircuitConnections() {
        return this.peerExpressRouteCircuitConnections;
    }

    /** The ExpressRouteCircuitsInner object to access its operations. */
    private final ExpressRouteCircuitsInner expressRouteCircuits;

    /**
     * Gets the ExpressRouteCircuitsInner object to access its operations.
     *
     * @return the ExpressRouteCircuitsInner object.
     */
    public ExpressRouteCircuitsInner expressRouteCircuits() {
        return this.expressRouteCircuits;
    }

    /** The ExpressRouteServiceProvidersInner object to access its operations. */
    private final ExpressRouteServiceProvidersInner expressRouteServiceProviders;

    /**
     * Gets the ExpressRouteServiceProvidersInner object to access its operations.
     *
     * @return the ExpressRouteServiceProvidersInner object.
     */
    public ExpressRouteServiceProvidersInner expressRouteServiceProviders() {
        return this.expressRouteServiceProviders;
    }

    /** The ExpressRouteCrossConnectionsInner object to access its operations. */
    private final ExpressRouteCrossConnectionsInner expressRouteCrossConnections;

    /**
     * Gets the ExpressRouteCrossConnectionsInner object to access its operations.
     *
     * @return the ExpressRouteCrossConnectionsInner object.
     */
    public ExpressRouteCrossConnectionsInner expressRouteCrossConnections() {
        return this.expressRouteCrossConnections;
    }

    /** The ExpressRouteCrossConnectionPeeringsInner object to access its operations. */
    private final ExpressRouteCrossConnectionPeeringsInner expressRouteCrossConnectionPeerings;

    /**
     * Gets the ExpressRouteCrossConnectionPeeringsInner object to access its operations.
     *
     * @return the ExpressRouteCrossConnectionPeeringsInner object.
     */
    public ExpressRouteCrossConnectionPeeringsInner expressRouteCrossConnectionPeerings() {
        return this.expressRouteCrossConnectionPeerings;
    }

    /** The ExpressRouteGatewaysInner object to access its operations. */
    private final ExpressRouteGatewaysInner expressRouteGateways;

    /**
     * Gets the ExpressRouteGatewaysInner object to access its operations.
     *
     * @return the ExpressRouteGatewaysInner object.
     */
    public ExpressRouteGatewaysInner expressRouteGateways() {
        return this.expressRouteGateways;
    }

    /** The ExpressRouteConnectionsInner object to access its operations. */
    private final ExpressRouteConnectionsInner expressRouteConnections;

    /**
     * Gets the ExpressRouteConnectionsInner object to access its operations.
     *
     * @return the ExpressRouteConnectionsInner object.
     */
    public ExpressRouteConnectionsInner expressRouteConnections() {
        return this.expressRouteConnections;
    }

    /** The ExpressRoutePortsLocationsInner object to access its operations. */
    private final ExpressRoutePortsLocationsInner expressRoutePortsLocations;

    /**
     * Gets the ExpressRoutePortsLocationsInner object to access its operations.
     *
     * @return the ExpressRoutePortsLocationsInner object.
     */
    public ExpressRoutePortsLocationsInner expressRoutePortsLocations() {
        return this.expressRoutePortsLocations;
    }

    /** The ExpressRoutePortsInner object to access its operations. */
    private final ExpressRoutePortsInner expressRoutePorts;

    /**
     * Gets the ExpressRoutePortsInner object to access its operations.
     *
     * @return the ExpressRoutePortsInner object.
     */
    public ExpressRoutePortsInner expressRoutePorts() {
        return this.expressRoutePorts;
    }

    /** The ExpressRouteLinksInner object to access its operations. */
    private final ExpressRouteLinksInner expressRouteLinks;

    /**
     * Gets the ExpressRouteLinksInner object to access its operations.
     *
     * @return the ExpressRouteLinksInner object.
     */
    public ExpressRouteLinksInner expressRouteLinks() {
        return this.expressRouteLinks;
    }

    /** The FirewallPoliciesInner object to access its operations. */
    private final FirewallPoliciesInner firewallPolicies;

    /**
     * Gets the FirewallPoliciesInner object to access its operations.
     *
     * @return the FirewallPoliciesInner object.
     */
    public FirewallPoliciesInner firewallPolicies() {
        return this.firewallPolicies;
    }

    /** The FirewallPolicyRuleGroupsInner object to access its operations. */
    private final FirewallPolicyRuleGroupsInner firewallPolicyRuleGroups;

    /**
     * Gets the FirewallPolicyRuleGroupsInner object to access its operations.
     *
     * @return the FirewallPolicyRuleGroupsInner object.
     */
    public FirewallPolicyRuleGroupsInner firewallPolicyRuleGroups() {
        return this.firewallPolicyRuleGroups;
    }

    /** The LoadBalancersInner object to access its operations. */
    private final LoadBalancersInner loadBalancers;

    /**
     * Gets the LoadBalancersInner object to access its operations.
     *
     * @return the LoadBalancersInner object.
     */
    public LoadBalancersInner loadBalancers() {
        return this.loadBalancers;
    }

    /** The LoadBalancerBackendAddressPoolsInner object to access its operations. */
    private final LoadBalancerBackendAddressPoolsInner loadBalancerBackendAddressPools;

    /**
     * Gets the LoadBalancerBackendAddressPoolsInner object to access its operations.
     *
     * @return the LoadBalancerBackendAddressPoolsInner object.
     */
    public LoadBalancerBackendAddressPoolsInner loadBalancerBackendAddressPools() {
        return this.loadBalancerBackendAddressPools;
    }

    /** The LoadBalancerFrontendIPConfigurationsInner object to access its operations. */
    private final LoadBalancerFrontendIPConfigurationsInner loadBalancerFrontendIPConfigurations;

    /**
     * Gets the LoadBalancerFrontendIPConfigurationsInner object to access its operations.
     *
     * @return the LoadBalancerFrontendIPConfigurationsInner object.
     */
    public LoadBalancerFrontendIPConfigurationsInner loadBalancerFrontendIPConfigurations() {
        return this.loadBalancerFrontendIPConfigurations;
    }

    /** The InboundNatRulesInner object to access its operations. */
    private final InboundNatRulesInner inboundNatRules;

    /**
     * Gets the InboundNatRulesInner object to access its operations.
     *
     * @return the InboundNatRulesInner object.
     */
    public InboundNatRulesInner inboundNatRules() {
        return this.inboundNatRules;
    }

    /** The LoadBalancerLoadBalancingRulesInner object to access its operations. */
    private final LoadBalancerLoadBalancingRulesInner loadBalancerLoadBalancingRules;

    /**
     * Gets the LoadBalancerLoadBalancingRulesInner object to access its operations.
     *
     * @return the LoadBalancerLoadBalancingRulesInner object.
     */
    public LoadBalancerLoadBalancingRulesInner loadBalancerLoadBalancingRules() {
        return this.loadBalancerLoadBalancingRules;
    }

    /** The LoadBalancerOutboundRulesInner object to access its operations. */
    private final LoadBalancerOutboundRulesInner loadBalancerOutboundRules;

    /**
     * Gets the LoadBalancerOutboundRulesInner object to access its operations.
     *
     * @return the LoadBalancerOutboundRulesInner object.
     */
    public LoadBalancerOutboundRulesInner loadBalancerOutboundRules() {
        return this.loadBalancerOutboundRules;
    }

    /** The LoadBalancerNetworkInterfacesInner object to access its operations. */
    private final LoadBalancerNetworkInterfacesInner loadBalancerNetworkInterfaces;

    /**
     * Gets the LoadBalancerNetworkInterfacesInner object to access its operations.
     *
     * @return the LoadBalancerNetworkInterfacesInner object.
     */
    public LoadBalancerNetworkInterfacesInner loadBalancerNetworkInterfaces() {
        return this.loadBalancerNetworkInterfaces;
    }

    /** The LoadBalancerProbesInner object to access its operations. */
    private final LoadBalancerProbesInner loadBalancerProbes;

    /**
     * Gets the LoadBalancerProbesInner object to access its operations.
     *
     * @return the LoadBalancerProbesInner object.
     */
    public LoadBalancerProbesInner loadBalancerProbes() {
        return this.loadBalancerProbes;
    }

    /** The NatGatewaysInner object to access its operations. */
    private final NatGatewaysInner natGateways;

    /**
     * Gets the NatGatewaysInner object to access its operations.
     *
     * @return the NatGatewaysInner object.
     */
    public NatGatewaysInner natGateways() {
        return this.natGateways;
    }

    /** The NetworkInterfacesInner object to access its operations. */
    private final NetworkInterfacesInner networkInterfaces;

    /**
     * Gets the NetworkInterfacesInner object to access its operations.
     *
     * @return the NetworkInterfacesInner object.
     */
    public NetworkInterfacesInner networkInterfaces() {
        return this.networkInterfaces;
    }

    /** The NetworkInterfaceIPConfigurationsInner object to access its operations. */
    private final NetworkInterfaceIPConfigurationsInner networkInterfaceIPConfigurations;

    /**
     * Gets the NetworkInterfaceIPConfigurationsInner object to access its operations.
     *
     * @return the NetworkInterfaceIPConfigurationsInner object.
     */
    public NetworkInterfaceIPConfigurationsInner networkInterfaceIPConfigurations() {
        return this.networkInterfaceIPConfigurations;
    }

    /** The NetworkInterfaceLoadBalancersInner object to access its operations. */
    private final NetworkInterfaceLoadBalancersInner networkInterfaceLoadBalancers;

    /**
     * Gets the NetworkInterfaceLoadBalancersInner object to access its operations.
     *
     * @return the NetworkInterfaceLoadBalancersInner object.
     */
    public NetworkInterfaceLoadBalancersInner networkInterfaceLoadBalancers() {
        return this.networkInterfaceLoadBalancers;
    }

    /** The NetworkInterfaceTapConfigurationsInner object to access its operations. */
    private final NetworkInterfaceTapConfigurationsInner networkInterfaceTapConfigurations;

    /**
     * Gets the NetworkInterfaceTapConfigurationsInner object to access its operations.
     *
     * @return the NetworkInterfaceTapConfigurationsInner object.
     */
    public NetworkInterfaceTapConfigurationsInner networkInterfaceTapConfigurations() {
        return this.networkInterfaceTapConfigurations;
    }

    /** The NetworkProfilesInner object to access its operations. */
    private final NetworkProfilesInner networkProfiles;

    /**
     * Gets the NetworkProfilesInner object to access its operations.
     *
     * @return the NetworkProfilesInner object.
     */
    public NetworkProfilesInner networkProfiles() {
        return this.networkProfiles;
    }

    /** The NetworkSecurityGroupsInner object to access its operations. */
    private final NetworkSecurityGroupsInner networkSecurityGroups;

    /**
     * Gets the NetworkSecurityGroupsInner object to access its operations.
     *
     * @return the NetworkSecurityGroupsInner object.
     */
    public NetworkSecurityGroupsInner networkSecurityGroups() {
        return this.networkSecurityGroups;
    }

    /** The SecurityRulesInner object to access its operations. */
    private final SecurityRulesInner securityRules;

    /**
     * Gets the SecurityRulesInner object to access its operations.
     *
     * @return the SecurityRulesInner object.
     */
    public SecurityRulesInner securityRules() {
        return this.securityRules;
    }

    /** The DefaultSecurityRulesInner object to access its operations. */
    private final DefaultSecurityRulesInner defaultSecurityRules;

    /**
     * Gets the DefaultSecurityRulesInner object to access its operations.
     *
     * @return the DefaultSecurityRulesInner object.
     */
    public DefaultSecurityRulesInner defaultSecurityRules() {
        return this.defaultSecurityRules;
    }

    /** The NetworkWatchersInner object to access its operations. */
    private final NetworkWatchersInner networkWatchers;

    /**
     * Gets the NetworkWatchersInner object to access its operations.
     *
     * @return the NetworkWatchersInner object.
     */
    public NetworkWatchersInner networkWatchers() {
        return this.networkWatchers;
    }

    /** The PacketCapturesInner object to access its operations. */
    private final PacketCapturesInner packetCaptures;

    /**
     * Gets the PacketCapturesInner object to access its operations.
     *
     * @return the PacketCapturesInner object.
     */
    public PacketCapturesInner packetCaptures() {
        return this.packetCaptures;
    }

    /** The ConnectionMonitorsInner object to access its operations. */
    private final ConnectionMonitorsInner connectionMonitors;

    /**
     * Gets the ConnectionMonitorsInner object to access its operations.
     *
     * @return the ConnectionMonitorsInner object.
     */
    public ConnectionMonitorsInner connectionMonitors() {
        return this.connectionMonitors;
    }

    /** The OperationsInner object to access its operations. */
    private final OperationsInner operations;

    /**
     * Gets the OperationsInner object to access its operations.
     *
     * @return the OperationsInner object.
     */
    public OperationsInner operations() {
        return this.operations;
    }

    /** The PrivateEndpointsInner object to access its operations. */
    private final PrivateEndpointsInner privateEndpoints;

    /**
     * Gets the PrivateEndpointsInner object to access its operations.
     *
     * @return the PrivateEndpointsInner object.
     */
    public PrivateEndpointsInner privateEndpoints() {
        return this.privateEndpoints;
    }

    /** The AvailablePrivateEndpointTypesInner object to access its operations. */
    private final AvailablePrivateEndpointTypesInner availablePrivateEndpointTypes;

    /**
     * Gets the AvailablePrivateEndpointTypesInner object to access its operations.
     *
     * @return the AvailablePrivateEndpointTypesInner object.
     */
    public AvailablePrivateEndpointTypesInner availablePrivateEndpointTypes() {
        return this.availablePrivateEndpointTypes;
    }

    /** The PrivateLinkServicesInner object to access its operations. */
    private final PrivateLinkServicesInner privateLinkServices;

    /**
     * Gets the PrivateLinkServicesInner object to access its operations.
     *
     * @return the PrivateLinkServicesInner object.
     */
    public PrivateLinkServicesInner privateLinkServices() {
        return this.privateLinkServices;
    }

    /** The PublicIPAddressesInner object to access its operations. */
    private final PublicIPAddressesInner publicIPAddresses;

    /**
     * Gets the PublicIPAddressesInner object to access its operations.
     *
     * @return the PublicIPAddressesInner object.
     */
    public PublicIPAddressesInner publicIPAddresses() {
        return this.publicIPAddresses;
    }

    /** The PublicIPPrefixesInner object to access its operations. */
    private final PublicIPPrefixesInner publicIPPrefixes;

    /**
     * Gets the PublicIPPrefixesInner object to access its operations.
     *
     * @return the PublicIPPrefixesInner object.
     */
    public PublicIPPrefixesInner publicIPPrefixes() {
        return this.publicIPPrefixes;
    }

    /** The RouteFiltersInner object to access its operations. */
    private final RouteFiltersInner routeFilters;

    /**
     * Gets the RouteFiltersInner object to access its operations.
     *
     * @return the RouteFiltersInner object.
     */
    public RouteFiltersInner routeFilters() {
        return this.routeFilters;
    }

    /** The RouteFilterRulesInner object to access its operations. */
    private final RouteFilterRulesInner routeFilterRules;

    /**
     * Gets the RouteFilterRulesInner object to access its operations.
     *
     * @return the RouteFilterRulesInner object.
     */
    public RouteFilterRulesInner routeFilterRules() {
        return this.routeFilterRules;
    }

    /** The RouteTablesInner object to access its operations. */
    private final RouteTablesInner routeTables;

    /**
     * Gets the RouteTablesInner object to access its operations.
     *
     * @return the RouteTablesInner object.
     */
    public RouteTablesInner routeTables() {
        return this.routeTables;
    }

    /** The RoutesInner object to access its operations. */
    private final RoutesInner routes;

    /**
     * Gets the RoutesInner object to access its operations.
     *
     * @return the RoutesInner object.
     */
    public RoutesInner routes() {
        return this.routes;
    }

    /** The BgpServiceCommunitiesInner object to access its operations. */
    private final BgpServiceCommunitiesInner bgpServiceCommunities;

    /**
     * Gets the BgpServiceCommunitiesInner object to access its operations.
     *
     * @return the BgpServiceCommunitiesInner object.
     */
    public BgpServiceCommunitiesInner bgpServiceCommunities() {
        return this.bgpServiceCommunities;
    }

    /** The ServiceEndpointPoliciesInner object to access its operations. */
    private final ServiceEndpointPoliciesInner serviceEndpointPolicies;

    /**
     * Gets the ServiceEndpointPoliciesInner object to access its operations.
     *
     * @return the ServiceEndpointPoliciesInner object.
     */
    public ServiceEndpointPoliciesInner serviceEndpointPolicies() {
        return this.serviceEndpointPolicies;
    }

    /** The ServiceEndpointPolicyDefinitionsInner object to access its operations. */
    private final ServiceEndpointPolicyDefinitionsInner serviceEndpointPolicyDefinitions;

    /**
     * Gets the ServiceEndpointPolicyDefinitionsInner object to access its operations.
     *
     * @return the ServiceEndpointPolicyDefinitionsInner object.
     */
    public ServiceEndpointPolicyDefinitionsInner serviceEndpointPolicyDefinitions() {
        return this.serviceEndpointPolicyDefinitions;
    }

    /** The ServiceTagsInner object to access its operations. */
    private final ServiceTagsInner serviceTags;

    /**
     * Gets the ServiceTagsInner object to access its operations.
     *
     * @return the ServiceTagsInner object.
     */
    public ServiceTagsInner serviceTags() {
        return this.serviceTags;
    }

    /** The UsagesInner object to access its operations. */
    private final UsagesInner usages;

    /**
     * Gets the UsagesInner object to access its operations.
     *
     * @return the UsagesInner object.
     */
    public UsagesInner usages() {
        return this.usages;
    }

    /** The VirtualNetworksInner object to access its operations. */
    private final VirtualNetworksInner virtualNetworks;

    /**
     * Gets the VirtualNetworksInner object to access its operations.
     *
     * @return the VirtualNetworksInner object.
     */
    public VirtualNetworksInner virtualNetworks() {
        return this.virtualNetworks;
    }

    /** The SubnetsInner object to access its operations. */
    private final SubnetsInner subnets;

    /**
     * Gets the SubnetsInner object to access its operations.
     *
     * @return the SubnetsInner object.
     */
    public SubnetsInner subnets() {
        return this.subnets;
    }

    /** The ResourceNavigationLinksInner object to access its operations. */
    private final ResourceNavigationLinksInner resourceNavigationLinks;

    /**
     * Gets the ResourceNavigationLinksInner object to access its operations.
     *
     * @return the ResourceNavigationLinksInner object.
     */
    public ResourceNavigationLinksInner resourceNavigationLinks() {
        return this.resourceNavigationLinks;
    }

    /** The ServiceAssociationLinksInner object to access its operations. */
    private final ServiceAssociationLinksInner serviceAssociationLinks;

    /**
     * Gets the ServiceAssociationLinksInner object to access its operations.
     *
     * @return the ServiceAssociationLinksInner object.
     */
    public ServiceAssociationLinksInner serviceAssociationLinks() {
        return this.serviceAssociationLinks;
    }

    /** The VirtualNetworkPeeringsInner object to access its operations. */
    private final VirtualNetworkPeeringsInner virtualNetworkPeerings;

    /**
     * Gets the VirtualNetworkPeeringsInner object to access its operations.
     *
     * @return the VirtualNetworkPeeringsInner object.
     */
    public VirtualNetworkPeeringsInner virtualNetworkPeerings() {
        return this.virtualNetworkPeerings;
    }

    /** The VirtualNetworkGatewaysInner object to access its operations. */
    private final VirtualNetworkGatewaysInner virtualNetworkGateways;

    /**
     * Gets the VirtualNetworkGatewaysInner object to access its operations.
     *
     * @return the VirtualNetworkGatewaysInner object.
     */
    public VirtualNetworkGatewaysInner virtualNetworkGateways() {
        return this.virtualNetworkGateways;
    }

    /** The VirtualNetworkGatewayConnectionsInner object to access its operations. */
    private final VirtualNetworkGatewayConnectionsInner virtualNetworkGatewayConnections;

    /**
     * Gets the VirtualNetworkGatewayConnectionsInner object to access its operations.
     *
     * @return the VirtualNetworkGatewayConnectionsInner object.
     */
    public VirtualNetworkGatewayConnectionsInner virtualNetworkGatewayConnections() {
        return this.virtualNetworkGatewayConnections;
    }

    /** The LocalNetworkGatewaysInner object to access its operations. */
    private final LocalNetworkGatewaysInner localNetworkGateways;

    /**
     * Gets the LocalNetworkGatewaysInner object to access its operations.
     *
     * @return the LocalNetworkGatewaysInner object.
     */
    public LocalNetworkGatewaysInner localNetworkGateways() {
        return this.localNetworkGateways;
    }

    /** The VirtualNetworkTapsInner object to access its operations. */
    private final VirtualNetworkTapsInner virtualNetworkTaps;

    /**
     * Gets the VirtualNetworkTapsInner object to access its operations.
     *
     * @return the VirtualNetworkTapsInner object.
     */
    public VirtualNetworkTapsInner virtualNetworkTaps() {
        return this.virtualNetworkTaps;
    }

    /** The VirtualWansInner object to access its operations. */
    private final VirtualWansInner virtualWans;

    /**
     * Gets the VirtualWansInner object to access its operations.
     *
     * @return the VirtualWansInner object.
     */
    public VirtualWansInner virtualWans() {
        return this.virtualWans;
    }

    /** The VpnSitesInner object to access its operations. */
    private final VpnSitesInner vpnSites;

    /**
     * Gets the VpnSitesInner object to access its operations.
     *
     * @return the VpnSitesInner object.
     */
    public VpnSitesInner vpnSites() {
        return this.vpnSites;
    }

    /** The VpnSiteLinksInner object to access its operations. */
    private final VpnSiteLinksInner vpnSiteLinks;

    /**
     * Gets the VpnSiteLinksInner object to access its operations.
     *
     * @return the VpnSiteLinksInner object.
     */
    public VpnSiteLinksInner vpnSiteLinks() {
        return this.vpnSiteLinks;
    }

    /** The VpnSitesConfigurationsInner object to access its operations. */
    private final VpnSitesConfigurationsInner vpnSitesConfigurations;

    /**
     * Gets the VpnSitesConfigurationsInner object to access its operations.
     *
     * @return the VpnSitesConfigurationsInner object.
     */
    public VpnSitesConfigurationsInner vpnSitesConfigurations() {
        return this.vpnSitesConfigurations;
    }

    /** The VirtualHubsInner object to access its operations. */
    private final VirtualHubsInner virtualHubs;

    /**
     * Gets the VirtualHubsInner object to access its operations.
     *
     * @return the VirtualHubsInner object.
     */
    public VirtualHubsInner virtualHubs() {
        return this.virtualHubs;
    }

    /** The HubVirtualNetworkConnectionsInner object to access its operations. */
    private final HubVirtualNetworkConnectionsInner hubVirtualNetworkConnections;

    /**
     * Gets the HubVirtualNetworkConnectionsInner object to access its operations.
     *
     * @return the HubVirtualNetworkConnectionsInner object.
     */
    public HubVirtualNetworkConnectionsInner hubVirtualNetworkConnections() {
        return this.hubVirtualNetworkConnections;
    }

    /** The VpnGatewaysInner object to access its operations. */
    private final VpnGatewaysInner vpnGateways;

    /**
     * Gets the VpnGatewaysInner object to access its operations.
     *
     * @return the VpnGatewaysInner object.
     */
    public VpnGatewaysInner vpnGateways() {
        return this.vpnGateways;
    }

    /** The VpnConnectionsInner object to access its operations. */
    private final VpnConnectionsInner vpnConnections;

    /**
     * Gets the VpnConnectionsInner object to access its operations.
     *
     * @return the VpnConnectionsInner object.
     */
    public VpnConnectionsInner vpnConnections() {
        return this.vpnConnections;
    }

    /** The VpnSiteLinkConnectionsInner object to access its operations. */
    private final VpnSiteLinkConnectionsInner vpnSiteLinkConnections;

    /**
     * Gets the VpnSiteLinkConnectionsInner object to access its operations.
     *
     * @return the VpnSiteLinkConnectionsInner object.
     */
    public VpnSiteLinkConnectionsInner vpnSiteLinkConnections() {
        return this.vpnSiteLinkConnections;
    }

    /** The VpnLinkConnectionsInner object to access its operations. */
    private final VpnLinkConnectionsInner vpnLinkConnections;

    /**
     * Gets the VpnLinkConnectionsInner object to access its operations.
     *
     * @return the VpnLinkConnectionsInner object.
     */
    public VpnLinkConnectionsInner vpnLinkConnections() {
        return this.vpnLinkConnections;
    }

    /** The P2SVpnServerConfigurationsInner object to access its operations. */
    private final P2SVpnServerConfigurationsInner p2SVpnServerConfigurations;

    /**
     * Gets the P2SVpnServerConfigurationsInner object to access its operations.
     *
     * @return the P2SVpnServerConfigurationsInner object.
     */
    public P2SVpnServerConfigurationsInner p2SVpnServerConfigurations() {
        return this.p2SVpnServerConfigurations;
    }

    /** The P2SVpnGatewaysInner object to access its operations. */
    private final P2SVpnGatewaysInner p2SVpnGateways;

    /**
     * Gets the P2SVpnGatewaysInner object to access its operations.
     *
     * @return the P2SVpnGatewaysInner object.
     */
    public P2SVpnGatewaysInner p2SVpnGateways() {
        return this.p2SVpnGateways;
    }

    /** The WebApplicationFirewallPoliciesInner object to access its operations. */
    private final WebApplicationFirewallPoliciesInner webApplicationFirewallPolicies;

    /**
     * Gets the WebApplicationFirewallPoliciesInner object to access its operations.
     *
     * @return the WebApplicationFirewallPoliciesInner object.
     */
    public WebApplicationFirewallPoliciesInner webApplicationFirewallPolicies() {
        return this.webApplicationFirewallPolicies;
    }

    /** Initializes an instance of NetworkManagementClient client. */
    public NetworkManagementClientImpl() {
        this(
            new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build(),
            AzureEnvironment.AZURE);
    }

    /**
     * Initializes an instance of NetworkManagementClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public NetworkManagementClientImpl(HttpPipeline httpPipeline) {
        this(httpPipeline, AzureEnvironment.AZURE);
    }

    /**
     * Initializes an instance of NetworkManagementClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param environment The Azure environment.
     */
    public NetworkManagementClientImpl(HttpPipeline httpPipeline, AzureEnvironment environment) {
        super(httpPipeline, environment);
        this.httpPipeline = httpPipeline;
        this.applicationGateways = new ApplicationGatewaysInner(this);
        this.applicationSecurityGroups = new ApplicationSecurityGroupsInner(this);
        this.availableDelegations = new AvailableDelegationsInner(this);
        this.availableResourceGroupDelegations = new AvailableResourceGroupDelegationsInner(this);
        this.azureFirewalls = new AzureFirewallsInner(this);
        this.azureFirewallFqdnTags = new AzureFirewallFqdnTagsInner(this);
        this.bastionHosts = new BastionHostsInner(this);
        this.ddosCustomPolicies = new DdosCustomPoliciesInner(this);
        this.ddosProtectionPlans = new DdosProtectionPlansInner(this);
        this.availableEndpointServices = new AvailableEndpointServicesInner(this);
        this.expressRouteCircuitAuthorizations = new ExpressRouteCircuitAuthorizationsInner(this);
        this.expressRouteCircuitPeerings = new ExpressRouteCircuitPeeringsInner(this);
        this.expressRouteCircuitConnections = new ExpressRouteCircuitConnectionsInner(this);
        this.peerExpressRouteCircuitConnections = new PeerExpressRouteCircuitConnectionsInner(this);
        this.expressRouteCircuits = new ExpressRouteCircuitsInner(this);
        this.expressRouteServiceProviders = new ExpressRouteServiceProvidersInner(this);
        this.expressRouteCrossConnections = new ExpressRouteCrossConnectionsInner(this);
        this.expressRouteCrossConnectionPeerings = new ExpressRouteCrossConnectionPeeringsInner(this);
        this.expressRouteGateways = new ExpressRouteGatewaysInner(this);
        this.expressRouteConnections = new ExpressRouteConnectionsInner(this);
        this.expressRoutePortsLocations = new ExpressRoutePortsLocationsInner(this);
        this.expressRoutePorts = new ExpressRoutePortsInner(this);
        this.expressRouteLinks = new ExpressRouteLinksInner(this);
        this.firewallPolicies = new FirewallPoliciesInner(this);
        this.firewallPolicyRuleGroups = new FirewallPolicyRuleGroupsInner(this);
        this.loadBalancers = new LoadBalancersInner(this);
        this.loadBalancerBackendAddressPools = new LoadBalancerBackendAddressPoolsInner(this);
        this.loadBalancerFrontendIPConfigurations = new LoadBalancerFrontendIPConfigurationsInner(this);
        this.inboundNatRules = new InboundNatRulesInner(this);
        this.loadBalancerLoadBalancingRules = new LoadBalancerLoadBalancingRulesInner(this);
        this.loadBalancerOutboundRules = new LoadBalancerOutboundRulesInner(this);
        this.loadBalancerNetworkInterfaces = new LoadBalancerNetworkInterfacesInner(this);
        this.loadBalancerProbes = new LoadBalancerProbesInner(this);
        this.natGateways = new NatGatewaysInner(this);
        this.networkInterfaces = new NetworkInterfacesInner(this);
        this.networkInterfaceIPConfigurations = new NetworkInterfaceIPConfigurationsInner(this);
        this.networkInterfaceLoadBalancers = new NetworkInterfaceLoadBalancersInner(this);
        this.networkInterfaceTapConfigurations = new NetworkInterfaceTapConfigurationsInner(this);
        this.networkProfiles = new NetworkProfilesInner(this);
        this.networkSecurityGroups = new NetworkSecurityGroupsInner(this);
        this.securityRules = new SecurityRulesInner(this);
        this.defaultSecurityRules = new DefaultSecurityRulesInner(this);
        this.networkWatchers = new NetworkWatchersInner(this);
        this.packetCaptures = new PacketCapturesInner(this);
        this.connectionMonitors = new ConnectionMonitorsInner(this);
        this.operations = new OperationsInner(this);
        this.privateEndpoints = new PrivateEndpointsInner(this);
        this.availablePrivateEndpointTypes = new AvailablePrivateEndpointTypesInner(this);
        this.privateLinkServices = new PrivateLinkServicesInner(this);
        this.publicIPAddresses = new PublicIPAddressesInner(this);
        this.publicIPPrefixes = new PublicIPPrefixesInner(this);
        this.routeFilters = new RouteFiltersInner(this);
        this.routeFilterRules = new RouteFilterRulesInner(this);
        this.routeTables = new RouteTablesInner(this);
        this.routes = new RoutesInner(this);
        this.bgpServiceCommunities = new BgpServiceCommunitiesInner(this);
        this.serviceEndpointPolicies = new ServiceEndpointPoliciesInner(this);
        this.serviceEndpointPolicyDefinitions = new ServiceEndpointPolicyDefinitionsInner(this);
        this.serviceTags = new ServiceTagsInner(this);
        this.usages = new UsagesInner(this);
        this.virtualNetworks = new VirtualNetworksInner(this);
        this.subnets = new SubnetsInner(this);
        this.resourceNavigationLinks = new ResourceNavigationLinksInner(this);
        this.serviceAssociationLinks = new ServiceAssociationLinksInner(this);
        this.virtualNetworkPeerings = new VirtualNetworkPeeringsInner(this);
        this.virtualNetworkGateways = new VirtualNetworkGatewaysInner(this);
        this.virtualNetworkGatewayConnections = new VirtualNetworkGatewayConnectionsInner(this);
        this.localNetworkGateways = new LocalNetworkGatewaysInner(this);
        this.virtualNetworkTaps = new VirtualNetworkTapsInner(this);
        this.virtualWans = new VirtualWansInner(this);
        this.vpnSites = new VpnSitesInner(this);
        this.vpnSiteLinks = new VpnSiteLinksInner(this);
        this.vpnSitesConfigurations = new VpnSitesConfigurationsInner(this);
        this.virtualHubs = new VirtualHubsInner(this);
        this.hubVirtualNetworkConnections = new HubVirtualNetworkConnectionsInner(this);
        this.vpnGateways = new VpnGatewaysInner(this);
        this.vpnConnections = new VpnConnectionsInner(this);
        this.vpnSiteLinkConnections = new VpnSiteLinkConnectionsInner(this);
        this.vpnLinkConnections = new VpnLinkConnectionsInner(this);
        this.p2SVpnServerConfigurations = new P2SVpnServerConfigurationsInner(this);
        this.p2SVpnGateways = new P2SVpnGatewaysInner(this);
        this.webApplicationFirewallPolicies = new WebApplicationFirewallPoliciesInner(this);
        this.service =
            RestProxy.create(NetworkManagementClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for NetworkManagementClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkManagementCli")
    private interface NetworkManagementClientService {
        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}"
                + "/CheckDnsNameAvailability")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DnsNameAvailabilityResultInner>> checkDnsNameAvailability(
            @HostParam("$host") String host,
            @PathParam("location") String location,
            @QueryParam("domainNameLabel") String domainNameLabel,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/virtualWans/{virtualWANName}/supportedSecurityProviders")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<VirtualWanSecurityProvidersInner>> supportedSecurityProviders(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualWANName") String virtualWANName,
            @QueryParam("api-version") String apiVersion,
            Context context);
    }

    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
     *
     * @param location The location of the domain name.
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression:
     *     ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the CheckDnsNameAvailability API service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DnsNameAvailabilityResultInner>> checkDnsNameAvailabilityWithResponseAsync(
        String location, String domainNameLabel) {
        final String apiVersion = "2019-06-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .checkDnsNameAvailability(
                            this.getHost(), location, domainNameLabel, apiVersion, this.getSubscriptionId(), context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.getContext())));
    }

    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
     *
     * @param location The location of the domain name.
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression:
     *     ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the CheckDnsNameAvailability API service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DnsNameAvailabilityResultInner> checkDnsNameAvailabilityAsync(String location, String domainNameLabel) {
        return checkDnsNameAvailabilityWithResponseAsync(location, domainNameLabel)
            .flatMap(
                (SimpleResponse<DnsNameAvailabilityResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
     *
     * @param location The location of the domain name.
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression:
     *     ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the CheckDnsNameAvailability API service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsNameAvailabilityResultInner checkDnsNameAvailability(String location, String domainNameLabel) {
        return checkDnsNameAvailabilityAsync(location, domainNameLabel).block();
    }

    /**
     * Gives the supported security providers for the virtual wan.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SecurityProviders.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VirtualWanSecurityProvidersInner>> supportedSecurityProvidersWithResponseAsync(
        String resourceGroupName, String virtualWANName) {
        final String apiVersion = "2019-06-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .supportedSecurityProviders(
                            this.getHost(),
                            this.getSubscriptionId(),
                            resourceGroupName,
                            virtualWANName,
                            apiVersion,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.getContext())));
    }

    /**
     * Gives the supported security providers for the virtual wan.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SecurityProviders.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VirtualWanSecurityProvidersInner> supportedSecurityProvidersAsync(
        String resourceGroupName, String virtualWANName) {
        return supportedSecurityProvidersWithResponseAsync(resourceGroupName, virtualWANName)
            .flatMap(
                (SimpleResponse<VirtualWanSecurityProvidersInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gives the supported security providers for the virtual wan.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SecurityProviders.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualWanSecurityProvidersInner supportedSecurityProviders(
        String resourceGroupName, String virtualWANName) {
        return supportedSecurityProvidersAsync(resourceGroupName, virtualWANName).block();
    }
}
