/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2018_11_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.network.v2018_11_01.implementation.ConnectionMonitorResultInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.network.v2018_11_01.implementation.NetworkManager;
import java.util.Map;
import org.joda.time.DateTime;

/**
 * Type representing ConnectionMonitorResult.
 */
public interface ConnectionMonitorResult extends HasInner<ConnectionMonitorResultInner>, Indexable, Refreshable<ConnectionMonitorResult>, Updatable<ConnectionMonitorResult.Update>, HasManager<NetworkManager> {
    /**
     * @return the autoStart value.
     */
    Boolean autoStart();

    /**
     * @return the destination value.
     */
    ConnectionMonitorDestination destination();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the monitoringIntervalInSeconds value.
     */
    Integer monitoringIntervalInSeconds();

    /**
     * @return the monitoringStatus value.
     */
    String monitoringStatus();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the source value.
     */
    ConnectionMonitorSource source();

    /**
     * @return the startTime value.
     */
    DateTime startTime();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ConnectionMonitorResult definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithNetworkWatcher, DefinitionStages.WithDestination, DefinitionStages.WithSource, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ConnectionMonitorResult definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ConnectionMonitorResult definition.
         */
        interface Blank extends WithNetworkWatcher {
        }

        /**
         * The stage of the connectionmonitorresult definition allowing to specify NetworkWatcher.
         */
        interface WithNetworkWatcher {
           /**
            * Specifies resourceGroupName, networkWatcherName.
            * @param resourceGroupName The name of the resource group containing Network Watcher
            * @param networkWatcherName The name of the Network Watcher resource
            * @return the next definition stage
            */
            WithDestination withExistingNetworkWatcher(String resourceGroupName, String networkWatcherName);
        }

        /**
         * The stage of the connectionmonitorresult definition allowing to specify Destination.
         */
        interface WithDestination {
           /**
            * Specifies destination.
            * @param destination the destination parameter value
            * @return the next definition stage
            */
            WithSource withDestination(ConnectionMonitorDestination destination);
        }

        /**
         * The stage of the connectionmonitorresult definition allowing to specify Source.
         */
        interface WithSource {
           /**
            * Specifies source.
            * @param source the source parameter value
            * @return the next definition stage
            */
            WithCreate withSource(ConnectionMonitorSource source);
        }

        /**
         * The stage of the connectionmonitorresult definition allowing to specify AutoStart.
         */
        interface WithAutoStart {
            /**
             * Specifies autoStart.
             * @param autoStart Determines if the connection monitor will start automatically once created
             * @return the next definition stage
             */
            WithCreate withAutoStart(Boolean autoStart);
        }

        /**
         * The stage of the connectionmonitorresult definition allowing to specify Location.
         */
        interface WithLocation {
            /**
             * Specifies location.
             * @param location Connection monitor location
             * @return the next definition stage
             */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the connectionmonitorresult definition allowing to specify MonitoringIntervalInSeconds.
         */
        interface WithMonitoringIntervalInSeconds {
            /**
             * Specifies monitoringIntervalInSeconds.
             * @param monitoringIntervalInSeconds Monitoring interval in seconds
             * @return the next definition stage
             */
            WithCreate withMonitoringIntervalInSeconds(Integer monitoringIntervalInSeconds);
        }

        /**
         * The stage of the connectionmonitorresult definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Connection monitor tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ConnectionMonitorResult>, DefinitionStages.WithAutoStart, DefinitionStages.WithLocation, DefinitionStages.WithMonitoringIntervalInSeconds, DefinitionStages.WithTags {
        }
    }
    /**
     * The template for a ConnectionMonitorResult update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ConnectionMonitorResult>, UpdateStages.WithAutoStart, UpdateStages.WithLocation, UpdateStages.WithMonitoringIntervalInSeconds, UpdateStages.WithTags {
    }

    /**
     * Grouping of ConnectionMonitorResult update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the connectionmonitorresult update allowing to specify AutoStart.
         */
        interface WithAutoStart {
            /**
             * Specifies autoStart.
             * @param autoStart Determines if the connection monitor will start automatically once created
             * @return the next update stage
             */
            Update withAutoStart(Boolean autoStart);
        }

        /**
         * The stage of the connectionmonitorresult update allowing to specify Location.
         */
        interface WithLocation {
            /**
             * Specifies location.
             * @param location Connection monitor location
             * @return the next update stage
             */
            Update withLocation(String location);
        }

        /**
         * The stage of the connectionmonitorresult update allowing to specify MonitoringIntervalInSeconds.
         */
        interface WithMonitoringIntervalInSeconds {
            /**
             * Specifies monitoringIntervalInSeconds.
             * @param monitoringIntervalInSeconds Monitoring interval in seconds
             * @return the next update stage
             */
            Update withMonitoringIntervalInSeconds(Integer monitoringIntervalInSeconds);
        }

        /**
         * The stage of the connectionmonitorresult update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Connection monitor tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

    }
}
