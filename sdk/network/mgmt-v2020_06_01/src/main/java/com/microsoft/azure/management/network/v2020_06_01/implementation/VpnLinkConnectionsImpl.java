/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.network.v2020_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.network.v2020_06_01.VpnLinkConnections;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.network.v2020_06_01.VpnConnectionVpnGatewayVpnSiteLinkConnectionModel;

class VpnLinkConnectionsImpl extends WrapperImpl<VpnLinkConnectionsInner> implements VpnLinkConnections {
    private final NetworkManager manager;

    VpnLinkConnectionsImpl(NetworkManager manager) {
        super(manager.inner().vpnLinkConnections());
        this.manager = manager;
    }

    public NetworkManager manager() {
        return this.manager;
    }

    private VpnConnectionVpnGatewayVpnSiteLinkConnectionModelImpl wrapModel(VpnSiteLinkConnectionInner inner) {
        return  new VpnConnectionVpnGatewayVpnSiteLinkConnectionModelImpl(inner, manager());
    }

    @Override
    public Observable<VpnConnectionVpnGatewayVpnSiteLinkConnectionModel> listByVpnConnectionAsync(final String resourceGroupName, final String gatewayName, final String connectionName) {
        VpnLinkConnectionsInner client = this.inner();
        return client.listByVpnConnectionAsync(resourceGroupName, gatewayName, connectionName)
        .flatMapIterable(new Func1<Page<VpnSiteLinkConnectionInner>, Iterable<VpnSiteLinkConnectionInner>>() {
            @Override
            public Iterable<VpnSiteLinkConnectionInner> call(Page<VpnSiteLinkConnectionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VpnSiteLinkConnectionInner, VpnConnectionVpnGatewayVpnSiteLinkConnectionModel>() {
            @Override
            public VpnConnectionVpnGatewayVpnSiteLinkConnectionModel call(VpnSiteLinkConnectionInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
