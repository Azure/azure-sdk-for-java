/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in HubRouteTables.
 */
public class HubRouteTablesInner {
    /** The Retrofit service to perform REST calls. */
    private HubRouteTablesService service;
    /** The service client containing this operation class. */
    private NetworkManagementClientImpl client;

    /**
     * Initializes an instance of HubRouteTablesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public HubRouteTablesInner(Retrofit retrofit, NetworkManagementClientImpl client) {
        this.service = retrofit.create(HubRouteTablesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for HubRouteTables to be
     * used by Retrofit to perform actually REST calls.
     */
    interface HubRouteTablesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_06_01.HubRouteTables createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubRouteTables/{routeTableName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualHubName") String virtualHubName, @Path("routeTableName") String routeTableName, @Query("api-version") String apiVersion, @Body HubRouteTableInner routeTableParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_06_01.HubRouteTables beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubRouteTables/{routeTableName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualHubName") String virtualHubName, @Path("routeTableName") String routeTableName, @Query("api-version") String apiVersion, @Body HubRouteTableInner routeTableParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_06_01.HubRouteTables get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubRouteTables/{routeTableName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualHubName") String virtualHubName, @Path("routeTableName") String routeTableName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_06_01.HubRouteTables delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubRouteTables/{routeTableName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualHubName") String virtualHubName, @Path("routeTableName") String routeTableName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_06_01.HubRouteTables beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubRouteTables/{routeTableName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualHubName") String virtualHubName, @Path("routeTableName") String routeTableName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_06_01.HubRouteTables list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubRouteTables")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualHubName") String virtualHubName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_06_01.HubRouteTables listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters Parameters supplied to create or update RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HubRouteTableInner object if successful.
     */
    public HubRouteTableInner createOrUpdate(String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTableInner routeTableParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters).toBlocking().last().body();
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters Parameters supplied to create or update RouteTable.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HubRouteTableInner> createOrUpdateAsync(String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTableInner routeTableParameters, final ServiceCallback<HubRouteTableInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters), serviceCallback);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters Parameters supplied to create or update RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<HubRouteTableInner> createOrUpdateAsync(String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTableInner routeTableParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters).map(new Func1<ServiceResponse<HubRouteTableInner>, HubRouteTableInner>() {
            @Override
            public HubRouteTableInner call(ServiceResponse<HubRouteTableInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters Parameters supplied to create or update RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<HubRouteTableInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTableInner routeTableParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualHubName == null) {
            throw new IllegalArgumentException("Parameter virtualHubName is required and cannot be null.");
        }
        if (routeTableName == null) {
            throw new IllegalArgumentException("Parameter routeTableName is required and cannot be null.");
        }
        if (routeTableParameters == null) {
            throw new IllegalArgumentException("Parameter routeTableParameters is required and cannot be null.");
        }
        Validator.validate(routeTableParameters);
        final String apiVersion = "2020-06-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, virtualHubName, routeTableName, apiVersion, routeTableParameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<HubRouteTableInner>() { }.getType());
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters Parameters supplied to create or update RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HubRouteTableInner object if successful.
     */
    public HubRouteTableInner beginCreateOrUpdate(String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTableInner routeTableParameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters).toBlocking().single().body();
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters Parameters supplied to create or update RouteTable.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HubRouteTableInner> beginCreateOrUpdateAsync(String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTableInner routeTableParameters, final ServiceCallback<HubRouteTableInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters), serviceCallback);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters Parameters supplied to create or update RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HubRouteTableInner object
     */
    public Observable<HubRouteTableInner> beginCreateOrUpdateAsync(String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTableInner routeTableParameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters).map(new Func1<ServiceResponse<HubRouteTableInner>, HubRouteTableInner>() {
            @Override
            public HubRouteTableInner call(ServiceResponse<HubRouteTableInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters Parameters supplied to create or update RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HubRouteTableInner object
     */
    public Observable<ServiceResponse<HubRouteTableInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTableInner routeTableParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualHubName == null) {
            throw new IllegalArgumentException("Parameter virtualHubName is required and cannot be null.");
        }
        if (routeTableName == null) {
            throw new IllegalArgumentException("Parameter routeTableName is required and cannot be null.");
        }
        if (routeTableParameters == null) {
            throw new IllegalArgumentException("Parameter routeTableParameters is required and cannot be null.");
        }
        Validator.validate(routeTableParameters);
        final String apiVersion = "2020-06-01";
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, virtualHubName, routeTableName, apiVersion, routeTableParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HubRouteTableInner>>>() {
                @Override
                public Observable<ServiceResponse<HubRouteTableInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<HubRouteTableInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<HubRouteTableInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<HubRouteTableInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<HubRouteTableInner>() { }.getType())
                .register(201, new TypeToken<HubRouteTableInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieves the details of a RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HubRouteTableInner object if successful.
     */
    public HubRouteTableInner get(String resourceGroupName, String virtualHubName, String routeTableName) {
        return getWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName).toBlocking().single().body();
    }

    /**
     * Retrieves the details of a RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HubRouteTableInner> getAsync(String resourceGroupName, String virtualHubName, String routeTableName, final ServiceCallback<HubRouteTableInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName), serviceCallback);
    }

    /**
     * Retrieves the details of a RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HubRouteTableInner object
     */
    public Observable<HubRouteTableInner> getAsync(String resourceGroupName, String virtualHubName, String routeTableName) {
        return getWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName).map(new Func1<ServiceResponse<HubRouteTableInner>, HubRouteTableInner>() {
            @Override
            public HubRouteTableInner call(ServiceResponse<HubRouteTableInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves the details of a RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HubRouteTableInner object
     */
    public Observable<ServiceResponse<HubRouteTableInner>> getWithServiceResponseAsync(String resourceGroupName, String virtualHubName, String routeTableName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualHubName == null) {
            throw new IllegalArgumentException("Parameter virtualHubName is required and cannot be null.");
        }
        if (routeTableName == null) {
            throw new IllegalArgumentException("Parameter routeTableName is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01";
        return service.get(this.client.subscriptionId(), resourceGroupName, virtualHubName, routeTableName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HubRouteTableInner>>>() {
                @Override
                public Observable<ServiceResponse<HubRouteTableInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<HubRouteTableInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<HubRouteTableInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<HubRouteTableInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<HubRouteTableInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String virtualHubName, String routeTableName) {
        deleteWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName).toBlocking().last().body();
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String virtualHubName, String routeTableName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName), serviceCallback);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String virtualHubName, String routeTableName) {
        return deleteWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String virtualHubName, String routeTableName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualHubName == null) {
            throw new IllegalArgumentException("Parameter virtualHubName is required and cannot be null.");
        }
        if (routeTableName == null) {
            throw new IllegalArgumentException("Parameter routeTableName is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01";
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, virtualHubName, routeTableName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String virtualHubName, String routeTableName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName).toBlocking().single().body();
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String virtualHubName, String routeTableName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName), serviceCallback);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String virtualHubName, String routeTableName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, virtualHubName, routeTableName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String virtualHubName, String routeTableName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualHubName == null) {
            throw new IllegalArgumentException("Parameter virtualHubName is required and cannot be null.");
        }
        if (routeTableName == null) {
            throw new IllegalArgumentException("Parameter routeTableName is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01";
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, virtualHubName, routeTableName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;HubRouteTableInner&gt; object if successful.
     */
    public PagedList<HubRouteTableInner> list(final String resourceGroupName, final String virtualHubName) {
        ServiceResponse<Page<HubRouteTableInner>> response = listSinglePageAsync(resourceGroupName, virtualHubName).toBlocking().single();
        return new PagedList<HubRouteTableInner>(response.body()) {
            @Override
            public Page<HubRouteTableInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HubRouteTableInner>> listAsync(final String resourceGroupName, final String virtualHubName, final ListOperationCallback<HubRouteTableInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, virtualHubName),
            new Func1<String, Observable<ServiceResponse<Page<HubRouteTableInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HubRouteTableInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HubRouteTableInner&gt; object
     */
    public Observable<Page<HubRouteTableInner>> listAsync(final String resourceGroupName, final String virtualHubName) {
        return listWithServiceResponseAsync(resourceGroupName, virtualHubName)
            .map(new Func1<ServiceResponse<Page<HubRouteTableInner>>, Page<HubRouteTableInner>>() {
                @Override
                public Page<HubRouteTableInner> call(ServiceResponse<Page<HubRouteTableInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HubRouteTableInner&gt; object
     */
    public Observable<ServiceResponse<Page<HubRouteTableInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String virtualHubName) {
        return listSinglePageAsync(resourceGroupName, virtualHubName)
            .concatMap(new Func1<ServiceResponse<Page<HubRouteTableInner>>, Observable<ServiceResponse<Page<HubRouteTableInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HubRouteTableInner>>> call(ServiceResponse<Page<HubRouteTableInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieves the details of all RouteTables.
     *
    ServiceResponse<PageImpl<HubRouteTableInner>> * @param resourceGroupName The resource group name of the VirtualHub.
    ServiceResponse<PageImpl<HubRouteTableInner>> * @param virtualHubName The name of the VirtualHub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;HubRouteTableInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<HubRouteTableInner>>> listSinglePageAsync(final String resourceGroupName, final String virtualHubName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualHubName == null) {
            throw new IllegalArgumentException("Parameter virtualHubName is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01";
        return service.list(this.client.subscriptionId(), resourceGroupName, virtualHubName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<HubRouteTableInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HubRouteTableInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<HubRouteTableInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<HubRouteTableInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<HubRouteTableInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<HubRouteTableInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<HubRouteTableInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;HubRouteTableInner&gt; object if successful.
     */
    public PagedList<HubRouteTableInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<HubRouteTableInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<HubRouteTableInner>(response.body()) {
            @Override
            public Page<HubRouteTableInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HubRouteTableInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<HubRouteTableInner>> serviceFuture, final ListOperationCallback<HubRouteTableInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<HubRouteTableInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HubRouteTableInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HubRouteTableInner&gt; object
     */
    public Observable<Page<HubRouteTableInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<HubRouteTableInner>>, Page<HubRouteTableInner>>() {
                @Override
                public Page<HubRouteTableInner> call(ServiceResponse<Page<HubRouteTableInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HubRouteTableInner&gt; object
     */
    public Observable<ServiceResponse<Page<HubRouteTableInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<HubRouteTableInner>>, Observable<ServiceResponse<Page<HubRouteTableInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HubRouteTableInner>>> call(ServiceResponse<Page<HubRouteTableInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieves the details of all RouteTables.
     *
    ServiceResponse<PageImpl<HubRouteTableInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;HubRouteTableInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<HubRouteTableInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<HubRouteTableInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HubRouteTableInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<HubRouteTableInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<HubRouteTableInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<HubRouteTableInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<HubRouteTableInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<HubRouteTableInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
