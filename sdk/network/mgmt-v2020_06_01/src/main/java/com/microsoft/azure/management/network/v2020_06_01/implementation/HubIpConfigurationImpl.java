/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_06_01.implementation;

import com.microsoft.azure.management.network.v2020_06_01.HubIpConfiguration;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.network.v2020_06_01.IPAllocationMethod;
import com.microsoft.azure.management.network.v2020_06_01.ProvisioningState;
import com.microsoft.azure.management.network.v2020_06_01.PublicIPAddress;
import com.microsoft.azure.management.network.v2020_06_01.Subnet;

class HubIpConfigurationImpl extends CreatableUpdatableImpl<HubIpConfiguration, HubIpConfigurationInner, HubIpConfigurationImpl> implements HubIpConfiguration, HubIpConfiguration.Definition, HubIpConfiguration.Update {
    private final NetworkManager manager;
    private String resourceGroupName;
    private String virtualHubName;
    private String ipConfigName;

    HubIpConfigurationImpl(String name, NetworkManager manager) {
        super(name, new HubIpConfigurationInner());
        this.manager = manager;
        // Set resource name
        this.ipConfigName = name;
        //
    }

    HubIpConfigurationImpl(HubIpConfigurationInner inner, NetworkManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.ipConfigName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.virtualHubName = IdParsingUtils.getValueFromIdByName(inner.id(), "virtualHubs");
        this.ipConfigName = IdParsingUtils.getValueFromIdByName(inner.id(), "ipConfigurations");
        //
    }

    @Override
    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<HubIpConfiguration> createResourceAsync() {
        VirtualHubIpConfigurationsInner client = this.manager().inner().virtualHubIpConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.virtualHubName, this.ipConfigName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<HubIpConfiguration> updateResourceAsync() {
        VirtualHubIpConfigurationsInner client = this.manager().inner().virtualHubIpConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.virtualHubName, this.ipConfigName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<HubIpConfigurationInner> getInnerAsync() {
        VirtualHubIpConfigurationsInner client = this.manager().inner().virtualHubIpConfigurations();
        return client.getAsync(this.resourceGroupName, this.virtualHubName, this.ipConfigName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String privateIPAddress() {
        return this.inner().privateIPAddress();
    }

    @Override
    public IPAllocationMethod privateIPAllocationMethod() {
        return this.inner().privateIPAllocationMethod();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public PublicIPAddress publicIPAddress() {
        PublicIPAddressInner inner = this.inner().publicIPAddress();
        if (inner != null) {
            return  new PublicIPAddressImpl(inner.name(), inner, manager());
        } else {
            return null;
        }
    }

    @Override
    public Subnet subnet() {
        SubnetInner inner = this.inner().subnet();
        if (inner != null) {
            return  new SubnetImpl(inner, manager());
        } else {
            return null;
        }
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public HubIpConfigurationImpl withExistingVirtualHub(String resourceGroupName, String virtualHubName) {
        this.resourceGroupName = resourceGroupName;
        this.virtualHubName = virtualHubName;
        return this;
    }

    @Override
    public HubIpConfigurationImpl withId(String id) {
        this.inner().withId(id);
        return this;
    }

    @Override
    public HubIpConfigurationImpl withName(String name) {
        this.inner().withName(name);
        return this;
    }

    @Override
    public HubIpConfigurationImpl withPrivateIPAddress(String privateIPAddress) {
        this.inner().withPrivateIPAddress(privateIPAddress);
        return this;
    }

    @Override
    public HubIpConfigurationImpl withPrivateIPAllocationMethod(IPAllocationMethod privateIPAllocationMethod) {
        this.inner().withPrivateIPAllocationMethod(privateIPAllocationMethod);
        return this;
    }

    @Override
    public HubIpConfigurationImpl withPublicIPAddress(PublicIPAddressInner publicIPAddress) {
        this.inner().withPublicIPAddress(publicIPAddress);
        return this;
    }

    @Override
    public HubIpConfigurationImpl withSubnet(SubnetInner subnet) {
        this.inner().withSubnet(subnet);
        return this;
    }

}
