/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.network.v2020_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.network.v2020_06_01.ApplicationGatewayPrivateEndpointConnections;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.network.v2020_06_01.ApplicationGatewayPrivateEndpointConnection;

class ApplicationGatewayPrivateEndpointConnectionsImpl extends WrapperImpl<ApplicationGatewayPrivateEndpointConnectionsInner> implements ApplicationGatewayPrivateEndpointConnections {
    private final NetworkManager manager;

    ApplicationGatewayPrivateEndpointConnectionsImpl(NetworkManager manager) {
        super(manager.inner().applicationGatewayPrivateEndpointConnections());
        this.manager = manager;
    }

    public NetworkManager manager() {
        return this.manager;
    }

    private ApplicationGatewayPrivateEndpointConnectionImpl wrapModel(ApplicationGatewayPrivateEndpointConnectionInner inner) {
        return  new ApplicationGatewayPrivateEndpointConnectionImpl(inner, manager());
    }

    @Override
    public Observable<ApplicationGatewayPrivateEndpointConnection> listAsync(final String resourceGroupName, final String applicationGatewayName) {
        ApplicationGatewayPrivateEndpointConnectionsInner client = this.inner();
        return client.listAsync(resourceGroupName, applicationGatewayName)
        .flatMapIterable(new Func1<Page<ApplicationGatewayPrivateEndpointConnectionInner>, Iterable<ApplicationGatewayPrivateEndpointConnectionInner>>() {
            @Override
            public Iterable<ApplicationGatewayPrivateEndpointConnectionInner> call(Page<ApplicationGatewayPrivateEndpointConnectionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ApplicationGatewayPrivateEndpointConnectionInner, ApplicationGatewayPrivateEndpointConnection>() {
            @Override
            public ApplicationGatewayPrivateEndpointConnection call(ApplicationGatewayPrivateEndpointConnectionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ApplicationGatewayPrivateEndpointConnection> getAsync(String resourceGroupName, String applicationGatewayName, String connectionName) {
        ApplicationGatewayPrivateEndpointConnectionsInner client = this.inner();
        return client.getAsync(resourceGroupName, applicationGatewayName, connectionName)
        .flatMap(new Func1<ApplicationGatewayPrivateEndpointConnectionInner, Observable<ApplicationGatewayPrivateEndpointConnection>>() {
            @Override
            public Observable<ApplicationGatewayPrivateEndpointConnection> call(ApplicationGatewayPrivateEndpointConnectionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ApplicationGatewayPrivateEndpointConnection)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String applicationGatewayName, String connectionName) {
        ApplicationGatewayPrivateEndpointConnectionsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, applicationGatewayName, connectionName).toCompletable();
    }

}
