/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_06_01.implementation;

import com.microsoft.azure.management.network.v2020_06_01.ApplicationGatewayPrivateEndpointConnection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.network.v2020_06_01.PrivateLinkServiceConnectionState;
import com.microsoft.azure.management.network.v2020_06_01.ProvisioningState;
import com.microsoft.azure.management.network.v2020_06_01.PrivateEndpoint;

class ApplicationGatewayPrivateEndpointConnectionImpl extends CreatableUpdatableImpl<ApplicationGatewayPrivateEndpointConnection, ApplicationGatewayPrivateEndpointConnectionInner, ApplicationGatewayPrivateEndpointConnectionImpl> implements ApplicationGatewayPrivateEndpointConnection, ApplicationGatewayPrivateEndpointConnection.Update {
    private final NetworkManager manager;
    private String resourceGroupName;
    private String applicationGatewayName;
    private String connectionName;

    ApplicationGatewayPrivateEndpointConnectionImpl(String name, NetworkManager manager) {
        super(name, new ApplicationGatewayPrivateEndpointConnectionInner());
        this.manager = manager;
        // Set resource name
        this.connectionName = name;
        //
    }

    ApplicationGatewayPrivateEndpointConnectionImpl(ApplicationGatewayPrivateEndpointConnectionInner inner, NetworkManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.connectionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.applicationGatewayName = IdParsingUtils.getValueFromIdByName(inner.id(), "applicationGateways");
        this.connectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateEndpointConnections");
        //
    }

    @Override
    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ApplicationGatewayPrivateEndpointConnection> createResourceAsync() {
        ApplicationGatewayPrivateEndpointConnectionsInner client = this.manager().inner().applicationGatewayPrivateEndpointConnections();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<ApplicationGatewayPrivateEndpointConnection> updateResourceAsync() {
        ApplicationGatewayPrivateEndpointConnectionsInner client = this.manager().inner().applicationGatewayPrivateEndpointConnections();
        return client.updateAsync(this.resourceGroupName, this.applicationGatewayName, this.connectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ApplicationGatewayPrivateEndpointConnectionInner> getInnerAsync() {
        ApplicationGatewayPrivateEndpointConnectionsInner client = this.manager().inner().applicationGatewayPrivateEndpointConnections();
        return client.getAsync(this.resourceGroupName, this.applicationGatewayName, this.connectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String linkIdentifier() {
        return this.inner().linkIdentifier();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public PrivateEndpoint privateEndpoint() {
        PrivateEndpointInner inner = this.inner().privateEndpoint();
        if (inner != null) {
            return  new PrivateEndpointImpl(inner.name(), inner, manager());
        } else {
            return null;
        }
    }

    @Override
    public PrivateLinkServiceConnectionState privateLinkServiceConnectionState() {
        return this.inner().privateLinkServiceConnectionState();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ApplicationGatewayPrivateEndpointConnectionImpl withId(String id) {
        this.inner().withId(id);
        return this;
    }

    @Override
    public ApplicationGatewayPrivateEndpointConnectionImpl withName(String name) {
        this.inner().withName(name);
        return this;
    }

    @Override
    public ApplicationGatewayPrivateEndpointConnectionImpl withPrivateLinkServiceConnectionState(PrivateLinkServiceConnectionState privateLinkServiceConnectionState) {
        this.inner().withPrivateLinkServiceConnectionState(privateLinkServiceConnectionState);
        return this;
    }

}
