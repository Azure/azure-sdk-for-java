/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_06_01.implementation;

import com.microsoft.azure.management.network.v2020_06_01.FlowLog;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.network.v2020_06_01.RetentionPolicyParameters;
import com.microsoft.azure.management.network.v2020_06_01.FlowLogFormatParameters;
import com.microsoft.azure.management.network.v2020_06_01.TrafficAnalyticsProperties;
import com.microsoft.azure.management.network.v2020_06_01.ProvisioningState;

class FlowLogImpl extends CreatableUpdatableImpl<FlowLog, FlowLogInner, FlowLogImpl> implements FlowLog, FlowLog.Definition, FlowLog.Update {
    private final NetworkManager manager;
    private String resourceGroupName;
    private String networkWatcherName;
    private String flowLogName;

    FlowLogImpl(String name, NetworkManager manager) {
        super(name, new FlowLogInner());
        this.manager = manager;
        // Set resource name
        this.flowLogName = name;
        //
    }

    FlowLogImpl(FlowLogInner inner, NetworkManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.flowLogName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.networkWatcherName = IdParsingUtils.getValueFromIdByName(inner.id(), "networkWatchers");
        this.flowLogName = IdParsingUtils.getValueFromIdByName(inner.id(), "flowLogs");
        //
    }

    @Override
    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<FlowLog> createResourceAsync() {
        FlowLogsInner client = this.manager().inner().flowLogs();
        return client.createOrUpdateAsync(this.resourceGroupName, this.networkWatcherName, this.flowLogName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<FlowLog> updateResourceAsync() {
        FlowLogsInner client = this.manager().inner().flowLogs();
        return client.createOrUpdateAsync(this.resourceGroupName, this.networkWatcherName, this.flowLogName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<FlowLogInner> getInnerAsync() {
        FlowLogsInner client = this.manager().inner().flowLogs();
        return client.getAsync(this.resourceGroupName, this.networkWatcherName, this.flowLogName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public Boolean enabled() {
        return this.inner().enabled();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public TrafficAnalyticsProperties flowAnalyticsConfiguration() {
        return this.inner().flowAnalyticsConfiguration();
    }

    @Override
    public FlowLogFormatParameters format() {
        return this.inner().format();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public RetentionPolicyParameters retentionPolicy() {
        return this.inner().retentionPolicy();
    }

    @Override
    public String storageId() {
        return this.inner().storageId();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String targetResourceGuid() {
        return this.inner().targetResourceGuid();
    }

    @Override
    public String targetResourceId() {
        return this.inner().targetResourceId();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public FlowLogImpl withExistingNetworkWatcher(String resourceGroupName, String networkWatcherName) {
        this.resourceGroupName = resourceGroupName;
        this.networkWatcherName = networkWatcherName;
        return this;
    }

    @Override
    public FlowLogImpl withStorageId(String storageId) {
        this.inner().withStorageId(storageId);
        return this;
    }

    @Override
    public FlowLogImpl withTargetResourceId(String targetResourceId) {
        this.inner().withTargetResourceId(targetResourceId);
        return this;
    }

    @Override
    public FlowLogImpl withEnabled(Boolean enabled) {
        this.inner().withEnabled(enabled);
        return this;
    }

    @Override
    public FlowLogImpl withFlowAnalyticsConfiguration(TrafficAnalyticsProperties flowAnalyticsConfiguration) {
        this.inner().withFlowAnalyticsConfiguration(flowAnalyticsConfiguration);
        return this;
    }

    @Override
    public FlowLogImpl withFormat(FlowLogFormatParameters format) {
        this.inner().withFormat(format);
        return this;
    }

    @Override
    public FlowLogImpl withId(String id) {
        this.inner().withId(id);
        return this;
    }

    @Override
    public FlowLogImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public FlowLogImpl withRetentionPolicy(RetentionPolicyParameters retentionPolicy) {
        this.inner().withRetentionPolicy(retentionPolicy);
        return this;
    }

    @Override
    public FlowLogImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
