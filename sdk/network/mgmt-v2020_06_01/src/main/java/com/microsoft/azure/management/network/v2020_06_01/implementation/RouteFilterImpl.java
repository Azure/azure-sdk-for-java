/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_06_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.network.v2020_06_01.RouteFilter;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.network.v2020_06_01.ProvisioningState;
import java.util.ArrayList;
import com.microsoft.azure.management.network.v2020_06_01.ExpressRouteCircuitPeering;
import com.microsoft.azure.management.network.v2020_06_01.RouteFilterRule;

class RouteFilterImpl extends GroupableResourceCoreImpl<RouteFilter, RouteFilterInner, RouteFilterImpl, NetworkManager> implements RouteFilter, RouteFilter.Definition, RouteFilter.Update {
    RouteFilterImpl(String name, RouteFilterInner inner, NetworkManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<RouteFilter> createResourceAsync() {
        RouteFiltersInner client = this.manager().inner().routeFilters();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<RouteFilter> updateResourceAsync() {
        RouteFiltersInner client = this.manager().inner().routeFilters();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<RouteFilterInner> getInnerAsync() {
        RouteFiltersInner client = this.manager().inner().routeFilters();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public List<ExpressRouteCircuitPeering> ipv6Peerings() {
        List<ExpressRouteCircuitPeering> lst = new ArrayList<ExpressRouteCircuitPeering>();
        if (this.inner().ipv6Peerings() != null) {
            for (ExpressRouteCircuitPeeringInner inner : this.inner().ipv6Peerings()) {
                lst.add( new ExpressRouteCircuitPeeringImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public List<ExpressRouteCircuitPeering> peerings() {
        List<ExpressRouteCircuitPeering> lst = new ArrayList<ExpressRouteCircuitPeering>();
        if (this.inner().peerings() != null) {
            for (ExpressRouteCircuitPeeringInner inner : this.inner().peerings()) {
                lst.add( new ExpressRouteCircuitPeeringImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public List<RouteFilterRule> rules() {
        List<RouteFilterRule> lst = new ArrayList<RouteFilterRule>();
        if (this.inner().rules() != null) {
            for (RouteFilterRuleInner inner : this.inner().rules()) {
                lst.add( new RouteFilterRuleImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public RouteFilterImpl withRules(List<RouteFilterRuleInner> rules) {
        this.inner().withRules(rules);
        return this;
    }

}
