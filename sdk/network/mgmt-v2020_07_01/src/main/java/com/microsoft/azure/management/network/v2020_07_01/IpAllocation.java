/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_07_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.network.v2020_07_01.implementation.NetworkManager;
import com.microsoft.azure.SubResource;
import java.util.Map;
import com.microsoft.azure.management.network.v2020_07_01.implementation.IpAllocationInner;

/**
 * Type representing IpAllocation.
 */
public interface IpAllocation extends HasInner<IpAllocationInner>, Resource, GroupableResourceCore<NetworkManager, IpAllocationInner>, HasResourceGroup, Refreshable<IpAllocation>, Updatable<IpAllocation.Update>, HasManager<NetworkManager> {
    /**
     * @return the allocationTags value.
     */
    Map<String, String> allocationTags();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the ipAllocationType value.
     */
    IpAllocationType ipAllocationType();

    /**
     * @return the ipamAllocationId value.
     */
    String ipamAllocationId();

    /**
     * @return the prefix value.
     */
    String prefix();

    /**
     * @return the prefixLength value.
     */
    Integer prefixLength();

    /**
     * @return the prefixType value.
     */
    IPVersion prefixType();

    /**
     * @return the subnet value.
     */
    SubResource subnet();

    /**
     * @return the virtualNetwork value.
     */
    SubResource virtualNetwork();

    /**
     * The entirety of the IpAllocation definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of IpAllocation definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a IpAllocation definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the IpAllocation definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the ipallocation definition allowing to specify AllocationTags.
         */
        interface WithAllocationTags {
            /**
             * Specifies allocationTags.
             * @param allocationTags IpAllocation tags
             * @return the next definition stage
             */
            WithCreate withAllocationTags(Map<String, String> allocationTags);
        }

        /**
         * The stage of the ipallocation definition allowing to specify IpAllocationType.
         */
        interface WithIpAllocationType {
            /**
             * Specifies ipAllocationType.
             * @param ipAllocationType The type for the IpAllocation. Possible values include: 'Undefined', 'Hypernet'
             * @return the next definition stage
             */
            WithCreate withIpAllocationType(IpAllocationType ipAllocationType);
        }

        /**
         * The stage of the ipallocation definition allowing to specify IpamAllocationId.
         */
        interface WithIpamAllocationId {
            /**
             * Specifies ipamAllocationId.
             * @param ipamAllocationId The IPAM allocation ID
             * @return the next definition stage
             */
            WithCreate withIpamAllocationId(String ipamAllocationId);
        }

        /**
         * The stage of the ipallocation definition allowing to specify Prefix.
         */
        interface WithPrefix {
            /**
             * Specifies prefix.
             * @param prefix The address prefix for the IpAllocation
             * @return the next definition stage
             */
            WithCreate withPrefix(String prefix);
        }

        /**
         * The stage of the ipallocation definition allowing to specify PrefixLength.
         */
        interface WithPrefixLength {
            /**
             * Specifies prefixLength.
             * @param prefixLength The address prefix length for the IpAllocation
             * @return the next definition stage
             */
            WithCreate withPrefixLength(Integer prefixLength);
        }

        /**
         * The stage of the ipallocation definition allowing to specify PrefixType.
         */
        interface WithPrefixType {
            /**
             * Specifies prefixType.
             * @param prefixType The address prefix Type for the IpAllocation. Possible values include: 'IPv4', 'IPv6'
             * @return the next definition stage
             */
            WithCreate withPrefixType(IPVersion prefixType);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<IpAllocation>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithAllocationTags, DefinitionStages.WithIpAllocationType, DefinitionStages.WithIpamAllocationId, DefinitionStages.WithPrefix, DefinitionStages.WithPrefixLength, DefinitionStages.WithPrefixType {
        }
    }
    /**
     * The template for a IpAllocation update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<IpAllocation>, Resource.UpdateWithTags<Update>, UpdateStages.WithAllocationTags, UpdateStages.WithIpAllocationType, UpdateStages.WithIpamAllocationId, UpdateStages.WithPrefix, UpdateStages.WithPrefixLength, UpdateStages.WithPrefixType {
    }

    /**
     * Grouping of IpAllocation update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the ipallocation update allowing to specify AllocationTags.
         */
        interface WithAllocationTags {
            /**
             * Specifies allocationTags.
             * @param allocationTags IpAllocation tags
             * @return the next update stage
             */
            Update withAllocationTags(Map<String, String> allocationTags);
        }

        /**
         * The stage of the ipallocation update allowing to specify IpAllocationType.
         */
        interface WithIpAllocationType {
            /**
             * Specifies ipAllocationType.
             * @param ipAllocationType The type for the IpAllocation. Possible values include: 'Undefined', 'Hypernet'
             * @return the next update stage
             */
            Update withIpAllocationType(IpAllocationType ipAllocationType);
        }

        /**
         * The stage of the ipallocation update allowing to specify IpamAllocationId.
         */
        interface WithIpamAllocationId {
            /**
             * Specifies ipamAllocationId.
             * @param ipamAllocationId The IPAM allocation ID
             * @return the next update stage
             */
            Update withIpamAllocationId(String ipamAllocationId);
        }

        /**
         * The stage of the ipallocation update allowing to specify Prefix.
         */
        interface WithPrefix {
            /**
             * Specifies prefix.
             * @param prefix The address prefix for the IpAllocation
             * @return the next update stage
             */
            Update withPrefix(String prefix);
        }

        /**
         * The stage of the ipallocation update allowing to specify PrefixLength.
         */
        interface WithPrefixLength {
            /**
             * Specifies prefixLength.
             * @param prefixLength The address prefix length for the IpAllocation
             * @return the next update stage
             */
            Update withPrefixLength(Integer prefixLength);
        }

        /**
         * The stage of the ipallocation update allowing to specify PrefixType.
         */
        interface WithPrefixType {
            /**
             * Specifies prefixType.
             * @param prefixType The address prefix Type for the IpAllocation. Possible values include: 'IPv4', 'IPv6'
             * @return the next update stage
             */
            Update withPrefixType(IPVersion prefixType);
        }

    }
}
