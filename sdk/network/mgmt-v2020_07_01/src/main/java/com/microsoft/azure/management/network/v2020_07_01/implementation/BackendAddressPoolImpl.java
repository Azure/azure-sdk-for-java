/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_07_01.implementation;

import com.microsoft.azure.management.network.v2020_07_01.BackendAddressPool;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.network.v2020_07_01.LoadBalancerBackendAddress;
import com.microsoft.azure.SubResource;
import com.microsoft.azure.management.network.v2020_07_01.ProvisioningState;
import java.util.ArrayList;
import com.microsoft.azure.management.network.v2020_07_01.VirtualMachineScaleSetNetworkInterfaceIPConfiguration;

class BackendAddressPoolImpl extends CreatableUpdatableImpl<BackendAddressPool, BackendAddressPoolInner, BackendAddressPoolImpl> implements BackendAddressPool, BackendAddressPool.Definition, BackendAddressPool.Update {
    private final NetworkManager manager;
    private String resourceGroupName;
    private String loadBalancerName;
    private String backendAddressPoolName;

    BackendAddressPoolImpl(String name, NetworkManager manager) {
        super(name, new BackendAddressPoolInner());
        this.manager = manager;
        // Set resource name
        this.backendAddressPoolName = name;
        //
    }

    BackendAddressPoolImpl(BackendAddressPoolInner inner, NetworkManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.backendAddressPoolName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.loadBalancerName = IdParsingUtils.getValueFromIdByName(inner.id(), "loadBalancers");
        this.backendAddressPoolName = IdParsingUtils.getValueFromIdByName(inner.id(), "backendAddressPools");
        //
    }

    @Override
    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<BackendAddressPool> createResourceAsync() {
        LoadBalancerBackendAddressPoolsInner client = this.manager().inner().loadBalancerBackendAddressPools();
        return client.createOrUpdateAsync(this.resourceGroupName, this.loadBalancerName, this.backendAddressPoolName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<BackendAddressPool> updateResourceAsync() {
        LoadBalancerBackendAddressPoolsInner client = this.manager().inner().loadBalancerBackendAddressPools();
        return client.createOrUpdateAsync(this.resourceGroupName, this.loadBalancerName, this.backendAddressPoolName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<BackendAddressPoolInner> getInnerAsync() {
        LoadBalancerBackendAddressPoolsInner client = this.manager().inner().loadBalancerBackendAddressPools();
        return client.getAsync(this.resourceGroupName, this.loadBalancerName, this.backendAddressPoolName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<VirtualMachineScaleSetNetworkInterfaceIPConfiguration> backendIPConfigurations() {
        List<VirtualMachineScaleSetNetworkInterfaceIPConfiguration> lst = new ArrayList<VirtualMachineScaleSetNetworkInterfaceIPConfiguration>();
        if (this.inner().backendIPConfigurations() != null) {
            for (NetworkInterfaceIPConfigurationInner inner : this.inner().backendIPConfigurations()) {
                lst.add( new VirtualMachineScaleSetNetworkInterfaceIPConfigurationImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<LoadBalancerBackendAddress> loadBalancerBackendAddresses() {
        return this.inner().loadBalancerBackendAddresses();
    }

    @Override
    public List<SubResource> loadBalancingRules() {
        return this.inner().loadBalancingRules();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public SubResource outboundRule() {
        return this.inner().outboundRule();
    }

    @Override
    public List<SubResource> outboundRules() {
        return this.inner().outboundRules();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public BackendAddressPoolImpl withExistingLoadBalancer(String resourceGroupName, String loadBalancerName) {
        this.resourceGroupName = resourceGroupName;
        this.loadBalancerName = loadBalancerName;
        return this;
    }

    @Override
    public BackendAddressPoolImpl withId(String id) {
        this.inner().withId(id);
        return this;
    }

    @Override
    public BackendAddressPoolImpl withLoadBalancerBackendAddresses(List<LoadBalancerBackendAddress> loadBalancerBackendAddresses) {
        this.inner().withLoadBalancerBackendAddresses(loadBalancerBackendAddresses);
        return this;
    }

    @Override
    public BackendAddressPoolImpl withName(String name) {
        this.inner().withName(name);
        return this;
    }

}
