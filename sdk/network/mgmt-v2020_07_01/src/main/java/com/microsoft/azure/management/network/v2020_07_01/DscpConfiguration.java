/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_07_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.network.v2020_07_01.implementation.NetworkManager;
import java.util.List;
import com.microsoft.azure.management.network.v2020_07_01.implementation.DscpConfigurationInner;

/**
 * Type representing DscpConfiguration.
 */
public interface DscpConfiguration extends HasInner<DscpConfigurationInner>, Resource, GroupableResourceCore<NetworkManager, DscpConfigurationInner>, HasResourceGroup, Refreshable<DscpConfiguration>, Updatable<DscpConfiguration.Update>, HasManager<NetworkManager> {
    /**
     * @return the associatedNetworkInterfaces value.
     */
    List<NetworkInterface> associatedNetworkInterfaces();

    /**
     * @return the destinationIpRanges value.
     */
    List<QosIpRange> destinationIpRanges();

    /**
     * @return the destinationPortRanges value.
     */
    List<QosPortRange> destinationPortRanges();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the markings value.
     */
    List<Integer> markings();

    /**
     * @return the protocol value.
     */
    ProtocolType protocol();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the qosCollectionId value.
     */
    String qosCollectionId();

    /**
     * @return the resourceGuid value.
     */
    String resourceGuid();

    /**
     * @return the sourceIpRanges value.
     */
    List<QosIpRange> sourceIpRanges();

    /**
     * @return the sourcePortRanges value.
     */
    List<QosPortRange> sourcePortRanges();

    /**
     * The entirety of the DscpConfiguration definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of DscpConfiguration definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a DscpConfiguration definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the DscpConfiguration definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the dscpconfiguration definition allowing to specify DestinationIpRanges.
         */
        interface WithDestinationIpRanges {
            /**
             * Specifies destinationIpRanges.
             * @param destinationIpRanges Destination IP ranges
             * @return the next definition stage
             */
            WithCreate withDestinationIpRanges(List<QosIpRange> destinationIpRanges);
        }

        /**
         * The stage of the dscpconfiguration definition allowing to specify DestinationPortRanges.
         */
        interface WithDestinationPortRanges {
            /**
             * Specifies destinationPortRanges.
             * @param destinationPortRanges Destination port ranges
             * @return the next definition stage
             */
            WithCreate withDestinationPortRanges(List<QosPortRange> destinationPortRanges);
        }

        /**
         * The stage of the dscpconfiguration definition allowing to specify Markings.
         */
        interface WithMarkings {
            /**
             * Specifies markings.
             * @param markings List of markings to be used in the configuration
             * @return the next definition stage
             */
            WithCreate withMarkings(List<Integer> markings);
        }

        /**
         * The stage of the dscpconfiguration definition allowing to specify Protocol.
         */
        interface WithProtocol {
            /**
             * Specifies protocol.
             * @param protocol RNM supported protocol types. Possible values include: 'DoNotUse', 'Icmp', 'Tcp', 'Udp', 'Gre', 'Esp', 'Ah', 'Vxlan', 'All'
             * @return the next definition stage
             */
            WithCreate withProtocol(ProtocolType protocol);
        }

        /**
         * The stage of the dscpconfiguration definition allowing to specify SourceIpRanges.
         */
        interface WithSourceIpRanges {
            /**
             * Specifies sourceIpRanges.
             * @param sourceIpRanges Source IP ranges
             * @return the next definition stage
             */
            WithCreate withSourceIpRanges(List<QosIpRange> sourceIpRanges);
        }

        /**
         * The stage of the dscpconfiguration definition allowing to specify SourcePortRanges.
         */
        interface WithSourcePortRanges {
            /**
             * Specifies sourcePortRanges.
             * @param sourcePortRanges Sources port ranges
             * @return the next definition stage
             */
            WithCreate withSourcePortRanges(List<QosPortRange> sourcePortRanges);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<DscpConfiguration>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithDestinationIpRanges, DefinitionStages.WithDestinationPortRanges, DefinitionStages.WithMarkings, DefinitionStages.WithProtocol, DefinitionStages.WithSourceIpRanges, DefinitionStages.WithSourcePortRanges {
        }
    }
    /**
     * The template for a DscpConfiguration update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<DscpConfiguration>, Resource.UpdateWithTags<Update>, UpdateStages.WithDestinationIpRanges, UpdateStages.WithDestinationPortRanges, UpdateStages.WithMarkings, UpdateStages.WithProtocol, UpdateStages.WithSourceIpRanges, UpdateStages.WithSourcePortRanges {
    }

    /**
     * Grouping of DscpConfiguration update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the dscpconfiguration update allowing to specify DestinationIpRanges.
         */
        interface WithDestinationIpRanges {
            /**
             * Specifies destinationIpRanges.
             * @param destinationIpRanges Destination IP ranges
             * @return the next update stage
             */
            Update withDestinationIpRanges(List<QosIpRange> destinationIpRanges);
        }

        /**
         * The stage of the dscpconfiguration update allowing to specify DestinationPortRanges.
         */
        interface WithDestinationPortRanges {
            /**
             * Specifies destinationPortRanges.
             * @param destinationPortRanges Destination port ranges
             * @return the next update stage
             */
            Update withDestinationPortRanges(List<QosPortRange> destinationPortRanges);
        }

        /**
         * The stage of the dscpconfiguration update allowing to specify Markings.
         */
        interface WithMarkings {
            /**
             * Specifies markings.
             * @param markings List of markings to be used in the configuration
             * @return the next update stage
             */
            Update withMarkings(List<Integer> markings);
        }

        /**
         * The stage of the dscpconfiguration update allowing to specify Protocol.
         */
        interface WithProtocol {
            /**
             * Specifies protocol.
             * @param protocol RNM supported protocol types. Possible values include: 'DoNotUse', 'Icmp', 'Tcp', 'Udp', 'Gre', 'Esp', 'Ah', 'Vxlan', 'All'
             * @return the next update stage
             */
            Update withProtocol(ProtocolType protocol);
        }

        /**
         * The stage of the dscpconfiguration update allowing to specify SourceIpRanges.
         */
        interface WithSourceIpRanges {
            /**
             * Specifies sourceIpRanges.
             * @param sourceIpRanges Source IP ranges
             * @return the next update stage
             */
            Update withSourceIpRanges(List<QosIpRange> sourceIpRanges);
        }

        /**
         * The stage of the dscpconfiguration update allowing to specify SourcePortRanges.
         */
        interface WithSourcePortRanges {
            /**
             * Specifies sourcePortRanges.
             * @param sourcePortRanges Sources port ranges
             * @return the next update stage
             */
            Update withSourcePortRanges(List<QosPortRange> sourcePortRanges);
        }

    }
}
