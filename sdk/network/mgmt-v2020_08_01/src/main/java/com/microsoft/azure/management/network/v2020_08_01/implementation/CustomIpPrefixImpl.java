/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_08_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.network.v2020_08_01.CustomIpPrefix;
import rx.Observable;
import com.microsoft.azure.management.network.v2020_08_01.ExtendedLocation;
import com.microsoft.azure.management.network.v2020_08_01.CommissionedState;
import java.util.List;
import com.microsoft.azure.SubResource;
import com.microsoft.azure.management.network.v2020_08_01.ProvisioningState;

class CustomIpPrefixImpl extends GroupableResourceCoreImpl<CustomIpPrefix, CustomIpPrefixInner, CustomIpPrefixImpl, NetworkManager> implements CustomIpPrefix, CustomIpPrefix.Definition, CustomIpPrefix.Update {
    CustomIpPrefixImpl(String name, CustomIpPrefixInner inner, NetworkManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<CustomIpPrefix> createResourceAsync() {
        CustomIPPrefixesInner client = this.manager().inner().customIPPrefixes();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<CustomIpPrefix> updateResourceAsync() {
        CustomIPPrefixesInner client = this.manager().inner().customIPPrefixes();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CustomIpPrefixInner> getInnerAsync() {
        CustomIPPrefixesInner client = this.manager().inner().customIPPrefixes();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String cidr() {
        return this.inner().cidr();
    }

    @Override
    public CommissionedState commissionedState() {
        return this.inner().commissionedState();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public ExtendedLocation extendedLocation() {
        return this.inner().extendedLocation();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public List<SubResource> publicIpPrefixes() {
        return this.inner().publicIpPrefixes();
    }

    @Override
    public String resourceGuid() {
        return this.inner().resourceGuid();
    }

    @Override
    public List<String> zones() {
        return this.inner().zones();
    }

    @Override
    public CustomIpPrefixImpl withCidr(String cidr) {
        this.inner().withCidr(cidr);
        return this;
    }

    @Override
    public CustomIpPrefixImpl withCommissionedState(CommissionedState commissionedState) {
        this.inner().withCommissionedState(commissionedState);
        return this;
    }

    @Override
    public CustomIpPrefixImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.inner().withExtendedLocation(extendedLocation);
        return this;
    }

    @Override
    public CustomIpPrefixImpl withZones(List<String> zones) {
        this.inner().withZones(zones);
        return this;
    }

}
