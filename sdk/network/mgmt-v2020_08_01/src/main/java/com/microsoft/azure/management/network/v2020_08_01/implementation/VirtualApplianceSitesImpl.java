/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.network.v2020_08_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.network.v2020_08_01.VirtualApplianceSites;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.network.v2020_08_01.VirtualApplianceSite;

class VirtualApplianceSitesImpl extends WrapperImpl<VirtualApplianceSitesInner> implements VirtualApplianceSites {
    private final NetworkManager manager;

    VirtualApplianceSitesImpl(NetworkManager manager) {
        super(manager.inner().virtualApplianceSites());
        this.manager = manager;
    }

    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public VirtualApplianceSiteImpl define(String name) {
        return wrapModel(name);
    }

    private VirtualApplianceSiteImpl wrapModel(VirtualApplianceSiteInner inner) {
        return  new VirtualApplianceSiteImpl(inner, manager());
    }

    private VirtualApplianceSiteImpl wrapModel(String name) {
        return new VirtualApplianceSiteImpl(name, this.manager());
    }

    @Override
    public Observable<VirtualApplianceSite> listAsync(final String resourceGroupName, final String networkVirtualApplianceName) {
        VirtualApplianceSitesInner client = this.inner();
        return client.listAsync(resourceGroupName, networkVirtualApplianceName)
        .flatMapIterable(new Func1<Page<VirtualApplianceSiteInner>, Iterable<VirtualApplianceSiteInner>>() {
            @Override
            public Iterable<VirtualApplianceSiteInner> call(Page<VirtualApplianceSiteInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VirtualApplianceSiteInner, VirtualApplianceSite>() {
            @Override
            public VirtualApplianceSite call(VirtualApplianceSiteInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<VirtualApplianceSite> getAsync(String resourceGroupName, String networkVirtualApplianceName, String siteName) {
        VirtualApplianceSitesInner client = this.inner();
        return client.getAsync(resourceGroupName, networkVirtualApplianceName, siteName)
        .flatMap(new Func1<VirtualApplianceSiteInner, Observable<VirtualApplianceSite>>() {
            @Override
            public Observable<VirtualApplianceSite> call(VirtualApplianceSiteInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((VirtualApplianceSite)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String networkVirtualApplianceName, String siteName) {
        VirtualApplianceSitesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, networkVirtualApplianceName, siteName).toCompletable();
    }

}
