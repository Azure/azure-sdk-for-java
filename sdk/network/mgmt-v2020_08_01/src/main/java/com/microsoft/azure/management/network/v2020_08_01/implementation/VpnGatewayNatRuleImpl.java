/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_08_01.implementation;

import com.microsoft.azure.management.network.v2020_08_01.VpnGatewayNatRule;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.network.v2020_08_01.ProvisioningState;
import com.microsoft.azure.management.network.v2020_08_01.VpnNatRuleType;
import com.microsoft.azure.management.network.v2020_08_01.VpnNatRuleMode;
import java.util.List;
import com.microsoft.azure.management.network.v2020_08_01.VpnNatRuleMapping;
import com.microsoft.azure.SubResource;

class VpnGatewayNatRuleImpl extends CreatableUpdatableImpl<VpnGatewayNatRule, VpnGatewayNatRuleInner, VpnGatewayNatRuleImpl> implements VpnGatewayNatRule, VpnGatewayNatRule.Definition, VpnGatewayNatRule.Update {
    private final NetworkManager manager;
    private String resourceGroupName;
    private String gatewayName;
    private String natRuleName;

    VpnGatewayNatRuleImpl(String name, NetworkManager manager) {
        super(name, new VpnGatewayNatRuleInner());
        this.manager = manager;
        // Set resource name
        this.natRuleName = name;
        //
    }

    VpnGatewayNatRuleImpl(VpnGatewayNatRuleInner inner, NetworkManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.natRuleName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.gatewayName = IdParsingUtils.getValueFromIdByName(inner.id(), "vpnGateways");
        this.natRuleName = IdParsingUtils.getValueFromIdByName(inner.id(), "natRules");
        //
    }

    @Override
    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<VpnGatewayNatRule> createResourceAsync() {
        NatRulesInner client = this.manager().inner().natRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.gatewayName, this.natRuleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<VpnGatewayNatRule> updateResourceAsync() {
        NatRulesInner client = this.manager().inner().natRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.gatewayName, this.natRuleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<VpnGatewayNatRuleInner> getInnerAsync() {
        NatRulesInner client = this.manager().inner().natRules();
        return client.getAsync(this.resourceGroupName, this.gatewayName, this.natRuleName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<SubResource> egressVpnSiteLinkConnections() {
        return this.inner().egressVpnSiteLinkConnections();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public List<VpnNatRuleMapping> externalMappings() {
        return this.inner().externalMappings();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<SubResource> ingressVpnSiteLinkConnections() {
        return this.inner().ingressVpnSiteLinkConnections();
    }

    @Override
    public List<VpnNatRuleMapping> internalMappings() {
        return this.inner().internalMappings();
    }

    @Override
    public String ipConfigurationId() {
        return this.inner().ipConfigurationId();
    }

    @Override
    public VpnNatRuleMode mode() {
        return this.inner().mode();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public VpnNatRuleType vpnGatewayNatRulePropertiesType() {
        return this.inner().vpnGatewayNatRulePropertiesType();
    }

    @Override
    public VpnGatewayNatRuleImpl withExistingVpnGateway(String resourceGroupName, String gatewayName) {
        this.resourceGroupName = resourceGroupName;
        this.gatewayName = gatewayName;
        return this;
    }

    @Override
    public VpnGatewayNatRuleImpl withExternalMappings(List<VpnNatRuleMapping> externalMappings) {
        this.inner().withExternalMappings(externalMappings);
        return this;
    }

    @Override
    public VpnGatewayNatRuleImpl withId(String id) {
        this.inner().withId(id);
        return this;
    }

    @Override
    public VpnGatewayNatRuleImpl withInternalMappings(List<VpnNatRuleMapping> internalMappings) {
        this.inner().withInternalMappings(internalMappings);
        return this;
    }

    @Override
    public VpnGatewayNatRuleImpl withIpConfigurationId(String ipConfigurationId) {
        this.inner().withIpConfigurationId(ipConfigurationId);
        return this;
    }

    @Override
    public VpnGatewayNatRuleImpl withMode(VpnNatRuleMode mode) {
        this.inner().withMode(mode);
        return this;
    }

    @Override
    public VpnGatewayNatRuleImpl withName(String name) {
        this.inner().withName(name);
        return this;
    }

    @Override
    public VpnGatewayNatRuleImpl withVpnGatewayNatRulePropertiesType(VpnNatRuleType vpnGatewayNatRulePropertiesType) {
        this.inner().withVpnGatewayNatRulePropertiesType(vpnGatewayNatRulePropertiesType);
        return this;
    }

}
