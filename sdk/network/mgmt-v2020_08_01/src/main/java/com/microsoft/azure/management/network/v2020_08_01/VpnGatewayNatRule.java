/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_08_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.network.v2020_08_01.implementation.VpnGatewayNatRuleInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.network.v2020_08_01.implementation.NetworkManager;
import java.util.List;
import com.microsoft.azure.SubResource;

/**
 * Type representing VpnGatewayNatRule.
 */
public interface VpnGatewayNatRule extends HasInner<VpnGatewayNatRuleInner>, Indexable, Refreshable<VpnGatewayNatRule>, Updatable<VpnGatewayNatRule.Update>, HasManager<NetworkManager> {
    /**
     * @return the egressVpnSiteLinkConnections value.
     */
    List<SubResource> egressVpnSiteLinkConnections();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the externalMappings value.
     */
    List<VpnNatRuleMapping> externalMappings();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the ingressVpnSiteLinkConnections value.
     */
    List<SubResource> ingressVpnSiteLinkConnections();

    /**
     * @return the internalMappings value.
     */
    List<VpnNatRuleMapping> internalMappings();

    /**
     * @return the ipConfigurationId value.
     */
    String ipConfigurationId();

    /**
     * @return the mode value.
     */
    VpnNatRuleMode mode();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the vpnGatewayNatRulePropertiesType value.
     */
    VpnNatRuleType vpnGatewayNatRulePropertiesType();

    /**
     * The entirety of the VpnGatewayNatRule definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithVpnGateway, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of VpnGatewayNatRule definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a VpnGatewayNatRule definition.
         */
        interface Blank extends WithVpnGateway {
        }

        /**
         * The stage of the vpngatewaynatrule definition allowing to specify VpnGateway.
         */
        interface WithVpnGateway {
           /**
            * Specifies resourceGroupName, gatewayName.
            * @param resourceGroupName The resource group name of the VpnGateway
            * @param gatewayName The name of the gateway
            * @return the next definition stage
            */
            WithCreate withExistingVpnGateway(String resourceGroupName, String gatewayName);
        }

        /**
         * The stage of the vpngatewaynatrule definition allowing to specify ExternalMappings.
         */
        interface WithExternalMappings {
            /**
             * Specifies externalMappings.
             * @param externalMappings The private IP address external mapping for NAT
             * @return the next definition stage
             */
            WithCreate withExternalMappings(List<VpnNatRuleMapping> externalMappings);
        }

        /**
         * The stage of the vpngatewaynatrule definition allowing to specify Id.
         */
        interface WithId {
            /**
             * Specifies id.
             * @param id Resource ID
             * @return the next definition stage
             */
            WithCreate withId(String id);
        }

        /**
         * The stage of the vpngatewaynatrule definition allowing to specify InternalMappings.
         */
        interface WithInternalMappings {
            /**
             * Specifies internalMappings.
             * @param internalMappings The private IP address internal mapping for NAT
             * @return the next definition stage
             */
            WithCreate withInternalMappings(List<VpnNatRuleMapping> internalMappings);
        }

        /**
         * The stage of the vpngatewaynatrule definition allowing to specify IpConfigurationId.
         */
        interface WithIpConfigurationId {
            /**
             * Specifies ipConfigurationId.
             * @param ipConfigurationId The IP Configuration ID this NAT rule applies to
             * @return the next definition stage
             */
            WithCreate withIpConfigurationId(String ipConfigurationId);
        }

        /**
         * The stage of the vpngatewaynatrule definition allowing to specify Mode.
         */
        interface WithMode {
            /**
             * Specifies mode.
             * @param mode The Source NAT direction of a VPN NAT. Possible values include: 'EgressSnat', 'IngressSnat'
             * @return the next definition stage
             */
            WithCreate withMode(VpnNatRuleMode mode);
        }

        /**
         * The stage of the vpngatewaynatrule definition allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name The name of the resource that is unique within a resource group. This name can be used to access the resource
             * @return the next definition stage
             */
            WithCreate withName(String name);
        }

        /**
         * The stage of the vpngatewaynatrule definition allowing to specify VpnGatewayNatRulePropertiesType.
         */
        interface WithVpnGatewayNatRulePropertiesType {
            /**
             * Specifies vpnGatewayNatRulePropertiesType.
             * @param vpnGatewayNatRulePropertiesType The type of NAT rule for VPN NAT. Possible values include: 'Static', 'Dynamic'
             * @return the next definition stage
             */
            WithCreate withVpnGatewayNatRulePropertiesType(VpnNatRuleType vpnGatewayNatRulePropertiesType);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<VpnGatewayNatRule>, DefinitionStages.WithExternalMappings, DefinitionStages.WithId, DefinitionStages.WithInternalMappings, DefinitionStages.WithIpConfigurationId, DefinitionStages.WithMode, DefinitionStages.WithName, DefinitionStages.WithVpnGatewayNatRulePropertiesType {
        }
    }
    /**
     * The template for a VpnGatewayNatRule update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<VpnGatewayNatRule>, UpdateStages.WithExternalMappings, UpdateStages.WithId, UpdateStages.WithInternalMappings, UpdateStages.WithIpConfigurationId, UpdateStages.WithMode, UpdateStages.WithName, UpdateStages.WithVpnGatewayNatRulePropertiesType {
    }

    /**
     * Grouping of VpnGatewayNatRule update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the vpngatewaynatrule update allowing to specify ExternalMappings.
         */
        interface WithExternalMappings {
            /**
             * Specifies externalMappings.
             * @param externalMappings The private IP address external mapping for NAT
             * @return the next update stage
             */
            Update withExternalMappings(List<VpnNatRuleMapping> externalMappings);
        }

        /**
         * The stage of the vpngatewaynatrule update allowing to specify Id.
         */
        interface WithId {
            /**
             * Specifies id.
             * @param id Resource ID
             * @return the next update stage
             */
            Update withId(String id);
        }

        /**
         * The stage of the vpngatewaynatrule update allowing to specify InternalMappings.
         */
        interface WithInternalMappings {
            /**
             * Specifies internalMappings.
             * @param internalMappings The private IP address internal mapping for NAT
             * @return the next update stage
             */
            Update withInternalMappings(List<VpnNatRuleMapping> internalMappings);
        }

        /**
         * The stage of the vpngatewaynatrule update allowing to specify IpConfigurationId.
         */
        interface WithIpConfigurationId {
            /**
             * Specifies ipConfigurationId.
             * @param ipConfigurationId The IP Configuration ID this NAT rule applies to
             * @return the next update stage
             */
            Update withIpConfigurationId(String ipConfigurationId);
        }

        /**
         * The stage of the vpngatewaynatrule update allowing to specify Mode.
         */
        interface WithMode {
            /**
             * Specifies mode.
             * @param mode The Source NAT direction of a VPN NAT. Possible values include: 'EgressSnat', 'IngressSnat'
             * @return the next update stage
             */
            Update withMode(VpnNatRuleMode mode);
        }

        /**
         * The stage of the vpngatewaynatrule update allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name The name of the resource that is unique within a resource group. This name can be used to access the resource
             * @return the next update stage
             */
            Update withName(String name);
        }

        /**
         * The stage of the vpngatewaynatrule update allowing to specify VpnGatewayNatRulePropertiesType.
         */
        interface WithVpnGatewayNatRulePropertiesType {
            /**
             * Specifies vpnGatewayNatRulePropertiesType.
             * @param vpnGatewayNatRulePropertiesType The type of NAT rule for VPN NAT. Possible values include: 'Static', 'Dynamic'
             * @return the next update stage
             */
            Update withVpnGatewayNatRulePropertiesType(VpnNatRuleType vpnGatewayNatRulePropertiesType);
        }

    }
}
