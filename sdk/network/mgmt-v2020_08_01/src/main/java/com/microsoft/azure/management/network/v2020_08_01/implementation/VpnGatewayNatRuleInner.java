/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_08_01.implementation;

import com.microsoft.azure.management.network.v2020_08_01.ProvisioningState;
import com.microsoft.azure.management.network.v2020_08_01.VpnNatRuleType;
import com.microsoft.azure.management.network.v2020_08_01.VpnNatRuleMode;
import java.util.List;
import com.microsoft.azure.management.network.v2020_08_01.VpnNatRuleMapping;
import com.microsoft.azure.SubResource;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * VpnGatewayNatRule Resource.
 */
@JsonFlatten
public class VpnGatewayNatRuleInner extends SubResource {
    /**
     * The provisioning state of the NAT Rule resource. Possible values
     * include: 'Succeeded', 'Updating', 'Deleting', 'Failed'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * The type of NAT rule for VPN NAT. Possible values include: 'Static',
     * 'Dynamic'.
     */
    @JsonProperty(value = "properties.type")
    private VpnNatRuleType vpnGatewayNatRulePropertiesType;

    /**
     * The Source NAT direction of a VPN NAT. Possible values include:
     * 'EgressSnat', 'IngressSnat'.
     */
    @JsonProperty(value = "properties.mode")
    private VpnNatRuleMode mode;

    /**
     * The private IP address internal mapping for NAT.
     */
    @JsonProperty(value = "properties.internalMappings")
    private List<VpnNatRuleMapping> internalMappings;

    /**
     * The private IP address external mapping for NAT.
     */
    @JsonProperty(value = "properties.externalMappings")
    private List<VpnNatRuleMapping> externalMappings;

    /**
     * The IP Configuration ID this NAT rule applies to.
     */
    @JsonProperty(value = "properties.ipConfigurationId")
    private String ipConfigurationId;

    /**
     * List of egress VpnSiteLinkConnections.
     */
    @JsonProperty(value = "properties.egressVpnSiteLinkConnections", access = JsonProperty.Access.WRITE_ONLY)
    private List<SubResource> egressVpnSiteLinkConnections;

    /**
     * List of ingress VpnSiteLinkConnections.
     */
    @JsonProperty(value = "properties.ingressVpnSiteLinkConnections", access = JsonProperty.Access.WRITE_ONLY)
    private List<SubResource> ingressVpnSiteLinkConnections;

    /**
     * The name of the resource that is unique within a resource group. This
     * name can be used to access the resource.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Resource type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Get the provisioning state of the NAT Rule resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the type of NAT rule for VPN NAT. Possible values include: 'Static', 'Dynamic'.
     *
     * @return the vpnGatewayNatRulePropertiesType value
     */
    public VpnNatRuleType vpnGatewayNatRulePropertiesType() {
        return this.vpnGatewayNatRulePropertiesType;
    }

    /**
     * Set the type of NAT rule for VPN NAT. Possible values include: 'Static', 'Dynamic'.
     *
     * @param vpnGatewayNatRulePropertiesType the vpnGatewayNatRulePropertiesType value to set
     * @return the VpnGatewayNatRuleInner object itself.
     */
    public VpnGatewayNatRuleInner withVpnGatewayNatRulePropertiesType(VpnNatRuleType vpnGatewayNatRulePropertiesType) {
        this.vpnGatewayNatRulePropertiesType = vpnGatewayNatRulePropertiesType;
        return this;
    }

    /**
     * Get the Source NAT direction of a VPN NAT. Possible values include: 'EgressSnat', 'IngressSnat'.
     *
     * @return the mode value
     */
    public VpnNatRuleMode mode() {
        return this.mode;
    }

    /**
     * Set the Source NAT direction of a VPN NAT. Possible values include: 'EgressSnat', 'IngressSnat'.
     *
     * @param mode the mode value to set
     * @return the VpnGatewayNatRuleInner object itself.
     */
    public VpnGatewayNatRuleInner withMode(VpnNatRuleMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the private IP address internal mapping for NAT.
     *
     * @return the internalMappings value
     */
    public List<VpnNatRuleMapping> internalMappings() {
        return this.internalMappings;
    }

    /**
     * Set the private IP address internal mapping for NAT.
     *
     * @param internalMappings the internalMappings value to set
     * @return the VpnGatewayNatRuleInner object itself.
     */
    public VpnGatewayNatRuleInner withInternalMappings(List<VpnNatRuleMapping> internalMappings) {
        this.internalMappings = internalMappings;
        return this;
    }

    /**
     * Get the private IP address external mapping for NAT.
     *
     * @return the externalMappings value
     */
    public List<VpnNatRuleMapping> externalMappings() {
        return this.externalMappings;
    }

    /**
     * Set the private IP address external mapping for NAT.
     *
     * @param externalMappings the externalMappings value to set
     * @return the VpnGatewayNatRuleInner object itself.
     */
    public VpnGatewayNatRuleInner withExternalMappings(List<VpnNatRuleMapping> externalMappings) {
        this.externalMappings = externalMappings;
        return this;
    }

    /**
     * Get the IP Configuration ID this NAT rule applies to.
     *
     * @return the ipConfigurationId value
     */
    public String ipConfigurationId() {
        return this.ipConfigurationId;
    }

    /**
     * Set the IP Configuration ID this NAT rule applies to.
     *
     * @param ipConfigurationId the ipConfigurationId value to set
     * @return the VpnGatewayNatRuleInner object itself.
     */
    public VpnGatewayNatRuleInner withIpConfigurationId(String ipConfigurationId) {
        this.ipConfigurationId = ipConfigurationId;
        return this;
    }

    /**
     * Get list of egress VpnSiteLinkConnections.
     *
     * @return the egressVpnSiteLinkConnections value
     */
    public List<SubResource> egressVpnSiteLinkConnections() {
        return this.egressVpnSiteLinkConnections;
    }

    /**
     * Get list of ingress VpnSiteLinkConnections.
     *
     * @return the ingressVpnSiteLinkConnections value
     */
    public List<SubResource> ingressVpnSiteLinkConnections() {
        return this.ingressVpnSiteLinkConnections;
    }

    /**
     * Get the name of the resource that is unique within a resource group. This name can be used to access the resource.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name of the resource that is unique within a resource group. This name can be used to access the resource.
     *
     * @param name the name value to set
     * @return the VpnGatewayNatRuleInner object itself.
     */
    public VpnGatewayNatRuleInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get a unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get resource type.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

}
