/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_08_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in NatRules.
 */
public class NatRulesInner {
    /** The Retrofit service to perform REST calls. */
    private NatRulesService service;
    /** The service client containing this operation class. */
    private NetworkManagementClientImpl client;

    /**
     * Initializes an instance of NatRulesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public NatRulesInner(Retrofit retrofit, NetworkManagementClientImpl client) {
        this.service = retrofit.create(NatRulesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for NatRules to be
     * used by Retrofit to perform actually REST calls.
     */
    interface NatRulesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_08_01.NatRules get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules/{natRuleName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Path("natRuleName") String natRuleName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_08_01.NatRules createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules/{natRuleName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Path("natRuleName") String natRuleName, @Query("api-version") String apiVersion, @Body VpnGatewayNatRuleInner natRuleParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_08_01.NatRules beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules/{natRuleName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Path("natRuleName") String natRuleName, @Query("api-version") String apiVersion, @Body VpnGatewayNatRuleInner natRuleParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_08_01.NatRules delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules/{natRuleName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Path("natRuleName") String natRuleName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_08_01.NatRules beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules/{natRuleName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Path("natRuleName") String natRuleName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_08_01.NatRules listByVpnGateway" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules")
        Observable<Response<ResponseBody>> listByVpnGateway(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.network.v2020_08_01.NatRules listByVpnGatewayNext" })
        @GET
        Observable<Response<ResponseBody>> listByVpnGatewayNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Retrieves the details of a nat ruleGet.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VpnGatewayNatRuleInner object if successful.
     */
    public VpnGatewayNatRuleInner get(String resourceGroupName, String gatewayName, String natRuleName) {
        return getWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName).toBlocking().single().body();
    }

    /**
     * Retrieves the details of a nat ruleGet.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VpnGatewayNatRuleInner> getAsync(String resourceGroupName, String gatewayName, String natRuleName, final ServiceCallback<VpnGatewayNatRuleInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName), serviceCallback);
    }

    /**
     * Retrieves the details of a nat ruleGet.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VpnGatewayNatRuleInner object
     */
    public Observable<VpnGatewayNatRuleInner> getAsync(String resourceGroupName, String gatewayName, String natRuleName) {
        return getWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName).map(new Func1<ServiceResponse<VpnGatewayNatRuleInner>, VpnGatewayNatRuleInner>() {
            @Override
            public VpnGatewayNatRuleInner call(ServiceResponse<VpnGatewayNatRuleInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves the details of a nat ruleGet.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VpnGatewayNatRuleInner object
     */
    public Observable<ServiceResponse<VpnGatewayNatRuleInner>> getWithServiceResponseAsync(String resourceGroupName, String gatewayName, String natRuleName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (natRuleName == null) {
            throw new IllegalArgumentException("Parameter natRuleName is required and cannot be null.");
        }
        final String apiVersion = "2020-08-01";
        return service.get(this.client.subscriptionId(), resourceGroupName, gatewayName, natRuleName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VpnGatewayNatRuleInner>>>() {
                @Override
                public Observable<ServiceResponse<VpnGatewayNatRuleInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VpnGatewayNatRuleInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VpnGatewayNatRuleInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VpnGatewayNatRuleInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VpnGatewayNatRuleInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat rules.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VpnGatewayNatRuleInner object if successful.
     */
    public VpnGatewayNatRuleInner createOrUpdate(String resourceGroupName, String gatewayName, String natRuleName, VpnGatewayNatRuleInner natRuleParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName, natRuleParameters).toBlocking().last().body();
    }

    /**
     * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat rules.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VpnGatewayNatRuleInner> createOrUpdateAsync(String resourceGroupName, String gatewayName, String natRuleName, VpnGatewayNatRuleInner natRuleParameters, final ServiceCallback<VpnGatewayNatRuleInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName, natRuleParameters), serviceCallback);
    }

    /**
     * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat rules.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VpnGatewayNatRuleInner> createOrUpdateAsync(String resourceGroupName, String gatewayName, String natRuleName, VpnGatewayNatRuleInner natRuleParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName, natRuleParameters).map(new Func1<ServiceResponse<VpnGatewayNatRuleInner>, VpnGatewayNatRuleInner>() {
            @Override
            public VpnGatewayNatRuleInner call(ServiceResponse<VpnGatewayNatRuleInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat rules.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VpnGatewayNatRuleInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String gatewayName, String natRuleName, VpnGatewayNatRuleInner natRuleParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (natRuleName == null) {
            throw new IllegalArgumentException("Parameter natRuleName is required and cannot be null.");
        }
        if (natRuleParameters == null) {
            throw new IllegalArgumentException("Parameter natRuleParameters is required and cannot be null.");
        }
        Validator.validate(natRuleParameters);
        final String apiVersion = "2020-08-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, gatewayName, natRuleName, apiVersion, natRuleParameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VpnGatewayNatRuleInner>() { }.getType());
    }

    /**
     * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat rules.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VpnGatewayNatRuleInner object if successful.
     */
    public VpnGatewayNatRuleInner beginCreateOrUpdate(String resourceGroupName, String gatewayName, String natRuleName, VpnGatewayNatRuleInner natRuleParameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName, natRuleParameters).toBlocking().single().body();
    }

    /**
     * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat rules.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VpnGatewayNatRuleInner> beginCreateOrUpdateAsync(String resourceGroupName, String gatewayName, String natRuleName, VpnGatewayNatRuleInner natRuleParameters, final ServiceCallback<VpnGatewayNatRuleInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName, natRuleParameters), serviceCallback);
    }

    /**
     * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat rules.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VpnGatewayNatRuleInner object
     */
    public Observable<VpnGatewayNatRuleInner> beginCreateOrUpdateAsync(String resourceGroupName, String gatewayName, String natRuleName, VpnGatewayNatRuleInner natRuleParameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName, natRuleParameters).map(new Func1<ServiceResponse<VpnGatewayNatRuleInner>, VpnGatewayNatRuleInner>() {
            @Override
            public VpnGatewayNatRuleInner call(ServiceResponse<VpnGatewayNatRuleInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat rules.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VpnGatewayNatRuleInner object
     */
    public Observable<ServiceResponse<VpnGatewayNatRuleInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String gatewayName, String natRuleName, VpnGatewayNatRuleInner natRuleParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (natRuleName == null) {
            throw new IllegalArgumentException("Parameter natRuleName is required and cannot be null.");
        }
        if (natRuleParameters == null) {
            throw new IllegalArgumentException("Parameter natRuleParameters is required and cannot be null.");
        }
        Validator.validate(natRuleParameters);
        final String apiVersion = "2020-08-01";
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, gatewayName, natRuleName, apiVersion, natRuleParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VpnGatewayNatRuleInner>>>() {
                @Override
                public Observable<ServiceResponse<VpnGatewayNatRuleInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VpnGatewayNatRuleInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VpnGatewayNatRuleInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VpnGatewayNatRuleInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VpnGatewayNatRuleInner>() { }.getType())
                .register(201, new TypeToken<VpnGatewayNatRuleInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a nat rule.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String gatewayName, String natRuleName) {
        deleteWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName).toBlocking().last().body();
    }

    /**
     * Deletes a nat rule.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String gatewayName, String natRuleName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName), serviceCallback);
    }

    /**
     * Deletes a nat rule.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String gatewayName, String natRuleName) {
        return deleteWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a nat rule.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String gatewayName, String natRuleName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (natRuleName == null) {
            throw new IllegalArgumentException("Parameter natRuleName is required and cannot be null.");
        }
        final String apiVersion = "2020-08-01";
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, gatewayName, natRuleName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a nat rule.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String gatewayName, String natRuleName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName).toBlocking().single().body();
    }

    /**
     * Deletes a nat rule.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String gatewayName, String natRuleName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName), serviceCallback);
    }

    /**
     * Deletes a nat rule.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String gatewayName, String natRuleName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, gatewayName, natRuleName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a nat rule.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param natRuleName The name of the nat rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String gatewayName, String natRuleName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (natRuleName == null) {
            throw new IllegalArgumentException("Parameter natRuleName is required and cannot be null.");
        }
        final String apiVersion = "2020-08-01";
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, gatewayName, natRuleName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VpnGatewayNatRuleInner&gt; object if successful.
     */
    public PagedList<VpnGatewayNatRuleInner> listByVpnGateway(final String resourceGroupName, final String gatewayName) {
        ServiceResponse<Page<VpnGatewayNatRuleInner>> response = listByVpnGatewaySinglePageAsync(resourceGroupName, gatewayName).toBlocking().single();
        return new PagedList<VpnGatewayNatRuleInner>(response.body()) {
            @Override
            public Page<VpnGatewayNatRuleInner> nextPage(String nextPageLink) {
                return listByVpnGatewayNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VpnGatewayNatRuleInner>> listByVpnGatewayAsync(final String resourceGroupName, final String gatewayName, final ListOperationCallback<VpnGatewayNatRuleInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByVpnGatewaySinglePageAsync(resourceGroupName, gatewayName),
            new Func1<String, Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> call(String nextPageLink) {
                    return listByVpnGatewayNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VpnGatewayNatRuleInner&gt; object
     */
    public Observable<Page<VpnGatewayNatRuleInner>> listByVpnGatewayAsync(final String resourceGroupName, final String gatewayName) {
        return listByVpnGatewayWithServiceResponseAsync(resourceGroupName, gatewayName)
            .map(new Func1<ServiceResponse<Page<VpnGatewayNatRuleInner>>, Page<VpnGatewayNatRuleInner>>() {
                @Override
                public Page<VpnGatewayNatRuleInner> call(ServiceResponse<Page<VpnGatewayNatRuleInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VpnGatewayNatRuleInner&gt; object
     */
    public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> listByVpnGatewayWithServiceResponseAsync(final String resourceGroupName, final String gatewayName) {
        return listByVpnGatewaySinglePageAsync(resourceGroupName, gatewayName)
            .concatMap(new Func1<ServiceResponse<Page<VpnGatewayNatRuleInner>>, Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> call(ServiceResponse<Page<VpnGatewayNatRuleInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByVpnGatewayNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
    ServiceResponse<PageImpl<VpnGatewayNatRuleInner>> * @param resourceGroupName The resource group name of the VpnGateway.
    ServiceResponse<PageImpl<VpnGatewayNatRuleInner>> * @param gatewayName The name of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VpnGatewayNatRuleInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> listByVpnGatewaySinglePageAsync(final String resourceGroupName, final String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        final String apiVersion = "2020-08-01";
        return service.listByVpnGateway(this.client.subscriptionId(), resourceGroupName, gatewayName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VpnGatewayNatRuleInner>> result = listByVpnGatewayDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VpnGatewayNatRuleInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VpnGatewayNatRuleInner>> listByVpnGatewayDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VpnGatewayNatRuleInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VpnGatewayNatRuleInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VpnGatewayNatRuleInner&gt; object if successful.
     */
    public PagedList<VpnGatewayNatRuleInner> listByVpnGatewayNext(final String nextPageLink) {
        ServiceResponse<Page<VpnGatewayNatRuleInner>> response = listByVpnGatewayNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<VpnGatewayNatRuleInner>(response.body()) {
            @Override
            public Page<VpnGatewayNatRuleInner> nextPage(String nextPageLink) {
                return listByVpnGatewayNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VpnGatewayNatRuleInner>> listByVpnGatewayNextAsync(final String nextPageLink, final ServiceFuture<List<VpnGatewayNatRuleInner>> serviceFuture, final ListOperationCallback<VpnGatewayNatRuleInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByVpnGatewayNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> call(String nextPageLink) {
                    return listByVpnGatewayNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VpnGatewayNatRuleInner&gt; object
     */
    public Observable<Page<VpnGatewayNatRuleInner>> listByVpnGatewayNextAsync(final String nextPageLink) {
        return listByVpnGatewayNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<VpnGatewayNatRuleInner>>, Page<VpnGatewayNatRuleInner>>() {
                @Override
                public Page<VpnGatewayNatRuleInner> call(ServiceResponse<Page<VpnGatewayNatRuleInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VpnGatewayNatRuleInner&gt; object
     */
    public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> listByVpnGatewayNextWithServiceResponseAsync(final String nextPageLink) {
        return listByVpnGatewayNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<VpnGatewayNatRuleInner>>, Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> call(ServiceResponse<Page<VpnGatewayNatRuleInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByVpnGatewayNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieves all nat rules for a particular virtual wan vpn gateway.
     *
    ServiceResponse<PageImpl<VpnGatewayNatRuleInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VpnGatewayNatRuleInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> listByVpnGatewayNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByVpnGatewayNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VpnGatewayNatRuleInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VpnGatewayNatRuleInner>> result = listByVpnGatewayNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VpnGatewayNatRuleInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VpnGatewayNatRuleInner>> listByVpnGatewayNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VpnGatewayNatRuleInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VpnGatewayNatRuleInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
