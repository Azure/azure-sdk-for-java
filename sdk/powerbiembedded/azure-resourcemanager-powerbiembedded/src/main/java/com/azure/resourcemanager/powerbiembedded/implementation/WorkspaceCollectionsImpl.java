// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbiembedded.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerbiembedded.fluent.WorkspaceCollectionsClient;
import com.azure.resourcemanager.powerbiembedded.fluent.models.CheckNameResponseInner;
import com.azure.resourcemanager.powerbiembedded.fluent.models.WorkspaceCollectionAccessKeysInner;
import com.azure.resourcemanager.powerbiembedded.fluent.models.WorkspaceCollectionInner;
import com.azure.resourcemanager.powerbiembedded.models.CheckNameRequest;
import com.azure.resourcemanager.powerbiembedded.models.CheckNameResponse;
import com.azure.resourcemanager.powerbiembedded.models.MigrateWorkspaceCollectionRequest;
import com.azure.resourcemanager.powerbiembedded.models.WorkspaceCollection;
import com.azure.resourcemanager.powerbiembedded.models.WorkspaceCollectionAccessKey;
import com.azure.resourcemanager.powerbiembedded.models.WorkspaceCollectionAccessKeys;
import com.azure.resourcemanager.powerbiembedded.models.WorkspaceCollections;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class WorkspaceCollectionsImpl implements WorkspaceCollections {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WorkspaceCollectionsImpl.class);

    private final WorkspaceCollectionsClient innerClient;

    private final com.azure.resourcemanager.powerbiembedded.PowerBIEmbeddedManager serviceManager;

    public WorkspaceCollectionsImpl(
        WorkspaceCollectionsClient innerClient,
        com.azure.resourcemanager.powerbiembedded.PowerBIEmbeddedManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public WorkspaceCollection getByResourceGroup(String resourceGroupName, String workspaceCollectionName) {
        WorkspaceCollectionInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, workspaceCollectionName);
        if (inner != null) {
            return new WorkspaceCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WorkspaceCollection> getByResourceGroupWithResponse(
        String resourceGroupName, String workspaceCollectionName, Context context) {
        Response<WorkspaceCollectionInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, workspaceCollectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WorkspaceCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String workspaceCollectionName) {
        this.serviceClient().delete(resourceGroupName, workspaceCollectionName);
    }

    public void delete(String resourceGroupName, String workspaceCollectionName, Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceCollectionName, context);
    }

    public CheckNameResponse checkNameAvailability(String location, CheckNameRequest body) {
        CheckNameResponseInner inner = this.serviceClient().checkNameAvailability(location, body);
        if (inner != null) {
            return new CheckNameResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CheckNameResponse> checkNameAvailabilityWithResponse(
        String location, CheckNameRequest body, Context context) {
        Response<CheckNameResponseInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(location, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckNameResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<WorkspaceCollection> listByResourceGroup(String resourceGroupName) {
        PagedIterable<WorkspaceCollectionInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new WorkspaceCollectionImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkspaceCollection> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<WorkspaceCollectionInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new WorkspaceCollectionImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkspaceCollection> list() {
        PagedIterable<WorkspaceCollectionInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new WorkspaceCollectionImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkspaceCollection> list(Context context) {
        PagedIterable<WorkspaceCollectionInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new WorkspaceCollectionImpl(inner1, this.manager()));
    }

    public WorkspaceCollectionAccessKeys getAccessKeys(String resourceGroupName, String workspaceCollectionName) {
        WorkspaceCollectionAccessKeysInner inner =
            this.serviceClient().getAccessKeys(resourceGroupName, workspaceCollectionName);
        if (inner != null) {
            return new WorkspaceCollectionAccessKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WorkspaceCollectionAccessKeys> getAccessKeysWithResponse(
        String resourceGroupName, String workspaceCollectionName, Context context) {
        Response<WorkspaceCollectionAccessKeysInner> inner =
            this.serviceClient().getAccessKeysWithResponse(resourceGroupName, workspaceCollectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WorkspaceCollectionAccessKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkspaceCollectionAccessKeys regenerateKey(
        String resourceGroupName, String workspaceCollectionName, WorkspaceCollectionAccessKey body) {
        WorkspaceCollectionAccessKeysInner inner =
            this.serviceClient().regenerateKey(resourceGroupName, workspaceCollectionName, body);
        if (inner != null) {
            return new WorkspaceCollectionAccessKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WorkspaceCollectionAccessKeys> regenerateKeyWithResponse(
        String resourceGroupName, String workspaceCollectionName, WorkspaceCollectionAccessKey body, Context context) {
        Response<WorkspaceCollectionAccessKeysInner> inner =
            this.serviceClient().regenerateKeyWithResponse(resourceGroupName, workspaceCollectionName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WorkspaceCollectionAccessKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void migrate(String resourceGroupName, MigrateWorkspaceCollectionRequest body) {
        this.serviceClient().migrate(resourceGroupName, body);
    }

    public Response<Void> migrateWithResponse(
        String resourceGroupName, MigrateWorkspaceCollectionRequest body, Context context) {
        return this.serviceClient().migrateWithResponse(resourceGroupName, body, context);
    }

    public WorkspaceCollection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceCollectionName = Utils.getValueFromIdByName(id, "workspaceCollections");
        if (workspaceCollectionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'workspaceCollections'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, workspaceCollectionName, Context.NONE).getValue();
    }

    public Response<WorkspaceCollection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceCollectionName = Utils.getValueFromIdByName(id, "workspaceCollections");
        if (workspaceCollectionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'workspaceCollections'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, workspaceCollectionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceCollectionName = Utils.getValueFromIdByName(id, "workspaceCollections");
        if (workspaceCollectionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'workspaceCollections'.",
                                id)));
        }
        this.delete(resourceGroupName, workspaceCollectionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceCollectionName = Utils.getValueFromIdByName(id, "workspaceCollections");
        if (workspaceCollectionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'workspaceCollections'.",
                                id)));
        }
        this.delete(resourceGroupName, workspaceCollectionName, context);
    }

    private WorkspaceCollectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.powerbiembedded.PowerBIEmbeddedManager manager() {
        return this.serviceManager;
    }

    public WorkspaceCollectionImpl define(String name) {
        return new WorkspaceCollectionImpl(name, this.manager());
    }
}
