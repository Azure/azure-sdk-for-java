// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * RecurrenceSchedule Definition.
 */
@Fluent
public final class RecurrenceSchedule implements JsonSerializable<RecurrenceSchedule> {

    /*
     * List of hours for the schedule.
     */
    @Generated
    private final List<Integer> hours;

    /*
     * List of minutes for the schedule.
     */
    @Generated
    private final List<Integer> minutes;

    /*
     * List of days for the schedule.
     */
    @Generated
    private List<WeekDays> weekDays;

    /*
     * List of month days for the schedule
     */
    @Generated
    private List<Integer> monthDays;

    /**
     * Creates an instance of RecurrenceSchedule class.
     *
     * @param hours the hours value to set.
     * @param minutes the minutes value to set.
     */
    @Generated
    public RecurrenceSchedule(List<Integer> hours, List<Integer> minutes) {
        this.hours = hours;
        this.minutes = minutes;
    }

    /**
     * Get the hours property: List of hours for the schedule.
     *
     * @return the hours value.
     */
    @Generated
    public List<Integer> getHours() {
        return this.hours;
    }

    /**
     * Get the minutes property: List of minutes for the schedule.
     *
     * @return the minutes value.
     */
    @Generated
    public List<Integer> getMinutes() {
        return this.minutes;
    }

    /**
     * Get the weekDays property: List of days for the schedule.
     *
     * @return the weekDays value.
     */
    @Generated
    public List<WeekDays> getWeekDays() {
        return this.weekDays;
    }

    /**
     * Set the weekDays property: List of days for the schedule.
     *
     * @param weekDays the weekDays value to set.
     * @return the RecurrenceSchedule object itself.
     */
    @Generated
    public RecurrenceSchedule setWeekDays(List<WeekDays> weekDays) {
        this.weekDays = weekDays;
        return this;
    }

    /**
     * Get the monthDays property: List of month days for the schedule.
     *
     * @return the monthDays value.
     */
    @Generated
    public List<Integer> getMonthDays() {
        return this.monthDays;
    }

    /**
     * Set the monthDays property: List of month days for the schedule.
     *
     * @param monthDays the monthDays value to set.
     * @return the RecurrenceSchedule object itself.
     */
    @Generated
    public RecurrenceSchedule setMonthDays(List<Integer> monthDays) {
        this.monthDays = monthDays;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("hours", this.hours, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("minutes", this.minutes, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("weekDays", this.weekDays,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("monthDays", this.monthDays, (writer, element) -> writer.writeInt(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecurrenceSchedule from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecurrenceSchedule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecurrenceSchedule.
     */
    @Generated
    public static RecurrenceSchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<Integer> hours = null;
            List<Integer> minutes = null;
            List<WeekDays> weekDays = null;
            List<Integer> monthDays = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("hours".equals(fieldName)) {
                    hours = reader.readArray(reader1 -> reader1.getInt());
                } else if ("minutes".equals(fieldName)) {
                    minutes = reader.readArray(reader1 -> reader1.getInt());
                } else if ("weekDays".equals(fieldName)) {
                    weekDays = reader.readArray(reader1 -> WeekDays.fromString(reader1.getString()));
                } else if ("monthDays".equals(fieldName)) {
                    monthDays = reader.readArray(reader1 -> reader1.getInt());
                } else {
                    reader.skipChildren();
                }
            }
            RecurrenceSchedule deserializedRecurrenceSchedule = new RecurrenceSchedule(hours, minutes);
            deserializedRecurrenceSchedule.weekDays = weekDays;
            deserializedRecurrenceSchedule.monthDays = monthDays;
            return deserializedRecurrenceSchedule;
        });
    }
}
