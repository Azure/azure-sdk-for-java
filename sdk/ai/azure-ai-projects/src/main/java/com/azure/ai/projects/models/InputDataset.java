// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dataset as source for evaluation.
 */
@Immutable
public final class InputDataset extends InputData {

    /*
     * Type of the data
     */
    @Generated
    private String type = "dataset";

    /*
     * Evaluation input data
     */
    @Generated
    private final String id;

    /**
     * Creates an instance of InputDataset class.
     *
     * @param id the id value to set.
     */
    @Generated
    public InputDataset(String id) {
        this.id = id;
    }

    /**
     * Get the type property: Type of the data.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the id property: Evaluation input data.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputDataset from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputDataset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InputDataset.
     */
    @Generated
    public static InputDataset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String type = "dataset";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            InputDataset deserializedInputDataset = new InputDataset(id);
            deserializedInputDataset.type = type;
            return deserializedInputDataset;
        });
    }
}
