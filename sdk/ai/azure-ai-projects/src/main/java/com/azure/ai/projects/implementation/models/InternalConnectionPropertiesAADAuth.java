// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.implementation.models;

import com.azure.ai.projects.models.AuthenticationType;
import com.azure.ai.projects.models.ConnectionType;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Connection properties for connections with AAD authentication (aka `Entra ID passthrough`).
 */
@Immutable
public final class InternalConnectionPropertiesAADAuth extends InternalConnectionProperties {

    /*
     * Authentication type of the connection target
     */
    @Generated
    private AuthenticationType authType = AuthenticationType.ENTRA_ID;

    /**
     * Creates an instance of InternalConnectionPropertiesAADAuth class.
     *
     * @param category the category value to set.
     * @param target the target value to set.
     */
    @Generated
    private InternalConnectionPropertiesAADAuth(ConnectionType category, String target) {
        super(category, target);
    }

    /**
     * Get the authType property: Authentication type of the connection target.
     *
     * @return the authType value.
     */
    @Generated
    @Override
    public AuthenticationType getAuthType() {
        return this.authType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", getCategory() == null ? null : getCategory().toString());
        jsonWriter.writeStringField("target", getTarget());
        jsonWriter.writeStringField("authType", this.authType == null ? null : this.authType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InternalConnectionPropertiesAADAuth from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InternalConnectionPropertiesAADAuth if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InternalConnectionPropertiesAADAuth.
     */
    @Generated
    public static InternalConnectionPropertiesAADAuth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionType category = null;
            String target = null;
            AuthenticationType authType = AuthenticationType.ENTRA_ID;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("category".equals(fieldName)) {
                    category = ConnectionType.fromString(reader.getString());
                } else if ("target".equals(fieldName)) {
                    target = reader.getString();
                } else if ("authType".equals(fieldName)) {
                    authType = AuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            InternalConnectionPropertiesAADAuth deserializedInternalConnectionPropertiesAADAuth
                = new InternalConnectionPropertiesAADAuth(category, target);
            deserializedInternalConnectionPropertiesAADAuth.authType = authType;
            return deserializedInternalConnectionPropertiesAADAuth;
        });
    }
}
