// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Evaluation Schedule Definition.
 */
@Fluent
public final class EvaluationSchedule implements JsonSerializable<EvaluationSchedule> {

    /*
     * Name of the schedule, which also serves as the unique identifier for the evaluation
     */
    @Generated
    private String name;

    /*
     * Data for evaluation.
     */
    @Generated
    private final ApplicationInsightsConfiguration data;

    /*
     * Description of the evaluation. It can be used to store additional information about the evaluation and is
     * mutable.
     */
    @Generated
    private String description;

    /*
     * Metadata containing createdBy and modifiedBy information.
     */
    @Generated
    private SystemData systemData;

    /*
     * Provisioning State of the evaluation. It is set by service and is read-only.
     */
    @Generated
    private String provisioningState;

    /*
     * Evaluation's tags. Unlike properties, tags are fully mutable.
     */
    @Generated
    private Map<String, String> tags;

    /*
     * Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.
     */
    @Generated
    private Map<String, String> properties;

    /*
     * Enabled status of the evaluation. It is set by service and is read-only.
     */
    @Generated
    private String isEnabled;

    /*
     * Evaluators to be used for the evaluation.
     */
    @Generated
    private final Map<String, EvaluatorConfiguration> evaluators;

    /*
     * Trigger for the evaluation.
     */
    @Generated
    private final Trigger trigger;

    /**
     * Creates an instance of EvaluationSchedule class.
     *
     * @param data the data value to set.
     * @param evaluators the evaluators value to set.
     * @param trigger the trigger value to set.
     */
    @Generated
    public EvaluationSchedule(ApplicationInsightsConfiguration data, Map<String, EvaluatorConfiguration> evaluators,
        Trigger trigger) {
        this.data = data;
        this.evaluators = evaluators;
        this.trigger = trigger;
    }

    /**
     * Get the name property: Name of the schedule, which also serves as the unique identifier for the evaluation.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the data property: Data for evaluation.
     *
     * @return the data value.
     */
    @Generated
    public ApplicationInsightsConfiguration getData() {
        return this.data;
    }

    /**
     * Get the description property: Description of the evaluation. It can be used to store additional information about
     * the evaluation and is mutable.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Description of the evaluation. It can be used to store additional information about
     * the evaluation and is mutable.
     *
     * @param description the description value to set.
     * @return the EvaluationSchedule object itself.
     */
    @Generated
    public EvaluationSchedule setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the systemData property: Metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    @Generated
    public SystemData getSystemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: Provisioning State of the evaluation. It is set by service and is read-only.
     *
     * @return the provisioningState value.
     */
    @Generated
    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the tags property: Evaluation's tags. Unlike properties, tags are fully mutable.
     *
     * @return the tags value.
     */
    @Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Evaluation's tags. Unlike properties, tags are fully mutable.
     *
     * @param tags the tags value to set.
     * @return the EvaluationSchedule object itself.
     */
    @Generated
    public EvaluationSchedule setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the properties property: Evaluation's properties. Unlike tags, properties are add-only. Once added, a
     * property cannot be removed.
     *
     * @return the properties value.
     */
    @Generated
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Evaluation's properties. Unlike tags, properties are add-only. Once added, a
     * property cannot be removed.
     *
     * @param properties the properties value to set.
     * @return the EvaluationSchedule object itself.
     */
    @Generated
    public EvaluationSchedule setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the isEnabled property: Enabled status of the evaluation. It is set by service and is read-only.
     *
     * @return the isEnabled value.
     */
    @Generated
    public String getIsEnabled() {
        return this.isEnabled;
    }

    /**
     * Get the evaluators property: Evaluators to be used for the evaluation.
     *
     * @return the evaluators value.
     */
    @Generated
    public Map<String, EvaluatorConfiguration> getEvaluators() {
        return this.evaluators;
    }

    /**
     * Get the trigger property: Trigger for the evaluation.
     *
     * @return the trigger value.
     */
    @Generated
    public Trigger getTrigger() {
        return this.trigger;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("data", this.data);
        jsonWriter.writeMapField("evaluators", this.evaluators, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("trigger", this.trigger);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvaluationSchedule from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvaluationSchedule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EvaluationSchedule.
     */
    @Generated
    public static EvaluationSchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            ApplicationInsightsConfiguration data = null;
            Map<String, EvaluatorConfiguration> evaluators = null;
            Trigger trigger = null;
            String description = null;
            SystemData systemData = null;
            String provisioningState = null;
            Map<String, String> tags = null;
            Map<String, String> properties = null;
            String isEnabled = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("data".equals(fieldName)) {
                    data = ApplicationInsightsConfiguration.fromJson(reader);
                } else if ("evaluators".equals(fieldName)) {
                    evaluators = reader.readMap(reader1 -> EvaluatorConfiguration.fromJson(reader1));
                } else if ("trigger".equals(fieldName)) {
                    trigger = Trigger.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    systemData = SystemData.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    provisioningState = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> reader1.getString());
                } else if ("isEnabled".equals(fieldName)) {
                    isEnabled = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            EvaluationSchedule deserializedEvaluationSchedule = new EvaluationSchedule(data, evaluators, trigger);
            deserializedEvaluationSchedule.name = name;
            deserializedEvaluationSchedule.description = description;
            deserializedEvaluationSchedule.systemData = systemData;
            deserializedEvaluationSchedule.provisioningState = provisioningState;
            deserializedEvaluationSchedule.tags = tags;
            deserializedEvaluationSchedule.properties = properties;
            deserializedEvaluationSchedule.isEnabled = isEnabled;
            return deserializedEvaluationSchedule;
        });
    }
}
