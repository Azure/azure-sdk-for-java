// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * FileDatasetVersion Definition.
 */
@Fluent
public final class FileDatasetVersion extends DatasetVersion {

    /*
     * Dataset type
     */
    @Generated
    private DatasetType type = DatasetType.URI_FILE;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of FileDatasetVersion class.
     */
    @Generated
    public FileDatasetVersion() {
    }

    /**
     * Get the type property: Dataset type.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public DatasetType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FileDatasetVersion setDataUri(String dataUri) {
        super.setDataUri(dataUri);
        this.updatedProperties.add("dataUri");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FileDatasetVersion setDescription(String description) {
        super.setDescription(description);
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FileDatasetVersion setTags(Map<String, String> tags) {
        super.setTags(tags);
        this.updatedProperties.add("tags");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getDatasetVersionAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("dataUri", getDataUri());
            jsonWriter.writeStringField("connectionName", getConnectionName());
            jsonWriter.writeStringField("description", getDescription());
            jsonWriter.writeMapField("tags", getTags(), (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("dataUri")) {
            if (getDataUri() == null) {
                jsonWriter.writeNullField("dataUri");
            } else {
                jsonWriter.writeStringField("dataUri", getDataUri());
            }
        }
        if (updatedProperties.contains("connectionName")) {
            if (getConnectionName() == null) {
                jsonWriter.writeNullField("connectionName");
            } else {
                jsonWriter.writeStringField("connectionName", getConnectionName());
            }
        }
        if (updatedProperties.contains("description")) {
            if (getDescription() == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", getDescription());
            }
        }
        if (updatedProperties.contains("tags")) {
            if (getTags() == null) {
                jsonWriter.writeNullField("tags");
            } else {
                jsonWriter.writeMapField("tags", getTags(), (writer, element) -> {
                    if (element != null) {
                        writer.writeString(element);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        jsonWriter.writeStringField("type", this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileDatasetVersion from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileDatasetVersion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileDatasetVersion.
     */
    @Generated
    public static FileDatasetVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileDatasetVersion deserializedFileDatasetVersion = new FileDatasetVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    JsonMergePatchHelper.getDatasetVersionAccessor()
                        .setName(deserializedFileDatasetVersion, reader.getString());
                } else if ("version".equals(fieldName)) {
                    JsonMergePatchHelper.getDatasetVersionAccessor()
                        .setVersion(deserializedFileDatasetVersion, reader.getString());
                } else if ("dataUri".equals(fieldName)) {
                    JsonMergePatchHelper.getDatasetVersionAccessor()
                        .setDataUri(deserializedFileDatasetVersion, reader.getString());
                } else if ("isReference".equals(fieldName)) {
                    JsonMergePatchHelper.getDatasetVersionAccessor()
                        .setIsReference(deserializedFileDatasetVersion, reader.getNullable(JsonReader::getBoolean));
                } else if ("connectionName".equals(fieldName)) {
                    JsonMergePatchHelper.getDatasetVersionAccessor()
                        .setConnectionName(deserializedFileDatasetVersion, reader.getString());
                } else if ("id".equals(fieldName)) {
                    JsonMergePatchHelper.getDatasetVersionAccessor()
                        .setId(deserializedFileDatasetVersion, reader.getString());
                } else if ("description".equals(fieldName)) {
                    JsonMergePatchHelper.getDatasetVersionAccessor()
                        .setDescription(deserializedFileDatasetVersion, reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    JsonMergePatchHelper.getDatasetVersionAccessor().setTags(deserializedFileDatasetVersion, tags);
                } else if ("type".equals(fieldName)) {
                    deserializedFileDatasetVersion.type = DatasetType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFileDatasetVersion;
        });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FileDatasetVersion setConnectionName(String connectionName) {
        super.setConnectionName(connectionName);
        this.updatedProperties.add("connectionName");
        return this;
    }
}
