// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Azure AI Search Index Definition.
 */
@Fluent
public final class AzureAISearchIndex extends Index {

    /*
     * Type of index
     */
    @Generated
    private IndexType type = IndexType.AZURE_SEARCH;

    /*
     * Name of connection to Azure AI Search
     */
    @Generated
    private String connectionName;

    /*
     * Name of index in Azure AI Search resource to attach
     */
    @Generated
    private String indexName;

    /*
     * Field mapping configuration
     */
    @Generated
    private FieldMapping fieldMapping;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of AzureAISearchIndex class.
     */
    @Generated
    public AzureAISearchIndex() {
    }

    /**
     * Get the type property: Type of index.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public IndexType getType() {
        return this.type;
    }

    /**
     * Get the connectionName property: Name of connection to Azure AI Search.
     *
     * @return the connectionName value.
     */
    @Generated
    public String getConnectionName() {
        return this.connectionName;
    }

    /**
     * Set the connectionName property: Name of connection to Azure AI Search.
     * <p>Required when create the resource.</p>
     *
     * @param connectionName the connectionName value to set.
     * @return the AzureAISearchIndex object itself.
     */
    @Generated
    public AzureAISearchIndex setConnectionName(String connectionName) {
        this.connectionName = connectionName;
        this.updatedProperties.add("connectionName");
        return this;
    }

    /**
     * Get the indexName property: Name of index in Azure AI Search resource to attach.
     *
     * @return the indexName value.
     */
    @Generated
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Set the indexName property: Name of index in Azure AI Search resource to attach.
     * <p>Required when create the resource.</p>
     *
     * @param indexName the indexName value to set.
     * @return the AzureAISearchIndex object itself.
     */
    @Generated
    public AzureAISearchIndex setIndexName(String indexName) {
        this.indexName = indexName;
        this.updatedProperties.add("indexName");
        return this;
    }

    /**
     * Get the fieldMapping property: Field mapping configuration.
     *
     * @return the fieldMapping value.
     */
    @Generated
    public FieldMapping getFieldMapping() {
        return this.fieldMapping;
    }

    /**
     * Set the fieldMapping property: Field mapping configuration.
     *
     * @param fieldMapping the fieldMapping value to set.
     * @return the AzureAISearchIndex object itself.
     */
    @Generated
    public AzureAISearchIndex setFieldMapping(FieldMapping fieldMapping) {
        this.fieldMapping = fieldMapping;
        this.updatedProperties.add("fieldMapping");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureAISearchIndex setDescription(String description) {
        super.setDescription(description);
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureAISearchIndex setTags(Map<String, String> tags) {
        super.setTags(tags);
        this.updatedProperties.add("tags");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getIndexAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("description", getDescription());
            jsonWriter.writeMapField("tags", getTags(), (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeStringField("connectionName", this.connectionName);
            jsonWriter.writeStringField("indexName", this.indexName);
            jsonWriter.writeJsonField("fieldMapping", this.fieldMapping);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("description")) {
            if (getDescription() == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", getDescription());
            }
        }
        if (updatedProperties.contains("tags")) {
            if (getTags() == null) {
                jsonWriter.writeNullField("tags");
            } else {
                jsonWriter.writeMapField("tags", getTags(), (writer, element) -> {
                    if (element != null) {
                        writer.writeString(element);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("connectionName")) {
            if (this.connectionName == null) {
                jsonWriter.writeNullField("connectionName");
            } else {
                jsonWriter.writeStringField("connectionName", this.connectionName);
            }
        }
        if (updatedProperties.contains("indexName")) {
            if (this.indexName == null) {
                jsonWriter.writeNullField("indexName");
            } else {
                jsonWriter.writeStringField("indexName", this.indexName);
            }
        }
        if (updatedProperties.contains("fieldMapping")) {
            if (this.fieldMapping == null) {
                jsonWriter.writeNullField("fieldMapping");
            } else {
                JsonMergePatchHelper.getFieldMappingAccessor().prepareModelForJsonMergePatch(this.fieldMapping, true);
                jsonWriter.writeJsonField("fieldMapping", this.fieldMapping);
                JsonMergePatchHelper.getFieldMappingAccessor().prepareModelForJsonMergePatch(this.fieldMapping, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureAISearchIndex from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureAISearchIndex if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureAISearchIndex.
     */
    @Generated
    public static AzureAISearchIndex fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureAISearchIndex deserializedAzureAISearchIndex = new AzureAISearchIndex();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    JsonMergePatchHelper.getIndexAccessor().setName(deserializedAzureAISearchIndex, reader.getString());
                } else if ("version".equals(fieldName)) {
                    JsonMergePatchHelper.getIndexAccessor()
                        .setVersion(deserializedAzureAISearchIndex, reader.getString());
                } else if ("id".equals(fieldName)) {
                    JsonMergePatchHelper.getIndexAccessor().setId(deserializedAzureAISearchIndex, reader.getString());
                } else if ("description".equals(fieldName)) {
                    JsonMergePatchHelper.getIndexAccessor()
                        .setDescription(deserializedAzureAISearchIndex, reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    JsonMergePatchHelper.getIndexAccessor().setTags(deserializedAzureAISearchIndex, tags);
                } else if ("type".equals(fieldName)) {
                    deserializedAzureAISearchIndex.type = IndexType.fromString(reader.getString());
                } else if ("connectionName".equals(fieldName)) {
                    deserializedAzureAISearchIndex.connectionName = reader.getString();
                } else if ("indexName".equals(fieldName)) {
                    deserializedAzureAISearchIndex.indexName = reader.getString();
                } else if ("fieldMapping".equals(fieldName)) {
                    deserializedAzureAISearchIndex.fieldMapping = FieldMapping.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAzureAISearchIndex;
        });
    }
}
