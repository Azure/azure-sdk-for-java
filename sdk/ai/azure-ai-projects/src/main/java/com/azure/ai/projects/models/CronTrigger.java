// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cron Trigger Definition.
 */
@Immutable
public final class CronTrigger extends Trigger {

    /*
     * Type of the trigger.
     */
    @Generated
    private String type = "Cron";

    /*
     * Cron expression for the trigger.
     */
    @Generated
    private final String expression;

    /**
     * Creates an instance of CronTrigger class.
     *
     * @param expression the expression value to set.
     */
    @Generated
    public CronTrigger(String expression) {
        this.expression = expression;
    }

    /**
     * Get the type property: Type of the trigger.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the expression property: Cron expression for the trigger.
     *
     * @return the expression value.
     */
    @Generated
    public String getExpression() {
        return this.expression;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("expression", this.expression);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CronTrigger from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CronTrigger if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CronTrigger.
     */
    @Generated
    public static CronTrigger fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String expression = null;
            String type = "Cron";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("expression".equals(fieldName)) {
                    expression = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            CronTrigger deserializedCronTrigger = new CronTrigger(expression);
            deserializedCronTrigger.type = type;
            return deserializedCronTrigger;
        });
    }
}
