// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Dataset as source for evaluation.
 */
@Fluent
public final class Dataset extends InputData {

    /*
     * Type of the data.
     */
    @Generated
    private String type = "dataset";

    /*
     * Evaluation input data
     */
    @Generated
    private String id;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of Dataset class.
     */
    @Generated
    public Dataset() {
    }

    /**
     * Get the type property: Type of the data.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the id property: Evaluation input data.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Evaluation input data.
     * <p>Required when create the resource.</p>
     *
     * @param id the id value to set.
     * @return the Dataset object itself.
     */
    @Generated
    public Dataset setId(String id) {
        this.id = id;
        this.updatedProperties.add("id");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getInputDataAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("type", this.type);
            jsonWriter.writeStringField("id", this.id);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        if (updatedProperties.contains("id")) {
            if (this.id == null) {
                jsonWriter.writeNullField("id");
            } else {
                jsonWriter.writeStringField("id", this.id);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Dataset from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Dataset if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Dataset.
     */
    @Generated
    public static Dataset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Dataset deserializedDataset = new Dataset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedDataset.type = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedDataset.id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDataset;
        });
    }
}
