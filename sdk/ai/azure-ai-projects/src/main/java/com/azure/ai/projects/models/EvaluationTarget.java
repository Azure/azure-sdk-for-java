// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Target for the evaluation process.
 */
@Fluent
public final class EvaluationTarget implements JsonSerializable<EvaluationTarget> {

    /*
     * System message related to the evaluation target.
     */
    @Generated
    private String systemMessage;

    /*
     * Model configuration for the evaluation.
     */
    @Generated
    private TargetModelConfig modelConfig;

    /*
     * A dictionary of parameters for the model.
     */
    @Generated
    private Map<String, BinaryData> modelParams;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setEvaluationTargetAccessor(new JsonMergePatchHelper.EvaluationTargetAccessor() {

            @Override
            public EvaluationTarget prepareModelForJsonMergePatch(EvaluationTarget model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(EvaluationTarget model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of EvaluationTarget class.
     */
    @Generated
    public EvaluationTarget() {
    }

    /**
     * Get the systemMessage property: System message related to the evaluation target.
     *
     * @return the systemMessage value.
     */
    @Generated
    public String getSystemMessage() {
        return this.systemMessage;
    }

    /**
     * Set the systemMessage property: System message related to the evaluation target.
     * <p>Required when create the resource.</p>
     *
     * @param systemMessage the systemMessage value to set.
     * @return the EvaluationTarget object itself.
     */
    @Generated
    public EvaluationTarget setSystemMessage(String systemMessage) {
        this.systemMessage = systemMessage;
        this.updatedProperties.add("systemMessage");
        return this;
    }

    /**
     * Get the modelConfig property: Model configuration for the evaluation.
     *
     * @return the modelConfig value.
     */
    @Generated
    public TargetModelConfig getModelConfig() {
        return this.modelConfig;
    }

    /**
     * Set the modelConfig property: Model configuration for the evaluation.
     * <p>Required when create the resource.</p>
     *
     * @param modelConfig the modelConfig value to set.
     * @return the EvaluationTarget object itself.
     */
    @Generated
    public EvaluationTarget setModelConfig(TargetModelConfig modelConfig) {
        this.modelConfig = modelConfig;
        this.updatedProperties.add("modelConfig");
        return this;
    }

    /**
     * Get the modelParams property: A dictionary of parameters for the model.
     *
     * @return the modelParams value.
     */
    @Generated
    public Map<String, BinaryData> getModelParams() {
        return this.modelParams;
    }

    /**
     * Set the modelParams property: A dictionary of parameters for the model.
     *
     * @param modelParams the modelParams value to set.
     * @return the EvaluationTarget object itself.
     */
    @Generated
    public EvaluationTarget setModelParams(Map<String, BinaryData> modelParams) {
        this.modelParams = modelParams;
        this.updatedProperties.add("modelParams");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("systemMessage", this.systemMessage);
            jsonWriter.writeJsonField("modelConfig", this.modelConfig);
            jsonWriter.writeMapField("modelParams", this.modelParams,
                (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("systemMessage")) {
            if (this.systemMessage == null) {
                jsonWriter.writeNullField("systemMessage");
            } else {
                jsonWriter.writeStringField("systemMessage", this.systemMessage);
            }
        }
        if (updatedProperties.contains("modelConfig")) {
            if (this.modelConfig == null) {
                jsonWriter.writeNullField("modelConfig");
            } else {
                JsonMergePatchHelper.getTargetModelConfigAccessor()
                    .prepareModelForJsonMergePatch(this.modelConfig, true);
                jsonWriter.writeJsonField("modelConfig", this.modelConfig);
                JsonMergePatchHelper.getTargetModelConfigAccessor()
                    .prepareModelForJsonMergePatch(this.modelConfig, false);
            }
        }
        if (updatedProperties.contains("modelParams")) {
            if (this.modelParams == null) {
                jsonWriter.writeNullField("modelParams");
            } else {
                jsonWriter.writeMapField("modelParams", this.modelParams, (writer, element) -> {
                    if (element != null) {
                        writer.writeUntyped(element == null ? null : element.toObject(Object.class));
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvaluationTarget from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvaluationTarget if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EvaluationTarget.
     */
    @Generated
    public static EvaluationTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EvaluationTarget deserializedEvaluationTarget = new EvaluationTarget();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("systemMessage".equals(fieldName)) {
                    deserializedEvaluationTarget.systemMessage = reader.getString();
                } else if ("modelConfig".equals(fieldName)) {
                    deserializedEvaluationTarget.modelConfig = TargetModelConfig.fromJson(reader);
                } else if ("modelParams".equals(fieldName)) {
                    Map<String, BinaryData> modelParams = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedEvaluationTarget.modelParams = modelParams;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedEvaluationTarget;
        });
    }
}
