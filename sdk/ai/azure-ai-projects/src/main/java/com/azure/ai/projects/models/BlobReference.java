// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Blob reference details.
 */
@Immutable
public final class BlobReference implements JsonSerializable<BlobReference> {

    /*
     * Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path
     */
    @Generated
    private final String blobUri;

    /*
     * ARM ID of the storage account to use.
     */
    @Generated
    private final String storageAccountArmId;

    /*
     * Credential info to access the storage account.
     */
    @Generated
    private final SasCredential credential;

    /**
     * Creates an instance of BlobReference class.
     *
     * @param blobUri the blobUri value to set.
     * @param storageAccountArmId the storageAccountArmId value to set.
     * @param credential the credential value to set.
     */
    @Generated
    private BlobReference(String blobUri, String storageAccountArmId, SasCredential credential) {
        this.blobUri = blobUri;
        this.storageAccountArmId = storageAccountArmId;
        this.credential = credential;
    }

    /**
     * Get the blobUri property: Blob URI path for client to upload data. Example:
     * https://blob.windows.core.net/Container/Path.
     *
     * @return the blobUri value.
     */
    @Generated
    public String getBlobUri() {
        return this.blobUri;
    }

    /**
     * Get the storageAccountArmId property: ARM ID of the storage account to use.
     *
     * @return the storageAccountArmId value.
     */
    @Generated
    public String getStorageAccountArmId() {
        return this.storageAccountArmId;
    }

    /**
     * Get the credential property: Credential info to access the storage account.
     *
     * @return the credential value.
     */
    @Generated
    public SasCredential getCredential() {
        return this.credential;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("blobUri", this.blobUri);
        jsonWriter.writeStringField("storageAccountArmId", this.storageAccountArmId);
        jsonWriter.writeJsonField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobReference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlobReference.
     */
    @Generated
    public static BlobReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String blobUri = null;
            String storageAccountArmId = null;
            SasCredential credential = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("blobUri".equals(fieldName)) {
                    blobUri = reader.getString();
                } else if ("storageAccountArmId".equals(fieldName)) {
                    storageAccountArmId = reader.getString();
                } else if ("credential".equals(fieldName)) {
                    credential = SasCredential.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new BlobReference(blobUri, storageAccountArmId, credential);
        });
    }
}
