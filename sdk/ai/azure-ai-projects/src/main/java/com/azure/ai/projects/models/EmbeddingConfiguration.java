// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Embedding configuration class.
 */
@Fluent
public final class EmbeddingConfiguration implements JsonSerializable<EmbeddingConfiguration> {

    /*
     * Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a
     * connection.
     */
    @Generated
    private String modelDeploymentName;

    /*
     * Embedding field
     */
    @Generated
    private String embeddingField;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setEmbeddingConfigurationAccessor(new JsonMergePatchHelper.EmbeddingConfigurationAccessor() {

                @Override
                public EmbeddingConfiguration prepareModelForJsonMergePatch(EmbeddingConfiguration model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(EmbeddingConfiguration model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of EmbeddingConfiguration class.
     */
    @Generated
    public EmbeddingConfiguration() {
    }

    /**
     * Get the modelDeploymentName property: Deployment name of embedding model. It can point to a model deployment
     * either in the parent AIServices or a connection.
     *
     * @return the modelDeploymentName value.
     */
    @Generated
    public String getModelDeploymentName() {
        return this.modelDeploymentName;
    }

    /**
     * Set the modelDeploymentName property: Deployment name of embedding model. It can point to a model deployment
     * either in the parent AIServices or a connection.
     * <p>Required when create the resource.</p>
     *
     * @param modelDeploymentName the modelDeploymentName value to set.
     * @return the EmbeddingConfiguration object itself.
     */
    @Generated
    public EmbeddingConfiguration setModelDeploymentName(String modelDeploymentName) {
        this.modelDeploymentName = modelDeploymentName;
        this.updatedProperties.add("modelDeploymentName");
        return this;
    }

    /**
     * Get the embeddingField property: Embedding field.
     *
     * @return the embeddingField value.
     */
    @Generated
    public String getEmbeddingField() {
        return this.embeddingField;
    }

    /**
     * Set the embeddingField property: Embedding field.
     * <p>Required when create the resource.</p>
     *
     * @param embeddingField the embeddingField value to set.
     * @return the EmbeddingConfiguration object itself.
     */
    @Generated
    public EmbeddingConfiguration setEmbeddingField(String embeddingField) {
        this.embeddingField = embeddingField;
        this.updatedProperties.add("embeddingField");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("modelDeploymentName", this.modelDeploymentName);
            jsonWriter.writeStringField("embeddingField", this.embeddingField);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("modelDeploymentName")) {
            if (this.modelDeploymentName == null) {
                jsonWriter.writeNullField("modelDeploymentName");
            } else {
                jsonWriter.writeStringField("modelDeploymentName", this.modelDeploymentName);
            }
        }
        if (updatedProperties.contains("embeddingField")) {
            if (this.embeddingField == null) {
                jsonWriter.writeNullField("embeddingField");
            } else {
                jsonWriter.writeStringField("embeddingField", this.embeddingField);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EmbeddingConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EmbeddingConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EmbeddingConfiguration.
     */
    @Generated
    public static EmbeddingConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EmbeddingConfiguration deserializedEmbeddingConfiguration = new EmbeddingConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("modelDeploymentName".equals(fieldName)) {
                    deserializedEmbeddingConfiguration.modelDeploymentName = reader.getString();
                } else if ("embeddingField".equals(fieldName)) {
                    deserializedEmbeddingConfiguration.embeddingField = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedEmbeddingConfiguration;
        });
    }
}
