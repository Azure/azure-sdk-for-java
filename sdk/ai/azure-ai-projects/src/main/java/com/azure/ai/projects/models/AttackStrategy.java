// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Strategies for attacks.
 */
public final class AttackStrategy extends ExpandableStringEnum<AttackStrategy> {

    /**
     * Represents a default set of easy complexity attacks. Easy complexity attacks require less effort, such as
     * translation of a prompt into some encoding, and does not require any Large Language Model to convert or
     * orchestrate.
     */
    @Generated
    public static final AttackStrategy EASY = fromString("easy");

    /**
     * Represents a default set of moderate complexity attacks. Moderate complexity attacks require having access to
     * resources such as another generative AI model.
     */
    @Generated
    public static final AttackStrategy MODERATE = fromString("moderate");

    /**
     * Represents a default set of difficult complexity attacks. Difficult complexity attacks include attacks that
     * require access to significant resources and effort to execute an attack such as knowledge of search-based
     * algorithms in addition to a generative AI model.
     */
    @Generated
    public static final AttackStrategy DIFFICULT = fromString("difficult");

    /**
     * Generates visual art using ASCII characters, often used for creative or obfuscation purposes.
     */
    @Generated
    public static final AttackStrategy ASCII_ART = fromString("ascii_art");

    /**
     * Conceals data within ASCII characters, making it harder to detect.
     */
    @Generated
    public static final AttackStrategy ASCII_SMUGGLER = fromString("ascii_smuggler");

    /**
     * Implements the Atbash cipher, a simple substitution cipher where each letter is mapped to its reverse.
     */
    @Generated
    public static final AttackStrategy ATBASH = fromString("atbash");

    /**
     * Encodes binary data into a text format using Base64, commonly used for data transmission.
     */
    @Generated
    public static final AttackStrategy BASE64 = fromString("base64");

    /**
     * Converts text into binary code, representing data in a series of 0s and 1s.
     */
    @Generated
    public static final AttackStrategy BINARY = fromString("binary");

    /**
     * Applies the Caesar cipher, a substitution cipher that shifts characters by a fixed number of positions.
     */
    @Generated
    public static final AttackStrategy CAESAR = fromString("caesar");

    /**
     * Alters text by adding spaces between characters, often used for obfuscation.
     */
    @Generated
    public static final AttackStrategy CHARACTER_SPACE = fromString("character_space");

    /**
     * Injects specially crafted prompts to bypass AI safeguards, known as User Injected Prompt Attacks (UPIA).
     */
    @Generated
    public static final AttackStrategy JAILBREAK = fromString("jailbreak");

    /**
     * Utilizes ANSI escape sequences to manipulate text appearance and behavior.
     */
    @Generated
    public static final AttackStrategy ANSII_ATTACK = fromString("ansii_attack");

    /**
     * Swaps characters within text to create variations or obfuscate the original content.
     */
    @Generated
    public static final AttackStrategy CHARACTER_SWAP = fromString("character_swap");

    /**
     * Appends an adversarial suffix to the prompt.
     */
    @Generated
    public static final AttackStrategy SUFFIX_APPEND = fromString("suffix_append");

    /**
     * Joins multiple strings together, often used for concatenation or obfuscation.
     */
    @Generated
    public static final AttackStrategy STRING_JOIN = fromString("string_join");

    /**
     * Uses Unicode characters that look similar to standard characters, creating visual confusion.
     */
    @Generated
    public static final AttackStrategy UNICODE_CONFUSABLE = fromString("unicode_confusable");

    /**
     * Substitutes standard characters with Unicode equivalents, often for obfuscation.
     */
    @Generated
    public static final AttackStrategy UNICODE_SUBSTITUTION = fromString("unicode_substitution");

    /**
     * Adds diacritical marks to characters, changing their appearance and sometimes their meaning.
     */
    @Generated
    public static final AttackStrategy DIACRITIC = fromString("diacritic");

    /**
     * Flips characters from front to back, creating a mirrored effect.
     */
    @Generated
    public static final AttackStrategy FLIP = fromString("flip");

    /**
     * Transforms text into Leetspeak, a form of encoding that replaces letters with similar-looking numbers or symbols.
     */
    @Generated
    public static final AttackStrategy LEETSPEAK = fromString("leetspeak");

    /**
     * Applies the ROT13 cipher, a simple substitution cipher that shifts characters by 13 positions.
     */
    @Generated
    public static final AttackStrategy ROT13 = fromString("rot13");

    /**
     * Encodes text into Morse code, using dots and dashes to represent characters.
     */
    @Generated
    public static final AttackStrategy MORSE = fromString("morse");

    /**
     * Encodes text into URL format.
     */
    @Generated
    public static final AttackStrategy URL = fromString("url");

    /**
     * Represents the baseline direct adversarial probing, which is used by attack strategies as the attack objective.
     */
    @Generated
    public static final AttackStrategy BASELINE = fromString("baseline");

    /**
     * Creates a new instance of AttackStrategy value.
     *
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public AttackStrategy() {
    }

    /**
     * Creates or finds a AttackStrategy from its string representation.
     *
     * @param name a name to look for.
     * @return the corresponding AttackStrategy.
     */
    @Generated
    public static AttackStrategy fromString(String name) {
        return fromString(name, AttackStrategy.class);
    }

    /**
     * Gets known AttackStrategy values.
     *
     * @return known AttackStrategy values.
     */
    @Generated
    public static Collection<AttackStrategy> values() {
        return values(AttackStrategy.class);
    }
}
