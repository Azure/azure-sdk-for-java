// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Sku information.
 */
@Immutable
public final class Sku implements JsonSerializable<Sku> {

    /*
     * Sku capacity
     */
    @Generated
    private final long capacity;

    /*
     * Sku family
     */
    @Generated
    private final String family;

    /*
     * Sku name
     */
    @Generated
    private final String name;

    /*
     * Sku size
     */
    @Generated
    private final String size;

    /*
     * Sku tier
     */
    @Generated
    private final String tier;

    /**
     * Creates an instance of Sku class.
     *
     * @param capacity the capacity value to set.
     * @param family the family value to set.
     * @param name the name value to set.
     * @param size the size value to set.
     * @param tier the tier value to set.
     */
    @Generated
    private Sku(long capacity, String family, String name, String size, String tier) {
        this.capacity = capacity;
        this.family = family;
        this.name = name;
        this.size = size;
        this.tier = tier;
    }

    /**
     * Get the capacity property: Sku capacity.
     *
     * @return the capacity value.
     */
    @Generated
    public long getCapacity() {
        return this.capacity;
    }

    /**
     * Get the family property: Sku family.
     *
     * @return the family value.
     */
    @Generated
    public String getFamily() {
        return this.family;
    }

    /**
     * Get the name property: Sku name.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the size property: Sku size.
     *
     * @return the size value.
     */
    @Generated
    public String getSize() {
        return this.size;
    }

    /**
     * Get the tier property: Sku tier.
     *
     * @return the tier value.
     */
    @Generated
    public String getTier() {
        return this.tier;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("capacity", this.capacity);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("size", this.size);
        jsonWriter.writeStringField("tier", this.tier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Sku from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Sku if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Sku.
     */
    @Generated
    public static Sku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long capacity = 0L;
            String family = null;
            String name = null;
            String size = null;
            String tier = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("capacity".equals(fieldName)) {
                    capacity = reader.getLong();
                } else if ("family".equals(fieldName)) {
                    family = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("size".equals(fieldName)) {
                    size = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    tier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new Sku(capacity, family, name, size, tier);
        });
    }
}
