// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The credentials needed for Shared Access Signatures (SAS) authentication.
 */
@Immutable
public final class CredentialsSASAuth implements JsonSerializable<CredentialsSASAuth> {

    /*
     * The Shared Access Signatures (SAS) token
     */
    @Generated
    private final String sAS;

    /**
     * Creates an instance of CredentialsSASAuth class.
     *
     * @param sAS the sAS value to set.
     */
    @Generated
    private CredentialsSASAuth(String sAS) {
        this.sAS = sAS;
    }

    /**
     * Get the sAS property: The Shared Access Signatures (SAS) token.
     *
     * @return the sAS value.
     */
    @Generated
    public String getSAS() {
        return this.sAS;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("SAS", this.sAS);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CredentialsSASAuth from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CredentialsSASAuth if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CredentialsSASAuth.
     */
    @Generated
    public static CredentialsSASAuth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String sAS = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("SAS".equals(fieldName)) {
                    sAS = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new CredentialsSASAuth(sAS);
        });
    }
}
