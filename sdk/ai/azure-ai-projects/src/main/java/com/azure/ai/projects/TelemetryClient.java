// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects;

import com.azure.ai.projects.models.Connection;
import com.azure.ai.projects.models.ConnectionType;
import com.azure.ai.projects.models.CredentialType;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.AzureException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.logging.ClientLogger;
import java.util.Iterator;

/**
 * Initializes a new instance of the synchronous AIProjectClient type.
 */
@ServiceClient(builder = AIProjectClientBuilder.class)
public final class TelemetryClient {

    private final ConnectionsClient connectionsClient;
    private final ClientLogger logger = new ClientLogger(TelemetryClient.class);
    private static final String ENV_CONTENT_RECORDING_ENABLED = "AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED";

    /**
     * Initializes an instance of TelemetryClient class.
     *
     * @param connectionsClient the connections client implementation.
     */
    TelemetryClient(ConnectionsClient connectionsClient) {
        this.connectionsClient = connectionsClient;
    }

    /**
     * Get the Application Insights connection string associated with the Project's Application Insights resource.
     *
     * @return The Application Insights connection string if the resource was enabled for the Project.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String getConnectionString() {
        PagedIterable<Connection> connections
            = connectionsClient.listConnections(ConnectionType.APPLICATION_INSIGHTS, true);
        Iterator<Connection> iterator = connections.iterator();

        if (iterator.hasNext()) {
            Connection connection = connectionsClient.getConnection(iterator.next().getName(), true);
            if (connection.getCredentials().getType() == CredentialType.API_KEY) {
                if (connection.getId() != null) {
                    return connection.getId();
                } else {
                    throw logger.logExceptionAsError(
                        new AzureException("Application Insights connection does not have a connection string."));
                }
            } else {
                throw logger.logExceptionAsError(
                    new AzureException("Application Insights connection does not use API Key credentials."));
            }
        } else {
            throw logger.logExceptionAsError(new AzureException("No Application Insights connection found."));
        }
    }
}
