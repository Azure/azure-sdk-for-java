// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects;

import com.azure.ai.agents.persistent.PersistentAgentsAsyncClient;
import com.azure.ai.agents.persistent.PersistentAgentsClient;
import com.azure.ai.agents.persistent.PersistentAgentsClientBuilder;
import com.azure.ai.agents.persistent.PersistentAgentsServiceVersion;
import com.azure.ai.projects.implementation.AIProjectClientImpl;
import com.azure.ai.projects.implementation.InferenceClientImpl;
import com.azure.ai.projects.models.ApiKeyCredentials;
import com.azure.ai.projects.models.BaseCredentials;
import com.azure.ai.projects.models.Connection;
import com.azure.ai.projects.models.ConnectionType;
import com.azure.ai.projects.models.CredentialType;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.client.traits.TokenCredentialTrait;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.Context;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import com.openai.azure.AzureOpenAIServiceVersion;
import com.openai.client.okhttp.OpenAIOkHttpClient;
import com.openai.credential.BearerTokenCredential;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Supplier;

/**
 * A builder for creating a new instance of the AIProjectClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        ConnectionsClient.class,
        EvaluationsClient.class,
        DatasetsClient.class,
        IndexesClient.class,
        DeploymentsClient.class,
        RedTeamsClient.class,
        ConnectionsAsyncClient.class,
        EvaluationsAsyncClient.class,
        DatasetsAsyncClient.class,
        IndexesAsyncClient.class,
        DeploymentsAsyncClient.class,
        RedTeamsAsyncClient.class })
public final class AIProjectClientBuilder
    implements HttpTrait<AIProjectClientBuilder>, ConfigurationTrait<AIProjectClientBuilder>,
    TokenCredentialTrait<AIProjectClientBuilder>, EndpointTrait<AIProjectClientBuilder> {

    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final String[] DEFAULT_SCOPES = new String[] { "https://ai.azure.com/.default" };

    @Generated
    private static final Map<String, String> PROPERTIES = CoreUtils.getProperties("azure-ai-projects.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The TokenCredential used for authentication.
     */
    @Generated
    private TokenCredential tokenCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder credential(TokenCredential tokenCredential) {
        this.tokenCredential = tokenCredential;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Service version
     */
    @Generated
    private ProjectsServiceVersion serviceVersion;

    /**
     * Sets Service version.
     *
     * @param serviceVersion the serviceVersion value.
     * @return the AIProjectClientBuilder.
     */
    @Generated
    public AIProjectClientBuilder serviceVersion(ProjectsServiceVersion serviceVersion) {
        this.serviceVersion = serviceVersion;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the AIProjectClientBuilder.
     */
    @Generated
    public AIProjectClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of AIProjectClientImpl with the provided parameters.
     *
     * @return an instance of AIProjectClientImpl.
     */
    @Generated
    private AIProjectClientImpl buildInnerClient() {
        this.validateClient();
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        ProjectsServiceVersion localServiceVersion
            = (serviceVersion != null) ? serviceVersion : ProjectsServiceVersion.getLatest();
        AIProjectClientImpl client = new AIProjectClientImpl(localPipeline,
            JacksonAdapter.createDefaultSerializerAdapter(), this.endpoint, localServiceVersion);
        return client;
    }

    @Generated
    private void validateClient() {
        // This method is invoked from 'buildInnerClient'/'buildClient' method.
        // Developer can customize this method, to validate that the necessary conditions are met for the new client.
        Objects.requireNonNull(endpoint, "'endpoint' cannot be null.");
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = CoreUtils.createHttpHeadersFromClientOptions(localClientOptions);
        if (headers != null) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        if (tokenCredential != null) {
            policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPES));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient)
            .clientOptions(localClientOptions)
            .build();
        return httpPipeline;
    }

    /**
     * Creates a configured instance of PersistentAgentsClientBuilder.
     *
     * @return a configured instance of PersistentAgentsClientBuilder.
     */
    private PersistentAgentsClientBuilder createPersistentAgentsDelegateBuilder() {
        PersistentAgentsClientBuilder builder = new PersistentAgentsClientBuilder();
        // Configure the builder with all the properties from this builder
        if (pipeline != null) {
            builder.pipeline(pipeline);
        }
        if (httpClient != null) {
            builder.httpClient(httpClient);
        }
        if (httpLogOptions != null) {
            builder.httpLogOptions(httpLogOptions);
        }
        if (clientOptions != null) {
            builder.clientOptions(clientOptions);
        }
        if (retryOptions != null) {
            builder.retryOptions(retryOptions);
        }
        if (configuration != null) {
            builder.configuration(configuration);
        }
        if (tokenCredential != null) {
            builder.credential(tokenCredential);
        }
        if (endpoint != null) {
            builder.endpoint(endpoint);
        }
        if (serviceVersion != null) {
            builder.serviceVersion(PersistentAgentsServiceVersion.valueOf(serviceVersion.getVersion()));
        }
        if (retryPolicy != null) {
            builder.retryPolicy(retryPolicy);
        }
        // Add all pipeline policies
        for (HttpPipelinePolicy policy : pipelinePolicies) {
            builder.addPolicy(policy);
        }
        return builder;
    }

    /**
     * The OpenAI connection name to be used for the OpenAIClient.
     */
    private String openAIConnectionName;

    /**
     * Sets the OpenAI connection name to be used for the OpenAIClient.
     *
     * @param openAIConnectionName the OpenAI connection name.
     * @return the AIProjectClientBuilder.
     */
    public AIProjectClientBuilder openAIConnectionName(String openAIConnectionName) {
        this.openAIConnectionName = openAIConnectionName;
        return this;
    }

    /**
     * The Azure OpenAI service version to be used for the OpenAIClient.
     */
    private AzureOpenAIServiceVersion azureOpenAIServiceVersion;

    /**
     * Sets the OpenAI service version to be used for the OpenAIClient.
     *
     * @param azureOpenAIServiceVersion the Azure OpenAI service version.
     * @return the AIProjectClientBuilder.
     */
    public AIProjectClientBuilder openAIServiceVersion(AzureOpenAIServiceVersion azureOpenAIServiceVersion) {
        this.azureOpenAIServiceVersion = azureOpenAIServiceVersion;
        return this;
    }

    /**
     * Creates a configured instance of OpenAIOkHttpClient.Builder.
     *
     * @return a configured instance of OpenAIOkHttpClient.Builder.
     */
    private OpenAIOkHttpClient.Builder createOpenAIOkHttpClientDelegateBuilder() {
        OpenAIOkHttpClient.Builder builder = OpenAIOkHttpClient.builder();
        ConnectionsClient connectionsClient = this.buildConnectionsClient();
        if (openAIConnectionName == null) {
            // use the parent resource
            String azureOpenAIEndpoint = getOpenAIInferenceUrl(this.endpoint);
            builder.baseUrl(azureOpenAIEndpoint);
            builder.credential(BearerTokenCredential
                .create(getBearerTokenSupplier(this.tokenCredential, "https://cognitiveservices.azure.com/.default")));
        } else {
            Connection connection = connectionsClient.getConnection(openAIConnectionName, true);
            if (connection.getType() != ConnectionType.AZURE_OPEN_AI) {
                throw LOGGER.logExceptionAsError(new IllegalArgumentException("The connection is not of type OPENAI."));
            }
            String azureOpenAIEndpoint = connection.getTarget();
            if (azureOpenAIEndpoint.endsWith("/")) {
                azureOpenAIEndpoint = azureOpenAIEndpoint.substring(0, azureOpenAIEndpoint.length() - 1);
            }
            builder.baseUrl(azureOpenAIEndpoint);
            BaseCredentials credentials = connection.getCredentials();
            if (credentials.getType() == CredentialType.API_KEY && credentials instanceof ApiKeyCredentials) {
                String apiKey = ((ApiKeyCredentials) credentials).getApiKey();
                builder.apiKey(apiKey);
            } else if (credentials.getType() == CredentialType.ENTRA_ID) {
                if (tokenCredential == null) {
                    throw LOGGER.logExceptionAsError(
                        new IllegalArgumentException("Credential is required for OpenAI connection."));
                }
                builder.credential(BearerTokenCredential
                    .create(getBearerTokenSupplier(tokenCredential, "https://cognitiveservices.azure.com/.default")));
            } else {
                throw LOGGER.logExceptionAsError(
                    new IllegalArgumentException("Unsupported credential type for OpenAI connection."));
            }
        }
        if (azureOpenAIServiceVersion != null) {
            builder.azureServiceVersion(azureOpenAIServiceVersion);
        }
        return builder;
    }

    /**
     * Builds an instance of ConnectionsAsyncClient class.
     *
     * @return an instance of ConnectionsAsyncClient.
     */
    @Generated
    public ConnectionsAsyncClient buildConnectionsAsyncClient() {
        return new ConnectionsAsyncClient(buildInnerClient().getConnections());
    }

    /**
     * Builds an instance of DatasetsAsyncClient class.
     *
     * @return an instance of DatasetsAsyncClient.
     */
    @Generated
    public DatasetsAsyncClient buildDatasetsAsyncClient() {
        return new DatasetsAsyncClient(buildInnerClient().getDatasets());
    }

    /**
     * Builds an instance of IndexesAsyncClient class.
     *
     * @return an instance of IndexesAsyncClient.
     */
    @Generated
    public IndexesAsyncClient buildIndexesAsyncClient() {
        return new IndexesAsyncClient(buildInnerClient().getIndexes());
    }

    /**
     * Builds an instance of DeploymentsAsyncClient class.
     *
     * @return an instance of DeploymentsAsyncClient.
     */
    @Generated
    public DeploymentsAsyncClient buildDeploymentsAsyncClient() {
        return new DeploymentsAsyncClient(buildInnerClient().getDeployments());
    }

    /**
     * Builds an instance of ConnectionsClient class.
     *
     * @return an instance of ConnectionsClient.
     */
    @Generated
    public ConnectionsClient buildConnectionsClient() {
        return new ConnectionsClient(buildInnerClient().getConnections());
    }

    /**
     * Builds an instance of DatasetsClient class.
     *
     * @return an instance of DatasetsClient.
     */
    @Generated
    public DatasetsClient buildDatasetsClient() {
        return new DatasetsClient(buildInnerClient().getDatasets());
    }

    /**
     * Builds an instance of IndexesClient class.
     *
     * @return an instance of IndexesClient.
     */
    @Generated
    public IndexesClient buildIndexesClient() {
        return new IndexesClient(buildInnerClient().getIndexes());
    }

    /**
     * Builds an instance of DeploymentsClient class.
     *
     * @return an instance of DeploymentsClient.
     */
    @Generated
    public DeploymentsClient buildDeploymentsClient() {
        return new DeploymentsClient(buildInnerClient().getDeployments());
    }

    /**
     * Builds an instance of TelemetryClient
     *
     * @return an instance of TelemetryClient.
     */
    public TelemetryClient buildTelemetryClient() {
        ConnectionsClient connectionsClient = this.buildConnectionsClient();
        return new TelemetryClient(connectionsClient);
    }

    /**
     * Builds an instance of TelemetryAsyncClient
     *
     * @return an instance of TelemetryAsyncClient.
     */
    public TelemetryAsyncClient buildTelemetryAsyncClient() {
        ConnectionsAsyncClient connectionsAsyncClient = this.buildConnectionsAsyncClient();
        return new TelemetryAsyncClient(connectionsAsyncClient);
    }

    /**
     * Builds an instance of PersistentAgentsClient
     *
     * @return an instance of PersistentAgentsClient.
     */
    public PersistentAgentsClient buildPersistentAgentsClient() {
        return createPersistentAgentsDelegateBuilder().buildClient();
    }

    /**
     * Builds an instance of PersistentAgentsAsyncClient
     *
     * @return an instance of PersistentAgentsAsyncClient.
     */
    public PersistentAgentsAsyncClient buildPersistentAgentsAsyncClient() {
        return createPersistentAgentsDelegateBuilder().buildAsyncClient();
    }

    /**
     * Builds an instance of InferenceClient.
     *
     * @return an instance of InferenceClient.
     */
    public InferenceClient buildInferenceClient() {
        return new InferenceClient(new InferenceClientImpl(createOpenAIOkHttpClientDelegateBuilder()));
    }

    /**
     * Builds an instance of InferenceAsyncClient.
     *
     * @return an instance of InferenceAsyncClient.
     */
    public InferenceAsyncClient buildInferenceAsyncClient() {
        return new InferenceAsyncClient(new InferenceClientImpl(createOpenAIOkHttpClientDelegateBuilder()));
    }

    private static final ClientLogger LOGGER = new ClientLogger(AIProjectClientBuilder.class);

    private static Supplier<String> getBearerTokenSupplier(TokenCredential credential, String... scopes) {
        HttpPipeline pipeline
            = new HttpPipelineBuilder().policies(new BearerTokenAuthenticationPolicy(credential, scopes)).build();
        return () -> {
            // This request will never need to go anywhere; it is simply to cause the policy to interact with
            // the user's credential
            HttpRequest req = new HttpRequest(HttpMethod.GET, "https://www.example.com");
            try (HttpResponse res = pipeline.sendSync(req, Context.NONE)) {
                return res.getRequest().getHeaders().get(HttpHeaderName.AUTHORIZATION).getValue().split(" ")[1];
            }
        };
    }

    /**
     * Converts an input URL in the format:
     * https://[host-name]/[some-path]
     * to:
     * https://[host-name]
     *
     * @param inputUrl The input endpoint URL used to construct AIProjectClient.
     * @return The endpoint URL required to construct an AzureOpenAI client.
     */
    private static String getOpenAIInferenceUrl(String inputUrl) {
        URL parsed = null;
        try {
            parsed = new URL(inputUrl);
        } catch (MalformedURLException e) {
            throw LOGGER
                .logExceptionAsError(new IllegalArgumentException("Invalid endpoint URL format. Malformed.", e));
        }
        if (!"https".equals(parsed.getProtocol()) || parsed.getHost().isEmpty()) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Invalid endpoint URL format. Must be an https URL with a host."));
        }
        String newUrl = "https://" + parsed.getHost();
        return newUrl;
    }

    /**
     * Create an instance of the AIProjectClientBuilder.
     */
    @Generated
    public AIProjectClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /**
     * Builds an instance of EvaluationsAsyncClient class.
     *
     * @return an instance of EvaluationsAsyncClient.
     */
    @Generated
    public EvaluationsAsyncClient buildEvaluationsAsyncClient() {
        return new EvaluationsAsyncClient(buildInnerClient().getEvaluations());
    }

    /**
     * Builds an instance of RedTeamsAsyncClient class.
     *
     * @return an instance of RedTeamsAsyncClient.
     */
    @Generated
    public RedTeamsAsyncClient buildRedTeamsAsyncClient() {
        return new RedTeamsAsyncClient(buildInnerClient().getRedTeams());
    }

    /**
     * Builds an instance of EvaluationsClient class.
     *
     * @return an instance of EvaluationsClient.
     */
    @Generated
    public EvaluationsClient buildEvaluationsClient() {
        return new EvaluationsClient(buildInnerClient().getEvaluations());
    }

    /**
     * Builds an instance of RedTeamsClient class.
     *
     * @return an instance of RedTeamsClient.
     */
    @Generated
    public RedTeamsClient buildRedTeamsClient() {
        return new RedTeamsClient(buildInnerClient().getRedTeams());
    }
}
