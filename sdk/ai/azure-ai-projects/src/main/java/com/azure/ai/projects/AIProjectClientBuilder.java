// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects;

import com.azure.ai.agents.persistent.AgentsServiceVersion;
import com.azure.ai.agents.persistent.FilesAsyncClient;
import com.azure.ai.agents.persistent.FilesClient;
import com.azure.ai.agents.persistent.MessagesAsyncClient;
import com.azure.ai.agents.persistent.MessagesClient;
import com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient;
import com.azure.ai.agents.persistent.PersistentAgentsAdministrationClient;
import com.azure.ai.agents.persistent.PersistentAgentsAdministrationClientBuilder;
import com.azure.ai.agents.persistent.RunStepsAsyncClient;
import com.azure.ai.agents.persistent.RunStepsClient;
import com.azure.ai.agents.persistent.RunsAsyncClient;
import com.azure.ai.agents.persistent.RunsClient;
import com.azure.ai.agents.persistent.ThreadsAsyncClient;
import com.azure.ai.agents.persistent.ThreadsClient;
import com.azure.ai.agents.persistent.VectorStoreFileBatchesAsyncClient;
import com.azure.ai.agents.persistent.VectorStoreFileBatchesClient;
import com.azure.ai.agents.persistent.VectorStoreFilesAsyncClient;
import com.azure.ai.agents.persistent.VectorStoreFilesClient;
import com.azure.ai.agents.persistent.VectorStoresAsyncClient;
import com.azure.ai.agents.persistent.VectorStoresClient;
import com.azure.ai.projects.implementation.AIProjectClientImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.client.traits.TokenCredentialTrait;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A builder for creating a new instance of the AIProjectClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        ConnectionsClient.class,
        EvaluationsClient.class,
        DatasetsClient.class,
        IndexesClient.class,
        DeploymentsClient.class,
        RedTeamsClient.class,
        ConnectionsAsyncClient.class,
        EvaluationsAsyncClient.class,
        DatasetsAsyncClient.class,
        IndexesAsyncClient.class,
        DeploymentsAsyncClient.class,
        RedTeamsAsyncClient.class })
public final class AIProjectClientBuilder
    implements HttpTrait<AIProjectClientBuilder>, ConfigurationTrait<AIProjectClientBuilder>,
    TokenCredentialTrait<AIProjectClientBuilder>, EndpointTrait<AIProjectClientBuilder> {

    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final String[] DEFAULT_SCOPES = new String[] { "https://ai.azure.com/.default" };

    @Generated
    private static final Map<String, String> PROPERTIES = CoreUtils.getProperties("azure-ai-projects.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the AIProjectClientBuilder.
     */
    @Generated
    public AIProjectClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The TokenCredential used for authentication.
     */
    @Generated
    private TokenCredential tokenCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder credential(TokenCredential tokenCredential) {
        this.tokenCredential = tokenCredential;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AIProjectClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Service version
     */
    @Generated
    private ProjectsServiceVersion serviceVersion;

    /**
     * Sets Service version.
     *
     * @param serviceVersion the serviceVersion value.
     * @return the AIProjectClientBuilder.
     */
    @Generated
    public AIProjectClientBuilder serviceVersion(ProjectsServiceVersion serviceVersion) {
        this.serviceVersion = serviceVersion;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the AIProjectClientBuilder.
     */
    @Generated
    public AIProjectClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of AIProjectClientImpl with the provided parameters.
     *
     * @return an instance of AIProjectClientImpl.
     */
    @Generated
    private AIProjectClientImpl buildInnerClient() {
        this.validateClient();
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        ProjectsServiceVersion localServiceVersion
            = (serviceVersion != null) ? serviceVersion : ProjectsServiceVersion.getLatest();
        AIProjectClientImpl client = new AIProjectClientImpl(localPipeline,
            JacksonAdapter.createDefaultSerializerAdapter(), this.endpoint, localServiceVersion);
        return client;
    }

    @Generated
    private void validateClient() {
        // This method is invoked from 'buildInnerClient'/'buildClient' method.
        // Developer can customize this method, to validate that the necessary conditions are met for the new client.
        Objects.requireNonNull(endpoint, "'endpoint' cannot be null.");
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = CoreUtils.createHttpHeadersFromClientOptions(localClientOptions);
        if (headers != null) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        if (tokenCredential != null) {
            policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPES));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient)
            .clientOptions(localClientOptions)
            .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of ConnectionsAsyncClient class.
     *
     * @return an instance of ConnectionsAsyncClient.
     */
    @Generated
    public ConnectionsAsyncClient buildConnectionsAsyncClient() {
        return new ConnectionsAsyncClient(buildInnerClient().getConnections());
    }

    /**
     * Builds an instance of EvaluationsAsyncClient class.
     *
     * @return an instance of EvaluationsAsyncClient.
     */
    @Generated
    public EvaluationsAsyncClient buildEvaluationsAsyncClient() {
        return new EvaluationsAsyncClient(buildInnerClient().getEvaluations());
    }

    /**
     * Builds an instance of DatasetsAsyncClient class.
     *
     * @return an instance of DatasetsAsyncClient.
     */
    @Generated
    public DatasetsAsyncClient buildDatasetsAsyncClient() {
        return new DatasetsAsyncClient(buildInnerClient().getDatasets());
    }

    /**
     * Builds an instance of IndexesAsyncClient class.
     *
     * @return an instance of IndexesAsyncClient.
     */
    @Generated
    public IndexesAsyncClient buildIndexesAsyncClient() {
        return new IndexesAsyncClient(buildInnerClient().getIndexes());
    }

    /**
     * Builds an instance of DeploymentsAsyncClient class.
     *
     * @return an instance of DeploymentsAsyncClient.
     */
    @Generated
    public DeploymentsAsyncClient buildDeploymentsAsyncClient() {
        return new DeploymentsAsyncClient(buildInnerClient().getDeployments());
    }

    /**
     * Builds an instance of RedTeamsAsyncClient class.
     *
     * @return an instance of RedTeamsAsyncClient.
     */
    @Generated
    public RedTeamsAsyncClient buildRedTeamsAsyncClient() {
        return new RedTeamsAsyncClient(buildInnerClient().getRedTeams());
    }

    /**
     * Builds an instance of ConnectionsClient class.
     *
     * @return an instance of ConnectionsClient.
     */
    @Generated
    public ConnectionsClient buildConnectionsClient() {
        return new ConnectionsClient(buildInnerClient().getConnections());
    }

    /**
     * Builds an instance of EvaluationsClient class.
     *
     * @return an instance of EvaluationsClient.
     */
    @Generated
    public EvaluationsClient buildEvaluationsClient() {
        return new EvaluationsClient(buildInnerClient().getEvaluations());
    }

    /**
     * Builds an instance of DatasetsClient class.
     *
     * @return an instance of DatasetsClient.
     */
    @Generated
    public DatasetsClient buildDatasetsClient() {
        return new DatasetsClient(buildInnerClient().getDatasets());
    }

    /**
     * Builds an instance of IndexesClient class.
     *
     * @return an instance of IndexesClient.
     */
    @Generated
    public IndexesClient buildIndexesClient() {
        return new IndexesClient(buildInnerClient().getIndexes());
    }

    /**
     * Builds an instance of DeploymentsClient class.
     *
     * @return an instance of DeploymentsClient.
     */
    @Generated
    public DeploymentsClient buildDeploymentsClient() {
        return new DeploymentsClient(buildInnerClient().getDeployments());
    }

    /**
     * Builds an instance of RedTeamsClient class.
     *
     * @return an instance of RedTeamsClient.
     */
    @Generated
    public RedTeamsClient buildRedTeamsClient() {
        return new RedTeamsClient(buildInnerClient().getRedTeams());
    }

    private PersistentAgentsAdministrationClientBuilder createPersistentAgentsAdministrationClientBuilder() {
        return new PersistentAgentsAdministrationClientBuilder().endpoint(this.endpoint)
            .credential(this.tokenCredential)
            .httpClient(this.httpClient)
            .pipeline(this.pipeline)
            .httpLogOptions(this.httpLogOptions)
            .clientOptions(this.clientOptions)
            .retryOptions(this.retryOptions)
            .configuration(this.configuration)
            .serviceVersion(AgentsServiceVersion.valueOf(this.serviceVersion.name()));
    }

    /**
     * Builds an instance of PersistentAgentsAdministrationClient.
     *
     * @return an instance of PersistentAgentsAdministrationClient.
     */
    public PersistentAgentsAdministrationClient buildAgentsClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildClient();
    }

    /**
     * Builds an instance of PersistentAgentsAdministrationAsyncClient.
     *
     * @return an instance of PersistentAgentsAdministrationAsyncClient.
     */
    public PersistentAgentsAdministrationAsyncClient buildAgentsAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildAsyncClient();
    }

    /**
     * Builds an instance of MessagesClient to interact with message resources.
     *
     * @return an instance of MessagesClient.
     */
    public MessagesClient buildMessagesClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildMessagesClient();
    }

    /**
     * Builds an instance of MessagesAsyncClient to interact with message resources.
     *
     * @return an instance of MessagesAsyncClient.
     */
    public MessagesAsyncClient buildMessagesAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildMessagesAsyncClient();
    }

    /**
     * Builds an instance of ThreadsClient to interact with thread resources.
     *
     * @return an instance of ThreadsClient.
     */
    public ThreadsClient buildThreadsClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildThreadsClient();
    }

    /**
     * Builds an instance of ThreadsAsyncClient to interact with thread resources.
     *
     * @return an instance of ThreadsAsyncClient.
     */
    public ThreadsAsyncClient buildThreadsAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildThreadsAsyncClient();
    }

    /**
     * Builds an instance of FilesClient to interact with file resources.
     *
     * @return an instance of FilesClient.
     */
    public FilesClient buildFilesClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildFilesClient();
    }

    /**
     * Builds an instance of FilesAsyncClient to interact with file resources.
     *
     * @return an instance of FilesAsyncClient.
     */
    public FilesAsyncClient buildFilesAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildFilesAsyncClient();
    }

    /**
     * Builds an instance of RunsClient to interact with run resources.
     *
     * @return an instance of RunsClient.
     */
    public RunsClient buildRunsClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildRunsClient();
    }

    /**
     * Builds an instance of RunsAsyncClient to interact with run resources.
     *
     * @return an instance of RunsAsyncClient.
     */
    public RunsAsyncClient buildRunsAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildRunsAsyncClient();
    }

    /**
     * Builds an instance of RunStepsClient to interact with run step resources.
     *
     * @return an instance of RunStepsClient.
     */
    public RunStepsClient buildRunsStepsClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildRunStepsClient();
    }

    /**
     * Builds an instance of RunStepsAsyncClient to interact with run step resources.
     *
     * @return an instance of RunStepsAsyncClient.
     */
    public RunStepsAsyncClient buildRunsStepsAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildRunStepsAsyncClient();
    }

    /**
     * Builds an instance of VectorStoresClient to interact with vector store resources.
     *
     * @return an instance of VectorStoresClient.
     */
    public VectorStoresClient buildVectorStoresClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildVectorStoresClient();
    }

    /**
     * Builds an instance of VectorStoresAsyncClient to interact with vector store resources.
     *
     * @return an instance of VectorStoresAsyncClient.
     */
    public VectorStoresAsyncClient buildVectorStoresAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildVectorStoresAsyncClient();
    }

    /**
     * Builds an instance of VectorStoreFilesClient to interact with vector store file resources.
     *
     * @return an instance of VectorStoreFilesClient.
     */
    public VectorStoreFilesClient buildVectorStoreFilesClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildVectorStoreFilesClient();
    }

    /**
     * Builds an instance of VectorStoreFilesAsyncClient to interact with vector store file resources.
     *
     * @return an instance of VectorStoreFilesAsyncClient.
     */
    public VectorStoreFilesAsyncClient buildVectorStoreFilesAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildVectorStoreFilesAsyncClient();
    }

    /**
     * Builds an instance of VectorStoreFileBatchesClient to interact with vector store file batch resources.
     *
     * @return an instance of VectorStoreFileBatchesClient.
     */
    public VectorStoreFileBatchesClient buildVectorStoreFileBatchesClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildVectorStoreFileBatchesClient();
    }

    /**
     * Builds an instance of VectorStoreFileBatchesAsyncClient to interact with vector store file batch resources.
     *
     * @return an instance of VectorStoreFileBatchesAsyncClient.
     */
    public VectorStoreFileBatchesAsyncClient buildVectorStoreFileBatchesAsyncClient() {
        return createPersistentAgentsAdministrationClientBuilder().buildVectorStoreFileBatchesAsyncClient();
    }

    private static final ClientLogger LOGGER = new ClientLogger(AIProjectClientBuilder.class);
}
