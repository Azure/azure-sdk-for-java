// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Data Source for Application Insights.
 */
@Fluent
public final class ApplicationInsightsConfiguration extends InputData {

    /*
     * Type of the data.
     */
    @Generated
    private String type = "app_insights";

    /*
     * LogAnalytic Workspace resourceID associated with ApplicationInsights
     */
    @Generated
    private String resourceId;

    /*
     * Query to fetch the data.
     */
    @Generated
    private String query;

    /*
     * Service name.
     */
    @Generated
    private String serviceName;

    /*
     * Connection String to connect to ApplicationInsights.
     */
    @Generated
    private String connectionString;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of ApplicationInsightsConfiguration class.
     */
    @Generated
    public ApplicationInsightsConfiguration() {
    }

    /**
     * Get the type property: Type of the data.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the resourceId property: LogAnalytic Workspace resourceID associated with ApplicationInsights.
     *
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: LogAnalytic Workspace resourceID associated with ApplicationInsights.
     * <p>Required when create the resource.</p>
     *
     * @param resourceId the resourceId value to set.
     * @return the ApplicationInsightsConfiguration object itself.
     */
    @Generated
    public ApplicationInsightsConfiguration setResourceId(String resourceId) {
        this.resourceId = resourceId;
        this.updatedProperties.add("resourceId");
        return this;
    }

    /**
     * Get the query property: Query to fetch the data.
     *
     * @return the query value.
     */
    @Generated
    public String getQuery() {
        return this.query;
    }

    /**
     * Set the query property: Query to fetch the data.
     * <p>Required when create the resource.</p>
     *
     * @param query the query value to set.
     * @return the ApplicationInsightsConfiguration object itself.
     */
    @Generated
    public ApplicationInsightsConfiguration setQuery(String query) {
        this.query = query;
        this.updatedProperties.add("query");
        return this;
    }

    /**
     * Get the serviceName property: Service name.
     *
     * @return the serviceName value.
     */
    @Generated
    public String getServiceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: Service name.
     *
     * @param serviceName the serviceName value to set.
     * @return the ApplicationInsightsConfiguration object itself.
     */
    @Generated
    public ApplicationInsightsConfiguration setServiceName(String serviceName) {
        this.serviceName = serviceName;
        this.updatedProperties.add("serviceName");
        return this;
    }

    /**
     * Get the connectionString property: Connection String to connect to ApplicationInsights.
     *
     * @return the connectionString value.
     */
    @Generated
    public String getConnectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: Connection String to connect to ApplicationInsights.
     *
     * @param connectionString the connectionString value to set.
     * @return the ApplicationInsightsConfiguration object itself.
     */
    @Generated
    public ApplicationInsightsConfiguration setConnectionString(String connectionString) {
        this.connectionString = connectionString;
        this.updatedProperties.add("connectionString");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getInputDataAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("type", this.type);
            jsonWriter.writeStringField("resourceId", this.resourceId);
            jsonWriter.writeStringField("query", this.query);
            jsonWriter.writeStringField("serviceName", this.serviceName);
            jsonWriter.writeStringField("connectionString", this.connectionString);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        if (updatedProperties.contains("resourceId")) {
            if (this.resourceId == null) {
                jsonWriter.writeNullField("resourceId");
            } else {
                jsonWriter.writeStringField("resourceId", this.resourceId);
            }
        }
        if (updatedProperties.contains("query")) {
            if (this.query == null) {
                jsonWriter.writeNullField("query");
            } else {
                jsonWriter.writeStringField("query", this.query);
            }
        }
        if (updatedProperties.contains("serviceName")) {
            if (this.serviceName == null) {
                jsonWriter.writeNullField("serviceName");
            } else {
                jsonWriter.writeStringField("serviceName", this.serviceName);
            }
        }
        if (updatedProperties.contains("connectionString")) {
            if (this.connectionString == null) {
                jsonWriter.writeNullField("connectionString");
            } else {
                jsonWriter.writeStringField("connectionString", this.connectionString);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationInsightsConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationInsightsConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationInsightsConfiguration.
     */
    @Generated
    public static ApplicationInsightsConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationInsightsConfiguration deserializedApplicationInsightsConfiguration
                = new ApplicationInsightsConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedApplicationInsightsConfiguration.type = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedApplicationInsightsConfiguration.resourceId = reader.getString();
                } else if ("query".equals(fieldName)) {
                    deserializedApplicationInsightsConfiguration.query = reader.getString();
                } else if ("serviceName".equals(fieldName)) {
                    deserializedApplicationInsightsConfiguration.serviceName = reader.getString();
                } else if ("connectionString".equals(fieldName)) {
                    deserializedApplicationInsightsConfiguration.connectionString = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedApplicationInsightsConfiguration;
        });
    }
}
