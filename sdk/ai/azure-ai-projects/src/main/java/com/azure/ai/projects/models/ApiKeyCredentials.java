// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API Key Credential definition.
 */
@Immutable
public final class ApiKeyCredentials extends BaseCredentials {

    /*
     * The type of credential used by the connection
     */
    @Generated
    private CredentialType type = CredentialType.API_KEY;

    /*
     * API Key
     */
    @Generated
    private String apiKey;

    /**
     * Creates an instance of ApiKeyCredentials class.
     */
    @Generated
    private ApiKeyCredentials() {
    }

    /**
     * Get the type property: The type of credential used by the connection.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public CredentialType getType() {
        return this.type;
    }

    /**
     * Get the apiKey property: API Key.
     *
     * @return the apiKey value.
     */
    @Generated
    public String getApiKey() {
        return this.apiKey;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiKeyCredentials from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiKeyCredentials if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiKeyCredentials.
     */
    @Generated
    public static ApiKeyCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiKeyCredentials deserializedApiKeyCredentials = new ApiKeyCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedApiKeyCredentials.type = CredentialType.fromString(reader.getString());
                } else if ("key".equals(fieldName)) {
                    deserializedApiKeyCredentials.apiKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedApiKeyCredentials;
        });
    }
}
