// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Evaluation Definition.
 */
@Fluent
public final class Evaluation implements JsonSerializable<Evaluation> {

    /*
     * Identifier of the evaluation.
     */
    @Generated
    private String id;

    /*
     * Data for evaluation.
     */
    @Generated
    private InputData data;

    /*
     * Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique.
     */
    @Generated
    private String displayName;

    /*
     * Description of the evaluation. It can be used to store additional information about the evaluation and is
     * mutable.
     */
    @Generated
    private String description;

    /*
     * Metadata containing createdBy and modifiedBy information.
     */
    @Generated
    private SystemData systemData;

    /*
     * Status of the evaluation. It is set by service and is read-only.
     */
    @Generated
    private String status;

    /*
     * Evaluation's tags. Unlike properties, tags are fully mutable.
     */
    @Generated
    private Map<String, String> tags;

    /*
     * Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.
     */
    @Generated
    private Map<String, String> properties;

    /*
     * Evaluators to be used for the evaluation.
     */
    @Generated
    private Map<String, EvaluatorConfiguration> evaluators;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setEvaluationAccessor(new JsonMergePatchHelper.EvaluationAccessor() {

            @Override
            public Evaluation prepareModelForJsonMergePatch(Evaluation model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Evaluation model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of Evaluation class.
     */
    @Generated
    public Evaluation() {
    }

    /**
     * Get the id property: Identifier of the evaluation.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the data property: Data for evaluation.
     *
     * @return the data value.
     */
    @Generated
    public InputData getData() {
        return this.data;
    }

    /**
     * Set the data property: Data for evaluation.
     * <p>Required when create the resource.</p>
     *
     * @param data the data value to set.
     * @return the Evaluation object itself.
     */
    @Generated
    public Evaluation setData(InputData data) {
        this.data = data;
        this.updatedProperties.add("data");
        return this;
    }

    /**
     * Get the displayName property: Display Name for evaluation. It helps to find the evaluation easily in AI Foundry.
     * It does not need to be unique.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display Name for evaluation. It helps to find the evaluation easily in AI Foundry.
     * It does not need to be unique.
     *
     * @param displayName the displayName value to set.
     * @return the Evaluation object itself.
     */
    @Generated
    public Evaluation setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the description property: Description of the evaluation. It can be used to store additional information about
     * the evaluation and is mutable.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Description of the evaluation. It can be used to store additional information about
     * the evaluation and is mutable.
     *
     * @param description the description value to set.
     * @return the Evaluation object itself.
     */
    @Generated
    public Evaluation setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the systemData property: Metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    @Generated
    public SystemData getSystemData() {
        return this.systemData;
    }

    /**
     * Get the status property: Status of the evaluation. It is set by service and is read-only.
     *
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the tags property: Evaluation's tags. Unlike properties, tags are fully mutable.
     *
     * @return the tags value.
     */
    @Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Evaluation's tags. Unlike properties, tags are fully mutable.
     *
     * @param tags the tags value to set.
     * @return the Evaluation object itself.
     */
    @Generated
    public Evaluation setTags(Map<String, String> tags) {
        this.tags = tags;
        this.updatedProperties.add("tags");
        return this;
    }

    /**
     * Get the properties property: Evaluation's properties. Unlike tags, properties are add-only. Once added, a
     * property cannot be removed.
     *
     * @return the properties value.
     */
    @Generated
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Evaluation's properties. Unlike tags, properties are add-only. Once added, a
     * property cannot be removed.
     *
     * @param properties the properties value to set.
     * @return the Evaluation object itself.
     */
    @Generated
    public Evaluation setProperties(Map<String, String> properties) {
        this.properties = properties;
        this.updatedProperties.add("properties");
        return this;
    }

    /**
     * Get the evaluators property: Evaluators to be used for the evaluation.
     *
     * @return the evaluators value.
     */
    @Generated
    public Map<String, EvaluatorConfiguration> getEvaluators() {
        return this.evaluators;
    }

    /**
     * Set the evaluators property: Evaluators to be used for the evaluation.
     * <p>Required when create the resource.</p>
     *
     * @param evaluators the evaluators value to set.
     * @return the Evaluation object itself.
     */
    @Generated
    public Evaluation setEvaluators(Map<String, EvaluatorConfiguration> evaluators) {
        this.evaluators = evaluators;
        this.updatedProperties.add("evaluators");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeJsonField("data", this.data);
            jsonWriter.writeJsonField("target", this.target);
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
            jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
            jsonWriter.writeMapField("evaluators", this.evaluators, (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("data")) {
            if (this.data == null) {
                jsonWriter.writeNullField("data");
            } else {
                JsonMergePatchHelper.getInputDataAccessor().prepareModelForJsonMergePatch(this.data, true);
                jsonWriter.writeJsonField("data", this.data);
                JsonMergePatchHelper.getInputDataAccessor().prepareModelForJsonMergePatch(this.data, false);
            }
        }
        if (updatedProperties.contains("target")) {
            if (this.target == null) {
                jsonWriter.writeNullField("target");
            } else {
                JsonMergePatchHelper.getEvaluationTargetAccessor().prepareModelForJsonMergePatch(this.target, true);
                jsonWriter.writeJsonField("target", this.target);
                JsonMergePatchHelper.getEvaluationTargetAccessor().prepareModelForJsonMergePatch(this.target, false);
            }
        }
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("tags")) {
            if (this.tags == null) {
                jsonWriter.writeNullField("tags");
            } else {
                jsonWriter.writeMapField("tags", this.tags, (writer, element) -> {
                    if (element != null) {
                        writer.writeString(element);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("properties")) {
            if (this.properties == null) {
                jsonWriter.writeNullField("properties");
            } else {
                jsonWriter.writeMapField("properties", this.properties, (writer, element) -> {
                    if (element != null) {
                        writer.writeString(element);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("evaluators")) {
            if (this.evaluators == null) {
                jsonWriter.writeNullField("evaluators");
            } else {
                jsonWriter.writeMapField("evaluators", this.evaluators, (writer, element) -> {
                    if (element != null) {
                        JsonMergePatchHelper.getEvaluatorConfigurationAccessor()
                            .prepareModelForJsonMergePatch(element, true);
                        writer.writeJson(element);
                        JsonMergePatchHelper.getEvaluatorConfigurationAccessor()
                            .prepareModelForJsonMergePatch(element, false);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Evaluation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Evaluation if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Evaluation.
     */
    @Generated
    public static Evaluation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Evaluation deserializedEvaluation = new Evaluation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedEvaluation.id = reader.getString();
                } else if ("data".equals(fieldName)) {
                    deserializedEvaluation.data = InputData.fromJson(reader);
                } else if ("target".equals(fieldName)) {
                    deserializedEvaluation.target = EvaluationTarget.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    deserializedEvaluation.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedEvaluation.description = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedEvaluation.systemData = SystemData.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedEvaluation.status = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedEvaluation.tags = tags;
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedEvaluation.properties = properties;
                } else if ("evaluators".equals(fieldName)) {
                    Map<String, EvaluatorConfiguration> evaluators
                        = reader.readMap(reader1 -> EvaluatorConfiguration.fromJson(reader1));
                    deserializedEvaluation.evaluators = evaluators;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedEvaluation;
        });
    }

    /*
     * Evaluation target specifying the model config and parameters
     */
    @Generated
    private EvaluationTarget target;

    /**
     * Get the target property: Evaluation target specifying the model config and parameters.
     *
     * @return the target value.
     */
    @Generated
    public EvaluationTarget getTarget() {
        return this.target;
    }

    /**
     * Set the target property: Evaluation target specifying the model config and parameters.
     *
     * @param target the target value to set.
     * @return the Evaluation object itself.
     */
    @Generated
    public Evaluation setTarget(EvaluationTarget target) {
        this.target = target;
        this.updatedProperties.add("target");
        return this;
    }
}
