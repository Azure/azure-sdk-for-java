// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects;

import com.azure.ai.projects.models.ConnectionType;
import com.azure.ai.projects.models.CredentialType;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.AzureException;
import com.azure.core.util.logging.ClientLogger;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous AIProjectClient type.
 */
@ServiceClient(builder = AIProjectClientBuilder.class, isAsync = true)
public final class TelemetryAsyncClient {

    private final ConnectionsAsyncClient connectionsAsyncClient;
    private final ClientLogger logger = new ClientLogger(TelemetryAsyncClient.class);

    /**
     * Initializes an instance of TelemetryAsyncClient class.
     *
     * @param connectionsAsyncClient the connections async client implementation.
     */
    TelemetryAsyncClient(ConnectionsAsyncClient connectionsAsyncClient) {
        this.connectionsAsyncClient = connectionsAsyncClient;
    }

    /**
     * Get the Application Insights connection string associated with the Project's Application Insights resource.
     *
     * @return The Application Insights connection string if a the resource was enabled for the Project.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> getConnectionString() {
        return connectionsAsyncClient.listConnections(ConnectionType.APPLICATION_INSIGHTS, true)
            .collectList()
            .flatMap(connections -> {
                if (connections.isEmpty()) {
                    return Mono.error(
                        logger.logExceptionAsError(new AzureException("No Application Insights connection found.")));
                }

                String connectionName = connections.get(0).getName();
                return connectionsAsyncClient.getConnectionWithCredentials(connectionName).flatMap(connection -> {
                    if (connection.getCredentials().getType() != CredentialType.API_KEY) {
                        return Mono.error(logger.logExceptionAsError(
                            new AzureException("Application Insights connection does not use API Key credentials.")));
                    }

                    if (connection.getId() == null || connection.getId().isEmpty()) {
                        return Mono.error(logger.logExceptionAsError(
                            new AzureException("Application Insights connection does not have a connection string.")));
                    }

                    return Mono.just(connection.getId());
                });
            });
    }
}
