// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Recurrence Trigger Definition.
 */
@Fluent
public final class RecurrenceTrigger extends Trigger {

    /*
     * Type of the trigger.
     */
    @Generated
    private String type = "Recurrence";

    /*
     * The frequency to trigger schedule.
     */
    @Generated
    private final Frequency frequency;

    /*
     * Specifies schedule interval in conjunction with frequency
     */
    @Generated
    private final int interval;

    /*
     * The recurrence schedule.
     */
    @Generated
    private RecurrenceSchedule schedule;

    /**
     * Creates an instance of RecurrenceTrigger class.
     *
     * @param frequency the frequency value to set.
     * @param interval the interval value to set.
     */
    @Generated
    public RecurrenceTrigger(Frequency frequency, int interval) {
        this.frequency = frequency;
        this.interval = interval;
    }

    /**
     * Get the type property: Type of the trigger.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the frequency property: The frequency to trigger schedule.
     *
     * @return the frequency value.
     */
    @Generated
    public Frequency getFrequency() {
        return this.frequency;
    }

    /**
     * Get the interval property: Specifies schedule interval in conjunction with frequency.
     *
     * @return the interval value.
     */
    @Generated
    public int getInterval() {
        return this.interval;
    }

    /**
     * Get the schedule property: The recurrence schedule.
     *
     * @return the schedule value.
     */
    @Generated
    public RecurrenceSchedule getSchedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: The recurrence schedule.
     *
     * @param schedule the schedule value to set.
     * @return the RecurrenceTrigger object itself.
     */
    @Generated
    public RecurrenceTrigger setSchedule(RecurrenceSchedule schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
        jsonWriter.writeIntField("interval", this.interval);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("schedule", this.schedule);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecurrenceTrigger from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecurrenceTrigger if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecurrenceTrigger.
     */
    @Generated
    public static RecurrenceTrigger fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Frequency frequency = null;
            int interval = 0;
            String type = "Recurrence";
            RecurrenceSchedule schedule = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("frequency".equals(fieldName)) {
                    frequency = Frequency.fromString(reader.getString());
                } else if ("interval".equals(fieldName)) {
                    interval = reader.getInt();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("schedule".equals(fieldName)) {
                    schedule = RecurrenceSchedule.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            RecurrenceTrigger deserializedRecurrenceTrigger = new RecurrenceTrigger(frequency, interval);
            deserializedRecurrenceTrigger.type = type;
            deserializedRecurrenceTrigger.schedule = schedule;
            return deserializedRecurrenceTrigger;
        });
    }
}
