// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.projects.implementation;

import com.azure.ai.projects.ProjectsServiceVersion;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Telemetries.
 */
public final class TelemetriesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TelemetriesService service;

    /**
     * The service client containing this operation class.
     */
    private final AIProjectClientImpl client;

    /**
     * Initializes an instance of TelemetriesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TelemetriesImpl(AIProjectClientImpl client) {
        this.service
            = RestProxy.create(TelemetriesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ProjectsServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AIProjectClientTelemetries to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/agents/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{projectName}")
    @ServiceInterface(name = "AIProjectClientTelem")
    public interface TelemetriesService {
        @Get("/{appInsightsResourceUrl}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAppInsights(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("appInsightsResourceUrl") String appInsightsResourceUrl, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{appInsightsResourceUrl}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAppInsightsSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("appInsightsResourceUrl") String appInsightsResourceUrl, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Gets the properties of the specified Application Insights resource.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         ConnectionString: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param appInsightsResourceUrl The AppInsights Azure resource Url. It should have the format:
     * '/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/microsoft.insights/components/{resourcename}'.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of the specified Application Insights resource along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppInsightsWithResponseAsync(String appInsightsResourceUrl,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAppInsights(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), appInsightsResourceUrl, accept, requestOptions, context));
    }

    /**
     * Gets the properties of the specified Application Insights resource.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         ConnectionString: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param appInsightsResourceUrl The AppInsights Azure resource Url. It should have the format:
     * '/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/microsoft.insights/components/{resourcename}'.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of the specified Application Insights resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAppInsightsWithResponse(String appInsightsResourceUrl,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAppInsightsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), appInsightsResourceUrl, accept, requestOptions, Context.NONE);
    }
}
