// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects;

import com.azure.ai.projects.implementation.RedTeamsImpl;
import com.azure.ai.projects.models.RedTeam;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous AIProjectClient type.
 */
@ServiceClient(builder = AIProjectClientBuilder.class)
public final class RedTeamsClient {

    @Generated
    private final RedTeamsImpl serviceClient;

    /**
     * Initializes an instance of RedTeamsClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    RedTeamsClient(RedTeamsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get a redteam by name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     numTurns: Integer (Optional)
     *     attackStrategies (Optional): [
     *         String(easy/moderate/difficult/ascii_art/ascii_smuggler/atbash/base64/binary/caesar/character_space/jailbreak/ansii_attack/character_swap/suffix_append/string_join/unicode_confusable/unicode_substitution/diacritic/flip/leetspeak/rot13/morse/url/baseline) (Optional)
     *     ]
     *     simulationOnly: Boolean (Optional)
     *     riskCategories (Optional): [
     *         String(HateUnfairness/Violence/Sexual/SelfHarm) (Optional)
     *     ]
     *     applicationScenario: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     status: String (Optional)
     *     target (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name Identifier of the red team run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a redteam by name along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRedTeamWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getRedTeamWithResponse(name, requestOptions);
    }

    /**
     * List a redteam by name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     numTurns: Integer (Optional)
     *     attackStrategies (Optional): [
     *         String(easy/moderate/difficult/ascii_art/ascii_smuggler/atbash/base64/binary/caesar/character_space/jailbreak/ansii_attack/character_swap/suffix_append/string_join/unicode_confusable/unicode_substitution/diacritic/flip/leetspeak/rot13/morse/url/baseline) (Optional)
     *     ]
     *     simulationOnly: Boolean (Optional)
     *     riskCategories (Optional): [
     *         String(HateUnfairness/Violence/Sexual/SelfHarm) (Optional)
     *     ]
     *     applicationScenario: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     status: String (Optional)
     *     target (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RedTeam items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRedTeams(RequestOptions requestOptions) {
        return this.serviceClient.listRedTeams(requestOptions);
    }

    /**
     * Creates a redteam run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     numTurns: Integer (Optional)
     *     attackStrategies (Optional): [
     *         String(easy/moderate/difficult/ascii_art/ascii_smuggler/atbash/base64/binary/caesar/character_space/jailbreak/ansii_attack/character_swap/suffix_append/string_join/unicode_confusable/unicode_substitution/diacritic/flip/leetspeak/rot13/morse/url/baseline) (Optional)
     *     ]
     *     simulationOnly: Boolean (Optional)
     *     riskCategories (Optional): [
     *         String(HateUnfairness/Violence/Sexual/SelfHarm) (Optional)
     *     ]
     *     applicationScenario: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     status: String (Optional)
     *     target (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     numTurns: Integer (Optional)
     *     attackStrategies (Optional): [
     *         String(easy/moderate/difficult/ascii_art/ascii_smuggler/atbash/base64/binary/caesar/character_space/jailbreak/ansii_attack/character_swap/suffix_append/string_join/unicode_confusable/unicode_substitution/diacritic/flip/leetspeak/rot13/morse/url/baseline) (Optional)
     *     ]
     *     simulationOnly: Boolean (Optional)
     *     riskCategories (Optional): [
     *         String(HateUnfairness/Violence/Sexual/SelfHarm) (Optional)
     *     ]
     *     applicationScenario: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     status: String (Optional)
     *     target (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param redTeam Redteam to be run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return red team details along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRedTeamWithResponse(BinaryData redTeam, RequestOptions requestOptions) {
        return this.serviceClient.createRedTeamWithResponse(redTeam, requestOptions);
    }

    /**
     * Get a redteam by name.
     *
     * @param name Identifier of the red team run.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a redteam by name.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RedTeam getRedTeam(String name) {
        // Generated convenience method for getRedTeamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRedTeamWithResponse(name, requestOptions).getValue().toObject(RedTeam.class);
    }

    /**
     * List a redteam by name.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of RedTeam items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RedTeam> listRedTeams() {
        // Generated convenience method for listRedTeams
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listRedTeams(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(RedTeam.class));
    }

    /**
     * Creates a redteam run.
     *
     * @param redTeam Redteam to be run.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return red team details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RedTeam createRedTeam(RedTeam redTeam) {
        // Generated convenience method for createRedTeamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createRedTeamWithResponse(BinaryData.fromObject(redTeam), requestOptions).getValue()
            .toObject(RedTeam.class);
    }
}
