// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * DatasetVersion Definition.
 */
@Fluent
public class DatasetVersion implements JsonSerializable<DatasetVersion> {

    /*
     * Dataset type
     */
    @Generated
    private DatasetType type = DatasetType.fromString("DatasetVersion");

    /*
     * URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
     */
    @Generated
    private String dataUri;

    /*
     * Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the
     * underlying data will not be deleted when the dataset version is deleted
     */
    @Generated
    private Boolean isReference;

    /*
     * Asset ID, a unique identifier for the asset
     */
    @Generated
    private String id;

    /*
     * The name of the resource
     */
    @Generated
    private String name;

    /*
     * The version of the resource
     */
    @Generated
    private String version;

    /*
     * The asset description text.
     */
    @Generated
    private String description;

    /*
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    @Generated
    private Map<String, String> tags;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setDatasetVersionAccessor(new JsonMergePatchHelper.DatasetVersionAccessor() {

            @Override
            public DatasetVersion prepareModelForJsonMergePatch(DatasetVersion model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(DatasetVersion model) {
                return model.jsonMergePatch;
            }

            @Override
            public void setDataUri(DatasetVersion model, String dataUri) {
                model.dataUri = dataUri;
            }

            @Override
            public void setIsReference(DatasetVersion model, Boolean isReference) {
                model.isReference = isReference;
            }

            @Override
            public void setConnectionName(DatasetVersion model, String connectionName) {
                model.connectionName = connectionName;
            }

            @Override
            public void setId(DatasetVersion model, String id) {
                model.id = id;
            }

            @Override
            public void setName(DatasetVersion model, String name) {
                model.name = name;
            }

            @Override
            public void setVersion(DatasetVersion model, String version) {
                model.version = version;
            }

            @Override
            public void setDescription(DatasetVersion model, String description) {
                model.description = description;
            }

            @Override
            public void setTags(DatasetVersion model, Map<String, String> tags) {
                model.tags = tags;
            }
        });
    }

    /**
     * Creates an instance of DatasetVersion class.
     */
    @Generated
    public DatasetVersion() {
    }

    /**
     * Get the type property: Dataset type.
     *
     * @return the type value.
     */
    @Generated
    public DatasetType getType() {
        return this.type;
    }

    /**
     * Get the dataUri property: URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330.
     *
     * @return the dataUri value.
     */
    @Generated
    public String getDataUri() {
        return this.dataUri;
    }

    /**
     * Set the dataUri property: URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330.
     * <p>Required when create the resource.</p>
     *
     * @param dataUri the dataUri value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    public DatasetVersion setDataUri(String dataUri) {
        this.dataUri = dataUri;
        this.updatedProperties.add("dataUri");
        return this;
    }

    /**
     * Get the isReference property: Indicates if the dataset holds a reference to the storage, or the dataset manages
     * storage itself. If true, the underlying data will not be deleted when the dataset version is deleted.
     *
     * @return the isReference value.
     */
    @Generated
    public Boolean isReference() {
        return this.isReference;
    }

    /**
     * Get the id property: Asset ID, a unique identifier for the asset.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the version property: The version of the resource.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the description property: The asset description text.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The asset description text.
     *
     * @param description the description value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    public DatasetVersion setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @return the tags value.
     */
    @Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @param tags the tags value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    public DatasetVersion setTags(Map<String, String> tags) {
        this.tags = tags;
        this.updatedProperties.add("tags");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeStringField("dataUri", this.dataUri);
            jsonWriter.writeStringField("connectionName", this.connectionName);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("dataUri")) {
            if (this.dataUri == null) {
                jsonWriter.writeNullField("dataUri");
            } else {
                jsonWriter.writeStringField("dataUri", this.dataUri);
            }
        }
        if (updatedProperties.contains("connectionName")) {
            if (this.connectionName == null) {
                jsonWriter.writeNullField("connectionName");
            } else {
                jsonWriter.writeStringField("connectionName", this.connectionName);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("tags")) {
            if (this.tags == null) {
                jsonWriter.writeNullField("tags");
            } else {
                jsonWriter.writeMapField("tags", this.tags, (writer, element) -> {
                    if (element != null) {
                        writer.writeString(element);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatasetVersion from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatasetVersion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatasetVersion.
     */
    @Generated
    public static DatasetVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("uri_file".equals(discriminatorValue)) {
                    return FileDatasetVersion.fromJson(readerToUse.reset());
                } else if ("uri_folder".equals(discriminatorValue)) {
                    return FolderDatasetVersion.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static DatasetVersion fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatasetVersion deserializedDatasetVersion = new DatasetVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedDatasetVersion.name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedDatasetVersion.version = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDatasetVersion.type = DatasetType.fromString(reader.getString());
                } else if ("dataUri".equals(fieldName)) {
                    deserializedDatasetVersion.dataUri = reader.getString();
                } else if ("isReference".equals(fieldName)) {
                    deserializedDatasetVersion.isReference = reader.getNullable(JsonReader::getBoolean);
                } else if ("connectionName".equals(fieldName)) {
                    deserializedDatasetVersion.connectionName = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedDatasetVersion.id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDatasetVersion.description = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDatasetVersion.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDatasetVersion;
        });
    }

    /*
     * The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating
     * the Dataset
     */
    @Generated
    private String connectionName;

    /**
     * Get the connectionName property: The Azure Storage Account connection name. Required if startPendingUploadVersion
     * was not called before creating the Dataset.
     *
     * @return the connectionName value.
     */
    @Generated
    public String getConnectionName() {
        return this.connectionName;
    }

    /**
     * Set the connectionName property: The Azure Storage Account connection name. Required if startPendingUploadVersion
     * was not called before creating the Dataset.
     *
     * @param connectionName the connectionName value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    public DatasetVersion setConnectionName(String connectionName) {
        this.connectionName = connectionName;
        this.updatedProperties.add("connectionName");
        return this;
    }
}
