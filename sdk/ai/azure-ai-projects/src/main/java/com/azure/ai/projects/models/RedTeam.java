// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Red team details.
 */
@Fluent
public final class RedTeam implements JsonSerializable<RedTeam> {

    /*
     * Identifier of the red team run.
     */
    @Generated
    private String name;

    /*
     * Name of the red-team run.
     */
    @Generated
    private String displayName;

    /*
     * Number of simulation rounds.
     */
    @Generated
    private Integer numTurns;

    /*
     * List of attack strategies or nested lists of attack strategies.
     */
    @Generated
    private List<AttackStrategy> attackStrategies;

    /*
     * Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation
     * result.
     */
    @Generated
    private Boolean simulationOnly;

    /*
     * List of risk categories to generate attack objectives for.
     */
    @Generated
    private List<RiskCategory> riskCategories;

    /*
     * Application scenario for the red team operation, to generate scenario specific attacks.
     */
    @Generated
    private String applicationScenario;

    /*
     * Red team's tags. Unlike properties, tags are fully mutable.
     */
    @Generated
    private Map<String, String> tags;

    /*
     * Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.
     */
    @Generated
    private Map<String, String> properties;

    /*
     * Status of the red-team. It is set by service and is read-only.
     */
    @Generated
    private String status;

    /*
     * Target configuration for the red-team run.
     */
    @Generated
    private final TargetConfig target;

    /**
     * Creates an instance of RedTeam class.
     *
     * @param target the target value to set.
     */
    @Generated
    public RedTeam(TargetConfig target) {
        this.target = target;
    }

    /**
     * Get the name property: Identifier of the red team run.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the displayName property: Name of the red-team run.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Name of the red-team run.
     *
     * @param displayName the displayName value to set.
     * @return the RedTeam object itself.
     */
    @Generated
    public RedTeam setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the numTurns property: Number of simulation rounds.
     *
     * @return the numTurns value.
     */
    @Generated
    public Integer getNumTurns() {
        return this.numTurns;
    }

    /**
     * Set the numTurns property: Number of simulation rounds.
     *
     * @param numTurns the numTurns value to set.
     * @return the RedTeam object itself.
     */
    @Generated
    public RedTeam setNumTurns(Integer numTurns) {
        this.numTurns = numTurns;
        return this;
    }

    /**
     * Get the attackStrategies property: List of attack strategies or nested lists of attack strategies.
     *
     * @return the attackStrategies value.
     */
    @Generated
    public List<AttackStrategy> getAttackStrategies() {
        return this.attackStrategies;
    }

    /**
     * Set the attackStrategies property: List of attack strategies or nested lists of attack strategies.
     *
     * @param attackStrategies the attackStrategies value to set.
     * @return the RedTeam object itself.
     */
    @Generated
    public RedTeam setAttackStrategies(List<AttackStrategy> attackStrategies) {
        this.attackStrategies = attackStrategies;
        return this;
    }

    /**
     * Get the simulationOnly property: Simulation-only or Simulation + Evaluation. Default false, if true the scan
     * outputs conversation not evaluation result.
     *
     * @return the simulationOnly value.
     */
    @Generated
    public Boolean isSimulationOnly() {
        return this.simulationOnly;
    }

    /**
     * Set the simulationOnly property: Simulation-only or Simulation + Evaluation. Default false, if true the scan
     * outputs conversation not evaluation result.
     *
     * @param simulationOnly the simulationOnly value to set.
     * @return the RedTeam object itself.
     */
    @Generated
    public RedTeam setSimulationOnly(Boolean simulationOnly) {
        this.simulationOnly = simulationOnly;
        return this;
    }

    /**
     * Get the riskCategories property: List of risk categories to generate attack objectives for.
     *
     * @return the riskCategories value.
     */
    @Generated
    public List<RiskCategory> getRiskCategories() {
        return this.riskCategories;
    }

    /**
     * Set the riskCategories property: List of risk categories to generate attack objectives for.
     *
     * @param riskCategories the riskCategories value to set.
     * @return the RedTeam object itself.
     */
    @Generated
    public RedTeam setRiskCategories(List<RiskCategory> riskCategories) {
        this.riskCategories = riskCategories;
        return this;
    }

    /**
     * Get the applicationScenario property: Application scenario for the red team operation, to generate scenario
     * specific attacks.
     *
     * @return the applicationScenario value.
     */
    @Generated
    public String getApplicationScenario() {
        return this.applicationScenario;
    }

    /**
     * Set the applicationScenario property: Application scenario for the red team operation, to generate scenario
     * specific attacks.
     *
     * @param applicationScenario the applicationScenario value to set.
     * @return the RedTeam object itself.
     */
    @Generated
    public RedTeam setApplicationScenario(String applicationScenario) {
        this.applicationScenario = applicationScenario;
        return this;
    }

    /**
     * Get the tags property: Red team's tags. Unlike properties, tags are fully mutable.
     *
     * @return the tags value.
     */
    @Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Red team's tags. Unlike properties, tags are fully mutable.
     *
     * @param tags the tags value to set.
     * @return the RedTeam object itself.
     */
    @Generated
    public RedTeam setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the properties property: Red team's properties. Unlike tags, properties are add-only. Once added, a property
     * cannot be removed.
     *
     * @return the properties value.
     */
    @Generated
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Red team's properties. Unlike tags, properties are add-only. Once added, a property
     * cannot be removed.
     *
     * @param properties the properties value to set.
     * @return the RedTeam object itself.
     */
    @Generated
    public RedTeam setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the status property: Status of the red-team. It is set by service and is read-only.
     *
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the target property: Target configuration for the red-team run.
     *
     * @return the target value.
     */
    @Generated
    public TargetConfig getTarget() {
        return this.target;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeNumberField("numTurns", this.numTurns);
        jsonWriter.writeArrayField("attackStrategies", this.attackStrategies,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeBooleanField("simulationOnly", this.simulationOnly);
        jsonWriter.writeArrayField("riskCategories", this.riskCategories,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("applicationScenario", this.applicationScenario);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedTeam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedTeam if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RedTeam.
     */
    @Generated
    public static RedTeam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            TargetConfig target = null;
            String displayName = null;
            Integer numTurns = null;
            List<AttackStrategy> attackStrategies = null;
            Boolean simulationOnly = null;
            List<RiskCategory> riskCategories = null;
            String applicationScenario = null;
            Map<String, String> tags = null;
            Map<String, String> properties = null;
            String status = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    name = reader.getString();
                } else if ("target".equals(fieldName)) {
                    target = TargetConfig.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("numTurns".equals(fieldName)) {
                    numTurns = reader.getNullable(JsonReader::getInt);
                } else if ("attackStrategies".equals(fieldName)) {
                    attackStrategies = reader.readArray(reader1 -> AttackStrategy.fromString(reader1.getString()));
                } else if ("simulationOnly".equals(fieldName)) {
                    simulationOnly = reader.getNullable(JsonReader::getBoolean);
                } else if ("riskCategories".equals(fieldName)) {
                    riskCategories = reader.readArray(reader1 -> RiskCategory.fromString(reader1.getString()));
                } else if ("applicationScenario".equals(fieldName)) {
                    applicationScenario = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> reader1.getString());
                } else if ("status".equals(fieldName)) {
                    status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RedTeam deserializedRedTeam = new RedTeam(target);
            deserializedRedTeam.name = name;
            deserializedRedTeam.displayName = displayName;
            deserializedRedTeam.numTurns = numTurns;
            deserializedRedTeam.attackStrategies = attackStrategies;
            deserializedRedTeam.simulationOnly = simulationOnly;
            deserializedRedTeam.riskCategories = riskCategories;
            deserializedRedTeam.applicationScenario = applicationScenario;
            deserializedRedTeam.tags = tags;
            deserializedRedTeam.properties = properties;
            deserializedRedTeam.status = status;
            return deserializedRedTeam;
        });
    }
}
