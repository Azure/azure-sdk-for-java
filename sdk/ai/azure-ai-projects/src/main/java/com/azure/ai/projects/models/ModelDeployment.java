// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Model Deployment Definition.
 */
@Immutable
public final class ModelDeployment extends Deployment {

    /*
     * The type of the deployment
     */
    @Generated
    private DeploymentType type = DeploymentType.MODEL_DEPLOYMENT;

    /*
     * Publisher-specific name of the deployed model
     */
    @Generated
    private String modelName;

    /*
     * Publisher-specific version of the deployed model
     */
    @Generated
    private String modelVersion;

    /*
     * Name of the deployed model's publisher
     */
    @Generated
    private String modelPublisher;

    /*
     * Capabilities of deployed model
     */
    @Generated
    private Map<String, String> capabilities;

    /*
     * Sku of the model deployment
     */
    @Generated
    private Sku sku;

    /*
     * Name of the connection the deployment comes from
     */
    @Generated
    private String connectionName;

    /**
     * Creates an instance of ModelDeployment class.
     */
    @Generated
    private ModelDeployment() {
    }

    /**
     * Get the type property: The type of the deployment.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public DeploymentType getType() {
        return this.type;
    }

    /**
     * Get the modelName property: Publisher-specific name of the deployed model.
     *
     * @return the modelName value.
     */
    @Generated
    public String getModelName() {
        return this.modelName;
    }

    /**
     * Get the modelVersion property: Publisher-specific version of the deployed model.
     *
     * @return the modelVersion value.
     */
    @Generated
    public String getModelVersion() {
        return this.modelVersion;
    }

    /**
     * Get the modelPublisher property: Name of the deployed model's publisher.
     *
     * @return the modelPublisher value.
     */
    @Generated
    public String getModelPublisher() {
        return this.modelPublisher;
    }

    /**
     * Get the capabilities property: Capabilities of deployed model.
     *
     * @return the capabilities value.
     */
    @Generated
    public Map<String, String> getCapabilities() {
        return this.capabilities;
    }

    /**
     * Get the sku property: Sku of the model deployment.
     *
     * @return the sku value.
     */
    @Generated
    public Sku getSku() {
        return this.sku;
    }

    /**
     * Get the connectionName property: Name of the connection the deployment comes from.
     *
     * @return the connectionName value.
     */
    @Generated
    public String getConnectionName() {
        return this.connectionName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModelDeployment from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModelDeployment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ModelDeployment.
     */
    @Generated
    public static ModelDeployment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ModelDeployment deserializedModelDeployment = new ModelDeployment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedModelDeployment.setName(reader.getString());
                } else if ("modelName".equals(fieldName)) {
                    deserializedModelDeployment.modelName = reader.getString();
                } else if ("modelVersion".equals(fieldName)) {
                    deserializedModelDeployment.modelVersion = reader.getString();
                } else if ("modelPublisher".equals(fieldName)) {
                    deserializedModelDeployment.modelPublisher = reader.getString();
                } else if ("capabilities".equals(fieldName)) {
                    Map<String, String> capabilities = reader.readMap(reader1 -> reader1.getString());
                    deserializedModelDeployment.capabilities = capabilities;
                } else if ("sku".equals(fieldName)) {
                    deserializedModelDeployment.sku = Sku.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedModelDeployment.type = DeploymentType.fromString(reader.getString());
                } else if ("connectionName".equals(fieldName)) {
                    deserializedModelDeployment.connectionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedModelDeployment;
        });
    }
}
