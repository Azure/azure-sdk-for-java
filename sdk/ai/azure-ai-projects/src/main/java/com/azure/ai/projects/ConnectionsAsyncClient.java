// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects;

import com.azure.ai.projects.implementation.ConnectionsImpl;
import com.azure.ai.projects.implementation.models.GetConnectionResponse;
import com.azure.ai.projects.implementation.models.GetConnectionWithSecretsRequest;
import com.azure.ai.projects.implementation.models.GetWorkspaceResponse;
import com.azure.ai.projects.implementation.models.ListConnectionsResponse;
import com.azure.ai.projects.models.ConnectionType;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous AIProjectClient type.
 */
@ServiceClient(builder = AIProjectClientBuilder.class, isAsync = true)
public final class ConnectionsAsyncClient {

    @Generated
    private final ConnectionsImpl serviceClient;

    /**
     * Initializes an instance of ConnectionsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    ConnectionsAsyncClient(ConnectionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets the properties of the specified machine learning workspace.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         applicationInsights: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of the specified machine learning workspace along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> getWorkspaceWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getWorkspaceWithResponseAsync(requestOptions);
    }

    /**
     * List the details of all the connections (not including their credentials).
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>category</td><td>String</td><td>No</td><td>Category of the workspace connection. Allowed values:
     * "AzureOpenAI", "Serverless", "AzureBlob", "AIServices", "CognitiveSearch", "ApiKey", "CustomKeys",
     * "CognitiveService".</td></tr>
     * <tr><td>includeAll</td><td>Boolean</td><td>No</td><td>Indicates whether to list datastores. Service default: do
     * not list datastores.</td></tr>
     * <tr><td>target</td><td>String</td><td>No</td><td>Target of the workspace connection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             name: String (Required)
     *             properties (Required): {
     *                 authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *                 category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *                 target: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from the list operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> listConnectionsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listConnectionsWithResponseAsync(requestOptions);
    }

    /**
     * Get the details of a single connection, without credentials.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *         category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *         target: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param connectionName Connection Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a single connection, without credentials along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> getConnectionWithResponse(String connectionName, RequestOptions requestOptions) {
        return this.serviceClient.getConnectionWithResponseAsync(connectionName, requestOptions);
    }

    /**
     * Get the details of a single connection, including credentials (if available).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ignored: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *         category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *         target: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param connectionName Connection Name.
     * @param getConnectionWithSecretsRequest The getConnectionWithSecretsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a single connection, including credentials (if available) along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> getConnectionWithSecretsWithResponse(String connectionName,
        BinaryData getConnectionWithSecretsRequest, RequestOptions requestOptions) {
        return this.serviceClient.getConnectionWithSecretsWithResponseAsync(connectionName,
            getConnectionWithSecretsRequest, requestOptions);
    }

    /**
     * Gets the properties of the specified machine learning workspace.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified machine learning workspace on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<GetWorkspaceResponse> getWorkspace() {
        // Generated convenience method for getWorkspaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWorkspaceWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GetWorkspaceResponse.class));
    }

    /**
     * List the details of all the connections (not including their credentials).
     *
     * @param category Category of the workspace connection.
     * @param includeAll Indicates whether to list datastores. Service default: do not list datastores.
     * @param target Target of the workspace connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from the list operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ListConnectionsResponse> listConnections(ConnectionType category, Boolean includeAll, String target) {
        // Generated convenience method for listConnectionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (category != null) {
            requestOptions.addQueryParam("category", category.toString(), false);
        }
        if (includeAll != null) {
            requestOptions.addQueryParam("includeAll", String.valueOf(includeAll), false);
        }
        if (target != null) {
            requestOptions.addQueryParam("target", target, false);
        }
        return listConnectionsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListConnectionsResponse.class));
    }

    /**
     * List the details of all the connections (not including their credentials).
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from the list operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ListConnectionsResponse> listConnections() {
        // Generated convenience method for listConnectionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listConnectionsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListConnectionsResponse.class));
    }

    /**
     * Get the details of a single connection, without credentials.
     *
     * @param connectionName Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a single connection, without credentials on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<GetConnectionResponse> getConnection(String connectionName) {
        // Generated convenience method for getConnectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getConnectionWithResponse(connectionName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GetConnectionResponse.class));
    }

    /**
     * Get the details of a single connection, including credentials (if available).
     *
     * @param connectionName Connection Name.
     * @param ignored The body is ignored. TODO: Can we remove this?.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a single connection, including credentials (if available) on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<GetConnectionResponse> getConnectionWithSecrets(String connectionName, String ignored) {
        // Generated convenience method for getConnectionWithSecretsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GetConnectionWithSecretsRequest getConnectionWithSecretsRequestObj
            = new GetConnectionWithSecretsRequest(ignored);
        BinaryData getConnectionWithSecretsRequest = BinaryData.fromObject(getConnectionWithSecretsRequestObj);
        return getConnectionWithSecretsWithResponse(connectionName, getConnectionWithSecretsRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GetConnectionResponse.class));
    }
}
