// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Evaluation response for agent evaluation run.
 */
@Immutable
public final class AgentEvaluation implements JsonSerializable<AgentEvaluation> {

    /*
     * Identifier of the agent evaluation run.
     */
    @Generated
    private final String id;

    /*
     * Status of the agent evaluation. Options: Running, Completed, Failed.
     */
    @Generated
    private final String status;

    /*
     * The reason of the request failure for the long running process, if applicable.
     */
    @Generated
    private String error;

    /*
     * The agent evaluation result.
     */
    @Generated
    private List<AgentEvaluationResult> result;

    /**
     * Creates an instance of AgentEvaluation class.
     *
     * @param id the id value to set.
     * @param status the status value to set.
     */
    @Generated
    private AgentEvaluation(String id, String status) {
        this.id = id;
        this.status = status;
    }

    /**
     * Get the id property: Identifier of the agent evaluation run.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the status property: Status of the agent evaluation. Options: Running, Completed, Failed.
     *
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the error property: The reason of the request failure for the long running process, if applicable.
     *
     * @return the error value.
     */
    @Generated
    public String getError() {
        return this.error;
    }

    /**
     * Get the result property: The agent evaluation result.
     *
     * @return the result value.
     */
    @Generated
    public List<AgentEvaluationResult> getResult() {
        return this.result;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("error", this.error);
        jsonWriter.writeArrayField("result", this.result, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentEvaluation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentEvaluation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentEvaluation.
     */
    @Generated
    public static AgentEvaluation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String status = null;
            String error = null;
            List<AgentEvaluationResult> result = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = reader.getString();
                } else if ("error".equals(fieldName)) {
                    error = reader.getString();
                } else if ("result".equals(fieldName)) {
                    result = reader.readArray(reader1 -> AgentEvaluationResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            AgentEvaluation deserializedAgentEvaluation = new AgentEvaluation(id, status);
            deserializedAgentEvaluation.error = error;
            deserializedAgentEvaluation.result = result;
            return deserializedAgentEvaluation;
        });
    }
}
