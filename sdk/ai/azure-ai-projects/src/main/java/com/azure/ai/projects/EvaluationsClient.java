// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects;

import com.azure.ai.projects.implementation.EvaluationsImpl;
import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.ai.projects.models.Evaluation;
import com.azure.ai.projects.models.EvaluationSchedule;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous AIProjectClient type.
 */
@ServiceClient(builder = AIProjectClientBuilder.class)
public final class EvaluationsClient {

    @Generated
    private final EvaluationsImpl serviceClient;

    /**
     * Initializes an instance of EvaluationsClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    EvaluationsClient(EvaluationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param id Identifier of the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(id, requestOptions);
    }

    /**
     * Run the evaluation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param evaluation Evaluation to run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData evaluation, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(evaluation, requestOptions);
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(RequestOptions requestOptions) {
        return this.serviceClient.list(requestOptions);
    }

    /**
     * Resource update operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param id Identifier of the evaluation.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateWithResponse(String id, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.updateWithResponse(id, resource, requestOptions);
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name Name of the schedule, which also serves as the unique identifier for the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Schedule Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getScheduleWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getScheduleWithResponse(name, requestOptions);
    }

    /**
     * Create or replace operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name Name of the schedule, which also serves as the unique identifier for the evaluation.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Schedule Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceScheduleWithResponse(String name, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceScheduleWithResponse(name, resource, requestOptions);
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EvaluationSchedule items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSchedule(RequestOptions requestOptions) {
        return this.serviceClient.listSchedule(requestOptions);
    }

    /**
     * Disable the evaluation schedule.
     *
     * @param name Name of the evaluation schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableScheduleWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.disableScheduleWithResponse(name, requestOptions);
    }

    /**
     * Resource read operation template.
     *
     * @param id Identifier of the evaluation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return evaluation Definition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Evaluation get(String id) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(id, requestOptions).getValue().toObject(Evaluation.class);
    }

    /**
     * Run the evaluation.
     *
     * @param evaluation Evaluation to run.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return evaluation Definition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Evaluation create(Evaluation evaluation) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(evaluation), requestOptions).getValue()
            .toObject(Evaluation.class);
    }

    /**
     * Resource list operation template.
     *
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Evaluation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Evaluation> list(Integer top, Integer skip) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.list(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(Evaluation.class));
    }

    /**
     * Resource list operation template.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Evaluation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Evaluation> list() {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(Evaluation.class));
    }

    /**
     * Resource update operation template.
     *
     * @param id Identifier of the evaluation.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return evaluation Definition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Evaluation update(String id, Evaluation resource) {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getEvaluationAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getEvaluationAccessor().prepareModelForJsonMergePatch(resource, false);
        return updateWithResponse(id, resourceInBinaryData, requestOptions).getValue().toObject(Evaluation.class);
    }

    /**
     * Resource read operation template.
     *
     * @param name Name of the schedule, which also serves as the unique identifier for the evaluation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return evaluation Schedule Definition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EvaluationSchedule getSchedule(String name) {
        // Generated convenience method for getScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getScheduleWithResponse(name, requestOptions).getValue().toObject(EvaluationSchedule.class);
    }

    /**
     * Create or replace operation template.
     *
     * @param name Name of the schedule, which also serves as the unique identifier for the evaluation.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return evaluation Schedule Definition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EvaluationSchedule createOrReplaceSchedule(String name, EvaluationSchedule resource) {
        // Generated convenience method for createOrReplaceScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceScheduleWithResponse(name, BinaryData.fromObject(resource), requestOptions).getValue()
            .toObject(EvaluationSchedule.class);
    }

    /**
     * Resource list operation template.
     *
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of EvaluationSchedule items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EvaluationSchedule> listSchedule(Integer top, Integer skip) {
        // Generated convenience method for listSchedule
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listSchedule(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(EvaluationSchedule.class));
    }

    /**
     * Resource list operation template.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of EvaluationSchedule items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EvaluationSchedule> listSchedule() {
        // Generated convenience method for listSchedule
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSchedule(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(EvaluationSchedule.class));
    }

    /**
     * Disable the evaluation schedule.
     *
     * @param name Name of the evaluation schedule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableSchedule(String name) {
        // Generated convenience method for disableScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disableScheduleWithResponse(name, requestOptions).getValue();
    }
}
