// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects;

import com.azure.ai.projects.implementation.EvaluationsImpl;
import com.azure.ai.projects.models.AgentEvaluation;
import com.azure.ai.projects.models.AgentEvaluationRequest;
import com.azure.ai.projects.models.Evaluation;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous AIProjectClient type.
 */
@ServiceClient(builder = AIProjectClientBuilder.class)
public final class EvaluationsClient {

    @Generated
    private final EvaluationsImpl serviceClient;

    /**
     * Initializes an instance of EvaluationsClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    EvaluationsClient(EvaluationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates an agent evaluation run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     threadId: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     samplingConfiguration (Optional): {
     *         name: String (Required)
     *         samplingPercent: double (Required)
     *         maxRequestRate: double (Required)
     *     }
     *     redactionConfiguration (Optional): {
     *         redactScoreProperties: Boolean (Optional)
     *     }
     *     appInsightsConnectionString: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error: String (Optional)
     *     result (Optional): [
     *          (Optional){
     *             evaluator: String (Required)
     *             evaluatorId: String (Required)
     *             score: double (Required)
     *             status: String (Required)
     *             reason: String (Optional)
     *             version: String (Optional)
     *             threadId: String (Optional)
     *             runId: String (Required)
     *             error: String (Optional)
     *             additionalDetails (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     *
     * @param evaluation Agent evaluation to be run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation response for agent evaluation run along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAgentEvaluationWithResponse(BinaryData evaluation,
        RequestOptions requestOptions) {
        return this.serviceClient.createAgentEvaluationWithResponse(evaluation, requestOptions);
    }

    /**
     * Creates an agent evaluation run.
     *
     * @param evaluation Agent evaluation to be run.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return evaluation response for agent evaluation run.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentEvaluation createAgentEvaluation(AgentEvaluationRequest evaluation) {
        // Generated convenience method for createAgentEvaluationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createAgentEvaluationWithResponse(BinaryData.fromObject(evaluation), requestOptions).getValue()
            .toObject(AgentEvaluation.class);
    }

    /**
     * Get an evaluation run by name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param name Identifier of the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an evaluation run by name along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEvaluationWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getEvaluationWithResponse(name, requestOptions);
    }

    /**
     * List evaluation runs.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listEvaluations(RequestOptions requestOptions) {
        return this.serviceClient.listEvaluations(requestOptions);
    }

    /**
     * Creates an evaluation run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param evaluation Evaluation to be run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createEvaluationWithResponse(BinaryData evaluation, RequestOptions requestOptions) {
        return this.serviceClient.createEvaluationWithResponse(evaluation, requestOptions);
    }

    /**
     * Get an evaluation run by name.
     *
     * @param name Identifier of the evaluation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an evaluation run by name.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Evaluation getEvaluation(String name) {
        // Generated convenience method for getEvaluationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEvaluationWithResponse(name, requestOptions).getValue().toObject(Evaluation.class);
    }

    /**
     * List evaluation runs.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Evaluation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Evaluation> listEvaluations() {
        // Generated convenience method for listEvaluations
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listEvaluations(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Evaluation.class));
    }

    /**
     * Creates an evaluation run.
     *
     * @param evaluation Evaluation to be run.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return evaluation Definition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Evaluation createEvaluation(Evaluation evaluation) {
        // Generated convenience method for createEvaluationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createEvaluationWithResponse(BinaryData.fromObject(evaluation), requestOptions).getValue()
            .toObject(Evaluation.class);
    }
}
