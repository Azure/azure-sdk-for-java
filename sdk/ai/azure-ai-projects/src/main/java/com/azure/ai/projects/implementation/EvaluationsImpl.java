// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.projects.implementation;

import com.azure.ai.projects.ProjectsServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Evaluations.
 */
public final class EvaluationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EvaluationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AIProjectClientImpl client;

    /**
     * Initializes an instance of EvaluationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EvaluationsImpl(AIProjectClientImpl client) {
        this.service
            = RestProxy.create(EvaluationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ProjectsServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AIProjectClientEvaluations to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/agents/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{projectName}")
    @ServiceInterface(name = "AIProjectClientEvalu")
    public interface EvaluationsService {
        @Get("/evaluations/runs/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/evaluations/runs/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/evaluations/runs:run")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData evaluation,
            RequestOptions requestOptions, Context context);

        @Post("/evaluations/runs:run")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData evaluation,
            RequestOptions requestOptions, Context context);

        @Get("/evaluations/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/evaluations/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Patch("/evaluations/runs/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> update(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions,
            Context context);

        @Patch("/evaluations/runs/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions,
            Context context);

        @Get("/evaluations/schedules/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSchedule(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/evaluations/schedules/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getScheduleSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/evaluations/schedules/{name}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplaceSchedule(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Put("/evaluations/schedules/{name}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceScheduleSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Get("/evaluations/schedules")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSchedule(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/evaluations/schedules")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listScheduleSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Patch("/evaluations/schedules/{name}/disable")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> disableSchedule(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/evaluations/schedules/{name}/disable")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> disableScheduleSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listScheduleNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listScheduleNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id Identifier of the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), id, accept, requestOptions, context));
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id Identifier of the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), id, accept, requestOptions, Context.NONE);
    }

    /**
     * Run the evaluation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param evaluation Evaluation to run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(BinaryData evaluation, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), contentType, accept, evaluation, requestOptions, context));
    }

    /**
     * Run the evaluation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param evaluation Evaluation to run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData evaluation, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), contentType, accept, evaluation, requestOptions,
            Context.NONE);
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getResourceGroupName(), this.client.getProjectName(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Resource update operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id Identifier of the evaluation.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateWithResponseAsync(String id, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.update(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), id, contentType, accept, resource, requestOptions, context));
    }

    /**
     * Resource update operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id Identifier of the evaluation.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateWithResponse(String id, BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), id, contentType, accept, resource, requestOptions,
            Context.NONE);
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name Name of the schedule, which also serves as the unique identifier for the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Schedule Definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getScheduleWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSchedule(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name Name of the schedule, which also serves as the unique identifier for the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Schedule Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getScheduleWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getScheduleSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, Context.NONE);
    }

    /**
     * Create or replace operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name Name of the schedule, which also serves as the unique identifier for the evaluation.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Schedule Definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceScheduleWithResponseAsync(String name, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createOrReplaceSchedule(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), name, contentType, accept, resource, requestOptions,
            context));
    }

    /**
     * Create or replace operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name Name of the schedule, which also serves as the unique identifier for the evaluation.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Schedule Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceScheduleWithResponse(String name, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrReplaceScheduleSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), name, contentType, accept, resource, requestOptions,
            Context.NONE);
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EvaluationSchedule items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listScheduleSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listSchedule(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getResourceGroupName(), this.client.getProjectName(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EvaluationSchedule items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listScheduleAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listScheduleSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listScheduleNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EvaluationSchedule items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listScheduleSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listScheduleSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EvaluationSchedule items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSchedule(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listScheduleSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listScheduleNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Disable the evaluation schedule.
     * 
     * @param name Name of the evaluation schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableScheduleWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.disableSchedule(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Disable the evaluation schedule.
     * 
     * @param name Name of the evaluation schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableScheduleWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.disableScheduleSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listNextSinglePageAsync(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listNext(nextLink, this.client.getEndpoint(), this.client.getSubscriptionId(),
                    this.client.getResourceGroupName(), this.client.getProjectName(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Optional, Required on create): {
     *         type: String (Required)
     *     }
     *     target (Optional): {
     *         systemMessage: String (Optional, Required on create)
     *         modelConfig (Optional, Required on create): {
     *             type: String (Required)
     *         }
     *         modelParams (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getResourceGroupName(), this.client.getProjectName(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EvaluationSchedule items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listScheduleNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listScheduleNext(nextLink, this.client.getEndpoint(),
                this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
                accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *         resourceId: String (Optional, Required on create)
     *         query: String (Optional, Required on create)
     *         serviceName: String (Optional)
     *         connectionString: String (Optional)
     *     }
     *     description: String (Optional)
     *     systemData (Optional): {
     *         createdAt: OffsetDateTime (Optional)
     *         createdBy: String (Optional)
     *         createdByType: String (Optional)
     *         lastModifiedAt: OffsetDateTime (Optional)
     *     }
     *     provisioningState: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     isEnabled: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Optional, Required on create)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     trigger (Required): {
     *         type: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EvaluationSchedule items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listScheduleNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listScheduleNextSync(nextLink, this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getResourceGroupName(), this.client.getProjectName(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
