// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.projects.implementation;

import com.azure.ai.projects.ProjectsServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Evaluations.
 */
public final class EvaluationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EvaluationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AIProjectClientImpl client;

    /**
     * Initializes an instance of EvaluationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EvaluationsImpl(AIProjectClientImpl client) {
        this.service
            = RestProxy.create(EvaluationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ProjectsServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AIProjectClientEvaluations to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AIProjectClientEvaluations")
    public interface EvaluationsService {
        @Get("/evaluations/runs/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEvaluation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/evaluations/runs/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEvaluationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/evaluations/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listEvaluations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/evaluations/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listEvaluationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/evaluations/runs:run")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createEvaluation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData evaluation,
            RequestOptions requestOptions, Context context);

        @Post("/evaluations/runs:run")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createEvaluationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData evaluation,
            RequestOptions requestOptions, Context context);

        @Post("/evaluations/runs:runAgent")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createAgentEvaluation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData evaluation,
            RequestOptions requestOptions, Context context);

        @Post("/evaluations/runs:runAgent")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createAgentEvaluationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData evaluation,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listEvaluationsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listEvaluationsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Get an evaluation run by name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name Identifier of the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an evaluation run by name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEvaluationWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getEvaluation(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get an evaluation run by name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name Identifier of the evaluation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an evaluation run by name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEvaluationWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEvaluationSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name,
            accept, requestOptions, Context.NONE);
    }

    /**
     * List evaluation runs.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listEvaluationsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listEvaluations(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * List evaluation runs.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listEvaluationsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listEvaluationsSinglePageAsync(requestOptions),
            nextLink -> listEvaluationsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * List evaluation runs.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listEvaluationsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listEvaluationsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * List evaluation runs.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listEvaluations(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listEvaluationsSinglePage(requestOptions),
            nextLink -> listEvaluationsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Creates an evaluation run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param evaluation Evaluation to be run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createEvaluationWithResponseAsync(BinaryData evaluation,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createEvaluation(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, evaluation, requestOptions, context));
    }

    /**
     * Creates an evaluation run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param evaluation Evaluation to be run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createEvaluationWithResponse(BinaryData evaluation, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createEvaluationSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, evaluation, requestOptions, Context.NONE);
    }

    /**
     * Creates an agent evaluation run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     threadId: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     samplingConfiguration (Optional): {
     *         name: String (Required)
     *         samplingPercent: double (Required)
     *         maxRequestRate: double (Required)
     *     }
     *     redactionConfiguration (Optional): {
     *         redactScoreProperties: Boolean (Optional)
     *     }
     *     appInsightsConnectionString: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error: String (Optional)
     *     result (Optional): [
     *          (Optional){
     *             evaluator: String (Required)
     *             evaluatorId: String (Required)
     *             score: double (Required)
     *             status: String (Required)
     *             reason: String (Optional)
     *             version: String (Optional)
     *             threadId: String (Optional)
     *             runId: String (Required)
     *             error: String (Optional)
     *             additionalDetails (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param evaluation Agent evaluation to be run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation response for agent evaluation run along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAgentEvaluationWithResponseAsync(BinaryData evaluation,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createAgentEvaluation(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, evaluation, requestOptions, context));
    }

    /**
     * Creates an agent evaluation run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     threadId: String (Optional)
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     samplingConfiguration (Optional): {
     *         name: String (Required)
     *         samplingPercent: double (Required)
     *         maxRequestRate: double (Required)
     *     }
     *     redactionConfiguration (Optional): {
     *         redactScoreProperties: Boolean (Optional)
     *     }
     *     appInsightsConnectionString: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error: String (Optional)
     *     result (Optional): [
     *          (Optional){
     *             evaluator: String (Required)
     *             evaluatorId: String (Required)
     *             score: double (Required)
     *             status: String (Required)
     *             reason: String (Optional)
     *             version: String (Optional)
     *             threadId: String (Optional)
     *             runId: String (Required)
     *             error: String (Optional)
     *             additionalDetails (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param evaluation Agent evaluation to be run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return evaluation response for agent evaluation run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAgentEvaluationWithResponse(BinaryData evaluation,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createAgentEvaluationSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, evaluation, requestOptions,
            Context.NONE);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listEvaluationsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listEvaluationsNext(nextLink, this.client.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         type: String (Required)
     *     }
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     status: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     properties (Optional): {
     *         String: String (Required)
     *     }
     *     evaluators (Required): {
     *         String (Required): {
     *             id: String (Required)
     *             initParams (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             dataMapping (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Evaluation items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listEvaluationsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listEvaluationsNextSync(nextLink, this.client.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
