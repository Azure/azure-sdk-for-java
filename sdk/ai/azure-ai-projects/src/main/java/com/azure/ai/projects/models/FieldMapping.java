// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.ai.projects.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Field mapping configuration class.
 */
@Fluent
public final class FieldMapping implements JsonSerializable<FieldMapping> {

    /*
     * List of fields with text content
     */
    @Generated
    private List<String> contentFields;

    /*
     * Path of file to be used as a source of text content
     */
    @Generated
    private String filepathField;

    /*
     * Field containing the title of the document
     */
    @Generated
    private String titleField;

    /*
     * Field containing the url of the document
     */
    @Generated
    private String urlField;

    /*
     * List of fields with vector content
     */
    @Generated
    private List<String> vectorFields;

    /*
     * List of fields with metadata content
     */
    @Generated
    private List<String> metadataFields;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setFieldMappingAccessor(new JsonMergePatchHelper.FieldMappingAccessor() {

            @Override
            public FieldMapping prepareModelForJsonMergePatch(FieldMapping model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(FieldMapping model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of FieldMapping class.
     */
    @Generated
    public FieldMapping() {
    }

    /**
     * Get the contentFields property: List of fields with text content.
     *
     * @return the contentFields value.
     */
    @Generated
    public List<String> getContentFields() {
        return this.contentFields;
    }

    /**
     * Set the contentFields property: List of fields with text content.
     * <p>Required when create the resource.</p>
     *
     * @param contentFields the contentFields value to set.
     * @return the FieldMapping object itself.
     */
    @Generated
    public FieldMapping setContentFields(List<String> contentFields) {
        this.contentFields = contentFields;
        this.updatedProperties.add("contentFields");
        return this;
    }

    /**
     * Get the filepathField property: Path of file to be used as a source of text content.
     *
     * @return the filepathField value.
     */
    @Generated
    public String getFilepathField() {
        return this.filepathField;
    }

    /**
     * Set the filepathField property: Path of file to be used as a source of text content.
     *
     * @param filepathField the filepathField value to set.
     * @return the FieldMapping object itself.
     */
    @Generated
    public FieldMapping setFilepathField(String filepathField) {
        this.filepathField = filepathField;
        this.updatedProperties.add("filepathField");
        return this;
    }

    /**
     * Get the titleField property: Field containing the title of the document.
     *
     * @return the titleField value.
     */
    @Generated
    public String getTitleField() {
        return this.titleField;
    }

    /**
     * Set the titleField property: Field containing the title of the document.
     *
     * @param titleField the titleField value to set.
     * @return the FieldMapping object itself.
     */
    @Generated
    public FieldMapping setTitleField(String titleField) {
        this.titleField = titleField;
        this.updatedProperties.add("titleField");
        return this;
    }

    /**
     * Get the urlField property: Field containing the url of the document.
     *
     * @return the urlField value.
     */
    @Generated
    public String getUrlField() {
        return this.urlField;
    }

    /**
     * Set the urlField property: Field containing the url of the document.
     *
     * @param urlField the urlField value to set.
     * @return the FieldMapping object itself.
     */
    @Generated
    public FieldMapping setUrlField(String urlField) {
        this.urlField = urlField;
        this.updatedProperties.add("urlField");
        return this;
    }

    /**
     * Get the vectorFields property: List of fields with vector content.
     *
     * @return the vectorFields value.
     */
    @Generated
    public List<String> getVectorFields() {
        return this.vectorFields;
    }

    /**
     * Set the vectorFields property: List of fields with vector content.
     *
     * @param vectorFields the vectorFields value to set.
     * @return the FieldMapping object itself.
     */
    @Generated
    public FieldMapping setVectorFields(List<String> vectorFields) {
        this.vectorFields = vectorFields;
        this.updatedProperties.add("vectorFields");
        return this;
    }

    /**
     * Get the metadataFields property: List of fields with metadata content.
     *
     * @return the metadataFields value.
     */
    @Generated
    public List<String> getMetadataFields() {
        return this.metadataFields;
    }

    /**
     * Set the metadataFields property: List of fields with metadata content.
     *
     * @param metadataFields the metadataFields value to set.
     * @return the FieldMapping object itself.
     */
    @Generated
    public FieldMapping setMetadataFields(List<String> metadataFields) {
        this.metadataFields = metadataFields;
        this.updatedProperties.add("metadataFields");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeArrayField("contentFields", this.contentFields,
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("filepathField", this.filepathField);
            jsonWriter.writeStringField("titleField", this.titleField);
            jsonWriter.writeStringField("urlField", this.urlField);
            jsonWriter.writeArrayField("vectorFields", this.vectorFields,
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeArrayField("metadataFields", this.metadataFields,
                (writer, element) -> writer.writeString(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("contentFields")) {
            if (this.contentFields == null) {
                jsonWriter.writeNullField("contentFields");
            } else {
                jsonWriter.writeArrayField("contentFields", this.contentFields,
                    (writer, element) -> writer.writeString(element));
            }
        }
        if (updatedProperties.contains("filepathField")) {
            if (this.filepathField == null) {
                jsonWriter.writeNullField("filepathField");
            } else {
                jsonWriter.writeStringField("filepathField", this.filepathField);
            }
        }
        if (updatedProperties.contains("titleField")) {
            if (this.titleField == null) {
                jsonWriter.writeNullField("titleField");
            } else {
                jsonWriter.writeStringField("titleField", this.titleField);
            }
        }
        if (updatedProperties.contains("urlField")) {
            if (this.urlField == null) {
                jsonWriter.writeNullField("urlField");
            } else {
                jsonWriter.writeStringField("urlField", this.urlField);
            }
        }
        if (updatedProperties.contains("vectorFields")) {
            if (this.vectorFields == null) {
                jsonWriter.writeNullField("vectorFields");
            } else {
                jsonWriter.writeArrayField("vectorFields", this.vectorFields,
                    (writer, element) -> writer.writeString(element));
            }
        }
        if (updatedProperties.contains("metadataFields")) {
            if (this.metadataFields == null) {
                jsonWriter.writeNullField("metadataFields");
            } else {
                jsonWriter.writeArrayField("metadataFields", this.metadataFields,
                    (writer, element) -> writer.writeString(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FieldMapping from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FieldMapping if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FieldMapping.
     */
    @Generated
    public static FieldMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FieldMapping deserializedFieldMapping = new FieldMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("contentFields".equals(fieldName)) {
                    List<String> contentFields = reader.readArray(reader1 -> reader1.getString());
                    deserializedFieldMapping.contentFields = contentFields;
                } else if ("filepathField".equals(fieldName)) {
                    deserializedFieldMapping.filepathField = reader.getString();
                } else if ("titleField".equals(fieldName)) {
                    deserializedFieldMapping.titleField = reader.getString();
                } else if ("urlField".equals(fieldName)) {
                    deserializedFieldMapping.urlField = reader.getString();
                } else if ("vectorFields".equals(fieldName)) {
                    List<String> vectorFields = reader.readArray(reader1 -> reader1.getString());
                    deserializedFieldMapping.vectorFields = vectorFields;
                } else if ("metadataFields".equals(fieldName)) {
                    List<String> metadataFields = reader.readArray(reader1 -> reader1.getString());
                    deserializedFieldMapping.metadataFields = metadataFields;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFieldMapping;
        });
    }
}
