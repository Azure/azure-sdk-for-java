// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A custom search configuration.
 */
@Immutable
public final class SearchConfiguration implements JsonSerializable<SearchConfiguration> {

    /*
     * A connection in a ToolConnectionList attached to this tool.
     */
    @Generated
    private final String connectionId;

    /*
     * Name of the custom configuration instance given to config.
     */
    @Generated
    private final String instanceName;

    /**
     * Creates an instance of SearchConfiguration class.
     *
     * @param connectionId the connectionId value to set.
     * @param instanceName the instanceName value to set.
     */
    @Generated
    public SearchConfiguration(String connectionId, String instanceName) {
        this.connectionId = connectionId;
        this.instanceName = instanceName;
    }

    /**
     * Get the connectionId property: A connection in a ToolConnectionList attached to this tool.
     *
     * @return the connectionId value.
     */
    @Generated
    public String getConnectionId() {
        return this.connectionId;
    }

    /**
     * Get the instanceName property: Name of the custom configuration instance given to config.
     *
     * @return the instanceName value.
     */
    @Generated
    public String getInstanceName() {
        return this.instanceName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connection_id", this.connectionId);
        jsonWriter.writeStringField("instance_name", this.instanceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchConfiguration.
     */
    @Generated
    public static SearchConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String connectionId = null;
            String instanceName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("connection_id".equals(fieldName)) {
                    connectionId = reader.getString();
                } else if ("instance_name".equals(fieldName)) {
                    instanceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new SearchConfiguration(connectionId, instanceName);
        });
    }
}
