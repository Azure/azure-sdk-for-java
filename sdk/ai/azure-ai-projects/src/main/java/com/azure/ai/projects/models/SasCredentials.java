// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Shared Access Signature (SAS) credential definition.
 */
@Immutable
public final class SasCredentials extends BaseCredentials {

    /*
     * The type of credential used by the connection
     */
    @Generated
    private CredentialType type = CredentialType.SAS;

    /*
     * SAS token
     */
    @Generated
    private String sasToken;

    /**
     * Creates an instance of SasCredentials class.
     */
    @Generated
    private SasCredentials() {
    }

    /**
     * Get the type property: The type of credential used by the connection.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public CredentialType getType() {
        return this.type;
    }

    /**
     * Get the sasToken property: SAS token.
     *
     * @return the sasToken value.
     */
    @Generated
    public String getSasToken() {
        return this.sasToken;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SasCredentials from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SasCredentials if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SasCredentials.
     */
    @Generated
    public static SasCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SasCredentials deserializedSasCredentials = new SasCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedSasCredentials.type = CredentialType.fromString(reader.getString());
                } else if ("SAS".equals(fieldName)) {
                    deserializedSasCredentials.sasToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSasCredentials;
        });
    }
}
