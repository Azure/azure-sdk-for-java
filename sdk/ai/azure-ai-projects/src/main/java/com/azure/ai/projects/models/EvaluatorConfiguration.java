// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Evaluator Configuration.
 */
@Fluent
public final class EvaluatorConfiguration implements JsonSerializable<EvaluatorConfiguration> {

    /*
     * Identifier of the evaluator.
     */
    @Generated
    private final String id;

    /*
     * Initialization parameters of the evaluator.
     */
    @Generated
    private Map<String, BinaryData> initParams;

    /*
     * Data parameters of the evaluator.
     */
    @Generated
    private Map<String, String> dataMapping;

    /**
     * Creates an instance of EvaluatorConfiguration class.
     *
     * @param id the id value to set.
     */
    @Generated
    public EvaluatorConfiguration(String id) {
        this.id = id;
    }

    /**
     * Get the id property: Identifier of the evaluator.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the initParams property: Initialization parameters of the evaluator.
     *
     * @return the initParams value.
     */
    @Generated
    public Map<String, BinaryData> getInitParams() {
        return this.initParams;
    }

    /**
     * Set the initParams property: Initialization parameters of the evaluator.
     *
     * @param initParams the initParams value to set.
     * @return the EvaluatorConfiguration object itself.
     */
    @Generated
    public EvaluatorConfiguration setInitParams(Map<String, BinaryData> initParams) {
        this.initParams = initParams;
        return this;
    }

    /**
     * Get the dataMapping property: Data parameters of the evaluator.
     *
     * @return the dataMapping value.
     */
    @Generated
    public Map<String, String> getDataMapping() {
        return this.dataMapping;
    }

    /**
     * Set the dataMapping property: Data parameters of the evaluator.
     *
     * @param dataMapping the dataMapping value to set.
     * @return the EvaluatorConfiguration object itself.
     */
    @Generated
    public EvaluatorConfiguration setDataMapping(Map<String, String> dataMapping) {
        this.dataMapping = dataMapping;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeMapField("initParams", this.initParams,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeMapField("dataMapping", this.dataMapping, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvaluatorConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvaluatorConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EvaluatorConfiguration.
     */
    @Generated
    public static EvaluatorConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            Map<String, BinaryData> initParams = null;
            Map<String, String> dataMapping = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("initParams".equals(fieldName)) {
                    initParams = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("dataMapping".equals(fieldName)) {
                    dataMapping = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            EvaluatorConfiguration deserializedEvaluatorConfiguration = new EvaluatorConfiguration(id);
            deserializedEvaluatorConfiguration.initParams = initParams;
            deserializedEvaluatorConfiguration.dataMapping = dataMapping;
            return deserializedEvaluatorConfiguration;
        });
    }
}
