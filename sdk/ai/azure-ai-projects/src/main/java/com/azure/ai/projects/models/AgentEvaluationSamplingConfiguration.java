// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition for sampling strategy.
 */
@Immutable
public final class AgentEvaluationSamplingConfiguration
    implements JsonSerializable<AgentEvaluationSamplingConfiguration> {

    /*
     * Name of the sampling strategy.
     */
    @Generated
    private final String name;

    /*
     * Percentage of sampling per hour (0-100).
     */
    @Generated
    private final double samplingPercent;

    /*
     * Maximum request rate per hour (0 to 1000).
     */
    @Generated
    private final double maxRequestRate;

    /**
     * Creates an instance of AgentEvaluationSamplingConfiguration class.
     *
     * @param name the name value to set.
     * @param samplingPercent the samplingPercent value to set.
     * @param maxRequestRate the maxRequestRate value to set.
     */
    @Generated
    public AgentEvaluationSamplingConfiguration(String name, double samplingPercent, double maxRequestRate) {
        this.name = name;
        this.samplingPercent = samplingPercent;
        this.maxRequestRate = maxRequestRate;
    }

    /**
     * Get the name property: Name of the sampling strategy.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the samplingPercent property: Percentage of sampling per hour (0-100).
     *
     * @return the samplingPercent value.
     */
    @Generated
    public double getSamplingPercent() {
        return this.samplingPercent;
    }

    /**
     * Get the maxRequestRate property: Maximum request rate per hour (0 to 1000).
     *
     * @return the maxRequestRate value.
     */
    @Generated
    public double getMaxRequestRate() {
        return this.maxRequestRate;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeDoubleField("samplingPercent", this.samplingPercent);
        jsonWriter.writeDoubleField("maxRequestRate", this.maxRequestRate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentEvaluationSamplingConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentEvaluationSamplingConfiguration if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentEvaluationSamplingConfiguration.
     */
    @Generated
    public static AgentEvaluationSamplingConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            double samplingPercent = 0.0;
            double maxRequestRate = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("samplingPercent".equals(fieldName)) {
                    samplingPercent = reader.getDouble();
                } else if ("maxRequestRate".equals(fieldName)) {
                    maxRequestRate = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new AgentEvaluationSamplingConfiguration(name, samplingPercent, maxRequestRate);
        });
    }
}
