// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.implementation.models;

import com.azure.ai.projects.models.AuthenticationType;
import com.azure.ai.projects.models.ConnectionType;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Connection properties.
 */
@Immutable
public class InternalConnectionProperties implements JsonSerializable<InternalConnectionProperties> {

    /*
     * Authentication type of the connection target
     */
    @Generated
    private AuthenticationType authType;

    /*
     * Category of the connection
     */
    @Generated
    private final ConnectionType category;

    /*
     * The connection URL to be used for this service
     */
    @Generated
    private final String target;

    /**
     * Creates an instance of InternalConnectionProperties class.
     *
     * @param category the category value to set.
     * @param target the target value to set.
     */
    @Generated
    protected InternalConnectionProperties(ConnectionType category, String target) {
        this.category = category;
        this.target = target;
    }

    /**
     * Get the authType property: Authentication type of the connection target.
     *
     * @return the authType value.
     */
    @Generated
    public AuthenticationType getAuthType() {
        return this.authType;
    }

    /**
     * Get the category property: Category of the connection.
     *
     * @return the category value.
     */
    @Generated
    public ConnectionType getCategory() {
        return this.category;
    }

    /**
     * Get the target property: The connection URL to be used for this service.
     *
     * @return the target value.
     */
    @Generated
    public String getTarget() {
        return this.target;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("target", this.target);
        jsonWriter.writeStringField("authType", this.authType == null ? null : this.authType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InternalConnectionProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InternalConnectionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InternalConnectionProperties.
     */
    @Generated
    public static InternalConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("authType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("ApiKey".equals(discriminatorValue)) {
                    return InternalConnectionPropertiesApiKeyAuth.fromJson(readerToUse.reset());
                } else if ("AAD".equals(discriminatorValue)) {
                    return InternalConnectionPropertiesAADAuth.fromJson(readerToUse.reset());
                } else if ("CustomKeys".equals(discriminatorValue)) {
                    return InternalConnectionPropertiesCustomAuth.fromJson(readerToUse.reset());
                } else if ("SAS".equals(discriminatorValue)) {
                    return InternalConnectionPropertiesSASAuth.fromJson(readerToUse.reset());
                } else if ("None".equals(discriminatorValue)) {
                    return InternalConnectionPropertiesNoAuth.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static InternalConnectionProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionType category = null;
            String target = null;
            AuthenticationType authType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("category".equals(fieldName)) {
                    category = ConnectionType.fromString(reader.getString());
                } else if ("target".equals(fieldName)) {
                    target = reader.getString();
                } else if ("authType".equals(fieldName)) {
                    authType = AuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            InternalConnectionProperties deserializedInternalConnectionProperties
                = new InternalConnectionProperties(category, target);
            deserializedInternalConnectionProperties.authType = authType;
            return deserializedInternalConnectionProperties;
        });
    }
}
