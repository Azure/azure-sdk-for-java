// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a request for a pending upload.
 */
@Fluent
public final class PendingUploadRequest implements JsonSerializable<PendingUploadRequest> {

    /*
     * If PendingUploadId is not provided, a random GUID will be used.
     */
    @Generated
    private String pendingUploadId;

    /*
     * Azure Storage Account connection name to use for generating temporary SAS token
     */
    @Generated
    private String connectionName;

    /*
     * BlobReference is the only supported type.
     */
    @Generated
    private final PendingUploadType pendingUploadType = PendingUploadType.BLOB_REFERENCE;

    /**
     * Creates an instance of PendingUploadRequest class.
     */
    @Generated
    public PendingUploadRequest() {
    }

    /**
     * Get the pendingUploadId property: If PendingUploadId is not provided, a random GUID will be used.
     *
     * @return the pendingUploadId value.
     */
    @Generated
    public String getPendingUploadId() {
        return this.pendingUploadId;
    }

    /**
     * Set the pendingUploadId property: If PendingUploadId is not provided, a random GUID will be used.
     *
     * @param pendingUploadId the pendingUploadId value to set.
     * @return the PendingUploadRequest object itself.
     */
    @Generated
    public PendingUploadRequest setPendingUploadId(String pendingUploadId) {
        this.pendingUploadId = pendingUploadId;
        return this;
    }

    /**
     * Get the connectionName property: Azure Storage Account connection name to use for generating temporary SAS token.
     *
     * @return the connectionName value.
     */
    @Generated
    public String getConnectionName() {
        return this.connectionName;
    }

    /**
     * Set the connectionName property: Azure Storage Account connection name to use for generating temporary SAS token.
     *
     * @param connectionName the connectionName value to set.
     * @return the PendingUploadRequest object itself.
     */
    @Generated
    public PendingUploadRequest setConnectionName(String connectionName) {
        this.connectionName = connectionName;
        return this;
    }

    /**
     * Get the pendingUploadType property: BlobReference is the only supported type.
     *
     * @return the pendingUploadType value.
     */
    @Generated
    public PendingUploadType getPendingUploadType() {
        return this.pendingUploadType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pendingUploadType",
            this.pendingUploadType == null ? null : this.pendingUploadType.toString());
        jsonWriter.writeStringField("pendingUploadId", this.pendingUploadId);
        jsonWriter.writeStringField("connectionName", this.connectionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PendingUploadRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PendingUploadRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PendingUploadRequest.
     */
    @Generated
    public static PendingUploadRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PendingUploadRequest deserializedPendingUploadRequest = new PendingUploadRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("pendingUploadId".equals(fieldName)) {
                    deserializedPendingUploadRequest.pendingUploadId = reader.getString();
                } else if ("connectionName".equals(fieldName)) {
                    deserializedPendingUploadRequest.connectionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPendingUploadRequest;
        });
    }
}
