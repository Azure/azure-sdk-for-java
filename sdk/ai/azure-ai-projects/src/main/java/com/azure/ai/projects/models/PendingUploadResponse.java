// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the response for a pending upload request.
 */
@Immutable
public final class PendingUploadResponse implements JsonSerializable<PendingUploadResponse> {

    /*
     * Container-level read, write, list SAS.
     */
    @Generated
    private final BlobReference blobReference;

    /*
     * ID for this upload request.
     */
    @Generated
    private final String pendingUploadId;

    /*
     * Version of asset to be created if user did not specify version when initially creating upload
     */
    @Generated
    private String version;

    /*
     * BlobReference is the only supported type
     */
    @Generated
    private final PendingUploadType pendingUploadType = PendingUploadType.BLOB_REFERENCE;

    /**
     * Creates an instance of PendingUploadResponse class.
     *
     * @param blobReference the blobReference value to set.
     * @param pendingUploadId the pendingUploadId value to set.
     */
    @Generated
    private PendingUploadResponse(BlobReference blobReference, String pendingUploadId) {
        this.blobReference = blobReference;
        this.pendingUploadId = pendingUploadId;
    }

    /**
     * Get the blobReference property: Container-level read, write, list SAS.
     *
     * @return the blobReference value.
     */
    @Generated
    public BlobReference getBlobReference() {
        return this.blobReference;
    }

    /**
     * Get the pendingUploadId property: ID for this upload request.
     *
     * @return the pendingUploadId value.
     */
    @Generated
    public String getPendingUploadId() {
        return this.pendingUploadId;
    }

    /**
     * Get the version property: Version of asset to be created if user did not specify version when initially creating
     * upload.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the pendingUploadType property: BlobReference is the only supported type.
     *
     * @return the pendingUploadType value.
     */
    @Generated
    public PendingUploadType getPendingUploadType() {
        return this.pendingUploadType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("blobReference", this.blobReference);
        jsonWriter.writeStringField("pendingUploadId", this.pendingUploadId);
        jsonWriter.writeStringField("pendingUploadType",
            this.pendingUploadType == null ? null : this.pendingUploadType.toString());
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PendingUploadResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PendingUploadResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PendingUploadResponse.
     */
    @Generated
    public static PendingUploadResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobReference blobReference = null;
            String pendingUploadId = null;
            String version = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("blobReference".equals(fieldName)) {
                    blobReference = BlobReference.fromJson(reader);
                } else if ("pendingUploadId".equals(fieldName)) {
                    pendingUploadId = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            PendingUploadResponse deserializedPendingUploadResponse
                = new PendingUploadResponse(blobReference, pendingUploadId);
            deserializedPendingUploadResponse.version = version;
            return deserializedPendingUploadResponse;
        });
    }
}
