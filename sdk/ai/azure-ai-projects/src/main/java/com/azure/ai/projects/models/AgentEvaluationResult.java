// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Result for the agent evaluation evaluator run.
 */
@Immutable
public final class AgentEvaluationResult implements JsonSerializable<AgentEvaluationResult> {

    /*
     * Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion.
     */
    @Generated
    private final String evaluator;

    /*
     * Identifier of the evaluator.
     */
    @Generated
    private final String evaluatorId;

    /*
     * Score of the given evaluator. No restriction on range.
     */
    @Generated
    private final double score;

    /*
     * Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable.
     */
    @Generated
    private final String status;

    /*
     * Reasoning for the evaluation result.
     */
    @Generated
    private String reason;

    /*
     * Version of the evaluator that was used to evaluate the agent's completion.
     */
    @Generated
    private String version;

    /*
     * The unique identifier of the thread.
     */
    @Generated
    private String threadId;

    /*
     * The unique identifier of the run.
     */
    @Generated
    private final String runId;

    /*
     * A string explaining why there was an error, if applicable.
     */
    @Generated
    private String error;

    /*
     * Additional properties relevant to the evaluator. These will differ between evaluators.
     */
    @Generated
    private Map<String, String> additionalDetails;

    /**
     * Creates an instance of AgentEvaluationResult class.
     *
     * @param evaluator the evaluator value to set.
     * @param evaluatorId the evaluatorId value to set.
     * @param score the score value to set.
     * @param status the status value to set.
     * @param runId the runId value to set.
     */
    @Generated
    private AgentEvaluationResult(String evaluator, String evaluatorId, double score, String status, String runId) {
        this.evaluator = evaluator;
        this.evaluatorId = evaluatorId;
        this.score = score;
        this.status = status;
        this.runId = runId;
    }

    /**
     * Get the evaluator property: Evaluator's name. This is the name of the evaluator that was used to evaluate the
     * agent's completion.
     *
     * @return the evaluator value.
     */
    @Generated
    public String getEvaluator() {
        return this.evaluator;
    }

    /**
     * Get the evaluatorId property: Identifier of the evaluator.
     *
     * @return the evaluatorId value.
     */
    @Generated
    public String getEvaluatorId() {
        return this.evaluatorId;
    }

    /**
     * Get the score property: Score of the given evaluator. No restriction on range.
     *
     * @return the score value.
     */
    @Generated
    public double getScore() {
        return this.score;
    }

    /**
     * Get the status property: Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable.
     *
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the reason property: Reasoning for the evaluation result.
     *
     * @return the reason value.
     */
    @Generated
    public String getReason() {
        return this.reason;
    }

    /**
     * Get the version property: Version of the evaluator that was used to evaluate the agent's completion.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the threadId property: The unique identifier of the thread.
     *
     * @return the threadId value.
     */
    @Generated
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * Get the runId property: The unique identifier of the run.
     *
     * @return the runId value.
     */
    @Generated
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the error property: A string explaining why there was an error, if applicable.
     *
     * @return the error value.
     */
    @Generated
    public String getError() {
        return this.error;
    }

    /**
     * Get the additionalDetails property: Additional properties relevant to the evaluator. These will differ between
     * evaluators.
     *
     * @return the additionalDetails value.
     */
    @Generated
    public Map<String, String> getAdditionalDetails() {
        return this.additionalDetails;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("evaluator", this.evaluator);
        jsonWriter.writeStringField("evaluatorId", this.evaluatorId);
        jsonWriter.writeDoubleField("score", this.score);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("runId", this.runId);
        jsonWriter.writeStringField("reason", this.reason);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("threadId", this.threadId);
        jsonWriter.writeStringField("error", this.error);
        jsonWriter.writeMapField("additionalDetails", this.additionalDetails,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentEvaluationResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentEvaluationResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentEvaluationResult.
     */
    @Generated
    public static AgentEvaluationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String evaluator = null;
            String evaluatorId = null;
            double score = 0.0;
            String status = null;
            String runId = null;
            String reason = null;
            String version = null;
            String threadId = null;
            String error = null;
            Map<String, String> additionalDetails = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("evaluator".equals(fieldName)) {
                    evaluator = reader.getString();
                } else if ("evaluatorId".equals(fieldName)) {
                    evaluatorId = reader.getString();
                } else if ("score".equals(fieldName)) {
                    score = reader.getDouble();
                } else if ("status".equals(fieldName)) {
                    status = reader.getString();
                } else if ("runId".equals(fieldName)) {
                    runId = reader.getString();
                } else if ("reason".equals(fieldName)) {
                    reason = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("threadId".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("error".equals(fieldName)) {
                    error = reader.getString();
                } else if ("additionalDetails".equals(fieldName)) {
                    additionalDetails = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AgentEvaluationResult deserializedAgentEvaluationResult
                = new AgentEvaluationResult(evaluator, evaluatorId, score, status, runId);
            deserializedAgentEvaluationResult.reason = reason;
            deserializedAgentEvaluationResult.version = version;
            deserializedAgentEvaluationResult.threadId = threadId;
            deserializedAgentEvaluationResult.error = error;
            deserializedAgentEvaluationResult.additionalDetails = additionalDetails;
            return deserializedAgentEvaluationResult;
        });
    }
}
