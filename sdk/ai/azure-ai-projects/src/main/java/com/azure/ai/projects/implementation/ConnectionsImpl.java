// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.projects.implementation;

import com.azure.ai.projects.ProjectsServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Connections.
 */
public final class ConnectionsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ConnectionsService service;

    /**
     * The service client containing this operation class.
     */
    private final AIProjectClientImpl client;

    /**
     * Initializes an instance of ConnectionsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ConnectionsImpl(AIProjectClientImpl client) {
        this.service
            = RestProxy.create(ConnectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ProjectsServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AIProjectClientConnections to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/agents/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{projectName}")
    @ServiceInterface(name = "AIProjectClientConne")
    public interface ConnectionsService {
        @Get("/")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getWorkspace(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getWorkspaceSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/connections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listConnections(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/connections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listConnectionsSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/connections/{connectionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getConnection(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("connectionName") String connectionName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/connections/{connectionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getConnectionSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("connectionName") String connectionName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/connections/{connectionName}/listsecrets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getConnectionWithSecrets(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("connectionName") String connectionName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData getConnectionWithSecretsRequest, RequestOptions requestOptions,
            Context context);

        @Post("/connections/{connectionName}/listsecrets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getConnectionWithSecretsSync(@HostParam("endpoint") String endpoint,
            @HostParam("subscriptionId") String subscriptionId,
            @HostParam("resourceGroupName") String resourceGroupName, @HostParam("projectName") String projectName,
            @QueryParam("api-version") String apiVersion, @PathParam("connectionName") String connectionName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData getConnectionWithSecretsRequest, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Gets the properties of the specified machine learning workspace.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         applicationInsights: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of the specified machine learning workspace along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWorkspaceWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getWorkspace(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Gets the properties of the specified machine learning workspace.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         applicationInsights: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of the specified machine learning workspace along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWorkspaceWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getWorkspaceSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * List the details of all the connections (not including their credentials).
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>category</td><td>String</td><td>No</td><td>Category of the workspace connection. Allowed values:
     * "AzureOpenAI", "Serverless", "AzureBlob", "AIServices", "CognitiveSearch", "ApiKey", "CustomKeys",
     * "CognitiveService".</td></tr>
     * <tr><td>includeAll</td><td>Boolean</td><td>No</td><td>Indicates whether to list datastores. Service default: do
     * not list datastores.</td></tr>
     * <tr><td>target</td><td>String</td><td>No</td><td>Target of the workspace connection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             name: String (Required)
     *             properties (Required): {
     *                 authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *                 category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *                 target: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from the list operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listConnectionsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listConnections(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * List the details of all the connections (not including their credentials).
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>category</td><td>String</td><td>No</td><td>Category of the workspace connection. Allowed values:
     * "AzureOpenAI", "Serverless", "AzureBlob", "AIServices", "CognitiveSearch", "ApiKey", "CustomKeys",
     * "CognitiveService".</td></tr>
     * <tr><td>includeAll</td><td>Boolean</td><td>No</td><td>Indicates whether to list datastores. Service default: do
     * not list datastores.</td></tr>
     * <tr><td>target</td><td>String</td><td>No</td><td>Target of the workspace connection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             name: String (Required)
     *             properties (Required): {
     *                 authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *                 category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *                 target: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from the list operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listConnectionsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listConnectionsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * Get the details of a single connection, without credentials.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *         category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *         target: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param connectionName Connection Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a single connection, without credentials along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getConnectionWithResponseAsync(String connectionName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getConnection(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), connectionName, accept, requestOptions, context));
    }

    /**
     * Get the details of a single connection, without credentials.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *         category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *         target: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param connectionName Connection Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a single connection, without credentials along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getConnectionWithResponse(String connectionName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getConnectionSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), connectionName, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the details of a single connection, including credentials (if available).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ignored: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *         category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *         target: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param connectionName Connection Name.
     * @param getConnectionWithSecretsRequest The getConnectionWithSecretsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a single connection, including credentials (if available) along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getConnectionWithSecretsWithResponseAsync(String connectionName,
        BinaryData getConnectionWithSecretsRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getConnectionWithSecrets(this.client.getEndpoint(),
            this.client.getSubscriptionId(), this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), connectionName, contentType, accept,
            getConnectionWithSecretsRequest, requestOptions, context));
    }

    /**
     * Get the details of a single connection, including credentials (if available).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ignored: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     properties (Required): {
     *         authType: String(ApiKey/AAD/SAS/CustomKeys/None) (Required)
     *         category: String(AzureOpenAI/Serverless/AzureBlob/AIServices/CognitiveSearch/ApiKey/CustomKeys/CognitiveService) (Required)
     *         target: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param connectionName Connection Name.
     * @param getConnectionWithSecretsRequest The getConnectionWithSecretsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a single connection, including credentials (if available) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getConnectionWithSecretsWithResponse(String connectionName,
        BinaryData getConnectionWithSecretsRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.getConnectionWithSecretsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getResourceGroupName(), this.client.getProjectName(),
            this.client.getServiceVersion().getVersion(), connectionName, contentType, accept,
            getConnectionWithSecretsRequest, requestOptions, Context.NONE);
    }
}
