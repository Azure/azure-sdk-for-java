// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.projects.generated;

import com.azure.ai.projects.AIProjectClientBuilder;
import com.azure.ai.projects.IndexesClient;
import com.azure.ai.projects.models.Index;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.util.HashMap;
import java.util.Map;

public class IndexesCreateOrUpdateVersionMaximumSet {
    public static void main(String[] args) {
        IndexesClient indexesClient
            = new AIProjectClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildIndexesClient();
        // BEGIN:com.azure.ai.projects.generated.indexes-create-or-update.indexes-create-or-update-version-maximum-set
        Index response = indexesClient.createOrUpdate("kptgsnpfjcunvvdgzfjdmnurq", "hxutytnzwioiijfinpdojrnrqhqb",
            new Index().setDescription("wtjqhnlwihffw").setTags(mapOf("key1654", "fakeTokenPlaceholder")));
        // END:com.azure.ai.projects.generated.indexes-create-or-update.indexes-create-or-update-version-maximum-set
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
