// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The CaptureSemanticEventsTool model.
 */
@Immutable
public final class CaptureSemanticEventsTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.CAPTURE_SEMANTIC_EVENTS;

    /*
     * The set of structured events to capture from the model.
     */
    @Generated
    private final Map<String, SemanticEventDefinition> events;

    /**
     * Creates an instance of CaptureSemanticEventsTool class.
     *
     * @param events the events value to set.
     */
    @Generated
    public CaptureSemanticEventsTool(Map<String, SemanticEventDefinition> events) {
        this.events = events;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the events property: The set of structured events to capture from the model.
     *
     * @return the events value.
     */
    @Generated
    public Map<String, SemanticEventDefinition> getEvents() {
        return this.events;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("events", this.events, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CaptureSemanticEventsTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CaptureSemanticEventsTool if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CaptureSemanticEventsTool.
     */
    @Generated
    public static CaptureSemanticEventsTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, SemanticEventDefinition> events = null;
            ToolType type = ToolType.CAPTURE_SEMANTIC_EVENTS;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("events".equals(fieldName)) {
                    events = reader.readMap(reader1 -> SemanticEventDefinition.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = ToolType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CaptureSemanticEventsTool deserializedCaptureSemanticEventsTool = new CaptureSemanticEventsTool(events);
            deserializedCaptureSemanticEventsTool.type = type;
            return deserializedCaptureSemanticEventsTool;
        });
    }
}
