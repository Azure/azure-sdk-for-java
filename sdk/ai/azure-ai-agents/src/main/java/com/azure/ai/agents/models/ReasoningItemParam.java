// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A description of the chain of thought used by a reasoning model while generating
 * a response. Be sure to include these items in your `input` to the Responses API
 * for subsequent turns of a conversation if you are manually
 * [managing context](/docs/guides/conversation-state).
 */
@Fluent
public final class ReasoningItemParam extends ItemParam {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.REASONING;

    /*
     * The encrypted content of the reasoning item - populated when a response is
     * generated with `reasoning.encrypted_content` in the `include` parameter.
     */
    @Generated
    private String encryptedContent;

    /*
     * Reasoning text contents.
     */
    @Generated
    private final List<ReasoningItemSummaryPart> summary;

    /**
     * Creates an instance of ReasoningItemParam class.
     *
     * @param summary the summary value to set.
     */
    @Generated
    public ReasoningItemParam(List<ReasoningItemSummaryPart> summary) {
        this.summary = summary;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the encryptedContent property: The encrypted content of the reasoning item - populated when a response is
     * generated with `reasoning.encrypted_content` in the `include` parameter.
     *
     * @return the encryptedContent value.
     */
    @Generated
    public String getEncryptedContent() {
        return this.encryptedContent;
    }

    /**
     * Set the encryptedContent property: The encrypted content of the reasoning item - populated when a response is
     * generated with `reasoning.encrypted_content` in the `include` parameter.
     *
     * @param encryptedContent the encryptedContent value to set.
     * @return the ReasoningItemParam object itself.
     */
    @Generated
    public ReasoningItemParam setEncryptedContent(String encryptedContent) {
        this.encryptedContent = encryptedContent;
        return this;
    }

    /**
     * Get the summary property: Reasoning text contents.
     *
     * @return the summary value.
     */
    @Generated
    public List<ReasoningItemSummaryPart> getSummary() {
        return this.summary;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("summary", this.summary, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("encrypted_content", this.encryptedContent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReasoningItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReasoningItemParam if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReasoningItemParam.
     */
    @Generated
    public static ReasoningItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ReasoningItemSummaryPart> summary = null;
            ItemType type = ItemType.REASONING;
            String encryptedContent = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("summary".equals(fieldName)) {
                    summary = reader.readArray(reader1 -> ReasoningItemSummaryPart.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else if ("encrypted_content".equals(fieldName)) {
                    encryptedContent = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ReasoningItemParam deserializedReasoningItemParam = new ReasoningItemParam(summary);
            deserializedReasoningItemParam.type = type;
            deserializedReasoningItemParam.encryptedContent = encryptedContent;
            return deserializedReasoningItemParam;
        });
    }
}
