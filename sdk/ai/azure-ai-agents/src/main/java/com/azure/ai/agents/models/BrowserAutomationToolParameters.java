// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of input parameters for the Browser Automation Tool.
 */
@Immutable
public final class BrowserAutomationToolParameters implements JsonSerializable<BrowserAutomationToolParameters> {

    /*
     * The project connection parameters associated with the Browser Automation Tool.
     */
    @Generated
    private final BrowserAutomationToolConnectionParameters projectConnection;

    /**
     * Creates an instance of BrowserAutomationToolParameters class.
     *
     * @param projectConnection the projectConnection value to set.
     */
    @Generated
    public BrowserAutomationToolParameters(BrowserAutomationToolConnectionParameters projectConnection) {
        this.projectConnection = projectConnection;
    }

    /**
     * Get the projectConnection property: The project connection parameters associated with the Browser Automation
     * Tool.
     *
     * @return the projectConnection value.
     */
    @Generated
    public BrowserAutomationToolConnectionParameters getProjectConnection() {
        return this.projectConnection;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("project_connection", this.projectConnection);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrowserAutomationToolParameters from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrowserAutomationToolParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrowserAutomationToolParameters.
     */
    @Generated
    public static BrowserAutomationToolParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrowserAutomationToolConnectionParameters projectConnection = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("project_connection".equals(fieldName)) {
                    projectConnection = BrowserAutomationToolConnectionParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new BrowserAutomationToolParameters(projectConnection);
        });
    }
}
