// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.agents.implementation;

import com.azure.ai.agents.AgentsServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Agents.
 */
public final class AgentsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AgentsService service;

    /**
     * The service client containing this operation class.
     */
    private final ProjectsClientImpl client;

    /**
     * Initializes an instance of AgentsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AgentsImpl(ProjectsClientImpl client) {
        this.service = RestProxy.create(AgentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AgentsServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for ProjectsClientAgents to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ProjectsClientAgents")
    public interface AgentsService {
        @Get("/agents/{agent_name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAgent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAgentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/agents")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createAgent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createAgentRequest1,
            RequestOptions requestOptions, Context context);

        @Post("/agents")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createAgentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createAgentRequest1,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateAgent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateAgentRequest1, RequestOptions requestOptions,
            Context context);

        @Post("/agents/{agent_name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateAgentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateAgentRequest1, RequestOptions requestOptions,
            Context context);

        @Post("/agents:import")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createAgentFromManifest(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData createAgentFromManifestRequest1, RequestOptions requestOptions,
            Context context);

        @Post("/agents:import")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createAgentFromManifestSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData createAgentFromManifestRequest1, RequestOptions requestOptions,
            Context context);

        @Post("/agents/{agent_name}/import")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateAgentFromManifest(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateAgentFromManifestRequest1, RequestOptions requestOptions,
            Context context);

        @Post("/agents/{agent_name}/import")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateAgentFromManifestSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateAgentFromManifestRequest1, RequestOptions requestOptions,
            Context context);

        @Delete("/agents/{agent_name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteAgent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/agents/{agent_name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteAgentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/agents")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAgents(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAgentsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createAgentVersion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData createAgentVersionRequest1, RequestOptions requestOptions,
            Context context);

        @Post("/agents/{agent_name}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createAgentVersionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData createAgentVersionRequest1, RequestOptions requestOptions,
            Context context);

        @Post("/agents/{agent_name}/versions:import")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createAgentVersionFromManifest(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData createAgentVersionFromManifestRequest1,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions:import")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createAgentVersionFromManifestSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData createAgentVersionFromManifestRequest1,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/versions/{agent_version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAgentVersion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/versions/{agent_version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAgentVersionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/agents/{agent_name}/versions/{agent_version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteAgentVersion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/agents/{agent_name}/versions/{agent_version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteAgentVersionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAgentVersions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAgentVersionsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions/{agent_version}/containers/default:start")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> startAgentContainer(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData startAgentContainerRequest,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions/{agent_version}/containers/default:start")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> startAgentContainerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData startAgentContainerRequest,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions/{agent_version}/containers/default:update")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateAgentContainer(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData updateAgentContainerRequest,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions/{agent_version}/containers/default:update")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateAgentContainerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData updateAgentContainerRequest,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions/{agent_version}/containers/default:stop")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> stopAgentContainer(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions/{agent_version}/containers/default:stop")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> stopAgentContainerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions/{agent_version}/containers/default:delete")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteAgentContainer(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/agents/{agent_name}/versions/{agent_version}/containers/default:delete")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteAgentContainerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/versions/{agent_version}/containers/default")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAgentContainer(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/versions/{agent_version}/containers/default")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAgentContainerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/operations/{operation_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAgentContainerOperation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("operation_id") String operationId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/operations/{operation_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAgentContainerOperationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("operation_id") String operationId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAgentContainerOperations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAgentContainerOperationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/versions/{agent_version}/containers/default/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAgentVersionContainerOperations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/agents/{agent_name}/versions/{agent_version}/containers/default/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAgentVersionContainerOperationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("agent_name") String agentName,
            @PathParam("agent_version") String agentVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Retrieves the agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAgentWithResponseAsync(String agentName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAgent(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, accept, requestOptions, context));
    }

    /**
     * Retrieves the agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAgentWithResponse(String agentName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAgentSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), agentName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Creates the agent.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createAgentRequest1 The createAgentRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAgentWithResponseAsync(BinaryData createAgentRequest1,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createAgent(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, createAgentRequest1, requestOptions, context));
    }

    /**
     * Creates the agent.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createAgentRequest1 The createAgentRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAgentWithResponse(BinaryData createAgentRequest1, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createAgentSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, createAgentRequest1, requestOptions, Context.NONE);
    }

    /**
     * Updates the agent by adding a new version if there are any changes to the agent definition.
     * If no changes, returns the existing agent version.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve.
     * @param updateAgentRequest1 The updateAgentRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateAgentWithResponseAsync(String agentName, BinaryData updateAgentRequest1,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.updateAgent(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                agentName, contentType, accept, updateAgentRequest1, requestOptions, context));
    }

    /**
     * Updates the agent by adding a new version if there are any changes to the agent definition.
     * If no changes, returns the existing agent version.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve.
     * @param updateAgentRequest1 The updateAgentRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateAgentWithResponse(String agentName, BinaryData updateAgentRequest1,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateAgentSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, contentType, accept, updateAgentRequest1, requestOptions, Context.NONE);
    }

    /**
     * Creates an agent from a manifest.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     manifest_id: String (Required)
     *     parameter_values (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createAgentFromManifestRequest1 The createAgentFromManifestRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAgentFromManifestWithResponseAsync(
        BinaryData createAgentFromManifestRequest1, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createAgentFromManifest(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, createAgentFromManifestRequest1,
            requestOptions, context));
    }

    /**
     * Creates an agent from a manifest.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     manifest_id: String (Required)
     *     parameter_values (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createAgentFromManifestRequest1 The createAgentFromManifestRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAgentFromManifestWithResponse(BinaryData createAgentFromManifestRequest1,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createAgentFromManifestSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, createAgentFromManifestRequest1,
            requestOptions, Context.NONE);
    }

    /**
     * Updates the agent from a manifest by adding a new version if there are any changes to the agent definition.
     * If no changes, returns the existing agent version.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     manifest_id: String (Required)
     *     parameter_values (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to update.
     * @param updateAgentFromManifestRequest1 The updateAgentFromManifestRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateAgentFromManifestWithResponseAsync(String agentName,
        BinaryData updateAgentFromManifestRequest1, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateAgentFromManifest(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, contentType, accept,
            updateAgentFromManifestRequest1, requestOptions, context));
    }

    /**
     * Updates the agent from a manifest by adding a new version if there are any changes to the agent definition.
     * If no changes, returns the existing agent version.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     manifest_id: String (Required)
     *     parameter_values (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to update.
     * @param updateAgentFromManifestRequest1 The updateAgentFromManifestRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateAgentFromManifestWithResponse(String agentName,
        BinaryData updateAgentFromManifestRequest1, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateAgentFromManifestSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, contentType, accept,
            updateAgentFromManifestRequest1, requestOptions, Context.NONE);
    }

    /**
     * Deletes an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a deleted agent Object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteAgentWithResponseAsync(String agentName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteAgent(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, accept, requestOptions, context));
    }

    /**
     * Deletes an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a deleted agent Object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteAgentWithResponse(String agentName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteAgentSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, accept, requestOptions, Context.NONE);
    }

    /**
     * Returns the list of all agents.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>kind</td><td>String</td><td>No</td><td>Filter agents by kind. If not provided, all agents are returned.
     * Allowed values: "prompt", "hosted", "container_app", "workflow".</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listAgentsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAgents(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "data"), null, null));
    }

    /**
     * Returns the list of all agents.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>kind</td><td>String</td><td>No</td><td>Filter agents by kind. If not provided, all agents are returned.
     * Allowed values: "prompt", "hosted", "container_app", "workflow".</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAgentsAsync(RequestOptions requestOptions) {
        return new PagedFlux<>(() -> listAgentsSinglePageAsync(requestOptions));
    }

    /**
     * Returns the list of all agents.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>kind</td><td>String</td><td>No</td><td>Filter agents by kind. If not provided, all agents are returned.
     * Allowed values: "prompt", "hosted", "container_app", "workflow".</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listAgentsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listAgentsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "data"), null, null);
    }

    /**
     * Returns the list of all agents.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>kind</td><td>String</td><td>No</td><td>Filter agents by kind. If not provided, all agents are returned.
     * Allowed values: "prompt", "hosted", "container_app", "workflow".</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     versions (Required): {
     *         latest (Required): {
     *             object: String (Required)
     *             id: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *             description: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             definition (Required): {
     *                 kind: String(prompt/hosted/container_app/workflow) (Required)
     *                 rai_config (Optional): {
     *                     rai_policy_name: String (Required)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAgents(RequestOptions requestOptions) {
        return new PagedIterable<>(() -> listAgentsSinglePage(requestOptions));
    }

    /**
     * Create a new agent version.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to create/modify.
     * @param createAgentVersionRequest1 The createAgentVersionRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAgentVersionWithResponseAsync(String agentName,
        BinaryData createAgentVersionRequest1, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createAgentVersion(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, contentType, accept, createAgentVersionRequest1,
            requestOptions, context));
    }

    /**
     * Create a new agent version.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to create/modify.
     * @param createAgentVersionRequest1 The createAgentVersionRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAgentVersionWithResponse(String agentName, BinaryData createAgentVersionRequest1,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createAgentVersionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, contentType, accept, createAgentVersionRequest1, requestOptions, Context.NONE);
    }

    /**
     * Create a new agent version from a manifest.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     manifest_id: String (Required)
     *     parameter_values (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to create a version for.
     * @param createAgentVersionFromManifestRequest1 The createAgentVersionFromManifestRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAgentVersionFromManifestWithResponseAsync(String agentName,
        BinaryData createAgentVersionFromManifestRequest1, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createAgentVersionFromManifest(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, contentType, accept,
            createAgentVersionFromManifestRequest1, requestOptions, context));
    }

    /**
     * Create a new agent version from a manifest.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     manifest_id: String (Required)
     *     parameter_values (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to create a version for.
     * @param createAgentVersionFromManifestRequest1 The createAgentVersionFromManifestRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAgentVersionFromManifestWithResponse(String agentName,
        BinaryData createAgentVersionFromManifestRequest1, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createAgentVersionFromManifestSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, contentType, accept,
            createAgentVersionFromManifestRequest1, requestOptions, Context.NONE);
    }

    /**
     * Retrieves a specific version of an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve.
     * @param agentVersion The version of the agent to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAgentVersionWithResponseAsync(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAgentVersion(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, agentVersion, accept, requestOptions, context));
    }

    /**
     * Retrieves a specific version of an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve.
     * @param agentVersion The version of the agent to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAgentVersionWithResponse(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAgentVersionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, agentVersion, accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes a specific version of an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to delete.
     * @param agentVersion The version of the agent to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a deleted agent version Object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteAgentVersionWithResponseAsync(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteAgentVersion(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, agentVersion, accept, requestOptions, context));
    }

    /**
     * Deletes a specific version of an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to delete.
     * @param agentVersion The version of the agent to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a deleted agent version Object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteAgentVersionWithResponse(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteAgentVersionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, agentVersion, accept, requestOptions, Context.NONE);
    }

    /**
     * Returns the list of versions of an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve versions for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listAgentVersionsSinglePageAsync(String agentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAgentVersions(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), agentName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "data"), null, null));
    }

    /**
     * Returns the list of versions of an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve versions for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAgentVersionsAsync(String agentName, RequestOptions requestOptions) {
        return new PagedFlux<>(() -> listAgentVersionsSinglePageAsync(agentName, requestOptions));
    }

    /**
     * Returns the list of versions of an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve versions for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listAgentVersionsSinglePage(String agentName, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listAgentVersionsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "data"), null, null);
    }

    /**
     * Returns the list of versions of an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     definition (Required): {
     *         kind: String(prompt/hosted/container_app/workflow) (Required)
     *         rai_config (Optional): {
     *             rai_policy_name: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent to retrieve versions for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAgentVersions(String agentName, RequestOptions requestOptions) {
        return new PagedIterable<>(() -> listAgentVersionsSinglePage(agentName, requestOptions));
    }

    /**
     * Start a container for a specific version of an agent. If the container is already running, the operation will be
     * no-op.
     * The operation is a long-running operation. Following the design guidelines for long-running operations in Azure
     * REST APIs.
     * https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     min_replicas: Integer (Optional)
     *     max_replicas: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param startAgentContainerRequest The startAgentContainerRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container operation for a specific version of an agent along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> startAgentContainerWithResponseAsync(String agentName, String agentVersion,
        BinaryData startAgentContainerRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.startAgentContainer(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, agentVersion, contentType, accept,
            startAgentContainerRequest, requestOptions, context));
    }

    /**
     * Start a container for a specific version of an agent. If the container is already running, the operation will be
     * no-op.
     * The operation is a long-running operation. Following the design guidelines for long-running operations in Azure
     * REST APIs.
     * https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     min_replicas: Integer (Optional)
     *     max_replicas: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param startAgentContainerRequest The startAgentContainerRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container operation for a specific version of an agent along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> startAgentContainerWithResponse(String agentName, String agentVersion,
        BinaryData startAgentContainerRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.startAgentContainerSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, agentVersion, contentType, accept, startAgentContainerRequest, requestOptions, Context.NONE);
    }

    /**
     * Update a container for a specific version of an agent. If the container is not running, the operation will be
     * no-op.
     * The operation is a long-running operation. Following the design guidelines for long-running operations in Azure
     * REST APIs.
     * https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     min_replicas: Integer (Optional)
     *     max_replicas: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param updateAgentContainerRequest The updateAgentContainerRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container operation for a specific version of an agent along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateAgentContainerWithResponseAsync(String agentName, String agentVersion,
        BinaryData updateAgentContainerRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateAgentContainer(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, agentVersion, contentType, accept,
            updateAgentContainerRequest, requestOptions, context));
    }

    /**
     * Update a container for a specific version of an agent. If the container is not running, the operation will be
     * no-op.
     * The operation is a long-running operation. Following the design guidelines for long-running operations in Azure
     * REST APIs.
     * https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     min_replicas: Integer (Optional)
     *     max_replicas: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param updateAgentContainerRequest The updateAgentContainerRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container operation for a specific version of an agent along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateAgentContainerWithResponse(String agentName, String agentVersion,
        BinaryData updateAgentContainerRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateAgentContainerSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, agentVersion, contentType, accept, updateAgentContainerRequest, requestOptions, Context.NONE);
    }

    /**
     * Stop a container for a specific version of an agent. If the container is not running, or already stopped, the
     * operation will be no-op.
     * The operation is a long-running operation. Following the design guidelines for long-running operations in Azure
     * REST APIs.
     * https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container operation for a specific version of an agent along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopAgentContainerWithResponseAsync(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.stopAgentContainer(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, agentVersion, accept, requestOptions, context));
    }

    /**
     * Stop a container for a specific version of an agent. If the container is not running, or already stopped, the
     * operation will be no-op.
     * The operation is a long-running operation. Following the design guidelines for long-running operations in Azure
     * REST APIs.
     * https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container operation for a specific version of an agent along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> stopAgentContainerWithResponse(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.stopAgentContainerSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, agentVersion, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete a container for a specific version of an agent. If the container doesn't exist, the operation will be
     * no-op.
     * The operation is a long-running operation. Following the design guidelines for long-running operations in Azure
     * REST APIs.
     * https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container operation for a specific version of an agent along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteAgentContainerWithResponseAsync(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteAgentContainer(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, agentVersion, accept, requestOptions, context));
    }

    /**
     * Delete a container for a specific version of an agent. If the container doesn't exist, the operation will be
     * no-op.
     * The operation is a long-running operation. Following the design guidelines for long-running operations in Azure
     * REST APIs.
     * https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container operation for a specific version of an agent along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteAgentContainerWithResponse(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteAgentContainerSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, agentVersion, accept, requestOptions, Context.NONE);
    }

    /**
     * Get a container for a specific version of an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *     max_replicas: Integer (Optional)
     *     min_replicas: Integer (Optional)
     *     error_message: String (Optional)
     *     created_at: OffsetDateTime (Required)
     *     updated_at: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a container for a specific version of an agent along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAgentContainerWithResponseAsync(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAgentContainer(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, agentVersion, accept, requestOptions, context));
    }

    /**
     * Get a container for a specific version of an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *     max_replicas: Integer (Optional)
     *     min_replicas: Integer (Optional)
     *     error_message: String (Optional)
     *     created_at: OffsetDateTime (Required)
     *     updated_at: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a container for a specific version of an agent along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAgentContainerWithResponse(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAgentContainerSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            agentName, agentVersion, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the status of a container operation for an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param operationId The operation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a container operation for an agent along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAgentContainerOperationWithResponseAsync(String agentName, String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAgentContainerOperation(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, operationId, accept, requestOptions, context));
    }

    /**
     * Get the status of a container operation for an agent.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param operationId The operation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a container operation for an agent along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAgentContainerOperationWithResponse(String agentName, String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAgentContainerOperationSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, operationId, accept, requestOptions, Context.NONE);
    }

    /**
     * List container operations for an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listAgentContainerOperationsSinglePageAsync(String agentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAgentContainerOperations(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), agentName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "data"), null, null));
    }

    /**
     * List container operations for an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAgentContainerOperationsAsync(String agentName, RequestOptions requestOptions) {
        return new PagedFlux<>(() -> listAgentContainerOperationsSinglePageAsync(agentName, requestOptions));
    }

    /**
     * List container operations for an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listAgentContainerOperationsSinglePage(String agentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listAgentContainerOperationsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "data"), null, null);
    }

    /**
     * List container operations for an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAgentContainerOperations(String agentName, RequestOptions requestOptions) {
        return new PagedIterable<>(() -> listAgentContainerOperationsSinglePage(agentName, requestOptions));
    }

    /**
     * List container operations for a specific version of an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listAgentVersionContainerOperationsSinglePageAsync(String agentName,
        String agentVersion, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAgentVersionContainerOperations(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), agentName, agentVersion, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "data"), null, null));
    }

    /**
     * List container operations for a specific version of an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAgentVersionContainerOperationsAsync(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        return new PagedFlux<>(
            () -> listAgentVersionContainerOperationsSinglePageAsync(agentName, agentVersion, requestOptions));
    }

    /**
     * List container operations for a specific version of an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listAgentVersionContainerOperationsSinglePage(String agentName,
        String agentVersion, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listAgentVersionContainerOperationsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), agentName, agentVersion, accept, requestOptions,
            Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "data"), null, null);
    }

    /**
     * List container operations for a specific version of an agent.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     agent_id: String (Required)
     *     agent_version_id: String (Required)
     *     status: String(NotStarted/InProgress/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         type: String (Required)
     *         message: String (Required)
     *     }
     *     container (Optional): {
     *         object: String (Required)
     *         status: String(Starting/Running/Stopping/Stopped/Failed/Deleting/Deleted/Updating) (Required)
     *         max_replicas: Integer (Optional)
     *         min_replicas: Integer (Optional)
     *         error_message: String (Optional)
     *         created_at: OffsetDateTime (Required)
     *         updated_at: OffsetDateTime (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param agentName The name of the agent.
     * @param agentVersion The version of the agent.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAgentVersionContainerOperations(String agentName, String agentVersion,
        RequestOptions requestOptions) {
        return new PagedIterable<>(
            () -> listAgentVersionContainerOperationsSinglePage(agentName, agentVersion, requestOptions));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
