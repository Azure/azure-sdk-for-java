// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Combine multiple filters using `and` or `or`.
 */
@Immutable
public final class CompoundFilter implements JsonSerializable<CompoundFilter> {

    /*
     * Type of operation: `and` or `or`.
     */
    @Generated
    private final CompoundFilterType type;

    /*
     * Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.
     */
    @Generated
    private final List<BinaryData> filters;

    /**
     * Creates an instance of CompoundFilter class.
     *
     * @param type the type value to set.
     * @param filters the filters value to set.
     */
    @Generated
    public CompoundFilter(CompoundFilterType type, List<BinaryData> filters) {
        this.type = type;
        this.filters = filters;
    }

    /**
     * Get the type property: Type of operation: `and` or `or`.
     *
     * @return the type value.
     */
    @Generated
    public CompoundFilterType getType() {
        return this.type;
    }

    /**
     * Get the filters property: Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.
     *
     * @return the filters value.
     */
    @Generated
    public List<BinaryData> getFilters() {
        return this.filters;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("filters", this.filters,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CompoundFilter from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CompoundFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CompoundFilter.
     */
    @Generated
    public static CompoundFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CompoundFilterType type = null;
            List<BinaryData> filters = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    type = CompoundFilterType.fromString(reader.getString());
                } else if ("filters".equals(fieldName)) {
                    filters = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else {
                    reader.skipChildren();
                }
            }
            return new CompoundFilter(type, filters);
        });
    }
}
