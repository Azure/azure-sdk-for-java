// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AgentObjectVersions model.
 */
@Immutable
public final class AgentObjectVersions implements JsonSerializable<AgentObjectVersions> {

    /*
     * The latest property.
     */
    @Generated
    private final AgentVersionObject latest;

    /**
     * Creates an instance of AgentObjectVersions class.
     *
     * @param latest the latest value to set.
     */
    @Generated
    private AgentObjectVersions(AgentVersionObject latest) {
        this.latest = latest;
    }

    /**
     * Get the latest property: The latest property.
     *
     * @return the latest value.
     */
    @Generated
    public AgentVersionObject getLatest() {
        return this.latest;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("latest", this.latest);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentObjectVersions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentObjectVersions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentObjectVersions.
     */
    @Generated
    public static AgentObjectVersions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentVersionObject latest = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("latest".equals(fieldName)) {
                    latest = AgentVersionObject.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new AgentObjectVersions(latest);
        });
    }
}
