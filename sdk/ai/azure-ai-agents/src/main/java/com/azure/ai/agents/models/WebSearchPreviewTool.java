// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Note: web_search is not yet available via Azure OpenAI.
 */
@Fluent
public final class WebSearchPreviewTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.WEB_SEARCH_PREVIEW;

    /*
     * The user's location.
     */
    @Generated
    private Location userLocation;

    /*
     * High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or
     * `high`. `medium` is the default.
     */
    @Generated
    private WebSearchPreviewToolSearchContextSize searchContextSize;

    /**
     * Creates an instance of WebSearchPreviewTool class.
     */
    @Generated
    public WebSearchPreviewTool() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the userLocation property: The user's location.
     *
     * @return the userLocation value.
     */
    @Generated
    public Location getUserLocation() {
        return this.userLocation;
    }

    /**
     * Set the userLocation property: The user's location.
     *
     * @param userLocation the userLocation value to set.
     * @return the WebSearchPreviewTool object itself.
     */
    @Generated
    public WebSearchPreviewTool setUserLocation(Location userLocation) {
        this.userLocation = userLocation;
        return this;
    }

    /**
     * Get the searchContextSize property: High level guidance for the amount of context window space to use for the
     * search. One of `low`, `medium`, or `high`. `medium` is the default.
     *
     * @return the searchContextSize value.
     */
    @Generated
    public WebSearchPreviewToolSearchContextSize getSearchContextSize() {
        return this.searchContextSize;
    }

    /**
     * Set the searchContextSize property: High level guidance for the amount of context window space to use for the
     * search. One of `low`, `medium`, or `high`. `medium` is the default.
     *
     * @param searchContextSize the searchContextSize value to set.
     * @return the WebSearchPreviewTool object itself.
     */
    @Generated
    public WebSearchPreviewTool setSearchContextSize(WebSearchPreviewToolSearchContextSize searchContextSize) {
        this.searchContextSize = searchContextSize;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("user_location", this.userLocation);
        jsonWriter.writeStringField("search_context_size",
            this.searchContextSize == null ? null : this.searchContextSize.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebSearchPreviewTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebSearchPreviewTool if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebSearchPreviewTool.
     */
    @Generated
    public static WebSearchPreviewTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebSearchPreviewTool deserializedWebSearchPreviewTool = new WebSearchPreviewTool();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedWebSearchPreviewTool.type = ToolType.fromString(reader.getString());
                } else if ("user_location".equals(fieldName)) {
                    deserializedWebSearchPreviewTool.userLocation = Location.fromJson(reader);
                } else if ("search_context_size".equals(fieldName)) {
                    deserializedWebSearchPreviewTool.searchContextSize
                        = WebSearchPreviewToolSearchContextSize.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWebSearchPreviewTool;
        });
    }
}
