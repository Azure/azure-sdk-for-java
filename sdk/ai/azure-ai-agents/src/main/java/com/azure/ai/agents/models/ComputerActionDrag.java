// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A drag action.
 */
@Immutable
public final class ComputerActionDrag extends ComputerAction {

    /*
     * The type property.
     */
    @Generated
    private ComputerActionType type = ComputerActionType.DRAG;

    /*
     * An array of coordinates representing the path of the drag action. Coordinates will appear as an array
     * of objects, eg
     * ```
     * [
     * { x: 100, y: 200 },
     * { x: 200, y: 300 }
     * ]
     * ```
     */
    @Generated
    private final List<Coordinate> path;

    /**
     * Creates an instance of ComputerActionDrag class.
     *
     * @param path the path value to set.
     */
    @Generated
    public ComputerActionDrag(List<Coordinate> path) {
        this.path = path;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ComputerActionType getType() {
        return this.type;
    }

    /**
     * Get the path property: An array of coordinates representing the path of the drag action. Coordinates will appear
     * as an array
     * of objects, eg
     * ```
     * [
     * { x: 100, y: 200 },
     * { x: 200, y: 300 }
     * ]
     * ```.
     *
     * @return the path value.
     */
    @Generated
    public List<Coordinate> getPath() {
        return this.path;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("path", this.path, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputerActionDrag from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputerActionDrag if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComputerActionDrag.
     */
    @Generated
    public static ComputerActionDrag fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<Coordinate> path = null;
            ComputerActionType type = ComputerActionType.DRAG;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("path".equals(fieldName)) {
                    path = reader.readArray(reader1 -> Coordinate.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = ComputerActionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ComputerActionDrag deserializedComputerActionDrag = new ComputerActionDrag(path);
            deserializedComputerActionDrag.type = type;
            return deserializedComputerActionDrag;
        });
    }
}
