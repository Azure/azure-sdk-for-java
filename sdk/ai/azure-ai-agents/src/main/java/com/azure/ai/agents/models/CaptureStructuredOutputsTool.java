// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * A tool for capturing structured outputs.
 */
@Immutable
public final class CaptureStructuredOutputsTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.CAPTURE_STRUCTURED_OUTPUTS;

    /*
     * Set of structured outputs to capture from the model.
     */
    @Generated
    private final Map<String, StructuredOutputDefinition> outputs;

    /**
     * Creates an instance of CaptureStructuredOutputsTool class.
     *
     * @param outputs the outputs value to set.
     */
    @Generated
    public CaptureStructuredOutputsTool(Map<String, StructuredOutputDefinition> outputs) {
        this.outputs = outputs;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the outputs property: Set of structured outputs to capture from the model.
     *
     * @return the outputs value.
     */
    @Generated
    public Map<String, StructuredOutputDefinition> getOutputs() {
        return this.outputs;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("outputs", this.outputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CaptureStructuredOutputsTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CaptureStructuredOutputsTool if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CaptureStructuredOutputsTool.
     */
    @Generated
    public static CaptureStructuredOutputsTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, StructuredOutputDefinition> outputs = null;
            ToolType type = ToolType.CAPTURE_STRUCTURED_OUTPUTS;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("outputs".equals(fieldName)) {
                    outputs = reader.readMap(reader1 -> StructuredOutputDefinition.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = ToolType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CaptureStructuredOutputsTool deserializedCaptureStructuredOutputsTool
                = new CaptureStructuredOutputsTool(outputs);
            deserializedCaptureStructuredOutputsTool.type = type;
            return deserializedCaptureStructuredOutputsTool;
        });
    }
}
