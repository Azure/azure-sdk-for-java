// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Memory search options.
 */
@Fluent
public final class MemorySearchOptions implements JsonSerializable<MemorySearchOptions> {

    /*
     * Maximum number of memory items to return.
     */
    @Generated
    private Integer maxMemories;

    /**
     * Creates an instance of MemorySearchOptions class.
     */
    @Generated
    public MemorySearchOptions() {
    }

    /**
     * Get the maxMemories property: Maximum number of memory items to return.
     *
     * @return the maxMemories value.
     */
    @Generated
    public Integer getMaxMemories() {
        return this.maxMemories;
    }

    /**
     * Set the maxMemories property: Maximum number of memory items to return.
     *
     * @param maxMemories the maxMemories value to set.
     * @return the MemorySearchOptions object itself.
     */
    @Generated
    public MemorySearchOptions setMaxMemories(Integer maxMemories) {
        this.maxMemories = maxMemories;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("max_memories", this.maxMemories);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemorySearchOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemorySearchOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MemorySearchOptions.
     */
    @Generated
    public static MemorySearchOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MemorySearchOptions deserializedMemorySearchOptions = new MemorySearchOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("max_memories".equals(fieldName)) {
                    deserializedMemorySearchOptions.maxMemories = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedMemorySearchOptions;
        });
    }
}
