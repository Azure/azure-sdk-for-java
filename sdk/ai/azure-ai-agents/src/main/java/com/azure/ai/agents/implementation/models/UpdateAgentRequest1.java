// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.implementation.models;

import com.azure.ai.agents.models.AgentDefinition;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The UpdateAgentRequest1 model.
 */
@Fluent
public final class UpdateAgentRequest1 implements JsonSerializable<UpdateAgentRequest1> {

    /*
     * A human-readable description of the agent.
     */
    @Generated
    private String description;

    /*
     * Arbitrary key-value metadata to associate with the agent.
     */
    @Generated
    private Map<String, String> metadata;

    /*
     * The agent definition. This can be a workflow, hosted agent, or a simple agent definition.
     */
    @Generated
    private final AgentDefinition definition;

    /**
     * Creates an instance of UpdateAgentRequest1 class.
     *
     * @param definition the definition value to set.
     */
    @Generated
    public UpdateAgentRequest1(AgentDefinition definition) {
        this.definition = definition;
    }

    /**
     * Get the description property: A human-readable description of the agent.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: A human-readable description of the agent.
     *
     * @param description the description value to set.
     * @return the UpdateAgentRequest1 object itself.
     */
    @Generated
    public UpdateAgentRequest1 setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the metadata property: Arbitrary key-value metadata to associate with the agent.
     *
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Arbitrary key-value metadata to associate with the agent.
     *
     * @param metadata the metadata value to set.
     * @return the UpdateAgentRequest1 object itself.
     */
    @Generated
    public UpdateAgentRequest1 setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the definition property: The agent definition. This can be a workflow, hosted agent, or a simple agent
     * definition.
     *
     * @return the definition value.
     */
    @Generated
    public AgentDefinition getDefinition() {
        return this.definition;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("definition", this.definition);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateAgentRequest1 from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateAgentRequest1 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateAgentRequest1.
     */
    @Generated
    public static UpdateAgentRequest1 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentDefinition definition = null;
            String description = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("definition".equals(fieldName)) {
                    definition = AgentDefinition.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            UpdateAgentRequest1 deserializedUpdateAgentRequest1 = new UpdateAgentRequest1(definition);
            deserializedUpdateAgentRequest1.description = description;
            deserializedUpdateAgentRequest1.metadata = metadata;
            return deserializedUpdateAgentRequest1;
        });
    }
}
