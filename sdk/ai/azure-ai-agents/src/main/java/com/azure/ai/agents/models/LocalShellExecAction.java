// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Execute a shell command on the server.
 */
@Fluent
public final class LocalShellExecAction implements JsonSerializable<LocalShellExecAction> {

    /*
     * The type of the local shell action. Always `exec`.
     */
    @Generated
    private final String type = "exec";

    /*
     * The command to run.
     */
    @Generated
    private final List<String> command;

    /*
     * Optional timeout in milliseconds for the command.
     */
    @Generated
    private Integer timeoutMs;

    /*
     * Optional working directory to run the command in.
     */
    @Generated
    private String workingDirectory;

    /*
     * Environment variables to set for the command.
     */
    @Generated
    private final Map<String, String> env;

    /*
     * Optional user to run the command as.
     */
    @Generated
    private String user;

    /**
     * Creates an instance of LocalShellExecAction class.
     *
     * @param command the command value to set.
     * @param env the env value to set.
     */
    @Generated
    public LocalShellExecAction(List<String> command, Map<String, String> env) {
        this.command = command;
        this.env = env;
    }

    /**
     * Get the type property: The type of the local shell action. Always `exec`.
     *
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the command property: The command to run.
     *
     * @return the command value.
     */
    @Generated
    public List<String> getCommand() {
        return this.command;
    }

    /**
     * Get the timeoutMs property: Optional timeout in milliseconds for the command.
     *
     * @return the timeoutMs value.
     */
    @Generated
    public Integer getTimeoutMs() {
        return this.timeoutMs;
    }

    /**
     * Set the timeoutMs property: Optional timeout in milliseconds for the command.
     *
     * @param timeoutMs the timeoutMs value to set.
     * @return the LocalShellExecAction object itself.
     */
    @Generated
    public LocalShellExecAction setTimeoutMs(Integer timeoutMs) {
        this.timeoutMs = timeoutMs;
        return this;
    }

    /**
     * Get the workingDirectory property: Optional working directory to run the command in.
     *
     * @return the workingDirectory value.
     */
    @Generated
    public String getWorkingDirectory() {
        return this.workingDirectory;
    }

    /**
     * Set the workingDirectory property: Optional working directory to run the command in.
     *
     * @param workingDirectory the workingDirectory value to set.
     * @return the LocalShellExecAction object itself.
     */
    @Generated
    public LocalShellExecAction setWorkingDirectory(String workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }

    /**
     * Get the env property: Environment variables to set for the command.
     *
     * @return the env value.
     */
    @Generated
    public Map<String, String> getEnv() {
        return this.env;
    }

    /**
     * Get the user property: Optional user to run the command as.
     *
     * @return the user value.
     */
    @Generated
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: Optional user to run the command as.
     *
     * @param user the user value to set.
     * @return the LocalShellExecAction object itself.
     */
    @Generated
    public LocalShellExecAction setUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("command", this.command, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("env", this.env, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("timeout_ms", this.timeoutMs);
        jsonWriter.writeStringField("working_directory", this.workingDirectory);
        jsonWriter.writeStringField("user", this.user);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalShellExecAction from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalShellExecAction if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LocalShellExecAction.
     */
    @Generated
    public static LocalShellExecAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> command = null;
            Map<String, String> env = null;
            Integer timeoutMs = null;
            String workingDirectory = null;
            String user = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("command".equals(fieldName)) {
                    command = reader.readArray(reader1 -> reader1.getString());
                } else if ("env".equals(fieldName)) {
                    env = reader.readMap(reader1 -> reader1.getString());
                } else if ("timeout_ms".equals(fieldName)) {
                    timeoutMs = reader.getNullable(JsonReader::getInt);
                } else if ("working_directory".equals(fieldName)) {
                    workingDirectory = reader.getString();
                } else if ("user".equals(fieldName)) {
                    user = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            LocalShellExecAction deserializedLocalShellExecAction = new LocalShellExecAction(command, env);
            deserializedLocalShellExecAction.timeoutMs = timeoutMs;
            deserializedLocalShellExecAction.workingDirectory = workingDirectory;
            deserializedLocalShellExecAction.user = user;
            return deserializedLocalShellExecAction;
        });
    }
}
