// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.agents;

import com.azure.ai.agents.implementation.OpenAIJsonHelper;
import com.azure.ai.agents.models.AgentReference;
import com.azure.core.annotation.ServiceClient;
import com.openai.client.OpenAIClientAsync;
import com.openai.core.JsonValue;
import com.openai.models.responses.Response;
import com.openai.models.responses.ResponseCreateParams;
import com.openai.services.async.ResponseServiceAsync;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Initializes a new instance of the asynchronous AgentsClient type.
 */
@ServiceClient(builder = AgentsClientBuilder.class, isAsync = true)
public final class ResponsesAsyncClient {
    private final ResponseServiceAsync openAIResponsesClientAsync;

    /**
     * Initializes an instance of ResponsesAsyncClient class using the official OpenAI client library.
     *
     * @param openAIClientAsync the OpenAI async client.
     */
    ResponsesAsyncClient(OpenAIClientAsync openAIClientAsync) {
        this.openAIResponsesClientAsync = openAIClientAsync.responses();
    }

    /**
     * Get the OpenAI client for responses.
     *
     * @return the OpenAI response service client.
     */
    public ResponseServiceAsync getOpenAIClient() {
        return this.openAIResponsesClientAsync;
    }

    /**
     * Creates a response with an agent conversation.
     *
     * @param agentReference The agent reference.
     * @param conversationId The conversation ID.
     * @param params The parameters to create the response.
     * @return A Mono that emits the created Response.
     */
    public Mono<Response> createWithAgentConversation(AgentReference agentReference, String conversationId,
        ResponseCreateParams.Builder params) {
        Objects.requireNonNull(agentReference, "agentReference cannot be null");
        Objects.requireNonNull(conversationId, "conversationId cannot be null");
        Objects.requireNonNull(params, "params cannot be null");

        JsonValue agentRefJsonValue = OpenAIJsonHelper.toJsonValue(agentReference);

        Map<String, JsonValue> additionalBodyProperties = new HashMap<>();
        params.conversation(conversationId);
        additionalBodyProperties.put("agent", agentRefJsonValue);

        params.additionalBodyProperties(additionalBodyProperties);
        return Mono.fromFuture(this.openAIResponsesClientAsync.create(params.build()));
    }
}
