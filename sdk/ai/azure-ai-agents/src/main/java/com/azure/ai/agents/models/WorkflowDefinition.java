// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The workflow specification in CPSDL format.
 */
@Fluent
public final class WorkflowDefinition extends AgentDefinition {

    /*
     * The kind property.
     */
    @Generated
    private AgentKind kind = AgentKind.WORKFLOW;

    /*
     * The trigger property.
     */
    @Generated
    private Map<String, BinaryData> trigger;

    /**
     * Creates an instance of WorkflowDefinition class.
     */
    @Generated
    public WorkflowDefinition() {
    }

    /**
     * Get the kind property: The kind property.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public AgentKind getKind() {
        return this.kind;
    }

    /**
     * Get the trigger property: The trigger property.
     *
     * @return the trigger value.
     */
    @Generated
    public Map<String, BinaryData> getTrigger() {
        return this.trigger;
    }

    /**
     * Set the trigger property: The trigger property.
     *
     * @param trigger the trigger value to set.
     * @return the WorkflowDefinition object itself.
     */
    @Generated
    public WorkflowDefinition setTrigger(Map<String, BinaryData> trigger) {
        this.trigger = trigger;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WorkflowDefinition setRaiConfig(RaiConfig raiConfig) {
        super.setRaiConfig(raiConfig);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("rai_config", getRaiConfig());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeMapField("trigger", this.trigger,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkflowDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkflowDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkflowDefinition.
     */
    @Generated
    public static WorkflowDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkflowDefinition deserializedWorkflowDefinition = new WorkflowDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("rai_config".equals(fieldName)) {
                    deserializedWorkflowDefinition.setRaiConfig(RaiConfig.fromJson(reader));
                } else if ("kind".equals(fieldName)) {
                    deserializedWorkflowDefinition.kind = AgentKind.fromString(reader.getString());
                } else if ("trigger".equals(fieldName)) {
                    Map<String, BinaryData> trigger = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedWorkflowDefinition.trigger = trigger;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWorkflowDefinition;
        });
    }
}
