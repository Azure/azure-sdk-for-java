// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The image-based deployment definition for a hosted agent.
 */
@Fluent
public final class ImageBasedHostedAgentDefinition extends HostedAgentDefinition {

    /*
     * The kind property.
     */
    @Generated
    private AgentKind kind = AgentKind.HOSTED;

    /*
     * The image for the hosted agent.
     */
    @Generated
    private final String image;

    /**
     * Creates an instance of ImageBasedHostedAgentDefinition class.
     *
     * @param containerProtocolVersions the containerProtocolVersions value to set.
     * @param cpu the cpu value to set.
     * @param memory the memory value to set.
     * @param image the image value to set.
     */
    @Generated
    public ImageBasedHostedAgentDefinition(List<ProtocolVersionRecord> containerProtocolVersions, String cpu,
        String memory, String image) {
        super(containerProtocolVersions, cpu, memory);
        this.image = image;
    }

    /**
     * Get the kind property: The kind property.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public AgentKind getKind() {
        return this.kind;
    }

    /**
     * Get the image property: The image for the hosted agent.
     *
     * @return the image value.
     */
    @Generated
    public String getImage() {
        return this.image;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ImageBasedHostedAgentDefinition setEnvironmentVariables(Map<String, String> environmentVariables) {
        super.setEnvironmentVariables(environmentVariables);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ImageBasedHostedAgentDefinition setRaiConfig(RaiConfig raiConfig) {
        super.setRaiConfig(raiConfig);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("container_protocol_versions", getContainerProtocolVersions(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("cpu", getCpu());
        jsonWriter.writeStringField("memory", getMemory());
        jsonWriter.writeJsonField("rai_config", getRaiConfig());
        jsonWriter.writeArrayField("tools", getTools(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("environment_variables", getEnvironmentVariables(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("image", this.image);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageBasedHostedAgentDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageBasedHostedAgentDefinition if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageBasedHostedAgentDefinition.
     */
    @Generated
    public static ImageBasedHostedAgentDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ProtocolVersionRecord> containerProtocolVersions = null;
            String cpu = null;
            String memory = null;
            RaiConfig raiConfig = null;
            List<Tool> tools = null;
            Map<String, String> environmentVariables = null;
            String image = null;
            AgentKind kind = AgentKind.HOSTED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("container_protocol_versions".equals(fieldName)) {
                    containerProtocolVersions = reader.readArray(reader1 -> ProtocolVersionRecord.fromJson(reader1));
                } else if ("cpu".equals(fieldName)) {
                    cpu = reader.getString();
                } else if ("memory".equals(fieldName)) {
                    memory = reader.getString();
                } else if ("rai_config".equals(fieldName)) {
                    raiConfig = RaiConfig.fromJson(reader);
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> Tool.fromJson(reader1));
                } else if ("environment_variables".equals(fieldName)) {
                    environmentVariables = reader.readMap(reader1 -> reader1.getString());
                } else if ("image".equals(fieldName)) {
                    image = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = AgentKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ImageBasedHostedAgentDefinition deserializedImageBasedHostedAgentDefinition
                = new ImageBasedHostedAgentDefinition(containerProtocolVersions, cpu, memory, image);
            deserializedImageBasedHostedAgentDefinition.setRaiConfig(raiConfig);
            deserializedImageBasedHostedAgentDefinition.setTools(tools);
            deserializedImageBasedHostedAgentDefinition.setEnvironmentVariables(environmentVariables);
            deserializedImageBasedHostedAgentDefinition.kind = kind;
            return deserializedImageBasedHostedAgentDefinition;
        });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ImageBasedHostedAgentDefinition setTools(List<Tool> tools) {
        super.setTools(tools);
        return this;
    }
}
