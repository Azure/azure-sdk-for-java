// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A tool available on an MCP server.
 */
@Fluent
public final class MCPListToolsTool implements JsonSerializable<MCPListToolsTool> {

    /*
     * The name of the tool.
     */
    @Generated
    private final String name;

    /*
     * The description of the tool.
     */
    @Generated
    private String description;

    /*
     * The JSON schema describing the tool's input.
     */
    @Generated
    private final BinaryData inputSchema;

    /*
     * Additional annotations about the tool.
     */
    @Generated
    private BinaryData annotations;

    /**
     * Creates an instance of MCPListToolsTool class.
     *
     * @param name the name value to set.
     * @param inputSchema the inputSchema value to set.
     */
    @Generated
    public MCPListToolsTool(String name, BinaryData inputSchema) {
        this.name = name;
        this.inputSchema = inputSchema;
    }

    /**
     * Get the name property: The name of the tool.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: The description of the tool.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the tool.
     *
     * @param description the description value to set.
     * @return the MCPListToolsTool object itself.
     */
    @Generated
    public MCPListToolsTool setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the inputSchema property: The JSON schema describing the tool's input.
     *
     * @return the inputSchema value.
     */
    @Generated
    public BinaryData getInputSchema() {
        return this.inputSchema;
    }

    /**
     * Get the annotations property: Additional annotations about the tool.
     *
     * @return the annotations value.
     */
    @Generated
    public BinaryData getAnnotations() {
        return this.annotations;
    }

    /**
     * Set the annotations property: Additional annotations about the tool.
     *
     * @param annotations the annotations value to set.
     * @return the MCPListToolsTool object itself.
     */
    @Generated
    public MCPListToolsTool setAnnotations(BinaryData annotations) {
        this.annotations = annotations;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeFieldName("input_schema");
        this.inputSchema.writeTo(jsonWriter);
        jsonWriter.writeStringField("description", this.description);
        if (this.annotations != null) {
            jsonWriter.writeFieldName("annotations");
            this.annotations.writeTo(jsonWriter);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPListToolsTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPListToolsTool if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MCPListToolsTool.
     */
    @Generated
    public static MCPListToolsTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            BinaryData inputSchema = null;
            String description = null;
            BinaryData annotations = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("input_schema".equals(fieldName)) {
                    inputSchema
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("annotations".equals(fieldName)) {
                    annotations
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            MCPListToolsTool deserializedMCPListToolsTool = new MCPListToolsTool(name, inputSchema);
            deserializedMCPListToolsTool.description = description;
            deserializedMCPListToolsTool.annotations = annotations;
            return deserializedMCPListToolsTool;
        });
    }
}
