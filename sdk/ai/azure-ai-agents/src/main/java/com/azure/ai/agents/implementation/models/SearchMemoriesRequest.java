// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.implementation.models;

import com.azure.ai.agents.models.ItemParam;
import com.azure.ai.agents.models.MemorySearchOptions;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SearchMemoriesRequest model.
 */
@Fluent
public final class SearchMemoriesRequest implements JsonSerializable<SearchMemoriesRequest> {

    /*
     * The namespace that logically groups and isolates memories, such as a user ID.
     */
    @Generated
    private final String scope;

    /*
     * The conversation ID for which to search memories. Only one of conversation_id or items should be provided.
     */
    @Generated
    private String conversationId;

    /*
     * Items for which to search for relevant memories. Only one of conversation_id or items should be provided.
     */
    @Generated
    private List<ItemParam> items;

    /*
     * The unique ID of the previous search request, enabling incremental memory search from where the last operation
     * left off. Cannot be used together with conversation_id.
     */
    @Generated
    private String previousSearchId;

    /*
     * Memory search options.
     */
    @Generated
    private MemorySearchOptions options;

    /**
     * Creates an instance of SearchMemoriesRequest class.
     *
     * @param scope the scope value to set.
     */
    @Generated
    public SearchMemoriesRequest(String scope) {
        this.scope = scope;
    }

    /**
     * Get the scope property: The namespace that logically groups and isolates memories, such as a user ID.
     *
     * @return the scope value.
     */
    @Generated
    public String getScope() {
        return this.scope;
    }

    /**
     * Get the conversationId property: The conversation ID for which to search memories. Only one of conversation_id or
     * items should be provided.
     *
     * @return the conversationId value.
     */
    @Generated
    public String getConversationId() {
        return this.conversationId;
    }

    /**
     * Set the conversationId property: The conversation ID for which to search memories. Only one of conversation_id or
     * items should be provided.
     *
     * @param conversationId the conversationId value to set.
     * @return the SearchMemoriesRequest object itself.
     */
    @Generated
    public SearchMemoriesRequest setConversationId(String conversationId) {
        this.conversationId = conversationId;
        return this;
    }

    /**
     * Get the items property: Items for which to search for relevant memories. Only one of conversation_id or items
     * should be provided.
     *
     * @return the items value.
     */
    @Generated
    public List<ItemParam> getItems() {
        return this.items;
    }

    /**
     * Set the items property: Items for which to search for relevant memories. Only one of conversation_id or items
     * should be provided.
     *
     * @param items the items value to set.
     * @return the SearchMemoriesRequest object itself.
     */
    @Generated
    public SearchMemoriesRequest setItems(List<ItemParam> items) {
        this.items = items;
        return this;
    }

    /**
     * Get the previousSearchId property: The unique ID of the previous search request, enabling incremental memory
     * search from where the last operation left off. Cannot be used together with conversation_id.
     *
     * @return the previousSearchId value.
     */
    @Generated
    public String getPreviousSearchId() {
        return this.previousSearchId;
    }

    /**
     * Set the previousSearchId property: The unique ID of the previous search request, enabling incremental memory
     * search from where the last operation left off. Cannot be used together with conversation_id.
     *
     * @param previousSearchId the previousSearchId value to set.
     * @return the SearchMemoriesRequest object itself.
     */
    @Generated
    public SearchMemoriesRequest setPreviousSearchId(String previousSearchId) {
        this.previousSearchId = previousSearchId;
        return this;
    }

    /**
     * Get the options property: Memory search options.
     *
     * @return the options value.
     */
    @Generated
    public MemorySearchOptions getOptions() {
        return this.options;
    }

    /**
     * Set the options property: Memory search options.
     *
     * @param options the options value to set.
     * @return the SearchMemoriesRequest object itself.
     */
    @Generated
    public SearchMemoriesRequest setOptions(MemorySearchOptions options) {
        this.options = options;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("conversation_id", this.conversationId);
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("previous_search_id", this.previousSearchId);
        jsonWriter.writeJsonField("options", this.options);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchMemoriesRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchMemoriesRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchMemoriesRequest.
     */
    @Generated
    public static SearchMemoriesRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String scope = null;
            String conversationId = null;
            List<ItemParam> items = null;
            String previousSearchId = null;
            MemorySearchOptions options = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("scope".equals(fieldName)) {
                    scope = reader.getString();
                } else if ("conversation_id".equals(fieldName)) {
                    conversationId = reader.getString();
                } else if ("items".equals(fieldName)) {
                    items = reader.readArray(reader1 -> ItemParam.fromJson(reader1));
                } else if ("previous_search_id".equals(fieldName)) {
                    previousSearchId = reader.getString();
                } else if ("options".equals(fieldName)) {
                    options = MemorySearchOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            SearchMemoriesRequest deserializedSearchMemoriesRequest = new SearchMemoriesRequest(scope);
            deserializedSearchMemoriesRequest.conversationId = conversationId;
            deserializedSearchMemoriesRequest.items = items;
            deserializedSearchMemoriesRequest.previousSearchId = previousSearchId;
            deserializedSearchMemoriesRequest.options = options;
            return deserializedSearchMemoriesRequest;
        });
    }
}
