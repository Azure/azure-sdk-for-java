// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Memory search response.
 */
@Immutable
public final class MemoryStoreSearchResponse implements JsonSerializable<MemoryStoreSearchResponse> {

    /*
     * The unique ID of this search request. Use this value as previous_search_id in subsequent requests to perform
     * incremental searches.
     */
    @Generated
    private final String searchId;

    /*
     * Related memory items found during the search operation.
     */
    @Generated
    private final List<MemorySearchItem> memories;

    /*
     * Usage statistics associated with the memory search operation.
     */
    @Generated
    private final MemoryStoreOperationUsage usage;

    /**
     * Creates an instance of MemoryStoreSearchResponse class.
     *
     * @param searchId the searchId value to set.
     * @param memories the memories value to set.
     * @param usage the usage value to set.
     */
    @Generated
    private MemoryStoreSearchResponse(String searchId, List<MemorySearchItem> memories,
        MemoryStoreOperationUsage usage) {
        this.searchId = searchId;
        this.memories = memories;
        this.usage = usage;
    }

    /**
     * Get the searchId property: The unique ID of this search request. Use this value as previous_search_id in
     * subsequent requests to perform incremental searches.
     *
     * @return the searchId value.
     */
    @Generated
    public String getSearchId() {
        return this.searchId;
    }

    /**
     * Get the memories property: Related memory items found during the search operation.
     *
     * @return the memories value.
     */
    @Generated
    public List<MemorySearchItem> getMemories() {
        return this.memories;
    }

    /**
     * Get the usage property: Usage statistics associated with the memory search operation.
     *
     * @return the usage value.
     */
    @Generated
    public MemoryStoreOperationUsage getUsage() {
        return this.usage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("search_id", this.searchId);
        jsonWriter.writeArrayField("memories", this.memories, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("usage", this.usage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemoryStoreSearchResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemoryStoreSearchResponse if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemoryStoreSearchResponse.
     */
    @Generated
    public static MemoryStoreSearchResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String searchId = null;
            List<MemorySearchItem> memories = null;
            MemoryStoreOperationUsage usage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("search_id".equals(fieldName)) {
                    searchId = reader.getString();
                } else if ("memories".equals(fieldName)) {
                    memories = reader.readArray(reader1 -> MemorySearchItem.fromJson(reader1));
                } else if ("usage".equals(fieldName)) {
                    usage = MemoryStoreOperationUsage.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new MemoryStoreSearchResponse(searchId, memories, usage);
        });
    }
}
