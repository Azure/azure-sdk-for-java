// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The prompt agent definition.
 */
@Fluent
public final class PromptAgentDefinition extends AgentDefinition {

    /*
     * The kind property.
     */
    @Generated
    private AgentKind kind = AgentKind.PROMPT;

    /*
     * The model deployment to use for this agent.
     */
    @Generated
    private final String model;

    /*
     * A system (or developer) message inserted into the model's context.
     */
    @Generated
    private String instructions;

    /*
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while
     * lower values like 0.2 will make it more focused and deterministic.
     * We generally recommend altering this or `top_p` but not both.
     */
    @Generated
    private Double temperature;

    /*
     * An alternative to sampling with temperature, called nucleus sampling,
     * where the model considers the results of the tokens with top_p probability
     * mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     */
    @Generated
    private Double topP;

    /*
     * The reasoning property.
     */
    @Generated
    private Reasoning reasoning;

    /*
     * An array of tools the model may call while generating a response. You
     * can specify which tool to use by setting the `tool_choice` parameter.
     */
    @Generated
    private List<Tool> tools;

    /*
     * Configuration options for a text response from the model. Can be plain text or structured JSON data.
     */
    @Generated
    private PromptAgentDefinitionText text;

    /*
     * Set of structured inputs that can participate in prompt template substitution or tool argument bindings.
     */
    @Generated
    private Map<String, StructuredInputDefinition> structuredInputs;

    /**
     * Creates an instance of PromptAgentDefinition class.
     *
     * @param model the model value to set.
     */
    @Generated
    public PromptAgentDefinition(String model) {
        this.model = model;
    }

    /**
     * Get the kind property: The kind property.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public AgentKind getKind() {
        return this.kind;
    }

    /**
     * Get the model property: The model deployment to use for this agent.
     *
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Get the instructions property: A system (or developer) message inserted into the model's context.
     *
     * @return the instructions value.
     */
    @Generated
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: A system (or developer) message inserted into the model's context.
     *
     * @param instructions the instructions value to set.
     * @return the PromptAgentDefinition object itself.
     */
    @Generated
    public PromptAgentDefinition setInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * We generally recommend altering this or `top_p` but not both.
     *
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * We generally recommend altering this or `top_p` but not both.
     *
     * @param temperature the temperature value to set.
     * @return the PromptAgentDefinition object itself.
     */
    @Generated
    public PromptAgentDefinition setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the topP property: An alternative to sampling with temperature, called nucleus sampling,
     * where the model considers the results of the tokens with top_p probability
     * mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     *
     * We generally recommend altering this or `temperature` but not both.
     *
     * @return the topP value.
     */
    @Generated
    public Double getTopP() {
        return this.topP;
    }

    /**
     * Set the topP property: An alternative to sampling with temperature, called nucleus sampling,
     * where the model considers the results of the tokens with top_p probability
     * mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     *
     * We generally recommend altering this or `temperature` but not both.
     *
     * @param topP the topP value to set.
     * @return the PromptAgentDefinition object itself.
     */
    @Generated
    public PromptAgentDefinition setTopP(Double topP) {
        this.topP = topP;
        return this;
    }

    /**
     * Get the reasoning property: The reasoning property.
     *
     * @return the reasoning value.
     */
    @Generated
    public Reasoning getReasoning() {
        return this.reasoning;
    }

    /**
     * Set the reasoning property: The reasoning property.
     *
     * @param reasoning the reasoning value to set.
     * @return the PromptAgentDefinition object itself.
     */
    @Generated
    public PromptAgentDefinition setReasoning(Reasoning reasoning) {
        this.reasoning = reasoning;
        return this;
    }

    /**
     * Get the tools property: An array of tools the model may call while generating a response. You
     * can specify which tool to use by setting the `tool_choice` parameter.
     *
     * @return the tools value.
     */
    @Generated
    public List<Tool> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: An array of tools the model may call while generating a response. You
     * can specify which tool to use by setting the `tool_choice` parameter.
     *
     * @param tools the tools value to set.
     * @return the PromptAgentDefinition object itself.
     */
    @Generated
    public PromptAgentDefinition setTools(List<Tool> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the text property: Configuration options for a text response from the model. Can be plain text or structured
     * JSON data.
     *
     * @return the text value.
     */
    @Generated
    public PromptAgentDefinitionText getText() {
        return this.text;
    }

    /**
     * Set the text property: Configuration options for a text response from the model. Can be plain text or structured
     * JSON data.
     *
     * @param text the text value to set.
     * @return the PromptAgentDefinition object itself.
     */
    @Generated
    public PromptAgentDefinition setText(PromptAgentDefinitionText text) {
        this.text = text;
        return this;
    }

    /**
     * Get the structuredInputs property: Set of structured inputs that can participate in prompt template substitution
     * or tool argument bindings.
     *
     * @return the structuredInputs value.
     */
    @Generated
    public Map<String, StructuredInputDefinition> getStructuredInputs() {
        return this.structuredInputs;
    }

    /**
     * Set the structuredInputs property: Set of structured inputs that can participate in prompt template substitution
     * or tool argument bindings.
     *
     * @param structuredInputs the structuredInputs value to set.
     * @return the PromptAgentDefinition object itself.
     */
    @Generated
    public PromptAgentDefinition setStructuredInputs(Map<String, StructuredInputDefinition> structuredInputs) {
        this.structuredInputs = structuredInputs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PromptAgentDefinition setRaiConfig(RaiConfig raiConfig) {
        super.setRaiConfig(raiConfig);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("rai_config", getRaiConfig());
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeNumberField("temperature", this.temperature);
        jsonWriter.writeNumberField("top_p", this.topP);
        jsonWriter.writeJsonField("reasoning", this.reasoning);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("text", this.text);
        jsonWriter.writeMapField("structured_inputs", this.structuredInputs,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PromptAgentDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PromptAgentDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PromptAgentDefinition.
     */
    @Generated
    public static PromptAgentDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RaiConfig raiConfig = null;
            String model = null;
            AgentKind kind = AgentKind.PROMPT;
            String instructions = null;
            Double temperature = null;
            Double topP = null;
            Reasoning reasoning = null;
            List<Tool> tools = null;
            PromptAgentDefinitionText text = null;
            Map<String, StructuredInputDefinition> structuredInputs = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("rai_config".equals(fieldName)) {
                    raiConfig = RaiConfig.fromJson(reader);
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = AgentKind.fromString(reader.getString());
                } else if ("instructions".equals(fieldName)) {
                    instructions = reader.getString();
                } else if ("temperature".equals(fieldName)) {
                    temperature = reader.getNullable(JsonReader::getDouble);
                } else if ("top_p".equals(fieldName)) {
                    topP = reader.getNullable(JsonReader::getDouble);
                } else if ("reasoning".equals(fieldName)) {
                    reasoning = Reasoning.fromJson(reader);
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> Tool.fromJson(reader1));
                } else if ("text".equals(fieldName)) {
                    text = PromptAgentDefinitionText.fromJson(reader);
                } else if ("structured_inputs".equals(fieldName)) {
                    structuredInputs = reader.readMap(reader1 -> StructuredInputDefinition.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            PromptAgentDefinition deserializedPromptAgentDefinition = new PromptAgentDefinition(model);
            deserializedPromptAgentDefinition.setRaiConfig(raiConfig);
            deserializedPromptAgentDefinition.kind = kind;
            deserializedPromptAgentDefinition.instructions = instructions;
            deserializedPromptAgentDefinition.temperature = temperature;
            deserializedPromptAgentDefinition.topP = topP;
            deserializedPromptAgentDefinition.reasoning = reasoning;
            deserializedPromptAgentDefinition.tools = tools;
            deserializedPromptAgentDefinition.text = text;
            deserializedPromptAgentDefinition.structuredInputs = structuredInputs;
            return deserializedPromptAgentDefinition;
        });
    }
}
