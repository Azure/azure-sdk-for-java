// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An event that can be raised by the agent based on a semantic condition.
 */
@Immutable
public final class SemanticEventDefinition implements JsonSerializable<SemanticEventDefinition> {

    /*
     * A condition that specifies when the event must be raised. Used by the model to determine when to raise the event.
     */
    @Generated
    private final String condition;

    /**
     * Creates an instance of SemanticEventDefinition class.
     *
     * @param condition the condition value to set.
     */
    @Generated
    public SemanticEventDefinition(String condition) {
        this.condition = condition;
    }

    /**
     * Get the condition property: A condition that specifies when the event must be raised. Used by the model to
     * determine when to raise the event.
     *
     * @return the condition value.
     */
    @Generated
    public String getCondition() {
        return this.condition;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("condition", this.condition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SemanticEventDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SemanticEventDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SemanticEventDefinition.
     */
    @Generated
    public static SemanticEventDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String condition = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("condition".equals(fieldName)) {
                    condition = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new SemanticEventDefinition(condition);
        });
    }
}
