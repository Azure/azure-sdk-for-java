// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A tool that searches for relevant content from uploaded files. Learn more about the [file search
 * tool](https://platform.openai.com/docs/guides/tools-file-search).
 */
@Fluent
public final class FileSearchTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.FILE_SEARCH;

    /*
     * The IDs of the vector stores to search.
     */
    @Generated
    private final List<String> vectorStoreIds;

    /*
     * The maximum number of results to return. This number should be between 1 and 50 inclusive.
     */
    @Generated
    private Integer maxNumResults;

    /*
     * Ranking options for search.
     */
    @Generated
    private RankingOptions rankingOptions;

    /*
     * A filter to apply.
     */
    @Generated
    private BinaryData filters;

    /**
     * Creates an instance of FileSearchTool class.
     *
     * @param vectorStoreIds the vectorStoreIds value to set.
     */
    @Generated
    public FileSearchTool(List<String> vectorStoreIds) {
        this.vectorStoreIds = vectorStoreIds;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the vectorStoreIds property: The IDs of the vector stores to search.
     *
     * @return the vectorStoreIds value.
     */
    @Generated
    public List<String> getVectorStoreIds() {
        return this.vectorStoreIds;
    }

    /**
     * Get the maxNumResults property: The maximum number of results to return. This number should be between 1 and 50
     * inclusive.
     *
     * @return the maxNumResults value.
     */
    @Generated
    public Integer getMaxNumResults() {
        return this.maxNumResults;
    }

    /**
     * Set the maxNumResults property: The maximum number of results to return. This number should be between 1 and 50
     * inclusive.
     *
     * @param maxNumResults the maxNumResults value to set.
     * @return the FileSearchTool object itself.
     */
    @Generated
    public FileSearchTool setMaxNumResults(Integer maxNumResults) {
        this.maxNumResults = maxNumResults;
        return this;
    }

    /**
     * Get the rankingOptions property: Ranking options for search.
     *
     * @return the rankingOptions value.
     */
    @Generated
    public RankingOptions getRankingOptions() {
        return this.rankingOptions;
    }

    /**
     * Set the rankingOptions property: Ranking options for search.
     *
     * @param rankingOptions the rankingOptions value to set.
     * @return the FileSearchTool object itself.
     */
    @Generated
    public FileSearchTool setRankingOptions(RankingOptions rankingOptions) {
        this.rankingOptions = rankingOptions;
        return this;
    }

    /**
     * Get the filters property: A filter to apply.
     *
     * @return the filters value.
     */
    @Generated
    public BinaryData getFilters() {
        return this.filters;
    }

    /**
     * Set the filters property: A filter to apply.
     *
     * @param filters the filters value to set.
     * @return the FileSearchTool object itself.
     */
    @Generated
    public FileSearchTool setFilters(BinaryData filters) {
        this.filters = filters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vector_store_ids", this.vectorStoreIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("max_num_results", this.maxNumResults);
        jsonWriter.writeJsonField("ranking_options", this.rankingOptions);
        if (this.filters != null) {
            jsonWriter.writeFieldName("filters");
            this.filters.writeTo(jsonWriter);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSearchTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSearchTool if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileSearchTool.
     */
    @Generated
    public static FileSearchTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> vectorStoreIds = null;
            ToolType type = ToolType.FILE_SEARCH;
            Integer maxNumResults = null;
            RankingOptions rankingOptions = null;
            BinaryData filters = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("vector_store_ids".equals(fieldName)) {
                    vectorStoreIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("type".equals(fieldName)) {
                    type = ToolType.fromString(reader.getString());
                } else if ("max_num_results".equals(fieldName)) {
                    maxNumResults = reader.getNullable(JsonReader::getInt);
                } else if ("ranking_options".equals(fieldName)) {
                    rankingOptions = RankingOptions.fromJson(reader);
                } else if ("filters".equals(fieldName)) {
                    filters = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            FileSearchTool deserializedFileSearchTool = new FileSearchTool(vectorStoreIds);
            deserializedFileSearchTool.type = type;
            deserializedFileSearchTool.maxNumResults = maxNumResults;
            deserializedFileSearchTool.rankingOptions = rankingOptions;
            deserializedFileSearchTool.filters = filters;
            return deserializedFileSearchTool;
        });
    }
}
