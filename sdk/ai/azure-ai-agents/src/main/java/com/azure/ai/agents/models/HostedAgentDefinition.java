// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The hosted agent definition.
 */
@Fluent
public class HostedAgentDefinition extends AgentDefinition {

    /*
     * The kind property.
     */
    @Generated
    private AgentKind kind = AgentKind.HOSTED;

    /*
     * The protocols that the agent supports for ingress communication of the containers.
     */
    @Generated
    private final List<ProtocolVersionRecord> containerProtocolVersions;

    /*
     * The CPU configuration for the hosted agent.
     */
    @Generated
    private final String cpu;

    /*
     * The memory configuration for the hosted agent.
     */
    @Generated
    private final String memory;

    /*
     * Environment variables to set in the hosted agent container.
     */
    @Generated
    private Map<String, String> environmentVariables;

    /**
     * Creates an instance of HostedAgentDefinition class.
     *
     * @param containerProtocolVersions the containerProtocolVersions value to set.
     * @param cpu the cpu value to set.
     * @param memory the memory value to set.
     */
    @Generated
    public HostedAgentDefinition(List<ProtocolVersionRecord> containerProtocolVersions, String cpu, String memory) {
        this.containerProtocolVersions = containerProtocolVersions;
        this.cpu = cpu;
        this.memory = memory;
    }

    /**
     * Get the kind property: The kind property.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public AgentKind getKind() {
        return this.kind;
    }

    /**
     * Get the containerProtocolVersions property: The protocols that the agent supports for ingress communication of
     * the containers.
     *
     * @return the containerProtocolVersions value.
     */
    @Generated
    public List<ProtocolVersionRecord> getContainerProtocolVersions() {
        return this.containerProtocolVersions;
    }

    /**
     * Get the cpu property: The CPU configuration for the hosted agent.
     *
     * @return the cpu value.
     */
    @Generated
    public String getCpu() {
        return this.cpu;
    }

    /**
     * Get the memory property: The memory configuration for the hosted agent.
     *
     * @return the memory value.
     */
    @Generated
    public String getMemory() {
        return this.memory;
    }

    /**
     * Get the environmentVariables property: Environment variables to set in the hosted agent container.
     *
     * @return the environmentVariables value.
     */
    @Generated
    public Map<String, String> getEnvironmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables to set in the hosted agent container.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the HostedAgentDefinition object itself.
     */
    @Generated
    public HostedAgentDefinition setEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HostedAgentDefinition setRaiConfig(RaiConfig raiConfig) {
        super.setRaiConfig(raiConfig);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("rai_config", getRaiConfig());
        jsonWriter.writeArrayField("container_protocol_versions", this.containerProtocolVersions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("cpu", this.cpu);
        jsonWriter.writeStringField("memory", this.memory);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("environment_variables", this.environmentVariables,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostedAgentDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostedAgentDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HostedAgentDefinition.
     */
    @Generated
    public static HostedAgentDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("hosted".equals(discriminatorValue)) {
                    return ImageBasedHostedAgentDefinition.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static HostedAgentDefinition fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RaiConfig raiConfig = null;
            List<ProtocolVersionRecord> containerProtocolVersions = null;
            String cpu = null;
            String memory = null;
            AgentKind kind = AgentKind.HOSTED;
            List<Tool> tools = null;
            Map<String, String> environmentVariables = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("rai_config".equals(fieldName)) {
                    raiConfig = RaiConfig.fromJson(reader);
                } else if ("container_protocol_versions".equals(fieldName)) {
                    containerProtocolVersions = reader.readArray(reader1 -> ProtocolVersionRecord.fromJson(reader1));
                } else if ("cpu".equals(fieldName)) {
                    cpu = reader.getString();
                } else if ("memory".equals(fieldName)) {
                    memory = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = AgentKind.fromString(reader.getString());
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> Tool.fromJson(reader1));
                } else if ("environment_variables".equals(fieldName)) {
                    environmentVariables = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            HostedAgentDefinition deserializedHostedAgentDefinition
                = new HostedAgentDefinition(containerProtocolVersions, cpu, memory);
            deserializedHostedAgentDefinition.setRaiConfig(raiConfig);
            deserializedHostedAgentDefinition.kind = kind;
            deserializedHostedAgentDefinition.tools = tools;
            deserializedHostedAgentDefinition.environmentVariables = environmentVariables;
            return deserializedHostedAgentDefinition;
        });
    }

    /*
     * An array of tools the hosted agent's model may call while generating a response. You
     * can specify which tool to use by setting the `tool_choice` parameter.
     */
    @Generated
    private List<Tool> tools;

    /**
     * Get the tools property: An array of tools the hosted agent's model may call while generating a response. You
     * can specify which tool to use by setting the `tool_choice` parameter.
     *
     * @return the tools value.
     */
    @Generated
    public List<Tool> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: An array of tools the hosted agent's model may call while generating a response. You
     * can specify which tool to use by setting the `tool_choice` parameter.
     *
     * @param tools the tools value to set.
     * @return the HostedAgentDefinition object itself.
     */
    @Generated
    public HostedAgentDefinition setTools(List<Tool> tools) {
        this.tools = tools;
        return this;
    }
}
