// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The input definition information for a Browser Automation Tool, as used to configure an Agent.
 */
@Immutable
public final class BrowserAutomationAgentTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.BROWSER_AUTOMATION_PREVIEW;

    /**
     * Creates an instance of BrowserAutomationAgentTool class.
     *
     * @param browserAutomationPreview the browserAutomationPreview value to set.
     */
    @Generated
    public BrowserAutomationAgentTool(BrowserAutomationToolParameters browserAutomationPreview) {
        this.browserAutomationPreview = browserAutomationPreview;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("browser_automation_preview", this.browserAutomationPreview);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrowserAutomationAgentTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrowserAutomationAgentTool if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrowserAutomationAgentTool.
     */
    @Generated
    public static BrowserAutomationAgentTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrowserAutomationToolParameters browserAutomationPreview = null;
            ToolType type = ToolType.BROWSER_AUTOMATION_PREVIEW;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("browser_automation_preview".equals(fieldName)) {
                    browserAutomationPreview = BrowserAutomationToolParameters.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ToolType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            BrowserAutomationAgentTool deserializedBrowserAutomationAgentTool
                = new BrowserAutomationAgentTool(browserAutomationPreview);
            deserializedBrowserAutomationAgentTool.type = type;
            return deserializedBrowserAutomationAgentTool;
        });
    }

    /*
     * The Browser Automation Tool parameters.
     */
    @Generated
    private final BrowserAutomationToolParameters browserAutomationPreview;

    /**
     * Get the browserAutomationPreview property: The Browser Automation Tool parameters.
     *
     * @return the browserAutomationPreview value.
     */
    @Generated
    public BrowserAutomationToolParameters getBrowserAutomationPreview() {
        return this.browserAutomationPreview;
    }
}
