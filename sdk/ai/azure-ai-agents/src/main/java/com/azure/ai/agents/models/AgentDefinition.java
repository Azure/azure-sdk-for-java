// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AgentDefinition model.
 */
@Fluent
public class AgentDefinition implements JsonSerializable<AgentDefinition> {

    /*
     * The kind property.
     */
    @Generated
    private AgentKind kind = AgentKind.fromString("AgentDefinition");

    /*
     * Configuration for Responsible AI (RAI) content filtering and safety features.
     */
    @Generated
    private RaiConfig raiConfig;

    /**
     * Creates an instance of AgentDefinition class.
     */
    @Generated
    public AgentDefinition() {
    }

    /**
     * Get the kind property: The kind property.
     *
     * @return the kind value.
     */
    @Generated
    public AgentKind getKind() {
        return this.kind;
    }

    /**
     * Get the raiConfig property: Configuration for Responsible AI (RAI) content filtering and safety features.
     *
     * @return the raiConfig value.
     */
    @Generated
    public RaiConfig getRaiConfig() {
        return this.raiConfig;
    }

    /**
     * Set the raiConfig property: Configuration for Responsible AI (RAI) content filtering and safety features.
     *
     * @param raiConfig the raiConfig value to set.
     * @return the AgentDefinition object itself.
     */
    @Generated
    public AgentDefinition setRaiConfig(RaiConfig raiConfig) {
        this.raiConfig = raiConfig;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("rai_config", this.raiConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentDefinition.
     */
    @Generated
    public static AgentDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("workflow".equals(discriminatorValue)) {
                    return WorkflowDefinition.fromJson(readerToUse.reset());
                } else if ("hosted".equals(discriminatorValue)) {
                    return HostedAgentDefinition.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("hosted".equals(discriminatorValue)) {
                    return ImageBasedHostedAgentDefinition.fromJson(readerToUse.reset());
                } else if ("container_app".equals(discriminatorValue)) {
                    return ContainerAppAgentDefinition.fromJson(readerToUse.reset());
                } else if ("prompt".equals(discriminatorValue)) {
                    return PromptAgentDefinition.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static AgentDefinition fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentDefinition deserializedAgentDefinition = new AgentDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedAgentDefinition.kind = AgentKind.fromString(reader.getString());
                } else if ("rai_config".equals(fieldName)) {
                    deserializedAgentDefinition.raiConfig = RaiConfig.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAgentDefinition;
        });
    }
}
