// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A tool call to run code.
 */
@Immutable
public final class CodeInterpreterToolCallItemParam extends ItemParam {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.CODE_INTERPRETER_CALL;

    /*
     * The ID of the container used to run the code.
     */
    @Generated
    private final String containerId;

    /*
     * The code to run, or null if not available.
     */
    @Generated
    private final String code;

    /*
     * The outputs generated by the code interpreter, such as logs or images.
     * Can be null if no outputs are available.
     */
    @Generated
    private final List<CodeInterpreterOutput> outputs;

    /**
     * Creates an instance of CodeInterpreterToolCallItemParam class.
     *
     * @param containerId the containerId value to set.
     * @param code the code value to set.
     * @param outputs the outputs value to set.
     */
    @Generated
    public CodeInterpreterToolCallItemParam(String containerId, String code, List<CodeInterpreterOutput> outputs) {
        this.containerId = containerId;
        this.code = code;
        this.outputs = outputs;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the containerId property: The ID of the container used to run the code.
     *
     * @return the containerId value.
     */
    @Generated
    public String getContainerId() {
        return this.containerId;
    }

    /**
     * Get the code property: The code to run, or null if not available.
     *
     * @return the code value.
     */
    @Generated
    public String getCode() {
        return this.code;
    }

    /**
     * Get the outputs property: The outputs generated by the code interpreter, such as logs or images.
     * Can be null if no outputs are available.
     *
     * @return the outputs value.
     */
    @Generated
    public List<CodeInterpreterOutput> getOutputs() {
        return this.outputs;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("container_id", this.containerId);
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeArrayField("outputs", this.outputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeInterpreterToolCallItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeInterpreterToolCallItemParam if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CodeInterpreterToolCallItemParam.
     */
    @Generated
    public static CodeInterpreterToolCallItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String containerId = null;
            String code = null;
            List<CodeInterpreterOutput> outputs = null;
            ItemType type = ItemType.CODE_INTERPRETER_CALL;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("container_id".equals(fieldName)) {
                    containerId = reader.getString();
                } else if ("code".equals(fieldName)) {
                    code = reader.getString();
                } else if ("outputs".equals(fieldName)) {
                    outputs = reader.readArray(reader1 -> CodeInterpreterOutput.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CodeInterpreterToolCallItemParam deserializedCodeInterpreterToolCallItemParam
                = new CodeInterpreterToolCallItemParam(containerId, code, outputs);
            deserializedCodeInterpreterToolCallItemParam.type = type;
            return deserializedCodeInterpreterToolCallItemParam;
        });
    }
}
