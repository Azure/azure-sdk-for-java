// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Give the model access to additional tools via remote Model Context Protocol
 * (MCP) servers. [Learn more about MCP](/docs/guides/tools-remote-mcp).
 */
@Fluent
public final class MCPTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.MCP;

    /*
     * A label for this MCP server, used to identify it in tool calls.
     */
    @Generated
    private final String serverLabel;

    /*
     * The URL for the MCP server.
     */
    @Generated
    private final String serverUrl;

    /*
     * Optional HTTP headers to send to the MCP server. Use for authentication
     * or other purposes.
     */
    @Generated
    private Map<String, String> headers;

    /*
     * List of allowed tool names or a filter object.
     */
    @Generated
    private BinaryData allowedTools;

    /*
     * Specify which of the MCP server's tools require approval.
     */
    @Generated
    private BinaryData requireApproval;

    /*
     * The connection ID in the project for the MCP server. The connection stores authentication and other connection
     * details needed to connect to the MCP server.
     */
    @Generated
    private String projectConnectionId;

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the serverLabel property: A label for this MCP server, used to identify it in tool calls.
     *
     * @return the serverLabel value.
     */
    @Generated
    public String getServerLabel() {
        return this.serverLabel;
    }

    /**
     * Get the serverUrl property: The URL for the MCP server.
     *
     * @return the serverUrl value.
     */
    @Generated
    public String getServerUrl() {
        return this.serverUrl;
    }

    /**
     * Get the headers property: Optional HTTP headers to send to the MCP server. Use for authentication
     * or other purposes.
     *
     * @return the headers value.
     */
    @Generated
    public Map<String, String> getHeaders() {
        return this.headers;
    }

    /**
     * Set the headers property: Optional HTTP headers to send to the MCP server. Use for authentication
     * or other purposes.
     *
     * @param headers the headers value to set.
     * @return the MCPTool object itself.
     */
    @Generated
    public MCPTool setHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the allowedTools property: List of allowed tool names or a filter object.
     *
     * @return the allowedTools value.
     */
    @Generated
    public BinaryData getAllowedTools() {
        return this.allowedTools;
    }

    /**
     * Set the allowedTools property: List of allowed tool names or a filter object.
     *
     * @param allowedTools the allowedTools value to set.
     * @return the MCPTool object itself.
     */
    @Generated
    public MCPTool setAllowedTools(BinaryData allowedTools) {
        this.allowedTools = allowedTools;
        return this;
    }

    /**
     * Get the requireApproval property: Specify which of the MCP server's tools require approval.
     *
     * @return the requireApproval value.
     */
    @Generated
    public BinaryData getRequireApproval() {
        return this.requireApproval;
    }

    /**
     * Set the requireApproval property: Specify which of the MCP server's tools require approval.
     *
     * @param requireApproval the requireApproval value to set.
     * @return the MCPTool object itself.
     */
    @Generated
    public MCPTool setRequireApproval(BinaryData requireApproval) {
        this.requireApproval = requireApproval;
        return this;
    }

    /**
     * Get the projectConnectionId property: The connection ID in the project for the MCP server. The connection stores
     * authentication and other connection details needed to connect to the MCP server.
     *
     * @return the projectConnectionId value.
     */
    @Generated
    public String getProjectConnectionId() {
        return this.projectConnectionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("server_label", this.serverLabel);
        jsonWriter.writeStringField("server_url", this.serverUrl);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        if (this.allowedTools != null) {
            jsonWriter.writeFieldName("allowed_tools");
            this.allowedTools.writeTo(jsonWriter);
        }
        if (this.requireApproval != null) {
            jsonWriter.writeFieldName("require_approval");
            this.requireApproval.writeTo(jsonWriter);
        }
        jsonWriter.writeStringField("project_connection_id", this.projectConnectionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPTool if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MCPTool.
     */
    @Generated
    public static MCPTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serverLabel = null;
            String serverUrl = null;
            ToolType type = ToolType.MCP;
            Map<String, String> headers = null;
            BinaryData allowedTools = null;
            BinaryData requireApproval = null;
            String projectConnectionId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("server_label".equals(fieldName)) {
                    serverLabel = reader.getString();
                } else if ("server_url".equals(fieldName)) {
                    serverUrl = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ToolType.fromString(reader.getString());
                } else if ("headers".equals(fieldName)) {
                    headers = reader.readMap(reader1 -> reader1.getString());
                } else if ("allowed_tools".equals(fieldName)) {
                    allowedTools
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("require_approval".equals(fieldName)) {
                    requireApproval
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("project_connection_id".equals(fieldName)) {
                    projectConnectionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MCPTool deserializedMCPTool = new MCPTool(serverLabel, serverUrl);
            deserializedMCPTool.type = type;
            deserializedMCPTool.headers = headers;
            deserializedMCPTool.allowedTools = allowedTools;
            deserializedMCPTool.requireApproval = requireApproval;
            deserializedMCPTool.projectConnectionId = projectConnectionId;
            return deserializedMCPTool;
        });
    }

    /**
     * Creates an instance of MCPTool class.
     *
     * @param serverLabel the serverLabel value to set.
     * @param serverUrl the serverUrl value to set.
     */
    @Generated
    public MCPTool(String serverLabel, String serverUrl) {
        this.serverLabel = serverLabel;
        this.serverUrl = serverUrl;
    }

    /**
     * Set the projectConnectionId property: The connection ID in the project for the MCP server. The connection stores
     * authentication and other connection details needed to connect to the MCP server.
     *
     * @param projectConnectionId the projectConnectionId value to set.
     * @return the MCPTool object itself.
     */
    @Generated
    public MCPTool setProjectConnectionId(String projectConnectionId) {
        this.projectConnectionId = projectConnectionId;
        return this;
    }
}
