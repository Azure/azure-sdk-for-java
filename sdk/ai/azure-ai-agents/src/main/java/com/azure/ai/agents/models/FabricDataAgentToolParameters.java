// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The fabric data agent tool parameters.
 */
@Fluent
public final class FabricDataAgentToolParameters implements JsonSerializable<FabricDataAgentToolParameters> {

    /*
     * The project connections attached to this tool. There can be a maximum of 1 connection
     * resource attached to the tool.
     */
    @Generated
    private List<ToolProjectConnection> projectConnections;

    /**
     * Creates an instance of FabricDataAgentToolParameters class.
     */
    @Generated
    public FabricDataAgentToolParameters() {
    }

    /**
     * Get the projectConnections property: The project connections attached to this tool. There can be a maximum of 1
     * connection
     * resource attached to the tool.
     *
     * @return the projectConnections value.
     */
    @Generated
    public List<ToolProjectConnection> getProjectConnections() {
        return this.projectConnections;
    }

    /**
     * Set the projectConnections property: The project connections attached to this tool. There can be a maximum of 1
     * connection
     * resource attached to the tool.
     *
     * @param projectConnections the projectConnections value to set.
     * @return the FabricDataAgentToolParameters object itself.
     */
    @Generated
    public FabricDataAgentToolParameters setProjectConnections(List<ToolProjectConnection> projectConnections) {
        this.projectConnections = projectConnections;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("project_connections", this.projectConnections,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FabricDataAgentToolParameters from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FabricDataAgentToolParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FabricDataAgentToolParameters.
     */
    @Generated
    public static FabricDataAgentToolParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FabricDataAgentToolParameters deserializedFabricDataAgentToolParameters
                = new FabricDataAgentToolParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("project_connections".equals(fieldName)) {
                    List<ToolProjectConnection> projectConnections
                        = reader.readArray(reader1 -> ToolProjectConnection.fromJson(reader1));
                    deserializedFabricDataAgentToolParameters.projectConnections = projectConnections;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFabricDataAgentToolParameters;
        });
    }
}
