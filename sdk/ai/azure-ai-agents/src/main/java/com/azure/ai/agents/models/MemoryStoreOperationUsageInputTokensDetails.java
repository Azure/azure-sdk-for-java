// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MemoryStoreOperationUsageInputTokensDetails model.
 */
@Immutable
public final class MemoryStoreOperationUsageInputTokensDetails
    implements JsonSerializable<MemoryStoreOperationUsageInputTokensDetails> {

    /*
     * The number of tokens that were retrieved from the cache.
     * [More on prompt caching](/docs/guides/prompt-caching).
     */
    @Generated
    private final int cachedTokens;

    /**
     * Creates an instance of MemoryStoreOperationUsageInputTokensDetails class.
     *
     * @param cachedTokens the cachedTokens value to set.
     */
    @Generated
    private MemoryStoreOperationUsageInputTokensDetails(int cachedTokens) {
        this.cachedTokens = cachedTokens;
    }

    /**
     * Get the cachedTokens property: The number of tokens that were retrieved from the cache.
     * [More on prompt caching](/docs/guides/prompt-caching).
     *
     * @return the cachedTokens value.
     */
    @Generated
    public int getCachedTokens() {
        return this.cachedTokens;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("cached_tokens", this.cachedTokens);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemoryStoreOperationUsageInputTokensDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemoryStoreOperationUsageInputTokensDetails if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemoryStoreOperationUsageInputTokensDetails.
     */
    @Generated
    public static MemoryStoreOperationUsageInputTokensDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int cachedTokens = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("cached_tokens".equals(fieldName)) {
                    cachedTokens = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new MemoryStoreOperationUsageInputTokensDetails(cachedTokens);
        });
    }
}
