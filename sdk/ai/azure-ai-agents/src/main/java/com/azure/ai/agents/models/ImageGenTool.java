// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A tool that generates images using a model like `gpt-image-1`.
 */
@Fluent
public final class ImageGenTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.IMAGE_GENERATION;

    /*
     * The image generation model to use. Default: `gpt-image-1`.
     */
    @Generated
    private ImageGenToolModel model;

    /*
     * The quality of the generated image. One of `low`, `medium`, `high`,
     * or `auto`. Default: `auto`.
     */
    @Generated
    private ImageGenToolQuality quality;

    /*
     * The size of the generated image. One of `1024x1024`, `1024x1536`,
     * `1536x1024`, or `auto`. Default: `auto`.
     */
    @Generated
    private ImageGenToolSize size;

    /*
     * The output format of the generated image. One of `png`, `webp`, or
     * `jpeg`. Default: `png`.
     */
    @Generated
    private ImageGenToolOutputFormat outputFormat;

    /*
     * Compression level for the output image. Default: 100.
     */
    @Generated
    private Integer outputCompression;

    /*
     * Moderation level for the generated image. Default: `auto`.
     */
    @Generated
    private ImageGenToolModeration moderation;

    /*
     * Background type for the generated image. One of `transparent`,
     * `opaque`, or `auto`. Default: `auto`.
     */
    @Generated
    private ImageGenToolBackground background;

    /*
     * Optional mask for inpainting. Contains `image_url`
     * (string, optional) and `file_id` (string, optional).
     */
    @Generated
    private ImageGenToolInputImageMask inputImageMask;

    /*
     * Number of partial images to generate in streaming mode, from 0 (default value) to 3.
     */
    @Generated
    private Integer partialImages;

    /**
     * Creates an instance of ImageGenTool class.
     */
    @Generated
    public ImageGenTool() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the model property: The image generation model to use. Default: `gpt-image-1`.
     *
     * @return the model value.
     */
    @Generated
    public ImageGenToolModel getModel() {
        return this.model;
    }

    /**
     * Set the model property: The image generation model to use. Default: `gpt-image-1`.
     *
     * @param model the model value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setModel(ImageGenToolModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get the quality property: The quality of the generated image. One of `low`, `medium`, `high`,
     * or `auto`. Default: `auto`.
     *
     * @return the quality value.
     */
    @Generated
    public ImageGenToolQuality getQuality() {
        return this.quality;
    }

    /**
     * Set the quality property: The quality of the generated image. One of `low`, `medium`, `high`,
     * or `auto`. Default: `auto`.
     *
     * @param quality the quality value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setQuality(ImageGenToolQuality quality) {
        this.quality = quality;
        return this;
    }

    /**
     * Get the size property: The size of the generated image. One of `1024x1024`, `1024x1536`,
     * `1536x1024`, or `auto`. Default: `auto`.
     *
     * @return the size value.
     */
    @Generated
    public ImageGenToolSize getSize() {
        return this.size;
    }

    /**
     * Set the size property: The size of the generated image. One of `1024x1024`, `1024x1536`,
     * `1536x1024`, or `auto`. Default: `auto`.
     *
     * @param size the size value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setSize(ImageGenToolSize size) {
        this.size = size;
        return this;
    }

    /**
     * Get the outputFormat property: The output format of the generated image. One of `png`, `webp`, or
     * `jpeg`. Default: `png`.
     *
     * @return the outputFormat value.
     */
    @Generated
    public ImageGenToolOutputFormat getOutputFormat() {
        return this.outputFormat;
    }

    /**
     * Set the outputFormat property: The output format of the generated image. One of `png`, `webp`, or
     * `jpeg`. Default: `png`.
     *
     * @param outputFormat the outputFormat value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setOutputFormat(ImageGenToolOutputFormat outputFormat) {
        this.outputFormat = outputFormat;
        return this;
    }

    /**
     * Get the outputCompression property: Compression level for the output image. Default: 100.
     *
     * @return the outputCompression value.
     */
    @Generated
    public Integer getOutputCompression() {
        return this.outputCompression;
    }

    /**
     * Set the outputCompression property: Compression level for the output image. Default: 100.
     *
     * @param outputCompression the outputCompression value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setOutputCompression(Integer outputCompression) {
        this.outputCompression = outputCompression;
        return this;
    }

    /**
     * Get the moderation property: Moderation level for the generated image. Default: `auto`.
     *
     * @return the moderation value.
     */
    @Generated
    public ImageGenToolModeration getModeration() {
        return this.moderation;
    }

    /**
     * Set the moderation property: Moderation level for the generated image. Default: `auto`.
     *
     * @param moderation the moderation value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setModeration(ImageGenToolModeration moderation) {
        this.moderation = moderation;
        return this;
    }

    /**
     * Get the background property: Background type for the generated image. One of `transparent`,
     * `opaque`, or `auto`. Default: `auto`.
     *
     * @return the background value.
     */
    @Generated
    public ImageGenToolBackground getBackground() {
        return this.background;
    }

    /**
     * Set the background property: Background type for the generated image. One of `transparent`,
     * `opaque`, or `auto`. Default: `auto`.
     *
     * @param background the background value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setBackground(ImageGenToolBackground background) {
        this.background = background;
        return this;
    }

    /**
     * Get the inputImageMask property: Optional mask for inpainting. Contains `image_url`
     * (string, optional) and `file_id` (string, optional).
     *
     * @return the inputImageMask value.
     */
    @Generated
    public ImageGenToolInputImageMask getInputImageMask() {
        return this.inputImageMask;
    }

    /**
     * Set the inputImageMask property: Optional mask for inpainting. Contains `image_url`
     * (string, optional) and `file_id` (string, optional).
     *
     * @param inputImageMask the inputImageMask value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setInputImageMask(ImageGenToolInputImageMask inputImageMask) {
        this.inputImageMask = inputImageMask;
        return this;
    }

    /**
     * Get the partialImages property: Number of partial images to generate in streaming mode, from 0 (default value) to
     * 3.
     *
     * @return the partialImages value.
     */
    @Generated
    public Integer getPartialImages() {
        return this.partialImages;
    }

    /**
     * Set the partialImages property: Number of partial images to generate in streaming mode, from 0 (default value) to
     * 3.
     *
     * @param partialImages the partialImages value to set.
     * @return the ImageGenTool object itself.
     */
    @Generated
    public ImageGenTool setPartialImages(Integer partialImages) {
        this.partialImages = partialImages;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("model", this.model == null ? null : this.model.toString());
        jsonWriter.writeStringField("quality", this.quality == null ? null : this.quality.toString());
        jsonWriter.writeStringField("size", this.size == null ? null : this.size.toString());
        jsonWriter.writeStringField("output_format", this.outputFormat == null ? null : this.outputFormat.toString());
        jsonWriter.writeNumberField("output_compression", this.outputCompression);
        jsonWriter.writeStringField("moderation", this.moderation == null ? null : this.moderation.toString());
        jsonWriter.writeStringField("background", this.background == null ? null : this.background.toString());
        jsonWriter.writeJsonField("input_image_mask", this.inputImageMask);
        jsonWriter.writeNumberField("partial_images", this.partialImages);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageGenTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageGenTool if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageGenTool.
     */
    @Generated
    public static ImageGenTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageGenTool deserializedImageGenTool = new ImageGenTool();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedImageGenTool.type = ToolType.fromString(reader.getString());
                } else if ("model".equals(fieldName)) {
                    deserializedImageGenTool.model = ImageGenToolModel.fromString(reader.getString());
                } else if ("quality".equals(fieldName)) {
                    deserializedImageGenTool.quality = ImageGenToolQuality.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    deserializedImageGenTool.size = ImageGenToolSize.fromString(reader.getString());
                } else if ("output_format".equals(fieldName)) {
                    deserializedImageGenTool.outputFormat = ImageGenToolOutputFormat.fromString(reader.getString());
                } else if ("output_compression".equals(fieldName)) {
                    deserializedImageGenTool.outputCompression = reader.getNullable(JsonReader::getInt);
                } else if ("moderation".equals(fieldName)) {
                    deserializedImageGenTool.moderation = ImageGenToolModeration.fromString(reader.getString());
                } else if ("background".equals(fieldName)) {
                    deserializedImageGenTool.background = ImageGenToolBackground.fromString(reader.getString());
                } else if ("input_image_mask".equals(fieldName)) {
                    deserializedImageGenTool.inputImageMask = ImageGenToolInputImageMask.fromJson(reader);
                } else if ("partial_images".equals(fieldName)) {
                    deserializedImageGenTool.partialImages = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedImageGenTool;
        });
    }
}
