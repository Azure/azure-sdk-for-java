// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Content item used to generate a response.
 */
@Immutable
public class ItemParam implements JsonSerializable<ItemParam> {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.fromString("ItemParam");

    /**
     * Creates an instance of ItemParam class.
     */
    @Generated
    public ItemParam() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    public ItemType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ItemParam if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the ItemParam.
     */
    @Generated
    public static ItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("structured_inputs".equals(discriminatorValue)) {
                    return StructuredInputsItemParam.fromJson(readerToUse.reset());
                } else if ("message".equals(discriminatorValue)) {
                    return ResponsesMessageItemParam.fromJson(readerToUse.reset());
                } else if ("function_call_output".equals(discriminatorValue)) {
                    return FunctionToolCallOutputItemParam.fromJson(readerToUse.reset());
                } else if ("file_search_call".equals(discriminatorValue)) {
                    return FileSearchToolCallItemParam.fromJson(readerToUse.reset());
                } else if ("computer_call".equals(discriminatorValue)) {
                    return ComputerToolCallItemParam.fromJson(readerToUse.reset());
                } else if ("computer_call_output".equals(discriminatorValue)) {
                    return ComputerToolCallOutputItemParam.fromJson(readerToUse.reset());
                } else if ("web_search_call".equals(discriminatorValue)) {
                    return WebSearchToolCallItemParam.fromJson(readerToUse.reset());
                } else if ("function_call".equals(discriminatorValue)) {
                    return FunctionToolCallItemParam.fromJson(readerToUse.reset());
                } else if ("reasoning".equals(discriminatorValue)) {
                    return ReasoningItemParam.fromJson(readerToUse.reset());
                } else if ("item_reference".equals(discriminatorValue)) {
                    return ItemReferenceItemParam.fromJson(readerToUse.reset());
                } else if ("image_generation_call".equals(discriminatorValue)) {
                    return ImageGenToolCallItemParam.fromJson(readerToUse.reset());
                } else if ("code_interpreter_call".equals(discriminatorValue)) {
                    return CodeInterpreterToolCallItemParam.fromJson(readerToUse.reset());
                } else if ("local_shell_call".equals(discriminatorValue)) {
                    return LocalShellToolCallItemParam.fromJson(readerToUse.reset());
                } else if ("local_shell_call_output".equals(discriminatorValue)) {
                    return LocalShellToolCallOutputItemParam.fromJson(readerToUse.reset());
                } else if ("mcp_list_tools".equals(discriminatorValue)) {
                    return MCPListToolsItemParam.fromJson(readerToUse.reset());
                } else if ("mcp_approval_request".equals(discriminatorValue)) {
                    return MCPApprovalRequestItemParam.fromJson(readerToUse.reset());
                } else if ("mcp_approval_response".equals(discriminatorValue)) {
                    return MCPApprovalResponseItemParam.fromJson(readerToUse.reset());
                } else if ("mcp_call".equals(discriminatorValue)) {
                    return MCPCallItemParam.fromJson(readerToUse.reset());
                } else if ("memory_search_call".equals(discriminatorValue)) {
                    return MemorySearchToolCallItemParam.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ItemParam fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ItemParam deserializedItemParam = new ItemParam();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedItemParam.type = ItemType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedItemParam;
        });
    }
}
