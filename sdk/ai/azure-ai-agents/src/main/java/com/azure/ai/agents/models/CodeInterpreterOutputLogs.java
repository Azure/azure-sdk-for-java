// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The logs output from the code interpreter.
 */
@Immutable
public final class CodeInterpreterOutputLogs extends CodeInterpreterOutput {

    /*
     * The type property.
     */
    @Generated
    private CodeInterpreterOutputType type = CodeInterpreterOutputType.LOGS;

    /*
     * The logs output from the code interpreter.
     */
    @Generated
    private final String logs;

    /**
     * Creates an instance of CodeInterpreterOutputLogs class.
     *
     * @param logs the logs value to set.
     */
    @Generated
    public CodeInterpreterOutputLogs(String logs) {
        this.logs = logs;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public CodeInterpreterOutputType getType() {
        return this.type;
    }

    /**
     * Get the logs property: The logs output from the code interpreter.
     *
     * @return the logs value.
     */
    @Generated
    public String getLogs() {
        return this.logs;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("logs", this.logs);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeInterpreterOutputLogs from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeInterpreterOutputLogs if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CodeInterpreterOutputLogs.
     */
    @Generated
    public static CodeInterpreterOutputLogs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String logs = null;
            CodeInterpreterOutputType type = CodeInterpreterOutputType.LOGS;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("logs".equals(fieldName)) {
                    logs = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = CodeInterpreterOutputType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CodeInterpreterOutputLogs deserializedCodeInterpreterOutputLogs = new CodeInterpreterOutputLogs(logs);
            deserializedCodeInterpreterOutputLogs.type = type;
            return deserializedCodeInterpreterOutputLogs;
        });
    }
}
