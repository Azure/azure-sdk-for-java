// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents;

import com.azure.ai.agents.implementation.MemoryStoresImpl;
import com.azure.ai.agents.implementation.models.CreateMemoryStoreRequest;
import com.azure.ai.agents.implementation.models.DeleteScopeRequest;
import com.azure.ai.agents.implementation.models.SearchMemoriesRequest;
import com.azure.ai.agents.implementation.models.UpdateMemoriesRequest;
import com.azure.ai.agents.implementation.models.UpdateMemoryStoreRequest;
import com.azure.ai.agents.models.DeleteMemoryStoreResponse;
import com.azure.ai.agents.models.ItemParam;
import com.azure.ai.agents.models.ListAgentsRequestOrder;
import com.azure.ai.agents.models.MemorySearchOptions;
import com.azure.ai.agents.models.MemoryStoreDefinition;
import com.azure.ai.agents.models.MemoryStoreDeleteScopeResponse;
import com.azure.ai.agents.models.MemoryStoreObject;
import com.azure.ai.agents.models.MemoryStoreSearchResponse;
import com.azure.ai.agents.models.MemoryStoreUpdateResponse;
import com.azure.ai.agents.models.MemoryStoreUpdateResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous ProjectsClient type.
 */
@ServiceClient(builder = AgentsClientBuilder.class, isAsync = true)
public final class MemoryStoresAsyncClient {

    @Generated
    private final MemoryStoresImpl serviceClient;

    /**
     * Initializes an instance of MemoryStoresAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    MemoryStoresAsyncClient(MemoryStoresImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param createMemoryStoreRequest The createMemoryStoreRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createMemoryStoreWithResponse(BinaryData createMemoryStoreRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createMemoryStoreWithResponseAsync(createMemoryStoreRequest, requestOptions);
    }

    /**
     * Update a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the memory store to update.
     * @param updateMemoryStoreRequest The updateMemoryStoreRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateMemoryStoreWithResponse(String name, BinaryData updateMemoryStoreRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.updateMemoryStoreWithResponseAsync(name, updateMemoryStoreRequest, requestOptions);
    }

    /**
     * Retrieve a memory store.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the memory store to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMemoryStoreWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getMemoryStoreWithResponseAsync(name, requestOptions);
    }

    /**
     * List all memory stores.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listMemoryStores(RequestOptions requestOptions) {
        return this.serviceClient.listMemoryStoresAsync(requestOptions);
    }

    /**
     * Delete a memory store.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     *
     * @param name The name of the memory store to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteMemoryStoreWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.deleteMemoryStoreWithResponseAsync(name, requestOptions);
    }

    /**
     * Search for relevant memories from a memory store based on conversation context.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_search_id: String (Optional)
     *     options (Optional): {
     *         max_memories: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     search_id: String (Required)
     *     memories (Required): [
     *          (Required){
     *             memory_item (Required): {
     *                 kind: String(user_profile/chat_summary) (Required)
     *                 memory_id: String (Required)
     *                 updated_at: long (Required)
     *                 scope: String (Required)
     *                 content: String (Required)
     *             }
     *         }
     *     ]
     *     usage (Required): {
     *         embedding_tokens: int (Required)
     *         input_tokens: int (Required)
     *         input_tokens_details (Required): {
     *             cached_tokens: int (Required)
     *         }
     *         output_tokens: int (Required)
     *         output_tokens_details (Required): {
     *             reasoning_tokens: int (Required)
     *         }
     *         total_tokens: int (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the memory store to search.
     * @param searchMemoriesRequest The searchMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return memory search response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchMemoriesWithResponse(String name, BinaryData searchMemoriesRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.searchMemoriesWithResponseAsync(name, searchMemoriesRequest, requestOptions);
    }

    /**
     * Update memory store with conversation memories.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_update_id: String (Optional)
     *     update_delay: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the memory store to update.
     * @param updateMemoriesRequest The updateMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of provides the status of a memory store update operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginUpdateMemories(String name, BinaryData updateMemoriesRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.beginUpdateMemoriesAsync(name, updateMemoriesRequest, requestOptions);
    }

    /**
     * Get memory store update result.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the memory store.
     * @param updateId The ID of the memory update operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return memory store update result along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpdateResultWithResponse(String name, String updateId,
        RequestOptions requestOptions) {
        return this.serviceClient.getUpdateResultWithResponseAsync(name, updateId, requestOptions);
    }

    /**
     * Create a memory store.
     *
     * @param name The name of the memory store.
     * @param definition The memory store definition.
     * @param description A human-readable description of the memory store.
     * @param metadata Arbitrary key-value metadata to associate with the memory store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a memory store that can store and retrieve user memories on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreObject> createMemoryStore(String name, MemoryStoreDefinition definition, String description,
        Map<String, String> metadata) {
        // Generated convenience method for createMemoryStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateMemoryStoreRequest createMemoryStoreRequestObj
            = new CreateMemoryStoreRequest(name, definition).setDescription(description).setMetadata(metadata);
        BinaryData createMemoryStoreRequest = BinaryData.fromObject(createMemoryStoreRequestObj);
        return createMemoryStoreWithResponse(createMemoryStoreRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreObject.class));
    }

    /**
     * Create a memory store.
     *
     * @param name The name of the memory store.
     * @param definition The memory store definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a memory store that can store and retrieve user memories on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreObject> createMemoryStore(String name, MemoryStoreDefinition definition) {
        // Generated convenience method for createMemoryStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateMemoryStoreRequest createMemoryStoreRequestObj = new CreateMemoryStoreRequest(name, definition);
        BinaryData createMemoryStoreRequest = BinaryData.fromObject(createMemoryStoreRequestObj);
        return createMemoryStoreWithResponse(createMemoryStoreRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreObject.class));
    }

    /**
     * Retrieve a memory store.
     *
     * @param name The name of the memory store to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a memory store that can store and retrieve user memories on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreObject> getMemoryStore(String name) {
        // Generated convenience method for getMemoryStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMemoryStoreWithResponse(name, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreObject.class));
    }

    /**
     * List all memory stores.
     *
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
     * default is 20.
     * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
     * for descending order.
     * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MemoryStoreObject> listMemoryStores(Integer limit, ListAgentsRequestOrder order, String after,
        String before) {
        // Generated convenience method for listMemoryStores
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listMemoryStores(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, MemoryStoreObject>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreObject.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List all memory stores.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MemoryStoreObject> listMemoryStores() {
        // Generated convenience method for listMemoryStores
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listMemoryStores(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, MemoryStoreObject>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreObject.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Delete a memory store.
     *
     * @param name The name of the memory store to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteMemoryStoreResponse> deleteMemoryStore(String name) {
        // Generated convenience method for deleteMemoryStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteMemoryStoreWithResponse(name, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeleteMemoryStoreResponse.class));
    }

    /**
     * Search for relevant memories from a memory store based on conversation context.
     *
     * @param name The name of the memory store to search.
     * @param scope The namespace that logically groups and isolates memories, such as a user ID.
     * @param conversationId The conversation ID for which to search memories. Only one of conversation_id or items
     * should be provided.
     * @param items Items for which to search for relevant memories. Only one of conversation_id or items should be
     * provided.
     * @param previousSearchId The unique ID of the previous search request, enabling incremental memory search from
     * where the last operation left off. Cannot be used together with conversation_id.
     * @param options Memory search options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return memory search response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreSearchResponse> searchMemories(String name, String scope, String conversationId,
        List<ItemParam> items, String previousSearchId, MemorySearchOptions options) {
        // Generated convenience method for searchMemoriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        SearchMemoriesRequest searchMemoriesRequestObj
            = new SearchMemoriesRequest(scope).setConversationId(conversationId)
                .setItems(items)
                .setPreviousSearchId(previousSearchId)
                .setOptions(options);
        BinaryData searchMemoriesRequest = BinaryData.fromObject(searchMemoriesRequestObj);
        return searchMemoriesWithResponse(name, searchMemoriesRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreSearchResponse.class));
    }

    /**
     * Search for relevant memories from a memory store based on conversation context.
     *
     * @param name The name of the memory store to search.
     * @param scope The namespace that logically groups and isolates memories, such as a user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return memory search response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreSearchResponse> searchMemories(String name, String scope) {
        // Generated convenience method for searchMemoriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        SearchMemoriesRequest searchMemoriesRequestObj = new SearchMemoriesRequest(scope);
        BinaryData searchMemoriesRequest = BinaryData.fromObject(searchMemoriesRequestObj);
        return searchMemoriesWithResponse(name, searchMemoriesRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreSearchResponse.class));
    }

    /**
     * Update memory store with conversation memories.
     *
     * @param name The name of the memory store to update.
     * @param scope The namespace that logically groups and isolates memories, such as a user ID.
     * @param conversationId The conversation ID from which to extract memories. Only one of conversation_id or items
     * should be provided.
     * @param items Conversation items from which to extract memories. Only one of conversation_id or items should be
     * provided.
     * @param previousUpdateId The unique ID of the previous update request, enabling incremental memory updates from
     * where the last operation left off. Cannot be used together with conversation_id.
     * @param updateDelay Timeout period before processing the memory update in seconds.
     * If a new update request is received during this period, it will cancel the current request and reset the timeout.
     * Set to 0 to immediately trigger the update without delay.
     * Defaults to 300 (5 minutes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of provides the status of a memory store update operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<MemoryStoreUpdateResponse, MemoryStoreUpdateResult> beginUpdateMemories(String name, String scope,
        String conversationId, List<ItemParam> items, String previousUpdateId, Integer updateDelay) {
        // Generated convenience method for beginUpdateMemoriesWithModel
        RequestOptions requestOptions = new RequestOptions();
        UpdateMemoriesRequest updateMemoriesRequestObj
            = new UpdateMemoriesRequest(scope).setConversationId(conversationId)
                .setItems(items)
                .setPreviousUpdateId(previousUpdateId)
                .setUpdateDelay(updateDelay);
        BinaryData updateMemoriesRequest = BinaryData.fromObject(updateMemoriesRequestObj);
        return serviceClient.beginUpdateMemoriesWithModelAsync(name, updateMemoriesRequest, requestOptions);
    }

    /**
     * Update memory store with conversation memories.
     *
     * @param name The name of the memory store to update.
     * @param scope The namespace that logically groups and isolates memories, such as a user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of provides the status of a memory store update operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<MemoryStoreUpdateResponse, MemoryStoreUpdateResult> beginUpdateMemories(String name,
        String scope) {
        // Generated convenience method for beginUpdateMemoriesWithModel
        RequestOptions requestOptions = new RequestOptions();
        UpdateMemoriesRequest updateMemoriesRequestObj = new UpdateMemoriesRequest(scope);
        BinaryData updateMemoriesRequest = BinaryData.fromObject(updateMemoriesRequestObj);
        return serviceClient.beginUpdateMemoriesWithModelAsync(name, updateMemoriesRequest, requestOptions);
    }

    /**
     * Get memory store update result.
     *
     * @param name The name of the memory store.
     * @param updateId The ID of the memory update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return memory store update result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreUpdateResponse> getUpdateResult(String name, String updateId) {
        // Generated convenience method for getUpdateResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getUpdateResultWithResponse(name, updateId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreUpdateResponse.class));
    }

    /**
     * Delete all memories associated with a specific scope from a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     scope: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     *
     * @param name The name of the memory store.
     * @param deleteScopeRequest The deleteScopeRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for deleting memories from a scope along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteScopeWithResponse(String name, BinaryData deleteScopeRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteScopeWithResponseAsync(name, deleteScopeRequest, requestOptions);
    }

    /**
     * Update a memory store.
     *
     * @param name The name of the memory store to update.
     * @param description A human-readable description of the memory store.
     * @param metadata Arbitrary key-value metadata to associate with the memory store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a memory store that can store and retrieve user memories on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreObject> updateMemoryStore(String name, String description, Map<String, String> metadata) {
        // Generated convenience method for updateMemoryStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateMemoryStoreRequest updateMemoryStoreRequestObj
            = new UpdateMemoryStoreRequest().setDescription(description).setMetadata(metadata);
        BinaryData updateMemoryStoreRequest = BinaryData.fromObject(updateMemoryStoreRequestObj);
        return updateMemoryStoreWithResponse(name, updateMemoryStoreRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreObject.class));
    }

    /**
     * Update a memory store.
     *
     * @param name The name of the memory store to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a memory store that can store and retrieve user memories on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreObject> updateMemoryStore(String name) {
        // Generated convenience method for updateMemoryStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateMemoryStoreRequest updateMemoryStoreRequestObj = new UpdateMemoryStoreRequest();
        BinaryData updateMemoryStoreRequest = BinaryData.fromObject(updateMemoryStoreRequestObj);
        return updateMemoryStoreWithResponse(name, updateMemoryStoreRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreObject.class));
    }

    /**
     * Delete all memories associated with a specific scope from a memory store.
     *
     * @param name The name of the memory store.
     * @param scope The namespace that logically groups and isolates memories to delete, such as a user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for deleting memories from a scope on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MemoryStoreDeleteScopeResponse> deleteScope(String name, String scope) {
        // Generated convenience method for deleteScopeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        DeleteScopeRequest deleteScopeRequestObj = new DeleteScopeRequest(scope);
        BinaryData deleteScopeRequest = BinaryData.fromObject(deleteScopeRequestObj);
        return deleteScopeWithResponse(name, deleteScopeRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(MemoryStoreDeleteScopeResponse.class));
    }
}
