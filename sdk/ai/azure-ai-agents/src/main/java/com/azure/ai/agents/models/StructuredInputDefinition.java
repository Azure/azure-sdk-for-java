// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An structured input that can participate in prompt template substitutions and tool argument binding.
 */
@Fluent
public final class StructuredInputDefinition implements JsonSerializable<StructuredInputDefinition> {

    /*
     * A human-readable description of the input.
     */
    @Generated
    private String description;

    /*
     * The default value for the input if no run-time value is provided.
     */
    @Generated
    private BinaryData defaultValue;

    /*
     * When provided, the input value is bound to the specified tool arguments.
     */
    @Generated
    private List<ToolArgumentBinding> toolArgumentBindings;

    /*
     * The JSON schema for the structured input (optional).
     */
    @Generated
    private BinaryData schema;

    /*
     * Whether the input property is required when the agent is invoked.
     */
    @Generated
    private Boolean required;

    /**
     * Creates an instance of StructuredInputDefinition class.
     */
    @Generated
    public StructuredInputDefinition() {
    }

    /**
     * Get the description property: A human-readable description of the input.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: A human-readable description of the input.
     *
     * @param description the description value to set.
     * @return the StructuredInputDefinition object itself.
     */
    @Generated
    public StructuredInputDefinition setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the defaultValue property: The default value for the input if no run-time value is provided.
     *
     * @return the defaultValue value.
     */
    @Generated
    public BinaryData getDefaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the defaultValue property: The default value for the input if no run-time value is provided.
     *
     * @param defaultValue the defaultValue value to set.
     * @return the StructuredInputDefinition object itself.
     */
    @Generated
    public StructuredInputDefinition setDefaultValue(BinaryData defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Get the toolArgumentBindings property: When provided, the input value is bound to the specified tool arguments.
     *
     * @return the toolArgumentBindings value.
     */
    @Generated
    public List<ToolArgumentBinding> getToolArgumentBindings() {
        return this.toolArgumentBindings;
    }

    /**
     * Set the toolArgumentBindings property: When provided, the input value is bound to the specified tool arguments.
     *
     * @param toolArgumentBindings the toolArgumentBindings value to set.
     * @return the StructuredInputDefinition object itself.
     */
    @Generated
    public StructuredInputDefinition setToolArgumentBindings(List<ToolArgumentBinding> toolArgumentBindings) {
        this.toolArgumentBindings = toolArgumentBindings;
        return this;
    }

    /**
     * Get the schema property: The JSON schema for the structured input (optional).
     *
     * @return the schema value.
     */
    @Generated
    public BinaryData getSchema() {
        return this.schema;
    }

    /**
     * Set the schema property: The JSON schema for the structured input (optional).
     *
     * @param schema the schema value to set.
     * @return the StructuredInputDefinition object itself.
     */
    @Generated
    public StructuredInputDefinition setSchema(BinaryData schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the required property: Whether the input property is required when the agent is invoked.
     *
     * @return the required value.
     */
    @Generated
    public Boolean isRequired() {
        return this.required;
    }

    /**
     * Set the required property: Whether the input property is required when the agent is invoked.
     *
     * @param required the required value to set.
     * @return the StructuredInputDefinition object itself.
     */
    @Generated
    public StructuredInputDefinition setRequired(Boolean required) {
        this.required = required;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        if (this.defaultValue != null) {
            jsonWriter.writeFieldName("default_value");
            this.defaultValue.writeTo(jsonWriter);
        }
        jsonWriter.writeArrayField("tool_argument_bindings", this.toolArgumentBindings,
            (writer, element) -> writer.writeJson(element));
        if (this.schema != null) {
            jsonWriter.writeFieldName("schema");
            this.schema.writeTo(jsonWriter);
        }
        jsonWriter.writeBooleanField("required", this.required);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StructuredInputDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StructuredInputDefinition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StructuredInputDefinition.
     */
    @Generated
    public static StructuredInputDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StructuredInputDefinition deserializedStructuredInputDefinition = new StructuredInputDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("description".equals(fieldName)) {
                    deserializedStructuredInputDefinition.description = reader.getString();
                } else if ("default_value".equals(fieldName)) {
                    deserializedStructuredInputDefinition.defaultValue
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("tool_argument_bindings".equals(fieldName)) {
                    List<ToolArgumentBinding> toolArgumentBindings
                        = reader.readArray(reader1 -> ToolArgumentBinding.fromJson(reader1));
                    deserializedStructuredInputDefinition.toolArgumentBindings = toolArgumentBindings;
                } else if ("schema".equals(fieldName)) {
                    deserializedStructuredInputDefinition.schema
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("required".equals(fieldName)) {
                    deserializedStructuredInputDefinition.required = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStructuredInputDefinition;
        });
    }
}
