// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A response to an MCP approval request.
 */
@Fluent
public final class MCPApprovalResponseItemParam extends ItemParam {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.MCP_APPROVAL_RESPONSE;

    /*
     * The ID of the approval request being answered.
     */
    @Generated
    private final String approvalRequestId;

    /*
     * Whether the request was approved.
     */
    @Generated
    private final boolean approve;

    /*
     * Optional reason for the decision.
     */
    @Generated
    private String reason;

    /**
     * Creates an instance of MCPApprovalResponseItemParam class.
     *
     * @param approvalRequestId the approvalRequestId value to set.
     * @param approve the approve value to set.
     */
    @Generated
    public MCPApprovalResponseItemParam(String approvalRequestId, boolean approve) {
        this.approvalRequestId = approvalRequestId;
        this.approve = approve;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the approvalRequestId property: The ID of the approval request being answered.
     *
     * @return the approvalRequestId value.
     */
    @Generated
    public String getApprovalRequestId() {
        return this.approvalRequestId;
    }

    /**
     * Get the approve property: Whether the request was approved.
     *
     * @return the approve value.
     */
    @Generated
    public boolean isApprove() {
        return this.approve;
    }

    /**
     * Get the reason property: Optional reason for the decision.
     *
     * @return the reason value.
     */
    @Generated
    public String getReason() {
        return this.reason;
    }

    /**
     * Set the reason property: Optional reason for the decision.
     *
     * @param reason the reason value to set.
     * @return the MCPApprovalResponseItemParam object itself.
     */
    @Generated
    public MCPApprovalResponseItemParam setReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("approval_request_id", this.approvalRequestId);
        jsonWriter.writeBooleanField("approve", this.approve);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("reason", this.reason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPApprovalResponseItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPApprovalResponseItemParam if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MCPApprovalResponseItemParam.
     */
    @Generated
    public static MCPApprovalResponseItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String approvalRequestId = null;
            boolean approve = false;
            ItemType type = ItemType.MCP_APPROVAL_RESPONSE;
            String reason = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("approval_request_id".equals(fieldName)) {
                    approvalRequestId = reader.getString();
                } else if ("approve".equals(fieldName)) {
                    approve = reader.getBoolean();
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else if ("reason".equals(fieldName)) {
                    reason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MCPApprovalResponseItemParam deserializedMCPApprovalResponseItemParam
                = new MCPApprovalResponseItemParam(approvalRequestId, approve);
            deserializedMCPApprovalResponseItemParam.type = type;
            deserializedMCPApprovalResponseItemParam.reason = reason;
            return deserializedMCPApprovalResponseItemParam;
        });
    }
}
