// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A tool that runs Python code to help generate a response to a prompt.
 */
@Immutable
public final class CodeInterpreterTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.CODE_INTERPRETER;

    /*
     * The code interpreter container. Can be a container ID or an object that
     * specifies uploaded file IDs to make available to your code.
     */
    @Generated
    private final BinaryData container;

    /**
     * Creates an instance of CodeInterpreterTool class.
     *
     * @param container the container value to set.
     */
    @Generated
    public CodeInterpreterTool(BinaryData container) {
        this.container = container;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the container property: The code interpreter container. Can be a container ID or an object that
     * specifies uploaded file IDs to make available to your code.
     *
     * @return the container value.
     */
    @Generated
    public BinaryData getContainer() {
        return this.container;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFieldName("container");
        this.container.writeTo(jsonWriter);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeInterpreterTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeInterpreterTool if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CodeInterpreterTool.
     */
    @Generated
    public static CodeInterpreterTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData container = null;
            ToolType type = ToolType.CODE_INTERPRETER;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("container".equals(fieldName)) {
                    container = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("type".equals(fieldName)) {
                    type = ToolType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CodeInterpreterTool deserializedCodeInterpreterTool = new CodeInterpreterTool(container);
            deserializedCodeInterpreterTool.type = type;
            return deserializedCodeInterpreterTool;
        });
    }
}
