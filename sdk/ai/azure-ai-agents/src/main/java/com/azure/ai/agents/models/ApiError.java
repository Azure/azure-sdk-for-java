// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The ApiError model.
 */
@Immutable
public final class ApiError implements JsonSerializable<ApiError> {

    /*
     * The code property.
     */
    @Generated
    private final String code;

    /*
     * The message property.
     */
    @Generated
    private final String message;

    /*
     * The details property.
     */
    @Generated
    private String details;

    /*
     * The errors property.
     */
    @Generated
    private Map<String, List<String>> errors;

    /**
     * Creates an instance of ApiError class.
     *
     * @param code the code value to set.
     * @param message the message value to set.
     */
    @Generated
    private ApiError(String code, String message) {
        this.code = code;
        this.message = message;
    }

    /**
     * Get the code property: The code property.
     *
     * @return the code value.
     */
    @Generated
    public String getCode() {
        return this.code;
    }

    /**
     * Get the message property: The message property.
     *
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the details property: The details property.
     *
     * @return the details value.
     */
    @Generated
    public String getDetails() {
        return this.details;
    }

    /**
     * Get the errors property: The errors property.
     *
     * @return the errors value.
     */
    @Generated
    public Map<String, List<String>> getErrors() {
        return this.errors;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("details", this.details);
        jsonWriter.writeMapField("errors", this.errors,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeString(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiError from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiError if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApiError.
     */
    @Generated
    public static ApiError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String code = null;
            String message = null;
            String details = null;
            Map<String, List<String>> errors = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("code".equals(fieldName)) {
                    code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    message = reader.getString();
                } else if ("details".equals(fieldName)) {
                    details = reader.getString();
                } else if ("errors".equals(fieldName)) {
                    errors = reader.readMap(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            ApiError deserializedApiError = new ApiError(code, message);
            deserializedApiError.details = details;
            deserializedApiError.errors = errors;
            return deserializedApiError;
        });
    }
}
