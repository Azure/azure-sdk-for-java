// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The FileSearchToolCallItemParamResult model.
 */
@Fluent
public final class FileSearchToolCallItemParamResult implements JsonSerializable<FileSearchToolCallItemParamResult> {

    /*
     * The unique ID of the file.
     */
    @Generated
    private String fileId;

    /*
     * The text that was retrieved from the file.
     */
    @Generated
    private String text;

    /*
     * The name of the file.
     */
    @Generated
    private String filename;

    /*
     * The attributes property.
     */
    @Generated
    private VectorStoreFileAttributes attributes;

    /*
     * The relevance score of the file - a value between 0 and 1.
     */
    @Generated
    private Double score;

    /**
     * Creates an instance of FileSearchToolCallItemParamResult class.
     */
    @Generated
    public FileSearchToolCallItemParamResult() {
    }

    /**
     * Get the fileId property: The unique ID of the file.
     *
     * @return the fileId value.
     */
    @Generated
    public String getFileId() {
        return this.fileId;
    }

    /**
     * Set the fileId property: The unique ID of the file.
     *
     * @param fileId the fileId value to set.
     * @return the FileSearchToolCallItemParamResult object itself.
     */
    @Generated
    public FileSearchToolCallItemParamResult setFileId(String fileId) {
        this.fileId = fileId;
        return this;
    }

    /**
     * Get the text property: The text that was retrieved from the file.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Set the text property: The text that was retrieved from the file.
     *
     * @param text the text value to set.
     * @return the FileSearchToolCallItemParamResult object itself.
     */
    @Generated
    public FileSearchToolCallItemParamResult setText(String text) {
        this.text = text;
        return this;
    }

    /**
     * Get the filename property: The name of the file.
     *
     * @return the filename value.
     */
    @Generated
    public String getFilename() {
        return this.filename;
    }

    /**
     * Set the filename property: The name of the file.
     *
     * @param filename the filename value to set.
     * @return the FileSearchToolCallItemParamResult object itself.
     */
    @Generated
    public FileSearchToolCallItemParamResult setFilename(String filename) {
        this.filename = filename;
        return this;
    }

    /**
     * Get the attributes property: The attributes property.
     *
     * @return the attributes value.
     */
    @Generated
    public VectorStoreFileAttributes getAttributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: The attributes property.
     *
     * @param attributes the attributes value to set.
     * @return the FileSearchToolCallItemParamResult object itself.
     */
    @Generated
    public FileSearchToolCallItemParamResult setAttributes(VectorStoreFileAttributes attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the score property: The relevance score of the file - a value between 0 and 1.
     *
     * @return the score value.
     */
    @Generated
    public Double getScore() {
        return this.score;
    }

    /**
     * Set the score property: The relevance score of the file - a value between 0 and 1.
     *
     * @param score the score value to set.
     * @return the FileSearchToolCallItemParamResult object itself.
     */
    @Generated
    public FileSearchToolCallItemParamResult setScore(Double score) {
        this.score = score;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("file_id", this.fileId);
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeStringField("filename", this.filename);
        jsonWriter.writeJsonField("attributes", this.attributes);
        jsonWriter.writeNumberField("score", this.score);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSearchToolCallItemParamResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSearchToolCallItemParamResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileSearchToolCallItemParamResult.
     */
    @Generated
    public static FileSearchToolCallItemParamResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileSearchToolCallItemParamResult deserializedFileSearchToolCallItemParamResult
                = new FileSearchToolCallItemParamResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("file_id".equals(fieldName)) {
                    deserializedFileSearchToolCallItemParamResult.fileId = reader.getString();
                } else if ("text".equals(fieldName)) {
                    deserializedFileSearchToolCallItemParamResult.text = reader.getString();
                } else if ("filename".equals(fieldName)) {
                    deserializedFileSearchToolCallItemParamResult.filename = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    deserializedFileSearchToolCallItemParamResult.attributes
                        = VectorStoreFileAttributes.fromJson(reader);
                } else if ("score".equals(fieldName)) {
                    deserializedFileSearchToolCallItemParamResult.score = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFileSearchToolCallItemParamResult;
        });
    }
}
