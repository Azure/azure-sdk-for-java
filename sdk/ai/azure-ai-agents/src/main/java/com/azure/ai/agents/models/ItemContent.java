// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ItemContent model.
 */
@Immutable
public class ItemContent implements JsonSerializable<ItemContent> {

    /*
     * The type property.
     */
    @Generated
    private ItemContentType type;

    /**
     * Creates an instance of ItemContent class.
     */
    @Generated
    public ItemContent() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    public ItemContentType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ItemContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ItemContent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ItemContent.
     */
    @Generated
    public static ItemContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("input_audio".equals(discriminatorValue)) {
                    return ItemContentInputAudio.fromJson(readerToUse.reset());
                } else if ("output_audio".equals(discriminatorValue)) {
                    return ItemContentOutputAudio.fromJson(readerToUse.reset());
                } else if ("refusal".equals(discriminatorValue)) {
                    return ItemContentRefusal.fromJson(readerToUse.reset());
                } else if ("input_text".equals(discriminatorValue)) {
                    return ItemContentInputText.fromJson(readerToUse.reset());
                } else if ("input_image".equals(discriminatorValue)) {
                    return ItemContentInputImage.fromJson(readerToUse.reset());
                } else if ("input_file".equals(discriminatorValue)) {
                    return ItemContentInputFile.fromJson(readerToUse.reset());
                } else if ("output_text".equals(discriminatorValue)) {
                    return ItemContentOutputText.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ItemContent fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ItemContent deserializedItemContent = new ItemContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedItemContent.type = ItemContentType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedItemContent;
        });
    }
}
