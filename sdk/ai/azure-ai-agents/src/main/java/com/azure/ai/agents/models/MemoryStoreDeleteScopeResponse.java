// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response for deleting memories from a scope.
 */
@Immutable
public final class MemoryStoreDeleteScopeResponse implements JsonSerializable<MemoryStoreDeleteScopeResponse> {

    /*
     * The object type. Always 'memory_store.scope.deleted'.
     */
    @Generated
    private final String object = "memory_store.scope.deleted";

    /*
     * The name of the memory store.
     */
    @Generated
    private final String name;

    /*
     * The scope from which memories were deleted.
     */
    @Generated
    private final String scope;

    /*
     * Whether the deletion operation was successful.
     */
    @Generated
    private final boolean deleted;

    /**
     * Creates an instance of MemoryStoreDeleteScopeResponse class.
     *
     * @param name the name value to set.
     * @param scope the scope value to set.
     * @param deleted the deleted value to set.
     */
    @Generated
    private MemoryStoreDeleteScopeResponse(String name, String scope, boolean deleted) {
        this.name = name;
        this.scope = scope;
        this.deleted = deleted;
    }

    /**
     * Get the object property: The object type. Always 'memory_store.scope.deleted'.
     *
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the name property: The name of the memory store.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the scope property: The scope from which memories were deleted.
     *
     * @return the scope value.
     */
    @Generated
    public String getScope() {
        return this.scope;
    }

    /**
     * Get the deleted property: Whether the deletion operation was successful.
     *
     * @return the deleted value.
     */
    @Generated
    public boolean isDeleted() {
        return this.deleted;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeBooleanField("deleted", this.deleted);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemoryStoreDeleteScopeResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemoryStoreDeleteScopeResponse if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemoryStoreDeleteScopeResponse.
     */
    @Generated
    public static MemoryStoreDeleteScopeResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String scope = null;
            boolean deleted = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    scope = reader.getString();
                } else if ("deleted".equals(fieldName)) {
                    deleted = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            return new MemoryStoreDeleteScopeResponse(name, scope, deleted);
        });
    }
}
