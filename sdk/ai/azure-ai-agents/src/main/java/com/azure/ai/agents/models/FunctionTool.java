// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a function in your own code the model can choose to call. Learn more about [function
 * calling](https://platform.openai.com/docs/guides/function-calling).
 */
@Fluent
public final class FunctionTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.FUNCTION;

    /*
     * The name of the function to call.
     */
    @Generated
    private final String name;

    /*
     * A description of the function. Used by the model to determine whether or not to call the function.
     */
    @Generated
    private String description;

    /*
     * A JSON schema object describing the parameters of the function.
     */
    @Generated
    private final BinaryData parameters;

    /*
     * Whether to enforce strict parameter validation. Default `true`.
     */
    @Generated
    private final Boolean strict;

    /**
     * Creates an instance of FunctionTool class.
     *
     * @param name the name value to set.
     * @param parameters the parameters value to set.
     * @param strict the strict value to set.
     */
    @Generated
    public FunctionTool(String name, BinaryData parameters, Boolean strict) {
        this.name = name;
        this.parameters = parameters;
        this.strict = strict;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the name property: The name of the function to call.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: A description of the function. Used by the model to determine whether or not to
     * call the function.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: A description of the function. Used by the model to determine whether or not to
     * call the function.
     *
     * @param description the description value to set.
     * @return the FunctionTool object itself.
     */
    @Generated
    public FunctionTool setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the parameters property: A JSON schema object describing the parameters of the function.
     *
     * @return the parameters value.
     */
    @Generated
    public BinaryData getParameters() {
        return this.parameters;
    }

    /**
     * Get the strict property: Whether to enforce strict parameter validation. Default `true`.
     *
     * @return the strict value.
     */
    @Generated
    public Boolean isStrict() {
        return this.strict;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeFieldName("parameters");
        this.parameters.writeTo(jsonWriter);
        jsonWriter.writeBooleanField("strict", this.strict);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FunctionTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FunctionTool if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FunctionTool.
     */
    @Generated
    public static FunctionTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            BinaryData parameters = null;
            Boolean strict = null;
            ToolType type = ToolType.FUNCTION;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    parameters
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("strict".equals(fieldName)) {
                    strict = reader.getNullable(JsonReader::getBoolean);
                } else if ("type".equals(fieldName)) {
                    type = ToolType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FunctionTool deserializedFunctionTool = new FunctionTool(name, parameters, strict);
            deserializedFunctionTool.type = type;
            deserializedFunctionTool.description = description;
            return deserializedFunctionTool;
        });
    }
}
