// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A citation to a file.
 */
@Immutable
public final class AnnotationFileCitation extends Annotation {

    /*
     * The type property.
     */
    @Generated
    private AnnotationType type = AnnotationType.FILE_CITATION;

    /*
     * The ID of the file.
     */
    @Generated
    private final String fileId;

    /*
     * The index of the file in the list of files.
     */
    @Generated
    private final int index;

    /*
     * The filename of the file cited.
     */
    @Generated
    private final String filename;

    /**
     * Creates an instance of AnnotationFileCitation class.
     *
     * @param fileId the fileId value to set.
     * @param index the index value to set.
     * @param filename the filename value to set.
     */
    @Generated
    public AnnotationFileCitation(String fileId, int index, String filename) {
        this.fileId = fileId;
        this.index = index;
        this.filename = filename;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public AnnotationType getType() {
        return this.type;
    }

    /**
     * Get the fileId property: The ID of the file.
     *
     * @return the fileId value.
     */
    @Generated
    public String getFileId() {
        return this.fileId;
    }

    /**
     * Get the index property: The index of the file in the list of files.
     *
     * @return the index value.
     */
    @Generated
    public int getIndex() {
        return this.index;
    }

    /**
     * Get the filename property: The filename of the file cited.
     *
     * @return the filename value.
     */
    @Generated
    public String getFilename() {
        return this.filename;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("file_id", this.fileId);
        jsonWriter.writeIntField("index", this.index);
        jsonWriter.writeStringField("filename", this.filename);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnnotationFileCitation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnnotationFileCitation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnnotationFileCitation.
     */
    @Generated
    public static AnnotationFileCitation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fileId = null;
            int index = 0;
            String filename = null;
            AnnotationType type = AnnotationType.FILE_CITATION;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("file_id".equals(fieldName)) {
                    fileId = reader.getString();
                } else if ("index".equals(fieldName)) {
                    index = reader.getInt();
                } else if ("filename".equals(fieldName)) {
                    filename = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = AnnotationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AnnotationFileCitation deserializedAnnotationFileCitation
                = new AnnotationFileCitation(fileId, index, filename);
            deserializedAnnotationFileCitation.type = type;
            return deserializedAnnotationFileCitation;
        });
    }
}
