// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ApproximateLocation model.
 */
@Fluent
public final class ApproximateLocation extends Location {

    /*
     * The type property.
     */
    @Generated
    private LocationType type = LocationType.APPROXIMATE;

    /*
     * The country property.
     */
    @Generated
    private String country;

    /*
     * The region property.
     */
    @Generated
    private String region;

    /*
     * The city property.
     */
    @Generated
    private String city;

    /*
     * The timezone property.
     */
    @Generated
    private String timezone;

    /**
     * Creates an instance of ApproximateLocation class.
     */
    @Generated
    public ApproximateLocation() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public LocationType getType() {
        return this.type;
    }

    /**
     * Get the country property: The country property.
     *
     * @return the country value.
     */
    @Generated
    public String getCountry() {
        return this.country;
    }

    /**
     * Set the country property: The country property.
     *
     * @param country the country value to set.
     * @return the ApproximateLocation object itself.
     */
    @Generated
    public ApproximateLocation setCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the region property: The region property.
     *
     * @return the region value.
     */
    @Generated
    public String getRegion() {
        return this.region;
    }

    /**
     * Set the region property: The region property.
     *
     * @param region the region value to set.
     * @return the ApproximateLocation object itself.
     */
    @Generated
    public ApproximateLocation setRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the city property: The city property.
     *
     * @return the city value.
     */
    @Generated
    public String getCity() {
        return this.city;
    }

    /**
     * Set the city property: The city property.
     *
     * @param city the city value to set.
     * @return the ApproximateLocation object itself.
     */
    @Generated
    public ApproximateLocation setCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the timezone property: The timezone property.
     *
     * @return the timezone value.
     */
    @Generated
    public String getTimezone() {
        return this.timezone;
    }

    /**
     * Set the timezone property: The timezone property.
     *
     * @param timezone the timezone value to set.
     * @return the ApproximateLocation object itself.
     */
    @Generated
    public ApproximateLocation setTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("country", this.country);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeStringField("timezone", this.timezone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApproximateLocation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApproximateLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApproximateLocation.
     */
    @Generated
    public static ApproximateLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApproximateLocation deserializedApproximateLocation = new ApproximateLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedApproximateLocation.type = LocationType.fromString(reader.getString());
                } else if ("country".equals(fieldName)) {
                    deserializedApproximateLocation.country = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedApproximateLocation.region = reader.getString();
                } else if ("city".equals(fieldName)) {
                    deserializedApproximateLocation.city = reader.getString();
                } else if ("timezone".equals(fieldName)) {
                    deserializedApproximateLocation.timezone = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedApproximateLocation;
        });
    }
}
