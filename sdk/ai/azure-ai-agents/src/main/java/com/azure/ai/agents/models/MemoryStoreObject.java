// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Map;

/**
 * A memory store that can store and retrieve user memories.
 */
@Immutable
public final class MemoryStoreObject implements JsonSerializable<MemoryStoreObject> {

    /*
     * The object type, which is always 'memory_store'.
     */
    @Generated
    private final String object = "memory_store";

    /*
     * The unique identifier of the memory store.
     */
    @Generated
    private final String id;

    /*
     * The Unix timestamp (seconds) when the memory store was created.
     */
    @Generated
    private final long createdAt;

    /*
     * The Unix timestamp (seconds) when the memory store was last updated.
     */
    @Generated
    private final long updatedAt;

    /*
     * The name of the memory store.
     */
    @Generated
    private final String name;

    /*
     * A human-readable description of the memory store.
     */
    @Generated
    private String description;

    /*
     * Arbitrary key-value metadata to associate with the memory store.
     */
    @Generated
    private Map<String, String> metadata;

    /*
     * The definition of the memory store.
     */
    @Generated
    private final MemoryStoreDefinition definition;

    /**
     * Creates an instance of MemoryStoreObject class.
     *
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param updatedAt the updatedAt value to set.
     * @param name the name value to set.
     * @param definition the definition value to set.
     */
    @Generated
    private MemoryStoreObject(String id, OffsetDateTime createdAt, OffsetDateTime updatedAt, String name,
        MemoryStoreDefinition definition) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        if (updatedAt == null) {
            this.updatedAt = 0L;
        } else {
            this.updatedAt = updatedAt.toEpochSecond();
        }
        this.name = name;
        this.definition = definition;
    }

    /**
     * Get the object property: The object type, which is always 'memory_store'.
     *
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the id property: The unique identifier of the memory store.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the createdAt property: The Unix timestamp (seconds) when the memory store was created.
     *
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the updatedAt property: The Unix timestamp (seconds) when the memory store was last updated.
     *
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.updatedAt), ZoneOffset.UTC);
    }

    /**
     * Get the name property: The name of the memory store.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: A human-readable description of the memory store.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the metadata property: Arbitrary key-value metadata to associate with the memory store.
     *
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the definition property: The definition of the memory store.
     *
     * @return the definition value.
     */
    @Generated
    public MemoryStoreDefinition getDefinition() {
        return this.definition;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeLongField("updated_at", this.updatedAt);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("definition", this.definition);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemoryStoreObject from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemoryStoreObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemoryStoreObject.
     */
    @Generated
    public static MemoryStoreObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            OffsetDateTime updatedAt = null;
            String name = null;
            MemoryStoreDefinition definition = null;
            String description = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("updated_at".equals(fieldName)) {
                    updatedAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("definition".equals(fieldName)) {
                    definition = MemoryStoreDefinition.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            MemoryStoreObject deserializedMemoryStoreObject
                = new MemoryStoreObject(id, createdAt, updatedAt, name, definition);
            deserializedMemoryStoreObject.description = description;
            deserializedMemoryStoreObject.metadata = metadata;
            return deserializedMemoryStoreObject;
        });
    }
}
