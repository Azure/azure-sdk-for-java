// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration for Responsible AI (RAI) content filtering and safety features.
 */
@Immutable
public final class RaiConfig implements JsonSerializable<RaiConfig> {

    /*
     * The name of the RAI policy to apply.
     */
    @Generated
    private final String raiPolicyName;

    /**
     * Creates an instance of RaiConfig class.
     *
     * @param raiPolicyName the raiPolicyName value to set.
     */
    @Generated
    public RaiConfig(String raiPolicyName) {
        this.raiPolicyName = raiPolicyName;
    }

    /**
     * Get the raiPolicyName property: The name of the RAI policy to apply.
     *
     * @return the raiPolicyName value.
     */
    @Generated
    public String getRaiPolicyName() {
        return this.raiPolicyName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rai_policy_name", this.raiPolicyName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RaiConfig from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RaiConfig if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RaiConfig.
     */
    @Generated
    public static RaiConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String raiPolicyName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("rai_policy_name".equals(fieldName)) {
                    raiPolicyName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new RaiConfig(raiPolicyName);
        });
    }
}
