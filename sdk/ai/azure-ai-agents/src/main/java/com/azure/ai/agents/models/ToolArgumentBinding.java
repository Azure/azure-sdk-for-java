// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ToolArgumentBinding model.
 */
@Fluent
public final class ToolArgumentBinding implements JsonSerializable<ToolArgumentBinding> {

    /*
     * The name of the tool to participate in the argument binding. If not provided, then all tools with matching
     * arguments will participate in binding.
     */
    @Generated
    private String toolName;

    /*
     * The name of the argument within the tool.
     */
    @Generated
    private final String argumentName;

    /**
     * Creates an instance of ToolArgumentBinding class.
     *
     * @param argumentName the argumentName value to set.
     */
    @Generated
    public ToolArgumentBinding(String argumentName) {
        this.argumentName = argumentName;
    }

    /**
     * Get the toolName property: The name of the tool to participate in the argument binding. If not provided, then all
     * tools with matching arguments will participate in binding.
     *
     * @return the toolName value.
     */
    @Generated
    public String getToolName() {
        return this.toolName;
    }

    /**
     * Set the toolName property: The name of the tool to participate in the argument binding. If not provided, then all
     * tools with matching arguments will participate in binding.
     *
     * @param toolName the toolName value to set.
     * @return the ToolArgumentBinding object itself.
     */
    @Generated
    public ToolArgumentBinding setToolName(String toolName) {
        this.toolName = toolName;
        return this;
    }

    /**
     * Get the argumentName property: The name of the argument within the tool.
     *
     * @return the argumentName value.
     */
    @Generated
    public String getArgumentName() {
        return this.argumentName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("argument_name", this.argumentName);
        jsonWriter.writeStringField("tool_name", this.toolName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ToolArgumentBinding from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ToolArgumentBinding if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ToolArgumentBinding.
     */
    @Generated
    public static ToolArgumentBinding fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String argumentName = null;
            String toolName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("argument_name".equals(fieldName)) {
                    argumentName = reader.getString();
                } else if ("tool_name".equals(fieldName)) {
                    toolName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ToolArgumentBinding deserializedToolArgumentBinding = new ToolArgumentBinding(argumentName);
            deserializedToolArgumentBinding.toolName = toolName;
            return deserializedToolArgumentBinding;
        });
    }
}
