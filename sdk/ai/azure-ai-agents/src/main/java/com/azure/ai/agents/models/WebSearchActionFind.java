// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Action type "find": Searches for a pattern within a loaded page.
 */
@Immutable
public final class WebSearchActionFind extends WebSearchAction {

    /*
     * The type property.
     */
    @Generated
    private WebSearchActionType type = WebSearchActionType.FIND;

    /*
     * The URL of the page searched for the pattern.
     */
    @Generated
    private final String url;

    /*
     * The pattern or text to search for within the page.
     */
    @Generated
    private final String pattern;

    /**
     * Creates an instance of WebSearchActionFind class.
     *
     * @param url the url value to set.
     * @param pattern the pattern value to set.
     */
    @Generated
    public WebSearchActionFind(String url, String pattern) {
        this.url = url;
        this.pattern = pattern;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public WebSearchActionType getType() {
        return this.type;
    }

    /**
     * Get the url property: The URL of the page searched for the pattern.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the pattern property: The pattern or text to search for within the page.
     *
     * @return the pattern value.
     */
    @Generated
    public String getPattern() {
        return this.pattern;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("pattern", this.pattern);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebSearchActionFind from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebSearchActionFind if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebSearchActionFind.
     */
    @Generated
    public static WebSearchActionFind fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String url = null;
            String pattern = null;
            WebSearchActionType type = WebSearchActionType.FIND;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("pattern".equals(fieldName)) {
                    pattern = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = WebSearchActionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            WebSearchActionFind deserializedWebSearchActionFind = new WebSearchActionFind(url, pattern);
            deserializedWebSearchActionFind.type = type;
            return deserializedWebSearchActionFind;
        });
    }
}
