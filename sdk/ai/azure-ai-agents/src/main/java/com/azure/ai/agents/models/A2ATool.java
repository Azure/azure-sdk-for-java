// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An agent implementing the A2A protocol.
 */
@Fluent
public final class A2ATool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.A2A_PREVIEW;

    /*
     * Base URL of the agent.
     */
    @Generated
    private String baseUrl;

    /*
     * The path to the agent card relative to the `base_url`.
     * If not provided, defaults to `/.well-known/agent-card.json`
     */
    @Generated
    private String agentCardPath;

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the baseUrl property: Base URL of the agent.
     *
     * @return the baseUrl value.
     */
    @Generated
    public String getBaseUrl() {
        return this.baseUrl;
    }

    /**
     * Get the agentCardPath property: The path to the agent card relative to the `base_url`.
     * If not provided, defaults to `/.well-known/agent-card.json`.
     *
     * @return the agentCardPath value.
     */
    @Generated
    public String getAgentCardPath() {
        return this.agentCardPath;
    }

    /**
     * Set the agentCardPath property: The path to the agent card relative to the `base_url`.
     * If not provided, defaults to `/.well-known/agent-card.json`.
     *
     * @param agentCardPath the agentCardPath value to set.
     * @return the A2ATool object itself.
     */
    @Generated
    public A2ATool setAgentCardPath(String agentCardPath) {
        this.agentCardPath = agentCardPath;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("base_url", this.baseUrl);
        jsonWriter.writeStringField("agent_card_path", this.agentCardPath);
        jsonWriter.writeStringField("project_connection_id", this.projectConnectionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of A2ATool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of A2ATool if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the A2ATool.
     */
    @Generated
    public static A2ATool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            A2ATool deserializedA2ATool = new A2ATool();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedA2ATool.type = ToolType.fromString(reader.getString());
                } else if ("base_url".equals(fieldName)) {
                    deserializedA2ATool.baseUrl = reader.getString();
                } else if ("agent_card_path".equals(fieldName)) {
                    deserializedA2ATool.agentCardPath = reader.getString();
                } else if ("project_connection_id".equals(fieldName)) {
                    deserializedA2ATool.projectConnectionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedA2ATool;
        });
    }

    /*
     * The connection ID in the project for the A2A server.
     * The connection stores authentication and other connection details needed to connect to the A2A server.
     */
    @Generated
    private String projectConnectionId;

    /**
     * Creates an instance of A2ATool class.
     */
    @Generated
    public A2ATool() {
    }

    /**
     * Set the baseUrl property: Base URL of the agent.
     *
     * @param baseUrl the baseUrl value to set.
     * @return the A2ATool object itself.
     */
    @Generated
    public A2ATool setBaseUrl(String baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }

    /**
     * Get the projectConnectionId property: The connection ID in the project for the A2A server.
     * The connection stores authentication and other connection details needed to connect to the A2A server.
     *
     * @return the projectConnectionId value.
     */
    @Generated
    public String getProjectConnectionId() {
        return this.projectConnectionId;
    }

    /**
     * Set the projectConnectionId property: The connection ID in the project for the A2A server.
     * The connection stores authentication and other connection details needed to connect to the A2A server.
     *
     * @param projectConnectionId the projectConnectionId value to set.
     * @return the A2ATool object itself.
     */
    @Generated
    public A2ATool setProjectConnectionId(String projectConnectionId) {
        this.projectConnectionId = projectConnectionId;
        return this;
    }
}
