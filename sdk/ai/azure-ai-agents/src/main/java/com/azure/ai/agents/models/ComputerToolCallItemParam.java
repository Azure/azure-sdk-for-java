// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A tool call to a computer use tool. See the
 * [computer use guide](/docs/guides/tools-computer-use) for more information.
 */
@Immutable
public final class ComputerToolCallItemParam extends ItemParam {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.COMPUTER_CALL;

    /*
     * An identifier used when responding to the tool call with output.
     */
    @Generated
    private final String callId;

    /*
     * The action property.
     */
    @Generated
    private final ComputerAction action;

    /*
     * The pending safety checks for the computer call.
     */
    @Generated
    private final List<ComputerToolCallSafetyCheck> pendingSafetyChecks;

    /**
     * Creates an instance of ComputerToolCallItemParam class.
     *
     * @param callId the callId value to set.
     * @param action the action value to set.
     * @param pendingSafetyChecks the pendingSafetyChecks value to set.
     */
    @Generated
    public ComputerToolCallItemParam(String callId, ComputerAction action,
        List<ComputerToolCallSafetyCheck> pendingSafetyChecks) {
        this.callId = callId;
        this.action = action;
        this.pendingSafetyChecks = pendingSafetyChecks;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the callId property: An identifier used when responding to the tool call with output.
     *
     * @return the callId value.
     */
    @Generated
    public String getCallId() {
        return this.callId;
    }

    /**
     * Get the action property: The action property.
     *
     * @return the action value.
     */
    @Generated
    public ComputerAction getAction() {
        return this.action;
    }

    /**
     * Get the pendingSafetyChecks property: The pending safety checks for the computer call.
     *
     * @return the pendingSafetyChecks value.
     */
    @Generated
    public List<ComputerToolCallSafetyCheck> getPendingSafetyChecks() {
        return this.pendingSafetyChecks;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("call_id", this.callId);
        jsonWriter.writeJsonField("action", this.action);
        jsonWriter.writeArrayField("pending_safety_checks", this.pendingSafetyChecks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputerToolCallItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputerToolCallItemParam if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComputerToolCallItemParam.
     */
    @Generated
    public static ComputerToolCallItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String callId = null;
            ComputerAction action = null;
            List<ComputerToolCallSafetyCheck> pendingSafetyChecks = null;
            ItemType type = ItemType.COMPUTER_CALL;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("call_id".equals(fieldName)) {
                    callId = reader.getString();
                } else if ("action".equals(fieldName)) {
                    action = ComputerAction.fromJson(reader);
                } else if ("pending_safety_checks".equals(fieldName)) {
                    pendingSafetyChecks = reader.readArray(reader1 -> ComputerToolCallSafetyCheck.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ComputerToolCallItemParam deserializedComputerToolCallItemParam
                = new ComputerToolCallItemParam(callId, action, pendingSafetyChecks);
            deserializedComputerToolCallItemParam.type = type;
            return deserializedComputerToolCallItemParam;
        });
    }
}
