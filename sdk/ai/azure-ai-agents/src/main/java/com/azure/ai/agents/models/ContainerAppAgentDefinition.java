// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The container app agent definition.
 */
@Fluent
public final class ContainerAppAgentDefinition extends AgentDefinition {

    /*
     * The kind property.
     */
    @Generated
    private AgentKind kind = AgentKind.CONTAINER_APP;

    /*
     * The protocols that the agent supports for ingress communication of the containers.
     */
    @Generated
    private final List<ProtocolVersionRecord> containerProtocolVersions;

    /*
     * The resource ID of the Azure Container App that hosts this agent. Not mutable across versions.
     */
    @Generated
    private final String containerAppResourceId;

    /*
     * The suffix to apply to the app subdomain when sending ingress to the agent. This can be a label (e.g.,
     * '---current'), a specific revision (e.g., '--0000001'), or empty to use the default endpoint for the container
     * app.
     */
    @Generated
    private final String ingressSubdomainSuffix;

    /**
     * Creates an instance of ContainerAppAgentDefinition class.
     *
     * @param containerProtocolVersions the containerProtocolVersions value to set.
     * @param containerAppResourceId the containerAppResourceId value to set.
     * @param ingressSubdomainSuffix the ingressSubdomainSuffix value to set.
     */
    @Generated
    public ContainerAppAgentDefinition(List<ProtocolVersionRecord> containerProtocolVersions,
        String containerAppResourceId, String ingressSubdomainSuffix) {
        this.containerProtocolVersions = containerProtocolVersions;
        this.containerAppResourceId = containerAppResourceId;
        this.ingressSubdomainSuffix = ingressSubdomainSuffix;
    }

    /**
     * Get the kind property: The kind property.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public AgentKind getKind() {
        return this.kind;
    }

    /**
     * Get the containerProtocolVersions property: The protocols that the agent supports for ingress communication of
     * the containers.
     *
     * @return the containerProtocolVersions value.
     */
    @Generated
    public List<ProtocolVersionRecord> getContainerProtocolVersions() {
        return this.containerProtocolVersions;
    }

    /**
     * Get the containerAppResourceId property: The resource ID of the Azure Container App that hosts this agent. Not
     * mutable across versions.
     *
     * @return the containerAppResourceId value.
     */
    @Generated
    public String getContainerAppResourceId() {
        return this.containerAppResourceId;
    }

    /**
     * Get the ingressSubdomainSuffix property: The suffix to apply to the app subdomain when sending ingress to the
     * agent. This can be a label (e.g., '---current'), a specific revision (e.g., '--0000001'), or empty to use the
     * default endpoint for the container app.
     *
     * @return the ingressSubdomainSuffix value.
     */
    @Generated
    public String getIngressSubdomainSuffix() {
        return this.ingressSubdomainSuffix;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ContainerAppAgentDefinition setRaiConfig(RaiConfig raiConfig) {
        super.setRaiConfig(raiConfig);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("rai_config", getRaiConfig());
        jsonWriter.writeArrayField("container_protocol_versions", this.containerProtocolVersions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("container_app_resource_id", this.containerAppResourceId);
        jsonWriter.writeStringField("ingress_subdomain_suffix", this.ingressSubdomainSuffix);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerAppAgentDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerAppAgentDefinition if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerAppAgentDefinition.
     */
    @Generated
    public static ContainerAppAgentDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RaiConfig raiConfig = null;
            List<ProtocolVersionRecord> containerProtocolVersions = null;
            String containerAppResourceId = null;
            String ingressSubdomainSuffix = null;
            AgentKind kind = AgentKind.CONTAINER_APP;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("rai_config".equals(fieldName)) {
                    raiConfig = RaiConfig.fromJson(reader);
                } else if ("container_protocol_versions".equals(fieldName)) {
                    containerProtocolVersions = reader.readArray(reader1 -> ProtocolVersionRecord.fromJson(reader1));
                } else if ("container_app_resource_id".equals(fieldName)) {
                    containerAppResourceId = reader.getString();
                } else if ("ingress_subdomain_suffix".equals(fieldName)) {
                    ingressSubdomainSuffix = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = AgentKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ContainerAppAgentDefinition deserializedContainerAppAgentDefinition = new ContainerAppAgentDefinition(
                containerProtocolVersions, containerAppResourceId, ingressSubdomainSuffix);
            deserializedContainerAppAgentDefinition.setRaiConfig(raiConfig);
            deserializedContainerAppAgentDefinition.kind = kind;
            return deserializedContainerAppAgentDefinition;
        });
    }
}
