// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * **o-series models only**
 *
 * Configuration options for
 * [reasoning models](https://platform.openai.com/docs/guides/reasoning).
 */
@Fluent
public final class Reasoning implements JsonSerializable<Reasoning> {

    /*
     * The effort property.
     */
    @Generated
    private ReasoningEffort effort;

    /*
     * A summary of the reasoning performed by the model. This can be
     * useful for debugging and understanding the model's reasoning process.
     * One of `auto`, `concise`, or `detailed`.
     */
    @Generated
    private ReasoningSummary summary;

    /*
     * **Deprecated:** use `summary` instead.
     * 
     * A summary of the reasoning performed by the model. This can be
     * useful for debugging and understanding the model's reasoning process.
     * One of `auto`, `concise`, or `detailed`.
     */
    @Generated
    private ReasoningGenerateSummary generateSummary;

    /**
     * Creates an instance of Reasoning class.
     */
    @Generated
    public Reasoning() {
    }

    /**
     * Get the effort property: The effort property.
     *
     * @return the effort value.
     */
    @Generated
    public ReasoningEffort getEffort() {
        return this.effort;
    }

    /**
     * Set the effort property: The effort property.
     *
     * @param effort the effort value to set.
     * @return the Reasoning object itself.
     */
    @Generated
    public Reasoning setEffort(ReasoningEffort effort) {
        this.effort = effort;
        return this;
    }

    /**
     * Get the summary property: A summary of the reasoning performed by the model. This can be
     * useful for debugging and understanding the model's reasoning process.
     * One of `auto`, `concise`, or `detailed`.
     *
     * @return the summary value.
     */
    @Generated
    public ReasoningSummary getSummary() {
        return this.summary;
    }

    /**
     * Set the summary property: A summary of the reasoning performed by the model. This can be
     * useful for debugging and understanding the model's reasoning process.
     * One of `auto`, `concise`, or `detailed`.
     *
     * @param summary the summary value to set.
     * @return the Reasoning object itself.
     */
    @Generated
    public Reasoning setSummary(ReasoningSummary summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the generateSummary property: **Deprecated:** use `summary` instead.
     *
     * A summary of the reasoning performed by the model. This can be
     * useful for debugging and understanding the model's reasoning process.
     * One of `auto`, `concise`, or `detailed`.
     *
     * @return the generateSummary value.
     */
    @Generated
    public ReasoningGenerateSummary getGenerateSummary() {
        return this.generateSummary;
    }

    /**
     * Set the generateSummary property: **Deprecated:** use `summary` instead.
     *
     * A summary of the reasoning performed by the model. This can be
     * useful for debugging and understanding the model's reasoning process.
     * One of `auto`, `concise`, or `detailed`.
     *
     * @param generateSummary the generateSummary value to set.
     * @return the Reasoning object itself.
     */
    @Generated
    public Reasoning setGenerateSummary(ReasoningGenerateSummary generateSummary) {
        this.generateSummary = generateSummary;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("effort", this.effort == null ? null : this.effort.toString());
        jsonWriter.writeStringField("summary", this.summary == null ? null : this.summary.toString());
        jsonWriter.writeStringField("generate_summary",
            this.generateSummary == null ? null : this.generateSummary.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Reasoning from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Reasoning if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Reasoning.
     */
    @Generated
    public static Reasoning fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Reasoning deserializedReasoning = new Reasoning();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("effort".equals(fieldName)) {
                    deserializedReasoning.effort = ReasoningEffort.fromString(reader.getString());
                } else if ("summary".equals(fieldName)) {
                    deserializedReasoning.summary = ReasoningSummary.fromString(reader.getString());
                } else if ("generate_summary".equals(fieldName)) {
                    deserializedReasoning.generateSummary = ReasoningGenerateSummary.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedReasoning;
        });
    }
}
