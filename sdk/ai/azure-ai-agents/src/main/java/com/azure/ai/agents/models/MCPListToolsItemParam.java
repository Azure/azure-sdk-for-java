// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A list of tools available on an MCP server.
 */
@Fluent
public final class MCPListToolsItemParam extends ItemParam {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.MCP_LIST_TOOLS;

    /*
     * The label of the MCP server.
     */
    @Generated
    private final String serverLabel;

    /*
     * The tools available on the server.
     */
    @Generated
    private final List<MCPListToolsTool> tools;

    /*
     * Error message if the server could not list tools.
     */
    @Generated
    private String error;

    /**
     * Creates an instance of MCPListToolsItemParam class.
     *
     * @param serverLabel the serverLabel value to set.
     * @param tools the tools value to set.
     */
    @Generated
    public MCPListToolsItemParam(String serverLabel, List<MCPListToolsTool> tools) {
        this.serverLabel = serverLabel;
        this.tools = tools;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the serverLabel property: The label of the MCP server.
     *
     * @return the serverLabel value.
     */
    @Generated
    public String getServerLabel() {
        return this.serverLabel;
    }

    /**
     * Get the tools property: The tools available on the server.
     *
     * @return the tools value.
     */
    @Generated
    public List<MCPListToolsTool> getTools() {
        return this.tools;
    }

    /**
     * Get the error property: Error message if the server could not list tools.
     *
     * @return the error value.
     */
    @Generated
    public String getError() {
        return this.error;
    }

    /**
     * Set the error property: Error message if the server could not list tools.
     *
     * @param error the error value to set.
     * @return the MCPListToolsItemParam object itself.
     */
    @Generated
    public MCPListToolsItemParam setError(String error) {
        this.error = error;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("server_label", this.serverLabel);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPListToolsItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPListToolsItemParam if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MCPListToolsItemParam.
     */
    @Generated
    public static MCPListToolsItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serverLabel = null;
            List<MCPListToolsTool> tools = null;
            ItemType type = ItemType.MCP_LIST_TOOLS;
            String error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("server_label".equals(fieldName)) {
                    serverLabel = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> MCPListToolsTool.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else if ("error".equals(fieldName)) {
                    error = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MCPListToolsItemParam deserializedMCPListToolsItemParam = new MCPListToolsItemParam(serverLabel, tools);
            deserializedMCPListToolsItemParam.type = type;
            deserializedMCPListToolsItemParam.error = error;
            return deserializedMCPListToolsItemParam;
        });
    }
}
