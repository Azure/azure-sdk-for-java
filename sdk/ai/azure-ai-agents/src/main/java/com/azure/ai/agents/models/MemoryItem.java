// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * A single memory item stored in the memory store, containing content and metadata.
 */
@Immutable
public class MemoryItem implements JsonSerializable<MemoryItem> {

    /*
     * The kind of the memory item.
     */
    @Generated
    private MemoryItemKind kind = MemoryItemKind.fromString("MemoryItem");

    /*
     * The unique ID of the memory item.
     */
    @Generated
    private final String memoryId;

    /*
     * The last update time of the memory item.
     */
    @Generated
    private final long updatedAt;

    /*
     * The namespace that logically groups and isolates memories, such as a user ID.
     */
    @Generated
    private final String scope;

    /*
     * The content of the memory.
     */
    @Generated
    private final String content;

    /**
     * Creates an instance of MemoryItem class.
     *
     * @param memoryId the memoryId value to set.
     * @param updatedAt the updatedAt value to set.
     * @param scope the scope value to set.
     * @param content the content value to set.
     */
    @Generated
    public MemoryItem(String memoryId, OffsetDateTime updatedAt, String scope, String content) {
        this.memoryId = memoryId;
        if (updatedAt == null) {
            this.updatedAt = 0L;
        } else {
            this.updatedAt = updatedAt.toEpochSecond();
        }
        this.scope = scope;
        this.content = content;
    }

    /**
     * Get the kind property: The kind of the memory item.
     *
     * @return the kind value.
     */
    @Generated
    public MemoryItemKind getKind() {
        return this.kind;
    }

    /**
     * Get the memoryId property: The unique ID of the memory item.
     *
     * @return the memoryId value.
     */
    @Generated
    public String getMemoryId() {
        return this.memoryId;
    }

    /**
     * Get the updatedAt property: The last update time of the memory item.
     *
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.updatedAt), ZoneOffset.UTC);
    }

    /**
     * Get the scope property: The namespace that logically groups and isolates memories, such as a user ID.
     *
     * @return the scope value.
     */
    @Generated
    public String getScope() {
        return this.scope;
    }

    /**
     * Get the content property: The content of the memory.
     *
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("memory_id", this.memoryId);
        jsonWriter.writeLongField("updated_at", this.updatedAt);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemoryItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemoryItem if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemoryItem.
     */
    @Generated
    public static MemoryItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("user_profile".equals(discriminatorValue)) {
                    return UserProfileMemoryItem.fromJson(readerToUse.reset());
                } else if ("chat_summary".equals(discriminatorValue)) {
                    return ChatSummaryMemoryItem.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static MemoryItem fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String memoryId = null;
            OffsetDateTime updatedAt = null;
            String scope = null;
            String content = null;
            MemoryItemKind kind = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("memory_id".equals(fieldName)) {
                    memoryId = reader.getString();
                } else if ("updated_at".equals(fieldName)) {
                    updatedAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("scope".equals(fieldName)) {
                    scope = reader.getString();
                } else if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MemoryItemKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            MemoryItem deserializedMemoryItem = new MemoryItem(memoryId, updatedAt, scope, content);
            deserializedMemoryItem.kind = kind;
            return deserializedMemoryItem;
        });
    }
}
