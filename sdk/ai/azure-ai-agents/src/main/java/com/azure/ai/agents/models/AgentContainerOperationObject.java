// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The container operation for a specific version of an agent.
 */
@Immutable
public final class AgentContainerOperationObject implements JsonSerializable<AgentContainerOperationObject> {

    /*
     * The ID of the container operation. This id is unique identifier across the system.
     */
    @Generated
    private final String id;

    /*
     * The ID of the agent.
     */
    @Generated
    private final String agentId;

    /*
     * The ID of the agent version.
     */
    @Generated
    private final String agentVersionId;

    /*
     * The status of the container operation.
     */
    @Generated
    private final AgentContainerOperationStatus status;

    /*
     * The error of the container operation, if any.
     */
    @Generated
    private AgentContainerOperationError error;

    /*
     * The container of the specific version of an agent.
     */
    @Generated
    private AgentContainerObject container;

    /**
     * Creates an instance of AgentContainerOperationObject class.
     *
     * @param id the id value to set.
     * @param agentId the agentId value to set.
     * @param agentVersionId the agentVersionId value to set.
     * @param status the status value to set.
     */
    @Generated
    private AgentContainerOperationObject(String id, String agentId, String agentVersionId,
        AgentContainerOperationStatus status) {
        this.id = id;
        this.agentId = agentId;
        this.agentVersionId = agentVersionId;
        this.status = status;
    }

    /**
     * Get the id property: The ID of the container operation. This id is unique identifier across the system.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the agentId property: The ID of the agent.
     *
     * @return the agentId value.
     */
    @Generated
    public String getAgentId() {
        return this.agentId;
    }

    /**
     * Get the agentVersionId property: The ID of the agent version.
     *
     * @return the agentVersionId value.
     */
    @Generated
    public String getAgentVersionId() {
        return this.agentVersionId;
    }

    /**
     * Get the status property: The status of the container operation.
     *
     * @return the status value.
     */
    @Generated
    public AgentContainerOperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the error property: The error of the container operation, if any.
     *
     * @return the error value.
     */
    @Generated
    public AgentContainerOperationError getError() {
        return this.error;
    }

    /**
     * Get the container property: The container of the specific version of an agent.
     *
     * @return the container value.
     */
    @Generated
    public AgentContainerObject getContainer() {
        return this.container;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("agent_id", this.agentId);
        jsonWriter.writeStringField("agent_version_id", this.agentVersionId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeJsonField("container", this.container);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentContainerOperationObject from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentContainerOperationObject if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentContainerOperationObject.
     */
    @Generated
    public static AgentContainerOperationObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String agentId = null;
            String agentVersionId = null;
            AgentContainerOperationStatus status = null;
            AgentContainerOperationError error = null;
            AgentContainerObject container = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("agent_id".equals(fieldName)) {
                    agentId = reader.getString();
                } else if ("agent_version_id".equals(fieldName)) {
                    agentVersionId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = AgentContainerOperationStatus.fromString(reader.getString());
                } else if ("error".equals(fieldName)) {
                    error = AgentContainerOperationError.fromJson(reader);
                } else if ("container".equals(fieldName)) {
                    container = AgentContainerObject.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            AgentContainerOperationObject deserializedAgentContainerOperationObject
                = new AgentContainerOperationObject(id, agentId, agentVersionId, status);
            deserializedAgentContainerOperationObject.error = error;
            deserializedAgentContainerOperationObject.container = container;
            return deserializedAgentContainerOperationObject;
        });
    }
}
