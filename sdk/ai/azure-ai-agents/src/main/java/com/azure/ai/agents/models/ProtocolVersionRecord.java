// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A record mapping for a single protocol and its version.
 */
@Immutable
public final class ProtocolVersionRecord implements JsonSerializable<ProtocolVersionRecord> {

    /*
     * The protocol type.
     */
    @Generated
    private final AgentProtocol protocol;

    /*
     * The version string for the protocol, e.g. 'v0.1.1'.
     */
    @Generated
    private final String version;

    /**
     * Creates an instance of ProtocolVersionRecord class.
     *
     * @param protocol the protocol value to set.
     * @param version the version value to set.
     */
    @Generated
    public ProtocolVersionRecord(AgentProtocol protocol, String version) {
        this.protocol = protocol;
        this.version = version;
    }

    /**
     * Get the protocol property: The protocol type.
     *
     * @return the protocol value.
     */
    @Generated
    public AgentProtocol getProtocol() {
        return this.protocol;
    }

    /**
     * Get the version property: The version string for the protocol, e.g. 'v0.1.1'.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProtocolVersionRecord from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProtocolVersionRecord if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProtocolVersionRecord.
     */
    @Generated
    public static ProtocolVersionRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentProtocol protocol = null;
            String version = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("protocol".equals(fieldName)) {
                    protocol = AgentProtocol.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ProtocolVersionRecord(protocol, version);
        });
    }
}
