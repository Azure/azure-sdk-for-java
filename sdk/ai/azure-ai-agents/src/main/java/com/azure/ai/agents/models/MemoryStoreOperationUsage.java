// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Usage statistics of a memory store operation.
 */
@Immutable
public final class MemoryStoreOperationUsage implements JsonSerializable<MemoryStoreOperationUsage> {

    /*
     * The number of embedding tokens.
     */
    @Generated
    private final int embeddingTokens;

    /*
     * The number of input tokens.
     */
    @Generated
    private final int inputTokens;

    /*
     * A detailed breakdown of the input tokens.
     */
    @Generated
    private final MemoryStoreOperationUsageInputTokensDetails inputTokensDetails;

    /*
     * The number of output tokens.
     */
    @Generated
    private final int outputTokens;

    /*
     * A detailed breakdown of the output tokens.
     */
    @Generated
    private final MemoryStoreOperationUsageOutputTokensDetails outputTokensDetails;

    /*
     * The total number of tokens used.
     */
    @Generated
    private final int totalTokens;

    /**
     * Creates an instance of MemoryStoreOperationUsage class.
     *
     * @param embeddingTokens the embeddingTokens value to set.
     * @param inputTokens the inputTokens value to set.
     * @param inputTokensDetails the inputTokensDetails value to set.
     * @param outputTokens the outputTokens value to set.
     * @param outputTokensDetails the outputTokensDetails value to set.
     * @param totalTokens the totalTokens value to set.
     */
    @Generated
    private MemoryStoreOperationUsage(int embeddingTokens, int inputTokens,
        MemoryStoreOperationUsageInputTokensDetails inputTokensDetails, int outputTokens,
        MemoryStoreOperationUsageOutputTokensDetails outputTokensDetails, int totalTokens) {
        this.embeddingTokens = embeddingTokens;
        this.inputTokens = inputTokens;
        this.inputTokensDetails = inputTokensDetails;
        this.outputTokens = outputTokens;
        this.outputTokensDetails = outputTokensDetails;
        this.totalTokens = totalTokens;
    }

    /**
     * Get the embeddingTokens property: The number of embedding tokens.
     *
     * @return the embeddingTokens value.
     */
    @Generated
    public int getEmbeddingTokens() {
        return this.embeddingTokens;
    }

    /**
     * Get the inputTokens property: The number of input tokens.
     *
     * @return the inputTokens value.
     */
    @Generated
    public int getInputTokens() {
        return this.inputTokens;
    }

    /**
     * Get the inputTokensDetails property: A detailed breakdown of the input tokens.
     *
     * @return the inputTokensDetails value.
     */
    @Generated
    public MemoryStoreOperationUsageInputTokensDetails getInputTokensDetails() {
        return this.inputTokensDetails;
    }

    /**
     * Get the outputTokens property: The number of output tokens.
     *
     * @return the outputTokens value.
     */
    @Generated
    public int getOutputTokens() {
        return this.outputTokens;
    }

    /**
     * Get the outputTokensDetails property: A detailed breakdown of the output tokens.
     *
     * @return the outputTokensDetails value.
     */
    @Generated
    public MemoryStoreOperationUsageOutputTokensDetails getOutputTokensDetails() {
        return this.outputTokensDetails;
    }

    /**
     * Get the totalTokens property: The total number of tokens used.
     *
     * @return the totalTokens value.
     */
    @Generated
    public int getTotalTokens() {
        return this.totalTokens;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("embedding_tokens", this.embeddingTokens);
        jsonWriter.writeIntField("input_tokens", this.inputTokens);
        jsonWriter.writeJsonField("input_tokens_details", this.inputTokensDetails);
        jsonWriter.writeIntField("output_tokens", this.outputTokens);
        jsonWriter.writeJsonField("output_tokens_details", this.outputTokensDetails);
        jsonWriter.writeIntField("total_tokens", this.totalTokens);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemoryStoreOperationUsage from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemoryStoreOperationUsage if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemoryStoreOperationUsage.
     */
    @Generated
    public static MemoryStoreOperationUsage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int embeddingTokens = 0;
            int inputTokens = 0;
            MemoryStoreOperationUsageInputTokensDetails inputTokensDetails = null;
            int outputTokens = 0;
            MemoryStoreOperationUsageOutputTokensDetails outputTokensDetails = null;
            int totalTokens = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("embedding_tokens".equals(fieldName)) {
                    embeddingTokens = reader.getInt();
                } else if ("input_tokens".equals(fieldName)) {
                    inputTokens = reader.getInt();
                } else if ("input_tokens_details".equals(fieldName)) {
                    inputTokensDetails = MemoryStoreOperationUsageInputTokensDetails.fromJson(reader);
                } else if ("output_tokens".equals(fieldName)) {
                    outputTokens = reader.getInt();
                } else if ("output_tokens_details".equals(fieldName)) {
                    outputTokensDetails = MemoryStoreOperationUsageOutputTokensDetails.fromJson(reader);
                } else if ("total_tokens".equals(fieldName)) {
                    totalTokens = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new MemoryStoreOperationUsage(embeddingTokens, inputTokens, inputTokensDetails, outputTokens,
                outputTokensDetails, totalTokens);
        });
    }
}
