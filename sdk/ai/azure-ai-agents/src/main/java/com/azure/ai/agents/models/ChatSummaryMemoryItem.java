// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * A memory item containing a summary extracted from conversations.
 */
@Immutable
public final class ChatSummaryMemoryItem extends MemoryItem {
    /*
     * The kind of the memory item.
     */
    @Generated
    private MemoryItemKind kind = MemoryItemKind.CHAT_SUMMARY;

    /**
     * Creates an instance of ChatSummaryMemoryItem class.
     * 
     * @param memoryId the memoryId value to set.
     * @param updatedAt the updatedAt value to set.
     * @param scope the scope value to set.
     * @param content the content value to set.
     */
    @Generated
    public ChatSummaryMemoryItem(String memoryId, OffsetDateTime updatedAt, String scope, String content) {
        super(memoryId, updatedAt, scope, content);
    }

    /**
     * Get the kind property: The kind of the memory item.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public MemoryItemKind getKind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("memory_id", getMemoryId());
        if (getUpdatedAt() != null) {
            jsonWriter.writeLongField("updated_at", getUpdatedAt().toEpochSecond());
        }
        jsonWriter.writeStringField("scope", getScope());
        jsonWriter.writeStringField("content", getContent());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatSummaryMemoryItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatSummaryMemoryItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatSummaryMemoryItem.
     */
    @Generated
    public static ChatSummaryMemoryItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String memoryId = null;
            OffsetDateTime updatedAt = null;
            String scope = null;
            String content = null;
            MemoryItemKind kind = MemoryItemKind.CHAT_SUMMARY;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("memory_id".equals(fieldName)) {
                    memoryId = reader.getString();
                } else if ("updated_at".equals(fieldName)) {
                    updatedAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("scope".equals(fieldName)) {
                    scope = reader.getString();
                } else if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MemoryItemKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ChatSummaryMemoryItem deserializedChatSummaryMemoryItem
                = new ChatSummaryMemoryItem(memoryId, updatedAt, scope, content);
            deserializedChatSummaryMemoryItem.kind = kind;

            return deserializedChatSummaryMemoryItem;
        });
    }
}
