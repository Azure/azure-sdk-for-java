// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A filter used to compare a specified attribute key to a given value using a defined comparison operation.
 */
@Immutable
public final class ComparisonFilter implements JsonSerializable<ComparisonFilter> {

    /*
     * Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.
     * - `eq`: equals
     * - `ne`: not equal
     * - `gt`: greater than
     * - `gte`: greater than or equal
     * - `lt`: less than
     * - `lte`: less than or equal
     */
    @Generated
    private final ComparisonFilterType type;

    /*
     * The key to compare against the value.
     */
    @Generated
    private final String key;

    /*
     * The value to compare against the attribute key; supports string, number, or boolean types.
     */
    @Generated
    private final BinaryData value;

    /**
     * Creates an instance of ComparisonFilter class.
     *
     * @param type the type value to set.
     * @param key the key value to set.
     * @param value the value value to set.
     */
    @Generated
    public ComparisonFilter(ComparisonFilterType type, String key, BinaryData value) {
        this.type = type;
        this.key = key;
        this.value = value;
    }

    /**
     * Get the type property: Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.
     * - `eq`: equals
     * - `ne`: not equal
     * - `gt`: greater than
     * - `gte`: greater than or equal
     * - `lt`: less than
     * - `lte`: less than or equal.
     *
     * @return the type value.
     */
    @Generated
    public ComparisonFilterType getType() {
        return this.type;
    }

    /**
     * Get the key property: The key to compare against the value.
     *
     * @return the key value.
     */
    @Generated
    public String getKey() {
        return this.key;
    }

    /**
     * Get the value property: The value to compare against the attribute key; supports string, number, or boolean
     * types.
     *
     * @return the value value.
     */
    @Generated
    public BinaryData getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeFieldName("value");
        this.value.writeTo(jsonWriter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComparisonFilter from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComparisonFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComparisonFilter.
     */
    @Generated
    public static ComparisonFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComparisonFilterType type = null;
            String key = null;
            BinaryData value = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    type = ComparisonFilterType.fromString(reader.getString());
                } else if ("key".equals(fieldName)) {
                    key = reader.getString();
                } else if ("value".equals(fieldName)) {
                    value = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            return new ComparisonFilter(type, key, value);
        });
    }
}
