// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.agents.implementation;

import com.azure.ai.agents.AgentsServiceVersion;
import com.azure.ai.agents.models.MemoryStoreUpdateResponse;
import com.azure.ai.agents.models.MemoryStoreUpdateResult;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in MemoryStores.
 */
public final class MemoryStoresImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MemoryStoresService service;

    /**
     * The service client containing this operation class.
     */
    private final ProjectsClientImpl client;

    /**
     * Initializes an instance of MemoryStoresImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MemoryStoresImpl(ProjectsClientImpl client) {
        this.service
            = RestProxy.create(MemoryStoresService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AgentsServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for ProjectsClientMemoryStores to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ProjectsClientMemoryStores")
    public interface MemoryStoresService {
        @Post("/memory_stores")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createMemoryStore(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createMemoryStoreRequest,
            RequestOptions requestOptions, Context context);

        @Post("/memory_stores")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createMemoryStoreSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createMemoryStoreRequest,
            RequestOptions requestOptions, Context context);

        @Post("/memory_stores/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateMemoryStore(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateMemoryStoreRequest, RequestOptions requestOptions,
            Context context);

        @Post("/memory_stores/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateMemoryStoreSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateMemoryStoreRequest, RequestOptions requestOptions,
            Context context);

        @Get("/memory_stores/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getMemoryStore(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/memory_stores/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getMemoryStoreSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/memory_stores")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listMemoryStores(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/memory_stores")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listMemoryStoresSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/memory_stores/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteMemoryStore(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/memory_stores/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteMemoryStoreSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/memory_stores/{name}:search_memories")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> searchMemories(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData searchMemoriesRequest, RequestOptions requestOptions,
            Context context);

        @Post("/memory_stores/{name}:search_memories")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> searchMemoriesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData searchMemoriesRequest, RequestOptions requestOptions,
            Context context);

        @Post("/memory_stores/{name}:update_memories")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateMemories(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateMemoriesRequest, RequestOptions requestOptions,
            Context context);

        @Post("/memory_stores/{name}:update_memories")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateMemoriesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateMemoriesRequest, RequestOptions requestOptions,
            Context context);

        @Get("/memory_stores/{name}/updates/{update_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getUpdateResult(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @PathParam("update_id") String updateId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/memory_stores/{name}/updates/{update_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getUpdateResultSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @PathParam("update_id") String updateId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/memory_stores/{name}:delete_scope")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteScope(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData deleteScopeRequest, RequestOptions requestOptions,
            Context context);

        @Post("/memory_stores/{name}:delete_scope")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteScopeSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData deleteScopeRequest, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Create a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createMemoryStoreRequest The createMemoryStoreRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createMemoryStoreWithResponseAsync(BinaryData createMemoryStoreRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createMemoryStore(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, createMemoryStoreRequest, requestOptions,
            context));
    }

    /**
     * Create a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createMemoryStoreRequest The createMemoryStoreRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createMemoryStoreWithResponse(BinaryData createMemoryStoreRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createMemoryStoreSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, createMemoryStoreRequest, requestOptions, Context.NONE);
    }

    /**
     * Update a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to update.
     * @param updateMemoryStoreRequest The updateMemoryStoreRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateMemoryStoreWithResponseAsync(String name,
        BinaryData updateMemoryStoreRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateMemoryStore(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, contentType, accept, updateMemoryStoreRequest,
            requestOptions, context));
    }

    /**
     * Update a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to update.
     * @param updateMemoryStoreRequest The updateMemoryStoreRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateMemoryStoreWithResponse(String name, BinaryData updateMemoryStoreRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateMemoryStoreSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, contentType, accept, updateMemoryStoreRequest, requestOptions, Context.NONE);
    }

    /**
     * Retrieve a memory store.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMemoryStoreWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getMemoryStore(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Retrieve a memory store.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a memory store that can store and retrieve user memories along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMemoryStoreWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getMemoryStoreSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name,
            accept, requestOptions, Context.NONE);
    }

    /**
     * List all memory stores.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listMemoryStoresSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listMemoryStores(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "data"), null, null));
    }

    /**
     * List all memory stores.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listMemoryStoresAsync(RequestOptions requestOptions) {
        return new PagedFlux<>(() -> listMemoryStoresSinglePageAsync(requestOptions));
    }

    /**
     * List all memory stores.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listMemoryStoresSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listMemoryStoresSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "data"), null, null);
    }

    /**
     * List all memory stores.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     definition (Required): {
     *         kind: String(default) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listMemoryStores(RequestOptions requestOptions) {
        return new PagedIterable<>(() -> listMemoryStoresSinglePage(requestOptions));
    }

    /**
     * Delete a memory store.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteMemoryStoreWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteMemoryStore(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Delete a memory store.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteMemoryStoreWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteMemoryStoreSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, accept, requestOptions, Context.NONE);
    }

    /**
     * Search for relevant memories from a memory store based on conversation context.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_search_id: String (Optional)
     *     options (Optional): {
     *         max_memories: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     search_id: String (Required)
     *     memories (Required): [
     *          (Required){
     *             memory_item (Required): {
     *                 kind: String(user_profile/chat_summary) (Required)
     *                 memory_id: String (Required)
     *                 updated_at: long (Required)
     *                 scope: String (Required)
     *                 content: String (Required)
     *             }
     *         }
     *     ]
     *     usage (Required): {
     *         embedding_tokens: int (Required)
     *         input_tokens: int (Required)
     *         input_tokens_details (Required): {
     *             cached_tokens: int (Required)
     *         }
     *         output_tokens: int (Required)
     *         output_tokens_details (Required): {
     *             reasoning_tokens: int (Required)
     *         }
     *         total_tokens: int (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to search.
     * @param searchMemoriesRequest The searchMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return memory search response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchMemoriesWithResponseAsync(String name, BinaryData searchMemoriesRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.searchMemories(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                name, contentType, accept, searchMemoriesRequest, requestOptions, context));
    }

    /**
     * Search for relevant memories from a memory store based on conversation context.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_search_id: String (Optional)
     *     options (Optional): {
     *         max_memories: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     search_id: String (Required)
     *     memories (Required): [
     *          (Required){
     *             memory_item (Required): {
     *                 kind: String(user_profile/chat_summary) (Required)
     *                 memory_id: String (Required)
     *                 updated_at: long (Required)
     *                 scope: String (Required)
     *                 content: String (Required)
     *             }
     *         }
     *     ]
     *     usage (Required): {
     *         embedding_tokens: int (Required)
     *         input_tokens: int (Required)
     *         input_tokens_details (Required): {
     *             cached_tokens: int (Required)
     *         }
     *         output_tokens: int (Required)
     *         output_tokens_details (Required): {
     *             reasoning_tokens: int (Required)
     *         }
     *         total_tokens: int (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to search.
     * @param searchMemoriesRequest The searchMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return memory search response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> searchMemoriesWithResponse(String name, BinaryData searchMemoriesRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.searchMemoriesSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name,
            contentType, accept, searchMemoriesRequest, requestOptions, Context.NONE);
    }

    /**
     * Update memory store with conversation memories.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_update_id: String (Optional)
     *     update_delay: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to update.
     * @param updateMemoriesRequest The updateMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return provides the status of a memory store update operation along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> updateMemoriesWithResponseAsync(String name, BinaryData updateMemoriesRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.updateMemories(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                name, contentType, accept, updateMemoriesRequest, requestOptions, context));
    }

    /**
     * Update memory store with conversation memories.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_update_id: String (Optional)
     *     update_delay: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to update.
     * @param updateMemoriesRequest The updateMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return provides the status of a memory store update operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateMemoriesWithResponse(String name, BinaryData updateMemoriesRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateMemoriesSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name,
            contentType, accept, updateMemoriesRequest, requestOptions, Context.NONE);
    }

    /**
     * Update memory store with conversation memories.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_update_id: String (Optional)
     *     update_delay: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to update.
     * @param updateMemoriesRequest The updateMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of provides the status of a memory store update operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<MemoryStoreUpdateResponse, MemoryStoreUpdateResult> beginUpdateMemoriesWithModelAsync(String name,
        BinaryData updateMemoriesRequest, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.updateMemoriesWithResponseAsync(name, updateMemoriesRequest, requestOptions),
            new com.azure.ai.agents.implementation.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(MemoryStoreUpdateResponse.class),
            TypeReference.createInstance(MemoryStoreUpdateResult.class));
    }

    /**
     * Update memory store with conversation memories.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_update_id: String (Optional)
     *     update_delay: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to update.
     * @param updateMemoriesRequest The updateMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of provides the status of a memory store update operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<MemoryStoreUpdateResponse, MemoryStoreUpdateResult> beginUpdateMemoriesWithModel(String name,
        BinaryData updateMemoriesRequest, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.updateMemoriesWithResponse(name, updateMemoriesRequest, requestOptions),
            new com.azure.ai.agents.implementation.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(MemoryStoreUpdateResponse.class),
            TypeReference.createInstance(MemoryStoreUpdateResult.class));
    }

    /**
     * Update memory store with conversation memories.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_update_id: String (Optional)
     *     update_delay: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to update.
     * @param updateMemoriesRequest The updateMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of provides the status of a memory store update operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginUpdateMemoriesAsync(String name, BinaryData updateMemoriesRequest,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.updateMemoriesWithResponseAsync(name, updateMemoriesRequest, requestOptions),
            new com.azure.ai.agents.implementation.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Update memory store with conversation memories.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     *     conversation_id: String (Optional)
     *     items (Optional): [
     *          (Optional){
     *             type: String(message/file_search_call/function_call/function_call_output/computer_call/computer_call_output/web_search_call/reasoning/item_reference/image_generation_call/code_interpreter_call/local_shell_call/local_shell_call_output/mcp_list_tools/mcp_approval_request/mcp_approval_response/mcp_call/structured_inputs/structured_outputs/semantic_event/workflow_action/memory_search_call/oauth_consent_request) (Required)
     *         }
     *     ]
     *     previous_update_id: String (Optional)
     *     update_delay: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store to update.
     * @param updateMemoriesRequest The updateMemoriesRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of provides the status of a memory store update operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUpdateMemories(String name, BinaryData updateMemoriesRequest,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.updateMemoriesWithResponse(name, updateMemoriesRequest, requestOptions),
            new com.azure.ai.agents.implementation.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Get memory store update result.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store.
     * @param updateId The ID of the memory update operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return memory store update result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpdateResultWithResponseAsync(String name, String updateId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getUpdateResult(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, updateId, accept, requestOptions, context));
    }

    /**
     * Get memory store update result.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     update_id: String (Required)
     *     status: String(queued/in_progress/completed/failed/superseded) (Required)
     *     superseded_by: String (Optional)
     *     result (Optional): {
     *         memory_operations (Required): [
     *              (Required){
     *                 kind: String(create/update/delete) (Required)
     *                 memory_item (Required): {
     *                     kind: String(user_profile/chat_summary) (Required)
     *                     memory_id: String (Required)
     *                     updated_at: long (Required)
     *                     scope: String (Required)
     *                     content: String (Required)
     *                 }
     *             }
     *         ]
     *         usage (Required): {
     *             embedding_tokens: int (Required)
     *             input_tokens: int (Required)
     *             input_tokens_details (Required): {
     *                 cached_tokens: int (Required)
     *             }
     *             output_tokens: int (Required)
     *             output_tokens_details (Required): {
     *                 reasoning_tokens: int (Required)
     *             }
     *             total_tokens: int (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         details: String (Optional)
     *         errors (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store.
     * @param updateId The ID of the memory update operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return memory store update result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUpdateResultWithResponse(String name, String updateId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getUpdateResultSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, updateId, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete all memories associated with a specific scope from a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     scope: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store.
     * @param deleteScopeRequest The deleteScopeRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for deleting memories from a scope along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteScopeWithResponseAsync(String name, BinaryData deleteScopeRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.deleteScope(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                name, contentType, accept, deleteScopeRequest, requestOptions, context));
    }

    /**
     * Delete all memories associated with a specific scope from a memory store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     name: String (Required)
     *     scope: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param name The name of the memory store.
     * @param deleteScopeRequest The deleteScopeRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for deleting memories from a scope along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteScopeWithResponse(String name, BinaryData deleteScopeRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.deleteScopeSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name,
            contentType, accept, deleteScopeRequest, requestOptions, Context.NONE);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
