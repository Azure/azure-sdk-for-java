// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The details of the container of a specific version of an agent.
 */
@Immutable
public final class AgentContainerObject implements JsonSerializable<AgentContainerObject> {

    /*
     * The object type, which is always 'agent.container'.
     */
    @Generated
    private final String object = "agent.container";

    /*
     * The status of the container of a specific version of an agent.
     */
    @Generated
    private AgentContainerStatus status;

    /*
     * The maximum number of replicas for the container. Default is 1.
     */
    @Generated
    private Integer maxReplicas;

    /*
     * The minimum number of replicas for the container. Default is 1.
     */
    @Generated
    private Integer minReplicas;

    /*
     * The error message if the container failed to operate, if any.
     */
    @Generated
    private String errorMessage;

    /*
     * The creation time of the container.
     */
    @Generated
    private OffsetDateTime createdAt;

    /*
     * The last update time of the container.
     */
    @Generated
    private OffsetDateTime updatedAt;

    /**
     * Creates an instance of AgentContainerObject class.
     */
    @Generated
    private AgentContainerObject() {
    }

    /**
     * Get the object property: The object type, which is always 'agent.container'.
     *
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the status property: The status of the container of a specific version of an agent.
     *
     * @return the status value.
     */
    @Generated
    public AgentContainerStatus getStatus() {
        return this.status;
    }

    /**
     * Get the maxReplicas property: The maximum number of replicas for the container. Default is 1.
     *
     * @return the maxReplicas value.
     */
    @Generated
    public Integer getMaxReplicas() {
        return this.maxReplicas;
    }

    /**
     * Get the minReplicas property: The minimum number of replicas for the container. Default is 1.
     *
     * @return the minReplicas value.
     */
    @Generated
    public Integer getMinReplicas() {
        return this.minReplicas;
    }

    /**
     * Get the errorMessage property: The error message if the container failed to operate, if any.
     *
     * @return the errorMessage value.
     */
    @Generated
    public String getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the createdAt property: The creation time of the container.
     *
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the updatedAt property: The last update time of the container.
     *
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("max_replicas", this.maxReplicas);
        jsonWriter.writeNumberField("min_replicas", this.minReplicas);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentContainerObject from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentContainerObject if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentContainerObject.
     */
    @Generated
    public static AgentContainerObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentContainerObject deserializedAgentContainerObject = new AgentContainerObject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("status".equals(fieldName)) {
                    deserializedAgentContainerObject.status = AgentContainerStatus.fromString(reader.getString());
                } else if ("created_at".equals(fieldName)) {
                    deserializedAgentContainerObject.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updated_at".equals(fieldName)) {
                    deserializedAgentContainerObject.updatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("max_replicas".equals(fieldName)) {
                    deserializedAgentContainerObject.maxReplicas = reader.getNullable(JsonReader::getInt);
                } else if ("min_replicas".equals(fieldName)) {
                    deserializedAgentContainerObject.minReplicas = reader.getNullable(JsonReader::getInt);
                } else if ("error_message".equals(fieldName)) {
                    deserializedAgentContainerObject.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAgentContainerObject;
        });
    }
}
