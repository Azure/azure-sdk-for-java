// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * A tool for integrating memories into the agent.
 */
@Fluent
public final class MemorySearchTool extends Tool {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.MEMORY_SEARCH;

    /*
     * The namespace used to group and isolate memories, such as a user ID.
     * Limits which memories can be retrieved or updated.
     * Use special variable `{{$userId}}` to scope memories to the current signed-in user.
     */
    @Generated
    private final String scope;

    /*
     * Options for searching the memory store.
     */
    @Generated
    private MemorySearchOptions searchOptions;

    /*
     * The amount of time to wait after inactivity before updating memories with messages from the call (e.g., '0s',
     * '5m'). Defaults to '60s'.
     */
    @Generated
    private Duration updateDelay;

    /**
     * Creates an instance of MemorySearchTool class.
     *
     * @param memoryStoreName the memoryStoreName value to set.
     * @param scope the scope value to set.
     */
    @Generated
    public MemorySearchTool(String memoryStoreName, String scope) {
        this.memoryStoreName = memoryStoreName;
        this.scope = scope;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ToolType getType() {
        return this.type;
    }

    /**
     * Get the scope property: The namespace used to group and isolate memories, such as a user ID.
     * Limits which memories can be retrieved or updated.
     * Use special variable `{{$userId}}` to scope memories to the current signed-in user.
     *
     * @return the scope value.
     */
    @Generated
    public String getScope() {
        return this.scope;
    }

    /**
     * Get the searchOptions property: Options for searching the memory store.
     *
     * @return the searchOptions value.
     */
    @Generated
    public MemorySearchOptions getSearchOptions() {
        return this.searchOptions;
    }

    /**
     * Set the searchOptions property: Options for searching the memory store.
     *
     * @param searchOptions the searchOptions value to set.
     * @return the MemorySearchTool object itself.
     */
    @Generated
    public MemorySearchTool setSearchOptions(MemorySearchOptions searchOptions) {
        this.searchOptions = searchOptions;
        return this;
    }

    /**
     * Get the updateDelay property: The amount of time to wait after inactivity before updating memories with messages
     * from the call (e.g., '0s', '5m'). Defaults to '60s'.
     *
     * @return the updateDelay value.
     */
    @Generated
    public Duration getUpdateDelay() {
        return this.updateDelay;
    }

    /**
     * Set the updateDelay property: The amount of time to wait after inactivity before updating memories with messages
     * from the call (e.g., '0s', '5m'). Defaults to '60s'.
     *
     * @param updateDelay the updateDelay value to set.
     * @return the MemorySearchTool object itself.
     */
    @Generated
    public MemorySearchTool setUpdateDelay(Duration updateDelay) {
        this.updateDelay = updateDelay;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("memory_store_name", this.memoryStoreName);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("search_options", this.searchOptions);
        jsonWriter.writeStringField("update_delay", CoreUtils.durationToStringWithDays(this.updateDelay));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemorySearchTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemorySearchTool if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemorySearchTool.
     */
    @Generated
    public static MemorySearchTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String memoryStoreName = null;
            String scope = null;
            ToolType type = ToolType.MEMORY_SEARCH;
            MemorySearchOptions searchOptions = null;
            Duration updateDelay = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("memory_store_name".equals(fieldName)) {
                    memoryStoreName = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    scope = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ToolType.fromString(reader.getString());
                } else if ("search_options".equals(fieldName)) {
                    searchOptions = MemorySearchOptions.fromJson(reader);
                } else if ("update_delay".equals(fieldName)) {
                    updateDelay = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            MemorySearchTool deserializedMemorySearchTool = new MemorySearchTool(memoryStoreName, scope);
            deserializedMemorySearchTool.type = type;
            deserializedMemorySearchTool.searchOptions = searchOptions;
            deserializedMemorySearchTool.updateDelay = updateDelay;
            return deserializedMemorySearchTool;
        });
    }

    /*
     * The name of the memory store to use.
     */
    @Generated
    private final String memoryStoreName;

    /**
     * Get the memoryStoreName property: The name of the memory store to use.
     *
     * @return the memoryStoreName value.
     */
    @Generated
    public String getMemoryStoreName() {
        return this.memoryStoreName;
    }
}
