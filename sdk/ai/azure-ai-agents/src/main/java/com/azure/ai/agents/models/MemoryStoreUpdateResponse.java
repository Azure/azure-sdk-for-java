// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Provides the status of a memory store update operation.
 */
@Immutable
public final class MemoryStoreUpdateResponse implements JsonSerializable<MemoryStoreUpdateResponse> {

    /*
     * The unique ID of this update request. Use this value as previous_update_id in subsequent requests to perform
     * incremental updates.
     */
    @Generated
    private final String updateId;

    /*
     * The status of the memory update operation. One of "queued", "in_progress", "completed", "failed", or
     * "superseded".
     */
    @Generated
    private final MemoryStoreUpdateStatus status;

    /*
     * The update_id the operation was superseded by when status is "superseded".
     */
    @Generated
    private String supersededBy;

    /*
     * The result of memory store update operation when status is "completed".
     */
    @Generated
    private MemoryStoreUpdateResult result;

    /*
     * Error object that describes the error when status is "failed".
     */
    @Generated
    private ApiError error;

    /**
     * Creates an instance of MemoryStoreUpdateResponse class.
     *
     * @param updateId the updateId value to set.
     * @param status the status value to set.
     */
    @Generated
    private MemoryStoreUpdateResponse(String updateId, MemoryStoreUpdateStatus status) {
        this.updateId = updateId;
        this.status = status;
    }

    /**
     * Get the updateId property: The unique ID of this update request. Use this value as previous_update_id in
     * subsequent requests to perform incremental updates.
     *
     * @return the updateId value.
     */
    @Generated
    public String getUpdateId() {
        return this.updateId;
    }

    /**
     * Get the status property: The status of the memory update operation. One of "queued", "in_progress", "completed",
     * "failed", or "superseded".
     *
     * @return the status value.
     */
    @Generated
    public MemoryStoreUpdateStatus getStatus() {
        return this.status;
    }

    /**
     * Get the supersededBy property: The update_id the operation was superseded by when status is "superseded".
     *
     * @return the supersededBy value.
     */
    @Generated
    public String getSupersededBy() {
        return this.supersededBy;
    }

    /**
     * Get the result property: The result of memory store update operation when status is "completed".
     *
     * @return the result value.
     */
    @Generated
    public MemoryStoreUpdateResult getResult() {
        return this.result;
    }

    /**
     * Get the error property: Error object that describes the error when status is "failed".
     *
     * @return the error value.
     */
    @Generated
    public ApiError getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("update_id", this.updateId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("superseded_by", this.supersededBy);
        jsonWriter.writeJsonField("result", this.result);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemoryStoreUpdateResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemoryStoreUpdateResponse if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemoryStoreUpdateResponse.
     */
    @Generated
    public static MemoryStoreUpdateResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String updateId = null;
            MemoryStoreUpdateStatus status = null;
            String supersededBy = null;
            MemoryStoreUpdateResult result = null;
            ApiError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("update_id".equals(fieldName)) {
                    updateId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = MemoryStoreUpdateStatus.fromString(reader.getString());
                } else if ("superseded_by".equals(fieldName)) {
                    supersededBy = reader.getString();
                } else if ("result".equals(fieldName)) {
                    result = MemoryStoreUpdateResult.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    error = ApiError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            MemoryStoreUpdateResponse deserializedMemoryStoreUpdateResponse
                = new MemoryStoreUpdateResponse(updateId, status);
            deserializedMemoryStoreUpdateResponse.supersededBy = supersededBy;
            deserializedMemoryStoreUpdateResponse.result = result;
            deserializedMemoryStoreUpdateResponse.error = error;
            return deserializedMemoryStoreUpdateResponse;
        });
    }
}
