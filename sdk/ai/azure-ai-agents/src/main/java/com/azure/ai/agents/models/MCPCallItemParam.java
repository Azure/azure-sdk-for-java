// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An invocation of a tool on an MCP server.
 */
@Fluent
public final class MCPCallItemParam extends ItemParam {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.MCP_CALL;

    /*
     * The label of the MCP server running the tool.
     */
    @Generated
    private final String serverLabel;

    /*
     * The name of the tool that was run.
     */
    @Generated
    private final String name;

    /*
     * A JSON string of the arguments passed to the tool.
     */
    @Generated
    private final String arguments;

    /*
     * The output from the tool call.
     */
    @Generated
    private String output;

    /*
     * The error from the tool call, if any.
     */
    @Generated
    private String error;

    /**
     * Creates an instance of MCPCallItemParam class.
     *
     * @param serverLabel the serverLabel value to set.
     * @param name the name value to set.
     * @param arguments the arguments value to set.
     */
    @Generated
    public MCPCallItemParam(String serverLabel, String name, String arguments) {
        this.serverLabel = serverLabel;
        this.name = name;
        this.arguments = arguments;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the serverLabel property: The label of the MCP server running the tool.
     *
     * @return the serverLabel value.
     */
    @Generated
    public String getServerLabel() {
        return this.serverLabel;
    }

    /**
     * Get the name property: The name of the tool that was run.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the arguments property: A JSON string of the arguments passed to the tool.
     *
     * @return the arguments value.
     */
    @Generated
    public String getArguments() {
        return this.arguments;
    }

    /**
     * Get the output property: The output from the tool call.
     *
     * @return the output value.
     */
    @Generated
    public String getOutput() {
        return this.output;
    }

    /**
     * Set the output property: The output from the tool call.
     *
     * @param output the output value to set.
     * @return the MCPCallItemParam object itself.
     */
    @Generated
    public MCPCallItemParam setOutput(String output) {
        this.output = output;
        return this;
    }

    /**
     * Get the error property: The error from the tool call, if any.
     *
     * @return the error value.
     */
    @Generated
    public String getError() {
        return this.error;
    }

    /**
     * Set the error property: The error from the tool call, if any.
     *
     * @param error the error value to set.
     * @return the MCPCallItemParam object itself.
     */
    @Generated
    public MCPCallItemParam setError(String error) {
        this.error = error;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("server_label", this.serverLabel);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("arguments", this.arguments);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("output", this.output);
        jsonWriter.writeStringField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPCallItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPCallItemParam if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MCPCallItemParam.
     */
    @Generated
    public static MCPCallItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serverLabel = null;
            String name = null;
            String arguments = null;
            ItemType type = ItemType.MCP_CALL;
            String output = null;
            String error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("server_label".equals(fieldName)) {
                    serverLabel = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("arguments".equals(fieldName)) {
                    arguments = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else if ("output".equals(fieldName)) {
                    output = reader.getString();
                } else if ("error".equals(fieldName)) {
                    error = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MCPCallItemParam deserializedMCPCallItemParam = new MCPCallItemParam(serverLabel, name, arguments);
            deserializedMCPCallItemParam.type = type;
            deserializedMCPCallItemParam.output = output;
            deserializedMCPCallItemParam.error = error;
            return deserializedMCPCallItemParam;
        });
    }
}
