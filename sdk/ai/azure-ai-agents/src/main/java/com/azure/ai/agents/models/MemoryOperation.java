// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a single memory operation (create, update, or delete) performed on a memory item.
 */
@Immutable
public final class MemoryOperation implements JsonSerializable<MemoryOperation> {

    /*
     * The type of memory operation being performed.
     */
    @Generated
    private final MemoryOperationKind kind;

    /*
     * The memory item to create, update, or delete.
     */
    @Generated
    private final MemoryItem memoryItem;

    /**
     * Creates an instance of MemoryOperation class.
     *
     * @param kind the kind value to set.
     * @param memoryItem the memoryItem value to set.
     */
    @Generated
    private MemoryOperation(MemoryOperationKind kind, MemoryItem memoryItem) {
        this.kind = kind;
        this.memoryItem = memoryItem;
    }

    /**
     * Get the kind property: The type of memory operation being performed.
     *
     * @return the kind value.
     */
    @Generated
    public MemoryOperationKind getKind() {
        return this.kind;
    }

    /**
     * Get the memoryItem property: The memory item to create, update, or delete.
     *
     * @return the memoryItem value.
     */
    @Generated
    public MemoryItem getMemoryItem() {
        return this.memoryItem;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("memory_item", this.memoryItem);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemoryOperation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemoryOperation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MemoryOperation.
     */
    @Generated
    public static MemoryOperation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MemoryOperationKind kind = null;
            MemoryItem memoryItem = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    kind = MemoryOperationKind.fromString(reader.getString());
                } else if ("memory_item".equals(fieldName)) {
                    memoryItem = MemoryItem.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new MemoryOperation(kind, memoryItem);
        });
    }
}
