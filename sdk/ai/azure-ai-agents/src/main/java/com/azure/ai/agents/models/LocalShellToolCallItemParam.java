// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A tool call to run a command on the local shell.
 */
@Immutable
public final class LocalShellToolCallItemParam extends ItemParam {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.LOCAL_SHELL_CALL;

    /*
     * The unique ID of the local shell tool call generated by the model.
     */
    @Generated
    private final String callId;

    /*
     * The action property.
     */
    @Generated
    private final LocalShellExecAction action;

    /**
     * Creates an instance of LocalShellToolCallItemParam class.
     *
     * @param callId the callId value to set.
     * @param action the action value to set.
     */
    @Generated
    public LocalShellToolCallItemParam(String callId, LocalShellExecAction action) {
        this.callId = callId;
        this.action = action;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the callId property: The unique ID of the local shell tool call generated by the model.
     *
     * @return the callId value.
     */
    @Generated
    public String getCallId() {
        return this.callId;
    }

    /**
     * Get the action property: The action property.
     *
     * @return the action value.
     */
    @Generated
    public LocalShellExecAction getAction() {
        return this.action;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("call_id", this.callId);
        jsonWriter.writeJsonField("action", this.action);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalShellToolCallItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalShellToolCallItemParam if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LocalShellToolCallItemParam.
     */
    @Generated
    public static LocalShellToolCallItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String callId = null;
            LocalShellExecAction action = null;
            ItemType type = ItemType.LOCAL_SHELL_CALL;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("call_id".equals(fieldName)) {
                    callId = reader.getString();
                } else if ("action".equals(fieldName)) {
                    action = LocalShellExecAction.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            LocalShellToolCallItemParam deserializedLocalShellToolCallItemParam
                = new LocalShellToolCallItemParam(callId, action);
            deserializedLocalShellToolCallItemParam.type = type;
            return deserializedLocalShellToolCallItemParam;
        });
    }
}
