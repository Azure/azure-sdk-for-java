// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The StructuredInputsItemParam model.
 */
@Fluent
public final class StructuredInputsItemParam extends ItemParam {

    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.STRUCTURED_INPUTS;

    /*
     * The structured inputs to the response.
     */
    @Generated
    private Map<String, BinaryData> inputs;

    /**
     * Creates an instance of StructuredInputsItemParam class.
     */
    @Generated
    public StructuredInputsItemParam() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the inputs property: The structured inputs to the response.
     *
     * @return the inputs value.
     */
    @Generated
    public Map<String, BinaryData> getInputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The structured inputs to the response.
     *
     * @param inputs the inputs value to set.
     * @return the StructuredInputsItemParam object itself.
     */
    @Generated
    public StructuredInputsItemParam setInputs(Map<String, BinaryData> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeMapField("inputs", this.inputs,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StructuredInputsItemParam from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StructuredInputsItemParam if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StructuredInputsItemParam.
     */
    @Generated
    public static StructuredInputsItemParam fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StructuredInputsItemParam deserializedStructuredInputsItemParam = new StructuredInputsItemParam();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedStructuredInputsItemParam.type = ItemType.fromString(reader.getString());
                } else if ("inputs".equals(fieldName)) {
                    Map<String, BinaryData> inputs = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedStructuredInputsItemParam.inputs = inputs;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStructuredInputsItemParam;
        });
    }
}
