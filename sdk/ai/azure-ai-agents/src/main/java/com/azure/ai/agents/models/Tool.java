// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Tool model.
 */
@Immutable
public class Tool implements JsonSerializable<Tool> {

    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.fromString("Tool");

    /**
     * Creates an instance of Tool class.
     */
    @Generated
    public Tool() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    public ToolType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Tool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Tool if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Tool.
     */
    @Generated
    public static Tool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("function".equals(discriminatorValue)) {
                    return FunctionTool.fromJson(readerToUse.reset());
                } else if ("file_search".equals(discriminatorValue)) {
                    return FileSearchTool.fromJson(readerToUse.reset());
                } else if ("computer_use_preview".equals(discriminatorValue)) {
                    return ComputerUsePreviewTool.fromJson(readerToUse.reset());
                } else if ("web_search_preview".equals(discriminatorValue)) {
                    return WebSearchPreviewTool.fromJson(readerToUse.reset());
                } else if ("code_interpreter".equals(discriminatorValue)) {
                    return CodeInterpreterTool.fromJson(readerToUse.reset());
                } else if ("image_generation".equals(discriminatorValue)) {
                    return ImageGenTool.fromJson(readerToUse.reset());
                } else if ("local_shell".equals(discriminatorValue)) {
                    return LocalShellTool.fromJson(readerToUse.reset());
                } else if ("mcp".equals(discriminatorValue)) {
                    return MCPTool.fromJson(readerToUse.reset());
                } else if ("bing_grounding".equals(discriminatorValue)) {
                    return BingGroundingAgentTool.fromJson(readerToUse.reset());
                } else if ("fabric_dataagent_preview".equals(discriminatorValue)) {
                    return MicrosoftFabricAgentTool.fromJson(readerToUse.reset());
                } else if ("sharepoint_grounding_preview".equals(discriminatorValue)) {
                    return SharepointAgentTool.fromJson(readerToUse.reset());
                } else if ("azure_ai_search".equals(discriminatorValue)) {
                    return AzureAISearchAgentTool.fromJson(readerToUse.reset());
                } else if ("openapi".equals(discriminatorValue)) {
                    return OpenApiAgentTool.fromJson(readerToUse.reset());
                } else if ("bing_custom_search_preview".equals(discriminatorValue)) {
                    return BingCustomSearchAgentTool.fromJson(readerToUse.reset());
                } else if ("browser_automation_preview".equals(discriminatorValue)) {
                    return BrowserAutomationAgentTool.fromJson(readerToUse.reset());
                } else if ("azure_function".equals(discriminatorValue)) {
                    return AzureFunctionAgentTool.fromJson(readerToUse.reset());
                } else if ("capture_structured_outputs".equals(discriminatorValue)) {
                    return CaptureStructuredOutputsTool.fromJson(readerToUse.reset());
                } else if ("capture_semantic_events".equals(discriminatorValue)) {
                    return CaptureSemanticEventsTool.fromJson(readerToUse.reset());
                } else if ("a2a_preview".equals(discriminatorValue)) {
                    return A2ATool.fromJson(readerToUse.reset());
                } else if ("memory_search".equals(discriminatorValue)) {
                    return MemorySearchTool.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static Tool fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Tool deserializedTool = new Tool();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedTool.type = ToolType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTool;
        });
    }
}
