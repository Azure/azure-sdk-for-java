// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.assistants;

import com.azure.ai.assistants.implementation.AssistantsClientImpl;
import com.azure.ai.assistants.implementation.MultipartFormDataHelper;
import com.azure.ai.assistants.implementation.models.CreateAssistantRequest;
import com.azure.ai.assistants.implementation.models.CreateMessageRequest;
import com.azure.ai.assistants.implementation.models.CreateRunRequest;
import com.azure.ai.assistants.implementation.models.CreateThreadAndRunRequest;
import com.azure.ai.assistants.implementation.models.CreateThreadRequest;
import com.azure.ai.assistants.implementation.models.CreateVectorStoreFileBatchRequest;
import com.azure.ai.assistants.implementation.models.CreateVectorStoreFileRequest;
import com.azure.ai.assistants.implementation.models.CreateVectorStoreRequest;
import com.azure.ai.assistants.implementation.models.FileListResponse;
import com.azure.ai.assistants.implementation.models.ModifyVectorStoreRequest;
import com.azure.ai.assistants.implementation.models.OpenAIPageableListOfAssistant;
import com.azure.ai.assistants.implementation.models.OpenAIPageableListOfRunStep;
import com.azure.ai.assistants.implementation.models.OpenAIPageableListOfThreadMessage;
import com.azure.ai.assistants.implementation.models.OpenAIPageableListOfThreadRun;
import com.azure.ai.assistants.implementation.models.OpenAIPageableListOfVectorStore;
import com.azure.ai.assistants.implementation.models.OpenAIPageableListOfVectorStoreFile;
import com.azure.ai.assistants.implementation.models.SubmitToolOutputsToRunRequest;
import com.azure.ai.assistants.implementation.models.UpdateAssistantRequest;
import com.azure.ai.assistants.implementation.models.UpdateMessageRequest;
import com.azure.ai.assistants.implementation.models.UpdateRunRequest;
import com.azure.ai.assistants.implementation.models.UpdateThreadRequest;
import com.azure.ai.assistants.implementation.models.UploadFileRequest;
import com.azure.ai.assistants.models.Assistant;
import com.azure.ai.assistants.models.AssistantDeletionStatus;
import com.azure.ai.assistants.models.AssistantThread;
import com.azure.ai.assistants.models.CreateAssistantOptions;
import com.azure.ai.assistants.models.CreateRunOptions;
import com.azure.ai.assistants.models.CreateThreadAndRunOptions;
import com.azure.ai.assistants.models.CreateToolResourcesOptions;
import com.azure.ai.assistants.models.FileDeletionStatus;
import com.azure.ai.assistants.models.FileDetails;
import com.azure.ai.assistants.models.FilePurpose;
import com.azure.ai.assistants.models.ListSortOrder;
import com.azure.ai.assistants.models.MessageAttachment;
import com.azure.ai.assistants.models.MessageRole;
import com.azure.ai.assistants.models.OpenAIFile;
import com.azure.ai.assistants.models.RunStep;
import com.azure.ai.assistants.models.ThreadDeletionStatus;
import com.azure.ai.assistants.models.ThreadMessage;
import com.azure.ai.assistants.models.ThreadMessageOptions;
import com.azure.ai.assistants.models.ThreadRun;
import com.azure.ai.assistants.models.ToolOutput;
import com.azure.ai.assistants.models.UpdateAssistantOptions;
import com.azure.ai.assistants.models.UpdateToolResourcesOptions;
import com.azure.ai.assistants.models.VectorStore;
import com.azure.ai.assistants.models.VectorStoreChunkingStrategyRequest;
import com.azure.ai.assistants.models.VectorStoreDeletionStatus;
import com.azure.ai.assistants.models.VectorStoreExpirationPolicy;
import com.azure.ai.assistants.models.VectorStoreFile;
import com.azure.ai.assistants.models.VectorStoreFileBatch;
import com.azure.ai.assistants.models.VectorStoreFileDeletionStatus;
import com.azure.ai.assistants.models.VectorStoreFileStatusFilter;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous AssistantsClient type.
 */
@ServiceClient(builder = AssistantsClientBuilder.class, isAsync = true)
public final class AssistantsAsyncClient {
    @Generated
    private final AssistantsClientImpl serviceClient;

    /**
     * Initializes an instance of AssistantsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AssistantsAsyncClient(AssistantsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new assistant.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String (Required)
     *     name: String (Optional)
     *     description: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         file_search: BinaryData (Optional)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     response_format: BinaryData (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     tool_resources (Required): {
     *         code_interpreter (Optional): {
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     temperature: Double (Required)
     *     top_p: Double (Required)
     *     response_format: BinaryData (Optional)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param createAssistantRequest The createAssistantRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAssistantWithResponse(BinaryData createAssistantRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createAssistantWithResponseAsync(createAssistantRequest, requestOptions);
    }

    /**
     * Gets a list of assistants that were previously created.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the created_at timestamp of the objects. asc for
     * ascending order and desc for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. after is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. before is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the
     * list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             name: String (Required)
     *             description: String (Required)
     *             model: String (Required)
     *             instructions: String (Required)
     *             tools (Required): [
     *                  (Required){
     *                     type: String (Required)
     *                 }
     *             ]
     *             tool_resources (Required): {
     *                 code_interpreter (Optional): {
     *                     file_ids (Required): [
     *                         String (Required)
     *                     ]
     *                 }
     *                 file_search (Optional): {
     *                     vector_store_ids (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             temperature: Double (Required)
     *             top_p: Double (Required)
     *             response_format: BinaryData (Optional)
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of assistants that were previously created along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listAssistantsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listAssistantsWithResponseAsync(requestOptions);
    }

    /**
     * Retrieves an existing assistant.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     tool_resources (Required): {
     *         code_interpreter (Optional): {
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     temperature: Double (Required)
     *     top_p: Double (Required)
     *     response_format: BinaryData (Optional)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAssistantWithResponse(String assistantId, RequestOptions requestOptions) {
        return this.serviceClient.getAssistantWithResponseAsync(assistantId, requestOptions);
    }

    /**
     * Modifies an existing assistant.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     response_format: BinaryData (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     tool_resources (Required): {
     *         code_interpreter (Optional): {
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     temperature: Double (Required)
     *     top_p: Double (Required)
     *     response_format: BinaryData (Optional)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to modify.
     * @param updateAssistantRequest The updateAssistantRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateAssistantWithResponse(String assistantId, BinaryData updateAssistantRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.updateAssistantWithResponseAsync(assistantId, updateAssistantRequest, requestOptions);
    }

    /**
     * Deletes an assistant.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an assistant deletion operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteAssistantWithResponse(String assistantId, RequestOptions requestOptions) {
        return this.serviceClient.deleteAssistantWithResponseAsync(assistantId, requestOptions);
    }

    /**
     * Creates a new thread. Threads contain messages and can be run by assistants.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     messages (Optional): [
     *          (Optional){
     *             role: String(user/assistant) (Required)
     *             content: String (Required)
     *             attachments (Optional): [
     *                  (Optional){
     *                     file_id: String (Required)
     *                     tools (Required): [
     *                         BinaryData (Required)
     *                     ]
     *                 }
     *             ]
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         file_search: BinaryData (Optional)
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     tool_resources (Required): {
     *         code_interpreter (Optional): {
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param createThreadRequest The createThreadRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a single thread associated with an assistant along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createThreadWithResponse(BinaryData createThreadRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createThreadWithResponseAsync(createThreadRequest, requestOptions);
    }

    /**
     * Gets information about an existing thread.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     tool_resources (Required): {
     *         code_interpreter (Optional): {
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to retrieve information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about an existing thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getThreadWithResponse(String threadId, RequestOptions requestOptions) {
        return this.serviceClient.getThreadWithResponseAsync(threadId, requestOptions);
    }

    /**
     * Modifies an existing thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     tool_resources (Required): {
     *         code_interpreter (Optional): {
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to modify.
     * @param updateThreadRequest The updateThreadRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a single thread associated with an assistant along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateThreadWithResponse(String threadId, BinaryData updateThreadRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.updateThreadWithResponseAsync(threadId, updateThreadRequest, requestOptions);
    }

    /**
     * Deletes an existing thread.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a thread deletion operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteThreadWithResponse(String threadId, RequestOptions requestOptions) {
        return this.serviceClient.deleteThreadWithResponseAsync(threadId, requestOptions);
    }

    /**
     * Creates a new message on a specified thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     role: String(user/assistant) (Required)
     *     content: String (Required)
     *     attachments (Optional): [
     *          (Optional){
     *             file_id: String (Required)
     *             tools (Required): [
     *                 BinaryData (Required)
     *             ]
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_failed/run_expired) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Required)
     *             tools (Required): [
     *                 BinaryData (Required)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to create the new message on.
     * @param createMessageRequest The createMessageRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single, existing message within an assistant thread along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createMessageWithResponse(String threadId, BinaryData createMessageRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createMessageWithResponseAsync(threadId, createMessageRequest, requestOptions);
    }

    /**
     * Gets a list of messages that exist on a thread.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>runId</td><td>String</td><td>No</td><td>Filter messages by the run ID that generated them.</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the created_at timestamp of the objects. asc for
     * ascending order and desc for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. after is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. before is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the
     * list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             status: String(in_progress/incomplete/completed) (Required)
     *             incomplete_details (Required): {
     *                 reason: String(content_filter/max_tokens/run_cancelled/run_failed/run_expired) (Required)
     *             }
     *             completed_at: Long (Required)
     *             incomplete_at: Long (Required)
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                     type: String (Required)
     *                 }
     *             ]
     *             assistant_id: String (Required)
     *             run_id: String (Required)
     *             attachments (Required): [
     *                  (Required){
     *                     file_id: String (Required)
     *                     tools (Required): [
     *                         BinaryData (Required)
     *                     ]
     *                 }
     *             ]
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to list messages from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of messages that exist on a thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listMessagesWithResponse(String threadId, RequestOptions requestOptions) {
        return this.serviceClient.listMessagesWithResponseAsync(threadId, requestOptions);
    }

    /**
     * Gets an existing message from an existing thread.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_failed/run_expired) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Required)
     *             tools (Required): [
     *                 BinaryData (Required)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to retrieve the specified message from.
     * @param messageId The ID of the message to retrieve from the specified thread.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an existing message from an existing thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMessageWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        return this.serviceClient.getMessageWithResponseAsync(threadId, messageId, requestOptions);
    }

    /**
     * Modifies an existing message on an existing thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_failed/run_expired) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Required)
     *             tools (Required): [
     *                 BinaryData (Required)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the specified message to modify.
     * @param messageId The ID of the message to modify on the specified thread.
     * @param updateMessageRequest The updateMessageRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single, existing message within an assistant thread along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateMessageWithResponse(String threadId, String messageId,
        BinaryData updateMessageRequest, RequestOptions requestOptions) {
        return this.serviceClient.updateMessageWithResponseAsync(threadId, messageId, updateMessageRequest,
            requestOptions);
    }

    /**
     * Creates a new run for an assistant thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assistant_id: String (Required)
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     additional_instructions: String (Optional)
     *     additional_messages (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             status: String(in_progress/incomplete/completed) (Required)
     *             incomplete_details (Required): {
     *                 reason: String(content_filter/max_tokens/run_cancelled/run_failed/run_expired) (Required)
     *             }
     *             completed_at: Long (Required)
     *             incomplete_at: Long (Required)
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                     type: String (Required)
     *                 }
     *             ]
     *             assistant_id: String (Required)
     *             run_id: String (Required)
     *             attachments (Required): [
     *                  (Required){
     *                     file_id: String (Required)
     *                     tools (Required): [
     *                         BinaryData (Required)
     *                     ]
     *                 }
     *             ]
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     stream: Boolean (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Optional)
     *     max_completion_tokens: Integer (Optional)
     *     truncation_strategy (Optional): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Optional)
     *     response_format: BinaryData (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *         type: String (Required)
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     created_at: long (Required)
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     completed_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     incomplete_details: String(max_completion_tokens/max_prompt_tokens) (Required)
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Required)
     *     max_completion_tokens: Integer (Required)
     *     truncation_strategy (Required): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Required)
     *     response_format: BinaryData (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to run.
     * @param createRunRequest The createRunRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRunWithResponse(String threadId, BinaryData createRunRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createRunWithResponseAsync(threadId, createRunRequest, requestOptions);
    }

    /**
     * Gets a list of runs for a specified thread.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the created_at timestamp of the objects. asc for
     * ascending order and desc for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. after is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. before is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the
     * list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             thread_id: String (Required)
     *             assistant_id: String (Required)
     *             status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *             required_action (Optional): {
     *                 type: String (Required)
     *             }
     *             last_error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *             }
     *             model: String (Required)
     *             instructions: String (Required)
     *             tools (Required): [
     *                  (Required){
     *                     type: String (Required)
     *                 }
     *             ]
     *             created_at: long (Required)
     *             expires_at: Long (Required)
     *             started_at: Long (Required)
     *             completed_at: Long (Required)
     *             cancelled_at: Long (Required)
     *             failed_at: Long (Required)
     *             incomplete_details: String(max_completion_tokens/max_prompt_tokens) (Required)
     *             usage (Required): {
     *                 completion_tokens: long (Required)
     *                 prompt_tokens: long (Required)
     *                 total_tokens: long (Required)
     *             }
     *             temperature: Double (Optional)
     *             top_p: Double (Optional)
     *             max_prompt_tokens: Integer (Required)
     *             max_completion_tokens: Integer (Required)
     *             truncation_strategy (Required): {
     *                 type: String(auto/last_messages) (Required)
     *                 last_messages: Integer (Optional)
     *             }
     *             tool_choice: BinaryData (Required)
     *             response_format: BinaryData (Required)
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to list runs from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of runs for a specified thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listRunsWithResponse(String threadId, RequestOptions requestOptions) {
        return this.serviceClient.listRunsWithResponseAsync(threadId, requestOptions);
    }

    /**
     * Gets an existing run from an existing thread.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *         type: String (Required)
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     created_at: long (Required)
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     completed_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     incomplete_details: String(max_completion_tokens/max_prompt_tokens) (Required)
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Required)
     *     max_completion_tokens: Integer (Required)
     *     truncation_strategy (Required): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Required)
     *     response_format: BinaryData (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to retrieve run information from.
     * @param runId The ID of the thread to retrieve information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an existing run from an existing thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        return this.serviceClient.getRunWithResponseAsync(threadId, runId, requestOptions);
    }

    /**
     * Modifies an existing thread run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *         type: String (Required)
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     created_at: long (Required)
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     completed_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     incomplete_details: String(max_completion_tokens/max_prompt_tokens) (Required)
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Required)
     *     max_completion_tokens: Integer (Required)
     *     truncation_strategy (Required): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Required)
     *     response_format: BinaryData (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread associated with the specified run.
     * @param runId The ID of the run to modify.
     * @param updateRunRequest The updateRunRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateRunWithResponse(String threadId, String runId, BinaryData updateRunRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.updateRunWithResponseAsync(threadId, runId, updateRunRequest, requestOptions);
    }

    /**
     * Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a
     * status of 'requires_action' with a required_action.type of 'submit_tool_outputs'.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     tool_outputs (Required): [
     *          (Required){
     *             tool_call_id: String (Optional)
     *             output: String (Optional)
     *         }
     *     ]
     *     stream: Boolean (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *         type: String (Required)
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     created_at: long (Required)
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     completed_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     incomplete_details: String(max_completion_tokens/max_prompt_tokens) (Required)
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Required)
     *     max_completion_tokens: Integer (Required)
     *     truncation_strategy (Required): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Required)
     *     response_format: BinaryData (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run that requires tool outputs.
     * @param submitToolOutputsToRunRequest The submitToolOutputsToRunRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> submitToolOutputsToRunWithResponse(String threadId, String runId,
        BinaryData submitToolOutputsToRunRequest, RequestOptions requestOptions) {
        return this.serviceClient.submitToolOutputsToRunWithResponseAsync(threadId, runId,
            submitToolOutputsToRunRequest, requestOptions);
    }

    /**
     * Cancels a run of an in progress thread.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *         type: String (Required)
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     created_at: long (Required)
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     completed_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     incomplete_details: String(max_completion_tokens/max_prompt_tokens) (Required)
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Required)
     *     max_completion_tokens: Integer (Required)
     *     truncation_strategy (Required): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Required)
     *     response_format: BinaryData (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread being run.
     * @param runId The ID of the run to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelRunWithResponse(String threadId, String runId,
        RequestOptions requestOptions) {
        return this.serviceClient.cancelRunWithResponseAsync(threadId, runId, requestOptions);
    }

    /**
     * Creates a new assistant thread and immediately starts a run using that new thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assistant_id: String (Required)
     *     thread (Optional): {
     *         messages (Optional): [
     *              (Optional){
     *                 role: String(user/assistant) (Required)
     *                 content: String (Required)
     *                 attachments (Optional): [
     *                      (Optional){
     *                         file_id: String (Required)
     *                         tools (Required): [
     *                             BinaryData (Required)
     *                         ]
     *                     }
     *                 ]
     *                 metadata (Optional): {
     *                     String: String (Required)
     *                 }
     *             }
     *         ]
     *         tool_resources (Optional): {
     *             code_interpreter (Optional): {
     *                 file_ids (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             file_search: BinaryData (Optional)
     *         }
     *         metadata (Optional): {
     *             String: String (Required)
     *         }
     *     }
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     stream: Boolean (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Optional)
     *     max_completion_tokens: Integer (Optional)
     *     truncation_strategy (Optional): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Optional)
     *     response_format: BinaryData (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *         type: String (Required)
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     created_at: long (Required)
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     completed_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     incomplete_details: String(max_completion_tokens/max_prompt_tokens) (Required)
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Required)
     *     max_completion_tokens: Integer (Required)
     *     truncation_strategy (Required): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Required)
     *     response_format: BinaryData (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param createThreadAndRunRequest The createThreadAndRunRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createThreadAndRunWithResponse(BinaryData createThreadAndRunRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createThreadAndRunWithResponseAsync(createThreadAndRunRequest, requestOptions);
    }

    /**
     * Gets a single run step from a thread run.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     type: String(message_creation/tool_calls) (Required)
     *     assistant_id: String (Required)
     *     thread_id: String (Required)
     *     run_id: String (Required)
     *     status: String(in_progress/cancelled/failed/completed/expired) (Required)
     *     step_details (Required): {
     *         type: String(message_creation/tool_calls) (Required)
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded) (Required)
     *         message: String (Required)
     *     }
     *     created_at: long (Required)
     *     expired_at: Long (Required)
     *     completed_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     usage (Optional): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the specific run to retrieve the step from.
     * @param stepId The ID of the step to retrieve information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single run step from a thread run along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRunStepWithResponse(String threadId, String runId, String stepId,
        RequestOptions requestOptions) {
        return this.serviceClient.getRunStepWithResponseAsync(threadId, runId, stepId, requestOptions);
    }

    /**
     * Gets a list of run steps from a thread run.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the created_at timestamp of the objects. asc for
     * ascending order and desc for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. after is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. before is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the
     * list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             type: String(message_creation/tool_calls) (Required)
     *             assistant_id: String (Required)
     *             thread_id: String (Required)
     *             run_id: String (Required)
     *             status: String(in_progress/cancelled/failed/completed/expired) (Required)
     *             step_details (Required): {
     *                 type: String(message_creation/tool_calls) (Required)
     *             }
     *             last_error (Required): {
     *                 code: String(server_error/rate_limit_exceeded) (Required)
     *                 message: String (Required)
     *             }
     *             created_at: long (Required)
     *             expired_at: Long (Required)
     *             completed_at: Long (Required)
     *             cancelled_at: Long (Required)
     *             failed_at: Long (Required)
     *             usage (Optional): {
     *                 completion_tokens: long (Required)
     *                 prompt_tokens: long (Required)
     *                 total_tokens: long (Required)
     *             }
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run to list steps from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of run steps from a thread run along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listRunStepsWithResponse(String threadId, String runId,
        RequestOptions requestOptions) {
        return this.serviceClient.listRunStepsWithResponseAsync(threadId, runId, requestOptions);
    }

    /**
     * Gets a list of previously uploaded files.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>purpose</td><td>String</td><td>No</td><td>A value that, when provided, limits list results to files
     * matching the corresponding purpose. Allowed values: "fine-tune", "fine-tune-results", "assistants",
     * "assistants_output", "batch", "batch_output", "vision".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             object: String (Required)
     *             id: String (Required)
     *             bytes: int (Required)
     *             filename: String (Required)
     *             created_at: long (Required)
     *             purpose: String(fine-tune/fine-tune-results/assistants/assistants_output/batch/batch_output/vision) (Required)
     *             status: String(uploaded/pending/running/processed/error/deleting/deleted) (Optional)
     *             status_details: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of previously uploaded files along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listFilesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listFilesWithResponseAsync(requestOptions);
    }

    /**
     * Uploads a file for use by other operations.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     bytes: int (Required)
     *     filename: String (Required)
     *     created_at: long (Required)
     *     purpose: String(fine-tune/fine-tune-results/assistants/assistants_output/batch/batch_output/vision) (Required)
     *     status: String(uploaded/pending/running/processed/error/deleting/deleted) (Optional)
     *     status_details: String (Optional)
     * }
     * }</pre>
     * 
     * @param uploadFileRequest The uploadFileRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> uploadFileWithResponse(BinaryData uploadFileRequest, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation 'uploadFile' is
        // 'multipart/form-data'
        return this.serviceClient.uploadFileWithResponseAsync(uploadFileRequest, requestOptions);
    }

    /**
     * Delete a previously uploaded file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param fileId The ID of the file to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a status response from a file deletion operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.deleteFileWithResponseAsync(fileId, requestOptions);
    }

    /**
     * Returns information about a specific file. Does not retrieve file content.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     bytes: int (Required)
     *     filename: String (Required)
     *     created_at: long (Required)
     *     purpose: String(fine-tune/fine-tune-results/assistants/assistants_output/batch/batch_output/vision) (Required)
     *     status: String(uploaded/pending/running/processed/error/deleting/deleted) (Optional)
     *     status_details: String (Optional)
     * }
     * }</pre>
     * 
     * @param fileId The ID of the file to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.getFileWithResponseAsync(fileId, requestOptions);
    }

    /**
     * Returns information about a specific file. Does not retrieve file content.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * byte[]
     * }</pre>
     * 
     * @param fileId The ID of the file to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFileContentWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.getFileContentWithResponseAsync(fileId, requestOptions);
    }

    /**
     * Returns a list of vector stores.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the created_at timestamp of the objects. asc for
     * ascending order and desc for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. after is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. before is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the
     * list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             name: String (Required)
     *             usage_bytes: int (Required)
     *             file_counts (Required): {
     *                 in_progress: int (Required)
     *                 completed: int (Required)
     *                 failed: int (Required)
     *                 cancelled: int (Required)
     *                 total: int (Required)
     *             }
     *             status: String(expired/in_progress/completed) (Required)
     *             expires_after (Optional): {
     *                 anchor: String(last_active_at) (Required)
     *                 days: int (Required)
     *             }
     *             expires_at: Long (Optional)
     *             last_active_at: Long (Required)
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listVectorStoresWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listVectorStoresWithResponseAsync(requestOptions);
    }

    /**
     * Creates a vector store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     name: String (Optional)
     *     expires_after (Optional): {
     *         anchor: String(last_active_at) (Required)
     *         days: int (Required)
     *     }
     *     chunking_strategy (Optional): {
     *         type: String(auto/static) (Required)
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     usage_bytes: int (Required)
     *     file_counts (Required): {
     *         in_progress: int (Required)
     *         completed: int (Required)
     *         failed: int (Required)
     *         cancelled: int (Required)
     *         total: int (Required)
     *     }
     *     status: String(expired/in_progress/completed) (Required)
     *     expires_after (Optional): {
     *         anchor: String(last_active_at) (Required)
     *         days: int (Required)
     *     }
     *     expires_at: Long (Optional)
     *     last_active_at: Long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param createVectorStoreRequest The createVectorStoreRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createVectorStoreWithResponse(BinaryData createVectorStoreRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createVectorStoreWithResponseAsync(createVectorStoreRequest, requestOptions);
    }

    /**
     * Returns the vector store object matching the specified ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     usage_bytes: int (Required)
     *     file_counts (Required): {
     *         in_progress: int (Required)
     *         completed: int (Required)
     *         failed: int (Required)
     *         cancelled: int (Required)
     *         total: int (Required)
     *     }
     *     status: String(expired/in_progress/completed) (Required)
     *     expires_after (Optional): {
     *         anchor: String(last_active_at) (Required)
     *         days: int (Required)
     *     }
     *     expires_at: Long (Optional)
     *     last_active_at: Long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions) {
        return this.serviceClient.getVectorStoreWithResponseAsync(vectorStoreId, requestOptions);
    }

    /**
     * The ID of the vector store to modify.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     expires_after (Optional): {
     *         anchor: String(last_active_at) (Required)
     *         days: int (Required)
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     usage_bytes: int (Required)
     *     file_counts (Required): {
     *         in_progress: int (Required)
     *         completed: int (Required)
     *         failed: int (Required)
     *         cancelled: int (Required)
     *         total: int (Required)
     *     }
     *     status: String(expired/in_progress/completed) (Required)
     *     expires_after (Optional): {
     *         anchor: String(last_active_at) (Required)
     *         days: int (Required)
     *     }
     *     expires_at: Long (Optional)
     *     last_active_at: Long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store to modify.
     * @param modifyVectorStoreRequest The modifyVectorStoreRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> modifyVectorStoreWithResponse(String vectorStoreId,
        BinaryData modifyVectorStoreRequest, RequestOptions requestOptions) {
        return this.serviceClient.modifyVectorStoreWithResponseAsync(vectorStoreId, modifyVectorStoreRequest,
            requestOptions);
    }

    /**
     * Deletes the vector store object matching the specified ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response object for deleting a vector store along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteVectorStoreWithResponse(String vectorStoreId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteVectorStoreWithResponseAsync(vectorStoreId, requestOptions);
    }

    /**
     * Returns a list of vector store files.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter by file status. Allowed values: "in_progress",
     * "completed", "failed", "cancelled".</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the created_at timestamp of the objects. asc for
     * ascending order and desc for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. after is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. before is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the
     * list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             usage_bytes: int (Required)
     *             created_at: long (Required)
     *             vector_store_id: String (Required)
     *             status: String(in_progress/completed/failed/cancelled) (Required)
     *             last_error (Required): {
     *                 code: String(internal_error/file_not_found/parsing_error/unhandled_mime_type) (Required)
     *                 message: String (Required)
     *             }
     *             chunking_strategy (Required): {
     *                 type: String(other/static) (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listVectorStoreFilesWithResponse(String vectorStoreId,
        RequestOptions requestOptions) {
        return this.serviceClient.listVectorStoreFilesWithResponseAsync(vectorStoreId, requestOptions);
    }

    /**
     * Create a vector store file by attaching a file to a vector store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     file_id: String (Required)
     *     chunking_strategy (Optional): {
     *         type: String(auto/static) (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     usage_bytes: int (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/failed/cancelled) (Required)
     *     last_error (Required): {
     *         code: String(internal_error/file_not_found/parsing_error/unhandled_mime_type) (Required)
     *         message: String (Required)
     *     }
     *     chunking_strategy (Required): {
     *         type: String(other/static) (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.
     * @param createVectorStoreFileRequest The createVectorStoreFileRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return description of a file attached to a vector store along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createVectorStoreFileWithResponse(String vectorStoreId,
        BinaryData createVectorStoreFileRequest, RequestOptions requestOptions) {
        return this.serviceClient.createVectorStoreFileWithResponseAsync(vectorStoreId, createVectorStoreFileRequest,
            requestOptions);
    }

    /**
     * Retrieves a vector store file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     usage_bytes: int (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/failed/cancelled) (Required)
     *     last_error (Required): {
     *         code: String(internal_error/file_not_found/parsing_error/unhandled_mime_type) (Required)
     *         message: String (Required)
     *     }
     *     chunking_strategy (Required): {
     *         type: String(other/static) (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file being retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return description of a file attached to a vector store along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getVectorStoreFileWithResponse(String vectorStoreId, String fileId,
        RequestOptions requestOptions) {
        return this.serviceClient.getVectorStoreFileWithResponseAsync(vectorStoreId, fileId, requestOptions);
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be
     * deleted.
     * To delete the file, use the delete file endpoint.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file to delete its relationship to the vector store.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response object for deleting a vector store file relationship along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteVectorStoreFileWithResponse(String vectorStoreId, String fileId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteVectorStoreFileWithResponseAsync(vectorStoreId, fileId, requestOptions);
    }

    /**
     * Create a vector store file batch.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     chunking_strategy (Optional): {
     *         type: String(auto/static) (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/cancelled/failed) (Required)
     *     file_counts (Required): {
     *         in_progress: int (Required)
     *         completed: int (Required)
     *         failed: int (Required)
     *         cancelled: int (Required)
     *         total: int (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.
     * @param createVectorStoreFileBatchRequest The createVectorStoreFileBatchRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a batch of files attached to a vector store along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createVectorStoreFileBatchWithResponse(String vectorStoreId,
        BinaryData createVectorStoreFileBatchRequest, RequestOptions requestOptions) {
        return this.serviceClient.createVectorStoreFileBatchWithResponseAsync(vectorStoreId,
            createVectorStoreFileBatchRequest, requestOptions);
    }

    /**
     * Retrieve a vector store file batch.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/cancelled/failed) (Required)
     *     file_counts (Required): {
     *         in_progress: int (Required)
     *         completed: int (Required)
     *         failed: int (Required)
     *         cancelled: int (Required)
     *         total: int (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch being retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a batch of files attached to a vector store along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId,
        RequestOptions requestOptions) {
        return this.serviceClient.getVectorStoreFileBatchWithResponseAsync(vectorStoreId, batchId, requestOptions);
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as
     * possible.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/cancelled/failed) (Required)
     *     file_counts (Required): {
     *         in_progress: int (Required)
     *         completed: int (Required)
     *         failed: int (Required)
     *         cancelled: int (Required)
     *         total: int (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a batch of files attached to a vector store along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId,
        RequestOptions requestOptions) {
        return this.serviceClient.cancelVectorStoreFileBatchWithResponseAsync(vectorStoreId, batchId, requestOptions);
    }

    /**
     * Returns a list of vector store files in a batch.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter by file status. Allowed values: "in_progress",
     * "completed", "failed", "cancelled".</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the created_at timestamp of the objects. asc for
     * ascending order and desc for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. after is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. before is an object ID that
     * defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with
     * obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the
     * list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             usage_bytes: int (Required)
     *             created_at: long (Required)
     *             vector_store_id: String (Required)
     *             status: String(in_progress/completed/failed/cancelled) (Required)
     *             last_error (Required): {
     *                 code: String(internal_error/file_not_found/parsing_error/unhandled_mime_type) (Required)
     *                 message: String (Required)
     *             }
     *             chunking_strategy (Required): {
     *                 type: String(other/static) (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch that the files belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listVectorStoreFileBatchFilesWithResponse(String vectorStoreId, String batchId,
        RequestOptions requestOptions) {
        return this.serviceClient.listVectorStoreFileBatchFilesWithResponseAsync(vectorStoreId, batchId,
            requestOptions);
    }

    /**
     * Creates a new assistant.
     * 
     * @param options Options for createAssistant API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Assistant> createAssistant(CreateAssistantOptions options) {
        // Generated convenience method for createAssistantWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateAssistantRequest createAssistantRequestObj
            = new CreateAssistantRequest(options.getModel()).setName(options.getName())
                .setDescription(options.getDescription())
                .setInstructions(options.getInstructions())
                .setTools(options.getTools())
                .setToolResources(options.getToolResources())
                .setTemperature(options.getTemperature())
                .setTopP(options.getTopP())
                .setResponseFormat(options.getResponseFormat())
                .setMetadata(options.getMetadata());
        BinaryData createAssistantRequest = BinaryData.fromObject(createAssistantRequestObj);
        return createAssistantWithResponse(createAssistantRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Assistant.class));
    }

    /**
     * Gets a list of assistants that were previously created.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of assistants that were previously created on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfAssistant> listAssistants(Integer limit, ListSortOrder order, String after,
        String before) {
        // Generated convenience method for listAssistantsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listAssistantsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfAssistant.class));
    }

    /**
     * Gets a list of assistants that were previously created.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of assistants that were previously created on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfAssistant> listAssistants() {
        // Generated convenience method for listAssistantsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listAssistantsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfAssistant.class));
    }

    /**
     * Retrieves an existing assistant.
     * 
     * @param assistantId The ID of the assistant to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Assistant> getAssistant(String assistantId) {
        // Generated convenience method for getAssistantWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAssistantWithResponse(assistantId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Assistant.class));
    }

    /**
     * Modifies an existing assistant.
     * 
     * @param options Options for updateAssistant API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Assistant> updateAssistant(UpdateAssistantOptions options) {
        // Generated convenience method for updateAssistantWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String assistantId = options.getAssistantId();
        UpdateAssistantRequest updateAssistantRequestObj = new UpdateAssistantRequest().setModel(options.getModel())
            .setName(options.getName())
            .setDescription(options.getDescription())
            .setInstructions(options.getInstructions())
            .setTools(options.getTools())
            .setToolResources(options.getToolResources())
            .setTemperature(options.getTemperature())
            .setTopP(options.getTopP())
            .setResponseFormat(options.getResponseFormat())
            .setMetadata(options.getMetadata());
        BinaryData updateAssistantRequest = BinaryData.fromObject(updateAssistantRequestObj);
        return updateAssistantWithResponse(assistantId, updateAssistantRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Assistant.class));
    }

    /**
     * Deletes an assistant.
     * 
     * @param assistantId The ID of the assistant to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an assistant deletion operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AssistantDeletionStatus> deleteAssistant(String assistantId) {
        // Generated convenience method for deleteAssistantWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteAssistantWithResponse(assistantId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AssistantDeletionStatus.class));
    }

    /**
     * Creates a new thread. Threads contain messages and can be run by assistants.
     * 
     * @param messages The initial messages to associate with the new thread.
     * @param toolResources A set of resources that are made available to the assistant's tools in this thread. The
     * resources are specific to the
     * type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool
     * requires
     * a list of vector store IDs.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a single thread associated with an assistant on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AssistantThread> createThread(List<ThreadMessageOptions> messages,
        CreateToolResourcesOptions toolResources, Map<String, String> metadata) {
        // Generated convenience method for createThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateThreadRequest createThreadRequestObj
            = new CreateThreadRequest().setMessages(messages).setToolResources(toolResources).setMetadata(metadata);
        BinaryData createThreadRequest = BinaryData.fromObject(createThreadRequestObj);
        return createThreadWithResponse(createThreadRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AssistantThread.class));
    }

    /**
     * Creates a new thread. Threads contain messages and can be run by assistants.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a single thread associated with an assistant on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AssistantThread> createThread() {
        // Generated convenience method for createThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateThreadRequest createThreadRequestObj = new CreateThreadRequest();
        BinaryData createThreadRequest = BinaryData.fromObject(createThreadRequestObj);
        return createThreadWithResponse(createThreadRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AssistantThread.class));
    }

    /**
     * Gets information about an existing thread.
     * 
     * @param threadId The ID of the thread to retrieve information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an existing thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AssistantThread> getThread(String threadId) {
        // Generated convenience method for getThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getThreadWithResponse(threadId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AssistantThread.class));
    }

    /**
     * Modifies an existing thread.
     * 
     * @param threadId The ID of the thread to modify.
     * @param toolResources A set of resources that are made available to the assistant's tools in this thread. The
     * resources are specific to the
     * type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool
     * requires
     * a list of vector store IDs.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a single thread associated with an assistant on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AssistantThread> updateThread(String threadId, UpdateToolResourcesOptions toolResources,
        Map<String, String> metadata) {
        // Generated convenience method for updateThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateThreadRequest updateThreadRequestObj
            = new UpdateThreadRequest().setToolResources(toolResources).setMetadata(metadata);
        BinaryData updateThreadRequest = BinaryData.fromObject(updateThreadRequestObj);
        return updateThreadWithResponse(threadId, updateThreadRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AssistantThread.class));
    }

    /**
     * Modifies an existing thread.
     * 
     * @param threadId The ID of the thread to modify.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a single thread associated with an assistant on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AssistantThread> updateThread(String threadId) {
        // Generated convenience method for updateThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateThreadRequest updateThreadRequestObj = new UpdateThreadRequest();
        BinaryData updateThreadRequest = BinaryData.fromObject(updateThreadRequestObj);
        return updateThreadWithResponse(threadId, updateThreadRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AssistantThread.class));
    }

    /**
     * Deletes an existing thread.
     * 
     * @param threadId The ID of the thread to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a thread deletion operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadDeletionStatus> deleteThread(String threadId) {
        // Generated convenience method for deleteThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteThreadWithResponse(threadId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadDeletionStatus.class));
    }

    /**
     * Creates a new message on a specified thread.
     * 
     * @param threadId The ID of the thread to create the new message on.
     * @param role The role of the entity that is creating the message. Allowed values include:
     * - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent
     * user-generated messages.
     * - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the
     * assistant into
     * the conversation.
     * @param content The textual content of the initial message. Currently, robust input including images and annotated
     * text may only be provided via
     * a separate call to the create message API.
     * @param attachments A list of files attached to the message, and the tools they should be added to.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single, existing message within an assistant thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadMessage> createMessage(String threadId, MessageRole role, String content,
        List<MessageAttachment> attachments, Map<String, String> metadata) {
        // Generated convenience method for createMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateMessageRequest createMessageRequestObj
            = new CreateMessageRequest(role, content).setAttachments(attachments).setMetadata(metadata);
        BinaryData createMessageRequest = BinaryData.fromObject(createMessageRequestObj);
        return createMessageWithResponse(threadId, createMessageRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadMessage.class));
    }

    /**
     * Creates a new message on a specified thread.
     * 
     * @param threadId The ID of the thread to create the new message on.
     * @param role The role of the entity that is creating the message. Allowed values include:
     * - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent
     * user-generated messages.
     * - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the
     * assistant into
     * the conversation.
     * @param content The textual content of the initial message. Currently, robust input including images and annotated
     * text may only be provided via
     * a separate call to the create message API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single, existing message within an assistant thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadMessage> createMessage(String threadId, MessageRole role, String content) {
        // Generated convenience method for createMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateMessageRequest createMessageRequestObj = new CreateMessageRequest(role, content);
        BinaryData createMessageRequest = BinaryData.fromObject(createMessageRequestObj);
        return createMessageWithResponse(threadId, createMessageRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadMessage.class));
    }

    /**
     * Gets a list of messages that exist on a thread.
     * 
     * @param threadId The ID of the thread to list messages from.
     * @param runId Filter messages by the run ID that generated them.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages that exist on a thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfThreadMessage> listMessages(String threadId, String runId, Integer limit,
        ListSortOrder order, String after, String before) {
        // Generated convenience method for listMessagesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (runId != null) {
            requestOptions.addQueryParam("runId", runId, false);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listMessagesWithResponse(threadId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfThreadMessage.class));
    }

    /**
     * Gets a list of messages that exist on a thread.
     * 
     * @param threadId The ID of the thread to list messages from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages that exist on a thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfThreadMessage> listMessages(String threadId) {
        // Generated convenience method for listMessagesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listMessagesWithResponse(threadId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfThreadMessage.class));
    }

    /**
     * Gets an existing message from an existing thread.
     * 
     * @param threadId The ID of the thread to retrieve the specified message from.
     * @param messageId The ID of the message to retrieve from the specified thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing message from an existing thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadMessage> getMessage(String threadId, String messageId) {
        // Generated convenience method for getMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMessageWithResponse(threadId, messageId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadMessage.class));
    }

    /**
     * Modifies an existing message on an existing thread.
     * 
     * @param threadId The ID of the thread containing the specified message to modify.
     * @param messageId The ID of the message to modify on the specified thread.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single, existing message within an assistant thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadMessage> updateMessage(String threadId, String messageId, Map<String, String> metadata) {
        // Generated convenience method for updateMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateMessageRequest updateMessageRequestObj = new UpdateMessageRequest().setMetadata(metadata);
        BinaryData updateMessageRequest = BinaryData.fromObject(updateMessageRequestObj);
        return updateMessageWithResponse(threadId, messageId, updateMessageRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadMessage.class));
    }

    /**
     * Modifies an existing message on an existing thread.
     * 
     * @param threadId The ID of the thread containing the specified message to modify.
     * @param messageId The ID of the message to modify on the specified thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single, existing message within an assistant thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadMessage> updateMessage(String threadId, String messageId) {
        // Generated convenience method for updateMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateMessageRequest updateMessageRequestObj = new UpdateMessageRequest();
        BinaryData updateMessageRequest = BinaryData.fromObject(updateMessageRequestObj);
        return updateMessageWithResponse(threadId, messageId, updateMessageRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadMessage.class));
    }

    /**
     * Creates a new run for an assistant thread.
     * 
     * @param options Options for createRun API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> createRun(CreateRunOptions options) {
        // Generated convenience method for createRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String threadId = options.getThreadId();
        CreateRunRequest createRunRequestObj
            = new CreateRunRequest(options.getAssistantId()).setModel(options.getModel())
                .setInstructions(options.getInstructions())
                .setAdditionalInstructions(options.getAdditionalInstructions())
                .setAdditionalMessages(options.getAdditionalMessages())
                .setTools(options.getTools())
                .setStream(options.isStream())
                .setTemperature(options.getTemperature())
                .setTopP(options.getTopP())
                .setMaxPromptTokens(options.getMaxPromptTokens())
                .setMaxCompletionTokens(options.getMaxCompletionTokens())
                .setTruncationStrategy(options.getTruncationStrategy())
                .setToolChoice(options.getToolChoice())
                .setResponseFormat(options.getResponseFormat())
                .setMetadata(options.getMetadata());
        BinaryData createRunRequest = BinaryData.fromObject(createRunRequestObj);
        return createRunWithResponse(threadId, createRunRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }

    /**
     * Gets a list of runs for a specified thread.
     * 
     * @param threadId The ID of the thread to list runs from.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of runs for a specified thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfThreadRun> listRuns(String threadId, Integer limit, ListSortOrder order,
        String after, String before) {
        // Generated convenience method for listRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listRunsWithResponse(threadId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfThreadRun.class));
    }

    /**
     * Gets a list of runs for a specified thread.
     * 
     * @param threadId The ID of the thread to list runs from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of runs for a specified thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfThreadRun> listRuns(String threadId) {
        // Generated convenience method for listRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listRunsWithResponse(threadId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfThreadRun.class));
    }

    /**
     * Gets an existing run from an existing thread.
     * 
     * @param threadId The ID of the thread to retrieve run information from.
     * @param runId The ID of the thread to retrieve information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing run from an existing thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> getRun(String threadId, String runId) {
        // Generated convenience method for getRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRunWithResponse(threadId, runId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }

    /**
     * Modifies an existing thread run.
     * 
     * @param threadId The ID of the thread associated with the specified run.
     * @param runId The ID of the run to modify.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> updateRun(String threadId, String runId, Map<String, String> metadata) {
        // Generated convenience method for updateRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateRunRequest updateRunRequestObj = new UpdateRunRequest().setMetadata(metadata);
        BinaryData updateRunRequest = BinaryData.fromObject(updateRunRequestObj);
        return updateRunWithResponse(threadId, runId, updateRunRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }

    /**
     * Modifies an existing thread run.
     * 
     * @param threadId The ID of the thread associated with the specified run.
     * @param runId The ID of the run to modify.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> updateRun(String threadId, String runId) {
        // Generated convenience method for updateRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateRunRequest updateRunRequestObj = new UpdateRunRequest();
        BinaryData updateRunRequest = BinaryData.fromObject(updateRunRequestObj);
        return updateRunWithResponse(threadId, runId, updateRunRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }

    /**
     * Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a
     * status of 'requires_action' with a required_action.type of 'submit_tool_outputs'.
     * 
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run that requires tool outputs.
     * @param toolOutputs A list of tools for which the outputs are being submitted.
     * @param stream If `true`, returns a stream of events that happen during the Run as server-sent events, terminating
     * when the Run enters a terminal state with a `data: [DONE]` message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> submitToolOutputsToRun(String threadId, String runId, List<ToolOutput> toolOutputs,
        Boolean stream) {
        // Generated convenience method for submitToolOutputsToRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        SubmitToolOutputsToRunRequest submitToolOutputsToRunRequestObj
            = new SubmitToolOutputsToRunRequest(toolOutputs).setStream(stream);
        BinaryData submitToolOutputsToRunRequest = BinaryData.fromObject(submitToolOutputsToRunRequestObj);
        return submitToolOutputsToRunWithResponse(threadId, runId, submitToolOutputsToRunRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }

    /**
     * Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a
     * status of 'requires_action' with a required_action.type of 'submit_tool_outputs'.
     * 
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run that requires tool outputs.
     * @param toolOutputs A list of tools for which the outputs are being submitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> submitToolOutputsToRun(String threadId, String runId, List<ToolOutput> toolOutputs) {
        // Generated convenience method for submitToolOutputsToRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        SubmitToolOutputsToRunRequest submitToolOutputsToRunRequestObj = new SubmitToolOutputsToRunRequest(toolOutputs);
        BinaryData submitToolOutputsToRunRequest = BinaryData.fromObject(submitToolOutputsToRunRequestObj);
        return submitToolOutputsToRunWithResponse(threadId, runId, submitToolOutputsToRunRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }

    /**
     * Cancels a run of an in progress thread.
     * 
     * @param threadId The ID of the thread being run.
     * @param runId The ID of the run to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> cancelRun(String threadId, String runId) {
        // Generated convenience method for cancelRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelRunWithResponse(threadId, runId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }

    /**
     * Creates a new assistant thread and immediately starts a run using that new thread.
     * 
     * @param options Options for createThreadAndRun API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> createThreadAndRun(CreateThreadAndRunOptions options) {
        // Generated convenience method for createThreadAndRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateThreadAndRunRequest createThreadAndRunRequestObj
            = new CreateThreadAndRunRequest(options.getAssistantId()).setThread(options.getThread())
                .setModel(options.getModel())
                .setInstructions(options.getInstructions())
                .setTools(options.getTools())
                .setToolResources(options.getToolResources())
                .setStream(options.isStream())
                .setTemperature(options.getTemperature())
                .setTopP(options.getTopP())
                .setMaxPromptTokens(options.getMaxPromptTokens())
                .setMaxCompletionTokens(options.getMaxCompletionTokens())
                .setTruncationStrategy(options.getTruncationStrategy())
                .setToolChoice(options.getToolChoice())
                .setResponseFormat(options.getResponseFormat())
                .setMetadata(options.getMetadata());
        BinaryData createThreadAndRunRequest = BinaryData.fromObject(createThreadAndRunRequestObj);
        return createThreadAndRunWithResponse(createThreadAndRunRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }

    /**
     * Gets a single run step from a thread run.
     * 
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the specific run to retrieve the step from.
     * @param stepId The ID of the step to retrieve information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single run step from a thread run on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunStep> getRunStep(String threadId, String runId, String stepId) {
        // Generated convenience method for getRunStepWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRunStepWithResponse(threadId, runId, stepId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RunStep.class));
    }

    /**
     * Gets a list of run steps from a thread run.
     * 
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run to list steps from.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of run steps from a thread run on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfRunStep> listRunSteps(String threadId, String runId, Integer limit,
        ListSortOrder order, String after, String before) {
        // Generated convenience method for listRunStepsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listRunStepsWithResponse(threadId, runId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfRunStep.class));
    }

    /**
     * Gets a list of run steps from a thread run.
     * 
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run to list steps from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of run steps from a thread run on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfRunStep> listRunSteps(String threadId, String runId) {
        // Generated convenience method for listRunStepsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listRunStepsWithResponse(threadId, runId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfRunStep.class));
    }

    /**
     * Gets a list of previously uploaded files.
     * 
     * @param purpose A value that, when provided, limits list results to files matching the corresponding purpose.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of previously uploaded files on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileListResponse> listFiles(FilePurpose purpose) {
        // Generated convenience method for listFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (purpose != null) {
            requestOptions.addQueryParam("purpose", purpose.toString(), false);
        }
        return listFilesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FileListResponse.class));
    }

    /**
     * Gets a list of previously uploaded files.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of previously uploaded files on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileListResponse> listFiles() {
        // Generated convenience method for listFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFilesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FileListResponse.class));
    }

    /**
     * Uploads a file for use by other operations.
     * 
     * @param file The file data (not filename) to upload.
     * @param purpose The intended purpose of the file.
     * @param filename A filename to associate with the uploaded data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIFile> uploadFile(FileDetails file, FilePurpose purpose, String filename) {
        // Generated convenience method for uploadFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UploadFileRequest uploadFileRequestObj = new UploadFileRequest(file, purpose).setFilename(filename);
        BinaryData uploadFileRequest = new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", uploadFileRequestObj.getFile().getContent(),
                uploadFileRequestObj.getFile().getContentType(), uploadFileRequestObj.getFile().getFilename())
            .serializeTextField("purpose", Objects.toString(uploadFileRequestObj.getPurpose()))
            .serializeTextField("filename", uploadFileRequestObj.getFilename())
            .end()
            .getRequestBody();
        return uploadFileWithResponse(uploadFileRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIFile.class));
    }

    /**
     * Uploads a file for use by other operations.
     * 
     * @param file The file data (not filename) to upload.
     * @param purpose The intended purpose of the file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIFile> uploadFile(FileDetails file, FilePurpose purpose) {
        // Generated convenience method for uploadFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UploadFileRequest uploadFileRequestObj = new UploadFileRequest(file, purpose);
        BinaryData uploadFileRequest = new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", uploadFileRequestObj.getFile().getContent(),
                uploadFileRequestObj.getFile().getContentType(), uploadFileRequestObj.getFile().getFilename())
            .serializeTextField("purpose", Objects.toString(uploadFileRequestObj.getPurpose()))
            .serializeTextField("filename", uploadFileRequestObj.getFilename())
            .end()
            .getRequestBody();
        return uploadFileWithResponse(uploadFileRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIFile.class));
    }

    /**
     * Delete a previously uploaded file.
     * 
     * @param fileId The ID of the file to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a status response from a file deletion operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileDeletionStatus> deleteFile(String fileId) {
        // Generated convenience method for deleteFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteFileWithResponse(fileId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FileDeletionStatus.class));
    }

    /**
     * Returns information about a specific file. Does not retrieve file content.
     * 
     * @param fileId The ID of the file to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIFile> getFile(String fileId) {
        // Generated convenience method for getFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFileWithResponse(fileId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIFile.class));
    }

    /**
     * Returns information about a specific file. Does not retrieve file content.
     * 
     * @param fileId The ID of the file to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<byte[]> getFileContent(String fileId) {
        // Generated convenience method for getFileContentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFileContentWithResponse(fileId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(byte[].class));
    }

    /**
     * Returns a list of vector stores.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfVectorStore> listVectorStores(Integer limit, ListSortOrder order, String after,
        String before) {
        // Generated convenience method for listVectorStoresWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listVectorStoresWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfVectorStore.class));
    }

    /**
     * Returns a list of vector stores.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfVectorStore> listVectorStores() {
        // Generated convenience method for listVectorStoresWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listVectorStoresWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfVectorStore.class));
    }

    /**
     * Creates a vector store.
     * 
     * @param fileIds A list of file IDs that the vector store should use. Useful for tools like `file_search` that can
     * access files.
     * @param name The name of the vector store.
     * @param expiresAfter Details on when this vector store expires.
     * @param chunkingStrategy The chunking strategy used to chunk the file(s). If not set, will use the auto strategy.
     * Only applicable if file_ids is non-empty.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStore> createVectorStore(List<String> fileIds, String name,
        VectorStoreExpirationPolicy expiresAfter, VectorStoreChunkingStrategyRequest chunkingStrategy,
        Map<String, String> metadata) {
        // Generated convenience method for createVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateVectorStoreRequest createVectorStoreRequestObj = new CreateVectorStoreRequest().setFileIds(fileIds)
            .setName(name)
            .setExpiresAfter(expiresAfter)
            .setChunkingStrategy(chunkingStrategy)
            .setMetadata(metadata);
        BinaryData createVectorStoreRequest = BinaryData.fromObject(createVectorStoreRequestObj);
        return createVectorStoreWithResponse(createVectorStoreRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStore.class));
    }

    /**
     * Creates a vector store.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStore> createVectorStore() {
        // Generated convenience method for createVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateVectorStoreRequest createVectorStoreRequestObj = new CreateVectorStoreRequest();
        BinaryData createVectorStoreRequest = BinaryData.fromObject(createVectorStoreRequestObj);
        return createVectorStoreWithResponse(createVectorStoreRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStore.class));
    }

    /**
     * Returns the vector store object matching the specified ID.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStore> getVectorStore(String vectorStoreId) {
        // Generated convenience method for getVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getVectorStoreWithResponse(vectorStoreId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStore.class));
    }

    /**
     * The ID of the vector store to modify.
     * 
     * @param vectorStoreId The ID of the vector store to modify.
     * @param name The name of the vector store.
     * @param expiresAfter Details on when this vector store expires.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStore> modifyVectorStore(String vectorStoreId, String name,
        VectorStoreExpirationPolicy expiresAfter, Map<String, String> metadata) {
        // Generated convenience method for modifyVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        ModifyVectorStoreRequest modifyVectorStoreRequestObj
            = new ModifyVectorStoreRequest().setName(name).setExpiresAfter(expiresAfter).setMetadata(metadata);
        BinaryData modifyVectorStoreRequest = BinaryData.fromObject(modifyVectorStoreRequestObj);
        return modifyVectorStoreWithResponse(vectorStoreId, modifyVectorStoreRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStore.class));
    }

    /**
     * The ID of the vector store to modify.
     * 
     * @param vectorStoreId The ID of the vector store to modify.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStore> modifyVectorStore(String vectorStoreId) {
        // Generated convenience method for modifyVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        ModifyVectorStoreRequest modifyVectorStoreRequestObj = new ModifyVectorStoreRequest();
        BinaryData modifyVectorStoreRequest = BinaryData.fromObject(modifyVectorStoreRequestObj);
        return modifyVectorStoreWithResponse(vectorStoreId, modifyVectorStoreRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStore.class));
    }

    /**
     * Deletes the vector store object matching the specified ID.
     * 
     * @param vectorStoreId The ID of the vector store to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response object for deleting a vector store on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreDeletionStatus> deleteVectorStore(String vectorStoreId) {
        // Generated convenience method for deleteVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteVectorStoreWithResponse(vectorStoreId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreDeletionStatus.class));
    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @param filter Filter by file status.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfVectorStoreFile> listVectorStoreFiles(String vectorStoreId,
        VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before) {
        // Generated convenience method for listVectorStoreFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter.toString(), false);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listVectorStoreFilesWithResponse(vectorStoreId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfVectorStoreFile.class));
    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfVectorStoreFile> listVectorStoreFiles(String vectorStoreId) {
        // Generated convenience method for listVectorStoreFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listVectorStoreFilesWithResponse(vectorStoreId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfVectorStoreFile.class));
    }

    /**
     * Create a vector store file by attaching a file to a vector store.
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.
     * @param fileId A File ID that the vector store should use. Useful for tools like `file_search` that can access
     * files.
     * @param chunkingStrategy The chunking strategy used to chunk the file(s). If not set, will use the auto strategy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a file attached to a vector store on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreFile> createVectorStoreFile(String vectorStoreId, String fileId,
        VectorStoreChunkingStrategyRequest chunkingStrategy) {
        // Generated convenience method for createVectorStoreFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateVectorStoreFileRequest createVectorStoreFileRequestObj
            = new CreateVectorStoreFileRequest(fileId).setChunkingStrategy(chunkingStrategy);
        BinaryData createVectorStoreFileRequest = BinaryData.fromObject(createVectorStoreFileRequestObj);
        return createVectorStoreFileWithResponse(vectorStoreId, createVectorStoreFileRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreFile.class));
    }

    /**
     * Create a vector store file by attaching a file to a vector store.
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.
     * @param fileId A File ID that the vector store should use. Useful for tools like `file_search` that can access
     * files.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a file attached to a vector store on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreFile> createVectorStoreFile(String vectorStoreId, String fileId) {
        // Generated convenience method for createVectorStoreFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateVectorStoreFileRequest createVectorStoreFileRequestObj = new CreateVectorStoreFileRequest(fileId);
        BinaryData createVectorStoreFileRequest = BinaryData.fromObject(createVectorStoreFileRequestObj);
        return createVectorStoreFileWithResponse(vectorStoreId, createVectorStoreFileRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreFile.class));
    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file being retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a file attached to a vector store on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreFile> getVectorStoreFile(String vectorStoreId, String fileId) {
        // Generated convenience method for getVectorStoreFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getVectorStoreFileWithResponse(vectorStoreId, fileId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreFile.class));
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be
     * deleted.
     * To delete the file, use the delete file endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file to delete its relationship to the vector store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response object for deleting a vector store file relationship on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreFileDeletionStatus> deleteVectorStoreFile(String vectorStoreId, String fileId) {
        // Generated convenience method for deleteVectorStoreFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteVectorStoreFileWithResponse(vectorStoreId, fileId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreFileDeletionStatus.class));
    }

    /**
     * Create a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.
     * @param fileIds A list of File IDs that the vector store should use. Useful for tools like `file_search` that can
     * access files.
     * @param chunkingStrategy The chunking strategy used to chunk the file(s). If not set, will use the auto strategy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a batch of files attached to a vector store on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreFileBatch> createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds,
        VectorStoreChunkingStrategyRequest chunkingStrategy) {
        // Generated convenience method for createVectorStoreFileBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequestObj
            = new CreateVectorStoreFileBatchRequest(fileIds).setChunkingStrategy(chunkingStrategy);
        BinaryData createVectorStoreFileBatchRequest = BinaryData.fromObject(createVectorStoreFileBatchRequestObj);
        return createVectorStoreFileBatchWithResponse(vectorStoreId, createVectorStoreFileBatchRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreFileBatch.class));
    }

    /**
     * Create a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.
     * @param fileIds A list of File IDs that the vector store should use. Useful for tools like `file_search` that can
     * access files.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a batch of files attached to a vector store on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreFileBatch> createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds) {
        // Generated convenience method for createVectorStoreFileBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequestObj
            = new CreateVectorStoreFileBatchRequest(fileIds);
        BinaryData createVectorStoreFileBatchRequest = BinaryData.fromObject(createVectorStoreFileBatchRequestObj);
        return createVectorStoreFileBatchWithResponse(vectorStoreId, createVectorStoreFileBatchRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreFileBatch.class));
    }

    /**
     * Retrieve a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch being retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a batch of files attached to a vector store on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreFileBatch> getVectorStoreFileBatch(String vectorStoreId, String batchId) {
        // Generated convenience method for getVectorStoreFileBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getVectorStoreFileBatchWithResponse(vectorStoreId, batchId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreFileBatch.class));
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as
     * possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a batch of files attached to a vector store on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VectorStoreFileBatch> cancelVectorStoreFileBatch(String vectorStoreId, String batchId) {
        // Generated convenience method for cancelVectorStoreFileBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelVectorStoreFileBatchWithResponse(vectorStoreId, batchId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VectorStoreFileBatch.class));
    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch that the files belong to.
     * @param filter Filter by file status.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfVectorStoreFile> listVectorStoreFileBatchFiles(String vectorStoreId, String batchId,
        VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before) {
        // Generated convenience method for listVectorStoreFileBatchFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter.toString(), false);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listVectorStoreFileBatchFilesWithResponse(vectorStoreId, batchId, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfVectorStoreFile.class));
    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch that the files belong to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OpenAIPageableListOfVectorStoreFile> listVectorStoreFileBatchFiles(String vectorStoreId,
        String batchId) {
        // Generated convenience method for listVectorStoreFileBatchFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listVectorStoreFileBatchFilesWithResponse(vectorStoreId, batchId, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OpenAIPageableListOfVectorStoreFile.class));
    }
}
