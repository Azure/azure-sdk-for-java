// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.inference;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.ai.inference.models.*;
import com.azure.core.credential.AzureKeyCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.test.models.CustomMatcher;
import com.azure.core.test.models.TestProxySanitizer;
import com.azure.core.test.models.TestProxySanitizerType;
import com.azure.core.util.Configuration;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

import static com.azure.ai.inference.TestUtils.FAKE_API_KEY;
import static org.junit.jupiter.api.Assertions.*;

public abstract class EmbeddingsClientTestBase extends TestProxyTestBase {
    protected EmbeddingsClient embeddingsClient;
    protected ImageEmbeddingsClient imageEmbeddingsClient;
    private boolean sanitizersRemoved = false;

    EmbeddingsClientBuilder getEmbeddingsClientBuilder(HttpClient httpClient) {
        EmbeddingsClientBuilder builder = new EmbeddingsClientBuilder()
                .httpClient(httpClient);
        TestMode testMode = getTestMode();
        if (testMode != TestMode.LIVE) {
            addTestRecordCustomSanitizers();
            addCustomMatchers();
            // Disable "$..id"=AZSDK3430, "Set-Cookie"=AZSDK2015 for both azure and non-azure clients from the list of common sanitizers.
            if (!sanitizersRemoved) {
                interceptorManager.removeSanitizers("AZSDK3430", "AZSDK3493");
                sanitizersRemoved = true;
            }
        }

        if (testMode == TestMode.PLAYBACK) {
            builder
                    .endpoint("https://localhost:8080")
                    .credential(new AzureKeyCredential(FAKE_API_KEY));
        } else if (testMode == TestMode.RECORD) {
            builder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .endpoint(Configuration.getGlobalConfiguration().get("EMBEDDINGS_MODEL_ENDPOINT"))
                    .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get("AZURE_EMBEDDINGS_KEY")));
        } else {
            builder
                    .endpoint(Configuration.getGlobalConfiguration().get("EMBEDDINGS_MODEL_ENDPOINT"))
                    .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get("AZURE_EMBEDDINGS_KEY")));
        }
        return builder;
    }

    ImageEmbeddingsClientBuilder getImageEmbeddingsClientBuilder(HttpClient httpClient) {
        ImageEmbeddingsClientBuilder builder = new ImageEmbeddingsClientBuilder()
                .httpClient(httpClient);
        TestMode testMode = getTestMode();
        if (testMode != TestMode.LIVE) {
            addTestRecordCustomSanitizers();
            addCustomMatchers();
            // Disable "$..id"=AZSDK3430, "Set-Cookie"=AZSDK2015 for both azure and non-azure clients from the list of common sanitizers.
            if (!sanitizersRemoved) {
                interceptorManager.removeSanitizers("AZSDK3430", "AZSDK3493");
                sanitizersRemoved = true;
            }
        }

        if (testMode == TestMode.PLAYBACK) {
            builder
                    .endpoint("https://localhost:8080")
                    .credential(new AzureKeyCredential(FAKE_API_KEY));
        } else if (testMode == TestMode.RECORD) {
            builder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .endpoint(Configuration.getGlobalConfiguration().get("EMBEDDINGS_MODEL_ENDPOINT"))
                    .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get("AZURE_EMBEDDINGS_KEY")));
        } else {
            builder
                    .endpoint(Configuration.getGlobalConfiguration().get("EMBEDDINGS_MODEL_ENDPOINT"))
                    .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get("AZURE_EMBEDDINGS_KEY")));
        }
        return builder;
    }

    private void addTestRecordCustomSanitizers() {
        String sanitizedRequestUri = "https://REDACTED/";
        String requestUriRegex = "https://.*/openai/deployments/.*?/";
        interceptorManager.addSanitizers(Arrays.asList(
                new TestProxySanitizer("$..key", null, "REDACTED", TestProxySanitizerType.BODY_KEY),
                new TestProxySanitizer("$..endpoint", requestUriRegex, sanitizedRequestUri, TestProxySanitizerType.URL),
                new TestProxySanitizer("Content-Type", "(^multipart\\/form-data; boundary=[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{2})",
                        "multipart\\/form-data; boundary=BOUNDARY", TestProxySanitizerType.HEADER)
        ));
    }

    private void addCustomMatchers() {
        interceptorManager.addMatchers(new CustomMatcher().setExcludedHeaders(Arrays.asList("Cookie", "Set-Cookie")));
    }

    @Test
    public abstract void testGetEmbeddings(HttpClient httpClient);

    void getEmbeddingsRunner(Consumer<List<String>> testRunner) {
        testRunner.accept(getPrompts());
    }

    static void assertEmbeddings(EmbeddingsResult actual) {
        List<EmbeddingItem> data = actual.getData();
        assertNotNull(data);
        assertFalse(data.isEmpty());

        for (EmbeddingItem item : data) {
            List<Float> embedding = item.getEmbeddingList();
            assertNotNull(embedding);
            assertFalse(embedding.isEmpty());
        }
        assertNotNull(actual.getUsage());
    }

    private List<String> getPrompts() {
        List<String> prompts = new ArrayList<>();
        prompts.add("Can you help me?");
        prompts.add("What's the best way to train a parrot?");
        return prompts;
    }
}
