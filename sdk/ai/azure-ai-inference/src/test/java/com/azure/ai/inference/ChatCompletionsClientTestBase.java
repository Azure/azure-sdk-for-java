// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.inference;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.ai.inference.models.*;
import com.azure.core.credential.AzureKeyCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpRequest;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.test.models.CustomMatcher;
import com.azure.core.test.models.TestProxySanitizer;
import com.azure.core.test.models.TestProxySanitizerType;
import com.azure.core.util.Configuration;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static com.azure.ai.inference.TestUtils.FAKE_API_KEY;

public abstract class ChatCompletionsClientTestBase extends TestProxyTestBase {
    protected ChatCompletionsClient chatCompletionsClient;
    protected EmbeddingsClient embeddingsClient;
    protected ImageEmbeddingsClient imageEmbeddingsClient;
    private boolean sanitizersRemoved = false;

    ChatCompletionsClientBuilder getChatCompletionsClientBuilder(HttpClient httpClient) {
        ChatCompletionsClientBuilder builder = new ChatCompletionsClientBuilder()
                .httpClient(httpClient);
        TestMode testMode = getTestMode();
        if (testMode != TestMode.LIVE) {
            addTestRecordCustomSanitizers();
            addCustomMatchers();
            // Disable "$..id"=AZSDK3430, "Set-Cookie"=AZSDK2015 for both azure and non-azure clients from the list of common sanitizers.
            if (!sanitizersRemoved) {
                interceptorManager.removeSanitizers("AZSDK3430", "AZSDK3493");
                sanitizersRemoved = true;
            }
        }

        if (testMode == TestMode.PLAYBACK) {
            builder
                    .endpoint("https://localhost:8080")
                    .credential(new AzureKeyCredential(FAKE_API_KEY));
        } else if (testMode == TestMode.RECORD) {
            builder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .endpoint(Configuration.getGlobalConfiguration().get("MODEL_ENDPOINT"))
                    .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get("AZURE_API_KEY")));
        } else {
            builder
                    .endpoint(Configuration.getGlobalConfiguration().get("MODEL_ENDPOINT"))
                    .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get("AZURE_API_KEY")));
        }
        return builder;
    }

    private void addTestRecordCustomSanitizers() {
        String sanitizedRequestUri = "https://REDACTED/";
        String requestUriRegex = "https://.*/openai/deployments/.*?/";
        interceptorManager.addSanitizers(Arrays.asList(
                new TestProxySanitizer("$..key", null, "REDACTED", TestProxySanitizerType.BODY_KEY),
                new TestProxySanitizer("$..endpoint", requestUriRegex, sanitizedRequestUri, TestProxySanitizerType.URL),
                new TestProxySanitizer("Content-Type", "(^multipart\\/form-data; boundary=[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{2})",
                        "multipart\\/form-data; boundary=BOUNDARY", TestProxySanitizerType.HEADER)
        ));
    }

    private void addCustomMatchers() {
        interceptorManager.addMatchers(new CustomMatcher().setExcludedHeaders(Arrays.asList("Cookie", "Set-Cookie")));
    }

    @Test
    public abstract void testGetChatCompletions(HttpClient httpClient);

    void getChatCompletionsRunner(Consumer<String> testRunner) {
        testRunner.accept("Say this is a test");
    }

    void getChatCompletionsFromOptionsRunner(Consumer<ChatCompletionsOptions> testRunner) {
        List<ChatRequestMessage> chatMessages = Arrays.asList(
            new ChatRequestSystemMessage("You are a helpful assistant."),
            new ChatRequestUserMessage("What sort of clothing should I wear today in Berlin?\n")
        );
        ChatCompletionsOptions options = new ChatCompletionsOptions(chatMessages);
        testRunner.accept(options);
    }

    void getChatCompletionsFromMessagesRunner(Consumer<List<ChatRequestMessage>> testRunner) {
        testRunner.accept(getChatMessages());
    }

    static void assertCompletionsStream(StreamingChatCompletionsUpdate chatCompletions) {
        if (chatCompletions.getId() != null && !chatCompletions.getId().isEmpty()) {
            assertNotNull(chatCompletions.getId());
            assertNotNull(chatCompletions.getChoices());
            assertFalse(chatCompletions.getChoices().isEmpty());
            assertNotNull(chatCompletions.getChoice().getDelta());
        }
    }

    static void assertCompletions(int choicesPerPrompt, ChatCompletions actual) {
        assertNotNull(actual);
        assertInstanceOf(ChatCompletions.class, actual);
        assertChoices(choicesPerPrompt, actual.getChoices());
        assertNotNull(actual.getUsage());
    }

    static void assertChoices(int choicesPerPrompt, List<ChatChoice> actual) {
        assertEquals(choicesPerPrompt, actual.size());
        for (int i = 0; i < actual.size(); i++) {
            assertChoice(i, actual.get(i));
        }
    }

    static void assertChoice(int index, ChatChoice actual) {
        assertNotNull(actual.getMessage().getContent());
        assertEquals(index, actual.getIndex());
        assertNotNull(actual.getFinishReason());
    }

    static void assertResponseRequestHeader(HttpRequest request) {
        request.getHeaders().stream().filter(header -> {
            String name = header.getName();
            return "my-header1".equals(name) || "my-header2".equals(name) || "my-header3".equals(name);
        }).forEach(header -> {
            if (header.getName().equals("my-header1")) {
                assertEquals("my-header1-value", header.getValue());
            } else if (header.getName().equals("my-header2")) {
                assertEquals("my-header2-value", header.getValue());
            } else if (header.getName().equals("my-header3")) {
                assertEquals("my-header3-value", header.getValue());
            } else {
                assertFalse(true);
            }
        });
    }

    private List<ChatRequestMessage> getChatMessages() {
        List<ChatRequestMessage> chatMessages = new ArrayList<>();
        chatMessages.add(new ChatRequestSystemMessage("You are a helpful assistant. You will talk like a pirate."));
        chatMessages.add(new ChatRequestUserMessage("Can you help me?\n"));
        chatMessages.add(new ChatRequestAssistantMessage("Of course, me hearty! What can I do for ye?"));
        chatMessages.add(new ChatRequestUserMessage("What's the best way to train a parrot?\n"));
        return chatMessages;
    }
}
