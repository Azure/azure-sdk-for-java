// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.inference.usage;

import com.azure.ai.inference.EmbeddingsAsyncClient;
import com.azure.ai.inference.EmbeddingsClientBuilder;
import com.azure.ai.inference.models.EmbeddingItem;
import com.azure.ai.inference.models.EmbeddingsUsage;
import com.azure.core.credential.AzureKeyCredential;
import com.azure.core.util.Configuration;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public final class TextEmbeddingsAsyncSample {
     /**
     * @param args Unused. Arguments to the program.
     */
    public static void main(String[] args) throws InterruptedException {
        String key = Configuration.getGlobalConfiguration().get("AZURE_EMBEDDINGS_KEY");
        String endpoint = Configuration.getGlobalConfiguration().get("EMBEDDINGS_MODEL_ENDPOINT");
        EmbeddingsAsyncClient client = new EmbeddingsClientBuilder()
            .credential(new AzureKeyCredential(key))
            .endpoint(endpoint)
            .buildAsyncClient();

        List<String> promptList = new ArrayList<>();
        String prompt = "Tell me 3 jokes about trains";
        promptList.add(prompt);

        client.embed(promptList).subscribe(
            embeddings -> {
                for (EmbeddingItem item : embeddings.getData()) {
                    System.out.printf("Index: %d.%n", item.getIndex());
                    System.out.println("Embedding as list of floats: ");
                    for (Float embedding : item.getEmbeddingList()) {
                        System.out.printf("%f;", embedding);
                    }
                }
                EmbeddingsUsage usage = embeddings.getUsage();
                System.out.println("");
                System.out.printf(
                    "Usage: number of prompt token is %d and number of total tokens in request and response is %d.%n",
                    usage.getPromptTokens(), usage.getTotalTokens());
            },
            error -> System.err.println("There was an error getting embeddings." + error),
            () -> System.out.println("Completed called getEmbeddings."));

        // The .subscribe() creation and assignment is not a blocking call. For the purpose of this example, we sleep
        // the thread so the program does not end before the send operation is complete. Using .block() instead of
        // .subscribe() will turn this into a synchronous call.
        TimeUnit.SECONDS.sleep(10);

    }
}
