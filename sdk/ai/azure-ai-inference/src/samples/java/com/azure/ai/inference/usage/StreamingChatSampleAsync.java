// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.inference.usage;

import com.azure.ai.inference.ChatCompletionsAsyncClient;
import com.azure.ai.inference.ChatCompletionsClientBuilder;
import com.azure.ai.inference.models.ChatRequestMessage;
import com.azure.ai.inference.models.ChatRequestUserMessage;
import com.azure.ai.inference.models.ChatRequestSystemMessage;
import com.azure.ai.inference.models.ChatRequestAssistantMessage;
import com.azure.ai.inference.models.ChatCompletionsOptions;
import com.azure.ai.inference.models.StreamingChatResponseMessageUpdate;
import com.azure.core.credential.AzureKeyCredential;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public final class StreamingChatSampleAsync {
     /**
     * @param args Unused. Arguments to the program.
     */
    public static void main(String[] args) throws InterruptedException {
        String key = Configuration.getGlobalConfiguration().get("AZURE_API_KEY");
        String endpoint = Configuration.getGlobalConfiguration().get("MODEL_ENDPOINT");
        ChatCompletionsAsyncClient client = new ChatCompletionsClientBuilder()
            .credential(new AzureKeyCredential(key))
            .endpoint(endpoint)
            .buildAsyncClient();

        List<ChatRequestMessage> chatMessages = new ArrayList<>();
        chatMessages.add(new ChatRequestSystemMessage("You are a helpful assistant. You will talk like a pirate."));
        chatMessages.add(new ChatRequestUserMessage("Can you help me?"));
        chatMessages.add(new ChatRequestAssistantMessage("Of course, me hearty! What can I do for ye?"));
        chatMessages.add(new ChatRequestUserMessage("What's the best way to train a parrot?"));


        client.completeStream(new ChatCompletionsOptions(chatMessages))
            .map(chatCompletions -> {
                /* The delta is the message content for a streaming response.
                 * Subsequence of streaming delta will be like:
                 * "delta": {
                 *     "role": "assistant"
                 * },
                 * "delta": {
                 *     "content": "Why"
                 * },
                 * "delta": {
                 *     "content": " don"
                 * },
                 * "delta": {
                 *     "content": "'t"
                 * }
                 */

                if (CoreUtils.isNullOrEmpty(chatCompletions.getChoices())) {
                    return "";
                }

                StreamingChatResponseMessageUpdate delta = chatCompletions.getChoice().getDelta();

                if (delta.getRole() != null) {
                    System.out.println("Role = " + delta.getRole());
                }
                return delta.getContent() == null ? "" : delta.getContent();
            })
            .subscribe(
                System.out::print,
                error -> System.err.println("There was an error getting chat completions." + error),
                () -> System.out.println("\nCompleted called completeStreaming."));


        // The .subscribe() creation and assignment is not a blocking call. For the purpose of this example, we sleep
        // the thread so the program does not end before the send operation is complete. Using .block() instead of
        // .subscribe() will turn this into a synchronous call.
        TimeUnit.SECONDS.sleep(10);
    }
}
