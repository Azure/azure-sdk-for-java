// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.inference;

import com.azure.ai.inference.implementation.EmbeddingsClientImpl;
import com.azure.ai.inference.implementation.models.EmbedRequest;
import com.azure.ai.inference.models.EmbeddingEncodingFormat;
import com.azure.ai.inference.models.EmbeddingInputType;
import com.azure.ai.inference.models.EmbeddingsResult;
import com.azure.ai.inference.models.ExtraParameters;
import com.azure.ai.inference.models.ModelInfo;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous EmbeddingsClient type.
 */
@ServiceClient(builder = EmbeddingsClientBuilder.class, isAsync = true)
public final class EmbeddingsAsyncClient {

    @Generated
    private final EmbeddingsClientImpl serviceClient;

    /**
     * Initializes an instance of EmbeddingsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    EmbeddingsAsyncClient(EmbeddingsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Return the embedding vectors for given text prompts.
     * The method makes a REST API call to the `/embeddings` route on the given endpoint.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>extra-parameters</td><td>String</td><td>No</td><td>Controls what happens if extra parameters, undefined
     * by the REST API,
     * are passed in the JSON request payload.
     * This sets the HTTP request header `extra-parameters`. Allowed values: "error", "drop", "pass-through".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>{@code
     * {
     *     input (Required): [
     *         String (Required)
     *     ]
     *     dimensions: Integer (Optional)
     *     encoding_format: String(base64/binary/float/int8/ubinary/uint8) (Optional)
     *     input_type: String(text/query/document) (Optional)
     *     model: String (Optional)
     *      (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>{@code
     * {
     *     data (Required): [
     *          (Required){
     *             embedding: BinaryData (Required)
     *             index: int (Required)
     *         }
     *     ]
     *     usage (Required): {
     *         prompt_tokens: int (Required)
     *         total_tokens: int (Required)
     *     }
     *     model: String (Required)
     * }
     * }</pre>
     *
     * @param embedRequest The embedRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return representation of the response data from an embeddings request.
     * Embeddings measure the relatedness of text strings and are commonly used for search, clustering,
     * recommendations, and other similar scenarios along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> embedWithResponse(BinaryData embedRequest, RequestOptions requestOptions) {
        return this.serviceClient.embedWithResponseAsync(embedRequest, requestOptions);
    }

    /**
     * Returns information about the AI model.
     * The method makes a REST API call to the `/info` route on the given endpoint.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>{@code
     * {
     *     model_name: String (Required)
     *     model_type: String(embeddings/image_generation/text_generation/image_embeddings/audio_generation/chat) (Required)
     *     model_provider_name: String (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents some basic information about the AI model along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> getModelInfoWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getModelInfoWithResponseAsync(requestOptions);
    }

    /**
     * Return the embedding vectors for given text prompts.
     * The method makes a REST API call to the `/embeddings` route on the given endpoint.
     *
     * @param input Input text to embed, encoded as a string or array of tokens.
     * To embed multiple inputs in a single request, pass an array
     * of strings or array of token arrays.
     * @param dimensions Optional. The number of dimensions the resulting output embeddings should have.
     * Passing null causes the model to use its default value.
     * Returns a 422 error if the model doesn't support the value or parameter.
     * @param encodingFormat Optional. The desired format for the returned embeddings.
     * @param inputType Optional. The type of the input.
     * Returns a 422 error if the model doesn't support the value or parameter.
     * @param model ID of the specific AI model to use, if more than one model is available on the endpoint.
     * @param extraParams Controls what happens if extra parameters, undefined by the REST API,
     * are passed in the JSON request payload.
     * This sets the HTTP request header `extra-parameters`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return representation of the response data from an embeddings request.
     * Embeddings measure the relatedness of text strings and are commonly used for search, clustering,
     * recommendations, and other similar scenarios on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<EmbeddingsResult>> embedWithResponse(List<String> input, Integer dimensions,
        EmbeddingEncodingFormat encodingFormat, EmbeddingInputType inputType, String model,
        ExtraParameters extraParams) {
        RequestOptions requestOptions = new RequestOptions();
        EmbedRequest embedRequestObj = new EmbedRequest(input).setDimensions(dimensions)
            .setEncodingFormat(encodingFormat)
            .setInputType(inputType)
            .setModel(model);
        BinaryData embedRequest = BinaryData.fromObject(embedRequestObj);
        if (extraParams != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("extra-parameters"), extraParams.toString());
        }
        return embedWithResponse(embedRequest, requestOptions)
            .map(protocolMethodData -> new SimpleResponse<>(protocolMethodData,
                protocolMethodData.getValue().toObject(EmbeddingsResult.class)));
    }

    /**
     * Return the embedding vectors for given text prompts.
     * The method makes a REST API call to the `/embeddings` route on the given endpoint.
     *
     * @param input Input text to embed, encoded as a string or array of tokens.
     * To embed multiple inputs in a single request, pass an array
     * of strings or array of token arrays.
     * @param dimensions Optional. The number of dimensions the resulting output embeddings should have.
     * Passing null causes the model to use its default value.
     * Returns a 422 error if the model doesn't support the value or parameter.
     * @param encodingFormat Optional. The desired format for the returned embeddings.
     * @param inputType Optional. The type of the input.
     * Returns a 422 error if the model doesn't support the value or parameter.
     * @param model ID of the specific AI model to use, if more than one model is available on the endpoint.
     * @param extraParams Controls what happens if extra parameters, undefined by the REST API,
     * are passed in the JSON request payload.
     * This sets the HTTP request header `extra-parameters`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return representation of the response data from an embeddings request.
     * Embeddings measure the relatedness of text strings and are commonly used for search, clustering,
     * recommendations, and other similar scenarios on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EmbeddingsResult> embed(List<String> input, Integer dimensions, EmbeddingEncodingFormat encodingFormat,
        EmbeddingInputType inputType, String model, ExtraParameters extraParams) {
        // Generated convenience method for embedWithResponse
        RequestOptions requestOptions = new RequestOptions();
        EmbedRequest embedRequestObj = new EmbedRequest(input).setDimensions(dimensions)
            .setEncodingFormat(encodingFormat)
            .setInputType(inputType)
            .setModel(model);
        BinaryData embedRequest = BinaryData.fromObject(embedRequestObj);
        if (extraParams != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("extra-parameters"), extraParams.toString());
        }
        return embedWithResponse(embedRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EmbeddingsResult.class));
    }

    /**
     * Return the embedding vectors for given text prompts.
     * The method makes a REST API call to the `/embeddings` route on the given endpoint.
     *
     * @param input Input text to embed, encoded as a string or array of tokens.
     * To embed multiple inputs in a single request, pass an array
     * of strings or array of token arrays.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return representation of the response data from an embeddings request.
     * Embeddings measure the relatedness of text strings and are commonly used for search, clustering,
     * recommendations, and other similar scenarios on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<EmbeddingsResult>> embedWithResponse(List<String> input) {
        RequestOptions requestOptions = new RequestOptions();
        EmbedRequest embedRequestObj = new EmbedRequest(input);
        BinaryData embedRequest = BinaryData.fromObject(embedRequestObj);
        return embedWithResponse(embedRequest, requestOptions)
            .map(protocolMethodData -> new SimpleResponse<>(protocolMethodData,
                protocolMethodData.getValue().toObject(EmbeddingsResult.class)));
    }

    /**
     * Return the embedding vectors for given text prompts.
     * The method makes a REST API call to the `/embeddings` route on the given endpoint.
     *
     * @param input Input text to embed, encoded as a string or array of tokens.
     * To embed multiple inputs in a single request, pass an array
     * of strings or array of token arrays.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return representation of the response data from an embeddings request.
     * Embeddings measure the relatedness of text strings and are commonly used for search, clustering,
     * recommendations, and other similar scenarios on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EmbeddingsResult> embed(List<String> input) {
        // Generated convenience method for embedWithResponse
        RequestOptions requestOptions = new RequestOptions();
        EmbedRequest embedRequestObj = new EmbedRequest(input);
        BinaryData embedRequest = BinaryData.fromObject(embedRequestObj);
        return embedWithResponse(embedRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EmbeddingsResult.class));
    }

    /**
     * Returns information about the AI model.
     * The method makes a REST API call to the `/info` route on the given endpoint.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents some basic information about the AI model on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ModelInfo> getModelInfo() {
        // Generated convenience method for getModelInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getModelInfoWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ModelInfo.class));
    }
}
