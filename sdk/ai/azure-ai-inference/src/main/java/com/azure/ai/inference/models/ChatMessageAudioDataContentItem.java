// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.inference.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A structured chat content item for audio content passed as base64 encoded data.
 */
@Immutable
public final class ChatMessageAudioDataContentItem extends ChatMessageContentItem {

    /*
     * The discriminated object type.
     */
    @Generated
    private String type = "input_audio";

    /*
     * The details of the input audio data.
     */
    @Generated
    private final ChatMessageInputAudio inputAudio;

    /**
     * Creates an instance of ChatMessageAudioDataContentItem class.
     *
     * @param inputAudio the inputAudio value to set.
     */
    @Generated
    public ChatMessageAudioDataContentItem(ChatMessageInputAudio inputAudio) {
        this.inputAudio = inputAudio;
    }

    /**
     * Get the type property: The discriminated object type.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the inputAudio property: The details of the input audio data.
     *
     * @return the inputAudio value.
     */
    @Generated
    public ChatMessageInputAudio getInputAudio() {
        return this.inputAudio;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("input_audio", this.inputAudio);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatMessageAudioDataContentItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatMessageAudioDataContentItem if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatMessageAudioDataContentItem.
     */
    @Generated
    public static ChatMessageAudioDataContentItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatMessageInputAudio inputAudio = null;
            String type = "input_audio";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("input_audio".equals(fieldName)) {
                    inputAudio = ChatMessageInputAudio.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ChatMessageAudioDataContentItem deserializedChatMessageAudioDataContentItem
                = new ChatMessageAudioDataContentItem(inputAudio);
            deserializedChatMessageAudioDataContentItem.type = type;
            return deserializedChatMessageAudioDataContentItem;
        });
    }
}
