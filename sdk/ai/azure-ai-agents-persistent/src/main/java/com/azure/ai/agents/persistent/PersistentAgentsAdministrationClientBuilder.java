// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.persistent;

import com.azure.ai.agents.persistent.implementation.PersistentAgentsAdministrationClientImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.client.traits.TokenCredentialTrait;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A builder for creating a new instance of the PersistentAgentsAdministrationClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        PersistentAgentsAdministrationClient.class,
        ThreadsClient.class,
        MessagesClient.class,
        RunsClient.class,
        RunStepsClient.class,
        FilesClient.class,
        VectorStoresClient.class,
        VectorStoreFilesClient.class,
        VectorStoreFileBatchesClient.class,
        PersistentAgentsAdministrationAsyncClient.class,
        ThreadsAsyncClient.class,
        MessagesAsyncClient.class,
        RunsAsyncClient.class,
        RunStepsAsyncClient.class,
        FilesAsyncClient.class,
        VectorStoresAsyncClient.class,
        VectorStoreFilesAsyncClient.class,
        VectorStoreFileBatchesAsyncClient.class })
public final class PersistentAgentsAdministrationClientBuilder
    implements HttpTrait<PersistentAgentsAdministrationClientBuilder>,
    ConfigurationTrait<PersistentAgentsAdministrationClientBuilder>,
    TokenCredentialTrait<PersistentAgentsAdministrationClientBuilder>,
    EndpointTrait<PersistentAgentsAdministrationClientBuilder> {

    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final String[] DEFAULT_SCOPES = new String[] { "https://ai.azure.com/.default" };

    @Generated
    private static final Map<String, String> PROPERTIES
        = CoreUtils.getProperties("azure-ai-agents-persistent.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the PersistentAgentsAdministrationClientBuilder.
     */
    @Generated
    public PersistentAgentsAdministrationClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The TokenCredential used for authentication.
     */
    @Generated
    private TokenCredential tokenCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder credential(TokenCredential tokenCredential) {
        this.tokenCredential = tokenCredential;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PersistentAgentsAdministrationClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Service version
     */
    @Generated
    private AgentsServiceVersion serviceVersion;

    /**
     * Sets Service version.
     *
     * @param serviceVersion the serviceVersion value.
     * @return the PersistentAgentsAdministrationClientBuilder.
     */
    @Generated
    public PersistentAgentsAdministrationClientBuilder serviceVersion(AgentsServiceVersion serviceVersion) {
        this.serviceVersion = serviceVersion;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the PersistentAgentsAdministrationClientBuilder.
     */
    @Generated
    public PersistentAgentsAdministrationClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of PersistentAgentsAdministrationClientImpl with the provided parameters.
     *
     * @return an instance of PersistentAgentsAdministrationClientImpl.
     */
    @Generated
    private PersistentAgentsAdministrationClientImpl buildInnerClient() {
        this.validateClient();
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        AgentsServiceVersion localServiceVersion
            = (serviceVersion != null) ? serviceVersion : AgentsServiceVersion.getLatest();
        PersistentAgentsAdministrationClientImpl client = new PersistentAgentsAdministrationClientImpl(localPipeline,
            JacksonAdapter.createDefaultSerializerAdapter(), this.endpoint, localServiceVersion);
        return client;
    }

    @Generated
    private void validateClient() {
        // This method is invoked from 'buildInnerClient'/'buildClient' method.
        // Developer can customize this method, to validate that the necessary conditions are met for the new client.
        Objects.requireNonNull(endpoint, "'endpoint' cannot be null.");
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = CoreUtils.createHttpHeadersFromClientOptions(localClientOptions);
        if (headers != null) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        if (tokenCredential != null) {
            policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPES));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient)
            .clientOptions(localClientOptions)
            .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of PersistentAgentsAdministrationAsyncClient class.
     *
     * @return an instance of PersistentAgentsAdministrationAsyncClient.
     */
    @Generated
    public PersistentAgentsAdministrationAsyncClient buildAsyncClient() {
        return new PersistentAgentsAdministrationAsyncClient(buildInnerClient());
    }

    /**
     * Builds an instance of ThreadsAsyncClient class.
     *
     * @return an instance of ThreadsAsyncClient.
     */
    @Generated
    public ThreadsAsyncClient buildThreadsAsyncClient() {
        return new ThreadsAsyncClient(buildInnerClient().getThreads());
    }

    /**
     * Builds an instance of MessagesAsyncClient class.
     *
     * @return an instance of MessagesAsyncClient.
     */
    @Generated
    public MessagesAsyncClient buildMessagesAsyncClient() {
        return new MessagesAsyncClient(buildInnerClient().getMessages());
    }

    /**
     * Builds an instance of RunsAsyncClient class.
     *
     * @return an instance of RunsAsyncClient.
     */
    @Generated
    public RunsAsyncClient buildRunsAsyncClient() {
        return new RunsAsyncClient(buildInnerClient().getRuns());
    }

    /**
     * Builds an instance of RunStepsAsyncClient class.
     *
     * @return an instance of RunStepsAsyncClient.
     */
    @Generated
    public RunStepsAsyncClient buildRunStepsAsyncClient() {
        return new RunStepsAsyncClient(buildInnerClient().getRunSteps());
    }

    /**
     * Builds an instance of FilesAsyncClient class.
     *
     * @return an instance of FilesAsyncClient.
     */
    @Generated
    public FilesAsyncClient buildFilesAsyncClient() {
        return new FilesAsyncClient(buildInnerClient().getFiles());
    }

    /**
     * Builds an instance of VectorStoresAsyncClient class.
     *
     * @return an instance of VectorStoresAsyncClient.
     */
    @Generated
    public VectorStoresAsyncClient buildVectorStoresAsyncClient() {
        return new VectorStoresAsyncClient(buildInnerClient().getVectorStores());
    }

    /**
     * Builds an instance of VectorStoreFilesAsyncClient class.
     *
     * @return an instance of VectorStoreFilesAsyncClient.
     */
    @Generated
    public VectorStoreFilesAsyncClient buildVectorStoreFilesAsyncClient() {
        return new VectorStoreFilesAsyncClient(buildInnerClient().getVectorStoreFiles());
    }

    /**
     * Builds an instance of VectorStoreFileBatchesAsyncClient class.
     *
     * @return an instance of VectorStoreFileBatchesAsyncClient.
     */
    @Generated
    public VectorStoreFileBatchesAsyncClient buildVectorStoreFileBatchesAsyncClient() {
        return new VectorStoreFileBatchesAsyncClient(buildInnerClient().getVectorStoreFileBatches());
    }

    /**
     * Builds an instance of PersistentAgentsAdministrationClient class.
     *
     * @return an instance of PersistentAgentsAdministrationClient.
     */
    @Generated
    public PersistentAgentsAdministrationClient buildClient() {
        return new PersistentAgentsAdministrationClient(buildInnerClient());
    }

    /**
     * Builds an instance of ThreadsClient class.
     *
     * @return an instance of ThreadsClient.
     */
    @Generated
    public ThreadsClient buildThreadsClient() {
        return new ThreadsClient(buildInnerClient().getThreads());
    }

    /**
     * Builds an instance of MessagesClient class.
     *
     * @return an instance of MessagesClient.
     */
    @Generated
    public MessagesClient buildMessagesClient() {
        return new MessagesClient(buildInnerClient().getMessages());
    }

    /**
     * Builds an instance of RunsClient class.
     *
     * @return an instance of RunsClient.
     */
    @Generated
    public RunsClient buildRunsClient() {
        return new RunsClient(buildInnerClient().getRuns());
    }

    /**
     * Builds an instance of RunStepsClient class.
     *
     * @return an instance of RunStepsClient.
     */
    @Generated
    public RunStepsClient buildRunStepsClient() {
        return new RunStepsClient(buildInnerClient().getRunSteps());
    }

    /**
     * Builds an instance of FilesClient class.
     *
     * @return an instance of FilesClient.
     */
    @Generated
    public FilesClient buildFilesClient() {
        return new FilesClient(buildInnerClient().getFiles());
    }

    /**
     * Builds an instance of VectorStoresClient class.
     *
     * @return an instance of VectorStoresClient.
     */
    @Generated
    public VectorStoresClient buildVectorStoresClient() {
        return new VectorStoresClient(buildInnerClient().getVectorStores());
    }

    /**
     * Builds an instance of VectorStoreFilesClient class.
     *
     * @return an instance of VectorStoreFilesClient.
     */
    @Generated
    public VectorStoreFilesClient buildVectorStoreFilesClient() {
        return new VectorStoreFilesClient(buildInnerClient().getVectorStoreFiles());
    }

    /**
     * Builds an instance of VectorStoreFileBatchesClient class.
     *
     * @return an instance of VectorStoreFileBatchesClient.
     */
    @Generated
    public VectorStoreFileBatchesClient buildVectorStoreFileBatchesClient() {
        return new VectorStoreFileBatchesClient(buildInnerClient().getVectorStoreFileBatches());
    }

    private static final ClientLogger LOGGER = new ClientLogger(PersistentAgentsAdministrationClientBuilder.class);
}
