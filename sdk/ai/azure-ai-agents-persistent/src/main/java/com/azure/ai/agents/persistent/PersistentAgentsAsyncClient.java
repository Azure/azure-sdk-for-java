// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.agents.persistent;

import com.azure.ai.agents.persistent.implementation.MessagesClientTracer;
import com.azure.ai.agents.persistent.implementation.PersistentAgentsAdministrationClientTracer;
import com.azure.ai.agents.persistent.implementation.PersistentAgentsClientImpl;
import com.azure.ai.agents.persistent.implementation.RunsClientTracer;
import com.azure.ai.agents.persistent.implementation.ThreadsClientTracer;
import com.azure.ai.agents.persistent.implementation.models.CreateThreadAndRunRequest;
import com.azure.ai.agents.persistent.models.CreateThreadAndRunOptions;
import com.azure.ai.agents.persistent.models.ThreadRun;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.metrics.Meter;
import com.azure.core.util.tracing.Tracer;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous PersistentAgentsClient type.
 */
@ServiceClient(builder = PersistentAgentsClientBuilder.class, isAsync = true)
public final class PersistentAgentsAsyncClient {

    @Generated
    private final PersistentAgentsClientImpl serviceClient;

    private final Configuration configuration;

    private final Tracer tracer;

    private final Meter meter;

    /**
     * Initializes an instance of PersistentAgentsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     * @param configuration the configuration for the client.
     * @param tracer the tracer for the client.
     */
    PersistentAgentsAsyncClient(PersistentAgentsClientImpl serviceClient, Configuration configuration, Tracer tracer,
        Meter meter) {
        this.serviceClient = serviceClient;
        this.configuration = configuration;
        this.tracer = tracer;
        this.meter = meter;
    }

    /**
     * Gets an instance of PersistentAgentsAdministrationAsyncClient class.
     *
     * @return an instance of PersistentAgentsAdministrationAsyncClient class.
     */
    public PersistentAgentsAdministrationAsyncClient getPersistentAgentsAdministrationAsyncClient() {
        PersistentAgentsAdministrationClientTracer clientTracer
            = new PersistentAgentsAdministrationClientTracer(serviceClient.getEndpoint(), configuration, tracer, meter);
        return new PersistentAgentsAdministrationAsyncClient(serviceClient.getPersistentAgentsAdministration(),
            clientTracer);
    }

    /**
     * Gets an instance of FilesAsyncClient class.
     *
     * @return an instance of FilesAsyncClient class.
     */
    public FilesAsyncClient getFilesAsyncClient() {
        return new FilesAsyncClient(serviceClient.getFiles());
    }

    /**
     * Gets an instance of MessagesAsyncClient class.
     *
     * @return an instance of MessagesAsyncClient class.
     */
    public MessagesAsyncClient getMessagesAsyncClient() {
        MessagesClientTracer clientTracer
            = new MessagesClientTracer(serviceClient.getEndpoint(), configuration, tracer, meter);
        return new MessagesAsyncClient(serviceClient.getMessages(), clientTracer);
    }

    /**
     * Gets an instance of RunsAsyncClient class.
     *
     * @return an instance of RunsAsyncClient class.
     */
    public RunsAsyncClient getRunsAsyncClient() {
        RunsClientTracer clientTracer = new RunsClientTracer(serviceClient.getEndpoint(), configuration, tracer, meter);
        return new RunsAsyncClient(serviceClient.getRuns(), clientTracer);
    }

    /**
     * Gets an instance of ThreadsAsyncClient class.
     *
     * @return an instance of ThreadsAsyncClient class.
     */
    public ThreadsAsyncClient getThreadsAsyncClient() {
        ThreadsClientTracer clientTracer
            = new ThreadsClientTracer(serviceClient.getEndpoint(), configuration, tracer, meter);
        return new ThreadsAsyncClient(serviceClient.getThreads(), clientTracer);
    }

    /**
     * Gets an instance of VectorStoresAsyncClient class.
     *
     * @return an instance of VectorStoresAsyncClient class.
     */
    public VectorStoresAsyncClient getVectorStoresAsyncClient() {
        return new VectorStoresAsyncClient(serviceClient.getVectorStores());
    }

    /**
     * Creates a new agent thread and immediately starts a run using that new thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assistant_id: String (Required)
     *     thread (Optional): {
     *         messages (Optional): [
     *              (Optional){
     *                 role: String(user/assistant) (Required)
     *                 content: BinaryData (Required)
     *                 attachments (Optional): [
     *                      (Optional){
     *                         file_id: String (Optional)
     *                         data_source (Optional): {
     *                             uri: String (Required)
     *                             type: String(uri_asset/id_asset) (Required)
     *                         }
     *                         tools (Required): [
     *                             BinaryData (Required)
     *                         ]
     *                     }
     *                 ]
     *                 metadata (Optional): {
     *                     String: String (Required)
     *                 }
     *             }
     *         ]
     *         tool_resources (Optional): {
     *             code_interpreter (Optional): {
     *                 file_ids (Optional): [
     *                     String (Optional)
     *                 ]
     *                 data_sources (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             file_search (Optional): {
     *                 vector_store_ids (Optional): [
     *                     String (Optional)
     *                 ]
     *                 vector_stores (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         configuration (Required): {
     *                             data_sources (Required): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             azure_ai_search (Optional): {
     *                 indexes (Optional): [
     *                      (Optional){
     *                         index_connection_id: String (Optional)
     *                         index_name: String (Optional)
     *                         query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)
     *                         top_k: Integer (Optional)
     *                         filter: String (Optional)
     *                         index_asset_id: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *         metadata (Optional): {
     *             String: String (Required)
     *         }
     *     }
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     tool_resources (Optional): (recursive schema, see tool_resources above)
     *     stream: Boolean (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Optional)
     *     max_completion_tokens: Integer (Optional)
     *     truncation_strategy (Optional): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Optional)
     *     response_format: BinaryData (Optional)
     *     parallel_tool_calls: Boolean (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *         type: String (Required)
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *             type: String (Required)
     *         }
     *     ]
     *     created_at: long (Required)
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     completed_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     incomplete_details (Required): {
     *         reason: String(max_completion_tokens/max_prompt_tokens) (Required)
     *     }
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     max_prompt_tokens: Integer (Required)
     *     max_completion_tokens: Integer (Required)
     *     truncation_strategy (Required): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Required)
     *     response_format: BinaryData (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *             data_sources (Optional): [
     *                  (Optional){
     *                     uri: String (Required)
     *                     type: String(uri_asset/id_asset) (Required)
     *                 }
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *             vector_stores (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     configuration (Required): {
     *                         data_sources (Required): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                 }
     *             ]
     *         }
     *         azure_ai_search (Optional): {
     *             indexes (Optional): [
     *                  (Optional){
     *                     index_connection_id: String (Optional)
     *                     index_name: String (Optional)
     *                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)
     *                     top_k: Integer (Optional)
     *                     filter: String (Optional)
     *                     index_asset_id: String (Optional)
     *                 }
     *             ]
     *         }
     *     }
     *     parallel_tool_calls: boolean (Required)
     * }
     * }
     * </pre>
     *
     * @param createThreadAndRunRequest The createThreadAndRunRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an agent thread along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createThreadAndRunWithResponse(BinaryData createThreadAndRunRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createThreadAndRunWithResponseAsync(createThreadAndRunRequest, requestOptions);
    }

    /**
     * Creates a new agent thread and immediately starts a run using that new thread.
     *
     * @param options Options for createThreadAndRun API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an agent thread on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThreadRun> createThreadAndRun(CreateThreadAndRunOptions options) {
        // Generated convenience method for createThreadAndRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateThreadAndRunRequest createThreadAndRunRequestObj
            = new CreateThreadAndRunRequest(options.getAssistantId()).setThread(options.getThread())
                .setModel(options.getModel())
                .setInstructions(options.getInstructions())
                .setTools(options.getTools())
                .setToolResources(options.getToolResources())
                .setStream(options.isStream())
                .setTemperature(options.getTemperature())
                .setTopP(options.getTopP())
                .setMaxPromptTokens(options.getMaxPromptTokens())
                .setMaxCompletionTokens(options.getMaxCompletionTokens())
                .setTruncationStrategy(options.getTruncationStrategy())
                .setToolChoice(options.getToolChoice())
                .setResponseFormat(options.getResponseFormat())
                .setParallelToolCalls(options.isParallelToolCalls())
                .setMetadata(options.getMetadata());
        BinaryData createThreadAndRunRequest = BinaryData.fromObject(createThreadAndRunRequestObj);
        return createThreadAndRunWithResponse(createThreadAndRunRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ThreadRun.class));
    }
}
