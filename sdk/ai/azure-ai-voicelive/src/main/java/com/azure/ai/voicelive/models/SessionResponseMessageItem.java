// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Base type for message item within a conversation.
 */
@Immutable
public final class SessionResponseMessageItem extends SessionResponseItem {
    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.MESSAGE;

    /*
     * The role property.
     */
    @Generated
    private final ResponseMessageRole role;

    /*
     * The content property.
     */
    @Generated
    private final List<VoiceLiveContentPart> content;

    /*
     * The status property.
     */
    @Generated
    private final SessionResponseItemStatus status;

    /**
     * Creates an instance of SessionResponseMessageItem class.
     * 
     * @param role the role value to set.
     * @param content the content value to set.
     * @param status the status value to set.
     */
    @Generated
    private SessionResponseMessageItem(ResponseMessageRole role, List<VoiceLiveContentPart> content,
        SessionResponseItemStatus status) {
        this.role = role;
        this.content = content;
        this.status = status;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the role property: The role property.
     * 
     * @return the role value.
     */
    @Generated
    public ResponseMessageRole getRole() {
        return this.role;
    }

    /**
     * Get the content property: The content property.
     * 
     * @return the content value.
     */
    @Generated
    public List<VoiceLiveContentPart> getContent() {
        return this.content;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    @Generated
    public SessionResponseItemStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("object", getObject() == null ? null : getObject().toString());
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeArrayField("content", this.content, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionResponseMessageItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionResponseMessageItem if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SessionResponseMessageItem.
     */
    @Generated
    public static SessionResponseMessageItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            ResponseItemObject object = null;
            ResponseMessageRole role = null;
            List<VoiceLiveContentPart> content = null;
            SessionResponseItemStatus status = null;
            ItemType type = ItemType.MESSAGE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("object".equals(fieldName)) {
                    object = ResponseItemObject.fromString(reader.getString());
                } else if ("role".equals(fieldName)) {
                    role = ResponseMessageRole.fromString(reader.getString());
                } else if ("content".equals(fieldName)) {
                    content = reader.readArray(reader1 -> VoiceLiveContentPart.fromJson(reader1));
                } else if ("status".equals(fieldName)) {
                    status = SessionResponseItemStatus.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            SessionResponseMessageItem deserializedSessionResponseMessageItem
                = new SessionResponseMessageItem(role, content, status);
            deserializedSessionResponseMessageItem.setId(id);
            deserializedSessionResponseMessageItem.setObject(object);
            deserializedSessionResponseMessageItem.type = type;

            return deserializedSessionResponseMessageItem;
        });
    }
}
