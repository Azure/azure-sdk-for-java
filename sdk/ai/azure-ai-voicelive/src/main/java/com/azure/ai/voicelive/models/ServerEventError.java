// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when an error occurs, which could be a client problem or a server
 * problem. Most errors are recoverable and the session will stay open, we
 * recommend to implementors to monitor and log error messages by default.
 */
@Immutable
public final class ServerEventError extends ServerEvent {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.ERROR;

    /*
     * Details of the error.
     */
    @Generated
    private final ServerEventErrorDetails error;

    /**
     * Creates an instance of ServerEventError class.
     * 
     * @param error the error value to set.
     */
    @Generated
    private ServerEventError(ServerEventErrorDetails error) {
        this.error = error;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the error property: Details of the error.
     * 
     * @return the error value.
     */
    @Generated
    public ServerEventErrorDetails getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEventError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEventError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerEventError.
     */
    @Generated
    public static ServerEventError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            ServerEventErrorDetails error = null;
            ServerEventType type = ServerEventType.ERROR;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("error".equals(fieldName)) {
                    error = ServerEventErrorDetails.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ServerEventError deserializedServerEventError = new ServerEventError(error);
            deserializedServerEventError.setEventId(eventId);
            deserializedServerEventError.type = type;

            return deserializedServerEventError;
        });
    }
}
