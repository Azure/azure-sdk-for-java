// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Configuration for input audio transcription.
 */
@Fluent
public final class AudioInputTranscriptionOptions implements JsonSerializable<AudioInputTranscriptionOptions> {
    /*
     * The transcription model to use. Supported values:
     * 'whisper-1', 'gpt-4o-transcribe', 'gpt-4o-mini-transcribe',
     * 'azure-speech'.
     */
    @Generated
    private final AudioInputTranscriptionOptionsModel model;

    /*
     * Optional language code in BCP-47 (e.g., 'en-US'), or ISO-639-1 (e.g., 'en'), or multi languages with auto
     * detection, (e.g., 'en,zh').
     */
    @Generated
    private String language;

    /*
     * Optional configuration for custom speech models.
     */
    @Generated
    private Map<String, String> customSpeech;

    /*
     * Optional list of phrase hints to bias recognition.
     */
    @Generated
    private List<String> phraseList;

    /**
     * Creates an instance of AudioInputTranscriptionOptions class.
     * 
     * @param model the model value to set.
     */
    @Generated
    public AudioInputTranscriptionOptions(AudioInputTranscriptionOptionsModel model) {
        this.model = model;
    }

    /**
     * Get the model property: The transcription model to use. Supported values:
     * 'whisper-1', 'gpt-4o-transcribe', 'gpt-4o-mini-transcribe',
     * 'azure-speech'.
     * 
     * @return the model value.
     */
    @Generated
    public AudioInputTranscriptionOptionsModel getModel() {
        return this.model;
    }

    /**
     * Get the language property: Optional language code in BCP-47 (e.g., 'en-US'), or ISO-639-1 (e.g., 'en'), or multi
     * languages with auto detection, (e.g., 'en,zh').
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: Optional language code in BCP-47 (e.g., 'en-US'), or ISO-639-1 (e.g., 'en'), or multi
     * languages with auto detection, (e.g., 'en,zh').
     * 
     * @param language the language value to set.
     * @return the AudioInputTranscriptionOptions object itself.
     */
    @Generated
    public AudioInputTranscriptionOptions setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Get the customSpeech property: Optional configuration for custom speech models.
     * 
     * @return the customSpeech value.
     */
    @Generated
    public Map<String, String> getCustomSpeech() {
        return this.customSpeech;
    }

    /**
     * Set the customSpeech property: Optional configuration for custom speech models.
     * 
     * @param customSpeech the customSpeech value to set.
     * @return the AudioInputTranscriptionOptions object itself.
     */
    @Generated
    public AudioInputTranscriptionOptions setCustomSpeech(Map<String, String> customSpeech) {
        this.customSpeech = customSpeech;
        return this;
    }

    /**
     * Get the phraseList property: Optional list of phrase hints to bias recognition.
     * 
     * @return the phraseList value.
     */
    @Generated
    public List<String> getPhraseList() {
        return this.phraseList;
    }

    /**
     * Set the phraseList property: Optional list of phrase hints to bias recognition.
     * 
     * @param phraseList the phraseList value to set.
     * @return the AudioInputTranscriptionOptions object itself.
     */
    @Generated
    public AudioInputTranscriptionOptions setPhraseList(List<String> phraseList) {
        this.phraseList = phraseList;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model", this.model == null ? null : this.model.toString());
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeMapField("custom_speech", this.customSpeech, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("phrase_list", this.phraseList, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AudioInputTranscriptionOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AudioInputTranscriptionOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AudioInputTranscriptionOptions.
     */
    @Generated
    public static AudioInputTranscriptionOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AudioInputTranscriptionOptionsModel model = null;
            String language = null;
            Map<String, String> customSpeech = null;
            List<String> phraseList = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    model = AudioInputTranscriptionOptionsModel.fromString(reader.getString());
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("custom_speech".equals(fieldName)) {
                    customSpeech = reader.readMap(reader1 -> reader1.getString());
                } else if ("phrase_list".equals(fieldName)) {
                    phraseList = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AudioInputTranscriptionOptions deserializedAudioInputTranscriptionOptions
                = new AudioInputTranscriptionOptions(model);
            deserializedAudioInputTranscriptionOptions.language = language;
            deserializedAudioInputTranscriptionOptions.customSpeech = customSpeech;
            deserializedAudioInputTranscriptionOptions.phraseList = phraseList;

            return deserializedAudioInputTranscriptionOptions;
        });
    }
}
