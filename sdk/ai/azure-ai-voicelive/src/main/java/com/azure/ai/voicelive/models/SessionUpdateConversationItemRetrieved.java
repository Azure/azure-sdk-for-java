// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when a conversation item is retrieved with `conversation.item.retrieve`.
 */
@Immutable
public final class SessionUpdateConversationItemRetrieved extends SessionUpdate {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.CONVERSATION_ITEM_RETRIEVED;

    /*
     * The item property.
     */
    @Generated
    private SessionResponseItem item;

    /*
     * The event_id property.
     */
    @Generated
    private String eventId;

    /**
     * Creates an instance of SessionUpdateConversationItemRetrieved class.
     */
    @Generated
    private SessionUpdateConversationItemRetrieved() {
    }

    /**
     * Get the type property: The type of event.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the item property: The item property.
     *
     * @return the item value.
     */
    @Generated
    public SessionResponseItem getItem() {
        return this.item;
    }

    /**
     * Get the eventId property: The event_id property.
     *
     * @return the eventId value.
     */
    @Generated
    @Override
    public String getEventId() {
        return this.eventId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("item", this.item);
        jsonWriter.writeStringField("event_id", this.eventId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionUpdateConversationItemRetrieved from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionUpdateConversationItemRetrieved if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionUpdateConversationItemRetrieved.
     */
    @Generated
    public static SessionUpdateConversationItemRetrieved fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionUpdateConversationItemRetrieved deserializedSessionUpdateConversationItemRetrieved
                = new SessionUpdateConversationItemRetrieved();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSessionUpdateConversationItemRetrieved.type
                        = ServerEventType.fromString(reader.getString());
                } else if ("item".equals(fieldName)) {
                    deserializedSessionUpdateConversationItemRetrieved.item = SessionResponseItem.fromJson(reader);
                } else if ("event_id".equals(fieldName)) {
                    deserializedSessionUpdateConversationItemRetrieved.eventId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionUpdateConversationItemRetrieved;
        });
    }
}
