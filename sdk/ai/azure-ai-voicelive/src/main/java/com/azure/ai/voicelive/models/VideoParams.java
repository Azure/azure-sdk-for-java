// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Video streaming parameters for avatar.
 */
@Fluent
public final class VideoParams implements JsonSerializable<VideoParams> {
    /*
     * Bitrate in bits per second (e.g., 2000000 for 2 Mbps).
     */
    @Generated
    private Integer bitrate;

    /*
     * Codec to use for encoding. Currently only 'h264' is supported.
     */
    @Generated
    private VideoParamsCodec codec;

    /*
     * Optional cropping settings for the video stream.
     */
    @Generated
    private VideoCrop crop;

    /*
     * Optional resolution settings for the video stream.
     */
    @Generated
    private VideoResolution resolution;

    /*
     * Optional background settings for the video. Allows specifying either a solid color or an image URL.
     */
    @Generated
    private VideoBackground background;

    /*
     * Group of Pictures (GOP) size for video encoding. Controls the interval between keyframes, affecting compression
     * efficiency and seeking performance.
     */
    @Generated
    private Integer gopSize;

    /**
     * Creates an instance of VideoParams class.
     */
    @Generated
    public VideoParams() {
    }

    /**
     * Get the bitrate property: Bitrate in bits per second (e.g., 2000000 for 2 Mbps).
     * 
     * @return the bitrate value.
     */
    @Generated
    public Integer getBitrate() {
        return this.bitrate;
    }

    /**
     * Set the bitrate property: Bitrate in bits per second (e.g., 2000000 for 2 Mbps).
     * 
     * @param bitrate the bitrate value to set.
     * @return the VideoParams object itself.
     */
    @Generated
    public VideoParams setBitrate(Integer bitrate) {
        this.bitrate = bitrate;
        return this;
    }

    /**
     * Get the codec property: Codec to use for encoding. Currently only 'h264' is supported.
     * 
     * @return the codec value.
     */
    @Generated
    public VideoParamsCodec getCodec() {
        return this.codec;
    }

    /**
     * Set the codec property: Codec to use for encoding. Currently only 'h264' is supported.
     * 
     * @param codec the codec value to set.
     * @return the VideoParams object itself.
     */
    @Generated
    public VideoParams setCodec(VideoParamsCodec codec) {
        this.codec = codec;
        return this;
    }

    /**
     * Get the crop property: Optional cropping settings for the video stream.
     * 
     * @return the crop value.
     */
    @Generated
    public VideoCrop getCrop() {
        return this.crop;
    }

    /**
     * Set the crop property: Optional cropping settings for the video stream.
     * 
     * @param crop the crop value to set.
     * @return the VideoParams object itself.
     */
    @Generated
    public VideoParams setCrop(VideoCrop crop) {
        this.crop = crop;
        return this;
    }

    /**
     * Get the resolution property: Optional resolution settings for the video stream.
     * 
     * @return the resolution value.
     */
    @Generated
    public VideoResolution getResolution() {
        return this.resolution;
    }

    /**
     * Set the resolution property: Optional resolution settings for the video stream.
     * 
     * @param resolution the resolution value to set.
     * @return the VideoParams object itself.
     */
    @Generated
    public VideoParams setResolution(VideoResolution resolution) {
        this.resolution = resolution;
        return this;
    }

    /**
     * Get the background property: Optional background settings for the video. Allows specifying either a solid color
     * or an image URL.
     * 
     * @return the background value.
     */
    @Generated
    public VideoBackground getBackground() {
        return this.background;
    }

    /**
     * Set the background property: Optional background settings for the video. Allows specifying either a solid color
     * or an image URL.
     * 
     * @param background the background value to set.
     * @return the VideoParams object itself.
     */
    @Generated
    public VideoParams setBackground(VideoBackground background) {
        this.background = background;
        return this;
    }

    /**
     * Get the gopSize property: Group of Pictures (GOP) size for video encoding. Controls the interval between
     * keyframes, affecting compression efficiency and seeking performance.
     * 
     * @return the gopSize value.
     */
    @Generated
    public Integer getGopSize() {
        return this.gopSize;
    }

    /**
     * Set the gopSize property: Group of Pictures (GOP) size for video encoding. Controls the interval between
     * keyframes, affecting compression efficiency and seeking performance.
     * 
     * @param gopSize the gopSize value to set.
     * @return the VideoParams object itself.
     */
    @Generated
    public VideoParams setGopSize(Integer gopSize) {
        this.gopSize = gopSize;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("bitrate", this.bitrate);
        jsonWriter.writeStringField("codec", this.codec == null ? null : this.codec.toString());
        jsonWriter.writeJsonField("crop", this.crop);
        jsonWriter.writeJsonField("resolution", this.resolution);
        jsonWriter.writeJsonField("background", this.background);
        jsonWriter.writeNumberField("gop_size", this.gopSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VideoParams from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VideoParams if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VideoParams.
     */
    @Generated
    public static VideoParams fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VideoParams deserializedVideoParams = new VideoParams();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bitrate".equals(fieldName)) {
                    deserializedVideoParams.bitrate = reader.getNullable(JsonReader::getInt);
                } else if ("codec".equals(fieldName)) {
                    deserializedVideoParams.codec = VideoParamsCodec.fromString(reader.getString());
                } else if ("crop".equals(fieldName)) {
                    deserializedVideoParams.crop = VideoCrop.fromJson(reader);
                } else if ("resolution".equals(fieldName)) {
                    deserializedVideoParams.resolution = VideoResolution.fromJson(reader);
                } else if ("background".equals(fieldName)) {
                    deserializedVideoParams.background = VideoBackground.fromJson(reader);
                } else if ("gop_size".equals(fieldName)) {
                    deserializedVideoParams.gopSize = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVideoParams;
        });
    }
}
