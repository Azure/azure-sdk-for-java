// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a video background, either a solid color or an image URL (mutually exclusive).
 */
@Fluent
public final class Background implements JsonSerializable<Background> {
    /*
     * Background color in hex format (e.g., `#00FF00FF`). Cannot be set if `image_url` is provided.
     */
    @Generated
    private String color;

    /*
     * Background image URL. Cannot be set if `color` is provided.
     */
    @Generated
    private String imageUrl;

    /**
     * Creates an instance of Background class.
     */
    @Generated
    public Background() {
    }

    /**
     * Get the color property: Background color in hex format (e.g., `#00FF00FF`). Cannot be set if `image_url` is
     * provided.
     * 
     * @return the color value.
     */
    @Generated
    public String getColor() {
        return this.color;
    }

    /**
     * Set the color property: Background color in hex format (e.g., `#00FF00FF`). Cannot be set if `image_url` is
     * provided.
     * 
     * @param color the color value to set.
     * @return the Background object itself.
     */
    @Generated
    public Background setColor(String color) {
        this.color = color;
        return this;
    }

    /**
     * Get the imageUrl property: Background image URL. Cannot be set if `color` is provided.
     * 
     * @return the imageUrl value.
     */
    @Generated
    public String getImageUrl() {
        return this.imageUrl;
    }

    /**
     * Set the imageUrl property: Background image URL. Cannot be set if `color` is provided.
     * 
     * @param imageUrl the imageUrl value to set.
     * @return the Background object itself.
     */
    @Generated
    public Background setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("color", this.color);
        jsonWriter.writeStringField("image_url", this.imageUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Background from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Background if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Background.
     */
    @Generated
    public static Background fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Background deserializedBackground = new Background();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("color".equals(fieldName)) {
                    deserializedBackground.color = reader.getString();
                } else if ("image_url".equals(fieldName)) {
                    deserializedBackground.imageUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackground;
        });
    }
}
