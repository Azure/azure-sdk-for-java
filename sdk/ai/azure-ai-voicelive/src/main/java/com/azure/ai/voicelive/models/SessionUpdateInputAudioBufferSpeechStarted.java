// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Sent by the server when in `server_vad` mode to indicate that speech has been
 * detected in the audio buffer. This can happen any time audio is added to the
 * buffer (unless speech is already detected). The client may want to use this
 * event to interrupt audio playback or provide visual feedback to the user.
 * The client should expect to receive a `input_audio_buffer.speech_stopped` event
 * when speech stops. The `item_id` property is the ID of the user message item
 * that will be created when speech stops and will also be included in the
 * `input_audio_buffer.speech_stopped` event (unless the client manually commits
 * the audio buffer during VAD activation).
 */
@Immutable
public final class SessionUpdateInputAudioBufferSpeechStarted extends SessionUpdate {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.INPUT_AUDIO_BUFFER_SPEECH_STARTED;

    /*
     * Milliseconds from the start of all audio written to the buffer during the
     * session when speech was first detected. This will correspond to the
     * beginning of audio sent to the model, and thus includes the
     * `prefix_padding_ms` configured in the Session.
     */
    @Generated
    private final int audioStartMs;

    /*
     * The ID of the user message item that will be created when speech stops.
     */
    @Generated
    private final String itemId;

    /**
     * Creates an instance of SessionUpdateInputAudioBufferSpeechStarted class.
     * 
     * @param audioStartMs the audioStartMs value to set.
     * @param itemId the itemId value to set.
     */
    @Generated
    private SessionUpdateInputAudioBufferSpeechStarted(int audioStartMs, String itemId) {
        this.audioStartMs = audioStartMs;
        this.itemId = itemId;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the audioStartMs property: Milliseconds from the start of all audio written to the buffer during the
     * session when speech was first detected. This will correspond to the
     * beginning of audio sent to the model, and thus includes the
     * `prefix_padding_ms` configured in the Session.
     * 
     * @return the audioStartMs value.
     */
    @Generated
    public int getAudioStartMs() {
        return this.audioStartMs;
    }

    /**
     * Get the itemId property: The ID of the user message item that will be created when speech stops.
     * 
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeIntField("audio_start_ms", this.audioStartMs);
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionUpdateInputAudioBufferSpeechStarted from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionUpdateInputAudioBufferSpeechStarted if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SessionUpdateInputAudioBufferSpeechStarted.
     */
    @Generated
    public static SessionUpdateInputAudioBufferSpeechStarted fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            int audioStartMs = 0;
            String itemId = null;
            ServerEventType type = ServerEventType.INPUT_AUDIO_BUFFER_SPEECH_STARTED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("audio_start_ms".equals(fieldName)) {
                    audioStartMs = reader.getInt();
                } else if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            SessionUpdateInputAudioBufferSpeechStarted deserializedSessionUpdateInputAudioBufferSpeechStarted
                = new SessionUpdateInputAudioBufferSpeechStarted(audioStartMs, itemId);
            deserializedSessionUpdateInputAudioBufferSpeechStarted.setEventId(eventId);
            deserializedSessionUpdateInputAudioBufferSpeechStarted.type = type;

            return deserializedSessionUpdateInputAudioBufferSpeechStarted;
        });
    }
}
