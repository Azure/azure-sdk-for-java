// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base for any response item; discriminated by `type`.
 */
@Immutable
public class ResponseItem implements JsonSerializable<ResponseItem> {
    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.fromString("ResponseItem");

    /*
     * The id property.
     */
    @Generated
    private String id;

    /*
     * The object property.
     */
    @Generated
    private ResponseItemObject object;

    /**
     * Creates an instance of ResponseItem class.
     */
    @Generated
    protected ResponseItem() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: The id property.
     * 
     * @param id the id value to set.
     * @return the ResponseItem object itself.
     */
    @Generated
    ResponseItem setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the object property: The object property.
     * 
     * @return the object value.
     */
    @Generated
    public ResponseItemObject getObject() {
        return this.object;
    }

    /**
     * Set the object property: The object property.
     * 
     * @param object the object value to set.
     * @return the ResponseItem object itself.
     */
    @Generated
    ResponseItem setObject(ResponseItemObject object) {
        this.object = object;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object == null ? null : this.object.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResponseItem.
     */
    @Generated
    public static ResponseItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("message".equals(discriminatorValue)) {
                    return ResponseMessageItem.fromJson(readerToUse.reset());
                } else if ("function_call".equals(discriminatorValue)) {
                    return ResponseFunctionCallItem.fromJson(readerToUse.reset());
                } else if ("function_call_output".equals(discriminatorValue)) {
                    return ResponseFunctionCallOutputItem.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ResponseItem fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResponseItem deserializedResponseItem = new ResponseItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedResponseItem.type = ItemType.fromString(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedResponseItem.id = reader.getString();
                } else if ("object".equals(fieldName)) {
                    deserializedResponseItem.object = ResponseItemObject.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResponseItem;
        });
    }
}
