// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A voicelive server event.
 */
@Immutable
public class ServerEvent implements JsonSerializable<ServerEvent> {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.fromString("ServerEvent");

    /*
     * The event_id property.
     */
    @Generated
    private String eventId;

    /**
     * Creates an instance of ServerEvent class.
     */
    @Generated
    protected ServerEvent() {
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the eventId property: The event_id property.
     * 
     * @return the eventId value.
     */
    @Generated
    public String getEventId() {
        return this.eventId;
    }

    /**
     * Set the eventId property: The event_id property.
     * 
     * @param eventId the eventId value to set.
     * @return the ServerEvent object itself.
     */
    @Generated
    ServerEvent setEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("event_id", this.eventId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEvent.
     */
    @Generated
    public static ServerEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("error".equals(discriminatorValue)) {
                    return ServerEventError.fromJson(readerToUse.reset());
                } else if ("session.created".equals(discriminatorValue)) {
                    return ServerEventSessionCreated.fromJson(readerToUse.reset());
                } else if ("session.updated".equals(discriminatorValue)) {
                    return ServerEventSessionUpdated.fromJson(readerToUse.reset());
                } else if ("session.avatar.connecting".equals(discriminatorValue)) {
                    return ServerEventSessionAvatarConnecting.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.committed".equals(discriminatorValue)) {
                    return ServerEventInputAudioBufferCommitted.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.cleared".equals(discriminatorValue)) {
                    return ServerEventInputAudioBufferCleared.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.speech_started".equals(discriminatorValue)) {
                    return ServerEventInputAudioBufferSpeechStarted.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.speech_stopped".equals(discriminatorValue)) {
                    return ServerEventInputAudioBufferSpeechStopped.fromJson(readerToUse.reset());
                } else if ("conversation.item.created".equals(discriminatorValue)) {
                    return ServerEventConversationItemCreated.fromJson(readerToUse.reset());
                } else if ("conversation.item.input_audio_transcription.completed".equals(discriminatorValue)) {
                    return ServerEventConversationItemInputAudioTranscriptionCompleted.fromJson(readerToUse.reset());
                } else if ("conversation.item.input_audio_transcription.failed".equals(discriminatorValue)) {
                    return ServerEventConversationItemInputAudioTranscriptionFailed.fromJson(readerToUse.reset());
                } else if ("conversation.item.truncated".equals(discriminatorValue)) {
                    return ServerEventConversationItemTruncated.fromJson(readerToUse.reset());
                } else if ("conversation.item.deleted".equals(discriminatorValue)) {
                    return ServerEventConversationItemDeleted.fromJson(readerToUse.reset());
                } else if ("response.created".equals(discriminatorValue)) {
                    return ServerEventResponseCreated.fromJson(readerToUse.reset());
                } else if ("response.done".equals(discriminatorValue)) {
                    return ServerEventResponseDone.fromJson(readerToUse.reset());
                } else if ("response.output_item.added".equals(discriminatorValue)) {
                    return ServerEventResponseOutputItemAdded.fromJson(readerToUse.reset());
                } else if ("response.output_item.done".equals(discriminatorValue)) {
                    return ServerEventResponseOutputItemDone.fromJson(readerToUse.reset());
                } else if ("response.content_part.added".equals(discriminatorValue)) {
                    return ServerEventResponseContentPartAdded.fromJson(readerToUse.reset());
                } else if ("response.content_part.done".equals(discriminatorValue)) {
                    return ServerEventResponseContentPartDone.fromJson(readerToUse.reset());
                } else if ("response.text.delta".equals(discriminatorValue)) {
                    return ServerEventResponseTextDelta.fromJson(readerToUse.reset());
                } else if ("response.text.done".equals(discriminatorValue)) {
                    return ServerEventResponseTextDone.fromJson(readerToUse.reset());
                } else if ("response.audio_transcript.delta".equals(discriminatorValue)) {
                    return ServerEventResponseAudioTranscriptDelta.fromJson(readerToUse.reset());
                } else if ("response.audio_transcript.done".equals(discriminatorValue)) {
                    return ServerEventResponseAudioTranscriptDone.fromJson(readerToUse.reset());
                } else if ("response.audio.delta".equals(discriminatorValue)) {
                    return ServerEventResponseAudioDelta.fromJson(readerToUse.reset());
                } else if ("response.audio.done".equals(discriminatorValue)) {
                    return ServerEventResponseAudioDone.fromJson(readerToUse.reset());
                } else if ("response.animation_blendshapes.delta".equals(discriminatorValue)) {
                    return ServerEventResponseAnimationBlendshapeDelta.fromJson(readerToUse.reset());
                } else if ("response.animation_blendshapes.done".equals(discriminatorValue)) {
                    return ServerEventResponseAnimationBlendshapeDone.fromJson(readerToUse.reset());
                } else if ("response.audio_timestamp.delta".equals(discriminatorValue)) {
                    return ServerEventResponseAudioTimestampDelta.fromJson(readerToUse.reset());
                } else if ("response.audio_timestamp.done".equals(discriminatorValue)) {
                    return ServerEventResponseAudioTimestampDone.fromJson(readerToUse.reset());
                } else if ("response.animation_viseme.delta".equals(discriminatorValue)) {
                    return ServerEventResponseAnimationVisemeDelta.fromJson(readerToUse.reset());
                } else if ("response.animation_viseme.done".equals(discriminatorValue)) {
                    return ServerEventResponseAnimationVisemeDone.fromJson(readerToUse.reset());
                } else if ("conversation.item.input_audio_transcription.delta".equals(discriminatorValue)) {
                    return ServerEventConversationItemInputAudioTranscriptionDelta.fromJson(readerToUse.reset());
                } else if ("conversation.item.retrieved".equals(discriminatorValue)) {
                    return ServerEventConversationItemRetrieved.fromJson(readerToUse.reset());
                } else if ("response.function_call_arguments.delta".equals(discriminatorValue)) {
                    return ServerEventResponseFunctionCallArgumentsDelta.fromJson(readerToUse.reset());
                } else if ("response.function_call_arguments.done".equals(discriminatorValue)) {
                    return ServerEventResponseFunctionCallArgumentsDone.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ServerEvent fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEvent deserializedServerEvent = new ServerEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedServerEvent.type = ServerEventType.fromString(reader.getString());
                } else if ("event_id".equals(fieldName)) {
                    deserializedServerEvent.eventId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEvent;
        });
    }
}
