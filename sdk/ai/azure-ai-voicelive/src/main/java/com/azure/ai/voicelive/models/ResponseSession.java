// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Base for session configuration in the response.
 */
@Fluent
public final class ResponseSession implements JsonSerializable<ResponseSession> {
    /*
     * The model for the session.
     */
    @Generated
    private String model;

    /*
     * The modalities to be used in the session.
     */
    @Generated
    private List<Modality> modalities;

    /*
     * The animation configuration for the session.
     */
    @Generated
    private Animation animation;

    /*
     * The voice configuration for the session.
     */
    @Generated
    private BinaryData voice;

    /*
     * Optional instructions to guide the model's behavior throughout the session.
     */
    @Generated
    private String instructions;

    /*
     * Input audio sampling rate in Hz. Available values:
     * 
     * - For pcm16: 8000, 16000, 24000
     * 
     * - For g711_alaw/g711_ulaw: 8000
     */
    @Generated
    private Integer inputAudioSamplingRate;

    /*
     * Input audio format. Default is 'pcm16'.
     */
    @Generated
    private InputAudioFormat inputAudioFormat;

    /*
     * Output audio format. Default is 'pcm16'.
     */
    @Generated
    private OutputAudioFormat outputAudioFormat;

    /*
     * Type of turn detection to use.
     */
    @Generated
    private TurnDetection turnDetection;

    /*
     * Configuration for input audio noise reduction.
     */
    @Generated
    private AudioNoiseReduction inputAudioNoiseReduction;

    /*
     * Configuration for echo cancellation during server-side audio processing.
     */
    @Generated
    private AudioEchoCancellation inputAudioEchoCancellation;

    /*
     * Configuration for avatar streaming and behavior during the session.
     */
    @Generated
    private AvatarConfig avatar;

    /*
     * Configuration for input audio transcription.
     */
    @Generated
    private AudioInputTranscriptionOptions inputAudioTranscription;

    /*
     * Types of timestamps to include in audio response content.
     */
    @Generated
    private List<AudioTimestampType> outputAudioTimestampTypes;

    /*
     * Configuration for tools to be used during the session, if applicable.
     */
    @Generated
    private List<Tool> tools;

    /*
     * Specifies which tools the model is allowed to call during the session.
     */
    @Generated
    private BinaryData toolChoice;

    /*
     * Controls the randomness of the model's output. Range: 0.0 to 1.0. Default is 0.7.
     */
    @Generated
    private Double temperature;

    /*
     * Maximum number of tokens to generate in the response. Default is unlimited.
     */
    @Generated
    private BinaryData maxResponseOutputTokens;

    /*
     * The agent configuration for the session, if applicable.
     */
    @Generated
    private AgentConfig agent;

    /*
     * The unique identifier for the session.
     */
    @Generated
    private String id;

    /**
     * Creates an instance of ResponseSession class.
     */
    @Generated
    public ResponseSession() {
    }

    /**
     * Get the model property: The model for the session.
     * 
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Set the model property: The model for the session.
     * 
     * @param model the model value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the modalities property: The modalities to be used in the session.
     * 
     * @return the modalities value.
     */
    @Generated
    public List<Modality> getModalities() {
        return this.modalities;
    }

    /**
     * Set the modalities property: The modalities to be used in the session.
     * 
     * @param modalities the modalities value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setModalities(List<Modality> modalities) {
        this.modalities = modalities;
        return this;
    }

    /**
     * Get the animation property: The animation configuration for the session.
     * 
     * @return the animation value.
     */
    @Generated
    public Animation getAnimation() {
        return this.animation;
    }

    /**
     * Set the animation property: The animation configuration for the session.
     * 
     * @param animation the animation value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setAnimation(Animation animation) {
        this.animation = animation;
        return this;
    }

    /**
     * Get the voice property: The voice configuration for the session.
     * 
     * @return the voice value.
     */
    @Generated
    public BinaryData getVoice() {
        return this.voice;
    }

    /**
     * Set the voice property: The voice configuration for the session.
     * 
     * @param voice the voice value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setVoice(BinaryData voice) {
        this.voice = voice;
        return this;
    }

    /**
     * Get the instructions property: Optional instructions to guide the model's behavior throughout the session.
     * 
     * @return the instructions value.
     */
    @Generated
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: Optional instructions to guide the model's behavior throughout the session.
     * 
     * @param instructions the instructions value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the inputAudioSamplingRate property: Input audio sampling rate in Hz. Available values:
     * 
     * - For pcm16: 8000, 16000, 24000
     * 
     * - For g711_alaw/g711_ulaw: 8000.
     * 
     * @return the inputAudioSamplingRate value.
     */
    @Generated
    public Integer getInputAudioSamplingRate() {
        return this.inputAudioSamplingRate;
    }

    /**
     * Set the inputAudioSamplingRate property: Input audio sampling rate in Hz. Available values:
     * 
     * - For pcm16: 8000, 16000, 24000
     * 
     * - For g711_alaw/g711_ulaw: 8000.
     * 
     * @param inputAudioSamplingRate the inputAudioSamplingRate value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setInputAudioSamplingRate(Integer inputAudioSamplingRate) {
        this.inputAudioSamplingRate = inputAudioSamplingRate;
        return this;
    }

    /**
     * Get the inputAudioFormat property: Input audio format. Default is 'pcm16'.
     * 
     * @return the inputAudioFormat value.
     */
    @Generated
    public InputAudioFormat getInputAudioFormat() {
        return this.inputAudioFormat;
    }

    /**
     * Set the inputAudioFormat property: Input audio format. Default is 'pcm16'.
     * 
     * @param inputAudioFormat the inputAudioFormat value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setInputAudioFormat(InputAudioFormat inputAudioFormat) {
        this.inputAudioFormat = inputAudioFormat;
        return this;
    }

    /**
     * Get the outputAudioFormat property: Output audio format. Default is 'pcm16'.
     * 
     * @return the outputAudioFormat value.
     */
    @Generated
    public OutputAudioFormat getOutputAudioFormat() {
        return this.outputAudioFormat;
    }

    /**
     * Set the outputAudioFormat property: Output audio format. Default is 'pcm16'.
     * 
     * @param outputAudioFormat the outputAudioFormat value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setOutputAudioFormat(OutputAudioFormat outputAudioFormat) {
        this.outputAudioFormat = outputAudioFormat;
        return this;
    }

    /**
     * Get the turnDetection property: Type of turn detection to use.
     * 
     * @return the turnDetection value.
     */
    @Generated
    public TurnDetection getTurnDetection() {
        return this.turnDetection;
    }

    /**
     * Set the turnDetection property: Type of turn detection to use.
     * 
     * @param turnDetection the turnDetection value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setTurnDetection(TurnDetection turnDetection) {
        this.turnDetection = turnDetection;
        return this;
    }

    /**
     * Get the inputAudioNoiseReduction property: Configuration for input audio noise reduction.
     * 
     * @return the inputAudioNoiseReduction value.
     */
    @Generated
    public AudioNoiseReduction getInputAudioNoiseReduction() {
        return this.inputAudioNoiseReduction;
    }

    /**
     * Set the inputAudioNoiseReduction property: Configuration for input audio noise reduction.
     * 
     * @param inputAudioNoiseReduction the inputAudioNoiseReduction value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setInputAudioNoiseReduction(AudioNoiseReduction inputAudioNoiseReduction) {
        this.inputAudioNoiseReduction = inputAudioNoiseReduction;
        return this;
    }

    /**
     * Get the inputAudioEchoCancellation property: Configuration for echo cancellation during server-side audio
     * processing.
     * 
     * @return the inputAudioEchoCancellation value.
     */
    @Generated
    public AudioEchoCancellation getInputAudioEchoCancellation() {
        return this.inputAudioEchoCancellation;
    }

    /**
     * Set the inputAudioEchoCancellation property: Configuration for echo cancellation during server-side audio
     * processing.
     * 
     * @param inputAudioEchoCancellation the inputAudioEchoCancellation value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setInputAudioEchoCancellation(AudioEchoCancellation inputAudioEchoCancellation) {
        this.inputAudioEchoCancellation = inputAudioEchoCancellation;
        return this;
    }

    /**
     * Get the avatar property: Configuration for avatar streaming and behavior during the session.
     * 
     * @return the avatar value.
     */
    @Generated
    public AvatarConfig getAvatar() {
        return this.avatar;
    }

    /**
     * Set the avatar property: Configuration for avatar streaming and behavior during the session.
     * 
     * @param avatar the avatar value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setAvatar(AvatarConfig avatar) {
        this.avatar = avatar;
        return this;
    }

    /**
     * Get the inputAudioTranscription property: Configuration for input audio transcription.
     * 
     * @return the inputAudioTranscription value.
     */
    @Generated
    public AudioInputTranscriptionOptions getInputAudioTranscription() {
        return this.inputAudioTranscription;
    }

    /**
     * Set the inputAudioTranscription property: Configuration for input audio transcription.
     * 
     * @param inputAudioTranscription the inputAudioTranscription value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setInputAudioTranscription(AudioInputTranscriptionOptions inputAudioTranscription) {
        this.inputAudioTranscription = inputAudioTranscription;
        return this;
    }

    /**
     * Get the outputAudioTimestampTypes property: Types of timestamps to include in audio response content.
     * 
     * @return the outputAudioTimestampTypes value.
     */
    @Generated
    public List<AudioTimestampType> getOutputAudioTimestampTypes() {
        return this.outputAudioTimestampTypes;
    }

    /**
     * Set the outputAudioTimestampTypes property: Types of timestamps to include in audio response content.
     * 
     * @param outputAudioTimestampTypes the outputAudioTimestampTypes value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setOutputAudioTimestampTypes(List<AudioTimestampType> outputAudioTimestampTypes) {
        this.outputAudioTimestampTypes = outputAudioTimestampTypes;
        return this;
    }

    /**
     * Get the tools property: Configuration for tools to be used during the session, if applicable.
     * 
     * @return the tools value.
     */
    @Generated
    public List<Tool> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: Configuration for tools to be used during the session, if applicable.
     * 
     * @param tools the tools value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setTools(List<Tool> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the toolChoice property: Specifies which tools the model is allowed to call during the session.
     * 
     * @return the toolChoice value.
     */
    @Generated
    public BinaryData getToolChoice() {
        return this.toolChoice;
    }

    /**
     * Set the toolChoice property: Specifies which tools the model is allowed to call during the session.
     * 
     * @param toolChoice the toolChoice value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setToolChoice(BinaryData toolChoice) {
        this.toolChoice = toolChoice;
        return this;
    }

    /**
     * Get the temperature property: Controls the randomness of the model's output. Range: 0.0 to 1.0. Default is 0.7.
     * 
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: Controls the randomness of the model's output. Range: 0.0 to 1.0. Default is 0.7.
     * 
     * @param temperature the temperature value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the maxResponseOutputTokens property: Maximum number of tokens to generate in the response. Default is
     * unlimited.
     * 
     * @return the maxResponseOutputTokens value.
     */
    @Generated
    public BinaryData getMaxResponseOutputTokens() {
        return this.maxResponseOutputTokens;
    }

    /**
     * Set the maxResponseOutputTokens property: Maximum number of tokens to generate in the response. Default is
     * unlimited.
     * 
     * @param maxResponseOutputTokens the maxResponseOutputTokens value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setMaxResponseOutputTokens(BinaryData maxResponseOutputTokens) {
        this.maxResponseOutputTokens = maxResponseOutputTokens;
        return this;
    }

    /**
     * Get the agent property: The agent configuration for the session, if applicable.
     * 
     * @return the agent value.
     */
    @Generated
    public AgentConfig getAgent() {
        return this.agent;
    }

    /**
     * Set the agent property: The agent configuration for the session, if applicable.
     * 
     * @param agent the agent value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setAgent(AgentConfig agent) {
        this.agent = agent;
        return this;
    }

    /**
     * Get the id property: The unique identifier for the session.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: The unique identifier for the session.
     * 
     * @param id the id value to set.
     * @return the ResponseSession object itself.
     */
    @Generated
    public ResponseSession setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeArrayField("modalities", this.modalities,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeJsonField("animation", this.animation);
        if (this.voice != null) {
            jsonWriter.writeFieldName("voice");
            this.voice.writeTo(jsonWriter);
        }
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeNumberField("input_audio_sampling_rate", this.inputAudioSamplingRate);
        jsonWriter.writeStringField("input_audio_format",
            this.inputAudioFormat == null ? null : this.inputAudioFormat.toString());
        jsonWriter.writeStringField("output_audio_format",
            this.outputAudioFormat == null ? null : this.outputAudioFormat.toString());
        jsonWriter.writeJsonField("turn_detection", this.turnDetection);
        jsonWriter.writeJsonField("input_audio_noise_reduction", this.inputAudioNoiseReduction);
        jsonWriter.writeJsonField("input_audio_echo_cancellation", this.inputAudioEchoCancellation);
        jsonWriter.writeJsonField("avatar", this.avatar);
        jsonWriter.writeJsonField("input_audio_transcription", this.inputAudioTranscription);
        jsonWriter.writeArrayField("output_audio_timestamp_types", this.outputAudioTimestampTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        if (this.toolChoice != null) {
            jsonWriter.writeFieldName("tool_choice");
            this.toolChoice.writeTo(jsonWriter);
        }
        jsonWriter.writeNumberField("temperature", this.temperature);
        if (this.maxResponseOutputTokens != null) {
            jsonWriter.writeFieldName("max_response_output_tokens");
            this.maxResponseOutputTokens.writeTo(jsonWriter);
        }
        jsonWriter.writeJsonField("agent", this.agent);
        jsonWriter.writeStringField("id", this.id);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseSession from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseSession if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResponseSession.
     */
    @Generated
    public static ResponseSession fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResponseSession deserializedResponseSession = new ResponseSession();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    deserializedResponseSession.model = reader.getString();
                } else if ("modalities".equals(fieldName)) {
                    List<Modality> modalities = reader.readArray(reader1 -> Modality.fromString(reader1.getString()));
                    deserializedResponseSession.modalities = modalities;
                } else if ("animation".equals(fieldName)) {
                    deserializedResponseSession.animation = Animation.fromJson(reader);
                } else if ("voice".equals(fieldName)) {
                    deserializedResponseSession.voice
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("instructions".equals(fieldName)) {
                    deserializedResponseSession.instructions = reader.getString();
                } else if ("input_audio_sampling_rate".equals(fieldName)) {
                    deserializedResponseSession.inputAudioSamplingRate = reader.getNullable(JsonReader::getInt);
                } else if ("input_audio_format".equals(fieldName)) {
                    deserializedResponseSession.inputAudioFormat = InputAudioFormat.fromString(reader.getString());
                } else if ("output_audio_format".equals(fieldName)) {
                    deserializedResponseSession.outputAudioFormat = OutputAudioFormat.fromString(reader.getString());
                } else if ("turn_detection".equals(fieldName)) {
                    deserializedResponseSession.turnDetection = TurnDetection.fromJson(reader);
                } else if ("input_audio_noise_reduction".equals(fieldName)) {
                    deserializedResponseSession.inputAudioNoiseReduction = AudioNoiseReduction.fromJson(reader);
                } else if ("input_audio_echo_cancellation".equals(fieldName)) {
                    deserializedResponseSession.inputAudioEchoCancellation = AudioEchoCancellation.fromJson(reader);
                } else if ("avatar".equals(fieldName)) {
                    deserializedResponseSession.avatar = AvatarConfig.fromJson(reader);
                } else if ("input_audio_transcription".equals(fieldName)) {
                    deserializedResponseSession.inputAudioTranscription
                        = AudioInputTranscriptionOptions.fromJson(reader);
                } else if ("output_audio_timestamp_types".equals(fieldName)) {
                    List<AudioTimestampType> outputAudioTimestampTypes
                        = reader.readArray(reader1 -> AudioTimestampType.fromString(reader1.getString()));
                    deserializedResponseSession.outputAudioTimestampTypes = outputAudioTimestampTypes;
                } else if ("tools".equals(fieldName)) {
                    List<Tool> tools = reader.readArray(reader1 -> Tool.fromJson(reader1));
                    deserializedResponseSession.tools = tools;
                } else if ("tool_choice".equals(fieldName)) {
                    deserializedResponseSession.toolChoice
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("temperature".equals(fieldName)) {
                    deserializedResponseSession.temperature = reader.getNullable(JsonReader::getDouble);
                } else if ("max_response_output_tokens".equals(fieldName)) {
                    deserializedResponseSession.maxResponseOutputTokens
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("agent".equals(fieldName)) {
                    deserializedResponseSession.agent = AgentConfig.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedResponseSession.id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResponseSession;
        });
    }
}
