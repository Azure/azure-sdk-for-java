// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when an input audio buffer is committed, either by the client or
 * automatically in server VAD mode. The `item_id` property is the ID of the user
 * message item that will be created, thus a `conversation.item.created` event
 * will also be sent to the client.
 */
@Immutable
public final class ServerEventInputAudioBufferCommitted extends ServerEvent {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.INPUT_AUDIO_BUFFER_COMMITTED;

    /*
     * The ID of the preceding item after which the new item will be inserted.
     */
    @Generated
    private String previousItemId;

    /*
     * The ID of the user message item that will be created.
     */
    @Generated
    private final String itemId;

    /**
     * Creates an instance of ServerEventInputAudioBufferCommitted class.
     * 
     * @param itemId the itemId value to set.
     */
    @Generated
    private ServerEventInputAudioBufferCommitted(String itemId) {
        this.itemId = itemId;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the previousItemId property: The ID of the preceding item after which the new item will be inserted.
     * 
     * @return the previousItemId value.
     */
    @Generated
    public String getPreviousItemId() {
        return this.previousItemId;
    }

    /**
     * Get the itemId property: The ID of the user message item that will be created.
     * 
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("previous_item_id", this.previousItemId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEventInputAudioBufferCommitted from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEventInputAudioBufferCommitted if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerEventInputAudioBufferCommitted.
     */
    @Generated
    public static ServerEventInputAudioBufferCommitted fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String itemId = null;
            ServerEventType type = ServerEventType.INPUT_AUDIO_BUFFER_COMMITTED;
            String previousItemId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ServerEventType.fromString(reader.getString());
                } else if ("previous_item_id".equals(fieldName)) {
                    previousItemId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ServerEventInputAudioBufferCommitted deserializedServerEventInputAudioBufferCommitted
                = new ServerEventInputAudioBufferCommitted(itemId);
            deserializedServerEventInputAudioBufferCommitted.setEventId(eventId);
            deserializedServerEventInputAudioBufferCommitted.type = type;
            deserializedServerEventInputAudioBufferCommitted.previousItemId = previousItemId;

            return deserializedServerEventInputAudioBufferCommitted;
        });
    }
}
