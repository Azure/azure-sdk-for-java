// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration for the agent.
 */
@Fluent
public final class AgentConfig implements JsonSerializable<AgentConfig> {
    /*
     * The type of agent to use.
     */
    @Generated
    private final String type = "agent";

    /*
     * The name of the agent.
     */
    @Generated
    private final String name;

    /*
     * Optional description of the agent.
     */
    @Generated
    private String description;

    /*
     * The ID of the agent.
     */
    @Generated
    private final String agentId;

    /*
     * The ID of the conversation thread.
     */
    @Generated
    private final String threadId;

    /**
     * Creates an instance of AgentConfig class.
     * 
     * @param name the name value to set.
     * @param agentId the agentId value to set.
     * @param threadId the threadId value to set.
     */
    @Generated
    public AgentConfig(String name, String agentId, String threadId) {
        this.name = name;
        this.agentId = agentId;
        this.threadId = threadId;
    }

    /**
     * Get the type property: The type of agent to use.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the name property: The name of the agent.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: Optional description of the agent.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Optional description of the agent.
     * 
     * @param description the description value to set.
     * @return the AgentConfig object itself.
     */
    @Generated
    public AgentConfig setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the agentId property: The ID of the agent.
     * 
     * @return the agentId value.
     */
    @Generated
    public String getAgentId() {
        return this.agentId;
    }

    /**
     * Get the threadId property: The ID of the conversation thread.
     * 
     * @return the threadId value.
     */
    @Generated
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("agent_id", this.agentId);
        jsonWriter.writeStringField("thread_id", this.threadId);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentConfig.
     */
    @Generated
    public static AgentConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String agentId = null;
            String threadId = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("agent_id".equals(fieldName)) {
                    agentId = reader.getString();
                } else if ("thread_id".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AgentConfig deserializedAgentConfig = new AgentConfig(name, agentId, threadId);
            deserializedAgentConfig.description = description;

            return deserializedAgentConfig;
        });
    }
}
