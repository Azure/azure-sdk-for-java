// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details for a failed response.
 */
@Immutable
public final class ResponseFailedDetails extends ResponseStatusDetails {
    /*
     * The type property.
     */
    @Generated
    private SessionResponseStatus type = SessionResponseStatus.FAILED;

    /*
     * The error property.
     */
    @Generated
    private final BinaryData error;

    /**
     * Creates an instance of ResponseFailedDetails class.
     *
     * @param error the error value to set.
     */
    @Generated
    private ResponseFailedDetails(BinaryData error) {
        this.error = error;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public SessionResponseStatus getType() {
        return this.type;
    }

    /**
     * Get the error property: The error property.
     *
     * @return the error value.
     */
    @Generated
    public BinaryData getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFieldName("error");
        this.error.writeTo(jsonWriter);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseFailedDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseFailedDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponseFailedDetails.
     */
    @Generated
    public static ResponseFailedDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData error = null;
            SessionResponseStatus type = SessionResponseStatus.FAILED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("error".equals(fieldName)) {
                    error = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("type".equals(fieldName)) {
                    type = SessionResponseStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponseFailedDetails deserializedResponseFailedDetails = new ResponseFailedDetails(error);
            deserializedResponseFailedDetails.type = type;

            return deserializedResponseFailedDetails;
        });
    }
}
