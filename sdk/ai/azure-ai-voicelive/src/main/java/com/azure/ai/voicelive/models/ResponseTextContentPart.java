// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A text content part for a response.
 */
@Fluent
public final class ResponseTextContentPart extends ContentPart {
    /*
     * The type property.
     */
    @Generated
    private ContentPartType type = ContentPartType.TEXT;

    /*
     * The text property.
     */
    @Generated
    private String text;

    /**
     * Creates an instance of ResponseTextContentPart class.
     */
    @Generated
    public ResponseTextContentPart() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ContentPartType getType() {
        return this.type;
    }

    /**
     * Get the text property: The text property.
     * 
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Set the text property: The text property.
     * 
     * @param text the text value to set.
     * @return the ResponseTextContentPart object itself.
     */
    @Generated
    public ResponseTextContentPart setText(String text) {
        this.text = text;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("text", this.text);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseTextContentPart from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseTextContentPart if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResponseTextContentPart.
     */
    @Generated
    public static ResponseTextContentPart fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResponseTextContentPart deserializedResponseTextContentPart = new ResponseTextContentPart();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedResponseTextContentPart.type = ContentPartType.fromString(reader.getString());
                } else if ("text".equals(fieldName)) {
                    deserializedResponseTextContentPart.text = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResponseTextContentPart;
        });
    }
}
