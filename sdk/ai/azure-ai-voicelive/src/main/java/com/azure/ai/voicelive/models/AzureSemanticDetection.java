// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure semantic end-of-utterance detection (default).
 */
@Fluent
public final class AzureSemanticDetection extends EouDetection {
    /*
     * The model property.
     */
    @Generated
    private EouDetectionModel model = EouDetectionModel.SEMANTIC_DETECTION_V1;

    /*
     * Threshold level setting. Recommended instead of `threshold`. One of `low`, `medium`, `high`, or `default`.
     */
    @Generated
    private EouThresholdLevel thresholdLevel;

    /*
     * Timeout in milliseconds. Recommended instead of `timeout`.
     */
    @Generated
    private Integer timeoutMs;

    /**
     * Creates an instance of AzureSemanticDetection class.
     */
    @Generated
    public AzureSemanticDetection() {
    }

    /**
     * Get the model property: The model property.
     * 
     * @return the model value.
     */
    @Generated
    @Override
    public EouDetectionModel getModel() {
        return this.model;
    }

    /**
     * Get the thresholdLevel property: Threshold level setting. Recommended instead of `threshold`. One of `low`,
     * `medium`, `high`, or `default`.
     * 
     * @return the thresholdLevel value.
     */
    @Generated
    public EouThresholdLevel getThresholdLevel() {
        return this.thresholdLevel;
    }

    /**
     * Set the thresholdLevel property: Threshold level setting. Recommended instead of `threshold`. One of `low`,
     * `medium`, `high`, or `default`.
     * 
     * @param thresholdLevel the thresholdLevel value to set.
     * @return the AzureSemanticDetection object itself.
     */
    @Generated
    public AzureSemanticDetection setThresholdLevel(EouThresholdLevel thresholdLevel) {
        this.thresholdLevel = thresholdLevel;
        return this;
    }

    /**
     * Get the timeoutMs property: Timeout in milliseconds. Recommended instead of `timeout`.
     * 
     * @return the timeoutMs value.
     */
    @Generated
    public Integer getTimeoutMs() {
        return this.timeoutMs;
    }

    /**
     * Set the timeoutMs property: Timeout in milliseconds. Recommended instead of `timeout`.
     * 
     * @param timeoutMs the timeoutMs value to set.
     * @return the AzureSemanticDetection object itself.
     */
    @Generated
    public AzureSemanticDetection setTimeoutMs(Integer timeoutMs) {
        this.timeoutMs = timeoutMs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model", this.model == null ? null : this.model.toString());
        jsonWriter.writeStringField("threshold_level",
            this.thresholdLevel == null ? null : this.thresholdLevel.toString());
        jsonWriter.writeNumberField("timeout_ms", this.timeoutMs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSemanticDetection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSemanticDetection if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureSemanticDetection.
     */
    @Generated
    public static AzureSemanticDetection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSemanticDetection deserializedAzureSemanticDetection = new AzureSemanticDetection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    deserializedAzureSemanticDetection.model = EouDetectionModel.fromString(reader.getString());
                } else if ("threshold_level".equals(fieldName)) {
                    deserializedAzureSemanticDetection.thresholdLevel
                        = EouThresholdLevel.fromString(reader.getString());
                } else if ("timeout_ms".equals(fieldName)) {
                    deserializedAzureSemanticDetection.timeoutMs = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureSemanticDetection;
        });
    }
}
