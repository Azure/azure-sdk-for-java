// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when the input audio buffer is cleared by the client with a
 * `input_audio_buffer.clear` event.
 */
@Immutable
public final class SessionUpdateInputAudioBufferCleared extends SessionUpdate {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.INPUT_AUDIO_BUFFER_CLEARED;

    /**
     * Creates an instance of SessionUpdateInputAudioBufferCleared class.
     */
    @Generated
    private SessionUpdateInputAudioBufferCleared() {
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionUpdateInputAudioBufferCleared from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionUpdateInputAudioBufferCleared if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionUpdateInputAudioBufferCleared.
     */
    @Generated
    public static SessionUpdateInputAudioBufferCleared fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionUpdateInputAudioBufferCleared deserializedSessionUpdateInputAudioBufferCleared
                = new SessionUpdateInputAudioBufferCleared();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    deserializedSessionUpdateInputAudioBufferCleared.setEventId(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedSessionUpdateInputAudioBufferCleared.type
                        = ServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionUpdateInputAudioBufferCleared;
        });
    }
}
