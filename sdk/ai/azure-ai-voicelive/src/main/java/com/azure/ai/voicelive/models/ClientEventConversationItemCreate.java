// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Add a new Item to the Conversation's context, including messages, function
 * calls, and function call responses. This event can be used both to populate a
 * "history" of the conversation and to add new items mid-stream, but has the
 * current limitation that it cannot populate assistant audio messages.
 * If successful, the server will respond with a `conversation.item.created`
 * event, otherwise an `error` event will be sent.
 */
@Fluent
public final class ClientEventConversationItemCreate extends ClientEvent {
    /*
     * The type of event.
     */
    @Generated
    private ClientEventType type = ClientEventType.CONVERSATION_ITEM_CREATE;

    /*
     * Optional client-generated ID used to identify this event.
     */
    @Generated
    private String eventId;

    /*
     * The ID of the preceding item after which the new item will be inserted.
     * If not set, the new item will be appended to the end of the conversation.
     * If set to `root`, the new item will be added to the beginning of the conversation.
     * If set to an existing ID, it allows an item to be inserted mid-conversation. If the
     * ID cannot be found, an error will be returned and the item will not be added.
     */
    @Generated
    private String previousItemId;

    /*
     * The item property.
     */
    @Generated
    private ConversationRequestItem item;

    /**
     * Creates an instance of ClientEventConversationItemCreate class.
     */
    @Generated
    public ClientEventConversationItemCreate() {
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ClientEventType getType() {
        return this.type;
    }

    /**
     * Get the eventId property: Optional client-generated ID used to identify this event.
     * 
     * @return the eventId value.
     */
    @Generated
    public String getEventId() {
        return this.eventId;
    }

    /**
     * Set the eventId property: Optional client-generated ID used to identify this event.
     * 
     * @param eventId the eventId value to set.
     * @return the ClientEventConversationItemCreate object itself.
     */
    @Generated
    public ClientEventConversationItemCreate setEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * Get the previousItemId property: The ID of the preceding item after which the new item will be inserted.
     * If not set, the new item will be appended to the end of the conversation.
     * If set to `root`, the new item will be added to the beginning of the conversation.
     * If set to an existing ID, it allows an item to be inserted mid-conversation. If the
     * ID cannot be found, an error will be returned and the item will not be added.
     * 
     * @return the previousItemId value.
     */
    @Generated
    public String getPreviousItemId() {
        return this.previousItemId;
    }

    /**
     * Set the previousItemId property: The ID of the preceding item after which the new item will be inserted.
     * If not set, the new item will be appended to the end of the conversation.
     * If set to `root`, the new item will be added to the beginning of the conversation.
     * If set to an existing ID, it allows an item to be inserted mid-conversation. If the
     * ID cannot be found, an error will be returned and the item will not be added.
     * 
     * @param previousItemId the previousItemId value to set.
     * @return the ClientEventConversationItemCreate object itself.
     */
    @Generated
    public ClientEventConversationItemCreate setPreviousItemId(String previousItemId) {
        this.previousItemId = previousItemId;
        return this;
    }

    /**
     * Get the item property: The item property.
     * 
     * @return the item value.
     */
    @Generated
    public ConversationRequestItem getItem() {
        return this.item;
    }

    /**
     * Set the item property: The item property.
     * 
     * @param item the item value to set.
     * @return the ClientEventConversationItemCreate object itself.
     */
    @Generated
    public ClientEventConversationItemCreate setItem(ConversationRequestItem item) {
        this.item = item;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("event_id", this.eventId);
        jsonWriter.writeStringField("previous_item_id", this.previousItemId);
        jsonWriter.writeJsonField("item", this.item);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClientEventConversationItemCreate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClientEventConversationItemCreate if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClientEventConversationItemCreate.
     */
    @Generated
    public static ClientEventConversationItemCreate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClientEventConversationItemCreate deserializedClientEventConversationItemCreate
                = new ClientEventConversationItemCreate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedClientEventConversationItemCreate.type = ClientEventType.fromString(reader.getString());
                } else if ("event_id".equals(fieldName)) {
                    deserializedClientEventConversationItemCreate.eventId = reader.getString();
                } else if ("previous_item_id".equals(fieldName)) {
                    deserializedClientEventConversationItemCreate.previousItemId = reader.getString();
                } else if ("item".equals(fieldName)) {
                    deserializedClientEventConversationItemCreate.item = ConversationRequestItem.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClientEventConversationItemCreate;
        });
    }
}
