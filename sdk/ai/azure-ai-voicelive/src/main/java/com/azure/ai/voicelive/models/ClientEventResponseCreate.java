// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This event instructs the server to create a Response, which means triggering
 * model inference. When in Server VAD mode, the server will create Responses
 * automatically.
 * A Response will include at least one Item, and may have two, in which case
 * the second will be a function call. These Items will be appended to the
 * conversation history.
 * The server will respond with a `response.created` event, events for Items
 * and content created, and finally a `response.done` event to indicate the
 * Response is complete.
 * The `response.create` event includes inference configuration like
 * `instructions`, and `temperature`. These fields will override the Session's
 * configuration for this Response only.
 */
@Fluent
public final class ClientEventResponseCreate extends ClientEvent {
    /*
     * The type of event.
     */
    @Generated
    private ClientEventType type = ClientEventType.RESPONSE_CREATE;

    /*
     * The response property.
     */
    @Generated
    private ResponseCreateParams response;

    /*
     * additional instructions (system prompt) appended to the default instructions of the session. Only affects this
     * response only.
     */
    @Generated
    private String additionalInstructions;

    /**
     * Creates an instance of ClientEventResponseCreate class.
     */
    @Generated
    public ClientEventResponseCreate() {
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ClientEventType getType() {
        return this.type;
    }

    /**
     * Get the response property: The response property.
     * 
     * @return the response value.
     */
    @Generated
    public ResponseCreateParams getResponse() {
        return this.response;
    }

    /**
     * Set the response property: The response property.
     * 
     * @param response the response value to set.
     * @return the ClientEventResponseCreate object itself.
     */
    @Generated
    public ClientEventResponseCreate setResponse(ResponseCreateParams response) {
        this.response = response;
        return this;
    }

    /**
     * Get the additionalInstructions property: additional instructions (system prompt) appended to the default
     * instructions of the session. Only affects this response only.
     * 
     * @return the additionalInstructions value.
     */
    @Generated
    public String getAdditionalInstructions() {
        return this.additionalInstructions;
    }

    /**
     * Set the additionalInstructions property: additional instructions (system prompt) appended to the default
     * instructions of the session. Only affects this response only.
     * 
     * @param additionalInstructions the additionalInstructions value to set.
     * @return the ClientEventResponseCreate object itself.
     */
    @Generated
    public ClientEventResponseCreate setAdditionalInstructions(String additionalInstructions) {
        this.additionalInstructions = additionalInstructions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ClientEventResponseCreate setEventId(String eventId) {
        super.setEventId(eventId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("response", this.response);
        jsonWriter.writeStringField("additional_instructions", this.additionalInstructions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClientEventResponseCreate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClientEventResponseCreate if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClientEventResponseCreate.
     */
    @Generated
    public static ClientEventResponseCreate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClientEventResponseCreate deserializedClientEventResponseCreate = new ClientEventResponseCreate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    deserializedClientEventResponseCreate.setEventId(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedClientEventResponseCreate.type = ClientEventType.fromString(reader.getString());
                } else if ("response".equals(fieldName)) {
                    deserializedClientEventResponseCreate.response = ResponseCreateParams.fromJson(reader);
                } else if ("additional_instructions".equals(fieldName)) {
                    deserializedClientEventResponseCreate.additionalInstructions = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClientEventResponseCreate;
        });
    }
}
