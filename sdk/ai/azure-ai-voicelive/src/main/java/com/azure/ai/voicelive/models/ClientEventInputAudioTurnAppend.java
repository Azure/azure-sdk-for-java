// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Appends audio data to an ongoing input turn.
 */
@Fluent
public final class ClientEventInputAudioTurnAppend extends ClientEvent {
    /*
     * The type of event.
     */
    @Generated
    private ClientEventType type = ClientEventType.INPUT_AUDIO_TURN_APPEND;

    /*
     * The ID of the turn this audio is part of.
     */
    @Generated
    private final String turnId;

    /*
     * Base64-encoded audio chunk.
     */
    @Generated
    private final String audio;

    /**
     * Creates an instance of ClientEventInputAudioTurnAppend class.
     * 
     * @param turnId the turnId value to set.
     * @param audio the audio value to set.
     */
    @Generated
    public ClientEventInputAudioTurnAppend(String turnId, String audio) {
        this.turnId = turnId;
        this.audio = audio;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ClientEventType getType() {
        return this.type;
    }

    /**
     * Get the turnId property: The ID of the turn this audio is part of.
     * 
     * @return the turnId value.
     */
    @Generated
    public String getTurnId() {
        return this.turnId;
    }

    /**
     * Get the audio property: Base64-encoded audio chunk.
     * 
     * @return the audio value.
     */
    @Generated
    public String getAudio() {
        return this.audio;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ClientEventInputAudioTurnAppend setEventId(String eventId) {
        super.setEventId(eventId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("turn_id", this.turnId);
        jsonWriter.writeStringField("audio", this.audio);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClientEventInputAudioTurnAppend from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClientEventInputAudioTurnAppend if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClientEventInputAudioTurnAppend.
     */
    @Generated
    public static ClientEventInputAudioTurnAppend fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String turnId = null;
            String audio = null;
            ClientEventType type = ClientEventType.INPUT_AUDIO_TURN_APPEND;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("turn_id".equals(fieldName)) {
                    turnId = reader.getString();
                } else if ("audio".equals(fieldName)) {
                    audio = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ClientEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ClientEventInputAudioTurnAppend deserializedClientEventInputAudioTurnAppend
                = new ClientEventInputAudioTurnAppend(turnId, audio);
            deserializedClientEventInputAudioTurnAppend.setEventId(eventId);
            deserializedClientEventInputAudioTurnAppend.type = type;

            return deserializedClientEventInputAudioTurnAppend;
        });
    }
}
