// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base for Azure voice configurations.
 */
@Immutable
public class AzureVoice extends VoiceProvider implements JsonSerializable<AzureVoice> {
    /*
     * The type of the Azure voice.
     */
    @Generated
    private AzureVoiceType type = AzureVoiceType.fromString("AzureVoice");

    /**
     * Creates an instance of AzureVoice class.
     */
    @Generated
    public AzureVoice() {
    }

    /**
     * Get the type property: The type of the Azure voice.
     *
     * @return the type value.
     */
    @Generated
    public AzureVoiceType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureVoice from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureVoice if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the AzureVoice.
     */
    @Generated
    public static AzureVoice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            // FIXED: Use JsonReaderHelper to avoid bufferObject() bug
            // We're inside readObject callback, so pass true for alreadyInObject
            String jsonString = JsonReaderHelper.readObjectAsString(reader, true);
            String discriminatorValue = JsonReaderHelper.extractDiscriminator(jsonString, "type");

            // Create fresh JsonReader for the subtype
            JsonReader freshReader = com.azure.json.JsonProviders.createReader(jsonString);

            // Use the discriminator value to determine which subtype should be deserialized.
            if ("azure-custom".equals(discriminatorValue)) {
                return AzureCustomVoice.fromJson(freshReader);
            } else if ("azure-standard".equals(discriminatorValue)) {
                return AzureStandardVoice.fromJson(freshReader);
            } else if ("azure-personal".equals(discriminatorValue)) {
                return AzurePersonalVoice.fromJson(freshReader);
            } else {
                return fromJsonKnownDiscriminator(freshReader);
            }
        });
    }

    @Generated
    static AzureVoice fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureVoice deserializedAzureVoice = new AzureVoice();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAzureVoice.type = AzureVoiceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureVoice;
        });
    }
}
