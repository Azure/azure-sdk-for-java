// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned in `server_vad` mode when the server detects the end of speech in
 * the audio buffer. The server will also send an `conversation.item.created`
 * event with the user message item that is created from the audio buffer.
 */
@Immutable
public final class SessionUpdateInputAudioBufferSpeechStopped extends SessionUpdate {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.INPUT_AUDIO_BUFFER_SPEECH_STOPPED;

    /*
     * Milliseconds since the session started when speech stopped. This will
     * correspond to the end of audio sent to the model, and thus includes the
     * `min_silence_duration_ms` configured in the Session.
     */
    @Generated
    private final int audioEndMs;

    /*
     * The ID of the user message item that will be created.
     */
    @Generated
    private final String itemId;

    /**
     * Creates an instance of SessionUpdateInputAudioBufferSpeechStopped class.
     * 
     * @param audioEndMs the audioEndMs value to set.
     * @param itemId the itemId value to set.
     */
    @Generated
    private SessionUpdateInputAudioBufferSpeechStopped(int audioEndMs, String itemId) {
        this.audioEndMs = audioEndMs;
        this.itemId = itemId;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the audioEndMs property: Milliseconds since the session started when speech stopped. This will
     * correspond to the end of audio sent to the model, and thus includes the
     * `min_silence_duration_ms` configured in the Session.
     * 
     * @return the audioEndMs value.
     */
    @Generated
    public int getAudioEndMs() {
        return this.audioEndMs;
    }

    /**
     * Get the itemId property: The ID of the user message item that will be created.
     * 
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeIntField("audio_end_ms", this.audioEndMs);
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionUpdateInputAudioBufferSpeechStopped from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionUpdateInputAudioBufferSpeechStopped if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SessionUpdateInputAudioBufferSpeechStopped.
     */
    @Generated
    public static SessionUpdateInputAudioBufferSpeechStopped fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            int audioEndMs = 0;
            String itemId = null;
            ServerEventType type = ServerEventType.INPUT_AUDIO_BUFFER_SPEECH_STOPPED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("audio_end_ms".equals(fieldName)) {
                    audioEndMs = reader.getInt();
                } else if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            SessionUpdateInputAudioBufferSpeechStopped deserializedSessionUpdateInputAudioBufferSpeechStopped
                = new SessionUpdateInputAudioBufferSpeechStopped(audioEndMs, itemId);
            deserializedSessionUpdateInputAudioBufferSpeechStopped.setEventId(eventId);
            deserializedSessionUpdateInputAudioBufferSpeechStopped.type = type;

            return deserializedSessionUpdateInputAudioBufferSpeechStopped;
        });
    }
}
