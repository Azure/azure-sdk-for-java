// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when a conversation item is created. There are several scenarios that produce this event:
 * - The server is generating a Response, which if successful will produce
 * either one or two Items, which will be of type `message`
 * (role `assistant`) or type `function_call`.
 * - The input audio buffer has been committed, either by the client or the
 * server (in `server_vad` mode). The server will take the content of the
 * input audio buffer and add it to a new user message Item.
 * - The client has sent a `conversation.item.create` event to add a new Item
 * to the Conversation.
 */
@Immutable
public final class SessionUpdateConversationItemCreated extends SessionUpdate {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.CONVERSATION_ITEM_CREATED;

    /*
     * The ID of the preceding item in the Conversation context, allows the
     * client to understand the order of the conversation.
     */
    @Generated
    private String previousItemId;

    /*
     * The item property.
     */
    @Generated
    private SessionResponseItem item;

    /**
     * Creates an instance of SessionUpdateConversationItemCreated class.
     */
    @Generated
    private SessionUpdateConversationItemCreated() {
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the previousItemId property: The ID of the preceding item in the Conversation context, allows the
     * client to understand the order of the conversation.
     * 
     * @return the previousItemId value.
     */
    @Generated
    public String getPreviousItemId() {
        return this.previousItemId;
    }

    /**
     * Get the item property: The item property.
     * 
     * @return the item value.
     */
    @Generated
    public SessionResponseItem getItem() {
        return this.item;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("previous_item_id", this.previousItemId);
        jsonWriter.writeJsonField("item", this.item);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionUpdateConversationItemCreated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionUpdateConversationItemCreated if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionUpdateConversationItemCreated.
     */
    @Generated
    public static SessionUpdateConversationItemCreated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionUpdateConversationItemCreated deserializedSessionUpdateConversationItemCreated
                = new SessionUpdateConversationItemCreated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    deserializedSessionUpdateConversationItemCreated.setEventId(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedSessionUpdateConversationItemCreated.type
                        = ServerEventType.fromString(reader.getString());
                } else if ("previous_item_id".equals(fieldName)) {
                    deserializedSessionUpdateConversationItemCreated.previousItemId = reader.getString();
                } else if ("item".equals(fieldName)) {
                    deserializedSessionUpdateConversationItemCreated.item = SessionResponseItem.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionUpdateConversationItemCreated;
        });
    }
}
