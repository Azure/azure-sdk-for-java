// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input audio content part.
 */
@Fluent
public final class InputAudioContentPart extends MessageContentPart {
    /*
     * The type of the content part.
     */
    @Generated
    private ContentPartType type = ContentPartType.INPUT_AUDIO;

    /*
     * The audio property.
     */
    @Generated
    private final String audio;

    /*
     * The transcript property.
     */
    @Generated
    private String transcript;

    /**
     * Creates an instance of InputAudioContentPart class.
     * 
     * @param audio the audio value to set.
     */
    @Generated
    public InputAudioContentPart(String audio) {
        this.audio = audio;
    }

    /**
     * Get the type property: The type of the content part.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ContentPartType getType() {
        return this.type;
    }

    /**
     * Get the audio property: The audio property.
     * 
     * @return the audio value.
     */
    @Generated
    public String getAudio() {
        return this.audio;
    }

    /**
     * Get the transcript property: The transcript property.
     * 
     * @return the transcript value.
     */
    @Generated
    public String getTranscript() {
        return this.transcript;
    }

    /**
     * Set the transcript property: The transcript property.
     * 
     * @param transcript the transcript value to set.
     * @return the InputAudioContentPart object itself.
     */
    @Generated
    public InputAudioContentPart setTranscript(String transcript) {
        this.transcript = transcript;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("audio", this.audio);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("transcript", this.transcript);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputAudioContentPart from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputAudioContentPart if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InputAudioContentPart.
     */
    @Generated
    public static InputAudioContentPart fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String audio = null;
            ContentPartType type = ContentPartType.INPUT_AUDIO;
            String transcript = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("audio".equals(fieldName)) {
                    audio = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ContentPartType.fromString(reader.getString());
                } else if ("transcript".equals(fieldName)) {
                    transcript = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            InputAudioContentPart deserializedInputAudioContentPart = new InputAudioContentPart(audio);
            deserializedInputAudioContentPart.type = type;
            deserializedInputAudioContentPart.transcript = transcript;

            return deserializedInputAudioContentPart;
        });
    }
}
