// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A function call output item within a conversation.
 */
@Fluent
public final class FunctionCallOutputItem extends ConversationRequestItem {
    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.FUNCTION_CALL_OUTPUT;

    /*
     * The call_id property.
     */
    @Generated
    private final String callId;

    /*
     * The output property.
     */
    @Generated
    private final String output;

    /*
     * The status property.
     */
    @Generated
    private ItemParamStatus status;

    /**
     * Creates an instance of FunctionCallOutputItem class.
     * 
     * @param callId the callId value to set.
     * @param output the output value to set.
     */
    @Generated
    public FunctionCallOutputItem(String callId, String output) {
        this.callId = callId;
        this.output = output;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the callId property: The call_id property.
     * 
     * @return the callId value.
     */
    @Generated
    public String getCallId() {
        return this.callId;
    }

    /**
     * Get the output property: The output property.
     * 
     * @return the output value.
     */
    @Generated
    public String getOutput() {
        return this.output;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    @Generated
    public ItemParamStatus getStatus() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     * 
     * @param status the status value to set.
     * @return the FunctionCallOutputItem object itself.
     */
    @Generated
    public FunctionCallOutputItem setStatus(ItemParamStatus status) {
        this.status = status;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FunctionCallOutputItem setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("call_id", this.callId);
        jsonWriter.writeStringField("output", this.output);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FunctionCallOutputItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FunctionCallOutputItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FunctionCallOutputItem.
     */
    @Generated
    public static FunctionCallOutputItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String callId = null;
            String output = null;
            ItemType type = ItemType.FUNCTION_CALL_OUTPUT;
            ItemParamStatus status = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("call_id".equals(fieldName)) {
                    callId = reader.getString();
                } else if ("output".equals(fieldName)) {
                    output = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    status = ItemParamStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            FunctionCallOutputItem deserializedFunctionCallOutputItem = new FunctionCallOutputItem(callId, output);
            deserializedFunctionCallOutputItem.setId(id);
            deserializedFunctionCallOutputItem.type = type;
            deserializedFunctionCallOutputItem.status = status;

            return deserializedFunctionCallOutputItem;
        });
    }
}
