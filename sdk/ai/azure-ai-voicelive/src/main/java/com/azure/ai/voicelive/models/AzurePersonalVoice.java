// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure personal voice configuration.
 */
@Fluent
public final class AzurePersonalVoice extends AzureVoice {
    /*
     * The type of the Azure voice.
     */
    @Generated
    private AzureVoiceType type = AzureVoiceType.AZURE_PERSONAL;

    /*
     * Voice name cannot be empty.
     */
    @Generated
    private final String name;

    /*
     * Temperature must be between 0.0 and 1.0.
     */
    @Generated
    private Double temperature;

    /*
     * Underlying neural model to use for personal voice.
     */
    @Generated
    private final PersonalVoiceModels model;

    /**
     * Creates an instance of AzurePersonalVoice class.
     * 
     * @param name the name value to set.
     * @param model the model value to set.
     */
    @Generated
    public AzurePersonalVoice(String name, PersonalVoiceModels model) {
        this.name = name;
        this.model = model;
    }

    /**
     * Get the type property: The type of the Azure voice.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public AzureVoiceType getType() {
        return this.type;
    }

    /**
     * Get the name property: Voice name cannot be empty.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the temperature property: Temperature must be between 0.0 and 1.0.
     * 
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: Temperature must be between 0.0 and 1.0.
     * 
     * @param temperature the temperature value to set.
     * @return the AzurePersonalVoice object itself.
     */
    @Generated
    public AzurePersonalVoice setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the model property: Underlying neural model to use for personal voice.
     * 
     * @return the model value.
     */
    @Generated
    public PersonalVoiceModels getModel() {
        return this.model;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("model", this.model == null ? null : this.model.toString());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("temperature", this.temperature);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzurePersonalVoice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzurePersonalVoice if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzurePersonalVoice.
     */
    @Generated
    public static AzurePersonalVoice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            PersonalVoiceModels model = null;
            AzureVoiceType type = AzureVoiceType.AZURE_PERSONAL;
            Double temperature = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("model".equals(fieldName)) {
                    model = PersonalVoiceModels.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    type = AzureVoiceType.fromString(reader.getString());
                } else if ("temperature".equals(fieldName)) {
                    temperature = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            AzurePersonalVoice deserializedAzurePersonalVoice = new AzurePersonalVoice(name, model);
            deserializedAzurePersonalVoice.type = type;
            deserializedAzurePersonalVoice.temperature = temperature;

            return deserializedAzurePersonalVoice;
        });
    }
}
