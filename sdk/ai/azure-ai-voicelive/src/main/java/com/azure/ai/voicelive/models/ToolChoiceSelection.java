// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A base representation for a voicelive tool_choice selecting a named tool.
 */
@Immutable
public class ToolChoiceSelection extends ToolChoice {
    /*
     * The type property.
     */
    @Generated
    private ToolType type = ToolType.fromString("ToolChoiceSelection");

    /**
     * Creates an instance of ToolChoiceSelection class.
     */
    @Generated
    public ToolChoiceSelection() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    public ToolType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ToolChoiceSelection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ToolChoiceSelection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ToolChoiceSelection.
     */
    @Generated
    public static ToolChoiceSelection fromJson(JsonReader jsonReader) throws IOException {
        ToolChoice result = ToolChoice.fromJson(jsonReader);
        if (result instanceof ToolChoiceSelection) {
            return (ToolChoiceSelection) result;
        }
        return null;
    }

    @Generated
    static ToolChoiceSelection fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ToolChoiceSelection deserializedToolChoiceSelection = new ToolChoiceSelection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedToolChoiceSelection.type = ToolType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedToolChoiceSelection;
        });
    }
}
