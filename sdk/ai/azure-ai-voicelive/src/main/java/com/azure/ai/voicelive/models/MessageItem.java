// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A message item within a conversation.
 */
@Fluent
public class MessageItem extends ConversationRequestItem {
    /*
     * The type property.
     */
    @Generated
    private final ItemType type = ItemType.MESSAGE;

    /*
     * The role of the message origionator.
     */
    @Generated
    private ResponseMessageRole role = ResponseMessageRole.fromString("message");

    /*
     * The content parts of the message.
     */
    @Generated
    private final List<MessageContentPart> content;

    /*
     * Processing status of the message item.
     */
    @Generated
    private ItemParamStatus status;

    /**
     * Creates an instance of MessageItem class.
     *
     * @param content the content value to set.
     */
    @Generated
    public MessageItem(List<MessageContentPart> content) {
        this.content = content;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the role property: The role of the message origionator.
     *
     * @return the role value.
     */
    @Generated
    public ResponseMessageRole getRole() {
        return this.role;
    }

    /**
     * Get the content property: The content parts of the message.
     *
     * @return the content value.
     */
    @Generated
    public List<MessageContentPart> getContent() {
        return this.content;
    }

    /**
     * Get the status property: Processing status of the message item.
     *
     * @return the status value.
     */
    @Generated
    public ItemParamStatus getStatus() {
        return this.status;
    }

    /**
     * Set the status property: Processing status of the message item.
     *
     * @param status the status value to set.
     * @return the MessageItem object itself.
     */
    @Generated
    public MessageItem setStatus(ItemParamStatus status) {
        this.status = status;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MessageItem setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("content", this.content, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageItem.
     */
    @Generated
    public static MessageItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            // FIXED: Use JsonReaderHelper to avoid bufferObject() bug
            // We're inside readObject callback, so pass true for alreadyInObject
            String jsonString = JsonReaderHelper.readObjectAsString(reader, true);
            String discriminatorValue = JsonReaderHelper.extractDiscriminator(jsonString, "role");

            // Create fresh JsonReader for the subtype
            JsonReader freshReader = com.azure.json.JsonProviders.createReader(jsonString);

            // Use the discriminator value to determine which subtype should be deserialized.
            if ("system".equals(discriminatorValue)) {
                return SystemMessageItem.fromJson(freshReader);
            } else if ("user".equals(discriminatorValue)) {
                return UserMessageItem.fromJson(freshReader);
            } else if ("assistant".equals(discriminatorValue)) {
                return AssistantMessageItem.fromJson(freshReader);
            } else {
                return fromJsonKnownDiscriminator(freshReader);
            }
        });
    }

    @Generated
    static MessageItem fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<MessageContentPart> content = null;
            ResponseMessageRole role = ResponseMessageRole.fromString("message");
            ItemParamStatus status = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("content".equals(fieldName)) {
                    content = reader.readArray(reader1 -> MessageContentPart.fromJson(reader1));
                } else if ("role".equals(fieldName)) {
                    role = ResponseMessageRole.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    status = ItemParamStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            MessageItem deserializedMessageItem = new MessageItem(content);
            deserializedMessageItem.setId(id);
            deserializedMessageItem.role = role;
            deserializedMessageItem.status = status;

            return deserializedMessageItem;
        });
    }
}
