// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A function call item within a conversation.
 */
@Immutable
public final class ResponseFunctionCallItem extends SessionResponseItem {
    /*
     * The type property.
     */
    @Generated
    private ItemType type = ItemType.FUNCTION_CALL;

    /*
     * The name property.
     */
    @Generated
    private final String name;

    /*
     * The call_id property.
     */
    @Generated
    private final String callId;

    /*
     * The arguments property.
     */
    @Generated
    private final String arguments;

    /*
     * The status property.
     */
    @Generated
    private final SessionResponseItemStatus status;

    /**
     * Creates an instance of ResponseFunctionCallItem class.
     * 
     * @param name the name value to set.
     * @param callId the callId value to set.
     * @param arguments the arguments value to set.
     * @param status the status value to set.
     */
    @Generated
    private ResponseFunctionCallItem(String name, String callId, String arguments, SessionResponseItemStatus status) {
        this.name = name;
        this.callId = callId;
        this.arguments = arguments;
        this.status = status;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ItemType getType() {
        return this.type;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the callId property: The call_id property.
     * 
     * @return the callId value.
     */
    @Generated
    public String getCallId() {
        return this.callId;
    }

    /**
     * Get the arguments property: The arguments property.
     * 
     * @return the arguments value.
     */
    @Generated
    public String getArguments() {
        return this.arguments;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    @Generated
    public SessionResponseItemStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("object", getObject() == null ? null : getObject().toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("call_id", this.callId);
        jsonWriter.writeStringField("arguments", this.arguments);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseFunctionCallItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseFunctionCallItem if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponseFunctionCallItem.
     */
    @Generated
    public static ResponseFunctionCallItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            ResponseItemObject object = null;
            String name = null;
            String callId = null;
            String arguments = null;
            SessionResponseItemStatus status = null;
            ItemType type = ItemType.FUNCTION_CALL;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("object".equals(fieldName)) {
                    object = ResponseItemObject.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("call_id".equals(fieldName)) {
                    callId = reader.getString();
                } else if ("arguments".equals(fieldName)) {
                    arguments = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = SessionResponseItemStatus.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    type = ItemType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponseFunctionCallItem deserializedResponseFunctionCallItem
                = new ResponseFunctionCallItem(name, callId, arguments, status);
            deserializedResponseFunctionCallItem.setId(id);
            deserializedResponseFunctionCallItem.setObject(object);
            deserializedResponseFunctionCallItem.type = type;

            return deserializedResponseFunctionCallItem;
        });
    }
}
