// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A voicelive server event.
 */
@Immutable
public class SessionUpdate implements JsonSerializable<SessionUpdate> {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.fromString("SessionUpdate");

    /*
     * The event_id property.
     */
    @Generated
    private String eventId;

    /**
     * Creates an instance of SessionUpdate class.
     */
    @Generated
    protected SessionUpdate() {
    }

    /**
     * Get the type property: The type of event.
     *
     * @return the type value.
     */
    @Generated
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the eventId property: The event_id property.
     *
     * @return the eventId value.
     */
    @Generated
    public String getEventId() {
        return this.eventId;
    }

    /**
     * Set the eventId property: The event_id property.
     *
     * @param eventId the eventId value to set.
     * @return the SessionUpdate object itself.
     */
    @Generated
    SessionUpdate setEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("event_id", this.eventId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionUpdate from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionUpdate.
     */
    @Generated
    public static SessionUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            // TEMPORARY FIX: Read discriminator without bufferObject() to avoid TypeSpec bug
            // This will be overwritten when code is regenerated from TypeSpec
            String discriminatorValue = null;
            JsonReader readerToUse = reader.bufferObject();

            // Read through to find the discriminator
            while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = readerToUse.getFieldName();
                readerToUse.nextToken();
                if ("type".equals(fieldName)) {
                    discriminatorValue = readerToUse.getString();
                    break;
                } else {
                    readerToUse.skipChildren();
                }
            }

            // Reset to beginning of buffered object for subtype deserialization
            readerToUse = readerToUse.reset();

            // Use the discriminator value to determine which subtype should be deserialized.
            if ("error".equals(discriminatorValue)) {
                return SessionUpdateError.fromJson(readerToUse);
            } else if ("session.created".equals(discriminatorValue)) {
                return SessionUpdateSessionCreated.fromJson(readerToUse);
            } else if ("session.updated".equals(discriminatorValue)) {
                return SessionUpdateSessionUpdated.fromJson(readerToUse);
            } else if ("session.avatar.connecting".equals(discriminatorValue)) {
                return SessionUpdateAvatarConnecting.fromJson(readerToUse);
            } else if ("input_audio_buffer.committed".equals(discriminatorValue)) {
                return SessionUpdateInputAudioBufferCommitted.fromJson(readerToUse);
            } else if ("input_audio_buffer.cleared".equals(discriminatorValue)) {
                return SessionUpdateInputAudioBufferCleared.fromJson(readerToUse);
            } else if ("input_audio_buffer.speech_started".equals(discriminatorValue)) {
                return SessionUpdateInputAudioBufferSpeechStarted.fromJson(readerToUse);
            } else if ("input_audio_buffer.speech_stopped".equals(discriminatorValue)) {
                return SessionUpdateInputAudioBufferSpeechStopped.fromJson(readerToUse);
            } else if ("conversation.item.created".equals(discriminatorValue)) {
                return SessionUpdateConversationItemCreated.fromJson(readerToUse);
            } else if ("conversation.item.input_audio_transcription.completed".equals(discriminatorValue)) {
                return SessionUpdateConversationItemInputAudioTranscriptionCompleted.fromJson(readerToUse);
            } else if ("conversation.item.input_audio_transcription.failed".equals(discriminatorValue)) {
                return SessionUpdateConversationItemInputAudioTranscriptionFailed.fromJson(readerToUse);
            } else if ("conversation.item.truncated".equals(discriminatorValue)) {
                return SessionUpdateConversationItemTruncated.fromJson(readerToUse);
            } else if ("conversation.item.deleted".equals(discriminatorValue)) {
                return SessionUpdateConversationItemDeleted.fromJson(readerToUse);
            } else if ("response.created".equals(discriminatorValue)) {
                return SessionUpdateResponseCreated.fromJson(readerToUse);
            } else if ("response.done".equals(discriminatorValue)) {
                return SessionUpdateResponseDone.fromJson(readerToUse);
            } else if ("response.output_item.added".equals(discriminatorValue)) {
                return SessionUpdateResponseOutputItemAdded.fromJson(readerToUse);
            } else if ("response.output_item.done".equals(discriminatorValue)) {
                return SessionUpdateResponseOutputItemDone.fromJson(readerToUse);
            } else if ("response.content_part.added".equals(discriminatorValue)) {
                return SessionUpdateResponseContentPartAdded.fromJson(readerToUse);
            } else if ("response.content_part.done".equals(discriminatorValue)) {
                return SessionUpdateResponseContentPartDone.fromJson(readerToUse);
            } else if ("response.text.delta".equals(discriminatorValue)) {
                return SessionUpdateResponseTextDelta.fromJson(readerToUse);
            } else if ("response.text.done".equals(discriminatorValue)) {
                return SessionUpdateResponseTextDone.fromJson(readerToUse);
            } else if ("response.audio_transcript.delta".equals(discriminatorValue)) {
                return SessionUpdateResponseAudioTranscriptDelta.fromJson(readerToUse);
            } else if ("response.audio_transcript.done".equals(discriminatorValue)) {
                return SessionUpdateResponseAudioTranscriptDone.fromJson(readerToUse);
            } else if ("response.audio.delta".equals(discriminatorValue)) {
                return SessionUpdateResponseAudioDelta.fromJson(readerToUse);
            } else if ("response.audio.done".equals(discriminatorValue)) {
                return SessionUpdateResponseAudioDone.fromJson(readerToUse);
            } else if ("response.animation_blendshapes.delta".equals(discriminatorValue)) {
                return SessionUpdateResponseAnimationBlendshapeDelta.fromJson(readerToUse);
            } else if ("response.animation_blendshapes.done".equals(discriminatorValue)) {
                return SessionUpdateResponseAnimationBlendshapeDone.fromJson(readerToUse);
            } else if ("response.audio_timestamp.delta".equals(discriminatorValue)) {
                return SessionUpdateResponseAudioTimestampDelta.fromJson(readerToUse);
            } else if ("response.audio_timestamp.done".equals(discriminatorValue)) {
                return SessionUpdateResponseAudioTimestampDone.fromJson(readerToUse);
            } else if ("response.animation_viseme.delta".equals(discriminatorValue)) {
                return SessionUpdateResponseAnimationVisemeDelta.fromJson(readerToUse);
            } else if ("response.animation_viseme.done".equals(discriminatorValue)) {
                return SessionUpdateResponseAnimationVisemeDone.fromJson(readerToUse);
            } else if ("conversation.item.input_audio_transcription.delta".equals(discriminatorValue)) {
                return SessionUpdateConversationItemInputAudioTranscriptionDelta.fromJson(readerToUse);
            } else if ("conversation.item.retrieved".equals(discriminatorValue)) {
                return SessionUpdateConversationItemRetrieved.fromJson(readerToUse);
            } else if ("response.function_call_arguments.delta".equals(discriminatorValue)) {
                return SessionUpdateResponseFunctionCallArgumentsDelta.fromJson(readerToUse);
            } else if ("response.function_call_arguments.done".equals(discriminatorValue)) {
                return SessionUpdateResponseFunctionCallArgumentsDone.fromJson(readerToUse);
            } else {
                return fromJsonKnownDiscriminator(readerToUse);
            }
        });
    }

    @Generated
    static SessionUpdate fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionUpdate deserializedSessionUpdate = new SessionUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSessionUpdate.type = ServerEventType.fromString(reader.getString());
                } else if ("event_id".equals(fieldName)) {
                    deserializedSessionUpdate.eventId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionUpdate;
        });
    }
}
