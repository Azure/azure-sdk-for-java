// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;

/**
 * Represents the maximum number of output tokens for a response.
 * Can be either an integer value (1-4096) or infinite ("inf").
 */
@Immutable
public final class MaxOutputTokens implements JsonSerializable<MaxOutputTokens> {
    private final Integer intValue;
    private final boolean isInfinite;

    /**
     * Private constructor.
     *
     * @param intValue The integer value, or null if infinite.
     * @param isInfinite Whether this represents an infinite token limit.
     */
    private MaxOutputTokens(Integer intValue, boolean isInfinite) {
        this.intValue = intValue;
        this.isInfinite = isInfinite;
    }

    /**
     * Creates a MaxOutputTokens instance with a specific integer value.
     *
     * @param value The maximum number of output tokens (1-4096).
     * @return A MaxOutputTokens instance representing the specified limit.
     * @throws IllegalArgumentException if value is less than 1.
     */
    public static MaxOutputTokens of(int value) {
        if (value < 1) {
            throw new IllegalArgumentException("Max output tokens must be at least 1");
        }
        return new MaxOutputTokens(value, false);
    }

    /**
     * Creates a MaxOutputTokens instance representing an infinite token limit.
     *
     * @return A MaxOutputTokens instance representing no limit.
     */
    public static MaxOutputTokens infinite() {
        return new MaxOutputTokens(null, true);
    }

    /**
     * Checks if this instance represents an infinite token limit.
     *
     * @return true if infinite, false if it has a specific integer value.
     */
    public boolean isInfinite() {
        return isInfinite;
    }

    /**
     * Gets the integer value of the token limit.
     *
     * @return The token limit value, or null if infinite.
     */
    public Integer getValue() {
        return intValue;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (isInfinite) {
            return jsonWriter.writeString("inf");
        } else {
            return jsonWriter.writeInt(intValue);
        }
    }

    /**
     * Reads an instance of MaxOutputTokens from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaxOutputTokens if the JsonReader was pointing to a valid value, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaxOutputTokens.
     * @throws IllegalArgumentException If the value is neither a valid integer nor "inf".
     */
    public static MaxOutputTokens fromJson(JsonReader jsonReader) throws IOException {
        JsonToken token = jsonReader.currentToken();
        if (token == null) {
            token = jsonReader.nextToken();
        }

        if (token == JsonToken.NULL) {
            return null;
        } else if (token == JsonToken.NUMBER) {
            return MaxOutputTokens.of(jsonReader.getInt());
        } else if (token == JsonToken.STRING) {
            String value = jsonReader.getString();
            if ("inf".equals(value)) {
                return MaxOutputTokens.infinite();
            }
            throw new IllegalArgumentException(
                "Invalid max_output_tokens value: '" + value + "'. Expected integer or 'inf'");
        }

        throw new IllegalArgumentException(
            "Invalid max_output_tokens type. Expected integer or string 'inf', but got: " + token);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return isInfinite ? "inf" : String.valueOf(intValue);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        MaxOutputTokens that = (MaxOutputTokens) obj;
        return isInfinite == that.isInfinite && Objects.equals(intValue, that.intValue);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        return Objects.hash(intValue, isInfinite);
    }
}
