// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Returned when the text value of an input audio transcription content part is updated.
 */
@Immutable
public final class ServerEventConversationItemInputAudioTranscriptionDelta extends ServerEvent {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.CONVERSATION_ITEM_INPUT_AUDIO_TRANSCRIPTION_DELTA;

    /*
     * The ID of the item.
     */
    @Generated
    private final String itemId;

    /*
     * The index of the content part in the item's content array.
     */
    @Generated
    private Integer contentIndex;

    /*
     * The text delta.
     */
    @Generated
    private String delta;

    /*
     * The log probabilities of the transcription.
     */
    @Generated
    private List<LogProbProperties> logprobs;

    /**
     * Creates an instance of ServerEventConversationItemInputAudioTranscriptionDelta class.
     * 
     * @param itemId the itemId value to set.
     */
    @Generated
    private ServerEventConversationItemInputAudioTranscriptionDelta(String itemId) {
        this.itemId = itemId;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the itemId property: The ID of the item.
     * 
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * Get the contentIndex property: The index of the content part in the item's content array.
     * 
     * @return the contentIndex value.
     */
    @Generated
    public Integer getContentIndex() {
        return this.contentIndex;
    }

    /**
     * Get the delta property: The text delta.
     * 
     * @return the delta value.
     */
    @Generated
    public String getDelta() {
        return this.delta;
    }

    /**
     * Get the logprobs property: The log probabilities of the transcription.
     * 
     * @return the logprobs value.
     */
    @Generated
    public List<LogProbProperties> getLogprobs() {
        return this.logprobs;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("content_index", this.contentIndex);
        jsonWriter.writeStringField("delta", this.delta);
        jsonWriter.writeArrayField("logprobs", this.logprobs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEventConversationItemInputAudioTranscriptionDelta from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEventConversationItemInputAudioTranscriptionDelta if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerEventConversationItemInputAudioTranscriptionDelta.
     */
    @Generated
    public static ServerEventConversationItemInputAudioTranscriptionDelta fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String itemId = null;
            ServerEventType type = ServerEventType.CONVERSATION_ITEM_INPUT_AUDIO_TRANSCRIPTION_DELTA;
            Integer contentIndex = null;
            String delta = null;
            List<LogProbProperties> logprobs = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ServerEventType.fromString(reader.getString());
                } else if ("content_index".equals(fieldName)) {
                    contentIndex = reader.getNullable(JsonReader::getInt);
                } else if ("delta".equals(fieldName)) {
                    delta = reader.getString();
                } else if ("logprobs".equals(fieldName)) {
                    logprobs = reader.readArray(reader1 -> LogProbProperties.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            ServerEventConversationItemInputAudioTranscriptionDelta deserializedServerEventConversationItemInputAudioTranscriptionDelta
                = new ServerEventConversationItemInputAudioTranscriptionDelta(itemId);
            deserializedServerEventConversationItemInputAudioTranscriptionDelta.setEventId(eventId);
            deserializedServerEventConversationItemInputAudioTranscriptionDelta.type = type;
            deserializedServerEventConversationItemInputAudioTranscriptionDelta.contentIndex = contentIndex;
            deserializedServerEventConversationItemInputAudioTranscriptionDelta.delta = delta;
            deserializedServerEventConversationItemInputAudioTranscriptionDelta.logprobs = logprobs;

            return deserializedServerEventConversationItemInputAudioTranscriptionDelta;
        });
    }
}
