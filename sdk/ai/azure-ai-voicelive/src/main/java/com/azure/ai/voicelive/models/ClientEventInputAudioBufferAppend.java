// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Send this event to append audio bytes to the input audio buffer. The audio
 * buffer is temporary storage you can write to and later commit. In Server VAD
 * mode, the audio buffer is used to detect speech and the server will decide
 * when to commit. When Server VAD is disabled, you must commit the audio buffer
 * manually.
 * 
 * The client may choose how much audio to place in each event up to a maximum
 * of 15 MiB, for example streaming smaller chunks from the client may allow the
 * VAD to be more responsive. Unlike made other client events, the server will
 * not send a confirmation response to this event.
 */
@Fluent
public final class ClientEventInputAudioBufferAppend extends ClientEvent {
    /*
     * The type of event.
     */
    @Generated
    private ClientEventType type = ClientEventType.INPUT_AUDIO_BUFFER_APPEND;

    /*
     * Base64-encoded audio. This must be in the format specified by the
     * `input_audio_format` field in the session configuration.
     */
    @Generated
    private final String audio;

    /**
     * Creates an instance of ClientEventInputAudioBufferAppend class.
     * 
     * @param audio the audio value to set.
     */
    @Generated
    public ClientEventInputAudioBufferAppend(String audio) {
        this.audio = audio;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ClientEventType getType() {
        return this.type;
    }

    /**
     * Get the audio property: Base64-encoded audio. This must be in the format specified by the
     * `input_audio_format` field in the session configuration.
     * 
     * @return the audio value.
     */
    @Generated
    public String getAudio() {
        return this.audio;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ClientEventInputAudioBufferAppend setEventId(String eventId) {
        super.setEventId(eventId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("audio", this.audio);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClientEventInputAudioBufferAppend from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClientEventInputAudioBufferAppend if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClientEventInputAudioBufferAppend.
     */
    @Generated
    public static ClientEventInputAudioBufferAppend fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String audio = null;
            ClientEventType type = ClientEventType.INPUT_AUDIO_BUFFER_APPEND;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("audio".equals(fieldName)) {
                    audio = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ClientEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ClientEventInputAudioBufferAppend deserializedClientEventInputAudioBufferAppend
                = new ClientEventInputAudioBufferAppend(audio);
            deserializedClientEventInputAudioBufferAppend.setEventId(eventId);
            deserializedClientEventInputAudioBufferAppend.type = type;

            return deserializedClientEventInputAudioBufferAppend;
        });
    }
}
