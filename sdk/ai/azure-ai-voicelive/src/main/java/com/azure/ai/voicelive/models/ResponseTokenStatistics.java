// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Overall usage statistics for a response.
 */
@Immutable
public final class ResponseTokenStatistics implements JsonSerializable<ResponseTokenStatistics> {
    /*
     * Total number of tokens (input + output).
     */
    @Generated
    private final int totalTokens;

    /*
     * Number of input tokens.
     */
    @Generated
    private final int inputTokens;

    /*
     * Number of output tokens.
     */
    @Generated
    private final int outputTokens;

    /*
     * Detailed breakdown of input tokens.
     */
    @Generated
    private final InputTokenDetails inputTokenDetails;

    /*
     * Detailed breakdown of output tokens.
     */
    @Generated
    private final OutputTokenDetails outputTokenDetails;

    /**
     * Creates an instance of ResponseTokenStatistics class.
     * 
     * @param totalTokens the totalTokens value to set.
     * @param inputTokens the inputTokens value to set.
     * @param outputTokens the outputTokens value to set.
     * @param inputTokenDetails the inputTokenDetails value to set.
     * @param outputTokenDetails the outputTokenDetails value to set.
     */
    @Generated
    private ResponseTokenStatistics(int totalTokens, int inputTokens, int outputTokens,
        InputTokenDetails inputTokenDetails, OutputTokenDetails outputTokenDetails) {
        this.totalTokens = totalTokens;
        this.inputTokens = inputTokens;
        this.outputTokens = outputTokens;
        this.inputTokenDetails = inputTokenDetails;
        this.outputTokenDetails = outputTokenDetails;
    }

    /**
     * Get the totalTokens property: Total number of tokens (input + output).
     * 
     * @return the totalTokens value.
     */
    @Generated
    public int getTotalTokens() {
        return this.totalTokens;
    }

    /**
     * Get the inputTokens property: Number of input tokens.
     * 
     * @return the inputTokens value.
     */
    @Generated
    public int getInputTokens() {
        return this.inputTokens;
    }

    /**
     * Get the outputTokens property: Number of output tokens.
     * 
     * @return the outputTokens value.
     */
    @Generated
    public int getOutputTokens() {
        return this.outputTokens;
    }

    /**
     * Get the inputTokenDetails property: Detailed breakdown of input tokens.
     * 
     * @return the inputTokenDetails value.
     */
    @Generated
    public InputTokenDetails getInputTokenDetails() {
        return this.inputTokenDetails;
    }

    /**
     * Get the outputTokenDetails property: Detailed breakdown of output tokens.
     * 
     * @return the outputTokenDetails value.
     */
    @Generated
    public OutputTokenDetails getOutputTokenDetails() {
        return this.outputTokenDetails;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("total_tokens", this.totalTokens);
        jsonWriter.writeIntField("input_tokens", this.inputTokens);
        jsonWriter.writeIntField("output_tokens", this.outputTokens);
        jsonWriter.writeJsonField("input_token_details", this.inputTokenDetails);
        jsonWriter.writeJsonField("output_token_details", this.outputTokenDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseTokenStatistics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseTokenStatistics if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponseTokenStatistics.
     */
    @Generated
    public static ResponseTokenStatistics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int totalTokens = 0;
            int inputTokens = 0;
            int outputTokens = 0;
            InputTokenDetails inputTokenDetails = null;
            OutputTokenDetails outputTokenDetails = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("total_tokens".equals(fieldName)) {
                    totalTokens = reader.getInt();
                } else if ("input_tokens".equals(fieldName)) {
                    inputTokens = reader.getInt();
                } else if ("output_tokens".equals(fieldName)) {
                    outputTokens = reader.getInt();
                } else if ("input_token_details".equals(fieldName)) {
                    inputTokenDetails = InputTokenDetails.fromJson(reader);
                } else if ("output_token_details".equals(fieldName)) {
                    outputTokenDetails = OutputTokenDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new ResponseTokenStatistics(totalTokens, inputTokens, outputTokens, inputTokenDetails,
                outputTokenDetails);
        });
    }
}
