// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Send this event to update the session’s default configuration.
 * The client may send this event at any time to update any field,
 * except for `voice`. However, note that once a session has been
 * initialized with a particular `model`, it can’t be changed to
 * another model using `session.update`.
 * When the server receives a `session.update`, it will respond
 * with a `session.updated` event showing the full, effective configuration.
 * Only the fields that are present are updated. To clear a field like
 * `instructions`, pass an empty string.
 */
@Fluent
public final class ClientEventSessionUpdate extends ClientEvent {
    /*
     * The type of event.
     */
    @Generated
    private ClientEventType type = ClientEventType.SESSION_UPDATE;

    /*
     * The session property.
     */
    @Generated
    private final RequestSession session;

    /**
     * Creates an instance of ClientEventSessionUpdate class.
     * 
     * @param session the session value to set.
     */
    @Generated
    public ClientEventSessionUpdate(RequestSession session) {
        this.session = session;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ClientEventType getType() {
        return this.type;
    }

    /**
     * Get the session property: The session property.
     * 
     * @return the session value.
     */
    @Generated
    public RequestSession getSession() {
        return this.session;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ClientEventSessionUpdate setEventId(String eventId) {
        super.setEventId(eventId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeJsonField("session", this.session);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClientEventSessionUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClientEventSessionUpdate if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClientEventSessionUpdate.
     */
    @Generated
    public static ClientEventSessionUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            RequestSession session = null;
            ClientEventType type = ClientEventType.SESSION_UPDATE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("session".equals(fieldName)) {
                    session = RequestSession.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ClientEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ClientEventSessionUpdate deserializedClientEventSessionUpdate = new ClientEventSessionUpdate(session);
            deserializedClientEventSessionUpdate.setEventId(eventId);
            deserializedClientEventSessionUpdate.type = type;

            return deserializedClientEventSessionUpdate;
        });
    }
}
