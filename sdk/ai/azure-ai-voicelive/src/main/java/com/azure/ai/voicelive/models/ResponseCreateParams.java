// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Create a new VoiceLive response with these parameters.
 */
@Fluent
public final class ResponseCreateParams implements JsonSerializable<ResponseCreateParams> {
    /*
     * Whether to commit the response to the conversation. Defaults to true.
     */
    @Generated
    private Boolean commit;

    /*
     * Whether to cancel any ongoing generation before starting this one. Defaults to true.
     */
    @Generated
    private Boolean cancelPrevious;

    /*
     * Input items to append to the conversation context before generating a response.
     */
    @Generated
    private List<ConversationRequestItem> appendInputItems;

    /*
     * Input items to be used as the context for this response.
     * An empty array clears previous context.
     */
    @Generated
    private List<ConversationRequestItem> inputItems;

    /*
     * The set of modalities the model can respond with. To disable audio,
     * set this to ["text"].
     */
    @Generated
    private List<InteractionModality> modalities;

    /*
     * The default system instructions (i.e. system message) prepended to model
     * calls. This field allows the client to guide the model on desired
     * responses. The model can be instructed on response content and format,
     * (e.g. "be extremely succinct", "act friendly", "here are examples of good
     * responses") and on audio behavior (e.g. "talk quickly", "inject emotion
     * into your voice", "laugh frequently"). The instructions are not guaranteed
     * to be followed by the model, but they provide guidance to the model on the
     * desired behavior.
     *
     * Note that the server sets default instructions which will be used if this
     * field is not set and are visible in the `session.created` event at the
     * start of the session.
     */
    @Generated
    private String instructions;

    /*
     * supported voice identifiers and configurations.
     */
    @Generated
    private VoiceProvider voice;

    /*
     * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
     */
    @Generated
    private OutputAudioFormat outputAudioFormat;

    /*
     * Tools (functions) available to the model.
     */
    @Generated
    private List<VoiceLiveToolDefinition> tools;

    /*
     * How the model chooses tools. Options are `auto`, `none`, `required`, or
     * specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
     */
    @Generated
    private String toolChoice;

    /*
     * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
     */
    @Generated
    private Double temperature;

    /*
     * Maximum number of output tokens for a single assistant response,
     * inclusive of tool calls. Provide an integer between 1 and 4096 to
     * limit output tokens, or `inf` for the maximum available tokens for a
     * given model. Defaults to `inf`.
     */
    @Generated
    private MaxOutputTokens maxOutputTokens;

    /**
     * Creates an instance of ResponseCreateParams class.
     */
    @Generated
    public ResponseCreateParams() {
    }

    /**
     * Get the commit property: Whether to commit the response to the conversation. Defaults to true.
     *
     * @return the commit value.
     */
    @Generated
    public Boolean isCommit() {
        return this.commit;
    }

    /**
     * Set the commit property: Whether to commit the response to the conversation. Defaults to true.
     *
     * @param commit the commit value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setCommit(Boolean commit) {
        this.commit = commit;
        return this;
    }

    /**
     * Get the cancelPrevious property: Whether to cancel any ongoing generation before starting this one. Defaults to
     * true.
     *
     * @return the cancelPrevious value.
     */
    @Generated
    public Boolean isCancelPrevious() {
        return this.cancelPrevious;
    }

    /**
     * Set the cancelPrevious property: Whether to cancel any ongoing generation before starting this one. Defaults to
     * true.
     *
     * @param cancelPrevious the cancelPrevious value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setCancelPrevious(Boolean cancelPrevious) {
        this.cancelPrevious = cancelPrevious;
        return this;
    }

    /**
     * Get the appendInputItems property: Input items to append to the conversation context before generating a
     * response.
     *
     * @return the appendInputItems value.
     */
    @Generated
    public List<ConversationRequestItem> getAppendInputItems() {
        return this.appendInputItems;
    }

    /**
     * Set the appendInputItems property: Input items to append to the conversation context before generating a
     * response.
     *
     * @param appendInputItems the appendInputItems value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setAppendInputItems(List<ConversationRequestItem> appendInputItems) {
        this.appendInputItems = appendInputItems;
        return this;
    }

    /**
     * Get the inputItems property: Input items to be used as the context for this response.
     * An empty array clears previous context.
     *
     * @return the inputItems value.
     */
    @Generated
    public List<ConversationRequestItem> getInputItems() {
        return this.inputItems;
    }

    /**
     * Set the inputItems property: Input items to be used as the context for this response.
     * An empty array clears previous context.
     *
     * @param inputItems the inputItems value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setInputItems(List<ConversationRequestItem> inputItems) {
        this.inputItems = inputItems;
        return this;
    }

    /**
     * Get the modalities property: The set of modalities the model can respond with. To disable audio,
     * set this to ["text"].
     *
     * @return the modalities value.
     */
    @Generated
    public List<InteractionModality> getModalities() {
        return this.modalities;
    }

    /**
     * Set the modalities property: The set of modalities the model can respond with. To disable audio,
     * set this to ["text"].
     *
     * @param modalities the modalities value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setModalities(List<InteractionModality> modalities) {
        this.modalities = modalities;
        return this;
    }

    /**
     * Get the instructions property: The default system instructions (i.e. system message) prepended to model
     * calls. This field allows the client to guide the model on desired
     * responses. The model can be instructed on response content and format,
     * (e.g. "be extremely succinct", "act friendly", "here are examples of good
     * responses") and on audio behavior (e.g. "talk quickly", "inject emotion
     * into your voice", "laugh frequently"). The instructions are not guaranteed
     * to be followed by the model, but they provide guidance to the model on the
     * desired behavior.
     *
     * Note that the server sets default instructions which will be used if this
     * field is not set and are visible in the `session.created` event at the
     * start of the session.
     *
     * @return the instructions value.
     */
    @Generated
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: The default system instructions (i.e. system message) prepended to model
     * calls. This field allows the client to guide the model on desired
     * responses. The model can be instructed on response content and format,
     * (e.g. "be extremely succinct", "act friendly", "here are examples of good
     * responses") and on audio behavior (e.g. "talk quickly", "inject emotion
     * into your voice", "laugh frequently"). The instructions are not guaranteed
     * to be followed by the model, but they provide guidance to the model on the
     * desired behavior.
     *
     * Note that the server sets default instructions which will be used if this
     * field is not set and are visible in the `session.created` event at the
     * start of the session.
     *
     * @param instructions the instructions value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the voice property: supported voice identifiers and configurations.
     *
     * @return the voice value.
     */
    @Generated
    public VoiceProvider getVoice() {
        return this.voice;
    }

    /**
     * Set the voice property: supported voice identifiers and configurations.
     *
     * @param voice the voice value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setVoice(VoiceProvider voice) {
        this.voice = voice;
        return this;
    }

    /**
     * Get the outputAudioFormat property: The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
     *
     * @return the outputAudioFormat value.
     */
    @Generated
    public OutputAudioFormat getOutputAudioFormat() {
        return this.outputAudioFormat;
    }

    /**
     * Set the outputAudioFormat property: The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
     *
     * @param outputAudioFormat the outputAudioFormat value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setOutputAudioFormat(OutputAudioFormat outputAudioFormat) {
        this.outputAudioFormat = outputAudioFormat;
        return this;
    }

    /**
     * Get the tools property: Tools (functions) available to the model.
     *
     * @return the tools value.
     */
    @Generated
    public List<VoiceLiveToolDefinition> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: Tools (functions) available to the model.
     *
     * @param tools the tools value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setTools(List<VoiceLiveToolDefinition> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the toolChoice property: How the model chooses tools. Options are `auto`, `none`, `required`, or
     * specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
     *
     * @return the toolChoice value.
     */
    @Generated
    public String getToolChoice() {
        return this.toolChoice;
    }

    /**
     * Set the toolChoice property: How the model chooses tools. Options are `auto`, `none`, `required`, or
     * specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
     *
     * @param toolChoice the toolChoice value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setToolChoice(String toolChoice) {
        this.toolChoice = toolChoice;
        return this;
    }

    /**
     * Get the temperature property: Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
     *
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
     *
     * @param temperature the temperature value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the maxOutputTokens property: Maximum number of output tokens for a single assistant response,
     * inclusive of tool calls. Provide an integer between 1 and 4096 to
     * limit output tokens, or `inf` for the maximum available tokens for a
     * given model. Defaults to `inf`.
     *
     * @return the maxOutputTokens value.
     */
    @Generated
    public MaxOutputTokens getMaxOutputTokens() {
        return this.maxOutputTokens;
    }

    /**
     * Set the maxOutputTokens property: Maximum number of output tokens for a single assistant response,
     * inclusive of tool calls. Provide an integer between 1 and 4096 to
     * limit output tokens, or `inf` for the maximum available tokens for a
     * given model. Defaults to `inf`.
     *
     * @param maxOutputTokens the maxOutputTokens value to set.
     * @return the ResponseCreateParams object itself.
     */
    @Generated
    public ResponseCreateParams setMaxOutputTokens(MaxOutputTokens maxOutputTokens) {
        this.maxOutputTokens = maxOutputTokens;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("commit", this.commit);
        jsonWriter.writeBooleanField("cancel_previous", this.cancelPrevious);
        jsonWriter.writeArrayField("append_input_items", this.appendInputItems,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("input_items", this.inputItems, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("modalities", this.modalities,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("instructions", this.instructions);
        if (this.voice != null) {
            jsonWriter.writeFieldName("voice");
            this.voice.toJson(jsonWriter);
        }
        jsonWriter.writeStringField("output_audio_format",
            this.outputAudioFormat == null ? null : this.outputAudioFormat.toString());
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("tool_choice", this.toolChoice);
        jsonWriter.writeNumberField("temperature", this.temperature);
        jsonWriter.writeJsonField("max_output_tokens", this.maxOutputTokens);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseCreateParams from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseCreateParams if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResponseCreateParams.
     */
    @Generated
    public static ResponseCreateParams fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResponseCreateParams deserializedResponseCreateParams = new ResponseCreateParams();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("commit".equals(fieldName)) {
                    deserializedResponseCreateParams.commit = reader.getNullable(JsonReader::getBoolean);
                } else if ("cancel_previous".equals(fieldName)) {
                    deserializedResponseCreateParams.cancelPrevious = reader.getNullable(JsonReader::getBoolean);
                } else if ("append_input_items".equals(fieldName)) {
                    List<ConversationRequestItem> appendInputItems
                        = reader.readArray(reader1 -> ConversationRequestItem.fromJson(reader1));
                    deserializedResponseCreateParams.appendInputItems = appendInputItems;
                } else if ("input_items".equals(fieldName)) {
                    List<ConversationRequestItem> inputItems
                        = reader.readArray(reader1 -> ConversationRequestItem.fromJson(reader1));
                    deserializedResponseCreateParams.inputItems = inputItems;
                } else if ("modalities".equals(fieldName)) {
                    List<InteractionModality> modalities
                        = reader.readArray(reader1 -> InteractionModality.fromString(reader1.getString()));
                    deserializedResponseCreateParams.modalities = modalities;
                } else if ("instructions".equals(fieldName)) {
                    deserializedResponseCreateParams.instructions = reader.getString();
                } else if ("voice".equals(fieldName)) {
                    deserializedResponseCreateParams.voice = VoiceProvider.fromJson(reader);
                } else if ("output_audio_format".equals(fieldName)) {
                    deserializedResponseCreateParams.outputAudioFormat
                        = OutputAudioFormat.fromString(reader.getString());
                } else if ("tools".equals(fieldName)) {
                    List<VoiceLiveToolDefinition> tools
                        = reader.readArray(reader1 -> VoiceLiveToolDefinition.fromJson(reader1));
                    deserializedResponseCreateParams.tools = tools;
                } else if ("tool_choice".equals(fieldName)) {
                    deserializedResponseCreateParams.toolChoice = reader.getString();
                } else if ("temperature".equals(fieldName)) {
                    deserializedResponseCreateParams.temperature = reader.getNullable(JsonReader::getDouble);
                } else if ("max_output_tokens".equals(fieldName)) {
                    deserializedResponseCreateParams.maxOutputTokens = MaxOutputTokens.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResponseCreateParams;
        });
    }
}
