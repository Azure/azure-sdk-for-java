// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base class representing a tool choice for the voicelive endpoint.
 * This can be either a literal string value (auto, none, required) or a selection object.
 */
@Immutable
public class ToolChoice implements JsonSerializable<ToolChoice> {
    /**
     * Creates an instance of ToolChoice class.
     */
    @Generated
    public ToolChoice() {
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ToolChoice from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ToolChoice if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ToolChoice.
     */
    @Generated
    public static ToolChoice fromJson(JsonReader jsonReader) throws IOException {
        // Check if it's a string (literal) or an object (selection)
        JsonToken token = jsonReader.currentToken();
        if (token == null) {
            token = jsonReader.nextToken();
        }

        if (token == JsonToken.STRING) {
            // It's a literal string value
            String value = jsonReader.getString();
            return new ToolChoiceLiteralValue(value);
        } else if (token == JsonToken.START_OBJECT) {
            // It's a selection object - use readObject to consume it
            return jsonReader.readObject(reader -> {
                // FIXED: Use JsonReaderHelper to avoid bufferObject() bug
                // We're inside readObject callback, so pass true for alreadyInObject
                String jsonString = JsonReaderHelper.readObjectAsString(reader, true);
                String discriminatorValue = JsonReaderHelper.extractDiscriminator(jsonString, "type");

                // Create fresh JsonReader for the subtype
                JsonReader freshReader = com.azure.json.JsonProviders.createReader(jsonString);

                // Use the discriminator value to determine which subtype should be deserialized.
                if ("function".equals(discriminatorValue)) {
                    return ToolChoiceFunctionSelection.fromJson(freshReader);
                } else {
                    return ToolChoiceSelection.fromJsonKnownDiscriminator(freshReader);
                }
            });
        } else {
            return new ToolChoice();
        }
    }

    /**
     * Inner class to represent a literal string tool choice value.
     */
    @Immutable
    private static final class ToolChoiceLiteralValue extends ToolChoice {
        private final String value;

        ToolChoiceLiteralValue(String value) {
            this.value = value;
        }

        @Override
        public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
            jsonWriter.writeString(this.value);
            return jsonWriter;
        }
    }

    /**
     * Creates a ToolChoice from a literal string value.
     *
     * @param literal The literal string value (auto, none, required).
     * @return A ToolChoice instance representing the literal.
     */
    public static ToolChoice fromLiteral(ToolChoiceLiteral literal) {
        if (literal == null) {
            return null;
        }
        return new ToolChoiceLiteralValue(literal.toString());
    }

    /**
     * Creates a ToolChoice from a literal string value.
     *
     * @param literalValue The literal string value (auto, none, required).
     * @return A ToolChoice instance representing the literal.
     */
    public static ToolChoice fromString(String literalValue) {
        if (literalValue == null) {
            return null;
        }
        return new ToolChoiceLiteralValue(literalValue);
    }
}
