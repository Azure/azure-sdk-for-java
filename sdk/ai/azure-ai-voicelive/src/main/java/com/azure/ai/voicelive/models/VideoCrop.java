// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines a video crop rectangle using top-left and bottom-right coordinates.
 */
@Immutable
public final class VideoCrop implements JsonSerializable<VideoCrop> {
    /*
     * Top-left corner of the crop region. Array of [x, y], must be non-negative integers.
     */
    @Generated
    private final List<Integer> topLeftInternal;

    /*
     * Bottom-right corner of the crop region. Array of [x, y], must be non-negative integers.
     */
    @Generated
    private final List<Integer> bottomRightInternal;

    /**
     * Creates an instance of VideoCrop class.
     * 
     * @param topLeftInternal the topLeftInternal value to set.
     * @param bottomRightInternal the bottomRightInternal value to set.
     */
    @Generated
    public VideoCrop(List<Integer> topLeftInternal, List<Integer> bottomRightInternal) {
        this.topLeftInternal = topLeftInternal;
        this.bottomRightInternal = bottomRightInternal;
    }

    /**
     * Get the topLeftInternal property: Top-left corner of the crop region. Array of [x, y], must be non-negative
     * integers.
     * 
     * @return the topLeftInternal value.
     */
    @Generated
    public List<Integer> getTopLeftInternal() {
        return this.topLeftInternal;
    }

    /**
     * Get the bottomRightInternal property: Bottom-right corner of the crop region. Array of [x, y], must be
     * non-negative integers.
     * 
     * @return the bottomRightInternal value.
     */
    @Generated
    public List<Integer> getBottomRightInternal() {
        return this.bottomRightInternal;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("top_left", this.topLeftInternal, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("bottom_right", this.bottomRightInternal,
            (writer, element) -> writer.writeInt(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VideoCrop from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VideoCrop if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VideoCrop.
     */
    @Generated
    public static VideoCrop fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<Integer> topLeftInternal = null;
            List<Integer> bottomRightInternal = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("top_left".equals(fieldName)) {
                    topLeftInternal = reader.readArray(reader1 -> reader1.getInt());
                } else if ("bottom_right".equals(fieldName)) {
                    bottomRightInternal = reader.readArray(reader1 -> reader1.getInt());
                } else {
                    reader.skipChildren();
                }
            }
            return new VideoCrop(topLeftInternal, bottomRightInternal);
        });
    }
}
