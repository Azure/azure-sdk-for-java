// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A voicelive client event.
 */
@Fluent
public class ClientEvent implements JsonSerializable<ClientEvent> {
    /*
     * The type of event.
     */
    @Generated
    private ClientEventType type = ClientEventType.fromString("ClientEvent");

    /*
     * The event_id property.
     */
    @Generated
    private String eventId;

    /**
     * Creates an instance of ClientEvent class.
     */
    @Generated
    public ClientEvent() {
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    public ClientEventType getType() {
        return this.type;
    }

    /**
     * Get the eventId property: The event_id property.
     * 
     * @return the eventId value.
     */
    @Generated
    public String getEventId() {
        return this.eventId;
    }

    /**
     * Set the eventId property: The event_id property.
     * 
     * @param eventId the eventId value to set.
     * @return the ClientEvent object itself.
     */
    @Generated
    public ClientEvent setEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("event_id", this.eventId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClientEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClientEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClientEvent.
     */
    @Generated
    public static ClientEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("session.update".equals(discriminatorValue)) {
                    return ClientEventSessionUpdate.fromJson(readerToUse.reset());
                } else if ("session.avatar.connect".equals(discriminatorValue)) {
                    return ClientEventSessionAvatarConnect.fromJson(readerToUse.reset());
                } else if ("input_audio.turn.start".equals(discriminatorValue)) {
                    return ClientEventInputAudioTurnStart.fromJson(readerToUse.reset());
                } else if ("input_audio.turn.append".equals(discriminatorValue)) {
                    return ClientEventInputAudioTurnAppend.fromJson(readerToUse.reset());
                } else if ("input_audio.turn.end".equals(discriminatorValue)) {
                    return ClientEventInputAudioTurnEnd.fromJson(readerToUse.reset());
                } else if ("input_audio.turn.cancel".equals(discriminatorValue)) {
                    return ClientEventInputAudioTurnCancel.fromJson(readerToUse.reset());
                } else if ("input_audio.clear".equals(discriminatorValue)) {
                    return ClientEventInputAudioClear.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.append".equals(discriminatorValue)) {
                    return ClientEventInputAudioBufferAppend.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.commit".equals(discriminatorValue)) {
                    return ClientEventInputAudioBufferCommit.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.clear".equals(discriminatorValue)) {
                    return ClientEventInputAudioBufferClear.fromJson(readerToUse.reset());
                } else if ("conversation.item.create".equals(discriminatorValue)) {
                    return ClientEventConversationItemCreate.fromJson(readerToUse.reset());
                } else if ("conversation.item.truncate".equals(discriminatorValue)) {
                    return ClientEventConversationItemTruncate.fromJson(readerToUse.reset());
                } else if ("conversation.item.delete".equals(discriminatorValue)) {
                    return ClientEventConversationItemDelete.fromJson(readerToUse.reset());
                } else if ("response.create".equals(discriminatorValue)) {
                    return ClientEventResponseCreate.fromJson(readerToUse.reset());
                } else if ("response.cancel".equals(discriminatorValue)) {
                    return ClientEventResponseCancel.fromJson(readerToUse.reset());
                } else if ("conversation.item.retrieve".equals(discriminatorValue)) {
                    return ClientEventConversationItemRetrieve.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ClientEvent fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClientEvent deserializedClientEvent = new ClientEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedClientEvent.type = ClientEventType.fromString(reader.getString());
                } else if ("event_id".equals(fieldName)) {
                    deserializedClientEvent.eventId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClientEvent;
        });
    }
}
