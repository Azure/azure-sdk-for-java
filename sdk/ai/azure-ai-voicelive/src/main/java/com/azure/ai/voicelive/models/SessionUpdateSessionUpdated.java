// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when a session is updated with a `session.update` event, unless
 * there is an error.
 */
@Immutable
public final class SessionUpdateSessionUpdated extends SessionUpdate {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.SESSION_UPDATED;

    /*
     * The session property.
     */
    @Generated
    private final VoiceLiveSessionResponse session;

    /**
     * Creates an instance of SessionUpdateSessionUpdated class.
     * 
     * @param session the session value to set.
     */
    @Generated
    private SessionUpdateSessionUpdated(VoiceLiveSessionResponse session) {
        this.session = session;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the session property: The session property.
     * 
     * @return the session value.
     */
    @Generated
    public VoiceLiveSessionResponse getSession() {
        return this.session;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeJsonField("session", this.session);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionUpdateSessionUpdated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionUpdateSessionUpdated if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SessionUpdateSessionUpdated.
     */
    @Generated
    public static SessionUpdateSessionUpdated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            VoiceLiveSessionResponse session = null;
            ServerEventType type = ServerEventType.SESSION_UPDATED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("session".equals(fieldName)) {
                    session = VoiceLiveSessionResponse.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            SessionUpdateSessionUpdated deserializedSessionUpdateSessionUpdated
                = new SessionUpdateSessionUpdated(session);
            deserializedSessionUpdateSessionUpdated.setEventId(eventId);
            deserializedSessionUpdateSessionUpdated.type = type;

            return deserializedSessionUpdateSessionUpdated;
        });
    }
}
