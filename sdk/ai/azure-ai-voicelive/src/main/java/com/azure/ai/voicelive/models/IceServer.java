// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ICE server configuration for WebRTC connection negotiation.
 */
@Fluent
public final class IceServer implements JsonSerializable<IceServer> {
    /*
     * List of ICE server URLs (e.g., TURN or STUN endpoints).
     */
    @Generated
    private final List<String> urls;

    /*
     * Optional username used for authentication with the ICE server.
     */
    @Generated
    private String username;

    /*
     * Optional credential (e.g., password or token) used for authentication.
     */
    @Generated
    private String credential;

    /**
     * Creates an instance of IceServer class.
     * 
     * @param urls the urls value to set.
     */
    @Generated
    public IceServer(List<String> urls) {
        this.urls = urls;
    }

    /**
     * Get the urls property: List of ICE server URLs (e.g., TURN or STUN endpoints).
     * 
     * @return the urls value.
     */
    @Generated
    public List<String> getUrls() {
        return this.urls;
    }

    /**
     * Get the username property: Optional username used for authentication with the ICE server.
     * 
     * @return the username value.
     */
    @Generated
    public String getUsername() {
        return this.username;
    }

    /**
     * Set the username property: Optional username used for authentication with the ICE server.
     * 
     * @param username the username value to set.
     * @return the IceServer object itself.
     */
    @Generated
    public IceServer setUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the credential property: Optional credential (e.g., password or token) used for authentication.
     * 
     * @return the credential value.
     */
    @Generated
    public String getCredential() {
        return this.credential;
    }

    /**
     * Set the credential property: Optional credential (e.g., password or token) used for authentication.
     * 
     * @param credential the credential value to set.
     * @return the IceServer object itself.
     */
    @Generated
    public IceServer setCredential(String credential) {
        this.credential = credential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("urls", this.urls, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IceServer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IceServer if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IceServer.
     */
    @Generated
    public static IceServer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> urls = null;
            String username = null;
            String credential = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("urls".equals(fieldName)) {
                    urls = reader.readArray(reader1 -> reader1.getString());
                } else if ("username".equals(fieldName)) {
                    username = reader.getString();
                } else if ("credential".equals(fieldName)) {
                    credential = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            IceServer deserializedIceServer = new IceServer(urls);
            deserializedIceServer.username = username;
            deserializedIceServer.credential = credential;

            return deserializedIceServer;
        });
    }
}
