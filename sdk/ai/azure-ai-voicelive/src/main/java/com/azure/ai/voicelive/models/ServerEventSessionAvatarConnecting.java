// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.voicelive.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Sent when the server is in the process of establishing an avatar media connection and provides its SDP answer.
 */
@Immutable
public final class ServerEventSessionAvatarConnecting extends ServerEvent {
    /*
     * The type of event.
     */
    @Generated
    private ServerEventType type = ServerEventType.SESSION_AVATAR_CONNECTING;

    /*
     * The server's SDP answer for the avatar connection.
     */
    @Generated
    private final String serverSdp;

    /**
     * Creates an instance of ServerEventSessionAvatarConnecting class.
     * 
     * @param serverSdp the serverSdp value to set.
     */
    @Generated
    private ServerEventSessionAvatarConnecting(String serverSdp) {
        this.serverSdp = serverSdp;
    }

    /**
     * Get the type property: The type of event.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ServerEventType getType() {
        return this.type;
    }

    /**
     * Get the serverSdp property: The server's SDP answer for the avatar connection.
     * 
     * @return the serverSdp value.
     */
    @Generated
    public String getServerSdp() {
        return this.serverSdp;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("server_sdp", this.serverSdp);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEventSessionAvatarConnecting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEventSessionAvatarConnecting if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerEventSessionAvatarConnecting.
     */
    @Generated
    public static ServerEventSessionAvatarConnecting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String serverSdp = null;
            ServerEventType type = ServerEventType.SESSION_AVATAR_CONNECTING;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("server_sdp".equals(fieldName)) {
                    serverSdp = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ServerEventSessionAvatarConnecting deserializedServerEventSessionAvatarConnecting
                = new ServerEventSessionAvatarConnecting(serverSdp);
            deserializedServerEventSessionAvatarConnecting.setEventId(eventId);
            deserializedServerEventSessionAvatarConnecting.type = type;

            return deserializedServerEventSessionAvatarConnecting;
        });
    }
}
