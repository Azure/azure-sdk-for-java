/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Annotations;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Annotation;

class AnnotationsImpl extends WrapperImpl<AnnotationsInner> implements Annotations {
    private final InsightsManager manager;

    AnnotationsImpl(InsightsManager manager) {
        super(manager.inner().annotations());
        this.manager = manager;
    }

    public InsightsManager manager() {
        return this.manager;
    }

    private AnnotationImpl wrapModel(AnnotationInner inner) {
        return  new AnnotationImpl(inner, manager());
    }

    @Override
    public Observable<Annotation> createAsync(String resourceGroupName, String resourceName, AnnotationInner annotationProperties) {
        AnnotationsInner client = this.inner();
        return client.createAsync(resourceGroupName, resourceName, annotationProperties)
        .flatMap(new Func1<List<AnnotationInner>, Observable<AnnotationInner>>() {
            @Override
            public Observable<AnnotationInner> call(List<AnnotationInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<AnnotationInner, Annotation>() {
            @Override
            public Annotation call(AnnotationInner inner) {
                return new AnnotationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Annotation> getAsync(String resourceGroupName, String resourceName, String annotationId) {
        AnnotationsInner client = this.inner();
        return client.getAsync(resourceGroupName, resourceName, annotationId)
        .flatMap(new Func1<List<AnnotationInner>, Observable<AnnotationInner>>() {
            @Override
            public Observable<AnnotationInner> call(List<AnnotationInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<AnnotationInner, Annotation>() {
            @Override
            public Annotation call(AnnotationInner inner) {
                return new AnnotationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Annotation> listAsync(String resourceGroupName, String resourceName, String start, String end) {
        AnnotationsInner client = this.inner();
        return client.listAsync(resourceGroupName, resourceName, start, end)
        .flatMap(new Func1<List<AnnotationInner>, Observable<AnnotationInner>>() {
            @Override
            public Observable<AnnotationInner> call(List<AnnotationInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<AnnotationInner, Annotation>() {
            @Override
            public Annotation call(AnnotationInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String resourceName, String annotationId) {
        AnnotationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, resourceName, annotationId).toCompletable();
    }

}
