/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ApplicationInsightsComponent;
import rx.Observable;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ApplicationType;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.FlowType;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.RequestSource;
import org.joda.time.DateTime;

class ApplicationInsightsComponentImpl extends GroupableResourceCoreImpl<ApplicationInsightsComponent, ApplicationInsightsComponentInner, ApplicationInsightsComponentImpl, InsightsManager> implements ApplicationInsightsComponent, ApplicationInsightsComponent.Definition, ApplicationInsightsComponent.Update {
    ApplicationInsightsComponentImpl(String name, ApplicationInsightsComponentInner inner, InsightsManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<ApplicationInsightsComponent> createResourceAsync() {
        ComponentsInner client = this.manager().inner().components();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ApplicationInsightsComponent> updateResourceAsync() {
        ComponentsInner client = this.manager().inner().components();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ApplicationInsightsComponentInner> getInnerAsync() {
        ComponentsInner client = this.manager().inner().components();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String appId() {
        return this.inner().appId();
    }

    @Override
    public String applicationId() {
        return this.inner().applicationId();
    }

    @Override
    public ApplicationType applicationType() {
        return this.inner().applicationType();
    }

    @Override
    public DateTime creationDate() {
        return this.inner().creationDate();
    }

    @Override
    public FlowType flowType() {
        return this.inner().flowType();
    }

    @Override
    public String hockeyAppId() {
        return this.inner().hockeyAppId();
    }

    @Override
    public String hockeyAppToken() {
        return this.inner().hockeyAppToken();
    }

    @Override
    public String instrumentationKey() {
        return this.inner().instrumentationKey();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public RequestSource requestSource() {
        return this.inner().requestSource();
    }

    @Override
    public Double samplingPercentage() {
        return this.inner().samplingPercentage();
    }

    @Override
    public String tenantId() {
        return this.inner().tenantId();
    }

    @Override
    public ApplicationInsightsComponentImpl withApplicationType(ApplicationType applicationType) {
        this.inner().withApplicationType(applicationType);
        return this;
    }

    @Override
    public ApplicationInsightsComponentImpl withKind(String kind) {
        this.inner().withKind(kind);
        return this;
    }

    @Override
    public ApplicationInsightsComponentImpl withFlowType(FlowType flowType) {
        this.inner().withFlowType(flowType);
        return this;
    }

    @Override
    public ApplicationInsightsComponentImpl withHockeyAppId(String hockeyAppId) {
        this.inner().withHockeyAppId(hockeyAppId);
        return this;
    }

    @Override
    public ApplicationInsightsComponentImpl withRequestSource(RequestSource requestSource) {
        this.inner().withRequestSource(requestSource);
        return this;
    }

    @Override
    public ApplicationInsightsComponentImpl withSamplingPercentage(Double samplingPercentage) {
        this.inner().withSamplingPercentage(samplingPercentage);
        return this;
    }

}
