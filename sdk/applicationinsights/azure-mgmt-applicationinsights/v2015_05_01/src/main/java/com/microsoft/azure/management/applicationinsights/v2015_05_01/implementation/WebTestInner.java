/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTestKind;
import java.util.List;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTestGeolocation;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTestPropertiesConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.WebtestsResource;

/**
 * An Application Insights web test definition.
 */
@JsonFlatten
public class WebTestInner extends WebtestsResource {
    /**
     * The kind of web test that this web test watches. Choices are ping and
     * multistep. Possible values include: 'ping', 'multistep'.
     */
    @JsonProperty(value = "kind")
    private WebTestKind kind;

    /**
     * Unique ID of this WebTest. This is typically the same value as the Name
     * field.
     */
    @JsonProperty(value = "properties.SyntheticMonitorId", required = true)
    private String syntheticMonitorId;

    /**
     * User defined name if this WebTest.
     */
    @JsonProperty(value = "properties.Name", required = true)
    private String webTestName;

    /**
     * Purpose/user defined descriptive test for this WebTest.
     */
    @JsonProperty(value = "properties.Description")
    private String description;

    /**
     * Is the test actively being monitored.
     */
    @JsonProperty(value = "properties.Enabled")
    private Boolean enabled;

    /**
     * Interval in seconds between test runs for this WebTest. Default value is
     * 300.
     */
    @JsonProperty(value = "properties.Frequency")
    private Integer frequency;

    /**
     * Seconds until this WebTest will timeout and fail. Default value is 30.
     */
    @JsonProperty(value = "properties.Timeout")
    private Integer timeout;

    /**
     * The kind of web test this is, valid choices are ping and multistep.
     * Possible values include: 'ping', 'multistep'.
     */
    @JsonProperty(value = "properties.Kind", required = true)
    private WebTestKind webTestKind;

    /**
     * Allow for retries should this WebTest fail.
     */
    @JsonProperty(value = "properties.RetryEnabled")
    private Boolean retryEnabled;

    /**
     * A list of where to physically run the tests from to give global coverage
     * for accessibility of your application.
     */
    @JsonProperty(value = "properties.Locations", required = true)
    private List<WebTestGeolocation> locations;

    /**
     * An XML configuration specification for a WebTest.
     */
    @JsonProperty(value = "properties.Configuration")
    private WebTestPropertiesConfiguration configuration;

    /**
     * Current state of this component, whether or not is has been provisioned
     * within the resource group it is defined. Users cannot change this value
     * but are able to read from it. Values will include Succeeded, Deploying,
     * Canceled, and Failed.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Get the kind of web test that this web test watches. Choices are ping and multistep. Possible values include: 'ping', 'multistep'.
     *
     * @return the kind value
     */
    public WebTestKind kind() {
        return this.kind;
    }

    /**
     * Set the kind of web test that this web test watches. Choices are ping and multistep. Possible values include: 'ping', 'multistep'.
     *
     * @param kind the kind value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withKind(WebTestKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get unique ID of this WebTest. This is typically the same value as the Name field.
     *
     * @return the syntheticMonitorId value
     */
    public String syntheticMonitorId() {
        return this.syntheticMonitorId;
    }

    /**
     * Set unique ID of this WebTest. This is typically the same value as the Name field.
     *
     * @param syntheticMonitorId the syntheticMonitorId value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withSyntheticMonitorId(String syntheticMonitorId) {
        this.syntheticMonitorId = syntheticMonitorId;
        return this;
    }

    /**
     * Get user defined name if this WebTest.
     *
     * @return the webTestName value
     */
    public String webTestName() {
        return this.webTestName;
    }

    /**
     * Set user defined name if this WebTest.
     *
     * @param webTestName the webTestName value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withWebTestName(String webTestName) {
        this.webTestName = webTestName;
        return this;
    }

    /**
     * Get purpose/user defined descriptive test for this WebTest.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set purpose/user defined descriptive test for this WebTest.
     *
     * @param description the description value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get is the test actively being monitored.
     *
     * @return the enabled value
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set is the test actively being monitored.
     *
     * @param enabled the enabled value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get interval in seconds between test runs for this WebTest. Default value is 300.
     *
     * @return the frequency value
     */
    public Integer frequency() {
        return this.frequency;
    }

    /**
     * Set interval in seconds between test runs for this WebTest. Default value is 300.
     *
     * @param frequency the frequency value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withFrequency(Integer frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get seconds until this WebTest will timeout and fail. Default value is 30.
     *
     * @return the timeout value
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set seconds until this WebTest will timeout and fail. Default value is 30.
     *
     * @param timeout the timeout value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the kind of web test this is, valid choices are ping and multistep. Possible values include: 'ping', 'multistep'.
     *
     * @return the webTestKind value
     */
    public WebTestKind webTestKind() {
        return this.webTestKind;
    }

    /**
     * Set the kind of web test this is, valid choices are ping and multistep. Possible values include: 'ping', 'multistep'.
     *
     * @param webTestKind the webTestKind value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withWebTestKind(WebTestKind webTestKind) {
        this.webTestKind = webTestKind;
        return this;
    }

    /**
     * Get allow for retries should this WebTest fail.
     *
     * @return the retryEnabled value
     */
    public Boolean retryEnabled() {
        return this.retryEnabled;
    }

    /**
     * Set allow for retries should this WebTest fail.
     *
     * @param retryEnabled the retryEnabled value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withRetryEnabled(Boolean retryEnabled) {
        this.retryEnabled = retryEnabled;
        return this;
    }

    /**
     * Get a list of where to physically run the tests from to give global coverage for accessibility of your application.
     *
     * @return the locations value
     */
    public List<WebTestGeolocation> locations() {
        return this.locations;
    }

    /**
     * Set a list of where to physically run the tests from to give global coverage for accessibility of your application.
     *
     * @param locations the locations value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withLocations(List<WebTestGeolocation> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get an XML configuration specification for a WebTest.
     *
     * @return the configuration value
     */
    public WebTestPropertiesConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set an XML configuration specification for a WebTest.
     *
     * @param configuration the configuration value to set
     * @return the WebTestInner object itself.
     */
    public WebTestInner withConfiguration(WebTestPropertiesConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

}
