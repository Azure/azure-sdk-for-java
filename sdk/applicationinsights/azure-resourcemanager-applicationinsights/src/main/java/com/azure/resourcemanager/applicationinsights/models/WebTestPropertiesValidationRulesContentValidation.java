// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The collection of content validation properties.
 */
@Fluent
public final class WebTestPropertiesValidationRulesContentValidation
    implements JsonSerializable<WebTestPropertiesValidationRulesContentValidation> {
    /*
     * Content to look for in the return of the WebTest. Must not be null or empty.
     */
    private String contentMatch;

    /*
     * When set, this value makes the ContentMatch validation case insensitive.
     */
    private Boolean ignoreCase;

    /*
     * When true, validation will pass if there is a match for the ContentMatch string. If false, validation will fail
     * if there is a match
     */
    private Boolean passIfTextFound;

    /**
     * Creates an instance of WebTestPropertiesValidationRulesContentValidation class.
     */
    public WebTestPropertiesValidationRulesContentValidation() {
    }

    /**
     * Get the contentMatch property: Content to look for in the return of the WebTest. Must not be null or empty.
     * 
     * @return the contentMatch value.
     */
    public String contentMatch() {
        return this.contentMatch;
    }

    /**
     * Set the contentMatch property: Content to look for in the return of the WebTest. Must not be null or empty.
     * 
     * @param contentMatch the contentMatch value to set.
     * @return the WebTestPropertiesValidationRulesContentValidation object itself.
     */
    public WebTestPropertiesValidationRulesContentValidation withContentMatch(String contentMatch) {
        this.contentMatch = contentMatch;
        return this;
    }

    /**
     * Get the ignoreCase property: When set, this value makes the ContentMatch validation case insensitive.
     * 
     * @return the ignoreCase value.
     */
    public Boolean ignoreCase() {
        return this.ignoreCase;
    }

    /**
     * Set the ignoreCase property: When set, this value makes the ContentMatch validation case insensitive.
     * 
     * @param ignoreCase the ignoreCase value to set.
     * @return the WebTestPropertiesValidationRulesContentValidation object itself.
     */
    public WebTestPropertiesValidationRulesContentValidation withIgnoreCase(Boolean ignoreCase) {
        this.ignoreCase = ignoreCase;
        return this;
    }

    /**
     * Get the passIfTextFound property: When true, validation will pass if there is a match for the ContentMatch
     * string. If false, validation will fail if there is a match.
     * 
     * @return the passIfTextFound value.
     */
    public Boolean passIfTextFound() {
        return this.passIfTextFound;
    }

    /**
     * Set the passIfTextFound property: When true, validation will pass if there is a match for the ContentMatch
     * string. If false, validation will fail if there is a match.
     * 
     * @param passIfTextFound the passIfTextFound value to set.
     * @return the WebTestPropertiesValidationRulesContentValidation object itself.
     */
    public WebTestPropertiesValidationRulesContentValidation withPassIfTextFound(Boolean passIfTextFound) {
        this.passIfTextFound = passIfTextFound;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ContentMatch", this.contentMatch);
        jsonWriter.writeBooleanField("IgnoreCase", this.ignoreCase);
        jsonWriter.writeBooleanField("PassIfTextFound", this.passIfTextFound);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebTestPropertiesValidationRulesContentValidation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebTestPropertiesValidationRulesContentValidation if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebTestPropertiesValidationRulesContentValidation.
     */
    public static WebTestPropertiesValidationRulesContentValidation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebTestPropertiesValidationRulesContentValidation deserializedWebTestPropertiesValidationRulesContentValidation
                = new WebTestPropertiesValidationRulesContentValidation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ContentMatch".equals(fieldName)) {
                    deserializedWebTestPropertiesValidationRulesContentValidation.contentMatch = reader.getString();
                } else if ("IgnoreCase".equals(fieldName)) {
                    deserializedWebTestPropertiesValidationRulesContentValidation.ignoreCase
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("PassIfTextFound".equals(fieldName)) {
                    deserializedWebTestPropertiesValidationRulesContentValidation.passIfTextFound
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebTestPropertiesValidationRulesContentValidation;
        });
    }
}
