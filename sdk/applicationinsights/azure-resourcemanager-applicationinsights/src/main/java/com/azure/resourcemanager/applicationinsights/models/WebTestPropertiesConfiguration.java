// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An XML configuration specification for a WebTest.
 */
@Fluent
public final class WebTestPropertiesConfiguration implements JsonSerializable<WebTestPropertiesConfiguration> {
    /*
     * The XML specification of a WebTest to run against an application.
     */
    private String webTest;

    /**
     * Creates an instance of WebTestPropertiesConfiguration class.
     */
    public WebTestPropertiesConfiguration() {
    }

    /**
     * Get the webTest property: The XML specification of a WebTest to run against an application.
     * 
     * @return the webTest value.
     */
    public String webTest() {
        return this.webTest;
    }

    /**
     * Set the webTest property: The XML specification of a WebTest to run against an application.
     * 
     * @param webTest the webTest value to set.
     * @return the WebTestPropertiesConfiguration object itself.
     */
    public WebTestPropertiesConfiguration withWebTest(String webTest) {
        this.webTest = webTest;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("WebTest", this.webTest);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebTestPropertiesConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebTestPropertiesConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebTestPropertiesConfiguration.
     */
    public static WebTestPropertiesConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebTestPropertiesConfiguration deserializedWebTestPropertiesConfiguration
                = new WebTestPropertiesConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("WebTest".equals(fieldName)) {
                    deserializedWebTestPropertiesConfiguration.webTest = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebTestPropertiesConfiguration;
        });
    }
}
