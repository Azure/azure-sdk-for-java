// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Error details.
 */
@Immutable
public final class WorkbookInnerErrorTrace implements JsonSerializable<WorkbookInnerErrorTrace> {
    /*
     * detailed error trace
     */
    private List<String> trace;

    /**
     * Creates an instance of WorkbookInnerErrorTrace class.
     */
    public WorkbookInnerErrorTrace() {
    }

    /**
     * Get the trace property: detailed error trace.
     * 
     * @return the trace value.
     */
    public List<String> trace() {
        return this.trace;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkbookInnerErrorTrace from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkbookInnerErrorTrace if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkbookInnerErrorTrace.
     */
    public static WorkbookInnerErrorTrace fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkbookInnerErrorTrace deserializedWorkbookInnerErrorTrace = new WorkbookInnerErrorTrace();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trace".equals(fieldName)) {
                    List<String> trace = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkbookInnerErrorTrace.trace = trace;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkbookInnerErrorTrace;
        });
    }
}
