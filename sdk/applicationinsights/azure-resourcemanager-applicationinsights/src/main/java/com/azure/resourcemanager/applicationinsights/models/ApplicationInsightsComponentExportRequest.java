// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Application Insights component Continuous Export configuration request definition.
 */
@Fluent
public final class ApplicationInsightsComponentExportRequest
    implements JsonSerializable<ApplicationInsightsComponentExportRequest> {
    /*
     * The document types to be exported, as comma separated values. Allowed values include 'Requests', 'Event',
     * 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd', 'PerformanceCounters', 'Availability',
     * 'Messages'.
     */
    private String recordTypes;

    /*
     * The Continuous Export destination type. This has to be 'Blob'.
     */
    private String destinationType;

    /*
     * The SAS URL for the destination storage container. It must grant write permission.
     */
    private String destinationAddress;

    /*
     * Set to 'true' to create a Continuous Export configuration as enabled, otherwise set it to 'false'.
     */
    private String isEnabled;

    /*
     * Deprecated
     */
    private String notificationQueueEnabled;

    /*
     * Deprecated
     */
    private String notificationQueueUri;

    /*
     * The subscription ID of the destination storage container.
     */
    private String destinationStorageSubscriptionId;

    /*
     * The location ID of the destination storage container.
     */
    private String destinationStorageLocationId;

    /*
     * The name of destination storage account.
     */
    private String destinationAccountId;

    /**
     * Creates an instance of ApplicationInsightsComponentExportRequest class.
     */
    public ApplicationInsightsComponentExportRequest() {
    }

    /**
     * Get the recordTypes property: The document types to be exported, as comma separated values. Allowed values
     * include 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd',
     * 'PerformanceCounters', 'Availability', 'Messages'.
     * 
     * @return the recordTypes value.
     */
    public String recordTypes() {
        return this.recordTypes;
    }

    /**
     * Set the recordTypes property: The document types to be exported, as comma separated values. Allowed values
     * include 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd',
     * 'PerformanceCounters', 'Availability', 'Messages'.
     * 
     * @param recordTypes the recordTypes value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest withRecordTypes(String recordTypes) {
        this.recordTypes = recordTypes;
        return this;
    }

    /**
     * Get the destinationType property: The Continuous Export destination type. This has to be 'Blob'.
     * 
     * @return the destinationType value.
     */
    public String destinationType() {
        return this.destinationType;
    }

    /**
     * Set the destinationType property: The Continuous Export destination type. This has to be 'Blob'.
     * 
     * @param destinationType the destinationType value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest withDestinationType(String destinationType) {
        this.destinationType = destinationType;
        return this;
    }

    /**
     * Get the destinationAddress property: The SAS URL for the destination storage container. It must grant write
     * permission.
     * 
     * @return the destinationAddress value.
     */
    public String destinationAddress() {
        return this.destinationAddress;
    }

    /**
     * Set the destinationAddress property: The SAS URL for the destination storage container. It must grant write
     * permission.
     * 
     * @param destinationAddress the destinationAddress value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest withDestinationAddress(String destinationAddress) {
        this.destinationAddress = destinationAddress;
        return this;
    }

    /**
     * Get the isEnabled property: Set to 'true' to create a Continuous Export configuration as enabled, otherwise set
     * it to 'false'.
     * 
     * @return the isEnabled value.
     */
    public String isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: Set to 'true' to create a Continuous Export configuration as enabled, otherwise set
     * it to 'false'.
     * 
     * @param isEnabled the isEnabled value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest withIsEnabled(String isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get the notificationQueueEnabled property: Deprecated.
     * 
     * @return the notificationQueueEnabled value.
     */
    public String notificationQueueEnabled() {
        return this.notificationQueueEnabled;
    }

    /**
     * Set the notificationQueueEnabled property: Deprecated.
     * 
     * @param notificationQueueEnabled the notificationQueueEnabled value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest withNotificationQueueEnabled(String notificationQueueEnabled) {
        this.notificationQueueEnabled = notificationQueueEnabled;
        return this;
    }

    /**
     * Get the notificationQueueUri property: Deprecated.
     * 
     * @return the notificationQueueUri value.
     */
    public String notificationQueueUri() {
        return this.notificationQueueUri;
    }

    /**
     * Set the notificationQueueUri property: Deprecated.
     * 
     * @param notificationQueueUri the notificationQueueUri value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest withNotificationQueueUri(String notificationQueueUri) {
        this.notificationQueueUri = notificationQueueUri;
        return this;
    }

    /**
     * Get the destinationStorageSubscriptionId property: The subscription ID of the destination storage container.
     * 
     * @return the destinationStorageSubscriptionId value.
     */
    public String destinationStorageSubscriptionId() {
        return this.destinationStorageSubscriptionId;
    }

    /**
     * Set the destinationStorageSubscriptionId property: The subscription ID of the destination storage container.
     * 
     * @param destinationStorageSubscriptionId the destinationStorageSubscriptionId value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest
        withDestinationStorageSubscriptionId(String destinationStorageSubscriptionId) {
        this.destinationStorageSubscriptionId = destinationStorageSubscriptionId;
        return this;
    }

    /**
     * Get the destinationStorageLocationId property: The location ID of the destination storage container.
     * 
     * @return the destinationStorageLocationId value.
     */
    public String destinationStorageLocationId() {
        return this.destinationStorageLocationId;
    }

    /**
     * Set the destinationStorageLocationId property: The location ID of the destination storage container.
     * 
     * @param destinationStorageLocationId the destinationStorageLocationId value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest
        withDestinationStorageLocationId(String destinationStorageLocationId) {
        this.destinationStorageLocationId = destinationStorageLocationId;
        return this;
    }

    /**
     * Get the destinationAccountId property: The name of destination storage account.
     * 
     * @return the destinationAccountId value.
     */
    public String destinationAccountId() {
        return this.destinationAccountId;
    }

    /**
     * Set the destinationAccountId property: The name of destination storage account.
     * 
     * @param destinationAccountId the destinationAccountId value to set.
     * @return the ApplicationInsightsComponentExportRequest object itself.
     */
    public ApplicationInsightsComponentExportRequest withDestinationAccountId(String destinationAccountId) {
        this.destinationAccountId = destinationAccountId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("RecordTypes", this.recordTypes);
        jsonWriter.writeStringField("DestinationType", this.destinationType);
        jsonWriter.writeStringField("DestinationAddress", this.destinationAddress);
        jsonWriter.writeStringField("IsEnabled", this.isEnabled);
        jsonWriter.writeStringField("NotificationQueueEnabled", this.notificationQueueEnabled);
        jsonWriter.writeStringField("NotificationQueueUri", this.notificationQueueUri);
        jsonWriter.writeStringField("DestinationStorageSubscriptionId", this.destinationStorageSubscriptionId);
        jsonWriter.writeStringField("DestinationStorageLocationId", this.destinationStorageLocationId);
        jsonWriter.writeStringField("DestinationAccountId", this.destinationAccountId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationInsightsComponentExportRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationInsightsComponentExportRequest if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationInsightsComponentExportRequest.
     */
    public static ApplicationInsightsComponentExportRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationInsightsComponentExportRequest deserializedApplicationInsightsComponentExportRequest
                = new ApplicationInsightsComponentExportRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("RecordTypes".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.recordTypes = reader.getString();
                } else if ("DestinationType".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.destinationType = reader.getString();
                } else if ("DestinationAddress".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.destinationAddress = reader.getString();
                } else if ("IsEnabled".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.isEnabled = reader.getString();
                } else if ("NotificationQueueEnabled".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.notificationQueueEnabled = reader.getString();
                } else if ("NotificationQueueUri".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.notificationQueueUri = reader.getString();
                } else if ("DestinationStorageSubscriptionId".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.destinationStorageSubscriptionId
                        = reader.getString();
                } else if ("DestinationStorageLocationId".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.destinationStorageLocationId
                        = reader.getString();
                } else if ("DestinationAccountId".equals(fieldName)) {
                    deserializedApplicationInsightsComponentExportRequest.destinationAccountId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationInsightsComponentExportRequest;
        });
    }
}
