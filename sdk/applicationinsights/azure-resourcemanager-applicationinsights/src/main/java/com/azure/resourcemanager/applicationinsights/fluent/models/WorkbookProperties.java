// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties that contain a workbook.
 */
@Fluent
public final class WorkbookProperties implements JsonSerializable<WorkbookProperties> {
    /*
     * The user-defined name (display name) of the workbook.
     */
    private String displayName;

    /*
     * Configuration of this particular workbook. Configuration data is a string containing valid JSON
     */
    private String serializedData;

    /*
     * Workbook schema version format, like 'Notebook/1.0', which should match the workbook in serializedData
     */
    private String version;

    /*
     * Date and time in UTC of the last modification that was made to this workbook definition.
     */
    private OffsetDateTime timeModified;

    /*
     * Workbook category, as defined by the user at creation time.
     */
    private String category;

    /*
     * Being deprecated, please use the other tags field
     */
    private List<String> tags;

    /*
     * Unique user id of the specific user that owns this workbook.
     */
    private String userId;

    /*
     * ResourceId for a source resource.
     */
    private String sourceId;

    /*
     * The resourceId to the storage account when bring your own storage is used
     */
    private String storageUri;

    /*
     * The description of the workbook.
     */
    private String description;

    /*
     * The unique revision id for this workbook definition
     */
    private String revision;

    /**
     * Creates an instance of WorkbookProperties class.
     */
    public WorkbookProperties() {
    }

    /**
     * Get the displayName property: The user-defined name (display name) of the workbook.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The user-defined name (display name) of the workbook.
     * 
     * @param displayName the displayName value to set.
     * @return the WorkbookProperties object itself.
     */
    public WorkbookProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the serializedData property: Configuration of this particular workbook. Configuration data is a string
     * containing valid JSON.
     * 
     * @return the serializedData value.
     */
    public String serializedData() {
        return this.serializedData;
    }

    /**
     * Set the serializedData property: Configuration of this particular workbook. Configuration data is a string
     * containing valid JSON.
     * 
     * @param serializedData the serializedData value to set.
     * @return the WorkbookProperties object itself.
     */
    public WorkbookProperties withSerializedData(String serializedData) {
        this.serializedData = serializedData;
        return this;
    }

    /**
     * Get the version property: Workbook schema version format, like 'Notebook/1.0', which should match the workbook in
     * serializedData.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Workbook schema version format, like 'Notebook/1.0', which should match the workbook in
     * serializedData.
     * 
     * @param version the version value to set.
     * @return the WorkbookProperties object itself.
     */
    public WorkbookProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the timeModified property: Date and time in UTC of the last modification that was made to this workbook
     * definition.
     * 
     * @return the timeModified value.
     */
    public OffsetDateTime timeModified() {
        return this.timeModified;
    }

    /**
     * Get the category property: Workbook category, as defined by the user at creation time.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Set the category property: Workbook category, as defined by the user at creation time.
     * 
     * @param category the category value to set.
     * @return the WorkbookProperties object itself.
     */
    public WorkbookProperties withCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Get the tags property: Being deprecated, please use the other tags field.
     * 
     * @return the tags value.
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Being deprecated, please use the other tags field.
     * 
     * @param tags the tags value to set.
     * @return the WorkbookProperties object itself.
     */
    public WorkbookProperties withTags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the userId property: Unique user id of the specific user that owns this workbook.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Get the sourceId property: ResourceId for a source resource.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: ResourceId for a source resource.
     * 
     * @param sourceId the sourceId value to set.
     * @return the WorkbookProperties object itself.
     */
    public WorkbookProperties withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the storageUri property: The resourceId to the storage account when bring your own storage is used.
     * 
     * @return the storageUri value.
     */
    public String storageUri() {
        return this.storageUri;
    }

    /**
     * Set the storageUri property: The resourceId to the storage account when bring your own storage is used.
     * 
     * @param storageUri the storageUri value to set.
     * @return the WorkbookProperties object itself.
     */
    public WorkbookProperties withStorageUri(String storageUri) {
        this.storageUri = storageUri;
        return this;
    }

    /**
     * Get the description property: The description of the workbook.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the workbook.
     * 
     * @param description the description value to set.
     * @return the WorkbookProperties object itself.
     */
    public WorkbookProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the revision property: The unique revision id for this workbook definition.
     * 
     * @return the revision value.
     */
    public String revision() {
        return this.revision;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property displayName in model WorkbookProperties"));
        }
        if (serializedData() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serializedData in model WorkbookProperties"));
        }
        if (category() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property category in model WorkbookProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkbookProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("serializedData", this.serializedData);
        jsonWriter.writeStringField("category", this.category);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("sourceId", this.sourceId);
        jsonWriter.writeStringField("storageUri", this.storageUri);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkbookProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkbookProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkbookProperties.
     */
    public static WorkbookProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkbookProperties deserializedWorkbookProperties = new WorkbookProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedWorkbookProperties.displayName = reader.getString();
                } else if ("serializedData".equals(fieldName)) {
                    deserializedWorkbookProperties.serializedData = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedWorkbookProperties.category = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedWorkbookProperties.version = reader.getString();
                } else if ("timeModified".equals(fieldName)) {
                    deserializedWorkbookProperties.timeModified = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("tags".equals(fieldName)) {
                    List<String> tags = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkbookProperties.tags = tags;
                } else if ("userId".equals(fieldName)) {
                    deserializedWorkbookProperties.userId = reader.getString();
                } else if ("sourceId".equals(fieldName)) {
                    deserializedWorkbookProperties.sourceId = reader.getString();
                } else if ("storageUri".equals(fieldName)) {
                    deserializedWorkbookProperties.storageUri = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedWorkbookProperties.description = reader.getString();
                } else if ("revision".equals(fieldName)) {
                    deserializedWorkbookProperties.revision = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkbookProperties;
        });
    }
}
