// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An Application Insights component daily data volume cap status.
 */
@Immutable
public final class ApplicationInsightsComponentFeature
    implements JsonSerializable<ApplicationInsightsComponentFeature> {
    /*
     * The pricing feature name.
     */
    private String featureName;

    /*
     * The meter id used for the feature.
     */
    private String meterId;

    /*
     * The meter rate for the feature's meter.
     */
    private String meterRateFrequency;

    /*
     * Reserved, not used now.
     */
    private String resouceId;

    /*
     * Reserved, not used now.
     */
    private Boolean isHidden;

    /*
     * A list of Application Insights component feature capability.
     */
    private List<ApplicationInsightsComponentFeatureCapability> capabilities;

    /*
     * Display name of the feature.
     */
    private String title;

    /*
     * Whether can apply addon feature on to it.
     */
    private Boolean isMainFeature;

    /*
     * The add on features on main feature.
     */
    private String supportedAddonFeatures;

    /**
     * Creates an instance of ApplicationInsightsComponentFeature class.
     */
    public ApplicationInsightsComponentFeature() {
    }

    /**
     * Get the featureName property: The pricing feature name.
     * 
     * @return the featureName value.
     */
    public String featureName() {
        return this.featureName;
    }

    /**
     * Get the meterId property: The meter id used for the feature.
     * 
     * @return the meterId value.
     */
    public String meterId() {
        return this.meterId;
    }

    /**
     * Get the meterRateFrequency property: The meter rate for the feature's meter.
     * 
     * @return the meterRateFrequency value.
     */
    public String meterRateFrequency() {
        return this.meterRateFrequency;
    }

    /**
     * Get the resouceId property: Reserved, not used now.
     * 
     * @return the resouceId value.
     */
    public String resouceId() {
        return this.resouceId;
    }

    /**
     * Get the isHidden property: Reserved, not used now.
     * 
     * @return the isHidden value.
     */
    public Boolean isHidden() {
        return this.isHidden;
    }

    /**
     * Get the capabilities property: A list of Application Insights component feature capability.
     * 
     * @return the capabilities value.
     */
    public List<ApplicationInsightsComponentFeatureCapability> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the title property: Display name of the feature.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the isMainFeature property: Whether can apply addon feature on to it.
     * 
     * @return the isMainFeature value.
     */
    public Boolean isMainFeature() {
        return this.isMainFeature;
    }

    /**
     * Get the supportedAddonFeatures property: The add on features on main feature.
     * 
     * @return the supportedAddonFeatures value.
     */
    public String supportedAddonFeatures() {
        return this.supportedAddonFeatures;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationInsightsComponentFeature from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationInsightsComponentFeature if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationInsightsComponentFeature.
     */
    public static ApplicationInsightsComponentFeature fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationInsightsComponentFeature deserializedApplicationInsightsComponentFeature
                = new ApplicationInsightsComponentFeature();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("FeatureName".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeature.featureName = reader.getString();
                } else if ("MeterId".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeature.meterId = reader.getString();
                } else if ("MeterRateFrequency".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeature.meterRateFrequency = reader.getString();
                } else if ("ResouceId".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeature.resouceId = reader.getString();
                } else if ("IsHidden".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeature.isHidden
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("Capabilities".equals(fieldName)) {
                    List<ApplicationInsightsComponentFeatureCapability> capabilities
                        = reader.readArray(reader1 -> ApplicationInsightsComponentFeatureCapability.fromJson(reader1));
                    deserializedApplicationInsightsComponentFeature.capabilities = capabilities;
                } else if ("Title".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeature.title = reader.getString();
                } else if ("IsMainFeature".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeature.isMainFeature
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("SupportedAddonFeatures".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeature.supportedAddonFeatures = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationInsightsComponentFeature;
        });
    }
}
