// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The collection of request properties.
 */
@Fluent
public final class WebTestPropertiesRequest implements JsonSerializable<WebTestPropertiesRequest> {
    /*
     * Url location to test.
     */
    private String requestUrl;

    /*
     * List of headers and their values to add to the WebTest call.
     */
    private List<HeaderField> headers;

    /*
     * Http verb to use for this web test.
     */
    private String httpVerb;

    /*
     * Base64 encoded string body to send with this web test.
     */
    private String requestBody;

    /*
     * Parse Dependent request for this WebTest.
     */
    private Boolean parseDependentRequests;

    /*
     * Follow redirects for this web test.
     */
    private Boolean followRedirects;

    /**
     * Creates an instance of WebTestPropertiesRequest class.
     */
    public WebTestPropertiesRequest() {
    }

    /**
     * Get the requestUrl property: Url location to test.
     * 
     * @return the requestUrl value.
     */
    public String requestUrl() {
        return this.requestUrl;
    }

    /**
     * Set the requestUrl property: Url location to test.
     * 
     * @param requestUrl the requestUrl value to set.
     * @return the WebTestPropertiesRequest object itself.
     */
    public WebTestPropertiesRequest withRequestUrl(String requestUrl) {
        this.requestUrl = requestUrl;
        return this;
    }

    /**
     * Get the headers property: List of headers and their values to add to the WebTest call.
     * 
     * @return the headers value.
     */
    public List<HeaderField> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: List of headers and their values to add to the WebTest call.
     * 
     * @param headers the headers value to set.
     * @return the WebTestPropertiesRequest object itself.
     */
    public WebTestPropertiesRequest withHeaders(List<HeaderField> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the httpVerb property: Http verb to use for this web test.
     * 
     * @return the httpVerb value.
     */
    public String httpVerb() {
        return this.httpVerb;
    }

    /**
     * Set the httpVerb property: Http verb to use for this web test.
     * 
     * @param httpVerb the httpVerb value to set.
     * @return the WebTestPropertiesRequest object itself.
     */
    public WebTestPropertiesRequest withHttpVerb(String httpVerb) {
        this.httpVerb = httpVerb;
        return this;
    }

    /**
     * Get the requestBody property: Base64 encoded string body to send with this web test.
     * 
     * @return the requestBody value.
     */
    public String requestBody() {
        return this.requestBody;
    }

    /**
     * Set the requestBody property: Base64 encoded string body to send with this web test.
     * 
     * @param requestBody the requestBody value to set.
     * @return the WebTestPropertiesRequest object itself.
     */
    public WebTestPropertiesRequest withRequestBody(String requestBody) {
        this.requestBody = requestBody;
        return this;
    }

    /**
     * Get the parseDependentRequests property: Parse Dependent request for this WebTest.
     * 
     * @return the parseDependentRequests value.
     */
    public Boolean parseDependentRequests() {
        return this.parseDependentRequests;
    }

    /**
     * Set the parseDependentRequests property: Parse Dependent request for this WebTest.
     * 
     * @param parseDependentRequests the parseDependentRequests value to set.
     * @return the WebTestPropertiesRequest object itself.
     */
    public WebTestPropertiesRequest withParseDependentRequests(Boolean parseDependentRequests) {
        this.parseDependentRequests = parseDependentRequests;
        return this;
    }

    /**
     * Get the followRedirects property: Follow redirects for this web test.
     * 
     * @return the followRedirects value.
     */
    public Boolean followRedirects() {
        return this.followRedirects;
    }

    /**
     * Set the followRedirects property: Follow redirects for this web test.
     * 
     * @param followRedirects the followRedirects value to set.
     * @return the WebTestPropertiesRequest object itself.
     */
    public WebTestPropertiesRequest withFollowRedirects(Boolean followRedirects) {
        this.followRedirects = followRedirects;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (headers() != null) {
            headers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("RequestUrl", this.requestUrl);
        jsonWriter.writeArrayField("Headers", this.headers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("HttpVerb", this.httpVerb);
        jsonWriter.writeStringField("RequestBody", this.requestBody);
        jsonWriter.writeBooleanField("ParseDependentRequests", this.parseDependentRequests);
        jsonWriter.writeBooleanField("FollowRedirects", this.followRedirects);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebTestPropertiesRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebTestPropertiesRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebTestPropertiesRequest.
     */
    public static WebTestPropertiesRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebTestPropertiesRequest deserializedWebTestPropertiesRequest = new WebTestPropertiesRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("RequestUrl".equals(fieldName)) {
                    deserializedWebTestPropertiesRequest.requestUrl = reader.getString();
                } else if ("Headers".equals(fieldName)) {
                    List<HeaderField> headers = reader.readArray(reader1 -> HeaderField.fromJson(reader1));
                    deserializedWebTestPropertiesRequest.headers = headers;
                } else if ("HttpVerb".equals(fieldName)) {
                    deserializedWebTestPropertiesRequest.httpVerb = reader.getString();
                } else if ("RequestBody".equals(fieldName)) {
                    deserializedWebTestPropertiesRequest.requestBody = reader.getString();
                } else if ("ParseDependentRequests".equals(fieldName)) {
                    deserializedWebTestPropertiesRequest.parseDependentRequests
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("FollowRedirects".equals(fieldName)) {
                    deserializedWebTestPropertiesRequest.followRedirects = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebTestPropertiesRequest;
        });
    }
}
