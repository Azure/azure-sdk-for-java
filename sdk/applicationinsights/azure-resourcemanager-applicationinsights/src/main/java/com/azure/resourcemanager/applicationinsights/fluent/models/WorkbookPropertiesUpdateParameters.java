// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties that contain a workbook for PATCH operation.
 */
@Fluent
public final class WorkbookPropertiesUpdateParameters implements JsonSerializable<WorkbookPropertiesUpdateParameters> {
    /*
     * The user-defined name (display name) of the workbook.
     */
    private String displayName;

    /*
     * Configuration of this particular workbook. Configuration data is a string containing valid JSON
     */
    private String serializedData;

    /*
     * Workbook category, as defined by the user at creation time.
     */
    private String category;

    /*
     * A list of 0 or more tags that are associated with this workbook definition
     */
    private List<String> tags;

    /*
     * The description of the workbook.
     */
    private String description;

    /*
     * The unique revision id for this workbook definition
     */
    private String revision;

    /**
     * Creates an instance of WorkbookPropertiesUpdateParameters class.
     */
    public WorkbookPropertiesUpdateParameters() {
    }

    /**
     * Get the displayName property: The user-defined name (display name) of the workbook.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The user-defined name (display name) of the workbook.
     * 
     * @param displayName the displayName value to set.
     * @return the WorkbookPropertiesUpdateParameters object itself.
     */
    public WorkbookPropertiesUpdateParameters withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the serializedData property: Configuration of this particular workbook. Configuration data is a string
     * containing valid JSON.
     * 
     * @return the serializedData value.
     */
    public String serializedData() {
        return this.serializedData;
    }

    /**
     * Set the serializedData property: Configuration of this particular workbook. Configuration data is a string
     * containing valid JSON.
     * 
     * @param serializedData the serializedData value to set.
     * @return the WorkbookPropertiesUpdateParameters object itself.
     */
    public WorkbookPropertiesUpdateParameters withSerializedData(String serializedData) {
        this.serializedData = serializedData;
        return this;
    }

    /**
     * Get the category property: Workbook category, as defined by the user at creation time.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Set the category property: Workbook category, as defined by the user at creation time.
     * 
     * @param category the category value to set.
     * @return the WorkbookPropertiesUpdateParameters object itself.
     */
    public WorkbookPropertiesUpdateParameters withCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Get the tags property: A list of 0 or more tags that are associated with this workbook definition.
     * 
     * @return the tags value.
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: A list of 0 or more tags that are associated with this workbook definition.
     * 
     * @param tags the tags value to set.
     * @return the WorkbookPropertiesUpdateParameters object itself.
     */
    public WorkbookPropertiesUpdateParameters withTags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the description property: The description of the workbook.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the workbook.
     * 
     * @param description the description value to set.
     * @return the WorkbookPropertiesUpdateParameters object itself.
     */
    public WorkbookPropertiesUpdateParameters withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the revision property: The unique revision id for this workbook definition.
     * 
     * @return the revision value.
     */
    public String revision() {
        return this.revision;
    }

    /**
     * Set the revision property: The unique revision id for this workbook definition.
     * 
     * @param revision the revision value to set.
     * @return the WorkbookPropertiesUpdateParameters object itself.
     */
    public WorkbookPropertiesUpdateParameters withRevision(String revision) {
        this.revision = revision;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("serializedData", this.serializedData);
        jsonWriter.writeStringField("category", this.category);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("revision", this.revision);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkbookPropertiesUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkbookPropertiesUpdateParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkbookPropertiesUpdateParameters.
     */
    public static WorkbookPropertiesUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkbookPropertiesUpdateParameters deserializedWorkbookPropertiesUpdateParameters
                = new WorkbookPropertiesUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedWorkbookPropertiesUpdateParameters.displayName = reader.getString();
                } else if ("serializedData".equals(fieldName)) {
                    deserializedWorkbookPropertiesUpdateParameters.serializedData = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedWorkbookPropertiesUpdateParameters.category = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<String> tags = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkbookPropertiesUpdateParameters.tags = tags;
                } else if ("description".equals(fieldName)) {
                    deserializedWorkbookPropertiesUpdateParameters.description = reader.getString();
                } else if ("revision".equals(fieldName)) {
                    deserializedWorkbookPropertiesUpdateParameters.revision = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkbookPropertiesUpdateParameters;
        });
    }
}
