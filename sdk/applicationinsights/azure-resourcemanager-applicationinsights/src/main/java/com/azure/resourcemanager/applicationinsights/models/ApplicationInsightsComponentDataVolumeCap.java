// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Application Insights component daily data volume cap.
 */
@Fluent
public final class ApplicationInsightsComponentDataVolumeCap
    implements JsonSerializable<ApplicationInsightsComponentDataVolumeCap> {
    /*
     * Daily data volume cap in GB.
     */
    private Float cap;

    /*
     * Daily data volume cap UTC reset hour.
     */
    private Integer resetTime;

    /*
     * Reserved, not used for now.
     */
    private Integer warningThreshold;

    /*
     * Reserved, not used for now.
     */
    private Boolean stopSendNotificationWhenHitThreshold;

    /*
     * Do not send a notification email when the daily data volume cap is met.
     */
    private Boolean stopSendNotificationWhenHitCap;

    /*
     * Maximum daily data volume cap that the user can set for this component.
     */
    private Float maxHistoryCap;

    /**
     * Creates an instance of ApplicationInsightsComponentDataVolumeCap class.
     */
    public ApplicationInsightsComponentDataVolumeCap() {
    }

    /**
     * Get the cap property: Daily data volume cap in GB.
     * 
     * @return the cap value.
     */
    public Float cap() {
        return this.cap;
    }

    /**
     * Set the cap property: Daily data volume cap in GB.
     * 
     * @param cap the cap value to set.
     * @return the ApplicationInsightsComponentDataVolumeCap object itself.
     */
    public ApplicationInsightsComponentDataVolumeCap withCap(Float cap) {
        this.cap = cap;
        return this;
    }

    /**
     * Get the resetTime property: Daily data volume cap UTC reset hour.
     * 
     * @return the resetTime value.
     */
    public Integer resetTime() {
        return this.resetTime;
    }

    /**
     * Get the warningThreshold property: Reserved, not used for now.
     * 
     * @return the warningThreshold value.
     */
    public Integer warningThreshold() {
        return this.warningThreshold;
    }

    /**
     * Set the warningThreshold property: Reserved, not used for now.
     * 
     * @param warningThreshold the warningThreshold value to set.
     * @return the ApplicationInsightsComponentDataVolumeCap object itself.
     */
    public ApplicationInsightsComponentDataVolumeCap withWarningThreshold(Integer warningThreshold) {
        this.warningThreshold = warningThreshold;
        return this;
    }

    /**
     * Get the stopSendNotificationWhenHitThreshold property: Reserved, not used for now.
     * 
     * @return the stopSendNotificationWhenHitThreshold value.
     */
    public Boolean stopSendNotificationWhenHitThreshold() {
        return this.stopSendNotificationWhenHitThreshold;
    }

    /**
     * Set the stopSendNotificationWhenHitThreshold property: Reserved, not used for now.
     * 
     * @param stopSendNotificationWhenHitThreshold the stopSendNotificationWhenHitThreshold value to set.
     * @return the ApplicationInsightsComponentDataVolumeCap object itself.
     */
    public ApplicationInsightsComponentDataVolumeCap
        withStopSendNotificationWhenHitThreshold(Boolean stopSendNotificationWhenHitThreshold) {
        this.stopSendNotificationWhenHitThreshold = stopSendNotificationWhenHitThreshold;
        return this;
    }

    /**
     * Get the stopSendNotificationWhenHitCap property: Do not send a notification email when the daily data volume cap
     * is met.
     * 
     * @return the stopSendNotificationWhenHitCap value.
     */
    public Boolean stopSendNotificationWhenHitCap() {
        return this.stopSendNotificationWhenHitCap;
    }

    /**
     * Set the stopSendNotificationWhenHitCap property: Do not send a notification email when the daily data volume cap
     * is met.
     * 
     * @param stopSendNotificationWhenHitCap the stopSendNotificationWhenHitCap value to set.
     * @return the ApplicationInsightsComponentDataVolumeCap object itself.
     */
    public ApplicationInsightsComponentDataVolumeCap
        withStopSendNotificationWhenHitCap(Boolean stopSendNotificationWhenHitCap) {
        this.stopSendNotificationWhenHitCap = stopSendNotificationWhenHitCap;
        return this;
    }

    /**
     * Get the maxHistoryCap property: Maximum daily data volume cap that the user can set for this component.
     * 
     * @return the maxHistoryCap value.
     */
    public Float maxHistoryCap() {
        return this.maxHistoryCap;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("Cap", this.cap);
        jsonWriter.writeNumberField("WarningThreshold", this.warningThreshold);
        jsonWriter.writeBooleanField("StopSendNotificationWhenHitThreshold", this.stopSendNotificationWhenHitThreshold);
        jsonWriter.writeBooleanField("StopSendNotificationWhenHitCap", this.stopSendNotificationWhenHitCap);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationInsightsComponentDataVolumeCap from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationInsightsComponentDataVolumeCap if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationInsightsComponentDataVolumeCap.
     */
    public static ApplicationInsightsComponentDataVolumeCap fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationInsightsComponentDataVolumeCap deserializedApplicationInsightsComponentDataVolumeCap
                = new ApplicationInsightsComponentDataVolumeCap();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("Cap".equals(fieldName)) {
                    deserializedApplicationInsightsComponentDataVolumeCap.cap
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("ResetTime".equals(fieldName)) {
                    deserializedApplicationInsightsComponentDataVolumeCap.resetTime
                        = reader.getNullable(JsonReader::getInt);
                } else if ("WarningThreshold".equals(fieldName)) {
                    deserializedApplicationInsightsComponentDataVolumeCap.warningThreshold
                        = reader.getNullable(JsonReader::getInt);
                } else if ("StopSendNotificationWhenHitThreshold".equals(fieldName)) {
                    deserializedApplicationInsightsComponentDataVolumeCap.stopSendNotificationWhenHitThreshold
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("StopSendNotificationWhenHitCap".equals(fieldName)) {
                    deserializedApplicationInsightsComponentDataVolumeCap.stopSendNotificationWhenHitCap
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("MaxHistoryCap".equals(fieldName)) {
                    deserializedApplicationInsightsComponentDataVolumeCap.maxHistoryCap
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationInsightsComponentDataVolumeCap;
        });
    }
}
