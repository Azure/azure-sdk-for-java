// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Application Insights component feature capabilities.
 */
@Immutable
public final class ApplicationInsightsComponentFeatureCapabilitiesInner
    implements JsonSerializable<ApplicationInsightsComponentFeatureCapabilitiesInner> {
    /*
     * Whether allow to use continuous export feature.
     */
    private Boolean supportExportData;

    /*
     * Reserved, not used now.
     */
    private String burstThrottlePolicy;

    /*
     * Reserved, not used now.
     */
    private String metadataClass;

    /*
     * Reserved, not used now.
     */
    private Boolean liveStreamMetrics;

    /*
     * Reserved, not used now.
     */
    private Boolean applicationMap;

    /*
     * Whether allow to use work item integration feature.
     */
    private Boolean workItemIntegration;

    /*
     * Reserved, not used now.
     */
    private Boolean powerBIIntegration;

    /*
     * Reserved, not used now.
     */
    private Boolean openSchema;

    /*
     * Reserved, not used now.
     */
    private Boolean proactiveDetection;

    /*
     * Reserved, not used now.
     */
    private Boolean analyticsIntegration;

    /*
     * Whether allow to use multiple steps web test feature.
     */
    private Boolean multipleStepWebTest;

    /*
     * Reserved, not used now.
     */
    private String apiAccessLevel;

    /*
     * The application insights component used tracking type.
     */
    private String trackingType;

    /*
     * Daily data volume cap in GB.
     */
    private Float dailyCap;

    /*
     * Daily data volume cap UTC reset hour.
     */
    private Float dailyCapResetTime;

    /*
     * Reserved, not used now.
     */
    private Float throttleRate;

    /**
     * Creates an instance of ApplicationInsightsComponentFeatureCapabilitiesInner class.
     */
    public ApplicationInsightsComponentFeatureCapabilitiesInner() {
    }

    /**
     * Get the supportExportData property: Whether allow to use continuous export feature.
     * 
     * @return the supportExportData value.
     */
    public Boolean supportExportData() {
        return this.supportExportData;
    }

    /**
     * Get the burstThrottlePolicy property: Reserved, not used now.
     * 
     * @return the burstThrottlePolicy value.
     */
    public String burstThrottlePolicy() {
        return this.burstThrottlePolicy;
    }

    /**
     * Get the metadataClass property: Reserved, not used now.
     * 
     * @return the metadataClass value.
     */
    public String metadataClass() {
        return this.metadataClass;
    }

    /**
     * Get the liveStreamMetrics property: Reserved, not used now.
     * 
     * @return the liveStreamMetrics value.
     */
    public Boolean liveStreamMetrics() {
        return this.liveStreamMetrics;
    }

    /**
     * Get the applicationMap property: Reserved, not used now.
     * 
     * @return the applicationMap value.
     */
    public Boolean applicationMap() {
        return this.applicationMap;
    }

    /**
     * Get the workItemIntegration property: Whether allow to use work item integration feature.
     * 
     * @return the workItemIntegration value.
     */
    public Boolean workItemIntegration() {
        return this.workItemIntegration;
    }

    /**
     * Get the powerBIIntegration property: Reserved, not used now.
     * 
     * @return the powerBIIntegration value.
     */
    public Boolean powerBIIntegration() {
        return this.powerBIIntegration;
    }

    /**
     * Get the openSchema property: Reserved, not used now.
     * 
     * @return the openSchema value.
     */
    public Boolean openSchema() {
        return this.openSchema;
    }

    /**
     * Get the proactiveDetection property: Reserved, not used now.
     * 
     * @return the proactiveDetection value.
     */
    public Boolean proactiveDetection() {
        return this.proactiveDetection;
    }

    /**
     * Get the analyticsIntegration property: Reserved, not used now.
     * 
     * @return the analyticsIntegration value.
     */
    public Boolean analyticsIntegration() {
        return this.analyticsIntegration;
    }

    /**
     * Get the multipleStepWebTest property: Whether allow to use multiple steps web test feature.
     * 
     * @return the multipleStepWebTest value.
     */
    public Boolean multipleStepWebTest() {
        return this.multipleStepWebTest;
    }

    /**
     * Get the apiAccessLevel property: Reserved, not used now.
     * 
     * @return the apiAccessLevel value.
     */
    public String apiAccessLevel() {
        return this.apiAccessLevel;
    }

    /**
     * Get the trackingType property: The application insights component used tracking type.
     * 
     * @return the trackingType value.
     */
    public String trackingType() {
        return this.trackingType;
    }

    /**
     * Get the dailyCap property: Daily data volume cap in GB.
     * 
     * @return the dailyCap value.
     */
    public Float dailyCap() {
        return this.dailyCap;
    }

    /**
     * Get the dailyCapResetTime property: Daily data volume cap UTC reset hour.
     * 
     * @return the dailyCapResetTime value.
     */
    public Float dailyCapResetTime() {
        return this.dailyCapResetTime;
    }

    /**
     * Get the throttleRate property: Reserved, not used now.
     * 
     * @return the throttleRate value.
     */
    public Float throttleRate() {
        return this.throttleRate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationInsightsComponentFeatureCapabilitiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationInsightsComponentFeatureCapabilitiesInner if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationInsightsComponentFeatureCapabilitiesInner.
     */
    public static ApplicationInsightsComponentFeatureCapabilitiesInner fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationInsightsComponentFeatureCapabilitiesInner deserializedApplicationInsightsComponentFeatureCapabilitiesInner
                = new ApplicationInsightsComponentFeatureCapabilitiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("SupportExportData".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.supportExportData
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("BurstThrottlePolicy".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.burstThrottlePolicy
                        = reader.getString();
                } else if ("MetadataClass".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.metadataClass = reader.getString();
                } else if ("LiveStreamMetrics".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.liveStreamMetrics
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("ApplicationMap".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.applicationMap
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("WorkItemIntegration".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.workItemIntegration
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("PowerBIIntegration".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.powerBIIntegration
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("OpenSchema".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.openSchema
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("ProactiveDetection".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.proactiveDetection
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("AnalyticsIntegration".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.analyticsIntegration
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("MultipleStepWebTest".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.multipleStepWebTest
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("ApiAccessLevel".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.apiAccessLevel
                        = reader.getString();
                } else if ("TrackingType".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.trackingType = reader.getString();
                } else if ("DailyCap".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.dailyCap
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("DailyCapResetTime".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.dailyCapResetTime
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("ThrottleRate".equals(fieldName)) {
                    deserializedApplicationInsightsComponentFeatureCapabilitiesInner.throttleRate
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationInsightsComponentFeatureCapabilitiesInner;
        });
    }
}
