// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.applicationinsights.models.WebTestGeolocation;
import com.azure.resourcemanager.applicationinsights.models.WebTestKind;
import com.azure.resourcemanager.applicationinsights.models.WebTestKindEnum;
import com.azure.resourcemanager.applicationinsights.models.WebTestPropertiesConfiguration;
import com.azure.resourcemanager.applicationinsights.models.WebTestPropertiesContentValidation;
import com.azure.resourcemanager.applicationinsights.models.WebTestPropertiesRequest;
import com.azure.resourcemanager.applicationinsights.models.WebtestsResource;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** An Application Insights WebTest definition. */
@JsonFlatten
@Fluent
public class WebTestInner extends WebtestsResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WebTestInner.class);

    /*
     * The kind of WebTest that this web test watches. Choices are ping and
     * multistep.
     */
    @JsonProperty(value = "kind")
    private WebTestKind kind;

    /*
     * Unique ID of this WebTest. This is typically the same value as the Name
     * field.
     */
    @JsonProperty(value = "properties.SyntheticMonitorId")
    private String syntheticMonitorId;

    /*
     * User defined name if this WebTest.
     */
    @JsonProperty(value = "properties.Name")
    private String webTestName;

    /*
     * User defined description for this WebTest.
     */
    @JsonProperty(value = "properties.Description")
    private String description;

    /*
     * Is the test actively being monitored.
     */
    @JsonProperty(value = "properties.Enabled")
    private Boolean enabled;

    /*
     * Interval in seconds between test runs for this WebTest. Default value is
     * 300.
     */
    @JsonProperty(value = "properties.Frequency")
    private Integer frequency;

    /*
     * Seconds until this WebTest will timeout and fail. Default value is 30.
     */
    @JsonProperty(value = "properties.Timeout")
    private Integer timeout;

    /*
     * The kind of web test this is, valid choices are ping, multistep, basic,
     * and standard.
     */
    @JsonProperty(value = "properties.Kind")
    private WebTestKindEnum webTestKind;

    /*
     * Allow for retries should this WebTest fail.
     */
    @JsonProperty(value = "properties.RetryEnabled")
    private Boolean retryEnabled;

    /*
     * A list of where to physically run the tests from to give global coverage
     * for accessibility of your application.
     */
    @JsonProperty(value = "properties.Locations")
    private List<WebTestGeolocation> locations;

    /*
     * An XML configuration specification for a WebTest.
     */
    @JsonProperty(value = "properties.Configuration")
    private WebTestPropertiesConfiguration configuration;

    /*
     * Current state of this component, whether or not is has been provisioned
     * within the resource group it is defined. Users cannot change this value
     * but are able to read from it. Values will include Succeeded, Deploying,
     * Canceled, and Failed.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The collection of request properties
     */
    @JsonProperty(value = "properties.Request")
    private WebTestPropertiesRequest request;

    /*
     * The collection of content validation properties
     */
    @JsonProperty(value = "properties.ContentValidation")
    private WebTestPropertiesContentValidation contentValidation;

    /*
     * Checks to see if the SSL cert is still valid.
     */
    @JsonProperty(value = "properties.SSLCheck")
    private Boolean sslCheck;

    /*
     * A number of days to check still remain before the the existing SSL cert
     * expires.
     */
    @JsonProperty(value = "properties.SSLCertRemainingLifetimeCheck")
    private Integer sslCertRemainingLifetimeCheck;

    /*
     * Validate that the WebTest returns the http status code provided.
     */
    @JsonProperty(value = "properties.ExpectedHttpStatusCode")
    private Integer expectedHttpStatusCode;

    /*
     * When set, validation will ignore the status code.
     */
    @JsonProperty(value = "properties.IgnoreHttpsStatusCode")
    private Boolean ignoreHttpsStatusCode;

    /**
     * Get the kind property: The kind of WebTest that this web test watches. Choices are ping and multistep.
     *
     * @return the kind value.
     */
    public WebTestKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of WebTest that this web test watches. Choices are ping and multistep.
     *
     * @param kind the kind value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withKind(WebTestKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the syntheticMonitorId property: Unique ID of this WebTest. This is typically the same value as the Name
     * field.
     *
     * @return the syntheticMonitorId value.
     */
    public String syntheticMonitorId() {
        return this.syntheticMonitorId;
    }

    /**
     * Set the syntheticMonitorId property: Unique ID of this WebTest. This is typically the same value as the Name
     * field.
     *
     * @param syntheticMonitorId the syntheticMonitorId value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withSyntheticMonitorId(String syntheticMonitorId) {
        this.syntheticMonitorId = syntheticMonitorId;
        return this;
    }

    /**
     * Get the webTestName property: User defined name if this WebTest.
     *
     * @return the webTestName value.
     */
    public String webTestName() {
        return this.webTestName;
    }

    /**
     * Set the webTestName property: User defined name if this WebTest.
     *
     * @param webTestName the webTestName value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withWebTestName(String webTestName) {
        this.webTestName = webTestName;
        return this;
    }

    /**
     * Get the description property: User defined description for this WebTest.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User defined description for this WebTest.
     *
     * @param description the description value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the enabled property: Is the test actively being monitored.
     *
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Is the test actively being monitored.
     *
     * @param enabled the enabled value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the frequency property: Interval in seconds between test runs for this WebTest. Default value is 300.
     *
     * @return the frequency value.
     */
    public Integer frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: Interval in seconds between test runs for this WebTest. Default value is 300.
     *
     * @param frequency the frequency value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withFrequency(Integer frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the timeout property: Seconds until this WebTest will timeout and fail. Default value is 30.
     *
     * @return the timeout value.
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: Seconds until this WebTest will timeout and fail. Default value is 30.
     *
     * @param timeout the timeout value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the webTestKind property: The kind of web test this is, valid choices are ping, multistep, basic, and
     * standard.
     *
     * @return the webTestKind value.
     */
    public WebTestKindEnum webTestKind() {
        return this.webTestKind;
    }

    /**
     * Set the webTestKind property: The kind of web test this is, valid choices are ping, multistep, basic, and
     * standard.
     *
     * @param webTestKind the webTestKind value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withWebTestKind(WebTestKindEnum webTestKind) {
        this.webTestKind = webTestKind;
        return this;
    }

    /**
     * Get the retryEnabled property: Allow for retries should this WebTest fail.
     *
     * @return the retryEnabled value.
     */
    public Boolean retryEnabled() {
        return this.retryEnabled;
    }

    /**
     * Set the retryEnabled property: Allow for retries should this WebTest fail.
     *
     * @param retryEnabled the retryEnabled value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withRetryEnabled(Boolean retryEnabled) {
        this.retryEnabled = retryEnabled;
        return this;
    }

    /**
     * Get the locations property: A list of where to physically run the tests from to give global coverage for
     * accessibility of your application.
     *
     * @return the locations value.
     */
    public List<WebTestGeolocation> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: A list of where to physically run the tests from to give global coverage for
     * accessibility of your application.
     *
     * @param locations the locations value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withLocations(List<WebTestGeolocation> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the configuration property: An XML configuration specification for a WebTest.
     *
     * @return the configuration value.
     */
    public WebTestPropertiesConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: An XML configuration specification for a WebTest.
     *
     * @param configuration the configuration value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withConfiguration(WebTestPropertiesConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the provisioningState property: Current state of this component, whether or not is has been provisioned
     * within the resource group it is defined. Users cannot change this value but are able to read from it. Values will
     * include Succeeded, Deploying, Canceled, and Failed.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the request property: The collection of request properties.
     *
     * @return the request value.
     */
    public WebTestPropertiesRequest request() {
        return this.request;
    }

    /**
     * Set the request property: The collection of request properties.
     *
     * @param request the request value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withRequest(WebTestPropertiesRequest request) {
        this.request = request;
        return this;
    }

    /**
     * Get the contentValidation property: The collection of content validation properties.
     *
     * @return the contentValidation value.
     */
    public WebTestPropertiesContentValidation contentValidation() {
        return this.contentValidation;
    }

    /**
     * Set the contentValidation property: The collection of content validation properties.
     *
     * @param contentValidation the contentValidation value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withContentValidation(WebTestPropertiesContentValidation contentValidation) {
        this.contentValidation = contentValidation;
        return this;
    }

    /**
     * Get the sslCheck property: Checks to see if the SSL cert is still valid.
     *
     * @return the sslCheck value.
     */
    public Boolean sslCheck() {
        return this.sslCheck;
    }

    /**
     * Set the sslCheck property: Checks to see if the SSL cert is still valid.
     *
     * @param sslCheck the sslCheck value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withSslCheck(Boolean sslCheck) {
        this.sslCheck = sslCheck;
        return this;
    }

    /**
     * Get the sslCertRemainingLifetimeCheck property: A number of days to check still remain before the the existing
     * SSL cert expires.
     *
     * @return the sslCertRemainingLifetimeCheck value.
     */
    public Integer sslCertRemainingLifetimeCheck() {
        return this.sslCertRemainingLifetimeCheck;
    }

    /**
     * Set the sslCertRemainingLifetimeCheck property: A number of days to check still remain before the the existing
     * SSL cert expires.
     *
     * @param sslCertRemainingLifetimeCheck the sslCertRemainingLifetimeCheck value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withSslCertRemainingLifetimeCheck(Integer sslCertRemainingLifetimeCheck) {
        this.sslCertRemainingLifetimeCheck = sslCertRemainingLifetimeCheck;
        return this;
    }

    /**
     * Get the expectedHttpStatusCode property: Validate that the WebTest returns the http status code provided.
     *
     * @return the expectedHttpStatusCode value.
     */
    public Integer expectedHttpStatusCode() {
        return this.expectedHttpStatusCode;
    }

    /**
     * Set the expectedHttpStatusCode property: Validate that the WebTest returns the http status code provided.
     *
     * @param expectedHttpStatusCode the expectedHttpStatusCode value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withExpectedHttpStatusCode(Integer expectedHttpStatusCode) {
        this.expectedHttpStatusCode = expectedHttpStatusCode;
        return this;
    }

    /**
     * Get the ignoreHttpsStatusCode property: When set, validation will ignore the status code.
     *
     * @return the ignoreHttpsStatusCode value.
     */
    public Boolean ignoreHttpsStatusCode() {
        return this.ignoreHttpsStatusCode;
    }

    /**
     * Set the ignoreHttpsStatusCode property: When set, validation will ignore the status code.
     *
     * @param ignoreHttpsStatusCode the ignoreHttpsStatusCode value to set.
     * @return the WebTestInner object itself.
     */
    public WebTestInner withIgnoreHttpsStatusCode(Boolean ignoreHttpsStatusCode) {
        this.ignoreHttpsStatusCode = ignoreHttpsStatusCode;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WebTestInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WebTestInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (locations() != null) {
            locations().forEach(e -> e.validate());
        }
        if (configuration() != null) {
            configuration().validate();
        }
        if (request() != null) {
            request().validate();
        }
        if (contentValidation() != null) {
            contentValidation().validate();
        }
    }
}
