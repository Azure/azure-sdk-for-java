// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Application Insights component linked storage account.
 */
@Fluent
public final class LinkedStorageAccountsProperties implements JsonSerializable<LinkedStorageAccountsProperties> {
    /*
     * Linked storage account resource ID
     */
    private String linkedStorageAccount;

    /**
     * Creates an instance of LinkedStorageAccountsProperties class.
     */
    public LinkedStorageAccountsProperties() {
    }

    /**
     * Get the linkedStorageAccount property: Linked storage account resource ID.
     * 
     * @return the linkedStorageAccount value.
     */
    public String linkedStorageAccount() {
        return this.linkedStorageAccount;
    }

    /**
     * Set the linkedStorageAccount property: Linked storage account resource ID.
     * 
     * @param linkedStorageAccount the linkedStorageAccount value to set.
     * @return the LinkedStorageAccountsProperties object itself.
     */
    public LinkedStorageAccountsProperties withLinkedStorageAccount(String linkedStorageAccount) {
        this.linkedStorageAccount = linkedStorageAccount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("linkedStorageAccount", this.linkedStorageAccount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkedStorageAccountsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkedStorageAccountsProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkedStorageAccountsProperties.
     */
    public static LinkedStorageAccountsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkedStorageAccountsProperties deserializedLinkedStorageAccountsProperties
                = new LinkedStorageAccountsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkedStorageAccount".equals(fieldName)) {
                    deserializedLinkedStorageAccountsProperties.linkedStorageAccount = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkedStorageAccountsProperties;
        });
    }
}
