// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.applicationinsights.models.WebTestGeolocation;
import com.azure.resourcemanager.applicationinsights.models.WebTestKind;
import com.azure.resourcemanager.applicationinsights.models.WebTestPropertiesConfiguration;
import com.azure.resourcemanager.applicationinsights.models.WebTestPropertiesRequest;
import com.azure.resourcemanager.applicationinsights.models.WebTestPropertiesValidationRules;
import java.io.IOException;
import java.util.List;

/**
 * Metadata describing a web test for an Azure resource.
 */
@Fluent
public final class WebTestProperties implements JsonSerializable<WebTestProperties> {
    /*
     * Unique ID of this WebTest. This is typically the same value as the Name field.
     */
    private String syntheticMonitorId;

    /*
     * User defined name if this WebTest.
     */
    private String webTestName;

    /*
     * User defined description for this WebTest.
     */
    private String description;

    /*
     * Is the test actively being monitored.
     */
    private Boolean enabled;

    /*
     * Interval in seconds between test runs for this WebTest. Default value is 300.
     */
    private Integer frequency;

    /*
     * Seconds until this WebTest will timeout and fail. Default value is 30.
     */
    private Integer timeout;

    /*
     * The kind of web test this is, valid choices are ping, multistep and standard.
     */
    private WebTestKind webTestKind;

    /*
     * Allow for retries should this WebTest fail.
     */
    private Boolean retryEnabled;

    /*
     * A list of where to physically run the tests from to give global coverage for accessibility of your application.
     */
    private List<WebTestGeolocation> locations;

    /*
     * An XML configuration specification for a WebTest.
     */
    private WebTestPropertiesConfiguration configuration;

    /*
     * Current state of this component, whether or not is has been provisioned within the resource group it is defined.
     * Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled,
     * and Failed.
     */
    private String provisioningState;

    /*
     * The collection of request properties
     */
    private WebTestPropertiesRequest request;

    /*
     * The collection of validation rule properties
     */
    private WebTestPropertiesValidationRules validationRules;

    /**
     * Creates an instance of WebTestProperties class.
     */
    public WebTestProperties() {
    }

    /**
     * Get the syntheticMonitorId property: Unique ID of this WebTest. This is typically the same value as the Name
     * field.
     * 
     * @return the syntheticMonitorId value.
     */
    public String syntheticMonitorId() {
        return this.syntheticMonitorId;
    }

    /**
     * Set the syntheticMonitorId property: Unique ID of this WebTest. This is typically the same value as the Name
     * field.
     * 
     * @param syntheticMonitorId the syntheticMonitorId value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withSyntheticMonitorId(String syntheticMonitorId) {
        this.syntheticMonitorId = syntheticMonitorId;
        return this;
    }

    /**
     * Get the webTestName property: User defined name if this WebTest.
     * 
     * @return the webTestName value.
     */
    public String webTestName() {
        return this.webTestName;
    }

    /**
     * Set the webTestName property: User defined name if this WebTest.
     * 
     * @param webTestName the webTestName value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withWebTestName(String webTestName) {
        this.webTestName = webTestName;
        return this;
    }

    /**
     * Get the description property: User defined description for this WebTest.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User defined description for this WebTest.
     * 
     * @param description the description value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the enabled property: Is the test actively being monitored.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Is the test actively being monitored.
     * 
     * @param enabled the enabled value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the frequency property: Interval in seconds between test runs for this WebTest. Default value is 300.
     * 
     * @return the frequency value.
     */
    public Integer frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: Interval in seconds between test runs for this WebTest. Default value is 300.
     * 
     * @param frequency the frequency value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withFrequency(Integer frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the timeout property: Seconds until this WebTest will timeout and fail. Default value is 30.
     * 
     * @return the timeout value.
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: Seconds until this WebTest will timeout and fail. Default value is 30.
     * 
     * @param timeout the timeout value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the webTestKind property: The kind of web test this is, valid choices are ping, multistep and standard.
     * 
     * @return the webTestKind value.
     */
    public WebTestKind webTestKind() {
        return this.webTestKind;
    }

    /**
     * Set the webTestKind property: The kind of web test this is, valid choices are ping, multistep and standard.
     * 
     * @param webTestKind the webTestKind value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withWebTestKind(WebTestKind webTestKind) {
        this.webTestKind = webTestKind;
        return this;
    }

    /**
     * Get the retryEnabled property: Allow for retries should this WebTest fail.
     * 
     * @return the retryEnabled value.
     */
    public Boolean retryEnabled() {
        return this.retryEnabled;
    }

    /**
     * Set the retryEnabled property: Allow for retries should this WebTest fail.
     * 
     * @param retryEnabled the retryEnabled value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withRetryEnabled(Boolean retryEnabled) {
        this.retryEnabled = retryEnabled;
        return this;
    }

    /**
     * Get the locations property: A list of where to physically run the tests from to give global coverage for
     * accessibility of your application.
     * 
     * @return the locations value.
     */
    public List<WebTestGeolocation> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: A list of where to physically run the tests from to give global coverage for
     * accessibility of your application.
     * 
     * @param locations the locations value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withLocations(List<WebTestGeolocation> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the configuration property: An XML configuration specification for a WebTest.
     * 
     * @return the configuration value.
     */
    public WebTestPropertiesConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: An XML configuration specification for a WebTest.
     * 
     * @param configuration the configuration value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withConfiguration(WebTestPropertiesConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the provisioningState property: Current state of this component, whether or not is has been provisioned
     * within the resource group it is defined. Users cannot change this value but are able to read from it. Values will
     * include Succeeded, Deploying, Canceled, and Failed.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the request property: The collection of request properties.
     * 
     * @return the request value.
     */
    public WebTestPropertiesRequest request() {
        return this.request;
    }

    /**
     * Set the request property: The collection of request properties.
     * 
     * @param request the request value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withRequest(WebTestPropertiesRequest request) {
        this.request = request;
        return this;
    }

    /**
     * Get the validationRules property: The collection of validation rule properties.
     * 
     * @return the validationRules value.
     */
    public WebTestPropertiesValidationRules validationRules() {
        return this.validationRules;
    }

    /**
     * Set the validationRules property: The collection of validation rule properties.
     * 
     * @param validationRules the validationRules value to set.
     * @return the WebTestProperties object itself.
     */
    public WebTestProperties withValidationRules(WebTestPropertiesValidationRules validationRules) {
        this.validationRules = validationRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (syntheticMonitorId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property syntheticMonitorId in model WebTestProperties"));
        }
        if (webTestName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property webTestName in model WebTestProperties"));
        }
        if (webTestKind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property webTestKind in model WebTestProperties"));
        }
        if (locations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property locations in model WebTestProperties"));
        } else {
            locations().forEach(e -> e.validate());
        }
        if (configuration() != null) {
            configuration().validate();
        }
        if (request() != null) {
            request().validate();
        }
        if (validationRules() != null) {
            validationRules().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebTestProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("SyntheticMonitorId", this.syntheticMonitorId);
        jsonWriter.writeStringField("Name", this.webTestName);
        jsonWriter.writeStringField("Kind", this.webTestKind == null ? null : this.webTestKind.toString());
        jsonWriter.writeArrayField("Locations", this.locations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("Description", this.description);
        jsonWriter.writeBooleanField("Enabled", this.enabled);
        jsonWriter.writeNumberField("Frequency", this.frequency);
        jsonWriter.writeNumberField("Timeout", this.timeout);
        jsonWriter.writeBooleanField("RetryEnabled", this.retryEnabled);
        jsonWriter.writeJsonField("Configuration", this.configuration);
        jsonWriter.writeJsonField("Request", this.request);
        jsonWriter.writeJsonField("ValidationRules", this.validationRules);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebTestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebTestProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebTestProperties.
     */
    public static WebTestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebTestProperties deserializedWebTestProperties = new WebTestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("SyntheticMonitorId".equals(fieldName)) {
                    deserializedWebTestProperties.syntheticMonitorId = reader.getString();
                } else if ("Name".equals(fieldName)) {
                    deserializedWebTestProperties.webTestName = reader.getString();
                } else if ("Kind".equals(fieldName)) {
                    deserializedWebTestProperties.webTestKind = WebTestKind.fromString(reader.getString());
                } else if ("Locations".equals(fieldName)) {
                    List<WebTestGeolocation> locations
                        = reader.readArray(reader1 -> WebTestGeolocation.fromJson(reader1));
                    deserializedWebTestProperties.locations = locations;
                } else if ("Description".equals(fieldName)) {
                    deserializedWebTestProperties.description = reader.getString();
                } else if ("Enabled".equals(fieldName)) {
                    deserializedWebTestProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("Frequency".equals(fieldName)) {
                    deserializedWebTestProperties.frequency = reader.getNullable(JsonReader::getInt);
                } else if ("Timeout".equals(fieldName)) {
                    deserializedWebTestProperties.timeout = reader.getNullable(JsonReader::getInt);
                } else if ("RetryEnabled".equals(fieldName)) {
                    deserializedWebTestProperties.retryEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("Configuration".equals(fieldName)) {
                    deserializedWebTestProperties.configuration = WebTestPropertiesConfiguration.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWebTestProperties.provisioningState = reader.getString();
                } else if ("Request".equals(fieldName)) {
                    deserializedWebTestProperties.request = WebTestPropertiesRequest.fromJson(reader);
                } else if ("ValidationRules".equals(fieldName)) {
                    deserializedWebTestProperties.validationRules = WebTestPropertiesValidationRules.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebTestProperties;
        });
    }
}
