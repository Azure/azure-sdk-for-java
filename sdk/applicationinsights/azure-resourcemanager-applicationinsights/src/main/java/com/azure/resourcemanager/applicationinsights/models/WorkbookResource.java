// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * An azure resource object.
 */
@Fluent
public class WorkbookResource extends Resource {
    /*
     * Identity used for BYOS
     */
    private WorkbookResourceIdentity identity;

    /*
     * The kind of workbook. Only valid value is shared.
     */
    private WorkbookSharedTypeKind kind;

    /*
     * Resource etag
     */
    private String etag;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of WorkbookResource class.
     */
    public WorkbookResource() {
    }

    /**
     * Get the identity property: Identity used for BYOS.
     * 
     * @return the identity value.
     */
    public WorkbookResourceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity used for BYOS.
     * 
     * @param identity the identity value to set.
     * @return the WorkbookResource object itself.
     */
    public WorkbookResource withIdentity(WorkbookResourceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the kind property: The kind of workbook. Only valid value is shared.
     * 
     * @return the kind value.
     */
    public WorkbookSharedTypeKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of workbook. Only valid value is shared.
     * 
     * @param kind the kind value to set.
     * @return the WorkbookResource object itself.
     */
    public WorkbookResource withKind(WorkbookSharedTypeKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the etag property: Resource etag.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: Resource etag.
     * 
     * @param etag the etag value to set.
     * @return the WorkbookResource object itself.
     */
    public WorkbookResource withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkbookResource withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkbookResource withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("etag", this.etag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkbookResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkbookResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkbookResource.
     */
    public static WorkbookResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkbookResource deserializedWorkbookResource = new WorkbookResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedWorkbookResource.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedWorkbookResource.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedWorkbookResource.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedWorkbookResource.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedWorkbookResource.withTags(tags);
                } else if ("identity".equals(fieldName)) {
                    deserializedWorkbookResource.identity = WorkbookResourceIdentity.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedWorkbookResource.kind = WorkbookSharedTypeKind.fromString(reader.getString());
                } else if ("etag".equals(fieldName)) {
                    deserializedWorkbookResource.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkbookResource;
        });
    }
}
