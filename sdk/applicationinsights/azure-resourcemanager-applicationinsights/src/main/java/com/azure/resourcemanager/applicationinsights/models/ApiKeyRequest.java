// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An Application Insights component API Key creation request definition.
 */
@Fluent
public final class ApiKeyRequest implements JsonSerializable<ApiKeyRequest> {
    /*
     * The name of the API Key.
     */
    private String name;

    /*
     * The read access rights of this API Key.
     */
    private List<String> linkedReadProperties;

    /*
     * The write access rights of this API Key.
     */
    private List<String> linkedWriteProperties;

    /**
     * Creates an instance of ApiKeyRequest class.
     */
    public ApiKeyRequest() {
    }

    /**
     * Get the name property: The name of the API Key.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the API Key.
     * 
     * @param name the name value to set.
     * @return the ApiKeyRequest object itself.
     */
    public ApiKeyRequest withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the linkedReadProperties property: The read access rights of this API Key.
     * 
     * @return the linkedReadProperties value.
     */
    public List<String> linkedReadProperties() {
        return this.linkedReadProperties;
    }

    /**
     * Set the linkedReadProperties property: The read access rights of this API Key.
     * 
     * @param linkedReadProperties the linkedReadProperties value to set.
     * @return the ApiKeyRequest object itself.
     */
    public ApiKeyRequest withLinkedReadProperties(List<String> linkedReadProperties) {
        this.linkedReadProperties = linkedReadProperties;
        return this;
    }

    /**
     * Get the linkedWriteProperties property: The write access rights of this API Key.
     * 
     * @return the linkedWriteProperties value.
     */
    public List<String> linkedWriteProperties() {
        return this.linkedWriteProperties;
    }

    /**
     * Set the linkedWriteProperties property: The write access rights of this API Key.
     * 
     * @param linkedWriteProperties the linkedWriteProperties value to set.
     * @return the ApiKeyRequest object itself.
     */
    public ApiKeyRequest withLinkedWriteProperties(List<String> linkedWriteProperties) {
        this.linkedWriteProperties = linkedWriteProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("linkedReadProperties", this.linkedReadProperties,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("linkedWriteProperties", this.linkedWriteProperties,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiKeyRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiKeyRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiKeyRequest.
     */
    public static ApiKeyRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiKeyRequest deserializedApiKeyRequest = new ApiKeyRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedApiKeyRequest.name = reader.getString();
                } else if ("linkedReadProperties".equals(fieldName)) {
                    List<String> linkedReadProperties = reader.readArray(reader1 -> reader1.getString());
                    deserializedApiKeyRequest.linkedReadProperties = linkedReadProperties;
                } else if ("linkedWriteProperties".equals(fieldName)) {
                    List<String> linkedWriteProperties = reader.readArray(reader1 -> reader1.getString());
                    deserializedApiKeyRequest.linkedWriteProperties = linkedWriteProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiKeyRequest;
        });
    }
}
