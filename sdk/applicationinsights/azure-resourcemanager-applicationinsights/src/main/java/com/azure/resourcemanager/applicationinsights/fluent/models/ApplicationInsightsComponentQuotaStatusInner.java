// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Application Insights component daily data volume cap status.
 */
@Immutable
public final class ApplicationInsightsComponentQuotaStatusInner
    implements JsonSerializable<ApplicationInsightsComponentQuotaStatusInner> {
    /*
     * The Application ID for the Application Insights component.
     */
    private String appId;

    /*
     * The daily data volume cap is met, and data ingestion will be stopped.
     */
    private Boolean shouldBeThrottled;

    /*
     * Date and time when the daily data volume cap will be reset, and data ingestion will resume.
     */
    private String expirationTime;

    /**
     * Creates an instance of ApplicationInsightsComponentQuotaStatusInner class.
     */
    public ApplicationInsightsComponentQuotaStatusInner() {
    }

    /**
     * Get the appId property: The Application ID for the Application Insights component.
     * 
     * @return the appId value.
     */
    public String appId() {
        return this.appId;
    }

    /**
     * Get the shouldBeThrottled property: The daily data volume cap is met, and data ingestion will be stopped.
     * 
     * @return the shouldBeThrottled value.
     */
    public Boolean shouldBeThrottled() {
        return this.shouldBeThrottled;
    }

    /**
     * Get the expirationTime property: Date and time when the daily data volume cap will be reset, and data ingestion
     * will resume.
     * 
     * @return the expirationTime value.
     */
    public String expirationTime() {
        return this.expirationTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationInsightsComponentQuotaStatusInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationInsightsComponentQuotaStatusInner if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationInsightsComponentQuotaStatusInner.
     */
    public static ApplicationInsightsComponentQuotaStatusInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationInsightsComponentQuotaStatusInner deserializedApplicationInsightsComponentQuotaStatusInner
                = new ApplicationInsightsComponentQuotaStatusInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("AppId".equals(fieldName)) {
                    deserializedApplicationInsightsComponentQuotaStatusInner.appId = reader.getString();
                } else if ("ShouldBeThrottled".equals(fieldName)) {
                    deserializedApplicationInsightsComponentQuotaStatusInner.shouldBeThrottled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("ExpirationTime".equals(fieldName)) {
                    deserializedApplicationInsightsComponentQuotaStatusInner.expirationTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationInsightsComponentQuotaStatusInner;
        });
    }
}
