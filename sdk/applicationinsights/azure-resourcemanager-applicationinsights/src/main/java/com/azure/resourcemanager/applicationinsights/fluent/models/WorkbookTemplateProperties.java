// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateGallery;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateLocalizedGallery;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Properties that contain a workbook template.
 */
@Fluent
public final class WorkbookTemplateProperties implements JsonSerializable<WorkbookTemplateProperties> {
    /*
     * Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.
     */
    private Integer priority;

    /*
     * Information about the author of the workbook template.
     */
    private String author;

    /*
     * Valid JSON object containing workbook template payload.
     */
    private Object templateData;

    /*
     * Workbook galleries supported by the template.
     */
    private List<WorkbookTemplateGallery> galleries;

    /*
     * Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.
     */
    private Map<String, List<WorkbookTemplateLocalizedGallery>> localized;

    /**
     * Creates an instance of WorkbookTemplateProperties class.
     */
    public WorkbookTemplateProperties() {
    }

    /**
     * Get the priority property: Priority of the template. Determines which template to open when a workbook gallery is
     * opened in viewer mode.
     * 
     * @return the priority value.
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Set the priority property: Priority of the template. Determines which template to open when a workbook gallery is
     * opened in viewer mode.
     * 
     * @param priority the priority value to set.
     * @return the WorkbookTemplateProperties object itself.
     */
    public WorkbookTemplateProperties withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the author property: Information about the author of the workbook template.
     * 
     * @return the author value.
     */
    public String author() {
        return this.author;
    }

    /**
     * Set the author property: Information about the author of the workbook template.
     * 
     * @param author the author value to set.
     * @return the WorkbookTemplateProperties object itself.
     */
    public WorkbookTemplateProperties withAuthor(String author) {
        this.author = author;
        return this;
    }

    /**
     * Get the templateData property: Valid JSON object containing workbook template payload.
     * 
     * @return the templateData value.
     */
    public Object templateData() {
        return this.templateData;
    }

    /**
     * Set the templateData property: Valid JSON object containing workbook template payload.
     * 
     * @param templateData the templateData value to set.
     * @return the WorkbookTemplateProperties object itself.
     */
    public WorkbookTemplateProperties withTemplateData(Object templateData) {
        this.templateData = templateData;
        return this;
    }

    /**
     * Get the galleries property: Workbook galleries supported by the template.
     * 
     * @return the galleries value.
     */
    public List<WorkbookTemplateGallery> galleries() {
        return this.galleries;
    }

    /**
     * Set the galleries property: Workbook galleries supported by the template.
     * 
     * @param galleries the galleries value to set.
     * @return the WorkbookTemplateProperties object itself.
     */
    public WorkbookTemplateProperties withGalleries(List<WorkbookTemplateGallery> galleries) {
        this.galleries = galleries;
        return this;
    }

    /**
     * Get the localized property: Key value pair of localized gallery. Each key is the locale code of languages
     * supported by the Azure portal.
     * 
     * @return the localized value.
     */
    public Map<String, List<WorkbookTemplateLocalizedGallery>> localized() {
        return this.localized;
    }

    /**
     * Set the localized property: Key value pair of localized gallery. Each key is the locale code of languages
     * supported by the Azure portal.
     * 
     * @param localized the localized value to set.
     * @return the WorkbookTemplateProperties object itself.
     */
    public WorkbookTemplateProperties withLocalized(Map<String, List<WorkbookTemplateLocalizedGallery>> localized) {
        this.localized = localized;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (templateData() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property templateData in model WorkbookTemplateProperties"));
        }
        if (galleries() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property galleries in model WorkbookTemplateProperties"));
        } else {
            galleries().forEach(e -> e.validate());
        }
        if (localized() != null) {
            localized().values().forEach(e -> {
                if (e != null) {
                    e.forEach(e1 -> e1.validate());
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkbookTemplateProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("templateData", this.templateData);
        jsonWriter.writeArrayField("galleries", this.galleries, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("priority", this.priority);
        jsonWriter.writeStringField("author", this.author);
        jsonWriter.writeMapField("localized", this.localized,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeJson(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkbookTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkbookTemplateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkbookTemplateProperties.
     */
    public static WorkbookTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkbookTemplateProperties deserializedWorkbookTemplateProperties = new WorkbookTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("templateData".equals(fieldName)) {
                    deserializedWorkbookTemplateProperties.templateData = reader.readUntyped();
                } else if ("galleries".equals(fieldName)) {
                    List<WorkbookTemplateGallery> galleries
                        = reader.readArray(reader1 -> WorkbookTemplateGallery.fromJson(reader1));
                    deserializedWorkbookTemplateProperties.galleries = galleries;
                } else if ("priority".equals(fieldName)) {
                    deserializedWorkbookTemplateProperties.priority = reader.getNullable(JsonReader::getInt);
                } else if ("author".equals(fieldName)) {
                    deserializedWorkbookTemplateProperties.author = reader.getString();
                } else if ("localized".equals(fieldName)) {
                    Map<String, List<WorkbookTemplateLocalizedGallery>> localized = reader.readMap(
                        reader1 -> reader1.readArray(reader2 -> WorkbookTemplateLocalizedGallery.fromJson(reader2)));
                    deserializedWorkbookTemplateProperties.localized = localized;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkbookTemplateProperties;
        });
    }
}
