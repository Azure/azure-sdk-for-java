// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplate;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkbookTemplatesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"priority\":341716623,\"author\":\"omfgbeglqgleohib\",\"templateData\":\"datatnluankrr\",\"galleries\":[{\"name\":\"eebtijvacvb\",\"category\":\"z\",\"type\":\"q\",\"order\":498607950,\"resourceType\":\"rnwxacevehjkuyxo\"},{\"name\":\"gaoql\",\"category\":\"aeylinm\",\"type\":\"vxirpghriypo\",\"order\":1656883941,\"resourceType\":\"lqhykprlpyz\"},{\"name\":\"ciqdsme\",\"category\":\"itdfuxtyasiib\",\"type\":\"ybnnustg\",\"order\":453653118,\"resourceType\":\"nmgixh\"},{\"name\":\"avmqfoudor\",\"category\":\"gyyprotwy\",\"type\":\"ndm\",\"order\":384308231,\"resourceType\":\"gcmjkavl\"}],\"localized\":{\"gqqihedsvqwt\":[{\"templateData\":\"dataftpmdtzfjltfv\",\"galleries\":[{},{},{}]},{\"templateData\":\"datajtotpvopvpbd\",\"galleries\":[{},{},{},{}]}]}},\"location\":\"mkyi\",\"tags\":{\"mcdzsufcohdxbz\":\"sihsgqcwdhohsd\"},\"id\":\"mcmuapc\",\"name\":\"hdbevwqqxeyskon\",\"type\":\"zinkfkbgbzbowxeq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApplicationInsightsManager manager =
            ApplicationInsightsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkbookTemplate response =
            manager
                .workbookTemplates()
                .getByResourceGroupWithResponse("hojeevy", "yhsgz", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("mkyi", response.location());
        Assertions.assertEquals("sihsgqcwdhohsd", response.tags().get("mcdzsufcohdxbz"));
        Assertions.assertEquals(341716623, response.priority());
        Assertions.assertEquals("omfgbeglqgleohib", response.author());
        Assertions.assertEquals("eebtijvacvb", response.galleries().get(0).name());
        Assertions.assertEquals("z", response.galleries().get(0).category());
        Assertions.assertEquals("q", response.galleries().get(0).type());
        Assertions.assertEquals(498607950, response.galleries().get(0).order());
        Assertions.assertEquals("rnwxacevehjkuyxo", response.galleries().get(0).resourceType());
    }
}
