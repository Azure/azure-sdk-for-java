// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.models.WorkItemCreateConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkItemCreateConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkItemCreateConfiguration model = BinaryData.fromString(
            "{\"ConnectorId\":\"njampm\",\"ConnectorDataConfiguration\":\"nzscxa\",\"ValidateOnly\":false,\"WorkItemProperties\":{\"njeaseipheofloke\":\"hcbonqvpkvlr\",\"enjbdlwtgrhp\":\"y\",\"umasxazjpq\":\"jp\",\"ualhbxxhejj\":\"e\"}}")
            .toObject(WorkItemCreateConfiguration.class);
        Assertions.assertEquals("njampm", model.connectorId());
        Assertions.assertEquals("nzscxa", model.connectorDataConfiguration());
        Assertions.assertEquals(false, model.validateOnly());
        Assertions.assertEquals("hcbonqvpkvlr", model.workItemProperties().get("njeaseipheofloke"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkItemCreateConfiguration model = new WorkItemCreateConfiguration().withConnectorId("njampm")
            .withConnectorDataConfiguration("nzscxa")
            .withValidateOnly(false)
            .withWorkItemProperties(
                mapOf("njeaseipheofloke", "hcbonqvpkvlr", "enjbdlwtgrhp", "y", "umasxazjpq", "jp", "ualhbxxhejj", "e"));
        model = BinaryData.fromObject(model).toObject(WorkItemCreateConfiguration.class);
        Assertions.assertEquals("njampm", model.connectorId());
        Assertions.assertEquals("nzscxa", model.connectorDataConfiguration());
        Assertions.assertEquals(false, model.validateOnly());
        Assertions.assertEquals("hcbonqvpkvlr", model.workItemProperties().get("njeaseipheofloke"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
