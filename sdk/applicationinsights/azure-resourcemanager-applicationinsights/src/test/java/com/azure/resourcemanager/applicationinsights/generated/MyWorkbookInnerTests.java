// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.fluent.models.MyWorkbookInner;
import com.azure.resourcemanager.applicationinsights.models.Kind;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentity;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentityType;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookUserAssignedIdentities;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MyWorkbookInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MyWorkbookInner model = BinaryData.fromString(
            "{\"kind\":\"shared\",\"properties\":{\"displayName\":\"z\",\"serializedData\":\"cmrvexzt\",\"version\":\"t\",\"timeModified\":\"sfraoyzko\",\"category\":\"wtl\",\"tags\":[\"ux\",\"wqaldsyu\",\"ximerqfobwyznk\",\"ykutwpf\"],\"userId\":\"a\",\"sourceId\":\"hrskdsnfd\",\"storageUri\":\"oakgtdlmkkzev\"},\"identity\":{\"userAssignedIdentities\":{\"principalId\":\"pusdstt\",\"tenantId\":\"ogvbbejdcngq\"},\"type\":\"UserAssigned\"},\"id\":\"rgzdwmsweyp\",\"name\":\"w\",\"type\":\"xggicccnxqhuexmk\",\"etag\":{\"hziuiefozbhdms\":\"inrfdwoyu\",\"zqhof\":\"l\"},\"location\":\"rmaequ\",\"tags\":{\"z\":\"xicslfao\",\"kaivwit\":\"iyylhalnswhccsp\",\"bwemhairs\":\"scywuggwoluhc\"}}")
            .toObject(MyWorkbookInner.class);
        Assertions.assertEquals("rmaequ", model.location());
        Assertions.assertEquals("xicslfao", model.tags().get("z"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("rgzdwmsweyp", model.id());
        Assertions.assertEquals("w", model.name());
        Assertions.assertEquals("xggicccnxqhuexmk", model.type());
        Assertions.assertEquals("inrfdwoyu", model.etag().get("hziuiefozbhdms"));
        Assertions.assertEquals(Kind.SHARED, model.kind());
        Assertions.assertEquals("z", model.displayName());
        Assertions.assertEquals("cmrvexzt", model.serializedData());
        Assertions.assertEquals("t", model.version());
        Assertions.assertEquals("wtl", model.category());
        Assertions.assertEquals("ux", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("hrskdsnfd", model.sourceId());
        Assertions.assertEquals("oakgtdlmkkzev", model.storageUri());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MyWorkbookInner model = new MyWorkbookInner().withLocation("rmaequ")
            .withTags(mapOf("z", "xicslfao", "kaivwit", "iyylhalnswhccsp", "bwemhairs", "scywuggwoluhc"))
            .withIdentity(
                new MyWorkbookManagedIdentity().withUserAssignedIdentities(new MyWorkbookUserAssignedIdentities())
                    .withType(MyWorkbookManagedIdentityType.USER_ASSIGNED))
            .withId("rgzdwmsweyp")
            .withName("w")
            .withType("xggicccnxqhuexmk")
            .withEtag(mapOf("hziuiefozbhdms", "inrfdwoyu", "zqhof", "l"))
            .withKind(Kind.SHARED)
            .withDisplayName("z")
            .withSerializedData("cmrvexzt")
            .withVersion("t")
            .withCategory("wtl")
            .withTagsPropertiesTags(Arrays.asList("ux", "wqaldsyu", "ximerqfobwyznk", "ykutwpf"))
            .withSourceId("hrskdsnfd")
            .withStorageUri("oakgtdlmkkzev");
        model = BinaryData.fromObject(model).toObject(MyWorkbookInner.class);
        Assertions.assertEquals("rmaequ", model.location());
        Assertions.assertEquals("xicslfao", model.tags().get("z"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("rgzdwmsweyp", model.id());
        Assertions.assertEquals("w", model.name());
        Assertions.assertEquals("xggicccnxqhuexmk", model.type());
        Assertions.assertEquals("inrfdwoyu", model.etag().get("hziuiefozbhdms"));
        Assertions.assertEquals(Kind.SHARED, model.kind());
        Assertions.assertEquals("z", model.displayName());
        Assertions.assertEquals("cmrvexzt", model.serializedData());
        Assertions.assertEquals("t", model.version());
        Assertions.assertEquals("wtl", model.category());
        Assertions.assertEquals("ux", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("hrskdsnfd", model.sourceId());
        Assertions.assertEquals("oakgtdlmkkzev", model.storageUri());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
