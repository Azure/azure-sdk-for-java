// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateGallery;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateLocalizedGallery;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateUpdateParameters;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkbookTemplateUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkbookTemplateUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"f\":\"pfpubjibww\",\"kn\":\"ohqkvpuvksgpls\"},\"properties\":{\"priority\":1486406311,\"author\":\"n\",\"templateData\":\"datajphuopxodlqi\",\"galleries\":[{\"name\":\"orzihle\",\"category\":\"jswsrmslyz\",\"type\":\"zbchckqqzqioxiy\",\"order\":1721034864,\"resourceType\":\"zynkedya\"},{\"name\":\"wyhqmibzyhwits\",\"category\":\"pyy\",\"type\":\"cdpu\",\"order\":1107344942,\"resourceType\":\"mwzn\"},{\"name\":\"biknsorgjhxbld\",\"category\":\"wwrlkdmtncv\",\"type\":\"otllxdyhgsyo\",\"order\":1135624729,\"resourceType\":\"ltdtbnnhad\"},{\"name\":\"crkvcikhnv\",\"category\":\"mqg\",\"type\":\"queziky\",\"order\":566556548,\"resourceType\":\"kallatmel\"}],\"localized\":{\"wq\":[{\"templateData\":\"dataccjzkzivgvv\",\"galleries\":[{},{}]},{\"templateData\":\"datarhyrnxxmueed\",\"galleries\":[{},{},{}]},{\"templateData\":\"datav\",\"galleries\":[{},{},{}]}],\"piohgwxrtfu\":[{\"templateData\":\"datahealmfmtda\",\"galleries\":[{}]},{\"templateData\":\"datav\",\"galleries\":[{},{},{},{}]}]}}}")
            .toObject(WorkbookTemplateUpdateParameters.class);
        Assertions.assertEquals("pfpubjibww", model.tags().get("f"));
        Assertions.assertEquals(1486406311, model.priority());
        Assertions.assertEquals("n", model.author());
        Assertions.assertEquals("orzihle", model.galleries().get(0).name());
        Assertions.assertEquals("jswsrmslyz", model.galleries().get(0).category());
        Assertions.assertEquals("zbchckqqzqioxiy", model.galleries().get(0).type());
        Assertions.assertEquals(1721034864, model.galleries().get(0).order());
        Assertions.assertEquals("zynkedya", model.galleries().get(0).resourceType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkbookTemplateUpdateParameters model
            = new WorkbookTemplateUpdateParameters().withTags(mapOf("f", "pfpubjibww", "kn", "ohqkvpuvksgpls"))
                .withPriority(1486406311)
                .withAuthor("n")
                .withTemplateData("datajphuopxodlqi")
                .withGalleries(Arrays.asList(
                    new WorkbookTemplateGallery().withName("orzihle")
                        .withCategory("jswsrmslyz")
                        .withType("zbchckqqzqioxiy")
                        .withOrder(1721034864)
                        .withResourceType("zynkedya"),
                    new WorkbookTemplateGallery().withName("wyhqmibzyhwits")
                        .withCategory("pyy")
                        .withType("cdpu")
                        .withOrder(1107344942)
                        .withResourceType("mwzn"),
                    new WorkbookTemplateGallery().withName("biknsorgjhxbld")
                        .withCategory("wwrlkdmtncv")
                        .withType("otllxdyhgsyo")
                        .withOrder(1135624729)
                        .withResourceType("ltdtbnnhad"),
                    new WorkbookTemplateGallery().withName("crkvcikhnv")
                        .withCategory("mqg")
                        .withType("queziky")
                        .withOrder(566556548)
                        .withResourceType("kallatmel")))
                .withLocalized(mapOf("wq",
                    Arrays.asList(
                        new WorkbookTemplateLocalizedGallery().withTemplateData("dataccjzkzivgvv")
                            .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery())),
                        new WorkbookTemplateLocalizedGallery().withTemplateData("datarhyrnxxmueed")
                            .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                                new WorkbookTemplateGallery())),
                        new WorkbookTemplateLocalizedGallery().withTemplateData("datav")
                            .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                                new WorkbookTemplateGallery()))),
                    "piohgwxrtfu",
                    Arrays.asList(
                        new WorkbookTemplateLocalizedGallery().withTemplateData("datahealmfmtda")
                            .withGalleries(Arrays.asList(new WorkbookTemplateGallery())),
                        new WorkbookTemplateLocalizedGallery().withTemplateData("datav")
                            .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                                new WorkbookTemplateGallery(), new WorkbookTemplateGallery())))));
        model = BinaryData.fromObject(model).toObject(WorkbookTemplateUpdateParameters.class);
        Assertions.assertEquals("pfpubjibww", model.tags().get("f"));
        Assertions.assertEquals(1486406311, model.priority());
        Assertions.assertEquals("n", model.author());
        Assertions.assertEquals("orzihle", model.galleries().get(0).name());
        Assertions.assertEquals("jswsrmslyz", model.galleries().get(0).category());
        Assertions.assertEquals("zbchckqqzqioxiy", model.galleries().get(0).type());
        Assertions.assertEquals(1721034864, model.galleries().get(0).order());
        Assertions.assertEquals("zynkedya", model.galleries().get(0).resourceType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
