// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.Annotation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AnnotationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"AnnotationName\":\"kxtrq\",\"Category\":\"smlmbtxhwgfwsrta\",\"EventTime\":\"2021-07-10T14:18:40Z\",\"Id\":\"zbrhubskhudyg\",\"Properties\":\"okkqfqjbvleo\",\"RelatedAnnotation\":\"ml\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApplicationInsightsManager manager = ApplicationInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Annotation> response = manager.annotations()
            .list("ktst", "dxeclzedqbcvh", "lhpl", "dqkdlwwqfbu", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kxtrq", response.iterator().next().annotationName());
        Assertions.assertEquals("smlmbtxhwgfwsrta", response.iterator().next().category());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-10T14:18:40Z"), response.iterator().next().eventTime());
        Assertions.assertEquals("zbrhubskhudyg", response.iterator().next().id());
        Assertions.assertEquals("okkqfqjbvleo", response.iterator().next().properties());
        Assertions.assertEquals("ml", response.iterator().next().relatedAnnotation());
    }
}
