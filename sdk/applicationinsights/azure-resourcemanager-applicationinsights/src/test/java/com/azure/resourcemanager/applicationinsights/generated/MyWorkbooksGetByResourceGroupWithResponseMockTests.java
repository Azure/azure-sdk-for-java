// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.Kind;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbook;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MyWorkbooksGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"kind\":\"user\",\"properties\":{\"displayName\":\"rqunjq\",\"serializedData\":\"denxau\",\"version\":\"pakdkifmjnnawt\",\"timeModified\":\"bpxuckpggqoweyi\",\"category\":\"dhlisngwflqqmpi\",\"tags\":[\"w\",\"pqxpx\",\"wfcngjsaas\",\"ixtmkzjvkviirhgf\"],\"userId\":\"wsdpgratzvzb\",\"sourceId\":\"byvi\",\"storageUri\":\"ctbrxkjzwrgxffm\"},\"identity\":{\"userAssignedIdentities\":{\"principalId\":\"bkgozxwopdbydpi\",\"tenantId\":\"aclnapxbiygnugj\"},\"type\":\"None\"},\"id\":\"vg\",\"name\":\"nkvxlxpaglqi\",\"type\":\"bgkc\",\"etag\":{\"fprnjl\":\"qjtwhauu\",\"rpddouifamo\":\"tlxs\",\"iwhxqszdtmaajq\":\"aziynknlqwzdv\"},\"location\":\"huxy\",\"tags\":{\"mzyospspshck\":\"vmtygj\",\"df\":\"kyjpmspbps\",\"vczkcnyxrxmunjd\":\"pyogtieyuj\"}}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApplicationInsightsManager manager =
            ApplicationInsightsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MyWorkbook response =
            manager
                .myWorkbooks()
                .getByResourceGroupWithResponse("nlb", "jkwrusnkq", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("huxy", response.location());
        Assertions.assertEquals("vmtygj", response.tags().get("mzyospspshck"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("vg", response.id());
        Assertions.assertEquals("nkvxlxpaglqi", response.name());
        Assertions.assertEquals("bgkc", response.type());
        Assertions.assertEquals("qjtwhauu", response.etag().get("fprnjl"));
        Assertions.assertEquals(Kind.USER, response.kind());
        Assertions.assertEquals("rqunjq", response.displayName());
        Assertions.assertEquals("denxau", response.serializedData());
        Assertions.assertEquals("pakdkifmjnnawt", response.version());
        Assertions.assertEquals("dhlisngwflqqmpi", response.category());
        Assertions.assertEquals("w", response.tagsPropertiesTags().get(0));
        Assertions.assertEquals("byvi", response.sourceId());
        Assertions.assertEquals("ctbrxkjzwrgxffm", response.storageUri());
    }
}
