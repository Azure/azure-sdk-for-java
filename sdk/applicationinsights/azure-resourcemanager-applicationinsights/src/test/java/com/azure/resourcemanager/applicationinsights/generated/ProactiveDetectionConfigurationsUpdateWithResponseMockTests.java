// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.fluent.models.ApplicationInsightsComponentProactiveDetectionConfigurationInner;
import com.azure.resourcemanager.applicationinsights.models.ApplicationInsightsComponentProactiveDetectionConfiguration;
import com.azure.resourcemanager.applicationinsights.models.ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProactiveDetectionConfigurationsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"Name\":\"fidltug\",\"Enabled\":true,\"SendEmailsToSubscriptionOwners\":false,\"CustomEmails\":[\"sjhoiftxfkfwegpr\",\"ptil\",\"ucb\"],\"LastUpdatedTime\":\"tgdqohmcwsldriz\",\"RuleDefinitions\":{\"Name\":\"wbralllibphbqzm\",\"DisplayName\":\"aka\",\"Description\":\"nkjpdnjzha\",\"HelpUrl\":\"ylhjlm\",\"IsHidden\":false,\"IsEnabledByDefault\":false,\"IsInPreview\":true,\"SupportsEmailNotifications\":true}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApplicationInsightsManager manager = ApplicationInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ApplicationInsightsComponentProactiveDetectionConfiguration response = manager
            .proactiveDetectionConfigurations()
            .updateWithResponse("cdisd", "sfjbjsvg", "rwhryvycytd",
                new ApplicationInsightsComponentProactiveDetectionConfigurationInner().withName("xgccknfnw")
                    .withEnabled(true)
                    .withSendEmailsToSubscriptionOwners(true)
                    .withCustomEmails(Arrays.asList("vjdhttzaefedxih", "hrphkmcrjdqn", "dfzpbgtgkylkdg"))
                    .withLastUpdatedTime("jeuut")
                    .withRuleDefinitions(
                        new ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions().withName("ez")
                            .withDisplayName("hokvbwnh")
                            .withDescription("qlgehg")
                            .withHelpUrl("ipifhpfeoajvg")
                            .withIsHidden(true)
                            .withIsEnabledByDefault(true)
                            .withIsInPreview(false)
                            .withSupportsEmailNotifications(true)),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("fidltug", response.name());
        Assertions.assertEquals(true, response.enabled());
        Assertions.assertEquals(false, response.sendEmailsToSubscriptionOwners());
        Assertions.assertEquals("sjhoiftxfkfwegpr", response.customEmails().get(0));
        Assertions.assertEquals("tgdqohmcwsldriz", response.lastUpdatedTime());
        Assertions.assertEquals("wbralllibphbqzm", response.ruleDefinitions().name());
        Assertions.assertEquals("aka", response.ruleDefinitions().displayName());
        Assertions.assertEquals("nkjpdnjzha", response.ruleDefinitions().description());
        Assertions.assertEquals("ylhjlm", response.ruleDefinitions().helpUrl());
        Assertions.assertEquals(false, response.ruleDefinitions().isHidden());
        Assertions.assertEquals(false, response.ruleDefinitions().isEnabledByDefault());
        Assertions.assertEquals(true, response.ruleDefinitions().isInPreview());
        Assertions.assertEquals(true, response.ruleDefinitions().supportsEmailNotifications());
    }
}
