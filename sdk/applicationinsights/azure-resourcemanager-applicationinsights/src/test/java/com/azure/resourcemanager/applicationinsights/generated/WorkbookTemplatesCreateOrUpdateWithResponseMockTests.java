// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplate;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateGallery;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateLocalizedGallery;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkbookTemplatesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"priority\":378655951,\"author\":\"hhlkyqltqsrogtu\",\"templateData\":\"datakffdjktsys\",\"galleries\":[{\"name\":\"vclglxnfuij\",\"category\":\"busqogsfi\",\"type\":\"yi\",\"order\":2036577427,\"resourceType\":\"arujt\"},{\"name\":\"qxfzyjqttvwk\",\"category\":\"hjpenuygbq\",\"type\":\"qekewvnqvcd\",\"order\":1408895656,\"resourceType\":\"ucmfdj\"},{\"name\":\"laxpunj\",\"category\":\"kczvvita\",\"type\":\"xmfcsserxhtv\",\"order\":817459269,\"resourceType\":\"lwntsjgqrs\"}],\"localized\":{\"trwahzj\":[{\"templateData\":\"datauuybnchrsz\",\"galleries\":[{},{},{}]},{\"templateData\":\"datauelyetndn\",\"galleries\":[{},{}]},{\"templateData\":\"dataggagfln\",\"galleries\":[{},{}]}]}},\"location\":\"ucftbyrp\",\"tags\":{\"lsnoxaxmqeqalh\":\"hkpigqfusuckzmkw\",\"svkhgbv\":\"jnhgwydyyn\",\"arfdlpukhpyrnei\":\"ta\"},\"id\":\"jcpeogkhnmg\",\"name\":\"ro\",\"type\":\"xddbhfhpfpaz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApplicationInsightsManager manager = ApplicationInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkbookTemplate response = manager.workbookTemplates()
            .define("obkauxofsh")
            .withRegion("xdfzantkw")
            .withExistingResourceGroup("uahokq")
            .withTags(
                mapOf("ac", "yamlbnse", "m", "jvpilguooqja", "hrtdtpdelq", "itgueiookjbs", "vcjkgd", "cslmotoebnfxo"))
            .withPriority(1507125195)
            .withAuthor("nulaiywzejywhsl")
            .withTemplateData("datakoj")
            .withGalleries(Arrays.asList(
                new WorkbookTemplateGallery().withName("ndnpdwrpqafgfug")
                    .withCategory("n")
                    .withType("yetefyp")
                    .withOrder(1953030957)
                    .withResourceType("tfjgt"),
                new WorkbookTemplateGallery().withName("rjvzuyt")
                    .withCategory("mlmuowol")
                    .withType("uir")
                    .withOrder(110888706)
                    .withResourceType("nszonwpngaj")))
            .withLocalized(mapOf("henlusfnr",
                Arrays.asList(
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datajawrtmjfjmyc")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                            new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery()
                        .withTemplateData("datahcoxov")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery()))),
                "sfuughtuqfecjx",
                Arrays.asList(
                    new WorkbookTemplateLocalizedGallery().withTemplateData("dataxtxrdcqtjvidt")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datauslvyjtcvuwkasi")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery()))),
                "jbaqehgpdoh",
                Arrays.asList(
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datatuhxuicb")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                            new WorkbookTemplateGallery(), new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datarswnjlxuzrhwp")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                            new WorkbookTemplateGallery(), new WorkbookTemplateGallery()))),
                "zeqyjleziun",
                Arrays.asList(
                    new WorkbookTemplateLocalizedGallery().withTemplateData("dataatucoigebxncn")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery().withTemplateData("databnwgfmxj")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datajbgdlfgtdysnaquf")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                            new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datatqhamzjrw")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                            new WorkbookTemplateGallery(), new WorkbookTemplateGallery())))))
            .create();

        Assertions.assertEquals("ucftbyrp", response.location());
        Assertions.assertEquals("hkpigqfusuckzmkw", response.tags().get("lsnoxaxmqeqalh"));
        Assertions.assertEquals(378655951, response.priority());
        Assertions.assertEquals("hhlkyqltqsrogtu", response.author());
        Assertions.assertEquals("vclglxnfuij", response.galleries().get(0).name());
        Assertions.assertEquals("busqogsfi", response.galleries().get(0).category());
        Assertions.assertEquals("yi", response.galleries().get(0).type());
        Assertions.assertEquals(2036577427, response.galleries().get(0).order());
        Assertions.assertEquals("arujt", response.galleries().get(0).resourceType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
