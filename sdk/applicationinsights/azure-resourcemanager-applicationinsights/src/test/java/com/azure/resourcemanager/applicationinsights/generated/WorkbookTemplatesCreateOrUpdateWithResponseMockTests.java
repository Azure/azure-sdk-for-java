// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplate;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateGallery;
import com.azure.resourcemanager.applicationinsights.models.WorkbookTemplateLocalizedGallery;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkbookTemplatesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"priority\":125495169,\"author\":\"xoe\",\"templateData\":\"dataqinjipnwjf\",\"galleries\":[{\"name\":\"lafcbahh\",\"category\":\"pofoi\",\"type\":\"w\",\"order\":1217605698,\"resourceType\":\"kmkkholvdnd\"},{\"name\":\"auo\",\"category\":\"huartv\",\"type\":\"ukyefchnmnahmnxh\",\"order\":1852256635,\"resourceType\":\"irwrwe\"},{\"name\":\"xffi\",\"category\":\"xwrsnew\",\"type\":\"zqvbubqm\",\"order\":584332320,\"resourceType\":\"ycxhxzgaztta\"},{\"name\":\"idvmfqhppubo\",\"category\":\"epdfgkmtdherng\",\"type\":\"c\",\"order\":2083850408,\"resourceType\":\"okqtobk\"}],\"localized\":{\"nnfhyetefypo\":[{\"templateData\":\"datash\",\"galleries\":[{},{},{},{}]},{\"templateData\":\"datapnulaiywzej\",\"galleries\":[{}]},{\"templateData\":\"datalwkojpllndnpdw\",\"galleries\":[{},{},{},{}]},{\"templateData\":\"datafgf\",\"galleries\":[{},{},{}]}]}},\"location\":\"octfjgtixrjvzuyt\",\"tags\":{\"bauiropi\":\"lmuowo\",\"n\":\"nszonwpngaj\"},\"id\":\"ixjawrtm\",\"name\":\"fjmyccxlzhco\",\"type\":\"ovne\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApplicationInsightsManager manager = ApplicationInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkbookTemplate response = manager.workbookTemplates()
            .define("vxlx")
            .withRegion("gfabuiyjibuzphdu")
            .withExistingResourceGroup("rxmunjdxvgln")
            .withTags(mapOf("oxgjiuqhibt", "iknp", "pqwjedm", "z"))
            .withPriority(46101784)
            .withAuthor("ivbgkcv")
            .withTemplateData("datahpzvuqdflvoniyp")
            .withGalleries(Arrays.asList(
                new WorkbookTemplateGallery().withName("bcpzgpxtivh")
                    .withCategory("nidibgqjxg")
                    .withType("r")
                    .withOrder(406558372)
                    .withResourceType("fgpikqm"),
                new WorkbookTemplateGallery().withName("ao")
                    .withCategory("rmzvupo")
                    .withType("zdfuydzvkfvxcnqm")
                    .withOrder(547334197)
                    .withResourceType("wokmvkhlggd"),
                new WorkbookTemplateGallery().withName("em")
                    .withCategory("kzsz")
                    .withType("iwtglxxhljfpg")
                    .withOrder(1130709728)
                    .withResourceType("mnzhrgmqg"),
                new WorkbookTemplateGallery().withName("x")
                    .withCategory("qcbfrmbodths")
                    .withType("gvriibakclac")
                    .withOrder(1812641051)
                    .withResourceType("xousxauzl")))
            .withLocalized(mapOf("hnykz",
                Arrays.asList(
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datawohqfzizvu")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datajsvthnwpzteko")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery().withTemplateData("databiattgplucfotan")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                            new WorkbookTemplateGallery()))),
                "k",
                Arrays.asList(
                    new WorkbookTemplateLocalizedGallery().withTemplateData("dataswvxwlmzqwmv")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                            new WorkbookTemplateGallery(), new WorkbookTemplateGallery())),
                    new WorkbookTemplateLocalizedGallery().withTemplateData("datamxmcuqudtcvclxy")
                        .withGalleries(Arrays.asList(new WorkbookTemplateGallery(), new WorkbookTemplateGallery(),
                            new WorkbookTemplateGallery(), new WorkbookTemplateGallery())))))
            .create();

        Assertions.assertEquals("octfjgtixrjvzuyt", response.location());
        Assertions.assertEquals("lmuowo", response.tags().get("bauiropi"));
        Assertions.assertEquals(125495169, response.priority());
        Assertions.assertEquals("xoe", response.author());
        Assertions.assertEquals("lafcbahh", response.galleries().get(0).name());
        Assertions.assertEquals("pofoi", response.galleries().get(0).category());
        Assertions.assertEquals("w", response.galleries().get(0).type());
        Assertions.assertEquals(1217605698, response.galleries().get(0).order());
        Assertions.assertEquals("kmkkholvdnd", response.galleries().get(0).resourceType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
