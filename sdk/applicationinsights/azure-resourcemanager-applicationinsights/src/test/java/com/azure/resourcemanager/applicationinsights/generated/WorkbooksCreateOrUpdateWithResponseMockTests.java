// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.applicationinsights.models.UserAssignedIdentity;
import com.azure.resourcemanager.applicationinsights.models.Workbook;
import com.azure.resourcemanager.applicationinsights.models.WorkbookResourceIdentity;
import com.azure.resourcemanager.applicationinsights.models.WorkbookSharedTypeKind;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkbooksCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"updwv\",\"serializedData\":\"phcnzqtpj\",\"version\":\"qrhvthlaiwdcxsml\",\"timeModified\":\"2021-01-22T01:05:07Z\",\"category\":\"zdtxetlgyd\",\"tags\":[\"vlnnpx\",\"b\",\"fiqgeaar\",\"gjekglklby\"],\"userId\":\"idwcwvmzegjon\",\"sourceId\":\"jirwgdnqzbrfk\",\"storageUri\":\"zhzmtksjci\",\"description\":\"igsxcdgljplk\",\"revision\":\"acht\"},\"identity\":{\"principalId\":\"866587e7-cad6-4be7-ae8e-d652fa50f5f8\",\"tenantId\":\"f5a565c0-527c-481f-9b4c-f5cf12a8c32c\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"pfmdgycx\":{\"principalId\":\"764290d5-8d55-4cfe-b098-6d4290703e83\",\"clientId\":\"3e646e41-ff9d-42b1-90b3-494561eb199c\"},\"kwhqj\":{\"principalId\":\"9a1ed01a-3153-42d7-b887-5119ea3318b8\",\"clientId\":\"b31b9b8c-080a-46c0-9bcb-e1be53710df1\"}}},\"kind\":\"shared\",\"etag\":\"urlpshh\",\"location\":\"vpedwqslsrh\",\"tags\":{\"imuvqejosovyrrl\":\"vwwskondcbr\",\"sinuqtljqobbpih\":\"a\"},\"id\":\"hcecybmrqbr\",\"name\":\"bbmpxdlvykfre\",\"type\":\"crse\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApplicationInsightsManager manager = ApplicationInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Workbook response = manager.workbooks()
            .define("gfggcvkyylizrzbj")
            .withRegion("chl")
            .withExistingResourceGroup("uhplrvkmjcwmjv")
            .withTags(mapOf("hmoz", "txd", "ns", "sgzv", "fpafolpymwamxq", "nj"))
            .withIdentity(new WorkbookResourceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("rokcdxfzzzwyjaf", new UserAssignedIdentity())))
            .withKind(WorkbookSharedTypeKind.SHARED)
            .withEtag("guyn")
            .withDisplayName("fxsfuztlvtmv")
            .withSerializedData("gbwidqlvh")
            .withVersion("oveofizrvjfnmj")
            .withCategory("wyzgiblkuj")
            .withTagsPropertiesTags(Arrays.asList("fojuidjpuuyj", "c", "jikzoeovvtzej"))
            .withSourceId("k")
            .withStorageUri("qzolxrzvhqjw")
            .withDescription("htgv")
            .withSourceIdParameter("jchcsrlzknmzla")
            .create();

        Assertions.assertEquals("vpedwqslsrh", response.location());
        Assertions.assertEquals("vwwskondcbr", response.tags().get("imuvqejosovyrrl"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, response.kind());
        Assertions.assertEquals("urlpshh", response.etag());
        Assertions.assertEquals("updwv", response.displayName());
        Assertions.assertEquals("phcnzqtpj", response.serializedData());
        Assertions.assertEquals("qrhvthlaiwdcxsml", response.version());
        Assertions.assertEquals("zdtxetlgyd", response.category());
        Assertions.assertEquals("vlnnpx", response.tagsPropertiesTags().get(0));
        Assertions.assertEquals("jirwgdnqzbrfk", response.sourceId());
        Assertions.assertEquals("zhzmtksjci", response.storageUri());
        Assertions.assertEquals("igsxcdgljplk", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
