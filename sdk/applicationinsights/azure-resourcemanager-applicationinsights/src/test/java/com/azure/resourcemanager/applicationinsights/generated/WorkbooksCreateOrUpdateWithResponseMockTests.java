// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.applicationinsights.models.UserAssignedIdentity;
import com.azure.resourcemanager.applicationinsights.models.Workbook;
import com.azure.resourcemanager.applicationinsights.models.WorkbookResourceIdentity;
import com.azure.resourcemanager.applicationinsights.models.WorkbookSharedTypeKind;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkbooksCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"displayName\":\"idwcwvmzegjon\",\"serializedData\":\"hj\",\"version\":\"wgdnqzbr\",\"timeModified\":\"2021-08-15T23:23:18Z\",\"category\":\"pzhz\",\"tags\":[\"sjcitdigsxc\",\"gljplkeuachtomfl\",\"ytswfp\"],\"userId\":\"dgycxnmskwhqjjy\",\"sourceId\":\"urlpshh\",\"storageUri\":\"pedwqsl\",\"description\":\"hmpqvw\",\"revision\":\"kondcb\"},\"identity\":{\"principalId\":\"bd9b94d6-adfb-48d8-884e-5ea84f22fba7\",\"tenantId\":\"72979ca0-d855-4a50-a0de-b5bf7f41f514\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"so\":{\"principalId\":\"ecf304a5-7886-45df-902d-aa58c642305c\",\"clientId\":\"a7d53d43-a74e-4002-bf4e-8dc3fa473e6f\"}}},\"kind\":\"shared\",\"etag\":\"leaesi\",\"location\":\"uqtljqobbpih\",\"tags\":{\"bmpxdlvykfrexc\":\"ecybmrqbrj\",\"qwjksghudgz\":\"s\",\"ggsvoujkxibdaf\":\"xog\",\"xfbvfb\":\"rkmdyom\"},\"id\":\"dy\",\"name\":\"rhpw\",\"type\":\"gddeimaw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApplicationInsightsManager manager =
            ApplicationInsightsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Workbook response =
            manager
                .workbooks()
                .define("ukoveofi")
                .withRegion("dulajvlejchcs")
                .withExistingResourceGroup("ztlvtmvagbwidqlv")
                .withTags(mapOf("cnzqtpjhmqr", "knmzlanrupdwvnp", "hlaiwd", "v", "hzdtxetlgydlh", "xsmlz"))
                .withIdentity(
                    new WorkbookResourceIdentity()
                        .withType(ManagedServiceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "ynuchlgmltxd",
                                new UserAssignedIdentity(),
                                "ozusgz",
                                new UserAssignedIdentity(),
                                "snnjzfpafolpym",
                                new UserAssignedIdentity(),
                                "xqzragp",
                                new UserAssignedIdentity())))
                .withKind(WorkbookSharedTypeKind.SHARED)
                .withEtag("t")
                .withDisplayName("vjfn")
                .withSerializedData("jmvl")
                .withVersion("z")
                .withCategory("lkujrllfojui")
                .withTagsPropertiesTags(Arrays.asList("uuyjucejikz", "eovvtzej", "tjklntikyjuzk"))
                .withSourceId("htgv")
                .withStorageUri("pcrrk")
                .withDescription("awjmjsmw")
                .withSourceIdParameter("gjekglklby")
                .create();

        Assertions.assertEquals("uqtljqobbpih", response.location());
        Assertions.assertEquals("ecybmrqbrj", response.tags().get("bmpxdlvykfrexc"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, response.kind());
        Assertions.assertEquals("leaesi", response.etag());
        Assertions.assertEquals("idwcwvmzegjon", response.displayName());
        Assertions.assertEquals("hj", response.serializedData());
        Assertions.assertEquals("wgdnqzbr", response.version());
        Assertions.assertEquals("pzhz", response.category());
        Assertions.assertEquals("sjcitdigsxc", response.tagsPropertiesTags().get(0));
        Assertions.assertEquals("urlpshh", response.sourceId());
        Assertions.assertEquals("pedwqsl", response.storageUri());
        Assertions.assertEquals("hmpqvw", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
