// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.fluent.models.WorkbookInner;
import com.azure.resourcemanager.applicationinsights.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.applicationinsights.models.UserAssignedIdentity;
import com.azure.resourcemanager.applicationinsights.models.WorkbookResourceIdentity;
import com.azure.resourcemanager.applicationinsights.models.WorkbookSharedTypeKind;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkbookInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkbookInner model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"vrwxkv\",\"serializedData\":\"kkgll\",\"version\":\"jygvjayvbl\",\"timeModified\":\"2021-09-27T02:30:31Z\",\"category\":\"k\",\"tags\":[\"bxvvyhg\",\"opbyrqufegxu\",\"wz\",\"bnhlmc\"],\"userId\":\"p\",\"sourceId\":\"gitvg\",\"storageUri\":\"hrixkwmy\",\"description\":\"ejvegrhbpnaixex\",\"revision\":\"b\"},\"identity\":{\"principalId\":\"52a01c84-7666-4043-a36f-0d31de1a7b16\",\"tenantId\":\"c0ab3f8b-e6d8-4002-bb4e-cb3206f00edd\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"rrvqa\":{\"principalId\":\"17e592ea-b953-4395-bba4-c63237236532\",\"clientId\":\"06178f40-e6aa-4c6f-a0f9-025ada22e502\"},\"ghtpw\":{\"principalId\":\"689221d0-9fb5-43ae-86ab-3d041c0f168a\",\"clientId\":\"e1ff3a19-dbed-4660-abf9-3a13b385a9c0\"},\"hyjsvfycx\":{\"principalId\":\"10d3c851-e59b-4d54-9d2f-ab1f24611522\",\"clientId\":\"70e43266-ce10-4962-af2f-f44e8feb98f3\"}}},\"kind\":\"shared\",\"etag\":\"oowvrv\",\"location\":\"t\",\"tags\":{\"pnsxkmcwaek\":\"ppyostronzmyhgf\"},\"id\":\"rjreafxts\",\"name\":\"umh\",\"type\":\"glikkxwslolb\"}")
            .toObject(WorkbookInner.class);
        Assertions.assertEquals("t", model.location());
        Assertions.assertEquals("ppyostronzmyhgf", model.tags().get("pnsxkmcwaek"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("oowvrv", model.etag());
        Assertions.assertEquals("vrwxkv", model.displayName());
        Assertions.assertEquals("kkgll", model.serializedData());
        Assertions.assertEquals("jygvjayvbl", model.version());
        Assertions.assertEquals("k", model.category());
        Assertions.assertEquals("bxvvyhg", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("gitvg", model.sourceId());
        Assertions.assertEquals("hrixkwmy", model.storageUri());
        Assertions.assertEquals("ejvegrhbpnaixex", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkbookInner model = new WorkbookInner().withLocation("t")
            .withTags(mapOf("pnsxkmcwaek", "ppyostronzmyhgf"))
            .withIdentity(new WorkbookResourceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("rrvqa", new UserAssignedIdentity(), "ghtpw",
                    new UserAssignedIdentity(), "hyjsvfycx", new UserAssignedIdentity())))
            .withKind(WorkbookSharedTypeKind.SHARED)
            .withEtag("oowvrv")
            .withDisplayName("vrwxkv")
            .withSerializedData("kkgll")
            .withVersion("jygvjayvbl")
            .withCategory("k")
            .withTagsPropertiesTags(Arrays.asList("bxvvyhg", "opbyrqufegxu", "wz", "bnhlmc"))
            .withSourceId("gitvg")
            .withStorageUri("hrixkwmy")
            .withDescription("ejvegrhbpnaixex");
        model = BinaryData.fromObject(model).toObject(WorkbookInner.class);
        Assertions.assertEquals("t", model.location());
        Assertions.assertEquals("ppyostronzmyhgf", model.tags().get("pnsxkmcwaek"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("oowvrv", model.etag());
        Assertions.assertEquals("vrwxkv", model.displayName());
        Assertions.assertEquals("kkgll", model.serializedData());
        Assertions.assertEquals("jygvjayvbl", model.version());
        Assertions.assertEquals("k", model.category());
        Assertions.assertEquals("bxvvyhg", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("gitvg", model.sourceId());
        Assertions.assertEquals("hrixkwmy", model.storageUri());
        Assertions.assertEquals("ejvegrhbpnaixex", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
