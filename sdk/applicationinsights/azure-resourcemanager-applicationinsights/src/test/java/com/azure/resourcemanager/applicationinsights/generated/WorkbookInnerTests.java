// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.fluent.models.WorkbookInner;
import com.azure.resourcemanager.applicationinsights.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.applicationinsights.models.UserAssignedIdentity;
import com.azure.resourcemanager.applicationinsights.models.WorkbookResourceIdentity;
import com.azure.resourcemanager.applicationinsights.models.WorkbookSharedTypeKind;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkbookInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkbookInner model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"etaebu\",\"serializedData\":\"u\",\"version\":\"movsmzlxwabmqoe\",\"timeModified\":\"2021-08-18T18:08:28Z\",\"category\":\"frvtpuqu\",\"tags\":[\"lgkfbt\",\"doaon\"],\"userId\":\"jcntuj\",\"sourceId\":\"c\",\"storageUri\":\"df\",\"description\":\"waezkojvd\",\"revision\":\"zfoqouicybxar\"},\"identity\":{\"principalId\":\"893ebfbf-d4b3-4a1e-8482-7de0e5ae3930\",\"tenantId\":\"abe292d4-0ee8-4a96-bdd1-e344cdd99ad4\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"q\":{\"principalId\":\"dc7ad656-3f61-4a5c-89db-fb0b770ff554\",\"clientId\":\"51c0109a-576a-4290-a2ee-cb31fb4f9793\"}}},\"kind\":\"shared\",\"etag\":\"oamciodh\",\"location\":\"haz\",\"tags\":{\"onlwntoeg\":\"nz\",\"mrv\":\"kdwbwhkszz\"},\"id\":\"xztvbtqgsfraoyzk\",\"name\":\"owtlmnguxawqald\",\"type\":\"yuuximerqfobwyzn\"}")
            .toObject(WorkbookInner.class);
        Assertions.assertEquals("haz", model.location());
        Assertions.assertEquals("nz", model.tags().get("onlwntoeg"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("oamciodh", model.etag());
        Assertions.assertEquals("etaebu", model.displayName());
        Assertions.assertEquals("u", model.serializedData());
        Assertions.assertEquals("movsmzlxwabmqoe", model.version());
        Assertions.assertEquals("frvtpuqu", model.category());
        Assertions.assertEquals("lgkfbt", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("c", model.sourceId());
        Assertions.assertEquals("df", model.storageUri());
        Assertions.assertEquals("waezkojvd", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkbookInner model = new WorkbookInner().withLocation("haz")
            .withTags(mapOf("onlwntoeg", "nz", "mrv", "kdwbwhkszz"))
            .withIdentity(new WorkbookResourceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("q", new UserAssignedIdentity())))
            .withKind(WorkbookSharedTypeKind.SHARED)
            .withEtag("oamciodh")
            .withDisplayName("etaebu")
            .withSerializedData("u")
            .withVersion("movsmzlxwabmqoe")
            .withCategory("frvtpuqu")
            .withTagsPropertiesTags(Arrays.asList("lgkfbt", "doaon"))
            .withSourceId("c")
            .withStorageUri("df")
            .withDescription("waezkojvd");
        model = BinaryData.fromObject(model).toObject(WorkbookInner.class);
        Assertions.assertEquals("haz", model.location());
        Assertions.assertEquals("nz", model.tags().get("onlwntoeg"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("oamciodh", model.etag());
        Assertions.assertEquals("etaebu", model.displayName());
        Assertions.assertEquals("u", model.serializedData());
        Assertions.assertEquals("movsmzlxwabmqoe", model.version());
        Assertions.assertEquals("frvtpuqu", model.category());
        Assertions.assertEquals("lgkfbt", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("c", model.sourceId());
        Assertions.assertEquals("df", model.storageUri());
        Assertions.assertEquals("waezkojvd", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
