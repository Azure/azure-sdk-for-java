// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.fluent.models.WorkbookInner;
import com.azure.resourcemanager.applicationinsights.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.applicationinsights.models.UserAssignedIdentity;
import com.azure.resourcemanager.applicationinsights.models.WorkbookResourceIdentity;
import com.azure.resourcemanager.applicationinsights.models.WorkbookSharedTypeKind;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkbookInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkbookInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"displayName\":\"wdmjsjqbjhhyx\",\"serializedData\":\"rw\",\"version\":\"co\",\"timeModified\":\"2021-02-27T00:57:42Z\",\"category\":\"p\",\"tags\":[\"gymare\",\"n\",\"jxqugjhky\",\"ubeddg\"],\"userId\":\"ofwq\",\"sourceId\":\"qal\",\"storageUri\":\"mnjijpxacqqudf\",\"description\":\"yxbaaabjyvayf\",\"revision\":\"m\"},\"identity\":{\"principalId\":\"be632264-181e-4d90-a7c6-76af9f361265\",\"tenantId\":\"51f31ba0-c910-4b3f-87b2-eb46357f0c67\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"exn\":{\"principalId\":\"06583265-61d0-4385-8f06-96bf6687cf4f\",\"clientId\":\"e1e22704-ee09-4a3b-b432-3658bf5231d5\"}}},\"kind\":\"shared\",\"etag\":\"nwnwme\",\"location\":\"zsyyceuzso\",\"tags\":{\"frxtrthzvaytdwk\":\"ud\",\"xhexiilivpdti\":\"brqubp\"},\"id\":\"r\",\"name\":\"tdqoaxoruzfgsq\",\"type\":\"yfxrx\"}")
                .toObject(WorkbookInner.class);
        Assertions.assertEquals("zsyyceuzso", model.location());
        Assertions.assertEquals("ud", model.tags().get("frxtrthzvaytdwk"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("nwnwme", model.etag());
        Assertions.assertEquals("wdmjsjqbjhhyx", model.displayName());
        Assertions.assertEquals("rw", model.serializedData());
        Assertions.assertEquals("co", model.version());
        Assertions.assertEquals("p", model.category());
        Assertions.assertEquals("gymare", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("qal", model.sourceId());
        Assertions.assertEquals("mnjijpxacqqudf", model.storageUri());
        Assertions.assertEquals("yxbaaabjyvayf", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkbookInner model =
            new WorkbookInner()
                .withLocation("zsyyceuzso")
                .withTags(mapOf("frxtrthzvaytdwk", "ud", "xhexiilivpdti", "brqubp"))
                .withIdentity(
                    new WorkbookResourceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("exn", new UserAssignedIdentity())))
                .withKind(WorkbookSharedTypeKind.SHARED)
                .withEtag("nwnwme")
                .withDisplayName("wdmjsjqbjhhyx")
                .withSerializedData("rw")
                .withVersion("co")
                .withCategory("p")
                .withTagsPropertiesTags(Arrays.asList("gymare", "n", "jxqugjhky", "ubeddg"))
                .withSourceId("qal")
                .withStorageUri("mnjijpxacqqudf")
                .withDescription("yxbaaabjyvayf");
        model = BinaryData.fromObject(model).toObject(WorkbookInner.class);
        Assertions.assertEquals("zsyyceuzso", model.location());
        Assertions.assertEquals("ud", model.tags().get("frxtrthzvaytdwk"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("nwnwme", model.etag());
        Assertions.assertEquals("wdmjsjqbjhhyx", model.displayName());
        Assertions.assertEquals("rw", model.serializedData());
        Assertions.assertEquals("co", model.version());
        Assertions.assertEquals("p", model.category());
        Assertions.assertEquals("gymare", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("qal", model.sourceId());
        Assertions.assertEquals("mnjijpxacqqudf", model.storageUri());
        Assertions.assertEquals("yxbaaabjyvayf", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
