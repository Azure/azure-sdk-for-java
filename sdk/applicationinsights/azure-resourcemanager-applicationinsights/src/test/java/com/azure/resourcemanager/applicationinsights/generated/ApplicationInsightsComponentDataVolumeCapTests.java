// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.models.ApplicationInsightsComponentDataVolumeCap;
import org.junit.jupiter.api.Assertions;

public final class ApplicationInsightsComponentDataVolumeCapTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationInsightsComponentDataVolumeCap model =
            BinaryData
                .fromString(
                    "{\"Cap\":85.262695,\"ResetTime\":727267147,\"WarningThreshold\":1154463022,\"StopSendNotificationWhenHitThreshold\":true,\"StopSendNotificationWhenHitCap\":true,\"MaxHistoryCap\":5.3407373}")
                .toObject(ApplicationInsightsComponentDataVolumeCap.class);
        Assertions.assertEquals(85.262695F, model.cap());
        Assertions.assertEquals(1154463022, model.warningThreshold());
        Assertions.assertEquals(true, model.stopSendNotificationWhenHitThreshold());
        Assertions.assertEquals(true, model.stopSendNotificationWhenHitCap());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationInsightsComponentDataVolumeCap model =
            new ApplicationInsightsComponentDataVolumeCap()
                .withCap(85.262695F)
                .withWarningThreshold(1154463022)
                .withStopSendNotificationWhenHitThreshold(true)
                .withStopSendNotificationWhenHitCap(true);
        model = BinaryData.fromObject(model).toObject(ApplicationInsightsComponentDataVolumeCap.class);
        Assertions.assertEquals(85.262695F, model.cap());
        Assertions.assertEquals(1154463022, model.warningThreshold());
        Assertions.assertEquals(true, model.stopSendNotificationWhenHitThreshold());
        Assertions.assertEquals(true, model.stopSendNotificationWhenHitCap());
    }
}
