// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.Kind;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbook;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentity;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentityType;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookUserAssignedIdentities;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MyWorkbooksCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"kind\":\"user\",\"properties\":{\"displayName\":\"inuqtljq\",\"serializedData\":\"bbpihehcecy\",\"version\":\"rqbrjbbmpxdlvyk\",\"timeModified\":\"e\",\"category\":\"crse\",\"tags\":[\"ksghudgzhxogjgg\",\"voujkxibdafhrk\"],\"userId\":\"yomkxfbvfbhdy\",\"sourceId\":\"hpwpgddeimawzovg\",\"storageUri\":\"um\"},\"identity\":{\"userAssignedIdentities\":{\"principalId\":\"jcazt\",\"tenantId\":\"snsqowxwcoml\"},\"type\":\"None\"},\"id\":\"ukklelss\",\"name\":\"blycsxzujksr\",\"type\":\"smdesqplpvmjcd\",\"etag\":{\"nkcoeqswankltyt\":\"mnaoy\"},\"location\":\"hdroznnh\",\"tags\":{\"sggux\":\"ktgj\",\"ywaeeczgf\":\"eml\"}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApplicationInsightsManager manager = ApplicationInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MyWorkbook response = manager.myWorkbooks()
            .define("rrkolawjmjs")
            .withRegion("zhzmtksjci")
            .withExistingResourceGroup("tgvgzp")
            .withTags(mapOf("htomflrytswfp", "gsxcdgljplkeua", "skw", "mdgycxn", "shhkvpedw", "qjjyslurl"))
            .withIdentity(
                new MyWorkbookManagedIdentity().withUserAssignedIdentities(new MyWorkbookUserAssignedIdentities())
                    .withType(MyWorkbookManagedIdentityType.NONE))
            .withName("wwsko")
            .withType("dcbrwimuvq")
            .withEtag(mapOf("afiqgeaarbgjekg", "pxy", "mzegjon", "klbyulidwcw", "rwgdnqzbrfks", "hj"))
            .withKind(Kind.SHARED)
            .withDisplayName("kcdxfzzzw")
            .withSerializedData("jafi")
            .withVersion("hguynuchlgmltxdw")
            .withCategory("ln")
            .withTagsPropertiesTags(Arrays.asList("jzfpafolpymwamx"))
            .withSourceId("dphtv")
            .withStorageUri("lajv")
            .withSourceIdParameter("josovyrrl")
            .create();

        Assertions.assertEquals("hdroznnh", response.location());
        Assertions.assertEquals("ktgj", response.tags().get("sggux"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("ukklelss", response.id());
        Assertions.assertEquals("blycsxzujksr", response.name());
        Assertions.assertEquals("smdesqplpvmjcd", response.type());
        Assertions.assertEquals("mnaoy", response.etag().get("nkcoeqswankltyt"));
        Assertions.assertEquals(Kind.USER, response.kind());
        Assertions.assertEquals("inuqtljq", response.displayName());
        Assertions.assertEquals("bbpihehcecy", response.serializedData());
        Assertions.assertEquals("rqbrjbbmpxdlvyk", response.version());
        Assertions.assertEquals("crse", response.category());
        Assertions.assertEquals("ksghudgzhxogjgg", response.tagsPropertiesTags().get(0));
        Assertions.assertEquals("hpwpgddeimawzovg", response.sourceId());
        Assertions.assertEquals("um", response.storageUri());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
