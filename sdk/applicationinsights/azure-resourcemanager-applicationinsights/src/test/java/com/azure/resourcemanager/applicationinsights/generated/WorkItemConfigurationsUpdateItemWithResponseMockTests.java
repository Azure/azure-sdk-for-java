// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.WorkItemConfiguration;
import com.azure.resourcemanager.applicationinsights.models.WorkItemCreateConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkItemConfigurationsUpdateItemWithResponseMockTests {
    @Test
    public void testUpdateItemWithResponse() throws Exception {
        String responseStr
            = "{\"ConnectorId\":\"nhxk\",\"ConfigDisplayName\":\"v\",\"IsDefault\":true,\"Id\":\"zvulj\",\"ConfigProperties\":\"aeranokqgukkjqnv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApplicationInsightsManager manager = ApplicationInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkItemConfiguration response = manager.workItemConfigurations()
            .updateItemWithResponse("lhhxudbxvodhtnsi", "ud", "z",
                new WorkItemCreateConfiguration().withConnectorId("es")
                    .withConnectorDataConfiguration("dlpagzrcxfail")
                    .withValidateOnly(false)
                    .withWorkItemProperties(mapOf("lnacgcc", "dboxdfgsftufqobr")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("nhxk", response.connectorId());
        Assertions.assertEquals("v", response.configDisplayName());
        Assertions.assertEquals(true, response.isDefault());
        Assertions.assertEquals("zvulj", response.id());
        Assertions.assertEquals("aeranokqgukkjqnv", response.configProperties());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
