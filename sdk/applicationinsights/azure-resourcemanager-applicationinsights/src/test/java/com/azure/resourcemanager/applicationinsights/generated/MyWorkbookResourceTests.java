// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentity;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentityType;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookResource;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookUserAssignedIdentities;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MyWorkbookResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MyWorkbookResource model =
            BinaryData
                .fromString(
                    "{\"identity\":{\"userAssignedIdentities\":{\"principalId\":\"lxyjr\",\"tenantId\":\"agafcnihgwqap\"},\"type\":\"None\"},\"id\":\"rfouyftaakcpw\",\"name\":\"yzvqt\",\"type\":\"nubexk\",\"etag\":{\"d\":\"zdopcjwvnhd\",\"twuoegrpkhjwni\":\"mgxcxrslpm\"},\"location\":\"qsluicp\",\"tags\":{\"uefywsbpfvmwy\":\"kzzlvmbmpaxmodf\"}}")
                .toObject(MyWorkbookResource.class);
        Assertions.assertEquals("qsluicp", model.location());
        Assertions.assertEquals("kzzlvmbmpaxmodf", model.tags().get("uefywsbpfvmwy"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("rfouyftaakcpw", model.id());
        Assertions.assertEquals("yzvqt", model.name());
        Assertions.assertEquals("nubexk", model.type());
        Assertions.assertEquals("zdopcjwvnhd", model.etag().get("d"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MyWorkbookResource model =
            new MyWorkbookResource()
                .withLocation("qsluicp")
                .withTags(mapOf("uefywsbpfvmwy", "kzzlvmbmpaxmodf"))
                .withIdentity(
                    new MyWorkbookManagedIdentity()
                        .withUserAssignedIdentities(new MyWorkbookUserAssignedIdentities())
                        .withType(MyWorkbookManagedIdentityType.NONE))
                .withId("rfouyftaakcpw")
                .withName("yzvqt")
                .withType("nubexk")
                .withEtag(mapOf("d", "zdopcjwvnhd", "twuoegrpkhjwni", "mgxcxrslpm"));
        model = BinaryData.fromObject(model).toObject(MyWorkbookResource.class);
        Assertions.assertEquals("qsluicp", model.location());
        Assertions.assertEquals("kzzlvmbmpaxmodf", model.tags().get("uefywsbpfvmwy"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("rfouyftaakcpw", model.id());
        Assertions.assertEquals("yzvqt", model.name());
        Assertions.assertEquals("nubexk", model.type());
        Assertions.assertEquals("zdopcjwvnhd", model.etag().get("d"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
