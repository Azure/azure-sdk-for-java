// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentity;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentityType;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookResource;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookUserAssignedIdentities;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MyWorkbookResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MyWorkbookResource model = BinaryData.fromString(
            "{\"identity\":{\"userAssignedIdentities\":{\"principalId\":\"yrcdlbhshfwprac\",\"tenantId\":\"wity\"},\"type\":\"None\"},\"id\":\"pjorwkqnyhg\",\"name\":\"ij\",\"type\":\"jivfxzsjabib\",\"etag\":{\"vfgbvfvpdboda\":\"qunyowxwlmdjr\"},\"location\":\"izsjqlhkrr\",\"tags\":{\"p\":\"eibq\",\"ndzwmkrefa\":\"kghv\"}}")
            .toObject(MyWorkbookResource.class);
        Assertions.assertEquals("izsjqlhkrr", model.location());
        Assertions.assertEquals("eibq", model.tags().get("p"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("pjorwkqnyhg", model.id());
        Assertions.assertEquals("ij", model.name());
        Assertions.assertEquals("jivfxzsjabib", model.type());
        Assertions.assertEquals("qunyowxwlmdjr", model.etag().get("vfgbvfvpdboda"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MyWorkbookResource model = new MyWorkbookResource().withLocation("izsjqlhkrr")
            .withTags(mapOf("p", "eibq", "ndzwmkrefa", "kghv"))
            .withIdentity(
                new MyWorkbookManagedIdentity().withUserAssignedIdentities(new MyWorkbookUserAssignedIdentities())
                    .withType(MyWorkbookManagedIdentityType.NONE))
            .withId("pjorwkqnyhg")
            .withName("ij")
            .withType("jivfxzsjabib")
            .withEtag(mapOf("vfgbvfvpdboda", "qunyowxwlmdjr"));
        model = BinaryData.fromObject(model).toObject(MyWorkbookResource.class);
        Assertions.assertEquals("izsjqlhkrr", model.location());
        Assertions.assertEquals("eibq", model.tags().get("p"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("pjorwkqnyhg", model.id());
        Assertions.assertEquals("ij", model.name());
        Assertions.assertEquals("jivfxzsjabib", model.type());
        Assertions.assertEquals("qunyowxwlmdjr", model.etag().get("vfgbvfvpdboda"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
