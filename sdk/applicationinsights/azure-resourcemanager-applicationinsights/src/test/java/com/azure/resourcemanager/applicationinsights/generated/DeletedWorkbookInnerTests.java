// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.fluent.models.DeletedWorkbookInner;
import com.azure.resourcemanager.applicationinsights.models.WorkbookSharedTypeKind;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeletedWorkbookInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeletedWorkbookInner model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"cbihwqk\",\"serializedData\":\"fdntwjchrdgoih\",\"version\":\"mwctondzjluudfd\",\"timeModified\":\"2021-09-17T07:55:34Z\",\"category\":\"gytsbwtovv\",\"tags\":[\"einqf\",\"ufxqknpirgnepttw\",\"msniffc\"],\"userId\":\"qnrojlpijnkrxfrd\",\"sourceId\":\"c\",\"storageUri\":\"tizzronasxif\",\"description\":\"zq\",\"revision\":\"hftwesgog\"},\"kind\":\"shared\",\"etag\":\"nnxk\",\"location\":\"gnyhmossxkkg\",\"tags\":{\"hqxvcxgfrpdsofbs\":\"rghxjb\",\"z\":\"rnsvbuswd\",\"rtkfawnopq\":\"ybycnunvj\",\"x\":\"ikyzirtxdy\"},\"id\":\"ejnt\",\"name\":\"sewgioilqukr\",\"type\":\"dxtqmieoxo\"}")
            .toObject(DeletedWorkbookInner.class);
        Assertions.assertEquals("gnyhmossxkkg", model.location());
        Assertions.assertEquals("rghxjb", model.tags().get("hqxvcxgfrpdsofbs"));
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("nnxk", model.etag());
        Assertions.assertEquals("cbihwqk", model.displayName());
        Assertions.assertEquals("fdntwjchrdgoih", model.serializedData());
        Assertions.assertEquals("mwctondzjluudfd", model.version());
        Assertions.assertEquals("gytsbwtovv", model.category());
        Assertions.assertEquals("einqf", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("c", model.sourceId());
        Assertions.assertEquals("tizzronasxif", model.storageUri());
        Assertions.assertEquals("zq", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeletedWorkbookInner model = new DeletedWorkbookInner().withLocation("gnyhmossxkkg")
            .withTags(
                mapOf("hqxvcxgfrpdsofbs", "rghxjb", "z", "rnsvbuswd", "rtkfawnopq", "ybycnunvj", "x", "ikyzirtxdy"))
            .withKind(WorkbookSharedTypeKind.SHARED)
            .withEtag("nnxk")
            .withDisplayName("cbihwqk")
            .withSerializedData("fdntwjchrdgoih")
            .withVersion("mwctondzjluudfd")
            .withCategory("gytsbwtovv")
            .withTagsPropertiesTags(Arrays.asList("einqf", "ufxqknpirgnepttw", "msniffc"))
            .withSourceId("c")
            .withStorageUri("tizzronasxif")
            .withDescription("zq");
        model = BinaryData.fromObject(model).toObject(DeletedWorkbookInner.class);
        Assertions.assertEquals("gnyhmossxkkg", model.location());
        Assertions.assertEquals("rghxjb", model.tags().get("hqxvcxgfrpdsofbs"));
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("nnxk", model.etag());
        Assertions.assertEquals("cbihwqk", model.displayName());
        Assertions.assertEquals("fdntwjchrdgoih", model.serializedData());
        Assertions.assertEquals("mwctondzjluudfd", model.version());
        Assertions.assertEquals("gytsbwtovv", model.category());
        Assertions.assertEquals("einqf", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("c", model.sourceId());
        Assertions.assertEquals("tizzronasxif", model.storageUri());
        Assertions.assertEquals("zq", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
