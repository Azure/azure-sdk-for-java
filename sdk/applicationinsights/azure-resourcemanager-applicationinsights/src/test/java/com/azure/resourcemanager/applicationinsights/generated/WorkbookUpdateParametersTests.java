// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.models.WorkbookUpdateParameters;
import com.azure.resourcemanager.applicationinsights.models.WorkbookUpdateSharedTypeKind;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkbookUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkbookUpdateParameters model = BinaryData.fromString(
            "{\"kind\":\"shared\",\"tags\":{\"jivfxzsjabib\":\"ij\"},\"properties\":{\"displayName\":\"tawfsdjpvkvp\",\"serializedData\":\"xbkzbzkdvncj\",\"category\":\"udurgkakmokz\",\"tags\":[\"klff\"],\"description\":\"ouw\",\"revision\":\"gzrf\"}}")
            .toObject(WorkbookUpdateParameters.class);
        Assertions.assertEquals(WorkbookUpdateSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("ij", model.tags().get("jivfxzsjabib"));
        Assertions.assertEquals("tawfsdjpvkvp", model.displayName());
        Assertions.assertEquals("xbkzbzkdvncj", model.serializedData());
        Assertions.assertEquals("udurgkakmokz", model.category());
        Assertions.assertEquals("klff", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("ouw", model.description());
        Assertions.assertEquals("gzrf", model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkbookUpdateParameters model = new WorkbookUpdateParameters().withKind(WorkbookUpdateSharedTypeKind.SHARED)
            .withTags(mapOf("jivfxzsjabib", "ij"))
            .withDisplayName("tawfsdjpvkvp")
            .withSerializedData("xbkzbzkdvncj")
            .withCategory("udurgkakmokz")
            .withTagsPropertiesTags(Arrays.asList("klff"))
            .withDescription("ouw")
            .withRevision("gzrf");
        model = BinaryData.fromObject(model).toObject(WorkbookUpdateParameters.class);
        Assertions.assertEquals(WorkbookUpdateSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("ij", model.tags().get("jivfxzsjabib"));
        Assertions.assertEquals("tawfsdjpvkvp", model.displayName());
        Assertions.assertEquals("xbkzbzkdvncj", model.serializedData());
        Assertions.assertEquals("udurgkakmokz", model.category());
        Assertions.assertEquals("klff", model.tagsPropertiesTags().get(0));
        Assertions.assertEquals("ouw", model.description());
        Assertions.assertEquals("gzrf", model.revision());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
