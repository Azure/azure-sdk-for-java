// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.applicationinsights.ApplicationInsightsManager;
import com.azure.resourcemanager.applicationinsights.models.CategoryType;
import com.azure.resourcemanager.applicationinsights.models.Kind;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbook;
import com.azure.resourcemanager.applicationinsights.models.MyWorkbookManagedIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MyWorkbooksListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"kind\":\"user\",\"properties\":{\"displayName\":\"n\",\"serializedData\":\"fbycjs\",\"version\":\"wwixzvumw\",\"timeModified\":\"qhndvnoam\",\"category\":\"dsehaohdjhhflzo\",\"tags\":[\"ox\",\"e\",\"nje\"],\"userId\":\"gltsxoat\",\"sourceId\":\"g\",\"storageUri\":\"npbs\"},\"identity\":{\"userAssignedIdentities\":{\"principalId\":\"occsr\",\"tenantId\":\"zihmipgawtxxpky\"},\"type\":\"None\"},\"id\":\"pdqmjxlyyzglgouw\",\"name\":\"lmjjyuo\",\"type\":\"qtobaxkjeyt\",\"etag\":{\"wkjaos\":\"sxwpndfcpfnznthj\",\"smgbzahgxqdl\":\"xuzvoamktcqi\"},\"location\":\"rtltla\",\"tags\":{\"atbhjmznn\":\"tz\",\"qeqala\":\"s\",\"tgfebwln\":\"vlagun\",\"av\":\"mhyreeudz\"}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApplicationInsightsManager manager =
            ApplicationInsightsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<MyWorkbook> response =
            manager
                .myWorkbooks()
                .list(CategoryType.TSG, Arrays.asList("zruswh"), false, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rtltla", response.iterator().next().location());
        Assertions.assertEquals("tz", response.iterator().next().tags().get("atbhjmznn"));
        Assertions.assertEquals(MyWorkbookManagedIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("pdqmjxlyyzglgouw", response.iterator().next().id());
        Assertions.assertEquals("lmjjyuo", response.iterator().next().name());
        Assertions.assertEquals("qtobaxkjeyt", response.iterator().next().type());
        Assertions.assertEquals("sxwpndfcpfnznthj", response.iterator().next().etag().get("wkjaos"));
        Assertions.assertEquals(Kind.USER, response.iterator().next().kind());
        Assertions.assertEquals("n", response.iterator().next().displayName());
        Assertions.assertEquals("fbycjs", response.iterator().next().serializedData());
        Assertions.assertEquals("wwixzvumw", response.iterator().next().version());
        Assertions.assertEquals("dsehaohdjhhflzo", response.iterator().next().category());
        Assertions.assertEquals("ox", response.iterator().next().tagsPropertiesTags().get(0));
        Assertions.assertEquals("g", response.iterator().next().sourceId());
        Assertions.assertEquals("npbs", response.iterator().next().storageUri());
    }
}
