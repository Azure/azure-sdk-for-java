// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.applicationinsights.models.DeletedWorkbookResource;
import com.azure.resourcemanager.applicationinsights.models.WorkbookSharedTypeKind;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeletedWorkbookResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeletedWorkbookResource model = BinaryData.fromString(
            "{\"kind\":\"shared\",\"etag\":\"pqjlihhyusps\",\"location\":\"sdvlmfwdgzxulucv\",\"tags\":{\"zvxurisjnhny\":\"rsre\",\"hu\":\"xifqjzgxm\",\"cesutrgjupauut\":\"lw\",\"qg\":\"woqhihe\"},\"id\":\"zpnfqntcypsxj\",\"name\":\"foimwkslircizjxv\",\"type\":\"dfcea\"}")
            .toObject(DeletedWorkbookResource.class);
        Assertions.assertEquals("sdvlmfwdgzxulucv", model.location());
        Assertions.assertEquals("rsre", model.tags().get("zvxurisjnhny"));
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("pqjlihhyusps", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeletedWorkbookResource model = new DeletedWorkbookResource().withLocation("sdvlmfwdgzxulucv")
            .withTags(mapOf("zvxurisjnhny", "rsre", "hu", "xifqjzgxm", "cesutrgjupauut", "lw", "qg", "woqhihe"))
            .withKind(WorkbookSharedTypeKind.SHARED)
            .withEtag("pqjlihhyusps");
        model = BinaryData.fromObject(model).toObject(DeletedWorkbookResource.class);
        Assertions.assertEquals("sdvlmfwdgzxulucv", model.location());
        Assertions.assertEquals("rsre", model.tags().get("zvxurisjnhny"));
        Assertions.assertEquals(WorkbookSharedTypeKind.SHARED, model.kind());
        Assertions.assertEquals("pqjlihhyusps", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
