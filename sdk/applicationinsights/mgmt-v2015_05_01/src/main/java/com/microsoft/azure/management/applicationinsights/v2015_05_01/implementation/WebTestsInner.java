/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.TagsResource;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in WebTests.
 */
public class WebTestsInner implements InnerSupportsGet<WebTestInner>, InnerSupportsDelete<Void>, InnerSupportsListing<WebTestInner> {
    /** The Retrofit service to perform REST calls. */
    private WebTestsService service;
    /** The service client containing this operation class. */
    private ApplicationInsightsManagementClientImpl client;

    /**
     * Initializes an instance of WebTestsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public WebTestsInner(Retrofit retrofit, ApplicationInsightsManagementClientImpl client) {
        this.service = retrofit.create(WebTestsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for WebTests to be
     * used by Retrofit to perform actually REST calls.
     */
    interface WebTestsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("webTestName") String webTestName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("webTestName") String webTestName, @Query("api-version") String apiVersion, @Body WebTestInner webTestDefinition, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests updateTags" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}")
        Observable<Response<ResponseBody>> updateTags(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("webTestName") String webTestName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TagsResource webTestTags, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("webTestName") String webTestName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Insights/webtests")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests listByComponent" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{componentName}/webtests")
        Observable<Response<ResponseBody>> listByComponent(@Path("componentName") String componentName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests listByComponentNext" })
        @GET
        Observable<Response<ResponseBody>> listByComponentNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WebTestInner&gt; object if successful.
     */
    public PagedList<WebTestInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<WebTestInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<WebTestInner>(response.body()) {
            @Override
            public Page<WebTestInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WebTestInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<WebTestInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<Page<WebTestInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<WebTestInner>>, Page<WebTestInner>>() {
                @Override
                public Page<WebTestInner> call(ServiceResponse<Page<WebTestInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<WebTestInner>>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(ServiceResponse<Page<WebTestInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
    ServiceResponse<PageImpl<WebTestInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WebTestInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WebTestInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WebTestInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WebTestInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WebTestInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WebTestInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a specific Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WebTestInner object if successful.
     */
    public WebTestInner getByResourceGroup(String resourceGroupName, String webTestName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, webTestName).toBlocking().single().body();
    }

    /**
     * Get a specific Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WebTestInner> getByResourceGroupAsync(String resourceGroupName, String webTestName, final ServiceCallback<WebTestInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, webTestName), serviceCallback);
    }

    /**
     * Get a specific Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WebTestInner object
     */
    public Observable<WebTestInner> getByResourceGroupAsync(String resourceGroupName, String webTestName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, webTestName).map(new Func1<ServiceResponse<WebTestInner>, WebTestInner>() {
            @Override
            public WebTestInner call(ServiceResponse<WebTestInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a specific Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WebTestInner object
     */
    public Observable<ServiceResponse<WebTestInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String webTestName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (webTestName == null) {
            throw new IllegalArgumentException("Parameter webTestName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, this.client.subscriptionId(), webTestName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WebTestInner>>>() {
                @Override
                public Observable<ServiceResponse<WebTestInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WebTestInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WebTestInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WebTestInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WebTestInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param webTestDefinition Properties that need to be specified to create or update an Application Insights web test definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WebTestInner object if successful.
     */
    public WebTestInner createOrUpdate(String resourceGroupName, String webTestName, WebTestInner webTestDefinition) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, webTestName, webTestDefinition).toBlocking().single().body();
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param webTestDefinition Properties that need to be specified to create or update an Application Insights web test definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WebTestInner> createOrUpdateAsync(String resourceGroupName, String webTestName, WebTestInner webTestDefinition, final ServiceCallback<WebTestInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, webTestName, webTestDefinition), serviceCallback);
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param webTestDefinition Properties that need to be specified to create or update an Application Insights web test definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WebTestInner object
     */
    public Observable<WebTestInner> createOrUpdateAsync(String resourceGroupName, String webTestName, WebTestInner webTestDefinition) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, webTestName, webTestDefinition).map(new Func1<ServiceResponse<WebTestInner>, WebTestInner>() {
            @Override
            public WebTestInner call(ServiceResponse<WebTestInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param webTestDefinition Properties that need to be specified to create or update an Application Insights web test definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WebTestInner object
     */
    public Observable<ServiceResponse<WebTestInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String webTestName, WebTestInner webTestDefinition) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (webTestName == null) {
            throw new IllegalArgumentException("Parameter webTestName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (webTestDefinition == null) {
            throw new IllegalArgumentException("Parameter webTestDefinition is required and cannot be null.");
        }
        Validator.validate(webTestDefinition);
        return service.createOrUpdate(resourceGroupName, this.client.subscriptionId(), webTestName, this.client.apiVersion(), webTestDefinition, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WebTestInner>>>() {
                @Override
                public Observable<ServiceResponse<WebTestInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WebTestInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WebTestInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WebTestInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WebTestInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WebTestInner object if successful.
     */
    public WebTestInner updateTags(String resourceGroupName, String webTestName) {
        return updateTagsWithServiceResponseAsync(resourceGroupName, webTestName).toBlocking().single().body();
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WebTestInner> updateTagsAsync(String resourceGroupName, String webTestName, final ServiceCallback<WebTestInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateTagsWithServiceResponseAsync(resourceGroupName, webTestName), serviceCallback);
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WebTestInner object
     */
    public Observable<WebTestInner> updateTagsAsync(String resourceGroupName, String webTestName) {
        return updateTagsWithServiceResponseAsync(resourceGroupName, webTestName).map(new Func1<ServiceResponse<WebTestInner>, WebTestInner>() {
            @Override
            public WebTestInner call(ServiceResponse<WebTestInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WebTestInner object
     */
    public Observable<ServiceResponse<WebTestInner>> updateTagsWithServiceResponseAsync(String resourceGroupName, String webTestName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (webTestName == null) {
            throw new IllegalArgumentException("Parameter webTestName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        TagsResource webTestTags = new TagsResource();
        webTestTags.withTags(null);
        return service.updateTags(resourceGroupName, this.client.subscriptionId(), webTestName, this.client.apiVersion(), this.client.acceptLanguage(), webTestTags, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WebTestInner>>>() {
                @Override
                public Observable<ServiceResponse<WebTestInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WebTestInner> clientResponse = updateTagsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WebTestInner object if successful.
     */
    public WebTestInner updateTags(String resourceGroupName, String webTestName, Map<String, String> tags) {
        return updateTagsWithServiceResponseAsync(resourceGroupName, webTestName, tags).toBlocking().single().body();
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param tags Resource tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WebTestInner> updateTagsAsync(String resourceGroupName, String webTestName, Map<String, String> tags, final ServiceCallback<WebTestInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateTagsWithServiceResponseAsync(resourceGroupName, webTestName, tags), serviceCallback);
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WebTestInner object
     */
    public Observable<WebTestInner> updateTagsAsync(String resourceGroupName, String webTestName, Map<String, String> tags) {
        return updateTagsWithServiceResponseAsync(resourceGroupName, webTestName, tags).map(new Func1<ServiceResponse<WebTestInner>, WebTestInner>() {
            @Override
            public WebTestInner call(ServiceResponse<WebTestInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an Application Insights web test definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WebTestInner object
     */
    public Observable<ServiceResponse<WebTestInner>> updateTagsWithServiceResponseAsync(String resourceGroupName, String webTestName, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (webTestName == null) {
            throw new IllegalArgumentException("Parameter webTestName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        TagsResource webTestTags = new TagsResource();
        webTestTags.withTags(tags);
        return service.updateTags(resourceGroupName, this.client.subscriptionId(), webTestName, this.client.apiVersion(), this.client.acceptLanguage(), webTestTags, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WebTestInner>>>() {
                @Override
                public Observable<ServiceResponse<WebTestInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WebTestInner> clientResponse = updateTagsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WebTestInner> updateTagsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WebTestInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WebTestInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes an Application Insights web test.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String webTestName) {
        deleteWithServiceResponseAsync(resourceGroupName, webTestName).toBlocking().single().body();
    }

    /**
     * Deletes an Application Insights web test.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String webTestName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, webTestName), serviceCallback);
    }

    /**
     * Deletes an Application Insights web test.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String webTestName) {
        return deleteWithServiceResponseAsync(resourceGroupName, webTestName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an Application Insights web test.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param webTestName The name of the Application Insights webtest resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String webTestName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (webTestName == null) {
            throw new IllegalArgumentException("Parameter webTestName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, webTestName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WebTestInner&gt; object if successful.
     */
    public PagedList<WebTestInner> list() {
        ServiceResponse<Page<WebTestInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<WebTestInner>(response.body()) {
            @Override
            public Page<WebTestInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WebTestInner>> listAsync(final ListOperationCallback<WebTestInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<Page<WebTestInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<WebTestInner>>, Page<WebTestInner>>() {
                @Override
                public Page<WebTestInner> call(ServiceResponse<Page<WebTestInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<WebTestInner>>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(ServiceResponse<Page<WebTestInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WebTestInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WebTestInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WebTestInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WebTestInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WebTestInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WebTestInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
     * @param componentName The name of the Application Insights component resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WebTestInner&gt; object if successful.
     */
    public PagedList<WebTestInner> listByComponent(final String componentName, final String resourceGroupName) {
        ServiceResponse<Page<WebTestInner>> response = listByComponentSinglePageAsync(componentName, resourceGroupName).toBlocking().single();
        return new PagedList<WebTestInner>(response.body()) {
            @Override
            public Page<WebTestInner> nextPage(String nextPageLink) {
                return listByComponentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
     * @param componentName The name of the Application Insights component resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WebTestInner>> listByComponentAsync(final String componentName, final String resourceGroupName, final ListOperationCallback<WebTestInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByComponentSinglePageAsync(componentName, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(String nextPageLink) {
                    return listByComponentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
     * @param componentName The name of the Application Insights component resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<Page<WebTestInner>> listByComponentAsync(final String componentName, final String resourceGroupName) {
        return listByComponentWithServiceResponseAsync(componentName, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<WebTestInner>>, Page<WebTestInner>>() {
                @Override
                public Page<WebTestInner> call(ServiceResponse<Page<WebTestInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
     * @param componentName The name of the Application Insights component resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listByComponentWithServiceResponseAsync(final String componentName, final String resourceGroupName) {
        return listByComponentSinglePageAsync(componentName, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<WebTestInner>>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(ServiceResponse<Page<WebTestInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByComponentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
    ServiceResponse<PageImpl<WebTestInner>> * @param componentName The name of the Application Insights component resource.
    ServiceResponse<PageImpl<WebTestInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WebTestInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listByComponentSinglePageAsync(final String componentName, final String resourceGroupName) {
        if (componentName == null) {
            throw new IllegalArgumentException("Parameter componentName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByComponent(componentName, resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WebTestInner>> result = listByComponentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WebTestInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WebTestInner>> listByComponentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WebTestInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WebTestInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WebTestInner&gt; object if successful.
     */
    public PagedList<WebTestInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<WebTestInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WebTestInner>(response.body()) {
            @Override
            public Page<WebTestInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WebTestInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<WebTestInner>> serviceFuture, final ListOperationCallback<WebTestInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<Page<WebTestInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WebTestInner>>, Page<WebTestInner>>() {
                @Override
                public Page<WebTestInner> call(ServiceResponse<Page<WebTestInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WebTestInner>>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(ServiceResponse<Page<WebTestInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all Application Insights web tests defined within a specified resource group.
     *
    ServiceResponse<PageImpl<WebTestInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WebTestInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WebTestInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WebTestInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WebTestInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WebTestInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WebTestInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WebTestInner&gt; object if successful.
     */
    public PagedList<WebTestInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<WebTestInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WebTestInner>(response.body()) {
            @Override
            public Page<WebTestInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WebTestInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<WebTestInner>> serviceFuture, final ListOperationCallback<WebTestInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<Page<WebTestInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WebTestInner>>, Page<WebTestInner>>() {
                @Override
                public Page<WebTestInner> call(ServiceResponse<Page<WebTestInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WebTestInner>>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(ServiceResponse<Page<WebTestInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all Application Insights web test alerts definitions within a subscription.
     *
    ServiceResponse<PageImpl<WebTestInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WebTestInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WebTestInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WebTestInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WebTestInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WebTestInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WebTestInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WebTestInner&gt; object if successful.
     */
    public PagedList<WebTestInner> listByComponentNext(final String nextPageLink) {
        ServiceResponse<Page<WebTestInner>> response = listByComponentNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WebTestInner>(response.body()) {
            @Override
            public Page<WebTestInner> nextPage(String nextPageLink) {
                return listByComponentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WebTestInner>> listByComponentNextAsync(final String nextPageLink, final ServiceFuture<List<WebTestInner>> serviceFuture, final ListOperationCallback<WebTestInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByComponentNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(String nextPageLink) {
                    return listByComponentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<Page<WebTestInner>> listByComponentNextAsync(final String nextPageLink) {
        return listByComponentNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WebTestInner>>, Page<WebTestInner>>() {
                @Override
                public Page<WebTestInner> call(ServiceResponse<Page<WebTestInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WebTestInner&gt; object
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listByComponentNextWithServiceResponseAsync(final String nextPageLink) {
        return listByComponentNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WebTestInner>>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(ServiceResponse<Page<WebTestInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByComponentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all Application Insights web tests defined for the specified component.
     *
    ServiceResponse<PageImpl<WebTestInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WebTestInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WebTestInner>>> listByComponentNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByComponentNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WebTestInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WebTestInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WebTestInner>> result = listByComponentNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WebTestInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WebTestInner>> listByComponentNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WebTestInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WebTestInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
