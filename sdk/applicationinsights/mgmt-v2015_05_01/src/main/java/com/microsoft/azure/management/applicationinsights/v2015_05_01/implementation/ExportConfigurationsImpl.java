/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ExportConfigurations;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ApplicationInsightsComponentExportConfiguration;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ApplicationInsightsComponentExportRequest;

class ExportConfigurationsImpl extends WrapperImpl<ExportConfigurationsInner> implements ExportConfigurations {
    private final InsightsManager manager;

    ExportConfigurationsImpl(InsightsManager manager) {
        super(manager.inner().exportConfigurations());
        this.manager = manager;
    }

    public InsightsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ApplicationInsightsComponentExportConfiguration> listAsync(String resourceGroupName, String resourceName) {
        ExportConfigurationsInner client = this.inner();
        return client.listAsync(resourceGroupName, resourceName)
        .flatMap(new Func1<List<ApplicationInsightsComponentExportConfigurationInner>, Observable<ApplicationInsightsComponentExportConfigurationInner>>() {
            @Override
            public Observable<ApplicationInsightsComponentExportConfigurationInner> call(List<ApplicationInsightsComponentExportConfigurationInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ApplicationInsightsComponentExportConfigurationInner, ApplicationInsightsComponentExportConfiguration>() {
            @Override
            public ApplicationInsightsComponentExportConfiguration call(ApplicationInsightsComponentExportConfigurationInner inner) {
                return new ApplicationInsightsComponentExportConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ApplicationInsightsComponentExportConfiguration> createAsync(String resourceGroupName, String resourceName, ApplicationInsightsComponentExportRequest exportProperties) {
        ExportConfigurationsInner client = this.inner();
        return client.createAsync(resourceGroupName, resourceName, exportProperties)
        .flatMap(new Func1<List<ApplicationInsightsComponentExportConfigurationInner>, Observable<ApplicationInsightsComponentExportConfigurationInner>>() {
            @Override
            public Observable<ApplicationInsightsComponentExportConfigurationInner> call(List<ApplicationInsightsComponentExportConfigurationInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ApplicationInsightsComponentExportConfigurationInner, ApplicationInsightsComponentExportConfiguration>() {
            @Override
            public ApplicationInsightsComponentExportConfiguration call(ApplicationInsightsComponentExportConfigurationInner inner) {
                return new ApplicationInsightsComponentExportConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ApplicationInsightsComponentExportConfiguration> deleteAsync(String resourceGroupName, String resourceName, String exportId) {
        ExportConfigurationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, resourceName, exportId)
        .map(new Func1<ApplicationInsightsComponentExportConfigurationInner, ApplicationInsightsComponentExportConfiguration>() {
            @Override
            public ApplicationInsightsComponentExportConfiguration call(ApplicationInsightsComponentExportConfigurationInner inner) {
                return new ApplicationInsightsComponentExportConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ApplicationInsightsComponentExportConfiguration> getAsync(String resourceGroupName, String resourceName, String exportId) {
        ExportConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, resourceName, exportId)
        .map(new Func1<ApplicationInsightsComponentExportConfigurationInner, ApplicationInsightsComponentExportConfiguration>() {
            @Override
            public ApplicationInsightsComponentExportConfiguration call(ApplicationInsightsComponentExportConfigurationInner inner) {
                return new ApplicationInsightsComponentExportConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ApplicationInsightsComponentExportConfiguration> updateAsync(String resourceGroupName, String resourceName, String exportId, ApplicationInsightsComponentExportRequest exportProperties) {
        ExportConfigurationsInner client = this.inner();
        return client.updateAsync(resourceGroupName, resourceName, exportId, exportProperties)
        .map(new Func1<ApplicationInsightsComponentExportConfigurationInner, ApplicationInsightsComponentExportConfiguration>() {
            @Override
            public ApplicationInsightsComponentExportConfiguration call(ApplicationInsightsComponentExportConfigurationInner inner) {
                return new ApplicationInsightsComponentExportConfigurationImpl(inner, manager());
            }
        });
    }

}
