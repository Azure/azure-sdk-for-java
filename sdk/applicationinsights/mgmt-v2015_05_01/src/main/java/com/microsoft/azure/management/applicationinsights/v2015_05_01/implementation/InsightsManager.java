/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Operations;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Annotations;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.APIKeys;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ExportConfigurations;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ComponentCurrentBillingFeatures;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ComponentQuotaStatus;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ComponentFeatureCapabilities;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ComponentAvailableFeatures;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ProactiveDetectionConfigurations;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Components;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.WorkItemConfigurations;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Favorites;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTestLocations;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTests;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.AnalyticsItems;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Workbooks;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.MyWorkbooks;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Insights resource management.
 */
public final class InsightsManager extends ManagerCore<InsightsManager, ApplicationInsightsManagementClientImpl> {
    private Operations operations;
    private Annotations annotations;
    private APIKeys aPIKeys;
    private ExportConfigurations exportConfigurations;
    private ComponentCurrentBillingFeatures componentCurrentBillingFeatures;
    private ComponentQuotaStatus componentQuotaStatus;
    private ComponentFeatureCapabilities componentFeatureCapabilities;
    private ComponentAvailableFeatures componentAvailableFeatures;
    private ProactiveDetectionConfigurations proactiveDetectionConfigurations;
    private Components components;
    private WorkItemConfigurations workItemConfigurations;
    private Favorites favorites;
    private WebTestLocations webTestLocations;
    private WebTests webTests;
    private AnalyticsItems analyticsItems;
    private Workbooks workbooks;
    private MyWorkbooks myWorkbooks;
    /**
    * Get a Configurable instance that can be used to create InsightsManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new InsightsManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of InsightsManager that exposes Insights resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the InsightsManager
    */
    public static InsightsManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new InsightsManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of InsightsManager that exposes Insights resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the InsightsManager
    */
    public static InsightsManager authenticate(RestClient restClient, String subscriptionId) {
        return new InsightsManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of InsightsManager that exposes Insights management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Insights management API entry points that work across subscriptions
        */
        InsightsManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage Annotations.
     */
    public Annotations annotations() {
        if (this.annotations == null) {
            this.annotations = new AnnotationsImpl(this);
        }
        return this.annotations;
    }

    /**
     * @return Entry point to manage APIKeys.
     */
    public APIKeys aPIKeys() {
        if (this.aPIKeys == null) {
            this.aPIKeys = new APIKeysImpl(this);
        }
        return this.aPIKeys;
    }

    /**
     * @return Entry point to manage ExportConfigurations.
     */
    public ExportConfigurations exportConfigurations() {
        if (this.exportConfigurations == null) {
            this.exportConfigurations = new ExportConfigurationsImpl(this);
        }
        return this.exportConfigurations;
    }

    /**
     * @return Entry point to manage ComponentCurrentBillingFeatures.
     */
    public ComponentCurrentBillingFeatures componentCurrentBillingFeatures() {
        if (this.componentCurrentBillingFeatures == null) {
            this.componentCurrentBillingFeatures = new ComponentCurrentBillingFeaturesImpl(this);
        }
        return this.componentCurrentBillingFeatures;
    }

    /**
     * @return Entry point to manage ComponentQuotaStatus.
     */
    public ComponentQuotaStatus componentQuotaStatus() {
        if (this.componentQuotaStatus == null) {
            this.componentQuotaStatus = new ComponentQuotaStatusImpl(this);
        }
        return this.componentQuotaStatus;
    }

    /**
     * @return Entry point to manage ComponentFeatureCapabilities.
     */
    public ComponentFeatureCapabilities componentFeatureCapabilities() {
        if (this.componentFeatureCapabilities == null) {
            this.componentFeatureCapabilities = new ComponentFeatureCapabilitiesImpl(this);
        }
        return this.componentFeatureCapabilities;
    }

    /**
     * @return Entry point to manage ComponentAvailableFeatures.
     */
    public ComponentAvailableFeatures componentAvailableFeatures() {
        if (this.componentAvailableFeatures == null) {
            this.componentAvailableFeatures = new ComponentAvailableFeaturesImpl(this);
        }
        return this.componentAvailableFeatures;
    }

    /**
     * @return Entry point to manage ProactiveDetectionConfigurations.
     */
    public ProactiveDetectionConfigurations proactiveDetectionConfigurations() {
        if (this.proactiveDetectionConfigurations == null) {
            this.proactiveDetectionConfigurations = new ProactiveDetectionConfigurationsImpl(this);
        }
        return this.proactiveDetectionConfigurations;
    }

    /**
     * @return Entry point to manage Components.
     */
    public Components components() {
        if (this.components == null) {
            this.components = new ComponentsImpl(this);
        }
        return this.components;
    }

    /**
     * @return Entry point to manage WorkItemConfigurations.
     */
    public WorkItemConfigurations workItemConfigurations() {
        if (this.workItemConfigurations == null) {
            this.workItemConfigurations = new WorkItemConfigurationsImpl(this);
        }
        return this.workItemConfigurations;
    }

    /**
     * @return Entry point to manage Favorites.
     */
    public Favorites favorites() {
        if (this.favorites == null) {
            this.favorites = new FavoritesImpl(this);
        }
        return this.favorites;
    }

    /**
     * @return Entry point to manage WebTestLocations.
     */
    public WebTestLocations webTestLocations() {
        if (this.webTestLocations == null) {
            this.webTestLocations = new WebTestLocationsImpl(this);
        }
        return this.webTestLocations;
    }

    /**
     * @return Entry point to manage WebTests.
     */
    public WebTests webTests() {
        if (this.webTests == null) {
            this.webTests = new WebTestsImpl(this);
        }
        return this.webTests;
    }

    /**
     * @return Entry point to manage AnalyticsItems.
     */
    public AnalyticsItems analyticsItems() {
        if (this.analyticsItems == null) {
            this.analyticsItems = new AnalyticsItemsImpl(this);
        }
        return this.analyticsItems;
    }

    /**
     * @return Entry point to manage Workbooks.
     */
    public Workbooks workbooks() {
        if (this.workbooks == null) {
            this.workbooks = new WorkbooksImpl(this);
        }
        return this.workbooks;
    }

    /**
     * @return Entry point to manage MyWorkbooks.
     */
    public MyWorkbooks myWorkbooks() {
        if (this.myWorkbooks == null) {
            this.myWorkbooks = new MyWorkbooksImpl(this);
        }
        return this.myWorkbooks;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public InsightsManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return InsightsManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private InsightsManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new ApplicationInsightsManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
