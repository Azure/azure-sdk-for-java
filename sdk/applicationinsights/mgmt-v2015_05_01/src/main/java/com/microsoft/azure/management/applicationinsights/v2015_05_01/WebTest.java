/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation.InsightsManager;
import java.util.List;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation.WebTestInner;

/**
 * Type representing WebTest.
 */
public interface WebTest extends HasInner<WebTestInner>, Resource, GroupableResourceCore<InsightsManager, WebTestInner>, HasResourceGroup, Refreshable<WebTest>, Updatable<WebTest.Update>, HasManager<InsightsManager> {
    /**
     * @return the configuration value.
     */
    WebTestPropertiesConfiguration configuration();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the enabled value.
     */
    Boolean enabled();

    /**
     * @return the frequency value.
     */
    Integer frequency();

    /**
     * @return the kind value.
     */
    WebTestKind kind();

    /**
     * @return the locations value.
     */
    List<WebTestGeolocation> locations();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the retryEnabled value.
     */
    Boolean retryEnabled();

    /**
     * @return the syntheticMonitorId value.
     */
    String syntheticMonitorId();

    /**
     * @return the timeout value.
     */
    Integer timeout();

    /**
     * @return the webTestKind value.
     */
    WebTestKind webTestKind();

    /**
     * @return the webTestName value.
     */
    String webTestName();

    /**
     * The entirety of the WebTest definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithLocations, DefinitionStages.WithSyntheticMonitorId, DefinitionStages.WithWebTestKind, DefinitionStages.WithWebTestName, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of WebTest definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a WebTest definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the WebTest definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithLocations> {
        }

        /**
         * The stage of the webtest definition allowing to specify Locations.
         */
        interface WithLocations {
           /**
            * Specifies locations.
            */
            WithSyntheticMonitorId withLocations(List<WebTestGeolocation> locations);
        }

        /**
         * The stage of the webtest definition allowing to specify SyntheticMonitorId.
         */
        interface WithSyntheticMonitorId {
           /**
            * Specifies syntheticMonitorId.
            */
            WithWebTestKind withSyntheticMonitorId(String syntheticMonitorId);
        }

        /**
         * The stage of the webtest definition allowing to specify WebTestKind.
         */
        interface WithWebTestKind {
           /**
            * Specifies webTestKind.
            */
            WithWebTestName withWebTestKind(WebTestKind webTestKind);
        }

        /**
         * The stage of the webtest definition allowing to specify WebTestName.
         */
        interface WithWebTestName {
           /**
            * Specifies webTestName.
            */
            WithCreate withWebTestName(String webTestName);
        }

        /**
         * The stage of the webtest update allowing to specify Configuration.
         */
        interface WithConfiguration {
            /**
             * Specifies configuration.
             */
            WithCreate withConfiguration(WebTestPropertiesConfiguration configuration);
        }

        /**
         * The stage of the webtest update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the webtest update allowing to specify Enabled.
         */
        interface WithEnabled {
            /**
             * Specifies enabled.
             */
            WithCreate withEnabled(Boolean enabled);
        }

        /**
         * The stage of the webtest update allowing to specify Frequency.
         */
        interface WithFrequency {
            /**
             * Specifies frequency.
             */
            WithCreate withFrequency(Integer frequency);
        }

        /**
         * The stage of the webtest update allowing to specify Kind.
         */
        interface WithKind {
            /**
             * Specifies kind.
             */
            WithCreate withKind(WebTestKind kind);
        }

        /**
         * The stage of the webtest update allowing to specify RetryEnabled.
         */
        interface WithRetryEnabled {
            /**
             * Specifies retryEnabled.
             */
            WithCreate withRetryEnabled(Boolean retryEnabled);
        }

        /**
         * The stage of the webtest update allowing to specify Timeout.
         */
        interface WithTimeout {
            /**
             * Specifies timeout.
             */
            WithCreate withTimeout(Integer timeout);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<WebTest>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithConfiguration, DefinitionStages.WithDescription, DefinitionStages.WithEnabled, DefinitionStages.WithFrequency, DefinitionStages.WithKind, DefinitionStages.WithRetryEnabled, DefinitionStages.WithTimeout {
        }
    }
    /**
     * The template for a WebTest update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<WebTest>, Resource.UpdateWithTags<Update>, UpdateStages.WithConfiguration, UpdateStages.WithDescription, UpdateStages.WithEnabled, UpdateStages.WithFrequency, UpdateStages.WithKind, UpdateStages.WithRetryEnabled, UpdateStages.WithTimeout {
    }

    /**
     * Grouping of WebTest update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the webtest {0} allowing to specify Configuration.
         */
        interface WithConfiguration {
            /**
             * Specifies configuration.
             */
            Update withConfiguration(WebTestPropertiesConfiguration configuration);
        }

        /**
         * The stage of the webtest {0} allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the webtest {0} allowing to specify Enabled.
         */
        interface WithEnabled {
            /**
             * Specifies enabled.
             */
            Update withEnabled(Boolean enabled);
        }

        /**
         * The stage of the webtest {0} allowing to specify Frequency.
         */
        interface WithFrequency {
            /**
             * Specifies frequency.
             */
            Update withFrequency(Integer frequency);
        }

        /**
         * The stage of the webtest {0} allowing to specify Kind.
         */
        interface WithKind {
            /**
             * Specifies kind.
             */
            Update withKind(WebTestKind kind);
        }

        /**
         * The stage of the webtest {0} allowing to specify RetryEnabled.
         */
        interface WithRetryEnabled {
            /**
             * Specifies retryEnabled.
             */
            Update withRetryEnabled(Boolean retryEnabled);
        }

        /**
         * The stage of the webtest {0} allowing to specify Timeout.
         */
        interface WithTimeout {
            /**
             * Specifies timeout.
             */
            Update withTimeout(Integer timeout);
        }

    }
}
