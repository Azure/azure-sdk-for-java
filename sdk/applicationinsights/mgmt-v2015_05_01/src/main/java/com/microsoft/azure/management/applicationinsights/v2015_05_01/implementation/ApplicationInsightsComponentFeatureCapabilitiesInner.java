/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * An Application Insights component feature capabilities.
 */
public class ApplicationInsightsComponentFeatureCapabilitiesInner {
    /**
     * Whether allow to use continuous export feature.
     */
    @JsonProperty(value = "SupportExportData", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean supportExportData;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "BurstThrottlePolicy", access = JsonProperty.Access.WRITE_ONLY)
    private String burstThrottlePolicy;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "MetadataClass", access = JsonProperty.Access.WRITE_ONLY)
    private String metadataClass;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "LiveStreamMetrics", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean liveStreamMetrics;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "ApplicationMap", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean applicationMap;

    /**
     * Whether allow to use work item integration feature.
     */
    @JsonProperty(value = "WorkItemIntegration", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean workItemIntegration;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "PowerBIIntegration", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean powerBIIntegration;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "OpenSchema", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean openSchema;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "ProactiveDetection", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean proactiveDetection;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "AnalyticsIntegration", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean analyticsIntegration;

    /**
     * Whether allow to use multiple steps web test feature.
     */
    @JsonProperty(value = "MultipleStepWebTest", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean multipleStepWebTest;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "ApiAccessLevel", access = JsonProperty.Access.WRITE_ONLY)
    private String apiAccessLevel;

    /**
     * The application insights component used tracking type.
     */
    @JsonProperty(value = "TrackingType", access = JsonProperty.Access.WRITE_ONLY)
    private String trackingType;

    /**
     * Daily data volume cap in GB.
     */
    @JsonProperty(value = "DailyCap", access = JsonProperty.Access.WRITE_ONLY)
    private Double dailyCap;

    /**
     * Daily data volume cap UTC reset hour.
     */
    @JsonProperty(value = "DailyCapResetTime", access = JsonProperty.Access.WRITE_ONLY)
    private Double dailyCapResetTime;

    /**
     * Reserved, not used now.
     */
    @JsonProperty(value = "ThrottleRate", access = JsonProperty.Access.WRITE_ONLY)
    private Double throttleRate;

    /**
     * Get whether allow to use continuous export feature.
     *
     * @return the supportExportData value
     */
    public Boolean supportExportData() {
        return this.supportExportData;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the burstThrottlePolicy value
     */
    public String burstThrottlePolicy() {
        return this.burstThrottlePolicy;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the metadataClass value
     */
    public String metadataClass() {
        return this.metadataClass;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the liveStreamMetrics value
     */
    public Boolean liveStreamMetrics() {
        return this.liveStreamMetrics;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the applicationMap value
     */
    public Boolean applicationMap() {
        return this.applicationMap;
    }

    /**
     * Get whether allow to use work item integration feature.
     *
     * @return the workItemIntegration value
     */
    public Boolean workItemIntegration() {
        return this.workItemIntegration;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the powerBIIntegration value
     */
    public Boolean powerBIIntegration() {
        return this.powerBIIntegration;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the openSchema value
     */
    public Boolean openSchema() {
        return this.openSchema;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the proactiveDetection value
     */
    public Boolean proactiveDetection() {
        return this.proactiveDetection;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the analyticsIntegration value
     */
    public Boolean analyticsIntegration() {
        return this.analyticsIntegration;
    }

    /**
     * Get whether allow to use multiple steps web test feature.
     *
     * @return the multipleStepWebTest value
     */
    public Boolean multipleStepWebTest() {
        return this.multipleStepWebTest;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the apiAccessLevel value
     */
    public String apiAccessLevel() {
        return this.apiAccessLevel;
    }

    /**
     * Get the application insights component used tracking type.
     *
     * @return the trackingType value
     */
    public String trackingType() {
        return this.trackingType;
    }

    /**
     * Get daily data volume cap in GB.
     *
     * @return the dailyCap value
     */
    public Double dailyCap() {
        return this.dailyCap;
    }

    /**
     * Get daily data volume cap UTC reset hour.
     *
     * @return the dailyCapResetTime value
     */
    public Double dailyCapResetTime() {
        return this.dailyCapResetTime;
    }

    /**
     * Get reserved, not used now.
     *
     * @return the throttleRate value
     */
    public Double throttleRate() {
        return this.throttleRate;
    }

}
