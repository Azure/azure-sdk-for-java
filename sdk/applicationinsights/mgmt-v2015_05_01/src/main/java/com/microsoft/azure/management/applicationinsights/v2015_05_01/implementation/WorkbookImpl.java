/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Workbook;
import rx.Observable;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.SharedTypeKind;
import java.util.List;

class WorkbookImpl extends GroupableResourceCoreImpl<Workbook, WorkbookInner, WorkbookImpl, InsightsManager> implements Workbook, Workbook.Definition, Workbook.Update {
    WorkbookImpl(String name, WorkbookInner inner, InsightsManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Workbook> createResourceAsync() {
        WorkbooksInner client = this.manager().inner().workbooks();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Workbook> updateResourceAsync() {
        WorkbooksInner client = this.manager().inner().workbooks();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<WorkbookInner> getInnerAsync() {
        WorkbooksInner client = this.manager().inner().workbooks();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String category() {
        return this.inner().category();
    }

    @Override
    public SharedTypeKind kind() {
        return this.inner().kind();
    }

    @Override
    public String serializedData() {
        return this.inner().serializedData();
    }

    @Override
    public SharedTypeKind sharedTypeKind() {
        return this.inner().sharedTypeKind();
    }

    @Override
    public String sourceResourceId() {
        return this.inner().sourceResourceId();
    }

    @Override
    public String timeModified() {
        return this.inner().timeModified();
    }

    @Override
    public String userId() {
        return this.inner().userId();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

    @Override
    public String workbookId() {
        return this.inner().workbookId();
    }

    @Override
    public String workbookName() {
        return this.inner().workbookName();
    }

    @Override
    public List<String> workbookTags() {
        return this.inner().workbookTags();
    }

    @Override
    public WorkbookImpl withCategory(String category) {
        this.inner().withCategory(category);
        return this;
    }

    @Override
    public WorkbookImpl withSerializedData(String serializedData) {
        this.inner().withSerializedData(serializedData);
        return this;
    }

    @Override
    public WorkbookImpl withSharedTypeKind(SharedTypeKind sharedTypeKind) {
        this.inner().withSharedTypeKind(sharedTypeKind);
        return this;
    }

    @Override
    public WorkbookImpl withUserId(String userId) {
        this.inner().withUserId(userId);
        return this;
    }

    @Override
    public WorkbookImpl withWorkbookId(String workbookId) {
        this.inner().withWorkbookId(workbookId);
        return this;
    }

    @Override
    public WorkbookImpl withWorkbookName(String workbookName) {
        this.inner().withWorkbookName(workbookName);
        return this;
    }

    @Override
    public WorkbookImpl withKind(SharedTypeKind kind) {
        this.inner().withKind(kind);
        return this;
    }

    @Override
    public WorkbookImpl withSourceResourceId(String sourceResourceId) {
        this.inner().withSourceResourceId(sourceResourceId);
        return this;
    }

    @Override
    public WorkbookImpl withVersion(String version) {
        this.inner().withVersion(version);
        return this;
    }

    @Override
    public WorkbookImpl withWorkbookTags(List<String> workbookTags) {
        this.inner().withWorkbookTags(workbookTags);
        return this;
    }

}
