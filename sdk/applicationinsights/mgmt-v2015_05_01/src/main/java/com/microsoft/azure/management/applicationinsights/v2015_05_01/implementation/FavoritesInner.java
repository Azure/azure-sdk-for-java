/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.FavoriteSourceType;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.FavoriteType;
import com.microsoft.rest.CollectionFormat;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Favorites.
 */
public class FavoritesInner {
    /** The Retrofit service to perform REST calls. */
    private FavoritesService service;
    /** The service client containing this operation class. */
    private ApplicationInsightsManagementClientImpl client;

    /**
     * Initializes an instance of FavoritesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public FavoritesInner(Retrofit retrofit, ApplicationInsightsManagementClientImpl client) {
        this.service = retrofit.create(FavoritesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Favorites to be
     * used by Retrofit to perform actually REST calls.
     */
    interface FavoritesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.Favorites list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites")
        Observable<Response<ResponseBody>> list(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Query("favoriteType") FavoriteType favoriteType1, @Query("sourceType") FavoriteSourceType sourceType, @Query("canFetchContent") Boolean canFetchContent, @Query("tags") String tags, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.Favorites get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("resourceName") String resourceName, @Path("favoriteId") String favoriteId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.Favorites add" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}")
        Observable<Response<ResponseBody>> add(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("resourceName") String resourceName, @Path("favoriteId") String favoriteId, @Query("api-version") String apiVersion, @Body ApplicationInsightsComponentFavoriteInner favoriteProperties, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.Favorites update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("resourceName") String resourceName, @Path("favoriteId") String favoriteId, @Query("api-version") String apiVersion, @Body ApplicationInsightsComponentFavoriteInner favoriteProperties, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.applicationinsights.v2015_05_01.Favorites delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("resourceName") String resourceName, @Path("favoriteId") String favoriteId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a list of favorites defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ApplicationInsightsComponentFavoriteInner&gt; object if successful.
     */
    public List<ApplicationInsightsComponentFavoriteInner> list(String resourceGroupName, String resourceName) {
        return listWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Gets a list of favorites defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationInsightsComponentFavoriteInner>> listAsync(String resourceGroupName, String resourceName, final ServiceCallback<List<ApplicationInsightsComponentFavoriteInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Gets a list of favorites defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ApplicationInsightsComponentFavoriteInner&gt; object
     */
    public Observable<List<ApplicationInsightsComponentFavoriteInner>> listAsync(String resourceGroupName, String resourceName) {
        return listWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>>, List<ApplicationInsightsComponentFavoriteInner>>() {
            @Override
            public List<ApplicationInsightsComponentFavoriteInner> call(ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a list of favorites defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ApplicationInsightsComponentFavoriteInner&gt; object
     */
    public Observable<ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>>> listWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final FavoriteType favoriteType = null;
        final FavoriteSourceType sourceType = null;
        final Boolean canFetchContent = null;
        final List<String> tags = null;
        String tagsConverted = this.client.serializerAdapter().serializeList(tags, CollectionFormat.CSV);
        return service.list(resourceGroupName, this.client.subscriptionId(), resourceName, this.client.apiVersion(), favoriteType, sourceType, canFetchContent, tagsConverted, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a list of favorites defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteType The type of favorite. Value can be either shared or user. Possible values include: 'shared', 'user'
     * @param sourceType Source type of favorite to return. When left out, the source type defaults to 'other' (not present in this enum). Possible values include: 'retention', 'notebook', 'sessions', 'events', 'userflows', 'funnel', 'impact', 'segmentation'
     * @param canFetchContent Flag indicating whether or not to return the full content for each applicable favorite. If false, only return summary content for favorites.
     * @param tags Tags that must be present on each favorite returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ApplicationInsightsComponentFavoriteInner&gt; object if successful.
     */
    public List<ApplicationInsightsComponentFavoriteInner> list(String resourceGroupName, String resourceName, FavoriteType favoriteType, FavoriteSourceType sourceType, Boolean canFetchContent, List<String> tags) {
        return listWithServiceResponseAsync(resourceGroupName, resourceName, favoriteType, sourceType, canFetchContent, tags).toBlocking().single().body();
    }

    /**
     * Gets a list of favorites defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteType The type of favorite. Value can be either shared or user. Possible values include: 'shared', 'user'
     * @param sourceType Source type of favorite to return. When left out, the source type defaults to 'other' (not present in this enum). Possible values include: 'retention', 'notebook', 'sessions', 'events', 'userflows', 'funnel', 'impact', 'segmentation'
     * @param canFetchContent Flag indicating whether or not to return the full content for each applicable favorite. If false, only return summary content for favorites.
     * @param tags Tags that must be present on each favorite returned.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationInsightsComponentFavoriteInner>> listAsync(String resourceGroupName, String resourceName, FavoriteType favoriteType, FavoriteSourceType sourceType, Boolean canFetchContent, List<String> tags, final ServiceCallback<List<ApplicationInsightsComponentFavoriteInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, resourceName, favoriteType, sourceType, canFetchContent, tags), serviceCallback);
    }

    /**
     * Gets a list of favorites defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteType The type of favorite. Value can be either shared or user. Possible values include: 'shared', 'user'
     * @param sourceType Source type of favorite to return. When left out, the source type defaults to 'other' (not present in this enum). Possible values include: 'retention', 'notebook', 'sessions', 'events', 'userflows', 'funnel', 'impact', 'segmentation'
     * @param canFetchContent Flag indicating whether or not to return the full content for each applicable favorite. If false, only return summary content for favorites.
     * @param tags Tags that must be present on each favorite returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ApplicationInsightsComponentFavoriteInner&gt; object
     */
    public Observable<List<ApplicationInsightsComponentFavoriteInner>> listAsync(String resourceGroupName, String resourceName, FavoriteType favoriteType, FavoriteSourceType sourceType, Boolean canFetchContent, List<String> tags) {
        return listWithServiceResponseAsync(resourceGroupName, resourceName, favoriteType, sourceType, canFetchContent, tags).map(new Func1<ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>>, List<ApplicationInsightsComponentFavoriteInner>>() {
            @Override
            public List<ApplicationInsightsComponentFavoriteInner> call(ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a list of favorites defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteType The type of favorite. Value can be either shared or user. Possible values include: 'shared', 'user'
     * @param sourceType Source type of favorite to return. When left out, the source type defaults to 'other' (not present in this enum). Possible values include: 'retention', 'notebook', 'sessions', 'events', 'userflows', 'funnel', 'impact', 'segmentation'
     * @param canFetchContent Flag indicating whether or not to return the full content for each applicable favorite. If false, only return summary content for favorites.
     * @param tags Tags that must be present on each favorite returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ApplicationInsightsComponentFavoriteInner&gt; object
     */
    public Observable<ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>>> listWithServiceResponseAsync(String resourceGroupName, String resourceName, FavoriteType favoriteType, FavoriteSourceType sourceType, Boolean canFetchContent, List<String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        String tagsConverted = this.client.serializerAdapter().serializeList(tags, CollectionFormat.CSV);
        return service.list(resourceGroupName, this.client.subscriptionId(), resourceName, this.client.apiVersion(), favoriteType, sourceType, canFetchContent, tagsConverted, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<ApplicationInsightsComponentFavoriteInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<ApplicationInsightsComponentFavoriteInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<ApplicationInsightsComponentFavoriteInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a single favorite by its FavoriteId, defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInsightsComponentFavoriteInner object if successful.
     */
    public ApplicationInsightsComponentFavoriteInner get(String resourceGroupName, String resourceName, String favoriteId) {
        return getWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId).toBlocking().single().body();
    }

    /**
     * Get a single favorite by its FavoriteId, defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationInsightsComponentFavoriteInner> getAsync(String resourceGroupName, String resourceName, String favoriteId, final ServiceCallback<ApplicationInsightsComponentFavoriteInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId), serviceCallback);
    }

    /**
     * Get a single favorite by its FavoriteId, defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInsightsComponentFavoriteInner object
     */
    public Observable<ApplicationInsightsComponentFavoriteInner> getAsync(String resourceGroupName, String resourceName, String favoriteId) {
        return getWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId).map(new Func1<ServiceResponse<ApplicationInsightsComponentFavoriteInner>, ApplicationInsightsComponentFavoriteInner>() {
            @Override
            public ApplicationInsightsComponentFavoriteInner call(ServiceResponse<ApplicationInsightsComponentFavoriteInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a single favorite by its FavoriteId, defined within an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInsightsComponentFavoriteInner object
     */
    public Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>> getWithServiceResponseAsync(String resourceGroupName, String resourceName, String favoriteId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (favoriteId == null) {
            throw new IllegalArgumentException("Parameter favoriteId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, this.client.subscriptionId(), resourceName, favoriteId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationInsightsComponentFavoriteInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationInsightsComponentFavoriteInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationInsightsComponentFavoriteInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationInsightsComponentFavoriteInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Adds a new favorites to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param favoriteProperties Properties that need to be specified to create a new favorite and add it to an Application Insights component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInsightsComponentFavoriteInner object if successful.
     */
    public ApplicationInsightsComponentFavoriteInner add(String resourceGroupName, String resourceName, String favoriteId, ApplicationInsightsComponentFavoriteInner favoriteProperties) {
        return addWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId, favoriteProperties).toBlocking().single().body();
    }

    /**
     * Adds a new favorites to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param favoriteProperties Properties that need to be specified to create a new favorite and add it to an Application Insights component.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationInsightsComponentFavoriteInner> addAsync(String resourceGroupName, String resourceName, String favoriteId, ApplicationInsightsComponentFavoriteInner favoriteProperties, final ServiceCallback<ApplicationInsightsComponentFavoriteInner> serviceCallback) {
        return ServiceFuture.fromResponse(addWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId, favoriteProperties), serviceCallback);
    }

    /**
     * Adds a new favorites to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param favoriteProperties Properties that need to be specified to create a new favorite and add it to an Application Insights component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInsightsComponentFavoriteInner object
     */
    public Observable<ApplicationInsightsComponentFavoriteInner> addAsync(String resourceGroupName, String resourceName, String favoriteId, ApplicationInsightsComponentFavoriteInner favoriteProperties) {
        return addWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId, favoriteProperties).map(new Func1<ServiceResponse<ApplicationInsightsComponentFavoriteInner>, ApplicationInsightsComponentFavoriteInner>() {
            @Override
            public ApplicationInsightsComponentFavoriteInner call(ServiceResponse<ApplicationInsightsComponentFavoriteInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a new favorites to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param favoriteProperties Properties that need to be specified to create a new favorite and add it to an Application Insights component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInsightsComponentFavoriteInner object
     */
    public Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>> addWithServiceResponseAsync(String resourceGroupName, String resourceName, String favoriteId, ApplicationInsightsComponentFavoriteInner favoriteProperties) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (favoriteId == null) {
            throw new IllegalArgumentException("Parameter favoriteId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (favoriteProperties == null) {
            throw new IllegalArgumentException("Parameter favoriteProperties is required and cannot be null.");
        }
        Validator.validate(favoriteProperties);
        return service.add(resourceGroupName, this.client.subscriptionId(), resourceName, favoriteId, this.client.apiVersion(), favoriteProperties, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationInsightsComponentFavoriteInner> clientResponse = addDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationInsightsComponentFavoriteInner> addDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationInsightsComponentFavoriteInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationInsightsComponentFavoriteInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates a favorite that has already been added to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param favoriteProperties Properties that need to be specified to update the existing favorite.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInsightsComponentFavoriteInner object if successful.
     */
    public ApplicationInsightsComponentFavoriteInner update(String resourceGroupName, String resourceName, String favoriteId, ApplicationInsightsComponentFavoriteInner favoriteProperties) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId, favoriteProperties).toBlocking().single().body();
    }

    /**
     * Updates a favorite that has already been added to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param favoriteProperties Properties that need to be specified to update the existing favorite.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationInsightsComponentFavoriteInner> updateAsync(String resourceGroupName, String resourceName, String favoriteId, ApplicationInsightsComponentFavoriteInner favoriteProperties, final ServiceCallback<ApplicationInsightsComponentFavoriteInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId, favoriteProperties), serviceCallback);
    }

    /**
     * Updates a favorite that has already been added to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param favoriteProperties Properties that need to be specified to update the existing favorite.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInsightsComponentFavoriteInner object
     */
    public Observable<ApplicationInsightsComponentFavoriteInner> updateAsync(String resourceGroupName, String resourceName, String favoriteId, ApplicationInsightsComponentFavoriteInner favoriteProperties) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId, favoriteProperties).map(new Func1<ServiceResponse<ApplicationInsightsComponentFavoriteInner>, ApplicationInsightsComponentFavoriteInner>() {
            @Override
            public ApplicationInsightsComponentFavoriteInner call(ServiceResponse<ApplicationInsightsComponentFavoriteInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a favorite that has already been added to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param favoriteProperties Properties that need to be specified to update the existing favorite.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInsightsComponentFavoriteInner object
     */
    public Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>> updateWithServiceResponseAsync(String resourceGroupName, String resourceName, String favoriteId, ApplicationInsightsComponentFavoriteInner favoriteProperties) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (favoriteId == null) {
            throw new IllegalArgumentException("Parameter favoriteId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (favoriteProperties == null) {
            throw new IllegalArgumentException("Parameter favoriteProperties is required and cannot be null.");
        }
        Validator.validate(favoriteProperties);
        return service.update(resourceGroupName, this.client.subscriptionId(), resourceName, favoriteId, this.client.apiVersion(), favoriteProperties, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationInsightsComponentFavoriteInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationInsightsComponentFavoriteInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationInsightsComponentFavoriteInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationInsightsComponentFavoriteInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationInsightsComponentFavoriteInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Remove a favorite that is associated to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String resourceName, String favoriteId) {
        deleteWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId).toBlocking().single().body();
    }

    /**
     * Remove a favorite that is associated to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String resourceName, String favoriteId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId), serviceCallback);
    }

    /**
     * Remove a favorite that is associated to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String resourceName, String favoriteId) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName, favoriteId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove a favorite that is associated to an Application Insights component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String resourceName, String favoriteId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (favoriteId == null) {
            throw new IllegalArgumentException("Parameter favoriteId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, this.client.subscriptionId(), resourceName, favoriteId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
