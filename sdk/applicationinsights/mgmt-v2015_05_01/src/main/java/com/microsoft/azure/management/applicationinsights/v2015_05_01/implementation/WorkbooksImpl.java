/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Workbooks;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.Workbook;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.CategoryType;

class WorkbooksImpl extends WrapperImpl<WorkbooksInner> implements Workbooks {
    private final InsightsManager manager;

    WorkbooksImpl(InsightsManager manager) {
        super(manager.inner().workbooks());
        this.manager = manager;
    }

    public InsightsManager manager() {
        return this.manager;
    }

    @Override
    public WorkbookImpl define(String name) {
        return wrapModel(name);
    }

    private WorkbookImpl wrapModel(WorkbookInner inner) {
        return  new WorkbookImpl(inner, manager());
    }

    private WorkbookImpl wrapModel(String name) {
        return new WorkbookImpl(name, this.manager());
    }

    @Override
    public Observable<Workbook> getAsync(String resourceGroupName, String resourceName) {
        WorkbooksInner client = this.inner();
        return client.getAsync(resourceGroupName, resourceName)
        .map(new Func1<WorkbookInner, Workbook>() {
            @Override
            public Workbook call(WorkbookInner inner) {
                return new WorkbookImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String resourceName) {
        WorkbooksInner client = this.inner();
        return client.deleteAsync(resourceGroupName, resourceName).toCompletable();
    }

    @Override
    public Observable<Workbook> listByResourceGroupAsync(String resourceGroupName, CategoryType category) {
        WorkbooksInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName, category)
        .flatMap(new Func1<List<WorkbookInner>, Observable<WorkbookInner>>() {
            @Override
            public Observable<WorkbookInner> call(List<WorkbookInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<WorkbookInner, Workbook>() {
            @Override
            public Workbook call(WorkbookInner inner) {
                return new WorkbookImpl(inner, manager());
            }
        });
    }

}
