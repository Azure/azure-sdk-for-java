/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.recoveryservices.backup.v2017_07_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.backup.v2017_07_01.BackupProtectedItems;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.recoveryservices.backup.v2017_07_01.VaultProtectedItemResource;

class BackupProtectedItemsImpl extends WrapperImpl<BackupProtectedItemsInner> implements BackupProtectedItems {
    private final RecoveryServicesManager manager;

    BackupProtectedItemsImpl(RecoveryServicesManager manager) {
        super(manager.inner().backupProtectedItems());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    private VaultProtectedItemResourceImpl wrapModel(ProtectedItemResourceInner inner) {
        return  new VaultProtectedItemResourceImpl(inner, manager());
    }

    @Override
    public Observable<VaultProtectedItemResource> listAsync(final String vaultName, final String resourceGroupName) {
        BackupProtectedItemsInner client = this.inner();
        return client.listAsync(vaultName, resourceGroupName)
        .flatMapIterable(new Func1<Page<ProtectedItemResourceInner>, Iterable<ProtectedItemResourceInner>>() {
            @Override
            public Iterable<ProtectedItemResourceInner> call(Page<ProtectedItemResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProtectedItemResourceInner, VaultProtectedItemResource>() {
            @Override
            public VaultProtectedItemResource call(ProtectedItemResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
