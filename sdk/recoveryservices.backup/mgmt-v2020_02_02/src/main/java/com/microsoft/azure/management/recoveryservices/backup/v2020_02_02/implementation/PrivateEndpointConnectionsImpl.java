/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 */

package com.microsoft.azure.management.recoveryservices.backup.v2020_02_02.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.backup.v2020_02_02.PrivateEndpointConnections;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.recoveryservices.backup.v2020_02_02.PrivateEndpointConnectionResource;

class PrivateEndpointConnectionsImpl extends WrapperImpl<PrivateEndpointConnectionsInner> implements PrivateEndpointConnections {
    private final RecoveryServicesManager manager;

    PrivateEndpointConnectionsImpl(RecoveryServicesManager manager) {
        super(manager.inner().privateEndpointConnections());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public PrivateEndpointConnectionResourceImpl define(String name) {
        return wrapModel(name);
    }

    private PrivateEndpointConnectionResourceImpl wrapModel(PrivateEndpointConnectionResourceInner inner) {
        return  new PrivateEndpointConnectionResourceImpl(inner, manager());
    }

    private PrivateEndpointConnectionResourceImpl wrapModel(String name) {
        return new PrivateEndpointConnectionResourceImpl(name, this.manager());
    }

    @Override
    public Observable<PrivateEndpointConnectionResource> getAsync(String vaultName, String resourceGroupName, String privateEndpointConnectionName) {
        PrivateEndpointConnectionsInner client = this.inner();
        return client.getAsync(vaultName, resourceGroupName, privateEndpointConnectionName)
        .flatMap(new Func1<PrivateEndpointConnectionResourceInner, Observable<PrivateEndpointConnectionResource>>() {
            @Override
            public Observable<PrivateEndpointConnectionResource> call(PrivateEndpointConnectionResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((PrivateEndpointConnectionResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String vaultName, String resourceGroupName, String privateEndpointConnectionName) {
        PrivateEndpointConnectionsInner client = this.inner();
        return client.deleteAsync(vaultName, resourceGroupName, privateEndpointConnectionName).toCompletable();
    }

}
