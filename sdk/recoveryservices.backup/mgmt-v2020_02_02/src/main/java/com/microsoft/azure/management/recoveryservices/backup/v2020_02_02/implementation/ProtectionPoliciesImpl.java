/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 */

package com.microsoft.azure.management.recoveryservices.backup.v2020_02_02.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.backup.v2020_02_02.ProtectionPolicies;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.recoveryservices.backup.v2020_02_02.VaultProtectionPolicyResourceModel;

class ProtectionPoliciesImpl extends WrapperImpl<ProtectionPoliciesInner> implements ProtectionPolicies {
    private final RecoveryServicesManager manager;

    ProtectionPoliciesImpl(RecoveryServicesManager manager) {
        super(manager.inner().protectionPolicies());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public VaultProtectionPolicyResourceModelImpl define(String name) {
        return wrapModel(name);
    }

    private VaultProtectionPolicyResourceModelImpl wrapModel(ProtectionPolicyResourceInner inner) {
        return  new VaultProtectionPolicyResourceModelImpl(inner, manager());
    }

    private VaultProtectionPolicyResourceModelImpl wrapModel(String name) {
        return new VaultProtectionPolicyResourceModelImpl(name, this.manager());
    }

    @Override
    public Observable<VaultProtectionPolicyResourceModel> getAsync(String vaultName, String resourceGroupName, String policyName) {
        ProtectionPoliciesInner client = this.inner();
        return client.getAsync(vaultName, resourceGroupName, policyName)
        .flatMap(new Func1<ProtectionPolicyResourceInner, Observable<VaultProtectionPolicyResourceModel>>() {
            @Override
            public Observable<VaultProtectionPolicyResourceModel> call(ProtectionPolicyResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((VaultProtectionPolicyResourceModel)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String vaultName, String resourceGroupName, String policyName) {
        ProtectionPoliciesInner client = this.inner();
        return client.deleteAsync(vaultName, resourceGroupName, policyName).toCompletable();
    }

}
