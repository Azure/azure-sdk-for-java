/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.backup.v2016_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BackupEngines.
 */
public class BackupEnginesInner {
    /** The Retrofit service to perform REST calls. */
    private BackupEnginesService service;
    /** The service client containing this operation class. */
    private RecoveryServicesBackupClientImpl client;

    /**
     * Initializes an instance of BackupEnginesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BackupEnginesInner(Retrofit retrofit, RecoveryServicesBackupClientImpl client) {
        this.service = retrofit.create(BackupEnginesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BackupEngines to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BackupEnginesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.backup.v2016_06_01.BackupEngines get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupEngines")
        Observable<Response<ResponseBody>> get(@Path("vaultName") String vaultName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.backup.v2016_06_01.BackupEngines getNext" })
        @GET
        Observable<Response<ResponseBody>> getNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BackupEngineBaseResourceInner&gt; object if successful.
     */
    public PagedList<BackupEngineBaseResourceInner> get(final String vaultName, final String resourceGroupName) {
        ServiceResponse<Page<BackupEngineBaseResourceInner>> response = getSinglePageAsync(vaultName, resourceGroupName).toBlocking().single();
        return new PagedList<BackupEngineBaseResourceInner>(response.body()) {
            @Override
            public Page<BackupEngineBaseResourceInner> nextPage(String nextPageLink) {
                return getNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BackupEngineBaseResourceInner>> getAsync(final String vaultName, final String resourceGroupName, final ListOperationCallback<BackupEngineBaseResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getSinglePageAsync(vaultName, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(String nextPageLink) {
                    return getNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BackupEngineBaseResourceInner&gt; object
     */
    public Observable<Page<BackupEngineBaseResourceInner>> getAsync(final String vaultName, final String resourceGroupName) {
        return getWithServiceResponseAsync(vaultName, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<BackupEngineBaseResourceInner>>, Page<BackupEngineBaseResourceInner>>() {
                @Override
                public Page<BackupEngineBaseResourceInner> call(ServiceResponse<Page<BackupEngineBaseResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BackupEngineBaseResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> getWithServiceResponseAsync(final String vaultName, final String resourceGroupName) {
        return getSinglePageAsync(vaultName, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<BackupEngineBaseResourceInner>>, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(ServiceResponse<Page<BackupEngineBaseResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BackupEngineBaseResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> getSinglePageAsync(final String vaultName, final String resourceGroupName) {
        if (vaultName == null) {
            throw new IllegalArgumentException("Parameter vaultName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final String skipToken = null;
        return service.get(vaultName, resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), filter, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> result = getDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BackupEngineBaseResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param filter Use this filter to choose the specific backup management server. backupManagementType { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }.
     * @param skipToken The Skip Token filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BackupEngineBaseResourceInner&gt; object if successful.
     */
    public PagedList<BackupEngineBaseResourceInner> get(final String vaultName, final String resourceGroupName, final String filter, final String skipToken) {
        ServiceResponse<Page<BackupEngineBaseResourceInner>> response = getSinglePageAsync(vaultName, resourceGroupName, filter, skipToken).toBlocking().single();
        return new PagedList<BackupEngineBaseResourceInner>(response.body()) {
            @Override
            public Page<BackupEngineBaseResourceInner> nextPage(String nextPageLink) {
                return getNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param filter Use this filter to choose the specific backup management server. backupManagementType { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }.
     * @param skipToken The Skip Token filter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BackupEngineBaseResourceInner>> getAsync(final String vaultName, final String resourceGroupName, final String filter, final String skipToken, final ListOperationCallback<BackupEngineBaseResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getSinglePageAsync(vaultName, resourceGroupName, filter, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(String nextPageLink) {
                    return getNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param filter Use this filter to choose the specific backup management server. backupManagementType { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }.
     * @param skipToken The Skip Token filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BackupEngineBaseResourceInner&gt; object
     */
    public Observable<Page<BackupEngineBaseResourceInner>> getAsync(final String vaultName, final String resourceGroupName, final String filter, final String skipToken) {
        return getWithServiceResponseAsync(vaultName, resourceGroupName, filter, skipToken)
            .map(new Func1<ServiceResponse<Page<BackupEngineBaseResourceInner>>, Page<BackupEngineBaseResourceInner>>() {
                @Override
                public Page<BackupEngineBaseResourceInner> call(ServiceResponse<Page<BackupEngineBaseResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param vaultName The name of the Recovery Services vault.
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param filter Use this filter to choose the specific backup management server. backupManagementType { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }.
     * @param skipToken The Skip Token filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BackupEngineBaseResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> getWithServiceResponseAsync(final String vaultName, final String resourceGroupName, final String filter, final String skipToken) {
        return getSinglePageAsync(vaultName, resourceGroupName, filter, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<BackupEngineBaseResourceInner>>, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(ServiceResponse<Page<BackupEngineBaseResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
    ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> * @param vaultName The name of the Recovery Services vault.
    ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> * @param resourceGroupName The name of the resource group associated with the Recovery Services vault.
    ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> * @param filter Use this filter to choose the specific backup management server. backupManagementType { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }.
    ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> * @param skipToken The Skip Token filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BackupEngineBaseResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> getSinglePageAsync(final String vaultName, final String resourceGroupName, final String filter, final String skipToken) {
        if (vaultName == null) {
            throw new IllegalArgumentException("Parameter vaultName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(vaultName, resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), filter, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> result = getDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BackupEngineBaseResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<BackupEngineBaseResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<BackupEngineBaseResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BackupEngineBaseResourceInner&gt; object if successful.
     */
    public PagedList<BackupEngineBaseResourceInner> getNext(final String nextPageLink) {
        ServiceResponse<Page<BackupEngineBaseResourceInner>> response = getNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BackupEngineBaseResourceInner>(response.body()) {
            @Override
            public Page<BackupEngineBaseResourceInner> nextPage(String nextPageLink) {
                return getNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BackupEngineBaseResourceInner>> getNextAsync(final String nextPageLink, final ServiceFuture<List<BackupEngineBaseResourceInner>> serviceFuture, final ListOperationCallback<BackupEngineBaseResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(String nextPageLink) {
                    return getNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BackupEngineBaseResourceInner&gt; object
     */
    public Observable<Page<BackupEngineBaseResourceInner>> getNextAsync(final String nextPageLink) {
        return getNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BackupEngineBaseResourceInner>>, Page<BackupEngineBaseResourceInner>>() {
                @Override
                public Page<BackupEngineBaseResourceInner> call(ServiceResponse<Page<BackupEngineBaseResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BackupEngineBaseResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> getNextWithServiceResponseAsync(final String nextPageLink) {
        return getNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BackupEngineBaseResourceInner>>, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(ServiceResponse<Page<BackupEngineBaseResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The backup management servers registered to a Recovery Services vault. This returns a pageable list of servers.
     *
    ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BackupEngineBaseResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> getNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BackupEngineBaseResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> result = getNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BackupEngineBaseResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<BackupEngineBaseResourceInner>> getNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<BackupEngineBaseResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<BackupEngineBaseResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
