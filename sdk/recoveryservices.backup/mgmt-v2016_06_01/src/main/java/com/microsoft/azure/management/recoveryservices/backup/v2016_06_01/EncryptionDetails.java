/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.backup.v2016_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Details needed if the VM was encrypted at the time of backup.
 */
public class EncryptionDetails {
    /**
     * Identifies whether the backup copy represents an encrypted VM at the
     * time of backup.
     */
    @JsonProperty(value = "encryptionEnabled")
    private Boolean encryptionEnabled;

    /**
     * URL of the Key Encryption Key (KEK).
     */
    @JsonProperty(value = "kekUrl")
    private String kekUrl;

    /**
     * URL of the Bitlocker Encryption Key (BEK).
     */
    @JsonProperty(value = "secretKeyUrl")
    private String secretKeyUrl;

    /**
     * The ID of Key Vault where the Key Encryption Key (KEK) is stored.
     */
    @JsonProperty(value = "kekVaultId")
    private String kekVaultId;

    /**
     * The ID of Key Vault where the Bitlocker Encryption Key (BEK), or Secret,
     * is stored.
     */
    @JsonProperty(value = "secretKeyVaultId")
    private String secretKeyVaultId;

    /**
     * Get identifies whether the backup copy represents an encrypted VM at the time of backup.
     *
     * @return the encryptionEnabled value
     */
    public Boolean encryptionEnabled() {
        return this.encryptionEnabled;
    }

    /**
     * Set identifies whether the backup copy represents an encrypted VM at the time of backup.
     *
     * @param encryptionEnabled the encryptionEnabled value to set
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails withEncryptionEnabled(Boolean encryptionEnabled) {
        this.encryptionEnabled = encryptionEnabled;
        return this;
    }

    /**
     * Get uRL of the Key Encryption Key (KEK).
     *
     * @return the kekUrl value
     */
    public String kekUrl() {
        return this.kekUrl;
    }

    /**
     * Set uRL of the Key Encryption Key (KEK).
     *
     * @param kekUrl the kekUrl value to set
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails withKekUrl(String kekUrl) {
        this.kekUrl = kekUrl;
        return this;
    }

    /**
     * Get uRL of the Bitlocker Encryption Key (BEK).
     *
     * @return the secretKeyUrl value
     */
    public String secretKeyUrl() {
        return this.secretKeyUrl;
    }

    /**
     * Set uRL of the Bitlocker Encryption Key (BEK).
     *
     * @param secretKeyUrl the secretKeyUrl value to set
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails withSecretKeyUrl(String secretKeyUrl) {
        this.secretKeyUrl = secretKeyUrl;
        return this;
    }

    /**
     * Get the ID of Key Vault where the Key Encryption Key (KEK) is stored.
     *
     * @return the kekVaultId value
     */
    public String kekVaultId() {
        return this.kekVaultId;
    }

    /**
     * Set the ID of Key Vault where the Key Encryption Key (KEK) is stored.
     *
     * @param kekVaultId the kekVaultId value to set
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails withKekVaultId(String kekVaultId) {
        this.kekVaultId = kekVaultId;
        return this;
    }

    /**
     * Get the ID of Key Vault where the Bitlocker Encryption Key (BEK), or Secret, is stored.
     *
     * @return the secretKeyVaultId value
     */
    public String secretKeyVaultId() {
        return this.secretKeyVaultId;
    }

    /**
     * Set the ID of Key Vault where the Bitlocker Encryption Key (BEK), or Secret, is stored.
     *
     * @param secretKeyVaultId the secretKeyVaultId value to set
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails withSecretKeyVaultId(String secretKeyVaultId) {
        this.secretKeyVaultId = secretKeyVaultId;
        return this;
    }

}
