// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.secretsstoreextension.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of the SecretSync instance.
 */
@Fluent
public final class SecretSyncProperties implements JsonSerializable<SecretSyncProperties> {
    /*
     * SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information
     * needed to access the cloud provider secret store.
     */
    private String secretProviderClassName;

    /*
     * ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The
     * audience field in the service account token must be passed as parameter in the controller configuration. The
     * audience is used when requesting a token from the API server for the service account; the supported audiences are
     * defined by each provider.
     */
    private String serviceAccountName;

    /*
     * Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must
     * have permission to create secrets of the specified type.
     */
    private KubernetesSecretType kubernetesSecretType;

    /*
     * ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by
     * changing the value in this field. This field is not used to resolve synchronization conflicts.
     */
    private String forceSynchronization;

    /*
     * An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret.
     * Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes
     * secret.
     */
    private List<KubernetesSecretObjectMapping> objectSecretMapping;

    /*
     * SecretSyncStatus defines the observed state of the secret synchronization process.
     */
    private SecretSyncStatus status;

    /*
     * Provisioning state of the SecretSync instance.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SecretSyncProperties class.
     */
    public SecretSyncProperties() {
    }

    /**
     * Get the secretProviderClassName property: SecretProviderClassName specifies the name of the SecretProviderClass
     * resource, which contains the information needed to access the cloud provider secret store.
     * 
     * @return the secretProviderClassName value.
     */
    public String secretProviderClassName() {
        return this.secretProviderClassName;
    }

    /**
     * Set the secretProviderClassName property: SecretProviderClassName specifies the name of the SecretProviderClass
     * resource, which contains the information needed to access the cloud provider secret store.
     * 
     * @param secretProviderClassName the secretProviderClassName value to set.
     * @return the SecretSyncProperties object itself.
     */
    public SecretSyncProperties withSecretProviderClassName(String secretProviderClassName) {
        this.secretProviderClassName = secretProviderClassName;
        return this;
    }

    /**
     * Get the serviceAccountName property: ServiceAccountName specifies the name of the service account used to access
     * the cloud provider secret store. The audience field in the service account token must be passed as parameter in
     * the controller configuration. The audience is used when requesting a token from the API server for the service
     * account; the supported audiences are defined by each provider.
     * 
     * @return the serviceAccountName value.
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }

    /**
     * Set the serviceAccountName property: ServiceAccountName specifies the name of the service account used to access
     * the cloud provider secret store. The audience field in the service account token must be passed as parameter in
     * the controller configuration. The audience is used when requesting a token from the API server for the service
     * account; the supported audiences are defined by each provider.
     * 
     * @param serviceAccountName the serviceAccountName value to set.
     * @return the SecretSyncProperties object itself.
     */
    public SecretSyncProperties withServiceAccountName(String serviceAccountName) {
        this.serviceAccountName = serviceAccountName;
        return this;
    }

    /**
     * Get the kubernetesSecretType property: Type specifies the type of the Kubernetes secret object, e.g. "Opaque"
     * or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
     * 
     * @return the kubernetesSecretType value.
     */
    public KubernetesSecretType kubernetesSecretType() {
        return this.kubernetesSecretType;
    }

    /**
     * Set the kubernetesSecretType property: Type specifies the type of the Kubernetes secret object, e.g. "Opaque"
     * or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
     * 
     * @param kubernetesSecretType the kubernetesSecretType value to set.
     * @return the SecretSyncProperties object itself.
     */
    public SecretSyncProperties withKubernetesSecretType(KubernetesSecretType kubernetesSecretType) {
        this.kubernetesSecretType = kubernetesSecretType;
        return this;
    }

    /**
     * Get the forceSynchronization property: ForceSynchronization can be used to force the secret synchronization. The
     * secret synchronization is triggered by changing the value in this field. This field is not used to resolve
     * synchronization conflicts.
     * 
     * @return the forceSynchronization value.
     */
    public String forceSynchronization() {
        return this.forceSynchronization;
    }

    /**
     * Set the forceSynchronization property: ForceSynchronization can be used to force the secret synchronization. The
     * secret synchronization is triggered by changing the value in this field. This field is not used to resolve
     * synchronization conflicts.
     * 
     * @param forceSynchronization the forceSynchronization value to set.
     * @return the SecretSyncProperties object itself.
     */
    public SecretSyncProperties withForceSynchronization(String forceSynchronization) {
        this.forceSynchronization = forceSynchronization;
        return this;
    }

    /**
     * Get the objectSecretMapping property: An array of SecretObjectData that maps secret data from the external secret
     * provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the
     * corresponding key in the Kubernetes secret.
     * 
     * @return the objectSecretMapping value.
     */
    public List<KubernetesSecretObjectMapping> objectSecretMapping() {
        return this.objectSecretMapping;
    }

    /**
     * Set the objectSecretMapping property: An array of SecretObjectData that maps secret data from the external secret
     * provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the
     * corresponding key in the Kubernetes secret.
     * 
     * @param objectSecretMapping the objectSecretMapping value to set.
     * @return the SecretSyncProperties object itself.
     */
    public SecretSyncProperties withObjectSecretMapping(List<KubernetesSecretObjectMapping> objectSecretMapping) {
        this.objectSecretMapping = objectSecretMapping;
        return this;
    }

    /**
     * Get the status property: SecretSyncStatus defines the observed state of the secret synchronization process.
     * 
     * @return the status value.
     */
    public SecretSyncStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: Provisioning state of the SecretSync instance.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secretProviderClassName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property secretProviderClassName in model SecretSyncProperties"));
        }
        if (serviceAccountName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serviceAccountName in model SecretSyncProperties"));
        }
        if (kubernetesSecretType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property kubernetesSecretType in model SecretSyncProperties"));
        }
        if (objectSecretMapping() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property objectSecretMapping in model SecretSyncProperties"));
        } else {
            objectSecretMapping().forEach(e -> e.validate());
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecretSyncProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("secretProviderClassName", this.secretProviderClassName);
        jsonWriter.writeStringField("serviceAccountName", this.serviceAccountName);
        jsonWriter.writeStringField("kubernetesSecretType",
            this.kubernetesSecretType == null ? null : this.kubernetesSecretType.toString());
        jsonWriter.writeArrayField("objectSecretMapping", this.objectSecretMapping,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("forceSynchronization", this.forceSynchronization);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretSyncProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretSyncProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecretSyncProperties.
     */
    public static SecretSyncProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretSyncProperties deserializedSecretSyncProperties = new SecretSyncProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secretProviderClassName".equals(fieldName)) {
                    deserializedSecretSyncProperties.secretProviderClassName = reader.getString();
                } else if ("serviceAccountName".equals(fieldName)) {
                    deserializedSecretSyncProperties.serviceAccountName = reader.getString();
                } else if ("kubernetesSecretType".equals(fieldName)) {
                    deserializedSecretSyncProperties.kubernetesSecretType
                        = KubernetesSecretType.fromString(reader.getString());
                } else if ("objectSecretMapping".equals(fieldName)) {
                    List<KubernetesSecretObjectMapping> objectSecretMapping
                        = reader.readArray(reader1 -> KubernetesSecretObjectMapping.fromJson(reader1));
                    deserializedSecretSyncProperties.objectSecretMapping = objectSecretMapping;
                } else if ("forceSynchronization".equals(fieldName)) {
                    deserializedSecretSyncProperties.forceSynchronization = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSecretSyncProperties.status = SecretSyncStatus.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSecretSyncProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretSyncProperties;
        });
    }
}
