// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.secretsstoreextension.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties defining the mapping between a cloud secret store object and a Kubernetes Secret.
 */
@Fluent
public final class KubernetesSecretObjectMapping implements JsonSerializable<KubernetesSecretObjectMapping> {
    /*
     * SourcePath is the identifier for the secret data as defined by the external secret provider. This is the key or
     * path to the secret in the provider's system, which gets mounted to a specific path in the pod. The value should
     * match the name of the secret as specified in the SecretProviderClass's objects array.
     */
    private String sourcePath;

    /*
     * TargetKey is the key in the Kubernetes secret's data field where the secret value will be stored. This key is
     * used to reference the secret data within Kubernetes, and it should be unique within the secret.
     */
    private String targetKey;

    /**
     * Creates an instance of KubernetesSecretObjectMapping class.
     */
    public KubernetesSecretObjectMapping() {
    }

    /**
     * Get the sourcePath property: SourcePath is the identifier for the secret data as defined by the external secret
     * provider. This is the key or path to the secret in the provider's system, which gets mounted to a specific path
     * in the pod. The value should match the name of the secret as specified in the SecretProviderClass's objects
     * array.
     * 
     * @return the sourcePath value.
     */
    public String sourcePath() {
        return this.sourcePath;
    }

    /**
     * Set the sourcePath property: SourcePath is the identifier for the secret data as defined by the external secret
     * provider. This is the key or path to the secret in the provider's system, which gets mounted to a specific path
     * in the pod. The value should match the name of the secret as specified in the SecretProviderClass's objects
     * array.
     * 
     * @param sourcePath the sourcePath value to set.
     * @return the KubernetesSecretObjectMapping object itself.
     */
    public KubernetesSecretObjectMapping withSourcePath(String sourcePath) {
        this.sourcePath = sourcePath;
        return this;
    }

    /**
     * Get the targetKey property: TargetKey is the key in the Kubernetes secret's data field where the secret value
     * will be stored. This key is used to reference the secret data within Kubernetes, and it should be unique within
     * the secret.
     * 
     * @return the targetKey value.
     */
    public String targetKey() {
        return this.targetKey;
    }

    /**
     * Set the targetKey property: TargetKey is the key in the Kubernetes secret's data field where the secret value
     * will be stored. This key is used to reference the secret data within Kubernetes, and it should be unique within
     * the secret.
     * 
     * @param targetKey the targetKey value to set.
     * @return the KubernetesSecretObjectMapping object itself.
     */
    public KubernetesSecretObjectMapping withTargetKey(String targetKey) {
        this.targetKey = targetKey;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourcePath", this.sourcePath);
        jsonWriter.writeStringField("targetKey", this.targetKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesSecretObjectMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesSecretObjectMapping if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KubernetesSecretObjectMapping.
     */
    public static KubernetesSecretObjectMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesSecretObjectMapping deserializedKubernetesSecretObjectMapping
                = new KubernetesSecretObjectMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourcePath".equals(fieldName)) {
                    deserializedKubernetesSecretObjectMapping.sourcePath = reader.getString();
                } else if ("targetKey".equals(fieldName)) {
                    deserializedKubernetesSecretObjectMapping.targetKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesSecretObjectMapping;
        });
    }
}
