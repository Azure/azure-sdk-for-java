// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.secretsstoreextension.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.secretsstoreextension.fluent.AzureKeyVaultSecretProviderClassesClient;
import com.azure.resourcemanager.secretsstoreextension.fluent.models.AzureKeyVaultSecretProviderClassInner;
import com.azure.resourcemanager.secretsstoreextension.models.AzureKeyVaultSecretProviderClass;
import com.azure.resourcemanager.secretsstoreextension.models.AzureKeyVaultSecretProviderClasses;

public final class AzureKeyVaultSecretProviderClassesImpl implements AzureKeyVaultSecretProviderClasses {
    private static final ClientLogger LOGGER = new ClientLogger(AzureKeyVaultSecretProviderClassesImpl.class);

    private final AzureKeyVaultSecretProviderClassesClient innerClient;

    private final com.azure.resourcemanager.secretsstoreextension.SecretsStoreExtensionManager serviceManager;

    public AzureKeyVaultSecretProviderClassesImpl(AzureKeyVaultSecretProviderClassesClient innerClient,
        com.azure.resourcemanager.secretsstoreextension.SecretsStoreExtensionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AzureKeyVaultSecretProviderClass> getByResourceGroupWithResponse(String resourceGroupName,
        String azureKeyVaultSecretProviderClassName, Context context) {
        Response<AzureKeyVaultSecretProviderClassInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, azureKeyVaultSecretProviderClassName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AzureKeyVaultSecretProviderClassImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureKeyVaultSecretProviderClass getByResourceGroup(String resourceGroupName,
        String azureKeyVaultSecretProviderClassName) {
        AzureKeyVaultSecretProviderClassInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, azureKeyVaultSecretProviderClassName);
        if (inner != null) {
            return new AzureKeyVaultSecretProviderClassImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String azureKeyVaultSecretProviderClassName) {
        this.serviceClient().delete(resourceGroupName, azureKeyVaultSecretProviderClassName);
    }

    public void delete(String resourceGroupName, String azureKeyVaultSecretProviderClassName, Context context) {
        this.serviceClient().delete(resourceGroupName, azureKeyVaultSecretProviderClassName, context);
    }

    public PagedIterable<AzureKeyVaultSecretProviderClass> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AzureKeyVaultSecretProviderClassInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new AzureKeyVaultSecretProviderClassImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureKeyVaultSecretProviderClass> listByResourceGroup(String resourceGroupName,
        Context context) {
        PagedIterable<AzureKeyVaultSecretProviderClassInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new AzureKeyVaultSecretProviderClassImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureKeyVaultSecretProviderClass> list() {
        PagedIterable<AzureKeyVaultSecretProviderClassInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new AzureKeyVaultSecretProviderClassImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureKeyVaultSecretProviderClass> list(Context context) {
        PagedIterable<AzureKeyVaultSecretProviderClassInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new AzureKeyVaultSecretProviderClassImpl(inner1, this.manager()));
    }

    public AzureKeyVaultSecretProviderClass getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureKeyVaultSecretProviderClassName
            = ResourceManagerUtils.getValueFromIdByName(id, "azureKeyVaultSecretProviderClasses");
        if (azureKeyVaultSecretProviderClassName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'azureKeyVaultSecretProviderClasses'.", id)));
        }
        return this
            .getByResourceGroupWithResponse(resourceGroupName, azureKeyVaultSecretProviderClassName, Context.NONE)
            .getValue();
    }

    public Response<AzureKeyVaultSecretProviderClass> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureKeyVaultSecretProviderClassName
            = ResourceManagerUtils.getValueFromIdByName(id, "azureKeyVaultSecretProviderClasses");
        if (azureKeyVaultSecretProviderClassName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'azureKeyVaultSecretProviderClasses'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, azureKeyVaultSecretProviderClassName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureKeyVaultSecretProviderClassName
            = ResourceManagerUtils.getValueFromIdByName(id, "azureKeyVaultSecretProviderClasses");
        if (azureKeyVaultSecretProviderClassName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'azureKeyVaultSecretProviderClasses'.", id)));
        }
        this.delete(resourceGroupName, azureKeyVaultSecretProviderClassName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureKeyVaultSecretProviderClassName
            = ResourceManagerUtils.getValueFromIdByName(id, "azureKeyVaultSecretProviderClasses");
        if (azureKeyVaultSecretProviderClassName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'azureKeyVaultSecretProviderClasses'.", id)));
        }
        this.delete(resourceGroupName, azureKeyVaultSecretProviderClassName, context);
    }

    private AzureKeyVaultSecretProviderClassesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.secretsstoreextension.SecretsStoreExtensionManager manager() {
        return this.serviceManager;
    }

    public AzureKeyVaultSecretProviderClassImpl define(String name) {
        return new AzureKeyVaultSecretProviderClassImpl(name, this.manager());
    }
}
