// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.secretsstoreextension.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.secretsstoreextension.fluent.SecretSyncsClient;
import com.azure.resourcemanager.secretsstoreextension.fluent.models.SecretSyncInner;
import com.azure.resourcemanager.secretsstoreextension.models.SecretSync;
import com.azure.resourcemanager.secretsstoreextension.models.SecretSyncs;

public final class SecretSyncsImpl implements SecretSyncs {
    private static final ClientLogger LOGGER = new ClientLogger(SecretSyncsImpl.class);

    private final SecretSyncsClient innerClient;

    private final com.azure.resourcemanager.secretsstoreextension.SecretsStoreExtensionManager serviceManager;

    public SecretSyncsImpl(SecretSyncsClient innerClient,
        com.azure.resourcemanager.secretsstoreextension.SecretsStoreExtensionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SecretSync> getByResourceGroupWithResponse(String resourceGroupName, String secretSyncName,
        Context context) {
        Response<SecretSyncInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, secretSyncName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SecretSyncImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SecretSync getByResourceGroup(String resourceGroupName, String secretSyncName) {
        SecretSyncInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, secretSyncName);
        if (inner != null) {
            return new SecretSyncImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String secretSyncName) {
        this.serviceClient().delete(resourceGroupName, secretSyncName);
    }

    public void delete(String resourceGroupName, String secretSyncName, Context context) {
        this.serviceClient().delete(resourceGroupName, secretSyncName, context);
    }

    public PagedIterable<SecretSync> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SecretSyncInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SecretSyncImpl(inner1, this.manager()));
    }

    public PagedIterable<SecretSync> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SecretSyncInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SecretSyncImpl(inner1, this.manager()));
    }

    public PagedIterable<SecretSync> list() {
        PagedIterable<SecretSyncInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SecretSyncImpl(inner1, this.manager()));
    }

    public PagedIterable<SecretSync> list(Context context) {
        PagedIterable<SecretSyncInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SecretSyncImpl(inner1, this.manager()));
    }

    public SecretSync getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String secretSyncName = ResourceManagerUtils.getValueFromIdByName(id, "secretSyncs");
        if (secretSyncName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'secretSyncs'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, secretSyncName, Context.NONE).getValue();
    }

    public Response<SecretSync> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String secretSyncName = ResourceManagerUtils.getValueFromIdByName(id, "secretSyncs");
        if (secretSyncName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'secretSyncs'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, secretSyncName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String secretSyncName = ResourceManagerUtils.getValueFromIdByName(id, "secretSyncs");
        if (secretSyncName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'secretSyncs'.", id)));
        }
        this.delete(resourceGroupName, secretSyncName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String secretSyncName = ResourceManagerUtils.getValueFromIdByName(id, "secretSyncs");
        if (secretSyncName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'secretSyncs'.", id)));
        }
        this.delete(resourceGroupName, secretSyncName, context);
    }

    private SecretSyncsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.secretsstoreextension.SecretsStoreExtensionManager manager() {
        return this.serviceManager;
    }

    public SecretSyncImpl define(String name) {
        return new SecretSyncImpl(name, this.manager());
    }
}
