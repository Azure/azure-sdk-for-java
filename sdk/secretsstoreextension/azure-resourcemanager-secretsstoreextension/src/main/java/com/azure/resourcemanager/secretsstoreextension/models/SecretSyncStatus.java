// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.secretsstoreextension.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * SecretSyncStatus defines the observed state of the secret synchronization process.
 */
@Immutable
public final class SecretSyncStatus implements JsonSerializable<SecretSyncStatus> {
    /*
     * LastSuccessfulSyncTime represents the last time the secret was retrieved from the Provider and updated.
     */
    private OffsetDateTime lastSuccessfulSyncTime;

    /*
     * Conditions represent the status of the secret create and update processes. The status can be True, False, or
     * Unknown with various reasons and messages explaining the state. Examples of reasons include CreateSucceeded,
     * ProviderError, InvalidClusterSecretLabelError, InvalidClusterSecretAnnotationError, UnknownError,
     * ValidatingAdmissionPolicyCheckFailed, UserInputValidationFailed, ControllerSpcError, ControllerInternalError,
     * NoValueChange, and ValueChangeOrForceUpdateDetected.
     */
    private List<SecretSyncCondition> conditions;

    /**
     * Creates an instance of SecretSyncStatus class.
     */
    private SecretSyncStatus() {
    }

    /**
     * Get the lastSuccessfulSyncTime property: LastSuccessfulSyncTime represents the last time the secret was retrieved
     * from the Provider and updated.
     * 
     * @return the lastSuccessfulSyncTime value.
     */
    public OffsetDateTime lastSuccessfulSyncTime() {
        return this.lastSuccessfulSyncTime;
    }

    /**
     * Get the conditions property: Conditions represent the status of the secret create and update processes. The
     * status can be True, False, or Unknown with various reasons and messages explaining the state. Examples of reasons
     * include CreateSucceeded, ProviderError, InvalidClusterSecretLabelError, InvalidClusterSecretAnnotationError,
     * UnknownError, ValidatingAdmissionPolicyCheckFailed, UserInputValidationFailed, ControllerSpcError,
     * ControllerInternalError, NoValueChange, and ValueChangeOrForceUpdateDetected.
     * 
     * @return the conditions value.
     */
    public List<SecretSyncCondition> conditions() {
        return this.conditions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (conditions() != null) {
            conditions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretSyncStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretSyncStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecretSyncStatus.
     */
    public static SecretSyncStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretSyncStatus deserializedSecretSyncStatus = new SecretSyncStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastSuccessfulSyncTime".equals(fieldName)) {
                    deserializedSecretSyncStatus.lastSuccessfulSyncTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("conditions".equals(fieldName)) {
                    List<SecretSyncCondition> conditions
                        = reader.readArray(reader1 -> SecretSyncCondition.fromJson(reader1));
                    deserializedSecretSyncStatus.conditions = conditions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretSyncStatus;
        });
    }
}
