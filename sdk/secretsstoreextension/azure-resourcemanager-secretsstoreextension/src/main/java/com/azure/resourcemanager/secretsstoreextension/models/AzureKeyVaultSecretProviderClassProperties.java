// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.secretsstoreextension.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of the AzureKeyVaultSecretProviderClass.
 */
@Fluent
public final class AzureKeyVaultSecretProviderClassProperties
    implements JsonSerializable<AzureKeyVaultSecretProviderClassProperties> {
    /*
     * The name of the Azure Key Vault to sync secrets from.
     */
    private String keyvaultName;

    /*
     * The user assigned managed identity client ID that should be used to access the Azure Key Vault.
     */
    private String clientId;

    /*
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the Azure Key Vault.
     */
    private String tenantId;

    /*
     * Objects defines the desired state of synced K8s secret objects
     */
    private String objects;

    /*
     * Provisioning state of the AzureKeyVaultSecretProviderClass instance.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AzureKeyVaultSecretProviderClassProperties class.
     */
    public AzureKeyVaultSecretProviderClassProperties() {
    }

    /**
     * Get the keyvaultName property: The name of the Azure Key Vault to sync secrets from.
     * 
     * @return the keyvaultName value.
     */
    public String keyvaultName() {
        return this.keyvaultName;
    }

    /**
     * Set the keyvaultName property: The name of the Azure Key Vault to sync secrets from.
     * 
     * @param keyvaultName the keyvaultName value to set.
     * @return the AzureKeyVaultSecretProviderClassProperties object itself.
     */
    public AzureKeyVaultSecretProviderClassProperties withKeyvaultName(String keyvaultName) {
        this.keyvaultName = keyvaultName;
        return this;
    }

    /**
     * Get the clientId property: The user assigned managed identity client ID that should be used to access the Azure
     * Key Vault.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The user assigned managed identity client ID that should be used to access the Azure
     * Key Vault.
     * 
     * @param clientId the clientId value to set.
     * @return the AzureKeyVaultSecretProviderClassProperties object itself.
     */
    public AzureKeyVaultSecretProviderClassProperties withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the tenantId property: The Azure Active Directory tenant ID that should be used for authenticating requests
     * to the Azure Key Vault.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The Azure Active Directory tenant ID that should be used for authenticating requests
     * to the Azure Key Vault.
     * 
     * @param tenantId the tenantId value to set.
     * @return the AzureKeyVaultSecretProviderClassProperties object itself.
     */
    public AzureKeyVaultSecretProviderClassProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the objects property: Objects defines the desired state of synced K8s secret objects.
     * 
     * @return the objects value.
     */
    public String objects() {
        return this.objects;
    }

    /**
     * Set the objects property: Objects defines the desired state of synced K8s secret objects.
     * 
     * @param objects the objects value to set.
     * @return the AzureKeyVaultSecretProviderClassProperties object itself.
     */
    public AzureKeyVaultSecretProviderClassProperties withObjects(String objects) {
        this.objects = objects;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the AzureKeyVaultSecretProviderClass instance.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyvaultName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyvaultName in model AzureKeyVaultSecretProviderClassProperties"));
        }
        if (clientId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clientId in model AzureKeyVaultSecretProviderClassProperties"));
        }
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tenantId in model AzureKeyVaultSecretProviderClassProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureKeyVaultSecretProviderClassProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyvaultName", this.keyvaultName);
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("objects", this.objects);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureKeyVaultSecretProviderClassProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureKeyVaultSecretProviderClassProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureKeyVaultSecretProviderClassProperties.
     */
    public static AzureKeyVaultSecretProviderClassProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureKeyVaultSecretProviderClassProperties deserializedAzureKeyVaultSecretProviderClassProperties
                = new AzureKeyVaultSecretProviderClassProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyvaultName".equals(fieldName)) {
                    deserializedAzureKeyVaultSecretProviderClassProperties.keyvaultName = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    deserializedAzureKeyVaultSecretProviderClassProperties.clientId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedAzureKeyVaultSecretProviderClassProperties.tenantId = reader.getString();
                } else if ("objects".equals(fieldName)) {
                    deserializedAzureKeyVaultSecretProviderClassProperties.objects = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAzureKeyVaultSecretProviderClassProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureKeyVaultSecretProviderClassProperties;
        });
    }
}
