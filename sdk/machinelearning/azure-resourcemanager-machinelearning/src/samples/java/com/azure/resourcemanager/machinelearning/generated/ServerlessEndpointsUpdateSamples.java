// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PartialManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.PartialSku;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpoint;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ServerlessEndpoints Update.
 */
public final class ServerlessEndpointsUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2024-04-01/
     * examples/Workspace/ServerlessEndpoint/update.json
     */
    /**
     * Sample code: Update Workspace Serverless Endpoint.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void updateWorkspaceServerlessEndpoint(
        com.azure.resourcemanager.machinelearning.MachineLearningManager manager) throws IOException {
        ServerlessEndpoint resource = manager.serverlessEndpoints()
            .getWithResponse("test-rg", "my-aml-workspace", "string", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf())
            .withSku(new PartialSku().withName("string")
                .withTier(SkuTier.PREMIUM)
                .withSize("string")
                .withFamily("string")
                .withCapacity(1))
            .withIdentity(new PartialManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("string",
                    SerializerFactory.createDefaultManagementSerializerAdapter()
                        .deserialize("{}", Object.class, SerializerEncoding.JSON))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
