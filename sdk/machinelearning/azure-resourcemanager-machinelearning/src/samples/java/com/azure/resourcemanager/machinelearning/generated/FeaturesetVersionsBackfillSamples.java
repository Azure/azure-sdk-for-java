// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.resourcemanager.machinelearning.models.DataAvailabilityStatus;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersionBackfillRequest;
import com.azure.resourcemanager.machinelearning.models.FeatureWindow;
import com.azure.resourcemanager.machinelearning.models.MaterializationComputeResource;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FeaturesetVersions Backfill.
 */
public final class FeaturesetVersionsBackfillSamples {
    /*
     * x-ms-original-file:
     * specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2024-04-01/
     * examples/Workspace/FeaturesetVersion/backfill.json
     */
    /**
     * Sample code: Backfill Workspace Featureset Version.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void
        backfillWorkspaceFeaturesetVersion(com.azure.resourcemanager.machinelearning.MachineLearningManager manager) {
        manager.featuresetVersions()
            .backfill("test-rg", "my-aml-workspace", "string", "string",
                new FeaturesetVersionBackfillRequest().withDisplayName("string")
                    .withDescription("string")
                    .withFeatureWindow(new FeatureWindow()
                        .withFeatureWindowStart(OffsetDateTime.parse("2020-01-01T12:34:56.999+00:51"))
                        .withFeatureWindowEnd(OffsetDateTime.parse("2020-01-01T12:34:56.999+00:51")))
                    .withDataAvailabilityStatus(Arrays.asList(DataAvailabilityStatus.NONE))
                    .withJobId("string")
                    .withTags(mapOf("string", "string"))
                    .withResource(new MaterializationComputeResource().withInstanceType("string"))
                    .withSparkConfiguration(mapOf("string", "string")),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
