// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Column transformer parameters.
 */
@Fluent
public final class ColumnTransformer implements JsonSerializable<ColumnTransformer> {
    /*
     * Fields to apply transformer logic on.
     */
    private List<String> fields;

    /*
     * Different properties to be passed to transformer.
     * Input expected is dictionary of key,value pairs in JSON format.
     */
    private Object parameters;

    /**
     * Creates an instance of ColumnTransformer class.
     */
    public ColumnTransformer() {
    }

    /**
     * Get the fields property: Fields to apply transformer logic on.
     * 
     * @return the fields value.
     */
    public List<String> fields() {
        return this.fields;
    }

    /**
     * Set the fields property: Fields to apply transformer logic on.
     * 
     * @param fields the fields value to set.
     * @return the ColumnTransformer object itself.
     */
    public ColumnTransformer withFields(List<String> fields) {
        this.fields = fields;
        return this;
    }

    /**
     * Get the parameters property: Different properties to be passed to transformer.
     * Input expected is dictionary of key,value pairs in JSON format.
     * 
     * @return the parameters value.
     */
    public Object parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Different properties to be passed to transformer.
     * Input expected is dictionary of key,value pairs in JSON format.
     * 
     * @param parameters the parameters value to set.
     * @return the ColumnTransformer object itself.
     */
    public ColumnTransformer withParameters(Object parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("fields", this.fields, (writer, element) -> writer.writeString(element));
        jsonWriter.writeUntypedField("parameters", this.parameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ColumnTransformer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ColumnTransformer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ColumnTransformer.
     */
    public static ColumnTransformer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ColumnTransformer deserializedColumnTransformer = new ColumnTransformer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fields".equals(fieldName)) {
                    List<String> fields = reader.readArray(reader1 -> reader1.getString());
                    deserializedColumnTransformer.fields = fields;
                } else if ("parameters".equals(fieldName)) {
                    deserializedColumnTransformer.parameters = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedColumnTransformer;
        });
    }
}
