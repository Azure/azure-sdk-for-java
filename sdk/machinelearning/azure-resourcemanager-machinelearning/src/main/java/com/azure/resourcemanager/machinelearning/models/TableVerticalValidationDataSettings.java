// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Validation settings for AutoML Table vertical tasks - Classification/Regression/Forecasting. */
@Fluent
public final class TableVerticalValidationDataSettings extends ValidationDataSettings {
    /*
     * Columns to use for CVSplit data.
     */
    @JsonProperty(value = "cvSplitColumnNames")
    private List<String> cvSplitColumnNames;

    /*
     * Number of cross validation folds to be applied on training dataset
     * when validation dataset is not provided.
     */
    @JsonProperty(value = "nCrossValidations")
    private NCrossValidations nCrossValidations;

    /**
     * Get the cvSplitColumnNames property: Columns to use for CVSplit data.
     *
     * @return the cvSplitColumnNames value.
     */
    public List<String> cvSplitColumnNames() {
        return this.cvSplitColumnNames;
    }

    /**
     * Set the cvSplitColumnNames property: Columns to use for CVSplit data.
     *
     * @param cvSplitColumnNames the cvSplitColumnNames value to set.
     * @return the TableVerticalValidationDataSettings object itself.
     */
    public TableVerticalValidationDataSettings withCvSplitColumnNames(List<String> cvSplitColumnNames) {
        this.cvSplitColumnNames = cvSplitColumnNames;
        return this;
    }

    /**
     * Get the nCrossValidations property: Number of cross validation folds to be applied on training dataset when
     * validation dataset is not provided.
     *
     * @return the nCrossValidations value.
     */
    public NCrossValidations nCrossValidations() {
        return this.nCrossValidations;
    }

    /**
     * Set the nCrossValidations property: Number of cross validation folds to be applied on training dataset when
     * validation dataset is not provided.
     *
     * @param nCrossValidations the nCrossValidations value to set.
     * @return the TableVerticalValidationDataSettings object itself.
     */
    public TableVerticalValidationDataSettings withNCrossValidations(NCrossValidations nCrossValidations) {
        this.nCrossValidations = nCrossValidations;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TableVerticalValidationDataSettings withData(MLTableJobInput data) {
        super.withData(data);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TableVerticalValidationDataSettings withValidationDataSize(Double validationDataSize) {
        super.withValidationDataSize(validationDataSize);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (nCrossValidations() != null) {
            nCrossValidations().validate();
        }
    }
}
