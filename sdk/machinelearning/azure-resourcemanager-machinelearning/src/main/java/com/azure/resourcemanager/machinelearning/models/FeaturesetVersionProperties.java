// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * DTO object representing feature set version.
 */
@Fluent
public final class FeaturesetVersionProperties extends AssetBase {
    /*
     * Specifies the feature spec details
     */
    private FeaturesetSpecification specification;

    /*
     * Specifies the materialization settings
     */
    private MaterializationSettings materializationSettings;

    /*
     * Specifies the asset stage
     */
    private String stage;

    /*
     * Specifies list of entities
     */
    private List<String> entities;

    /*
     * Provisioning state for the featureset version container.
     */
    private AssetProvisioningState provisioningState;

    /**
     * Creates an instance of FeaturesetVersionProperties class.
     */
    public FeaturesetVersionProperties() {
    }

    /**
     * Get the specification property: Specifies the feature spec details.
     * 
     * @return the specification value.
     */
    public FeaturesetSpecification specification() {
        return this.specification;
    }

    /**
     * Set the specification property: Specifies the feature spec details.
     * 
     * @param specification the specification value to set.
     * @return the FeaturesetVersionProperties object itself.
     */
    public FeaturesetVersionProperties withSpecification(FeaturesetSpecification specification) {
        this.specification = specification;
        return this;
    }

    /**
     * Get the materializationSettings property: Specifies the materialization settings.
     * 
     * @return the materializationSettings value.
     */
    public MaterializationSettings materializationSettings() {
        return this.materializationSettings;
    }

    /**
     * Set the materializationSettings property: Specifies the materialization settings.
     * 
     * @param materializationSettings the materializationSettings value to set.
     * @return the FeaturesetVersionProperties object itself.
     */
    public FeaturesetVersionProperties withMaterializationSettings(MaterializationSettings materializationSettings) {
        this.materializationSettings = materializationSettings;
        return this;
    }

    /**
     * Get the stage property: Specifies the asset stage.
     * 
     * @return the stage value.
     */
    public String stage() {
        return this.stage;
    }

    /**
     * Set the stage property: Specifies the asset stage.
     * 
     * @param stage the stage value to set.
     * @return the FeaturesetVersionProperties object itself.
     */
    public FeaturesetVersionProperties withStage(String stage) {
        this.stage = stage;
        return this;
    }

    /**
     * Get the entities property: Specifies list of entities.
     * 
     * @return the entities value.
     */
    public List<String> entities() {
        return this.entities;
    }

    /**
     * Set the entities property: Specifies list of entities.
     * 
     * @param entities the entities value to set.
     * @return the FeaturesetVersionProperties object itself.
     */
    public FeaturesetVersionProperties withEntities(List<String> entities) {
        this.entities = entities;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the featureset version container.
     * 
     * @return the provisioningState value.
     */
    public AssetProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeaturesetVersionProperties withIsArchived(Boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeaturesetVersionProperties withIsAnonymous(Boolean isAnonymous) {
        super.withIsAnonymous(isAnonymous);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeaturesetVersionProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeaturesetVersionProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeaturesetVersionProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (specification() != null) {
            specification().validate();
        }
        if (materializationSettings() != null) {
            materializationSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isArchived", isArchived());
        jsonWriter.writeBooleanField("isAnonymous", isAnonymous());
        jsonWriter.writeJsonField("specification", this.specification);
        jsonWriter.writeJsonField("materializationSettings", this.materializationSettings);
        jsonWriter.writeStringField("stage", this.stage);
        jsonWriter.writeArrayField("entities", this.entities, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeaturesetVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeaturesetVersionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FeaturesetVersionProperties.
     */
    public static FeaturesetVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeaturesetVersionProperties deserializedFeaturesetVersionProperties = new FeaturesetVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedFeaturesetVersionProperties.withDescription(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedFeaturesetVersionProperties.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedFeaturesetVersionProperties.withProperties(properties);
                } else if ("isArchived".equals(fieldName)) {
                    deserializedFeaturesetVersionProperties.withIsArchived(reader.getNullable(JsonReader::getBoolean));
                } else if ("isAnonymous".equals(fieldName)) {
                    deserializedFeaturesetVersionProperties.withIsAnonymous(reader.getNullable(JsonReader::getBoolean));
                } else if ("specification".equals(fieldName)) {
                    deserializedFeaturesetVersionProperties.specification = FeaturesetSpecification.fromJson(reader);
                } else if ("materializationSettings".equals(fieldName)) {
                    deserializedFeaturesetVersionProperties.materializationSettings
                        = MaterializationSettings.fromJson(reader);
                } else if ("stage".equals(fieldName)) {
                    deserializedFeaturesetVersionProperties.stage = reader.getString();
                } else if ("entities".equals(fieldName)) {
                    List<String> entities = reader.readArray(reader1 -> reader1.getString());
                    deserializedFeaturesetVersionProperties.entities = entities;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFeaturesetVersionProperties.provisioningState
                        = AssetProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeaturesetVersionProperties;
        });
    }
}
