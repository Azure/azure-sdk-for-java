// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Monitoring input data base definition.
 */
@Fluent
public class MonitoringInputDataBase implements JsonSerializable<MonitoringInputDataBase> {
    /*
     * [Required] Specifies the type of signal to monitor.
     */
    private MonitoringInputDataType inputDataType = MonitoringInputDataType.fromString("MonitoringInputDataBase");

    /*
     * The context metadata of the data source.
     */
    private String dataContext;

    /*
     * [Required] Specifies the type of job.
     */
    private JobInputType jobInputType;

    /*
     * [Required] Input Asset URI.
     */
    private String uri;

    /*
     * Mapping of column names to special uses.
     */
    private Map<String, String> columns;

    /**
     * Creates an instance of MonitoringInputDataBase class.
     */
    public MonitoringInputDataBase() {
    }

    /**
     * Get the inputDataType property: [Required] Specifies the type of signal to monitor.
     * 
     * @return the inputDataType value.
     */
    public MonitoringInputDataType inputDataType() {
        return this.inputDataType;
    }

    /**
     * Get the dataContext property: The context metadata of the data source.
     * 
     * @return the dataContext value.
     */
    public String dataContext() {
        return this.dataContext;
    }

    /**
     * Set the dataContext property: The context metadata of the data source.
     * 
     * @param dataContext the dataContext value to set.
     * @return the MonitoringInputDataBase object itself.
     */
    public MonitoringInputDataBase withDataContext(String dataContext) {
        this.dataContext = dataContext;
        return this;
    }

    /**
     * Get the jobInputType property: [Required] Specifies the type of job.
     * 
     * @return the jobInputType value.
     */
    public JobInputType jobInputType() {
        return this.jobInputType;
    }

    /**
     * Set the jobInputType property: [Required] Specifies the type of job.
     * 
     * @param jobInputType the jobInputType value to set.
     * @return the MonitoringInputDataBase object itself.
     */
    public MonitoringInputDataBase withJobInputType(JobInputType jobInputType) {
        this.jobInputType = jobInputType;
        return this;
    }

    /**
     * Get the uri property: [Required] Input Asset URI.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set the uri property: [Required] Input Asset URI.
     * 
     * @param uri the uri value to set.
     * @return the MonitoringInputDataBase object itself.
     */
    public MonitoringInputDataBase withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Get the columns property: Mapping of column names to special uses.
     * 
     * @return the columns value.
     */
    public Map<String, String> columns() {
        return this.columns;
    }

    /**
     * Set the columns property: Mapping of column names to special uses.
     * 
     * @param columns the columns value to set.
     * @return the MonitoringInputDataBase object itself.
     */
    public MonitoringInputDataBase withColumns(Map<String, String> columns) {
        this.columns = columns;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (jobInputType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property jobInputType in model MonitoringInputDataBase"));
        }
        if (uri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property uri in model MonitoringInputDataBase"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitoringInputDataBase.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobInputType", this.jobInputType == null ? null : this.jobInputType.toString());
        jsonWriter.writeStringField("uri", this.uri);
        jsonWriter.writeStringField("inputDataType", this.inputDataType == null ? null : this.inputDataType.toString());
        jsonWriter.writeStringField("dataContext", this.dataContext);
        jsonWriter.writeMapField("columns", this.columns, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitoringInputDataBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitoringInputDataBase if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MonitoringInputDataBase.
     */
    public static MonitoringInputDataBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("inputDataType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Fixed".equals(discriminatorValue)) {
                    return FixedInputData.fromJson(readerToUse.reset());
                } else if ("Rolling".equals(discriminatorValue)) {
                    return RollingInputData.fromJson(readerToUse.reset());
                } else if ("Static".equals(discriminatorValue)) {
                    return StaticInputData.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static MonitoringInputDataBase fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitoringInputDataBase deserializedMonitoringInputDataBase = new MonitoringInputDataBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobInputType".equals(fieldName)) {
                    deserializedMonitoringInputDataBase.jobInputType = JobInputType.fromString(reader.getString());
                } else if ("uri".equals(fieldName)) {
                    deserializedMonitoringInputDataBase.uri = reader.getString();
                } else if ("inputDataType".equals(fieldName)) {
                    deserializedMonitoringInputDataBase.inputDataType
                        = MonitoringInputDataType.fromString(reader.getString());
                } else if ("dataContext".equals(fieldName)) {
                    deserializedMonitoringInputDataBase.dataContext = reader.getString();
                } else if ("columns".equals(fieldName)) {
                    Map<String, String> columns = reader.readMap(reader1 -> reader1.getString());
                    deserializedMonitoringInputDataBase.columns = columns;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitoringInputDataBase;
        });
    }
}
