// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Request payload for creating a backfill request for a given feature set version.
 */
@Fluent
public final class FeaturesetVersionBackfillRequest implements JsonSerializable<FeaturesetVersionBackfillRequest> {
    /*
     * Specifies description
     */
    private String displayName;

    /*
     * Specifies description
     */
    private String description;

    /*
     * Specifies the backfill feature window to be materialized
     */
    private FeatureWindow featureWindow;

    /*
     * Specified the data availability status that you want to backfill
     */
    private List<DataAvailabilityStatus> dataAvailabilityStatus;

    /*
     * Specify the jobId to retry the failed materialization
     */
    private String jobId;

    /*
     * Specifies the tags
     */
    private Map<String, String> tags;

    /*
     * Specifies the compute resource settings
     */
    private MaterializationComputeResource resource;

    /*
     * Specifies the spark compute settings
     */
    private Map<String, String> sparkConfiguration;

    /*
     * Specifies the properties
     */
    private Map<String, String> properties;

    /**
     * Creates an instance of FeaturesetVersionBackfillRequest class.
     */
    public FeaturesetVersionBackfillRequest() {
    }

    /**
     * Get the displayName property: Specifies description.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Specifies description.
     * 
     * @param displayName the displayName value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Specifies description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Specifies description.
     * 
     * @param description the description value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the featureWindow property: Specifies the backfill feature window to be materialized.
     * 
     * @return the featureWindow value.
     */
    public FeatureWindow featureWindow() {
        return this.featureWindow;
    }

    /**
     * Set the featureWindow property: Specifies the backfill feature window to be materialized.
     * 
     * @param featureWindow the featureWindow value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest withFeatureWindow(FeatureWindow featureWindow) {
        this.featureWindow = featureWindow;
        return this;
    }

    /**
     * Get the dataAvailabilityStatus property: Specified the data availability status that you want to backfill.
     * 
     * @return the dataAvailabilityStatus value.
     */
    public List<DataAvailabilityStatus> dataAvailabilityStatus() {
        return this.dataAvailabilityStatus;
    }

    /**
     * Set the dataAvailabilityStatus property: Specified the data availability status that you want to backfill.
     * 
     * @param dataAvailabilityStatus the dataAvailabilityStatus value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest
        withDataAvailabilityStatus(List<DataAvailabilityStatus> dataAvailabilityStatus) {
        this.dataAvailabilityStatus = dataAvailabilityStatus;
        return this;
    }

    /**
     * Get the jobId property: Specify the jobId to retry the failed materialization.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: Specify the jobId to retry the failed materialization.
     * 
     * @param jobId the jobId value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get the tags property: Specifies the tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Specifies the tags.
     * 
     * @param tags the tags value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the resource property: Specifies the compute resource settings.
     * 
     * @return the resource value.
     */
    public MaterializationComputeResource resource() {
        return this.resource;
    }

    /**
     * Set the resource property: Specifies the compute resource settings.
     * 
     * @param resource the resource value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest withResource(MaterializationComputeResource resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get the sparkConfiguration property: Specifies the spark compute settings.
     * 
     * @return the sparkConfiguration value.
     */
    public Map<String, String> sparkConfiguration() {
        return this.sparkConfiguration;
    }

    /**
     * Set the sparkConfiguration property: Specifies the spark compute settings.
     * 
     * @param sparkConfiguration the sparkConfiguration value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest withSparkConfiguration(Map<String, String> sparkConfiguration) {
        this.sparkConfiguration = sparkConfiguration;
        return this;
    }

    /**
     * Get the properties property: Specifies the properties.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Specifies the properties.
     * 
     * @param properties the properties value to set.
     * @return the FeaturesetVersionBackfillRequest object itself.
     */
    public FeaturesetVersionBackfillRequest withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (featureWindow() != null) {
            featureWindow().validate();
        }
        if (resource() != null) {
            resource().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("featureWindow", this.featureWindow);
        jsonWriter.writeArrayField("dataAvailabilityStatus", this.dataAvailabilityStatus,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("jobId", this.jobId);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("resource", this.resource);
        jsonWriter.writeMapField("sparkConfiguration", this.sparkConfiguration,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeaturesetVersionBackfillRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeaturesetVersionBackfillRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FeaturesetVersionBackfillRequest.
     */
    public static FeaturesetVersionBackfillRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeaturesetVersionBackfillRequest deserializedFeaturesetVersionBackfillRequest
                = new FeaturesetVersionBackfillRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedFeaturesetVersionBackfillRequest.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedFeaturesetVersionBackfillRequest.description = reader.getString();
                } else if ("featureWindow".equals(fieldName)) {
                    deserializedFeaturesetVersionBackfillRequest.featureWindow = FeatureWindow.fromJson(reader);
                } else if ("dataAvailabilityStatus".equals(fieldName)) {
                    List<DataAvailabilityStatus> dataAvailabilityStatus
                        = reader.readArray(reader1 -> DataAvailabilityStatus.fromString(reader1.getString()));
                    deserializedFeaturesetVersionBackfillRequest.dataAvailabilityStatus = dataAvailabilityStatus;
                } else if ("jobId".equals(fieldName)) {
                    deserializedFeaturesetVersionBackfillRequest.jobId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedFeaturesetVersionBackfillRequest.tags = tags;
                } else if ("resource".equals(fieldName)) {
                    deserializedFeaturesetVersionBackfillRequest.resource
                        = MaterializationComputeResource.fromJson(reader);
                } else if ("sparkConfiguration".equals(fieldName)) {
                    Map<String, String> sparkConfiguration = reader.readMap(reader1 -> reader1.getString());
                    deserializedFeaturesetVersionBackfillRequest.sparkConfiguration = sparkConfiguration;
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedFeaturesetVersionBackfillRequest.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeaturesetVersionBackfillRequest;
        });
    }
}
