// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The TopNFeaturesByAttribution model.
 */
@Fluent
public final class TopNFeaturesByAttribution extends MonitoringFeatureFilterBase {
    /*
     * [Required] Specifies the feature filter to leverage when selecting features to calculate metrics over.
     */
    private MonitoringFeatureFilterType filterType = MonitoringFeatureFilterType.TOP_NBY_ATTRIBUTION;

    /*
     * The number of top features to include.
     */
    private Integer top;

    /**
     * Creates an instance of TopNFeaturesByAttribution class.
     */
    public TopNFeaturesByAttribution() {
    }

    /**
     * Get the filterType property: [Required] Specifies the feature filter to leverage when selecting features to
     * calculate metrics over.
     * 
     * @return the filterType value.
     */
    @Override
    public MonitoringFeatureFilterType filterType() {
        return this.filterType;
    }

    /**
     * Get the top property: The number of top features to include.
     * 
     * @return the top value.
     */
    public Integer top() {
        return this.top;
    }

    /**
     * Set the top property: The number of top features to include.
     * 
     * @param top the top value to set.
     * @return the TopNFeaturesByAttribution object itself.
     */
    public TopNFeaturesByAttribution withTop(Integer top) {
        this.top = top;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("filterType", this.filterType == null ? null : this.filterType.toString());
        jsonWriter.writeNumberField("top", this.top);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TopNFeaturesByAttribution from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TopNFeaturesByAttribution if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TopNFeaturesByAttribution.
     */
    public static TopNFeaturesByAttribution fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TopNFeaturesByAttribution deserializedTopNFeaturesByAttribution = new TopNFeaturesByAttribution();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filterType".equals(fieldName)) {
                    deserializedTopNFeaturesByAttribution.filterType
                        = MonitoringFeatureFilterType.fromString(reader.getString());
                } else if ("top".equals(fieldName)) {
                    deserializedTopNFeaturesByAttribution.top = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTopNFeaturesByAttribution;
        });
    }
}
