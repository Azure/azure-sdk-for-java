// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Reference to an asset via its path in a job output. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "referenceType")
@JsonTypeName("OutputPath")
@Fluent
public final class OutputPathAssetReference extends AssetReferenceBase {
    /*
     * ARM resource ID of the job.
     */
    @JsonProperty(value = "jobId")
    private String jobId;

    /*
     * The path of the file/directory in the job output.
     */
    @JsonProperty(value = "path")
    private String path;

    /** Creates an instance of OutputPathAssetReference class. */
    public OutputPathAssetReference() {
    }

    /**
     * Get the jobId property: ARM resource ID of the job.
     *
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: ARM resource ID of the job.
     *
     * @param jobId the jobId value to set.
     * @return the OutputPathAssetReference object itself.
     */
    public OutputPathAssetReference withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get the path property: The path of the file/directory in the job output.
     *
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The path of the file/directory in the job output.
     *
     * @param path the path value to set.
     * @return the OutputPathAssetReference object itself.
     */
    public OutputPathAssetReference withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
