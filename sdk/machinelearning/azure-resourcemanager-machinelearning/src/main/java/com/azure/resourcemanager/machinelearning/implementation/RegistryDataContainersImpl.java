// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.RegistryDataContainersClient;
import com.azure.resourcemanager.machinelearning.fluent.models.DataContainerInner;
import com.azure.resourcemanager.machinelearning.models.DataContainer;
import com.azure.resourcemanager.machinelearning.models.ListViewType;
import com.azure.resourcemanager.machinelearning.models.RegistryDataContainers;

public final class RegistryDataContainersImpl implements RegistryDataContainers {
    private static final ClientLogger LOGGER = new ClientLogger(RegistryDataContainersImpl.class);

    private final RegistryDataContainersClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public RegistryDataContainersImpl(RegistryDataContainersClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DataContainer> list(String resourceGroupName, String registryName) {
        PagedIterable<DataContainerInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataContainerImpl(inner1, this.manager()));
    }

    public PagedIterable<DataContainer> list(String resourceGroupName, String registryName, String skip,
        ListViewType listViewType, Context context) {
        PagedIterable<DataContainerInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, skip, listViewType, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataContainerImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String registryName, String name) {
        this.serviceClient().delete(resourceGroupName, registryName, name);
    }

    public void delete(String resourceGroupName, String registryName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, name, context);
    }

    public Response<DataContainer> getWithResponse(String resourceGroupName, String registryName, String name,
        Context context) {
        Response<DataContainerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, registryName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataContainer get(String resourceGroupName, String registryName, String name) {
        DataContainerInner inner = this.serviceClient().get(resourceGroupName, registryName, name);
        if (inner != null) {
            return new DataContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DataContainer getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "data");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'data'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, name, Context.NONE).getValue();
    }

    public Response<DataContainer> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "data");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'data'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "data");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'data'.", id)));
        }
        this.delete(resourceGroupName, registryName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "data");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'data'.", id)));
        }
        this.delete(resourceGroupName, registryName, name, context);
    }

    private RegistryDataContainersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public DataContainerImpl define(String name) {
        return new DataContainerImpl(name, this.manager());
    }
}
