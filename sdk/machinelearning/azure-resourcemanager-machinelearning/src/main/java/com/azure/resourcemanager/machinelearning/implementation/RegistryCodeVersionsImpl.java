// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.RegistryCodeVersionsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.CodeVersionInner;
import com.azure.resourcemanager.machinelearning.fluent.models.PendingUploadResponseDtoInner;
import com.azure.resourcemanager.machinelearning.models.CodeVersion;
import com.azure.resourcemanager.machinelearning.models.PendingUploadRequestDto;
import com.azure.resourcemanager.machinelearning.models.PendingUploadResponseDto;
import com.azure.resourcemanager.machinelearning.models.RegistryCodeVersions;

public final class RegistryCodeVersionsImpl implements RegistryCodeVersions {
    private static final ClientLogger LOGGER = new ClientLogger(RegistryCodeVersionsImpl.class);

    private final RegistryCodeVersionsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public RegistryCodeVersionsImpl(RegistryCodeVersionsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CodeVersion> list(String resourceGroupName, String registryName, String codeName) {
        PagedIterable<CodeVersionInner> inner = this.serviceClient().list(resourceGroupName, registryName, codeName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CodeVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<CodeVersion> list(String resourceGroupName, String registryName, String codeName,
        String orderBy, Integer top, String skip, Context context) {
        PagedIterable<CodeVersionInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, codeName, orderBy, top, skip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CodeVersionImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String registryName, String codeName, String version) {
        this.serviceClient().delete(resourceGroupName, registryName, codeName, version);
    }

    public void delete(String resourceGroupName, String registryName, String codeName, String version,
        Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, codeName, version, context);
    }

    public Response<CodeVersion> getWithResponse(String resourceGroupName, String registryName, String codeName,
        String version, Context context) {
        Response<CodeVersionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, registryName, codeName, version, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CodeVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CodeVersion get(String resourceGroupName, String registryName, String codeName, String version) {
        CodeVersionInner inner = this.serviceClient().get(resourceGroupName, registryName, codeName, version);
        if (inner != null) {
            return new CodeVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CodeVersion createOrUpdate(String resourceGroupName, String registryName, String codeName, String version,
        CodeVersionInner body) {
        CodeVersionInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, registryName, codeName, version, body);
        if (inner != null) {
            return new CodeVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CodeVersion createOrUpdate(String resourceGroupName, String registryName, String codeName, String version,
        CodeVersionInner body, Context context) {
        CodeVersionInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, registryName, codeName, version, body, context);
        if (inner != null) {
            return new CodeVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PendingUploadResponseDto> createOrGetStartPendingUploadWithResponse(String resourceGroupName,
        String registryName, String codeName, String version, PendingUploadRequestDto body, Context context) {
        Response<PendingUploadResponseDtoInner> inner = this.serviceClient()
            .createOrGetStartPendingUploadWithResponse(resourceGroupName, registryName, codeName, version, body,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PendingUploadResponseDtoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PendingUploadResponseDto createOrGetStartPendingUpload(String resourceGroupName, String registryName,
        String codeName, String version, PendingUploadRequestDto body) {
        PendingUploadResponseDtoInner inner = this.serviceClient()
            .createOrGetStartPendingUpload(resourceGroupName, registryName, codeName, version, body);
        if (inner != null) {
            return new PendingUploadResponseDtoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private RegistryCodeVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }
}
