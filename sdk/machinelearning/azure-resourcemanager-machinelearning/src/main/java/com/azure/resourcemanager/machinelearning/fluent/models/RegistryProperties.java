// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.models.ArmResourceId;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateEndpointConnection;
import com.azure.resourcemanager.machinelearning.models.RegistryRegionArmDetails;
import java.io.IOException;
import java.util.List;

/**
 * Details of the Registry.
 */
@Fluent
public final class RegistryProperties implements JsonSerializable<RegistryProperties> {
    /*
     * Discovery URL for the Registry
     */
    private String discoveryUrl;

    /*
     * IntellectualPropertyPublisher for the registry
     */
    private String intellectualPropertyPublisher;

    /*
     * ResourceId of the managed RG if the registry has system created resources
     */
    private ArmResourceId managedResourceGroup;

    /*
     * MLFlow Registry URI for the Registry
     */
    private String mlFlowRegistryUri;

    /*
     * Private endpoint connections info used for pending connections in private link portal
     */
    private List<RegistryPrivateEndpointConnection> registryPrivateEndpointConnections;

    /*
     * Is the Registry accessible from the internet?
     * Possible values: "Enabled" or "Disabled"
     */
    private String publicNetworkAccess;

    /*
     * Details of each region the registry is in
     */
    private List<RegistryRegionArmDetails> regionDetails;

    /**
     * Creates an instance of RegistryProperties class.
     */
    public RegistryProperties() {
    }

    /**
     * Get the discoveryUrl property: Discovery URL for the Registry.
     * 
     * @return the discoveryUrl value.
     */
    public String discoveryUrl() {
        return this.discoveryUrl;
    }

    /**
     * Set the discoveryUrl property: Discovery URL for the Registry.
     * 
     * @param discoveryUrl the discoveryUrl value to set.
     * @return the RegistryProperties object itself.
     */
    public RegistryProperties withDiscoveryUrl(String discoveryUrl) {
        this.discoveryUrl = discoveryUrl;
        return this;
    }

    /**
     * Get the intellectualPropertyPublisher property: IntellectualPropertyPublisher for the registry.
     * 
     * @return the intellectualPropertyPublisher value.
     */
    public String intellectualPropertyPublisher() {
        return this.intellectualPropertyPublisher;
    }

    /**
     * Set the intellectualPropertyPublisher property: IntellectualPropertyPublisher for the registry.
     * 
     * @param intellectualPropertyPublisher the intellectualPropertyPublisher value to set.
     * @return the RegistryProperties object itself.
     */
    public RegistryProperties withIntellectualPropertyPublisher(String intellectualPropertyPublisher) {
        this.intellectualPropertyPublisher = intellectualPropertyPublisher;
        return this;
    }

    /**
     * Get the managedResourceGroup property: ResourceId of the managed RG if the registry has system created resources.
     * 
     * @return the managedResourceGroup value.
     */
    public ArmResourceId managedResourceGroup() {
        return this.managedResourceGroup;
    }

    /**
     * Set the managedResourceGroup property: ResourceId of the managed RG if the registry has system created resources.
     * 
     * @param managedResourceGroup the managedResourceGroup value to set.
     * @return the RegistryProperties object itself.
     */
    public RegistryProperties withManagedResourceGroup(ArmResourceId managedResourceGroup) {
        this.managedResourceGroup = managedResourceGroup;
        return this;
    }

    /**
     * Get the mlFlowRegistryUri property: MLFlow Registry URI for the Registry.
     * 
     * @return the mlFlowRegistryUri value.
     */
    public String mlFlowRegistryUri() {
        return this.mlFlowRegistryUri;
    }

    /**
     * Set the mlFlowRegistryUri property: MLFlow Registry URI for the Registry.
     * 
     * @param mlFlowRegistryUri the mlFlowRegistryUri value to set.
     * @return the RegistryProperties object itself.
     */
    public RegistryProperties withMlFlowRegistryUri(String mlFlowRegistryUri) {
        this.mlFlowRegistryUri = mlFlowRegistryUri;
        return this;
    }

    /**
     * Get the registryPrivateEndpointConnections property: Private endpoint connections info used for pending
     * connections in private link portal.
     * 
     * @return the registryPrivateEndpointConnections value.
     */
    public List<RegistryPrivateEndpointConnection> registryPrivateEndpointConnections() {
        return this.registryPrivateEndpointConnections;
    }

    /**
     * Set the registryPrivateEndpointConnections property: Private endpoint connections info used for pending
     * connections in private link portal.
     * 
     * @param registryPrivateEndpointConnections the registryPrivateEndpointConnections value to set.
     * @return the RegistryProperties object itself.
     */
    public RegistryProperties withRegistryPrivateEndpointConnections(
        List<RegistryPrivateEndpointConnection> registryPrivateEndpointConnections) {
        this.registryPrivateEndpointConnections = registryPrivateEndpointConnections;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Is the Registry accessible from the internet?
     * Possible values: "Enabled" or "Disabled".
     * 
     * @return the publicNetworkAccess value.
     */
    public String publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Is the Registry accessible from the internet?
     * Possible values: "Enabled" or "Disabled".
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the RegistryProperties object itself.
     */
    public RegistryProperties withPublicNetworkAccess(String publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the regionDetails property: Details of each region the registry is in.
     * 
     * @return the regionDetails value.
     */
    public List<RegistryRegionArmDetails> regionDetails() {
        return this.regionDetails;
    }

    /**
     * Set the regionDetails property: Details of each region the registry is in.
     * 
     * @param regionDetails the regionDetails value to set.
     * @return the RegistryProperties object itself.
     */
    public RegistryProperties withRegionDetails(List<RegistryRegionArmDetails> regionDetails) {
        this.regionDetails = regionDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedResourceGroup() != null) {
            managedResourceGroup().validate();
        }
        if (registryPrivateEndpointConnections() != null) {
            registryPrivateEndpointConnections().forEach(e -> e.validate());
        }
        if (regionDetails() != null) {
            regionDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("discoveryUrl", this.discoveryUrl);
        jsonWriter.writeStringField("intellectualPropertyPublisher", this.intellectualPropertyPublisher);
        jsonWriter.writeJsonField("managedResourceGroup", this.managedResourceGroup);
        jsonWriter.writeStringField("mlFlowRegistryUri", this.mlFlowRegistryUri);
        jsonWriter.writeArrayField("registryPrivateEndpointConnections", this.registryPrivateEndpointConnections,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("publicNetworkAccess", this.publicNetworkAccess);
        jsonWriter.writeArrayField("regionDetails", this.regionDetails, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistryProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegistryProperties.
     */
    public static RegistryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistryProperties deserializedRegistryProperties = new RegistryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("discoveryUrl".equals(fieldName)) {
                    deserializedRegistryProperties.discoveryUrl = reader.getString();
                } else if ("intellectualPropertyPublisher".equals(fieldName)) {
                    deserializedRegistryProperties.intellectualPropertyPublisher = reader.getString();
                } else if ("managedResourceGroup".equals(fieldName)) {
                    deserializedRegistryProperties.managedResourceGroup = ArmResourceId.fromJson(reader);
                } else if ("mlFlowRegistryUri".equals(fieldName)) {
                    deserializedRegistryProperties.mlFlowRegistryUri = reader.getString();
                } else if ("registryPrivateEndpointConnections".equals(fieldName)) {
                    List<RegistryPrivateEndpointConnection> registryPrivateEndpointConnections
                        = reader.readArray(reader1 -> RegistryPrivateEndpointConnection.fromJson(reader1));
                    deserializedRegistryProperties.registryPrivateEndpointConnections
                        = registryPrivateEndpointConnections;
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedRegistryProperties.publicNetworkAccess = reader.getString();
                } else if ("regionDetails".equals(fieldName)) {
                    List<RegistryRegionArmDetails> regionDetails
                        = reader.readArray(reader1 -> RegistryRegionArmDetails.fromJson(reader1));
                    deserializedRegistryProperties.regionDetails = regionDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistryProperties;
        });
    }
}
