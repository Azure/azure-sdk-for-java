// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.DataContainersClient;
import com.azure.resourcemanager.machinelearning.fluent.models.DataContainerInner;
import com.azure.resourcemanager.machinelearning.models.DataContainer;
import com.azure.resourcemanager.machinelearning.models.DataContainers;
import com.azure.resourcemanager.machinelearning.models.ListViewType;

public final class DataContainersImpl implements DataContainers {
    private static final ClientLogger LOGGER = new ClientLogger(DataContainersImpl.class);

    private final DataContainersClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public DataContainersImpl(DataContainersClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DataContainer> list(String resourceGroupName, String workspaceName) {
        PagedIterable<DataContainerInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataContainerImpl(inner1, this.manager()));
    }

    public PagedIterable<DataContainer> list(String resourceGroupName, String workspaceName, String skip,
        ListViewType listViewType, Context context) {
        PagedIterable<DataContainerInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, skip, listViewType, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataContainerImpl(inner1, this.manager()));
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String name,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, name, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String name) {
        this.serviceClient().delete(resourceGroupName, workspaceName, name);
    }

    public Response<DataContainer> getWithResponse(String resourceGroupName, String workspaceName, String name,
        Context context) {
        Response<DataContainerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataContainer get(String resourceGroupName, String workspaceName, String name) {
        DataContainerInner inner = this.serviceClient().get(resourceGroupName, workspaceName, name);
        if (inner != null) {
            return new DataContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DataContainer> createOrUpdateWithResponse(String resourceGroupName, String workspaceName,
        String name, DataContainerInner body, Context context) {
        Response<DataContainerInner> inner
            = this.serviceClient().createOrUpdateWithResponse(resourceGroupName, workspaceName, name, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataContainer createOrUpdate(String resourceGroupName, String workspaceName, String name,
        DataContainerInner body) {
        DataContainerInner inner = this.serviceClient().createOrUpdate(resourceGroupName, workspaceName, name, body);
        if (inner != null) {
            return new DataContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private DataContainersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }
}
