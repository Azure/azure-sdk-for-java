// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Version of computeInstance.
 */
@Fluent
public final class ComputeInstanceVersion implements JsonSerializable<ComputeInstanceVersion> {
    /*
     * Runtime of compute instance.
     */
    private String runtime;

    /**
     * Creates an instance of ComputeInstanceVersion class.
     */
    public ComputeInstanceVersion() {
    }

    /**
     * Get the runtime property: Runtime of compute instance.
     * 
     * @return the runtime value.
     */
    public String runtime() {
        return this.runtime;
    }

    /**
     * Set the runtime property: Runtime of compute instance.
     * 
     * @param runtime the runtime value to set.
     * @return the ComputeInstanceVersion object itself.
     */
    public ComputeInstanceVersion withRuntime(String runtime) {
        this.runtime = runtime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("runtime", this.runtime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeInstanceVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeInstanceVersion if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeInstanceVersion.
     */
    public static ComputeInstanceVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeInstanceVersion deserializedComputeInstanceVersion = new ComputeInstanceVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runtime".equals(fieldName)) {
                    deserializedComputeInstanceVersion.runtime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeInstanceVersion;
        });
    }
}
