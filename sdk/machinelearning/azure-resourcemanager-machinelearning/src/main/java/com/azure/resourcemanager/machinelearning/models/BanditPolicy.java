// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation.
 */
@Fluent
public final class BanditPolicy extends EarlyTerminationPolicy {
    /*
     * [Required] Name of policy configuration
     */
    private EarlyTerminationPolicyType policyType = EarlyTerminationPolicyType.BANDIT;

    /*
     * Ratio of the allowed distance from the best performing run.
     */
    private Float slackFactor;

    /*
     * Absolute distance allowed from the best performing run.
     */
    private Float slackAmount;

    /**
     * Creates an instance of BanditPolicy class.
     */
    public BanditPolicy() {
    }

    /**
     * Get the policyType property: [Required] Name of policy configuration.
     * 
     * @return the policyType value.
     */
    @Override
    public EarlyTerminationPolicyType policyType() {
        return this.policyType;
    }

    /**
     * Get the slackFactor property: Ratio of the allowed distance from the best performing run.
     * 
     * @return the slackFactor value.
     */
    public Float slackFactor() {
        return this.slackFactor;
    }

    /**
     * Set the slackFactor property: Ratio of the allowed distance from the best performing run.
     * 
     * @param slackFactor the slackFactor value to set.
     * @return the BanditPolicy object itself.
     */
    public BanditPolicy withSlackFactor(Float slackFactor) {
        this.slackFactor = slackFactor;
        return this;
    }

    /**
     * Get the slackAmount property: Absolute distance allowed from the best performing run.
     * 
     * @return the slackAmount value.
     */
    public Float slackAmount() {
        return this.slackAmount;
    }

    /**
     * Set the slackAmount property: Absolute distance allowed from the best performing run.
     * 
     * @param slackAmount the slackAmount value to set.
     * @return the BanditPolicy object itself.
     */
    public BanditPolicy withSlackAmount(Float slackAmount) {
        this.slackAmount = slackAmount;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BanditPolicy withEvaluationInterval(Integer evaluationInterval) {
        super.withEvaluationInterval(evaluationInterval);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BanditPolicy withDelayEvaluation(Integer delayEvaluation) {
        super.withDelayEvaluation(delayEvaluation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("evaluationInterval", evaluationInterval());
        jsonWriter.writeNumberField("delayEvaluation", delayEvaluation());
        jsonWriter.writeStringField("policyType", this.policyType == null ? null : this.policyType.toString());
        jsonWriter.writeNumberField("slackFactor", this.slackFactor);
        jsonWriter.writeNumberField("slackAmount", this.slackAmount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BanditPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BanditPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BanditPolicy.
     */
    public static BanditPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BanditPolicy deserializedBanditPolicy = new BanditPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("evaluationInterval".equals(fieldName)) {
                    deserializedBanditPolicy.withEvaluationInterval(reader.getNullable(JsonReader::getInt));
                } else if ("delayEvaluation".equals(fieldName)) {
                    deserializedBanditPolicy.withDelayEvaluation(reader.getNullable(JsonReader::getInt));
                } else if ("policyType".equals(fieldName)) {
                    deserializedBanditPolicy.policyType = EarlyTerminationPolicyType.fromString(reader.getString());
                } else if ("slackFactor".equals(fieldName)) {
                    deserializedBanditPolicy.slackFactor = reader.getNullable(JsonReader::getFloat);
                } else if ("slackAmount".equals(fieldName)) {
                    deserializedBanditPolicy.slackAmount = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBanditPolicy;
        });
    }
}
