// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies policy and settings for SSH access.
 */
@Fluent
public final class ComputeInstanceSshSettings implements JsonSerializable<ComputeInstanceSshSettings> {
    /*
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on
     * this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet
     * policy if applicable.
     */
    private SshPublicAccess sshPublicAccess;

    /*
     * Describes the admin user name.
     */
    private String adminUsername;

    /*
     * Describes the port for connecting through SSH.
     */
    private Integer sshPort;

    /*
     * Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key
     * pairs.
     */
    private String adminPublicKey;

    /**
     * Creates an instance of ComputeInstanceSshSettings class.
     */
    public ComputeInstanceSshSettings() {
    }

    /**
     * Get the sshPublicAccess property: State of the public SSH port. Possible values are: Disabled - Indicates that
     * the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and
     * accessible according to the VNet/subnet policy if applicable.
     * 
     * @return the sshPublicAccess value.
     */
    public SshPublicAccess sshPublicAccess() {
        return this.sshPublicAccess;
    }

    /**
     * Set the sshPublicAccess property: State of the public SSH port. Possible values are: Disabled - Indicates that
     * the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and
     * accessible according to the VNet/subnet policy if applicable.
     * 
     * @param sshPublicAccess the sshPublicAccess value to set.
     * @return the ComputeInstanceSshSettings object itself.
     */
    public ComputeInstanceSshSettings withSshPublicAccess(SshPublicAccess sshPublicAccess) {
        this.sshPublicAccess = sshPublicAccess;
        return this;
    }

    /**
     * Get the adminUsername property: Describes the admin user name.
     * 
     * @return the adminUsername value.
     */
    public String adminUsername() {
        return this.adminUsername;
    }

    /**
     * Get the sshPort property: Describes the port for connecting through SSH.
     * 
     * @return the sshPort value.
     */
    public Integer sshPort() {
        return this.sshPort;
    }

    /**
     * Get the adminPublicKey property: Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b
     * 2048" to generate your SSH key pairs.
     * 
     * @return the adminPublicKey value.
     */
    public String adminPublicKey() {
        return this.adminPublicKey;
    }

    /**
     * Set the adminPublicKey property: Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b
     * 2048" to generate your SSH key pairs.
     * 
     * @param adminPublicKey the adminPublicKey value to set.
     * @return the ComputeInstanceSshSettings object itself.
     */
    public ComputeInstanceSshSettings withAdminPublicKey(String adminPublicKey) {
        this.adminPublicKey = adminPublicKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sshPublicAccess",
            this.sshPublicAccess == null ? null : this.sshPublicAccess.toString());
        jsonWriter.writeStringField("adminPublicKey", this.adminPublicKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeInstanceSshSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeInstanceSshSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeInstanceSshSettings.
     */
    public static ComputeInstanceSshSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeInstanceSshSettings deserializedComputeInstanceSshSettings = new ComputeInstanceSshSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sshPublicAccess".equals(fieldName)) {
                    deserializedComputeInstanceSshSettings.sshPublicAccess
                        = SshPublicAccess.fromString(reader.getString());
                } else if ("adminUserName".equals(fieldName)) {
                    deserializedComputeInstanceSshSettings.adminUsername = reader.getString();
                } else if ("sshPort".equals(fieldName)) {
                    deserializedComputeInstanceSshSettings.sshPort = reader.getNullable(JsonReader::getInt);
                } else if ("adminPublicKey".equals(fieldName)) {
                    deserializedComputeInstanceSshSettings.adminPublicKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeInstanceSshSettings;
        });
    }
}
