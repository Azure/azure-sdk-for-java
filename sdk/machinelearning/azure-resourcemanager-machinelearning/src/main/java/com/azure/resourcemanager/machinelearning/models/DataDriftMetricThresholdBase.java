// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DataDriftMetricThresholdBase model.
 */
@Fluent
public class DataDriftMetricThresholdBase implements JsonSerializable<DataDriftMetricThresholdBase> {
    /*
     * [Required] Specifies the data type of the metric threshold.
     */
    private MonitoringFeatureDataType dataType = MonitoringFeatureDataType.fromString("DataDriftMetricThresholdBase");

    /*
     * The threshold value. If null, a default value will be set depending on the selected metric.
     */
    private MonitoringThreshold threshold;

    /**
     * Creates an instance of DataDriftMetricThresholdBase class.
     */
    public DataDriftMetricThresholdBase() {
    }

    /**
     * Get the dataType property: [Required] Specifies the data type of the metric threshold.
     * 
     * @return the dataType value.
     */
    public MonitoringFeatureDataType dataType() {
        return this.dataType;
    }

    /**
     * Get the threshold property: The threshold value. If null, a default value will be set depending on the selected
     * metric.
     * 
     * @return the threshold value.
     */
    public MonitoringThreshold threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold value. If null, a default value will be set depending on the selected
     * metric.
     * 
     * @param threshold the threshold value to set.
     * @return the DataDriftMetricThresholdBase object itself.
     */
    public DataDriftMetricThresholdBase withThreshold(MonitoringThreshold threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (threshold() != null) {
            threshold().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        jsonWriter.writeJsonField("threshold", this.threshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataDriftMetricThresholdBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataDriftMetricThresholdBase if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataDriftMetricThresholdBase.
     */
    public static DataDriftMetricThresholdBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("dataType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Categorical".equals(discriminatorValue)) {
                    return CategoricalDataDriftMetricThreshold.fromJson(readerToUse.reset());
                } else if ("Numerical".equals(discriminatorValue)) {
                    return NumericalDataDriftMetricThreshold.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DataDriftMetricThresholdBase fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataDriftMetricThresholdBase deserializedDataDriftMetricThresholdBase = new DataDriftMetricThresholdBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataType".equals(fieldName)) {
                    deserializedDataDriftMetricThresholdBase.dataType
                        = MonitoringFeatureDataType.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedDataDriftMetricThresholdBase.threshold = MonitoringThreshold.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataDriftMetricThresholdBase;
        });
    }
}
