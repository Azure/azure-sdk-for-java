// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The FeatureSubset model.
 */
@Fluent
public final class FeatureSubset extends MonitoringFeatureFilterBase {
    /*
     * [Required] Specifies the feature filter to leverage when selecting features to calculate metrics over.
     */
    private MonitoringFeatureFilterType filterType = MonitoringFeatureFilterType.FEATURE_SUBSET;

    /*
     * [Required] The list of features to include.
     */
    private List<String> features;

    /**
     * Creates an instance of FeatureSubset class.
     */
    public FeatureSubset() {
    }

    /**
     * Get the filterType property: [Required] Specifies the feature filter to leverage when selecting features to
     * calculate metrics over.
     * 
     * @return the filterType value.
     */
    @Override
    public MonitoringFeatureFilterType filterType() {
        return this.filterType;
    }

    /**
     * Get the features property: [Required] The list of features to include.
     * 
     * @return the features value.
     */
    public List<String> features() {
        return this.features;
    }

    /**
     * Set the features property: [Required] The list of features to include.
     * 
     * @param features the features value to set.
     * @return the FeatureSubset object itself.
     */
    public FeatureSubset withFeatures(List<String> features) {
        this.features = features;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (features() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property features in model FeatureSubset"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FeatureSubset.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("filterType", this.filterType == null ? null : this.filterType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeatureSubset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeatureSubset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FeatureSubset.
     */
    public static FeatureSubset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeatureSubset deserializedFeatureSubset = new FeatureSubset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("features".equals(fieldName)) {
                    List<String> features = reader.readArray(reader1 -> reader1.getString());
                    deserializedFeatureSubset.features = features;
                } else if ("filterType".equals(fieldName)) {
                    deserializedFeatureSubset.filterType = MonitoringFeatureFilterType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeatureSubset;
        });
    }
}
