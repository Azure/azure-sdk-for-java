// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ContentSafety model.
 */
@Fluent
public final class ContentSafety implements JsonSerializable<ContentSafety> {
    /*
     * [Required] Specifies the status of content safety.
     */
    private ContentSafetyStatus contentSafetyStatus;

    /**
     * Creates an instance of ContentSafety class.
     */
    public ContentSafety() {
    }

    /**
     * Get the contentSafetyStatus property: [Required] Specifies the status of content safety.
     * 
     * @return the contentSafetyStatus value.
     */
    public ContentSafetyStatus contentSafetyStatus() {
        return this.contentSafetyStatus;
    }

    /**
     * Set the contentSafetyStatus property: [Required] Specifies the status of content safety.
     * 
     * @param contentSafetyStatus the contentSafetyStatus value to set.
     * @return the ContentSafety object itself.
     */
    public ContentSafety withContentSafetyStatus(ContentSafetyStatus contentSafetyStatus) {
        this.contentSafetyStatus = contentSafetyStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contentSafetyStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property contentSafetyStatus in model ContentSafety"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContentSafety.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contentSafetyStatus",
            this.contentSafetyStatus == null ? null : this.contentSafetyStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContentSafety from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContentSafety if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContentSafety.
     */
    public static ContentSafety fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContentSafety deserializedContentSafety = new ContentSafety();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contentSafetyStatus".equals(fieldName)) {
                    deserializedContentSafety.contentSafetyStatus = ContentSafetyStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContentSafety;
        });
    }
}
