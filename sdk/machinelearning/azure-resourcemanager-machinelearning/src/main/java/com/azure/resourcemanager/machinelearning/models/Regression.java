// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Regression task in AutoML Table vertical.
 */
@Fluent
public final class Regression extends AutoMLVertical {
    /*
     * [Required] Task type for AutoMLJob.
     */
    private TaskType taskType = TaskType.REGRESSION;

    /*
     * Primary metric for regression task.
     */
    private RegressionPrimaryMetrics primaryMetric;

    /*
     * Inputs for training phase for an AutoML Job.
     */
    private RegressionTrainingSettings trainingSettings;

    /*
     * Execution constraints for AutoMLJob.
     */
    private TableVerticalLimitSettings limitSettings;

    /*
     * Number of cross validation folds to be applied on training dataset
     * when validation dataset is not provided.
     */
    private NCrossValidations nCrossValidations;

    /*
     * Columns to use for CVSplit data.
     */
    private List<String> cvSplitColumnNames;

    /*
     * The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the
     * data to be weighted up or down.
     */
    private String weightColumnName;

    /*
     * Validation data inputs.
     */
    private MLTableJobInput validationData;

    /*
     * Test data input.
     */
    private MLTableJobInput testData;

    /*
     * The fraction of training dataset that needs to be set aside for validation purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     */
    private Double validationDataSize;

    /*
     * The fraction of test dataset that needs to be set aside for validation purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     */
    private Double testDataSize;

    /*
     * Featurization inputs needed for AutoML job.
     */
    private TableVerticalFeaturizationSettings featurizationSettings;

    /**
     * Creates an instance of Regression class.
     */
    public Regression() {
    }

    /**
     * Get the taskType property: [Required] Task type for AutoMLJob.
     * 
     * @return the taskType value.
     */
    @Override
    public TaskType taskType() {
        return this.taskType;
    }

    /**
     * Get the primaryMetric property: Primary metric for regression task.
     * 
     * @return the primaryMetric value.
     */
    public RegressionPrimaryMetrics primaryMetric() {
        return this.primaryMetric;
    }

    /**
     * Set the primaryMetric property: Primary metric for regression task.
     * 
     * @param primaryMetric the primaryMetric value to set.
     * @return the Regression object itself.
     */
    public Regression withPrimaryMetric(RegressionPrimaryMetrics primaryMetric) {
        this.primaryMetric = primaryMetric;
        return this;
    }

    /**
     * Get the trainingSettings property: Inputs for training phase for an AutoML Job.
     * 
     * @return the trainingSettings value.
     */
    public RegressionTrainingSettings trainingSettings() {
        return this.trainingSettings;
    }

    /**
     * Set the trainingSettings property: Inputs for training phase for an AutoML Job.
     * 
     * @param trainingSettings the trainingSettings value to set.
     * @return the Regression object itself.
     */
    public Regression withTrainingSettings(RegressionTrainingSettings trainingSettings) {
        this.trainingSettings = trainingSettings;
        return this;
    }

    /**
     * Get the limitSettings property: Execution constraints for AutoMLJob.
     * 
     * @return the limitSettings value.
     */
    public TableVerticalLimitSettings limitSettings() {
        return this.limitSettings;
    }

    /**
     * Set the limitSettings property: Execution constraints for AutoMLJob.
     * 
     * @param limitSettings the limitSettings value to set.
     * @return the Regression object itself.
     */
    public Regression withLimitSettings(TableVerticalLimitSettings limitSettings) {
        this.limitSettings = limitSettings;
        return this;
    }

    /**
     * Get the nCrossValidations property: Number of cross validation folds to be applied on training dataset
     * when validation dataset is not provided.
     * 
     * @return the nCrossValidations value.
     */
    public NCrossValidations nCrossValidations() {
        return this.nCrossValidations;
    }

    /**
     * Set the nCrossValidations property: Number of cross validation folds to be applied on training dataset
     * when validation dataset is not provided.
     * 
     * @param nCrossValidations the nCrossValidations value to set.
     * @return the Regression object itself.
     */
    public Regression withNCrossValidations(NCrossValidations nCrossValidations) {
        this.nCrossValidations = nCrossValidations;
        return this;
    }

    /**
     * Get the cvSplitColumnNames property: Columns to use for CVSplit data.
     * 
     * @return the cvSplitColumnNames value.
     */
    public List<String> cvSplitColumnNames() {
        return this.cvSplitColumnNames;
    }

    /**
     * Set the cvSplitColumnNames property: Columns to use for CVSplit data.
     * 
     * @param cvSplitColumnNames the cvSplitColumnNames value to set.
     * @return the Regression object itself.
     */
    public Regression withCvSplitColumnNames(List<String> cvSplitColumnNames) {
        this.cvSplitColumnNames = cvSplitColumnNames;
        return this;
    }

    /**
     * Get the weightColumnName property: The name of the sample weight column. Automated ML supports a weighted column
     * as an input, causing rows in the data to be weighted up or down.
     * 
     * @return the weightColumnName value.
     */
    public String weightColumnName() {
        return this.weightColumnName;
    }

    /**
     * Set the weightColumnName property: The name of the sample weight column. Automated ML supports a weighted column
     * as an input, causing rows in the data to be weighted up or down.
     * 
     * @param weightColumnName the weightColumnName value to set.
     * @return the Regression object itself.
     */
    public Regression withWeightColumnName(String weightColumnName) {
        this.weightColumnName = weightColumnName;
        return this;
    }

    /**
     * Get the validationData property: Validation data inputs.
     * 
     * @return the validationData value.
     */
    public MLTableJobInput validationData() {
        return this.validationData;
    }

    /**
     * Set the validationData property: Validation data inputs.
     * 
     * @param validationData the validationData value to set.
     * @return the Regression object itself.
     */
    public Regression withValidationData(MLTableJobInput validationData) {
        this.validationData = validationData;
        return this;
    }

    /**
     * Get the testData property: Test data input.
     * 
     * @return the testData value.
     */
    public MLTableJobInput testData() {
        return this.testData;
    }

    /**
     * Set the testData property: Test data input.
     * 
     * @param testData the testData value to set.
     * @return the Regression object itself.
     */
    public Regression withTestData(MLTableJobInput testData) {
        this.testData = testData;
        return this;
    }

    /**
     * Get the validationDataSize property: The fraction of training dataset that needs to be set aside for validation
     * purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     * 
     * @return the validationDataSize value.
     */
    public Double validationDataSize() {
        return this.validationDataSize;
    }

    /**
     * Set the validationDataSize property: The fraction of training dataset that needs to be set aside for validation
     * purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     * 
     * @param validationDataSize the validationDataSize value to set.
     * @return the Regression object itself.
     */
    public Regression withValidationDataSize(Double validationDataSize) {
        this.validationDataSize = validationDataSize;
        return this;
    }

    /**
     * Get the testDataSize property: The fraction of test dataset that needs to be set aside for validation purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     * 
     * @return the testDataSize value.
     */
    public Double testDataSize() {
        return this.testDataSize;
    }

    /**
     * Set the testDataSize property: The fraction of test dataset that needs to be set aside for validation purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     * 
     * @param testDataSize the testDataSize value to set.
     * @return the Regression object itself.
     */
    public Regression withTestDataSize(Double testDataSize) {
        this.testDataSize = testDataSize;
        return this;
    }

    /**
     * Get the featurizationSettings property: Featurization inputs needed for AutoML job.
     * 
     * @return the featurizationSettings value.
     */
    public TableVerticalFeaturizationSettings featurizationSettings() {
        return this.featurizationSettings;
    }

    /**
     * Set the featurizationSettings property: Featurization inputs needed for AutoML job.
     * 
     * @param featurizationSettings the featurizationSettings value to set.
     * @return the Regression object itself.
     */
    public Regression withFeaturizationSettings(TableVerticalFeaturizationSettings featurizationSettings) {
        this.featurizationSettings = featurizationSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Regression withLogVerbosity(LogVerbosity logVerbosity) {
        super.withLogVerbosity(logVerbosity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Regression withTrainingData(MLTableJobInput trainingData) {
        super.withTrainingData(trainingData);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Regression withTargetColumnName(String targetColumnName) {
        super.withTargetColumnName(targetColumnName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (trainingSettings() != null) {
            trainingSettings().validate();
        }
        if (limitSettings() != null) {
            limitSettings().validate();
        }
        if (nCrossValidations() != null) {
            nCrossValidations().validate();
        }
        if (validationData() != null) {
            validationData().validate();
        }
        if (testData() != null) {
            testData().validate();
        }
        if (featurizationSettings() != null) {
            featurizationSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("trainingData", trainingData());
        jsonWriter.writeStringField("logVerbosity", logVerbosity() == null ? null : logVerbosity().toString());
        jsonWriter.writeStringField("targetColumnName", targetColumnName());
        jsonWriter.writeStringField("taskType", this.taskType == null ? null : this.taskType.toString());
        jsonWriter.writeStringField("primaryMetric", this.primaryMetric == null ? null : this.primaryMetric.toString());
        jsonWriter.writeJsonField("trainingSettings", this.trainingSettings);
        jsonWriter.writeJsonField("limitSettings", this.limitSettings);
        jsonWriter.writeJsonField("nCrossValidations", this.nCrossValidations);
        jsonWriter.writeArrayField("cvSplitColumnNames", this.cvSplitColumnNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("weightColumnName", this.weightColumnName);
        jsonWriter.writeJsonField("validationData", this.validationData);
        jsonWriter.writeJsonField("testData", this.testData);
        jsonWriter.writeNumberField("validationDataSize", this.validationDataSize);
        jsonWriter.writeNumberField("testDataSize", this.testDataSize);
        jsonWriter.writeJsonField("featurizationSettings", this.featurizationSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Regression from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Regression if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Regression.
     */
    public static Regression fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Regression deserializedRegression = new Regression();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trainingData".equals(fieldName)) {
                    deserializedRegression.withTrainingData(MLTableJobInput.fromJson(reader));
                } else if ("logVerbosity".equals(fieldName)) {
                    deserializedRegression.withLogVerbosity(LogVerbosity.fromString(reader.getString()));
                } else if ("targetColumnName".equals(fieldName)) {
                    deserializedRegression.withTargetColumnName(reader.getString());
                } else if ("taskType".equals(fieldName)) {
                    deserializedRegression.taskType = TaskType.fromString(reader.getString());
                } else if ("primaryMetric".equals(fieldName)) {
                    deserializedRegression.primaryMetric = RegressionPrimaryMetrics.fromString(reader.getString());
                } else if ("trainingSettings".equals(fieldName)) {
                    deserializedRegression.trainingSettings = RegressionTrainingSettings.fromJson(reader);
                } else if ("limitSettings".equals(fieldName)) {
                    deserializedRegression.limitSettings = TableVerticalLimitSettings.fromJson(reader);
                } else if ("nCrossValidations".equals(fieldName)) {
                    deserializedRegression.nCrossValidations = NCrossValidations.fromJson(reader);
                } else if ("cvSplitColumnNames".equals(fieldName)) {
                    List<String> cvSplitColumnNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedRegression.cvSplitColumnNames = cvSplitColumnNames;
                } else if ("weightColumnName".equals(fieldName)) {
                    deserializedRegression.weightColumnName = reader.getString();
                } else if ("validationData".equals(fieldName)) {
                    deserializedRegression.validationData = MLTableJobInput.fromJson(reader);
                } else if ("testData".equals(fieldName)) {
                    deserializedRegression.testData = MLTableJobInput.fromJson(reader);
                } else if ("validationDataSize".equals(fieldName)) {
                    deserializedRegression.validationDataSize = reader.getNullable(JsonReader::getDouble);
                } else if ("testDataSize".equals(fieldName)) {
                    deserializedRegression.testDataSize = reader.getNullable(JsonReader::getDouble);
                } else if ("featurizationSettings".equals(fieldName)) {
                    deserializedRegression.featurizationSettings = TableVerticalFeaturizationSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegression;
        });
    }
}
