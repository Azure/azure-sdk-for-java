// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/** Base definition for a job. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "jobType",
    defaultImpl = JobBaseDetails.class)
@JsonTypeName("JobBaseDetails")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "AutoML", value = AutoMLJob.class),
    @JsonSubTypes.Type(name = "Command", value = CommandJob.class),
    @JsonSubTypes.Type(name = "Pipeline", value = PipelineJob.class),
    @JsonSubTypes.Type(name = "Sweep", value = SweepJob.class)
})
@Fluent
public class JobBaseDetails extends ResourceBase {
    /*
     * ARM resource ID of the compute resource.
     */
    @JsonProperty(value = "computeId")
    private String computeId;

    /*
     * Display name of job.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * The name of the experiment the job belongs to. If not set, the job is
     * placed in the "Default" experiment.
     */
    @JsonProperty(value = "experimentName")
    private String experimentName;

    /*
     * Identity configuration. If set, this should be one of AmlToken,
     * ManagedIdentity, UserIdentity or null.
     * Defaults to AmlToken if null.
     */
    @JsonProperty(value = "identity")
    private IdentityConfiguration identity;

    /*
     * Is the asset archived?
     */
    @JsonProperty(value = "isArchived")
    private Boolean isArchived;

    /*
     * Schedule definition of job.
     * If no schedule is provided, the job is run once and immediately after
     * submission.
     */
    @JsonProperty(value = "schedule")
    private ScheduleBase schedule;

    /*
     * List of JobEndpoints.
     * For local jobs, a job endpoint will have an endpoint value of
     * FileStreamObject.
     */
    @JsonProperty(value = "services")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, JobService> services;

    /*
     * Status of the job.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private JobStatus status;

    /**
     * Get the computeId property: ARM resource ID of the compute resource.
     *
     * @return the computeId value.
     */
    public String computeId() {
        return this.computeId;
    }

    /**
     * Set the computeId property: ARM resource ID of the compute resource.
     *
     * @param computeId the computeId value to set.
     * @return the JobBaseDetails object itself.
     */
    public JobBaseDetails withComputeId(String computeId) {
        this.computeId = computeId;
        return this;
    }

    /**
     * Get the displayName property: Display name of job.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of job.
     *
     * @param displayName the displayName value to set.
     * @return the JobBaseDetails object itself.
     */
    public JobBaseDetails withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the experimentName property: The name of the experiment the job belongs to. If not set, the job is placed in
     * the "Default" experiment.
     *
     * @return the experimentName value.
     */
    public String experimentName() {
        return this.experimentName;
    }

    /**
     * Set the experimentName property: The name of the experiment the job belongs to. If not set, the job is placed in
     * the "Default" experiment.
     *
     * @param experimentName the experimentName value to set.
     * @return the JobBaseDetails object itself.
     */
    public JobBaseDetails withExperimentName(String experimentName) {
        this.experimentName = experimentName;
        return this;
    }

    /**
     * Get the identity property: Identity configuration. If set, this should be one of AmlToken, ManagedIdentity,
     * UserIdentity or null. Defaults to AmlToken if null.
     *
     * @return the identity value.
     */
    public IdentityConfiguration identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity configuration. If set, this should be one of AmlToken, ManagedIdentity,
     * UserIdentity or null. Defaults to AmlToken if null.
     *
     * @param identity the identity value to set.
     * @return the JobBaseDetails object itself.
     */
    public JobBaseDetails withIdentity(IdentityConfiguration identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the isArchived property: Is the asset archived?.
     *
     * @return the isArchived value.
     */
    public Boolean isArchived() {
        return this.isArchived;
    }

    /**
     * Set the isArchived property: Is the asset archived?.
     *
     * @param isArchived the isArchived value to set.
     * @return the JobBaseDetails object itself.
     */
    public JobBaseDetails withIsArchived(Boolean isArchived) {
        this.isArchived = isArchived;
        return this;
    }

    /**
     * Get the schedule property: Schedule definition of job. If no schedule is provided, the job is run once and
     * immediately after submission.
     *
     * @return the schedule value.
     */
    public ScheduleBase schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: Schedule definition of job. If no schedule is provided, the job is run once and
     * immediately after submission.
     *
     * @param schedule the schedule value to set.
     * @return the JobBaseDetails object itself.
     */
    public JobBaseDetails withSchedule(ScheduleBase schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get the services property: List of JobEndpoints. For local jobs, a job endpoint will have an endpoint value of
     * FileStreamObject.
     *
     * @return the services value.
     */
    public Map<String, JobService> services() {
        return this.services;
    }

    /**
     * Set the services property: List of JobEndpoints. For local jobs, a job endpoint will have an endpoint value of
     * FileStreamObject.
     *
     * @param services the services value to set.
     * @return the JobBaseDetails object itself.
     */
    public JobBaseDetails withServices(Map<String, JobService> services) {
        this.services = services;
        return this;
    }

    /**
     * Get the status property: Status of the job.
     *
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /** {@inheritDoc} */
    @Override
    public JobBaseDetails withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobBaseDetails withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobBaseDetails withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (identity() != null) {
            identity().validate();
        }
        if (schedule() != null) {
            schedule().validate();
        }
        if (services() != null) {
            services()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
