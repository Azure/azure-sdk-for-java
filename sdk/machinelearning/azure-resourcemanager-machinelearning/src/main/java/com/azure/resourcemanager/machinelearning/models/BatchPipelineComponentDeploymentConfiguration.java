// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Properties for a Batch Pipeline Component Deployment.
 */
@Fluent
public final class BatchPipelineComponentDeploymentConfiguration extends BatchDeploymentConfiguration {
    /*
     * [Required] The type of the deployment
     */
    private BatchDeploymentConfigurationType deploymentConfigurationType
        = BatchDeploymentConfigurationType.PIPELINE_COMPONENT;

    /*
     * The ARM id of the component to be run.
     */
    private IdAssetReference componentId;

    /*
     * The description which will be applied to the job.
     */
    private String description;

    /*
     * Run-time settings for the pipeline job.
     */
    private Map<String, String> settings;

    /*
     * The tags which will be applied to the job.
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of BatchPipelineComponentDeploymentConfiguration class.
     */
    public BatchPipelineComponentDeploymentConfiguration() {
    }

    /**
     * Get the deploymentConfigurationType property: [Required] The type of the deployment.
     * 
     * @return the deploymentConfigurationType value.
     */
    @Override
    public BatchDeploymentConfigurationType deploymentConfigurationType() {
        return this.deploymentConfigurationType;
    }

    /**
     * Get the componentId property: The ARM id of the component to be run.
     * 
     * @return the componentId value.
     */
    public IdAssetReference componentId() {
        return this.componentId;
    }

    /**
     * Set the componentId property: The ARM id of the component to be run.
     * 
     * @param componentId the componentId value to set.
     * @return the BatchPipelineComponentDeploymentConfiguration object itself.
     */
    public BatchPipelineComponentDeploymentConfiguration withComponentId(IdAssetReference componentId) {
        this.componentId = componentId;
        return this;
    }

    /**
     * Get the description property: The description which will be applied to the job.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description which will be applied to the job.
     * 
     * @param description the description value to set.
     * @return the BatchPipelineComponentDeploymentConfiguration object itself.
     */
    public BatchPipelineComponentDeploymentConfiguration withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the settings property: Run-time settings for the pipeline job.
     * 
     * @return the settings value.
     */
    public Map<String, String> settings() {
        return this.settings;
    }

    /**
     * Set the settings property: Run-time settings for the pipeline job.
     * 
     * @param settings the settings value to set.
     * @return the BatchPipelineComponentDeploymentConfiguration object itself.
     */
    public BatchPipelineComponentDeploymentConfiguration withSettings(Map<String, String> settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the tags property: The tags which will be applied to the job.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags which will be applied to the job.
     * 
     * @param tags the tags value to set.
     * @return the BatchPipelineComponentDeploymentConfiguration object itself.
     */
    public BatchPipelineComponentDeploymentConfiguration withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (componentId() != null) {
            componentId().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentConfigurationType",
            this.deploymentConfigurationType == null ? null : this.deploymentConfigurationType.toString());
        jsonWriter.writeJsonField("componentId", this.componentId);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("settings", this.settings, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchPipelineComponentDeploymentConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchPipelineComponentDeploymentConfiguration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchPipelineComponentDeploymentConfiguration.
     */
    public static BatchPipelineComponentDeploymentConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchPipelineComponentDeploymentConfiguration deserializedBatchPipelineComponentDeploymentConfiguration
                = new BatchPipelineComponentDeploymentConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentConfigurationType".equals(fieldName)) {
                    deserializedBatchPipelineComponentDeploymentConfiguration.deploymentConfigurationType
                        = BatchDeploymentConfigurationType.fromString(reader.getString());
                } else if ("componentId".equals(fieldName)) {
                    deserializedBatchPipelineComponentDeploymentConfiguration.componentId
                        = IdAssetReference.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedBatchPipelineComponentDeploymentConfiguration.description = reader.getString();
                } else if ("settings".equals(fieldName)) {
                    Map<String, String> settings = reader.readMap(reader1 -> reader1.getString());
                    deserializedBatchPipelineComponentDeploymentConfiguration.settings = settings;
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedBatchPipelineComponentDeploymentConfiguration.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchPipelineComponentDeploymentConfiguration;
        });
    }
}
