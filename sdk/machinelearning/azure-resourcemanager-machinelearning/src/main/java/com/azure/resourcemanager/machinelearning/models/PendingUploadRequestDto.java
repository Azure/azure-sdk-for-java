// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The PendingUploadRequestDto model.
 */
@Fluent
public final class PendingUploadRequestDto implements JsonSerializable<PendingUploadRequestDto> {
    /*
     * If PendingUploadId = null then random guid will be used.
     */
    private String pendingUploadId;

    /*
     * TemporaryBlobReference is the only supported type
     */
    private PendingUploadType pendingUploadType;

    /**
     * Creates an instance of PendingUploadRequestDto class.
     */
    public PendingUploadRequestDto() {
    }

    /**
     * Get the pendingUploadId property: If PendingUploadId = null then random guid will be used.
     * 
     * @return the pendingUploadId value.
     */
    public String pendingUploadId() {
        return this.pendingUploadId;
    }

    /**
     * Set the pendingUploadId property: If PendingUploadId = null then random guid will be used.
     * 
     * @param pendingUploadId the pendingUploadId value to set.
     * @return the PendingUploadRequestDto object itself.
     */
    public PendingUploadRequestDto withPendingUploadId(String pendingUploadId) {
        this.pendingUploadId = pendingUploadId;
        return this;
    }

    /**
     * Get the pendingUploadType property: TemporaryBlobReference is the only supported type.
     * 
     * @return the pendingUploadType value.
     */
    public PendingUploadType pendingUploadType() {
        return this.pendingUploadType;
    }

    /**
     * Set the pendingUploadType property: TemporaryBlobReference is the only supported type.
     * 
     * @param pendingUploadType the pendingUploadType value to set.
     * @return the PendingUploadRequestDto object itself.
     */
    public PendingUploadRequestDto withPendingUploadType(PendingUploadType pendingUploadType) {
        this.pendingUploadType = pendingUploadType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pendingUploadId", this.pendingUploadId);
        jsonWriter.writeStringField("pendingUploadType",
            this.pendingUploadType == null ? null : this.pendingUploadType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PendingUploadRequestDto from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PendingUploadRequestDto if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PendingUploadRequestDto.
     */
    public static PendingUploadRequestDto fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PendingUploadRequestDto deserializedPendingUploadRequestDto = new PendingUploadRequestDto();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pendingUploadId".equals(fieldName)) {
                    deserializedPendingUploadRequestDto.pendingUploadId = reader.getString();
                } else if ("pendingUploadType".equals(fieldName)) {
                    deserializedPendingUploadRequestDto.pendingUploadType
                        = PendingUploadType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPendingUploadRequestDto;
        });
    }
}
