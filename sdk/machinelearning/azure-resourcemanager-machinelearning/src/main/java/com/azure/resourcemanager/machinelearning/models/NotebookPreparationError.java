// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NotebookPreparationError model.
 */
@Fluent
public final class NotebookPreparationError implements JsonSerializable<NotebookPreparationError> {
    /*
     * The errorMessage property.
     */
    private String errorMessage;

    /*
     * The statusCode property.
     */
    private Integer statusCode;

    /**
     * Creates an instance of NotebookPreparationError class.
     */
    public NotebookPreparationError() {
    }

    /**
     * Get the errorMessage property: The errorMessage property.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: The errorMessage property.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the NotebookPreparationError object itself.
     */
    public NotebookPreparationError withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Get the statusCode property: The statusCode property.
     * 
     * @return the statusCode value.
     */
    public Integer statusCode() {
        return this.statusCode;
    }

    /**
     * Set the statusCode property: The statusCode property.
     * 
     * @param statusCode the statusCode value to set.
     * @return the NotebookPreparationError object itself.
     */
    public NotebookPreparationError withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeNumberField("statusCode", this.statusCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotebookPreparationError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotebookPreparationError if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotebookPreparationError.
     */
    public static NotebookPreparationError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotebookPreparationError deserializedNotebookPreparationError = new NotebookPreparationError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorMessage".equals(fieldName)) {
                    deserializedNotebookPreparationError.errorMessage = reader.getString();
                } else if ("statusCode".equals(fieldName)) {
                    deserializedNotebookPreparationError.statusCode = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotebookPreparationError;
        });
    }
}
