// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The MonitorEmailNotificationSettings model.
 */
@Fluent
public final class MonitorEmailNotificationSettings implements JsonSerializable<MonitorEmailNotificationSettings> {
    /*
     * The email recipient list which has a limitation of 499 characters in total.
     */
    private List<String> emails;

    /**
     * Creates an instance of MonitorEmailNotificationSettings class.
     */
    public MonitorEmailNotificationSettings() {
    }

    /**
     * Get the emails property: The email recipient list which has a limitation of 499 characters in total.
     * 
     * @return the emails value.
     */
    public List<String> emails() {
        return this.emails;
    }

    /**
     * Set the emails property: The email recipient list which has a limitation of 499 characters in total.
     * 
     * @param emails the emails value to set.
     * @return the MonitorEmailNotificationSettings object itself.
     */
    public MonitorEmailNotificationSettings withEmails(List<String> emails) {
        this.emails = emails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("emails", this.emails, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitorEmailNotificationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitorEmailNotificationSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MonitorEmailNotificationSettings.
     */
    public static MonitorEmailNotificationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitorEmailNotificationSettings deserializedMonitorEmailNotificationSettings
                = new MonitorEmailNotificationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("emails".equals(fieldName)) {
                    List<String> emails = reader.readArray(reader1 -> reader1.getString());
                    deserializedMonitorEmailNotificationSettings.emails = emails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitorEmailNotificationSettings;
        });
    }
}
