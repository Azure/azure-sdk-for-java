// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Outbound Rule for the managed network of a machine learning workspace.
 */
@Fluent
public class OutboundRule implements JsonSerializable<OutboundRule> {
    /*
     * Type of a managed network Outbound Rule of a machine learning workspace.
     */
    private RuleType type = RuleType.fromString("OutboundRule");

    /*
     * Category of a managed network Outbound Rule of a machine learning workspace.
     */
    private RuleCategory category;

    /*
     * Type of a managed network Outbound Rule of a machine learning workspace.
     */
    private RuleStatus status;

    /**
     * Creates an instance of OutboundRule class.
     */
    public OutboundRule() {
    }

    /**
     * Get the type property: Type of a managed network Outbound Rule of a machine learning workspace.
     * 
     * @return the type value.
     */
    public RuleType type() {
        return this.type;
    }

    /**
     * Get the category property: Category of a managed network Outbound Rule of a machine learning workspace.
     * 
     * @return the category value.
     */
    public RuleCategory category() {
        return this.category;
    }

    /**
     * Set the category property: Category of a managed network Outbound Rule of a machine learning workspace.
     * 
     * @param category the category value to set.
     * @return the OutboundRule object itself.
     */
    public OutboundRule withCategory(RuleCategory category) {
        this.category = category;
        return this;
    }

    /**
     * Get the status property: Type of a managed network Outbound Rule of a machine learning workspace.
     * 
     * @return the status value.
     */
    public RuleStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Type of a managed network Outbound Rule of a machine learning workspace.
     * 
     * @param status the status value to set.
     * @return the OutboundRule object itself.
     */
    public OutboundRule withStatus(RuleStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OutboundRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OutboundRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OutboundRule.
     */
    public static OutboundRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("PrivateEndpoint".equals(discriminatorValue)) {
                    return PrivateEndpointOutboundRule.fromJson(readerToUse.reset());
                } else if ("ServiceTag".equals(discriminatorValue)) {
                    return ServiceTagOutboundRule.fromJson(readerToUse.reset());
                } else if ("FQDN".equals(discriminatorValue)) {
                    return FqdnOutboundRule.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static OutboundRule fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OutboundRule deserializedOutboundRule = new OutboundRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedOutboundRule.type = RuleType.fromString(reader.getString());
                } else if ("category".equals(fieldName)) {
                    deserializedOutboundRule.category = RuleCategory.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedOutboundRule.status = RuleStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOutboundRule;
        });
    }
}
