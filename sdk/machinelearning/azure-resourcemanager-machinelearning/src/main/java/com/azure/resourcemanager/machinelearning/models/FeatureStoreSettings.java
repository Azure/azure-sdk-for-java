// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings for feature store type workspace.
 */
@Fluent
public final class FeatureStoreSettings implements JsonSerializable<FeatureStoreSettings> {
    /*
     * Compute runtime config for feature store type workspace.
     */
    private ComputeRuntimeDto computeRuntime;

    /*
     * The offlineStoreConnectionName property.
     */
    private String offlineStoreConnectionName;

    /*
     * The onlineStoreConnectionName property.
     */
    private String onlineStoreConnectionName;

    /**
     * Creates an instance of FeatureStoreSettings class.
     */
    public FeatureStoreSettings() {
    }

    /**
     * Get the computeRuntime property: Compute runtime config for feature store type workspace.
     * 
     * @return the computeRuntime value.
     */
    public ComputeRuntimeDto computeRuntime() {
        return this.computeRuntime;
    }

    /**
     * Set the computeRuntime property: Compute runtime config for feature store type workspace.
     * 
     * @param computeRuntime the computeRuntime value to set.
     * @return the FeatureStoreSettings object itself.
     */
    public FeatureStoreSettings withComputeRuntime(ComputeRuntimeDto computeRuntime) {
        this.computeRuntime = computeRuntime;
        return this;
    }

    /**
     * Get the offlineStoreConnectionName property: The offlineStoreConnectionName property.
     * 
     * @return the offlineStoreConnectionName value.
     */
    public String offlineStoreConnectionName() {
        return this.offlineStoreConnectionName;
    }

    /**
     * Set the offlineStoreConnectionName property: The offlineStoreConnectionName property.
     * 
     * @param offlineStoreConnectionName the offlineStoreConnectionName value to set.
     * @return the FeatureStoreSettings object itself.
     */
    public FeatureStoreSettings withOfflineStoreConnectionName(String offlineStoreConnectionName) {
        this.offlineStoreConnectionName = offlineStoreConnectionName;
        return this;
    }

    /**
     * Get the onlineStoreConnectionName property: The onlineStoreConnectionName property.
     * 
     * @return the onlineStoreConnectionName value.
     */
    public String onlineStoreConnectionName() {
        return this.onlineStoreConnectionName;
    }

    /**
     * Set the onlineStoreConnectionName property: The onlineStoreConnectionName property.
     * 
     * @param onlineStoreConnectionName the onlineStoreConnectionName value to set.
     * @return the FeatureStoreSettings object itself.
     */
    public FeatureStoreSettings withOnlineStoreConnectionName(String onlineStoreConnectionName) {
        this.onlineStoreConnectionName = onlineStoreConnectionName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (computeRuntime() != null) {
            computeRuntime().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("computeRuntime", this.computeRuntime);
        jsonWriter.writeStringField("offlineStoreConnectionName", this.offlineStoreConnectionName);
        jsonWriter.writeStringField("onlineStoreConnectionName", this.onlineStoreConnectionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeatureStoreSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeatureStoreSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FeatureStoreSettings.
     */
    public static FeatureStoreSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeatureStoreSettings deserializedFeatureStoreSettings = new FeatureStoreSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computeRuntime".equals(fieldName)) {
                    deserializedFeatureStoreSettings.computeRuntime = ComputeRuntimeDto.fromJson(reader);
                } else if ("offlineStoreConnectionName".equals(fieldName)) {
                    deserializedFeatureStoreSettings.offlineStoreConnectionName = reader.getString();
                } else if ("onlineStoreConnectionName".equals(fieldName)) {
                    deserializedFeatureStoreSettings.onlineStoreConnectionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeatureStoreSettings;
        });
    }
}
