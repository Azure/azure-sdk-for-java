// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.RegistryModelContainersClient;
import com.azure.resourcemanager.machinelearning.fluent.models.ModelContainerInner;
import com.azure.resourcemanager.machinelearning.models.ListViewType;
import com.azure.resourcemanager.machinelearning.models.ModelContainer;
import com.azure.resourcemanager.machinelearning.models.RegistryModelContainers;

public final class RegistryModelContainersImpl implements RegistryModelContainers {
    private static final ClientLogger LOGGER = new ClientLogger(RegistryModelContainersImpl.class);

    private final RegistryModelContainersClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public RegistryModelContainersImpl(RegistryModelContainersClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ModelContainer> list(String resourceGroupName, String registryName) {
        PagedIterable<ModelContainerInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ModelContainerImpl(inner1, this.manager()));
    }

    public PagedIterable<ModelContainer> list(String resourceGroupName, String registryName, String skip,
        ListViewType listViewType, Context context) {
        PagedIterable<ModelContainerInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, skip, listViewType, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ModelContainerImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String registryName, String modelName) {
        this.serviceClient().delete(resourceGroupName, registryName, modelName);
    }

    public void delete(String resourceGroupName, String registryName, String modelName, Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, modelName, context);
    }

    public Response<ModelContainer> getWithResponse(String resourceGroupName, String registryName, String modelName,
        Context context) {
        Response<ModelContainerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, registryName, modelName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ModelContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ModelContainer get(String resourceGroupName, String registryName, String modelName) {
        ModelContainerInner inner = this.serviceClient().get(resourceGroupName, registryName, modelName);
        if (inner != null) {
            return new ModelContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ModelContainer getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String modelName = ResourceManagerUtils.getValueFromIdByName(id, "models");
        if (modelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, modelName, Context.NONE).getValue();
    }

    public Response<ModelContainer> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String modelName = ResourceManagerUtils.getValueFromIdByName(id, "models");
        if (modelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, modelName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String modelName = ResourceManagerUtils.getValueFromIdByName(id, "models");
        if (modelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        this.delete(resourceGroupName, registryName, modelName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String modelName = ResourceManagerUtils.getValueFromIdByName(id, "models");
        if (modelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        this.delete(resourceGroupName, registryName, modelName, context);
    }

    private RegistryModelContainersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public ModelContainerImpl define(String name) {
        return new ModelContainerImpl(name, this.manager());
    }
}
