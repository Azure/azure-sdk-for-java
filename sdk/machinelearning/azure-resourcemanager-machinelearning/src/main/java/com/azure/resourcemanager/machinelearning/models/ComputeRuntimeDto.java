// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Compute runtime config for feature store type workspace.
 */
@Fluent
public final class ComputeRuntimeDto implements JsonSerializable<ComputeRuntimeDto> {
    /*
     * The sparkRuntimeVersion property.
     */
    private String sparkRuntimeVersion;

    /**
     * Creates an instance of ComputeRuntimeDto class.
     */
    public ComputeRuntimeDto() {
    }

    /**
     * Get the sparkRuntimeVersion property: The sparkRuntimeVersion property.
     * 
     * @return the sparkRuntimeVersion value.
     */
    public String sparkRuntimeVersion() {
        return this.sparkRuntimeVersion;
    }

    /**
     * Set the sparkRuntimeVersion property: The sparkRuntimeVersion property.
     * 
     * @param sparkRuntimeVersion the sparkRuntimeVersion value to set.
     * @return the ComputeRuntimeDto object itself.
     */
    public ComputeRuntimeDto withSparkRuntimeVersion(String sparkRuntimeVersion) {
        this.sparkRuntimeVersion = sparkRuntimeVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sparkRuntimeVersion", this.sparkRuntimeVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeRuntimeDto from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeRuntimeDto if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeRuntimeDto.
     */
    public static ComputeRuntimeDto fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeRuntimeDto deserializedComputeRuntimeDto = new ComputeRuntimeDto();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sparkRuntimeVersion".equals(fieldName)) {
                    deserializedComputeRuntimeDto.sparkRuntimeVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeRuntimeDto;
        });
    }
}
