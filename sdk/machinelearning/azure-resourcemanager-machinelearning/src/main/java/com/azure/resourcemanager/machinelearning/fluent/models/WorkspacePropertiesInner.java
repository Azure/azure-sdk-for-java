// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.models.EncryptionProperty;
import com.azure.resourcemanager.machinelearning.models.FeatureStoreSettings;
import com.azure.resourcemanager.machinelearning.models.ProvisioningState;
import com.azure.resourcemanager.machinelearning.models.PublicNetworkAccess;
import com.azure.resourcemanager.machinelearning.models.ServerlessComputeSettings;
import com.azure.resourcemanager.machinelearning.models.ServiceManagedResourcesSettings;
import com.azure.resourcemanager.machinelearning.models.SharedPrivateLinkResource;
import com.azure.resourcemanager.machinelearning.models.WorkspaceHubConfig;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a machine learning workspace.
 */
@Fluent
public final class WorkspacePropertiesInner implements JsonSerializable<WorkspacePropertiesInner> {
    /*
     * The immutable id associated with this workspace.
     */
    private String workspaceId;

    /*
     * The description of this workspace.
     */
    private String description;

    /*
     * The friendly name for this workspace. This name in mutable
     */
    private String friendlyName;

    /*
     * ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been
     * created
     */
    private String keyVault;

    /*
     * ARM id of the application insights associated with this workspace.
     */
    private String applicationInsights;

    /*
     * ARM id of the container registry associated with this workspace.
     */
    private String containerRegistry;

    /*
     * ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been
     * created
     */
    private String storageAccount;

    /*
     * Url for the discovery service to identify regional endpoints for machine learning experimentation services
     */
    private String discoveryUrl;

    /*
     * The current deployment state of workspace resource. The provisioningState is to indicate states for resource
     * provisioning.
     */
    private ProvisioningState provisioningState;

    /*
     * The encryption settings of Azure ML workspace.
     */
    private EncryptionProperty encryption;

    /*
     * The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service
     */
    private Boolean hbiWorkspace;

    /*
     * The name of the managed resource group created by workspace RP in customer subscription if the workspace is CMK
     * workspace
     */
    private String serviceProvisionedResourceGroup;

    /*
     * Count of private connections in the workspace
     */
    private Integer privateLinkCount;

    /*
     * The compute name for image build
     */
    private String imageBuildCompute;

    /*
     * The flag to indicate whether to allow public access when behind VNet.
     */
    private Boolean allowPublicAccessWhenBehindVnet;

    /*
     * Whether requests from Public Network are allowed.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * The list of private endpoint connections in the workspace.
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * Settings for serverless compute created in the workspace
     */
    private ServerlessComputeSettings serverlessComputeSettings;

    /*
     * The list of shared private link resources in this workspace.
     */
    private List<SharedPrivateLinkResource> sharedPrivateLinkResources;

    /*
     * The notebook info of Azure ML workspace.
     */
    private NotebookResourceInfoInner notebookInfo;

    /*
     * The service managed resource settings.
     */
    private ServiceManagedResourcesSettings serviceManagedResourcesSettings;

    /*
     * The user assigned identity resource id that represents the workspace identity.
     */
    private String primaryUserAssignedIdentity;

    /*
     * The tenant id associated with this workspace.
     */
    private String tenantId;

    /*
     * If the storage associated with the workspace has hierarchical namespace(HNS) enabled.
     */
    private Boolean storageHnsEnabled;

    /*
     * The URI associated with this workspace that machine learning flow must point at to set up tracking.
     */
    private String mlFlowTrackingUri;

    /*
     * Enabling v1_legacy_mode may prevent you from using features provided by the v2 API.
     */
    private Boolean v1LegacyMode;

    /*
     * Managed Network settings for a machine learning workspace.
     */
    private ManagedNetworkSettingsInner managedNetwork;

    /*
     * Settings for feature store type workspace.
     */
    private FeatureStoreSettings featureStoreSettings;

    /*
     * The associatedWorkspaces property.
     */
    private List<String> associatedWorkspaces;

    /*
     * The enableDataIsolation property.
     */
    private Boolean enableDataIsolation;

    /*
     * The hubResourceId property.
     */
    private String hubResourceId;

    /*
     * WorkspaceHub's configuration object.
     */
    private WorkspaceHubConfig workspaceHubConfig;

    /**
     * Creates an instance of WorkspacePropertiesInner class.
     */
    public WorkspacePropertiesInner() {
    }

    /**
     * Get the workspaceId property: The immutable id associated with this workspace.
     * 
     * @return the workspaceId value.
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    /**
     * Get the description property: The description of this workspace.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of this workspace.
     * 
     * @param description the description value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the friendlyName property: The friendly name for this workspace. This name in mutable.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The friendly name for this workspace. This name in mutable.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the keyVault property: ARM id of the key vault associated with this workspace. This cannot be changed once
     * the workspace has been created.
     * 
     * @return the keyVault value.
     */
    public String keyVault() {
        return this.keyVault;
    }

    /**
     * Set the keyVault property: ARM id of the key vault associated with this workspace. This cannot be changed once
     * the workspace has been created.
     * 
     * @param keyVault the keyVault value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withKeyVault(String keyVault) {
        this.keyVault = keyVault;
        return this;
    }

    /**
     * Get the applicationInsights property: ARM id of the application insights associated with this workspace.
     * 
     * @return the applicationInsights value.
     */
    public String applicationInsights() {
        return this.applicationInsights;
    }

    /**
     * Set the applicationInsights property: ARM id of the application insights associated with this workspace.
     * 
     * @param applicationInsights the applicationInsights value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withApplicationInsights(String applicationInsights) {
        this.applicationInsights = applicationInsights;
        return this;
    }

    /**
     * Get the containerRegistry property: ARM id of the container registry associated with this workspace.
     * 
     * @return the containerRegistry value.
     */
    public String containerRegistry() {
        return this.containerRegistry;
    }

    /**
     * Set the containerRegistry property: ARM id of the container registry associated with this workspace.
     * 
     * @param containerRegistry the containerRegistry value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withContainerRegistry(String containerRegistry) {
        this.containerRegistry = containerRegistry;
        return this;
    }

    /**
     * Get the storageAccount property: ARM id of the storage account associated with this workspace. This cannot be
     * changed once the workspace has been created.
     * 
     * @return the storageAccount value.
     */
    public String storageAccount() {
        return this.storageAccount;
    }

    /**
     * Set the storageAccount property: ARM id of the storage account associated with this workspace. This cannot be
     * changed once the workspace has been created.
     * 
     * @param storageAccount the storageAccount value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withStorageAccount(String storageAccount) {
        this.storageAccount = storageAccount;
        return this;
    }

    /**
     * Get the discoveryUrl property: Url for the discovery service to identify regional endpoints for machine learning
     * experimentation services.
     * 
     * @return the discoveryUrl value.
     */
    public String discoveryUrl() {
        return this.discoveryUrl;
    }

    /**
     * Set the discoveryUrl property: Url for the discovery service to identify regional endpoints for machine learning
     * experimentation services.
     * 
     * @param discoveryUrl the discoveryUrl value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withDiscoveryUrl(String discoveryUrl) {
        this.discoveryUrl = discoveryUrl;
        return this;
    }

    /**
     * Get the provisioningState property: The current deployment state of workspace resource. The provisioningState is
     * to indicate states for resource provisioning.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the encryption property: The encryption settings of Azure ML workspace.
     * 
     * @return the encryption value.
     */
    public EncryptionProperty encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption settings of Azure ML workspace.
     * 
     * @param encryption the encryption value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withEncryption(EncryptionProperty encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the hbiWorkspace property: The flag to signal HBI data in the workspace and reduce diagnostic data collected
     * by the service.
     * 
     * @return the hbiWorkspace value.
     */
    public Boolean hbiWorkspace() {
        return this.hbiWorkspace;
    }

    /**
     * Set the hbiWorkspace property: The flag to signal HBI data in the workspace and reduce diagnostic data collected
     * by the service.
     * 
     * @param hbiWorkspace the hbiWorkspace value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withHbiWorkspace(Boolean hbiWorkspace) {
        this.hbiWorkspace = hbiWorkspace;
        return this;
    }

    /**
     * Get the serviceProvisionedResourceGroup property: The name of the managed resource group created by workspace RP
     * in customer subscription if the workspace is CMK workspace.
     * 
     * @return the serviceProvisionedResourceGroup value.
     */
    public String serviceProvisionedResourceGroup() {
        return this.serviceProvisionedResourceGroup;
    }

    /**
     * Get the privateLinkCount property: Count of private connections in the workspace.
     * 
     * @return the privateLinkCount value.
     */
    public Integer privateLinkCount() {
        return this.privateLinkCount;
    }

    /**
     * Get the imageBuildCompute property: The compute name for image build.
     * 
     * @return the imageBuildCompute value.
     */
    public String imageBuildCompute() {
        return this.imageBuildCompute;
    }

    /**
     * Set the imageBuildCompute property: The compute name for image build.
     * 
     * @param imageBuildCompute the imageBuildCompute value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withImageBuildCompute(String imageBuildCompute) {
        this.imageBuildCompute = imageBuildCompute;
        return this;
    }

    /**
     * Get the allowPublicAccessWhenBehindVnet property: The flag to indicate whether to allow public access when behind
     * VNet.
     * 
     * @return the allowPublicAccessWhenBehindVnet value.
     */
    public Boolean allowPublicAccessWhenBehindVnet() {
        return this.allowPublicAccessWhenBehindVnet;
    }

    /**
     * Set the allowPublicAccessWhenBehindVnet property: The flag to indicate whether to allow public access when behind
     * VNet.
     * 
     * @param allowPublicAccessWhenBehindVnet the allowPublicAccessWhenBehindVnet value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withAllowPublicAccessWhenBehindVnet(Boolean allowPublicAccessWhenBehindVnet) {
        this.allowPublicAccessWhenBehindVnet = allowPublicAccessWhenBehindVnet;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Whether requests from Public Network are allowed.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether requests from Public Network are allowed.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: The list of private endpoint connections in the workspace.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the serverlessComputeSettings property: Settings for serverless compute created in the workspace.
     * 
     * @return the serverlessComputeSettings value.
     */
    public ServerlessComputeSettings serverlessComputeSettings() {
        return this.serverlessComputeSettings;
    }

    /**
     * Set the serverlessComputeSettings property: Settings for serverless compute created in the workspace.
     * 
     * @param serverlessComputeSettings the serverlessComputeSettings value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withServerlessComputeSettings(ServerlessComputeSettings serverlessComputeSettings) {
        this.serverlessComputeSettings = serverlessComputeSettings;
        return this;
    }

    /**
     * Get the sharedPrivateLinkResources property: The list of shared private link resources in this workspace.
     * 
     * @return the sharedPrivateLinkResources value.
     */
    public List<SharedPrivateLinkResource> sharedPrivateLinkResources() {
        return this.sharedPrivateLinkResources;
    }

    /**
     * Set the sharedPrivateLinkResources property: The list of shared private link resources in this workspace.
     * 
     * @param sharedPrivateLinkResources the sharedPrivateLinkResources value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner
        withSharedPrivateLinkResources(List<SharedPrivateLinkResource> sharedPrivateLinkResources) {
        this.sharedPrivateLinkResources = sharedPrivateLinkResources;
        return this;
    }

    /**
     * Get the notebookInfo property: The notebook info of Azure ML workspace.
     * 
     * @return the notebookInfo value.
     */
    public NotebookResourceInfoInner notebookInfo() {
        return this.notebookInfo;
    }

    /**
     * Get the serviceManagedResourcesSettings property: The service managed resource settings.
     * 
     * @return the serviceManagedResourcesSettings value.
     */
    public ServiceManagedResourcesSettings serviceManagedResourcesSettings() {
        return this.serviceManagedResourcesSettings;
    }

    /**
     * Set the serviceManagedResourcesSettings property: The service managed resource settings.
     * 
     * @param serviceManagedResourcesSettings the serviceManagedResourcesSettings value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner
        withServiceManagedResourcesSettings(ServiceManagedResourcesSettings serviceManagedResourcesSettings) {
        this.serviceManagedResourcesSettings = serviceManagedResourcesSettings;
        return this;
    }

    /**
     * Get the primaryUserAssignedIdentity property: The user assigned identity resource id that represents the
     * workspace identity.
     * 
     * @return the primaryUserAssignedIdentity value.
     */
    public String primaryUserAssignedIdentity() {
        return this.primaryUserAssignedIdentity;
    }

    /**
     * Set the primaryUserAssignedIdentity property: The user assigned identity resource id that represents the
     * workspace identity.
     * 
     * @param primaryUserAssignedIdentity the primaryUserAssignedIdentity value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withPrimaryUserAssignedIdentity(String primaryUserAssignedIdentity) {
        this.primaryUserAssignedIdentity = primaryUserAssignedIdentity;
        return this;
    }

    /**
     * Get the tenantId property: The tenant id associated with this workspace.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the storageHnsEnabled property: If the storage associated with the workspace has hierarchical namespace(HNS)
     * enabled.
     * 
     * @return the storageHnsEnabled value.
     */
    public Boolean storageHnsEnabled() {
        return this.storageHnsEnabled;
    }

    /**
     * Get the mlFlowTrackingUri property: The URI associated with this workspace that machine learning flow must point
     * at to set up tracking.
     * 
     * @return the mlFlowTrackingUri value.
     */
    public String mlFlowTrackingUri() {
        return this.mlFlowTrackingUri;
    }

    /**
     * Get the v1LegacyMode property: Enabling v1_legacy_mode may prevent you from using features provided by the v2
     * API.
     * 
     * @return the v1LegacyMode value.
     */
    public Boolean v1LegacyMode() {
        return this.v1LegacyMode;
    }

    /**
     * Set the v1LegacyMode property: Enabling v1_legacy_mode may prevent you from using features provided by the v2
     * API.
     * 
     * @param v1LegacyMode the v1LegacyMode value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withV1LegacyMode(Boolean v1LegacyMode) {
        this.v1LegacyMode = v1LegacyMode;
        return this;
    }

    /**
     * Get the managedNetwork property: Managed Network settings for a machine learning workspace.
     * 
     * @return the managedNetwork value.
     */
    public ManagedNetworkSettingsInner managedNetwork() {
        return this.managedNetwork;
    }

    /**
     * Set the managedNetwork property: Managed Network settings for a machine learning workspace.
     * 
     * @param managedNetwork the managedNetwork value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withManagedNetwork(ManagedNetworkSettingsInner managedNetwork) {
        this.managedNetwork = managedNetwork;
        return this;
    }

    /**
     * Get the featureStoreSettings property: Settings for feature store type workspace.
     * 
     * @return the featureStoreSettings value.
     */
    public FeatureStoreSettings featureStoreSettings() {
        return this.featureStoreSettings;
    }

    /**
     * Set the featureStoreSettings property: Settings for feature store type workspace.
     * 
     * @param featureStoreSettings the featureStoreSettings value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withFeatureStoreSettings(FeatureStoreSettings featureStoreSettings) {
        this.featureStoreSettings = featureStoreSettings;
        return this;
    }

    /**
     * Get the associatedWorkspaces property: The associatedWorkspaces property.
     * 
     * @return the associatedWorkspaces value.
     */
    public List<String> associatedWorkspaces() {
        return this.associatedWorkspaces;
    }

    /**
     * Set the associatedWorkspaces property: The associatedWorkspaces property.
     * 
     * @param associatedWorkspaces the associatedWorkspaces value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withAssociatedWorkspaces(List<String> associatedWorkspaces) {
        this.associatedWorkspaces = associatedWorkspaces;
        return this;
    }

    /**
     * Get the enableDataIsolation property: The enableDataIsolation property.
     * 
     * @return the enableDataIsolation value.
     */
    public Boolean enableDataIsolation() {
        return this.enableDataIsolation;
    }

    /**
     * Set the enableDataIsolation property: The enableDataIsolation property.
     * 
     * @param enableDataIsolation the enableDataIsolation value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withEnableDataIsolation(Boolean enableDataIsolation) {
        this.enableDataIsolation = enableDataIsolation;
        return this;
    }

    /**
     * Get the hubResourceId property: The hubResourceId property.
     * 
     * @return the hubResourceId value.
     */
    public String hubResourceId() {
        return this.hubResourceId;
    }

    /**
     * Set the hubResourceId property: The hubResourceId property.
     * 
     * @param hubResourceId the hubResourceId value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withHubResourceId(String hubResourceId) {
        this.hubResourceId = hubResourceId;
        return this;
    }

    /**
     * Get the workspaceHubConfig property: WorkspaceHub's configuration object.
     * 
     * @return the workspaceHubConfig value.
     */
    public WorkspaceHubConfig workspaceHubConfig() {
        return this.workspaceHubConfig;
    }

    /**
     * Set the workspaceHubConfig property: WorkspaceHub's configuration object.
     * 
     * @param workspaceHubConfig the workspaceHubConfig value to set.
     * @return the WorkspacePropertiesInner object itself.
     */
    public WorkspacePropertiesInner withWorkspaceHubConfig(WorkspaceHubConfig workspaceHubConfig) {
        this.workspaceHubConfig = workspaceHubConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (encryption() != null) {
            encryption().validate();
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
        if (serverlessComputeSettings() != null) {
            serverlessComputeSettings().validate();
        }
        if (sharedPrivateLinkResources() != null) {
            sharedPrivateLinkResources().forEach(e -> e.validate());
        }
        if (notebookInfo() != null) {
            notebookInfo().validate();
        }
        if (serviceManagedResourcesSettings() != null) {
            serviceManagedResourcesSettings().validate();
        }
        if (managedNetwork() != null) {
            managedNetwork().validate();
        }
        if (featureStoreSettings() != null) {
            featureStoreSettings().validate();
        }
        if (workspaceHubConfig() != null) {
            workspaceHubConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("keyVault", this.keyVault);
        jsonWriter.writeStringField("applicationInsights", this.applicationInsights);
        jsonWriter.writeStringField("containerRegistry", this.containerRegistry);
        jsonWriter.writeStringField("storageAccount", this.storageAccount);
        jsonWriter.writeStringField("discoveryUrl", this.discoveryUrl);
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeBooleanField("hbiWorkspace", this.hbiWorkspace);
        jsonWriter.writeStringField("imageBuildCompute", this.imageBuildCompute);
        jsonWriter.writeBooleanField("allowPublicAccessWhenBehindVnet", this.allowPublicAccessWhenBehindVnet);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeJsonField("serverlessComputeSettings", this.serverlessComputeSettings);
        jsonWriter.writeArrayField("sharedPrivateLinkResources", this.sharedPrivateLinkResources,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("serviceManagedResourcesSettings", this.serviceManagedResourcesSettings);
        jsonWriter.writeStringField("primaryUserAssignedIdentity", this.primaryUserAssignedIdentity);
        jsonWriter.writeBooleanField("v1LegacyMode", this.v1LegacyMode);
        jsonWriter.writeJsonField("managedNetwork", this.managedNetwork);
        jsonWriter.writeJsonField("featureStoreSettings", this.featureStoreSettings);
        jsonWriter.writeArrayField("associatedWorkspaces", this.associatedWorkspaces,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("enableDataIsolation", this.enableDataIsolation);
        jsonWriter.writeStringField("hubResourceId", this.hubResourceId);
        jsonWriter.writeJsonField("workspaceHubConfig", this.workspaceHubConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspacePropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspacePropertiesInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkspacePropertiesInner.
     */
    public static WorkspacePropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspacePropertiesInner deserializedWorkspacePropertiesInner = new WorkspacePropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workspaceId".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.workspaceId = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.description = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.friendlyName = reader.getString();
                } else if ("keyVault".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.keyVault = reader.getString();
                } else if ("applicationInsights".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.applicationInsights = reader.getString();
                } else if ("containerRegistry".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.containerRegistry = reader.getString();
                } else if ("storageAccount".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.storageAccount = reader.getString();
                } else if ("discoveryUrl".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.discoveryUrl = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("encryption".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.encryption = EncryptionProperty.fromJson(reader);
                } else if ("hbiWorkspace".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.hbiWorkspace = reader.getNullable(JsonReader::getBoolean);
                } else if ("serviceProvisionedResourceGroup".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.serviceProvisionedResourceGroup = reader.getString();
                } else if ("privateLinkCount".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.privateLinkCount = reader.getNullable(JsonReader::getInt);
                } else if ("imageBuildCompute".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.imageBuildCompute = reader.getString();
                } else if ("allowPublicAccessWhenBehindVnet".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.allowPublicAccessWhenBehindVnet
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedWorkspacePropertiesInner.privateEndpointConnections = privateEndpointConnections;
                } else if ("serverlessComputeSettings".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.serverlessComputeSettings
                        = ServerlessComputeSettings.fromJson(reader);
                } else if ("sharedPrivateLinkResources".equals(fieldName)) {
                    List<SharedPrivateLinkResource> sharedPrivateLinkResources
                        = reader.readArray(reader1 -> SharedPrivateLinkResource.fromJson(reader1));
                    deserializedWorkspacePropertiesInner.sharedPrivateLinkResources = sharedPrivateLinkResources;
                } else if ("notebookInfo".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.notebookInfo = NotebookResourceInfoInner.fromJson(reader);
                } else if ("serviceManagedResourcesSettings".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.serviceManagedResourcesSettings
                        = ServiceManagedResourcesSettings.fromJson(reader);
                } else if ("primaryUserAssignedIdentity".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.primaryUserAssignedIdentity = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.tenantId = reader.getString();
                } else if ("storageHnsEnabled".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.storageHnsEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("mlFlowTrackingUri".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.mlFlowTrackingUri = reader.getString();
                } else if ("v1LegacyMode".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.v1LegacyMode = reader.getNullable(JsonReader::getBoolean);
                } else if ("managedNetwork".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.managedNetwork = ManagedNetworkSettingsInner.fromJson(reader);
                } else if ("featureStoreSettings".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.featureStoreSettings = FeatureStoreSettings.fromJson(reader);
                } else if ("associatedWorkspaces".equals(fieldName)) {
                    List<String> associatedWorkspaces = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkspacePropertiesInner.associatedWorkspaces = associatedWorkspaces;
                } else if ("enableDataIsolation".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.enableDataIsolation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("hubResourceId".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.hubResourceId = reader.getString();
                } else if ("workspaceHubConfig".equals(fieldName)) {
                    deserializedWorkspacePropertiesInner.workspaceHubConfig = WorkspaceHubConfig.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspacePropertiesInner;
        });
    }
}
