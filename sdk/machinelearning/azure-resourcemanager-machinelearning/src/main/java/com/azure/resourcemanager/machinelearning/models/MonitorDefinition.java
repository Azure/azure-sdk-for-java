// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The MonitorDefinition model.
 */
@Fluent
public final class MonitorDefinition implements JsonSerializable<MonitorDefinition> {
    /*
     * The entities targeted by the monitor.
     */
    private MonitoringTarget monitoringTarget;

    /*
     * [Required] The signals to monitor.
     */
    private Map<String, MonitoringSignalBase> signals;

    /*
     * [Required] The ARM resource ID of the compute resource to run the monitoring job on.
     */
    private MonitorComputeConfigurationBase computeConfiguration;

    /*
     * The monitor's notification settings.
     */
    private MonitorNotificationSettings alertNotificationSettings;

    /**
     * Creates an instance of MonitorDefinition class.
     */
    public MonitorDefinition() {
    }

    /**
     * Get the monitoringTarget property: The entities targeted by the monitor.
     * 
     * @return the monitoringTarget value.
     */
    public MonitoringTarget monitoringTarget() {
        return this.monitoringTarget;
    }

    /**
     * Set the monitoringTarget property: The entities targeted by the monitor.
     * 
     * @param monitoringTarget the monitoringTarget value to set.
     * @return the MonitorDefinition object itself.
     */
    public MonitorDefinition withMonitoringTarget(MonitoringTarget monitoringTarget) {
        this.monitoringTarget = monitoringTarget;
        return this;
    }

    /**
     * Get the signals property: [Required] The signals to monitor.
     * 
     * @return the signals value.
     */
    public Map<String, MonitoringSignalBase> signals() {
        return this.signals;
    }

    /**
     * Set the signals property: [Required] The signals to monitor.
     * 
     * @param signals the signals value to set.
     * @return the MonitorDefinition object itself.
     */
    public MonitorDefinition withSignals(Map<String, MonitoringSignalBase> signals) {
        this.signals = signals;
        return this;
    }

    /**
     * Get the computeConfiguration property: [Required] The ARM resource ID of the compute resource to run the
     * monitoring job on.
     * 
     * @return the computeConfiguration value.
     */
    public MonitorComputeConfigurationBase computeConfiguration() {
        return this.computeConfiguration;
    }

    /**
     * Set the computeConfiguration property: [Required] The ARM resource ID of the compute resource to run the
     * monitoring job on.
     * 
     * @param computeConfiguration the computeConfiguration value to set.
     * @return the MonitorDefinition object itself.
     */
    public MonitorDefinition withComputeConfiguration(MonitorComputeConfigurationBase computeConfiguration) {
        this.computeConfiguration = computeConfiguration;
        return this;
    }

    /**
     * Get the alertNotificationSettings property: The monitor's notification settings.
     * 
     * @return the alertNotificationSettings value.
     */
    public MonitorNotificationSettings alertNotificationSettings() {
        return this.alertNotificationSettings;
    }

    /**
     * Set the alertNotificationSettings property: The monitor's notification settings.
     * 
     * @param alertNotificationSettings the alertNotificationSettings value to set.
     * @return the MonitorDefinition object itself.
     */
    public MonitorDefinition withAlertNotificationSettings(MonitorNotificationSettings alertNotificationSettings) {
        this.alertNotificationSettings = alertNotificationSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (monitoringTarget() != null) {
            monitoringTarget().validate();
        }
        if (signals() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property signals in model MonitorDefinition"));
        } else {
            signals().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (computeConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property computeConfiguration in model MonitorDefinition"));
        } else {
            computeConfiguration().validate();
        }
        if (alertNotificationSettings() != null) {
            alertNotificationSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitorDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("signals", this.signals, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("computeConfiguration", this.computeConfiguration);
        jsonWriter.writeJsonField("monitoringTarget", this.monitoringTarget);
        jsonWriter.writeJsonField("alertNotificationSettings", this.alertNotificationSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitorDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitorDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MonitorDefinition.
     */
    public static MonitorDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitorDefinition deserializedMonitorDefinition = new MonitorDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("signals".equals(fieldName)) {
                    Map<String, MonitoringSignalBase> signals
                        = reader.readMap(reader1 -> MonitoringSignalBase.fromJson(reader1));
                    deserializedMonitorDefinition.signals = signals;
                } else if ("computeConfiguration".equals(fieldName)) {
                    deserializedMonitorDefinition.computeConfiguration
                        = MonitorComputeConfigurationBase.fromJson(reader);
                } else if ("monitoringTarget".equals(fieldName)) {
                    deserializedMonitorDefinition.monitoringTarget = MonitoringTarget.fromJson(reader);
                } else if ("alertNotificationSettings".equals(fieldName)) {
                    deserializedMonitorDefinition.alertNotificationSettings
                        = MonitorNotificationSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitorDefinition;
        });
    }
}
