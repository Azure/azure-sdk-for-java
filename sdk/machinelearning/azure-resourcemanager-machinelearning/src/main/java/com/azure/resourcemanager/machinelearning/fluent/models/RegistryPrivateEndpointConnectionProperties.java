// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointResource;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateLinkServiceConnectionState;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the Private Endpoint Connection.
 */
@Fluent
public final class RegistryPrivateEndpointConnectionProperties
    implements JsonSerializable<RegistryPrivateEndpointConnectionProperties> {
    /*
     * The group ids
     */
    private List<String> groupIds;

    /*
     * The PE network resource that is linked to this PE connection.
     */
    private PrivateEndpointResource privateEndpoint;

    /*
     * The connection state.
     */
    private RegistryPrivateLinkServiceConnectionState registryPrivateLinkServiceConnectionState;

    /*
     * One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
     */
    private String provisioningState;

    /**
     * Creates an instance of RegistryPrivateEndpointConnectionProperties class.
     */
    public RegistryPrivateEndpointConnectionProperties() {
    }

    /**
     * Get the groupIds property: The group ids.
     * 
     * @return the groupIds value.
     */
    public List<String> groupIds() {
        return this.groupIds;
    }

    /**
     * Set the groupIds property: The group ids.
     * 
     * @param groupIds the groupIds value to set.
     * @return the RegistryPrivateEndpointConnectionProperties object itself.
     */
    public RegistryPrivateEndpointConnectionProperties withGroupIds(List<String> groupIds) {
        this.groupIds = groupIds;
        return this;
    }

    /**
     * Get the privateEndpoint property: The PE network resource that is linked to this PE connection.
     * 
     * @return the privateEndpoint value.
     */
    public PrivateEndpointResource privateEndpoint() {
        return this.privateEndpoint;
    }

    /**
     * Set the privateEndpoint property: The PE network resource that is linked to this PE connection.
     * 
     * @param privateEndpoint the privateEndpoint value to set.
     * @return the RegistryPrivateEndpointConnectionProperties object itself.
     */
    public RegistryPrivateEndpointConnectionProperties withPrivateEndpoint(PrivateEndpointResource privateEndpoint) {
        this.privateEndpoint = privateEndpoint;
        return this;
    }

    /**
     * Get the registryPrivateLinkServiceConnectionState property: The connection state.
     * 
     * @return the registryPrivateLinkServiceConnectionState value.
     */
    public RegistryPrivateLinkServiceConnectionState registryPrivateLinkServiceConnectionState() {
        return this.registryPrivateLinkServiceConnectionState;
    }

    /**
     * Set the registryPrivateLinkServiceConnectionState property: The connection state.
     * 
     * @param registryPrivateLinkServiceConnectionState the registryPrivateLinkServiceConnectionState value to set.
     * @return the RegistryPrivateEndpointConnectionProperties object itself.
     */
    public RegistryPrivateEndpointConnectionProperties withRegistryPrivateLinkServiceConnectionState(
        RegistryPrivateLinkServiceConnectionState registryPrivateLinkServiceConnectionState) {
        this.registryPrivateLinkServiceConnectionState = registryPrivateLinkServiceConnectionState;
        return this;
    }

    /**
     * Get the provisioningState property: One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's
     * null.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's
     * null.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the RegistryPrivateEndpointConnectionProperties object itself.
     */
    public RegistryPrivateEndpointConnectionProperties withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateEndpoint() != null) {
            privateEndpoint().validate();
        }
        if (registryPrivateLinkServiceConnectionState() != null) {
            registryPrivateLinkServiceConnectionState().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("groupIds", this.groupIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("privateEndpoint", this.privateEndpoint);
        jsonWriter.writeJsonField("registryPrivateLinkServiceConnectionState",
            this.registryPrivateLinkServiceConnectionState);
        jsonWriter.writeStringField("provisioningState", this.provisioningState);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistryPrivateEndpointConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistryPrivateEndpointConnectionProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegistryPrivateEndpointConnectionProperties.
     */
    public static RegistryPrivateEndpointConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistryPrivateEndpointConnectionProperties deserializedRegistryPrivateEndpointConnectionProperties
                = new RegistryPrivateEndpointConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("groupIds".equals(fieldName)) {
                    List<String> groupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedRegistryPrivateEndpointConnectionProperties.groupIds = groupIds;
                } else if ("privateEndpoint".equals(fieldName)) {
                    deserializedRegistryPrivateEndpointConnectionProperties.privateEndpoint
                        = PrivateEndpointResource.fromJson(reader);
                } else if ("registryPrivateLinkServiceConnectionState".equals(fieldName)) {
                    deserializedRegistryPrivateEndpointConnectionProperties.registryPrivateLinkServiceConnectionState
                        = RegistryPrivateLinkServiceConnectionState.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRegistryPrivateEndpointConnectionProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistryPrivateEndpointConnectionProperties;
        });
    }
}
