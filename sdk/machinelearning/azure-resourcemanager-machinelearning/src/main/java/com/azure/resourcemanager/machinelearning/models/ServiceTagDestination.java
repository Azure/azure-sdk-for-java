// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
 */
@Fluent
public final class ServiceTagDestination implements JsonSerializable<ServiceTagDestination> {
    /*
     * The action enum for networking rule.
     */
    private RuleAction action;

    /*
     * Optional, if provided, the ServiceTag property will be ignored.
     */
    private List<String> addressPrefixes;

    /*
     * The portRanges property.
     */
    private String portRanges;

    /*
     * The protocol property.
     */
    private String protocol;

    /*
     * The serviceTag property.
     */
    private String serviceTag;

    /**
     * Creates an instance of ServiceTagDestination class.
     */
    public ServiceTagDestination() {
    }

    /**
     * Get the action property: The action enum for networking rule.
     * 
     * @return the action value.
     */
    public RuleAction action() {
        return this.action;
    }

    /**
     * Set the action property: The action enum for networking rule.
     * 
     * @param action the action value to set.
     * @return the ServiceTagDestination object itself.
     */
    public ServiceTagDestination withAction(RuleAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the addressPrefixes property: Optional, if provided, the ServiceTag property will be ignored.
     * 
     * @return the addressPrefixes value.
     */
    public List<String> addressPrefixes() {
        return this.addressPrefixes;
    }

    /**
     * Get the portRanges property: The portRanges property.
     * 
     * @return the portRanges value.
     */
    public String portRanges() {
        return this.portRanges;
    }

    /**
     * Set the portRanges property: The portRanges property.
     * 
     * @param portRanges the portRanges value to set.
     * @return the ServiceTagDestination object itself.
     */
    public ServiceTagDestination withPortRanges(String portRanges) {
        this.portRanges = portRanges;
        return this;
    }

    /**
     * Get the protocol property: The protocol property.
     * 
     * @return the protocol value.
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The protocol property.
     * 
     * @param protocol the protocol value to set.
     * @return the ServiceTagDestination object itself.
     */
    public ServiceTagDestination withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the serviceTag property: The serviceTag property.
     * 
     * @return the serviceTag value.
     */
    public String serviceTag() {
        return this.serviceTag;
    }

    /**
     * Set the serviceTag property: The serviceTag property.
     * 
     * @param serviceTag the serviceTag value to set.
     * @return the ServiceTagDestination object itself.
     */
    public ServiceTagDestination withServiceTag(String serviceTag) {
        this.serviceTag = serviceTag;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeStringField("portRanges", this.portRanges);
        jsonWriter.writeStringField("protocol", this.protocol);
        jsonWriter.writeStringField("serviceTag", this.serviceTag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceTagDestination from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceTagDestination if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceTagDestination.
     */
    public static ServiceTagDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceTagDestination deserializedServiceTagDestination = new ServiceTagDestination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedServiceTagDestination.action = RuleAction.fromString(reader.getString());
                } else if ("addressPrefixes".equals(fieldName)) {
                    List<String> addressPrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedServiceTagDestination.addressPrefixes = addressPrefixes;
                } else if ("portRanges".equals(fieldName)) {
                    deserializedServiceTagDestination.portRanges = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedServiceTagDestination.protocol = reader.getString();
                } else if ("serviceTag".equals(fieldName)) {
                    deserializedServiceTagDestination.serviceTag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceTagDestination;
        });
    }
}
