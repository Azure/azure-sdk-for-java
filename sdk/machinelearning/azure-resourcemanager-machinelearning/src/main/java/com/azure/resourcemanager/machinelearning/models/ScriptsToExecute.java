// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Customized setup scripts.
 */
@Fluent
public final class ScriptsToExecute implements JsonSerializable<ScriptsToExecute> {
    /*
     * Script that's run every time the machine starts.
     */
    private ScriptReference startupScript;

    /*
     * Script that's run only once during provision of the compute.
     */
    private ScriptReference creationScript;

    /**
     * Creates an instance of ScriptsToExecute class.
     */
    public ScriptsToExecute() {
    }

    /**
     * Get the startupScript property: Script that's run every time the machine starts.
     * 
     * @return the startupScript value.
     */
    public ScriptReference startupScript() {
        return this.startupScript;
    }

    /**
     * Set the startupScript property: Script that's run every time the machine starts.
     * 
     * @param startupScript the startupScript value to set.
     * @return the ScriptsToExecute object itself.
     */
    public ScriptsToExecute withStartupScript(ScriptReference startupScript) {
        this.startupScript = startupScript;
        return this;
    }

    /**
     * Get the creationScript property: Script that's run only once during provision of the compute.
     * 
     * @return the creationScript value.
     */
    public ScriptReference creationScript() {
        return this.creationScript;
    }

    /**
     * Set the creationScript property: Script that's run only once during provision of the compute.
     * 
     * @param creationScript the creationScript value to set.
     * @return the ScriptsToExecute object itself.
     */
    public ScriptsToExecute withCreationScript(ScriptReference creationScript) {
        this.creationScript = creationScript;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (startupScript() != null) {
            startupScript().validate();
        }
        if (creationScript() != null) {
            creationScript().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("startupScript", this.startupScript);
        jsonWriter.writeJsonField("creationScript", this.creationScript);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptsToExecute from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptsToExecute if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptsToExecute.
     */
    public static ScriptsToExecute fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptsToExecute deserializedScriptsToExecute = new ScriptsToExecute();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startupScript".equals(fieldName)) {
                    deserializedScriptsToExecute.startupScript = ScriptReference.fromJson(reader);
                } else if ("creationScript".equals(fieldName)) {
                    deserializedScriptsToExecute.creationScript = ScriptReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptsToExecute;
        });
    }
}
