// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The DataCollector model.
 */
@Fluent
public final class DataCollector implements JsonSerializable<DataCollector> {
    /*
     * [Required] The collection configuration. Each collection has it own configuration to collect model data and the
     * name of collection can be arbitrary string.
     * Model data collector can be used for either payload logging or custom logging or both of them. Collection request
     * and response are reserved for payload logging, others are for custom logging.
     */
    private Map<String, Collection> collections;

    /*
     * When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of
     * them in a single blob file.
     * If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
     * If it's day, all data will be collected in blob path /yyyy/MM/dd/.
     * The other benefit of rolling path is that model monitoring ui is able to select a time range of data very
     * quickly.
     */
    private RollingRateType rollingRate;

    /*
     * The request logging configuration for mdc, it includes advanced logging settings for all collections. It's
     * optional.
     */
    private RequestLogging requestLogging;

    /**
     * Creates an instance of DataCollector class.
     */
    public DataCollector() {
    }

    /**
     * Get the collections property: [Required] The collection configuration. Each collection has it own configuration
     * to collect model data and the name of collection can be arbitrary string.
     * Model data collector can be used for either payload logging or custom logging or both of them. Collection request
     * and response are reserved for payload logging, others are for custom logging.
     * 
     * @return the collections value.
     */
    public Map<String, Collection> collections() {
        return this.collections;
    }

    /**
     * Set the collections property: [Required] The collection configuration. Each collection has it own configuration
     * to collect model data and the name of collection can be arbitrary string.
     * Model data collector can be used for either payload logging or custom logging or both of them. Collection request
     * and response are reserved for payload logging, others are for custom logging.
     * 
     * @param collections the collections value to set.
     * @return the DataCollector object itself.
     */
    public DataCollector withCollections(Map<String, Collection> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the rollingRate property: When model data is collected to blob storage, we need to roll the data to different
     * path to avoid logging all of them in a single blob file.
     * If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
     * If it's day, all data will be collected in blob path /yyyy/MM/dd/.
     * The other benefit of rolling path is that model monitoring ui is able to select a time range of data very
     * quickly.
     * 
     * @return the rollingRate value.
     */
    public RollingRateType rollingRate() {
        return this.rollingRate;
    }

    /**
     * Set the rollingRate property: When model data is collected to blob storage, we need to roll the data to different
     * path to avoid logging all of them in a single blob file.
     * If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
     * If it's day, all data will be collected in blob path /yyyy/MM/dd/.
     * The other benefit of rolling path is that model monitoring ui is able to select a time range of data very
     * quickly.
     * 
     * @param rollingRate the rollingRate value to set.
     * @return the DataCollector object itself.
     */
    public DataCollector withRollingRate(RollingRateType rollingRate) {
        this.rollingRate = rollingRate;
        return this;
    }

    /**
     * Get the requestLogging property: The request logging configuration for mdc, it includes advanced logging settings
     * for all collections. It's optional.
     * 
     * @return the requestLogging value.
     */
    public RequestLogging requestLogging() {
        return this.requestLogging;
    }

    /**
     * Set the requestLogging property: The request logging configuration for mdc, it includes advanced logging settings
     * for all collections. It's optional.
     * 
     * @param requestLogging the requestLogging value to set.
     * @return the DataCollector object itself.
     */
    public DataCollector withRequestLogging(RequestLogging requestLogging) {
        this.requestLogging = requestLogging;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (collections() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property collections in model DataCollector"));
        } else {
            collections().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (requestLogging() != null) {
            requestLogging().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataCollector.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("collections", this.collections, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("rollingRate", this.rollingRate == null ? null : this.rollingRate.toString());
        jsonWriter.writeJsonField("requestLogging", this.requestLogging);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataCollector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataCollector if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataCollector.
     */
    public static DataCollector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataCollector deserializedDataCollector = new DataCollector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collections".equals(fieldName)) {
                    Map<String, Collection> collections = reader.readMap(reader1 -> Collection.fromJson(reader1));
                    deserializedDataCollector.collections = collections;
                } else if ("rollingRate".equals(fieldName)) {
                    deserializedDataCollector.rollingRate = RollingRateType.fromString(reader.getString());
                } else if ("requestLogging".equals(fieldName)) {
                    deserializedDataCollector.requestLogging = RequestLogging.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataCollector;
        });
    }
}
