// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The QueueSettings model.
 */
@Fluent
public final class QueueSettings implements JsonSerializable<QueueSettings> {
    /*
     * Controls the compute job tier
     */
    private JobTier jobTier;

    /**
     * Creates an instance of QueueSettings class.
     */
    public QueueSettings() {
    }

    /**
     * Get the jobTier property: Controls the compute job tier.
     * 
     * @return the jobTier value.
     */
    public JobTier jobTier() {
        return this.jobTier;
    }

    /**
     * Set the jobTier property: Controls the compute job tier.
     * 
     * @param jobTier the jobTier value to set.
     * @return the QueueSettings object itself.
     */
    public QueueSettings withJobTier(JobTier jobTier) {
        this.jobTier = jobTier;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobTier", this.jobTier == null ? null : this.jobTier.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueueSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueueSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueueSettings.
     */
    public static QueueSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueueSettings deserializedQueueSettings = new QueueSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobTier".equals(fieldName)) {
                    deserializedQueueSettings.jobTier = JobTier.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueueSettings;
        });
    }
}
