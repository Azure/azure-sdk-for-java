// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Script reference.
 */
@Fluent
public final class ScriptReference implements JsonSerializable<ScriptReference> {
    /*
     * The storage source of the script: workspace.
     */
    private String scriptSource;

    /*
     * The location of scripts in the mounted volume.
     */
    private String scriptData;

    /*
     * Optional command line arguments passed to the script to run.
     */
    private String scriptArguments;

    /*
     * Optional time period passed to timeout command.
     */
    private String timeout;

    /**
     * Creates an instance of ScriptReference class.
     */
    public ScriptReference() {
    }

    /**
     * Get the scriptSource property: The storage source of the script: workspace.
     * 
     * @return the scriptSource value.
     */
    public String scriptSource() {
        return this.scriptSource;
    }

    /**
     * Set the scriptSource property: The storage source of the script: workspace.
     * 
     * @param scriptSource the scriptSource value to set.
     * @return the ScriptReference object itself.
     */
    public ScriptReference withScriptSource(String scriptSource) {
        this.scriptSource = scriptSource;
        return this;
    }

    /**
     * Get the scriptData property: The location of scripts in the mounted volume.
     * 
     * @return the scriptData value.
     */
    public String scriptData() {
        return this.scriptData;
    }

    /**
     * Set the scriptData property: The location of scripts in the mounted volume.
     * 
     * @param scriptData the scriptData value to set.
     * @return the ScriptReference object itself.
     */
    public ScriptReference withScriptData(String scriptData) {
        this.scriptData = scriptData;
        return this;
    }

    /**
     * Get the scriptArguments property: Optional command line arguments passed to the script to run.
     * 
     * @return the scriptArguments value.
     */
    public String scriptArguments() {
        return this.scriptArguments;
    }

    /**
     * Set the scriptArguments property: Optional command line arguments passed to the script to run.
     * 
     * @param scriptArguments the scriptArguments value to set.
     * @return the ScriptReference object itself.
     */
    public ScriptReference withScriptArguments(String scriptArguments) {
        this.scriptArguments = scriptArguments;
        return this;
    }

    /**
     * Get the timeout property: Optional time period passed to timeout command.
     * 
     * @return the timeout value.
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: Optional time period passed to timeout command.
     * 
     * @param timeout the timeout value to set.
     * @return the ScriptReference object itself.
     */
    public ScriptReference withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scriptSource", this.scriptSource);
        jsonWriter.writeStringField("scriptData", this.scriptData);
        jsonWriter.writeStringField("scriptArguments", this.scriptArguments);
        jsonWriter.writeStringField("timeout", this.timeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptReference.
     */
    public static ScriptReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptReference deserializedScriptReference = new ScriptReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scriptSource".equals(fieldName)) {
                    deserializedScriptReference.scriptSource = reader.getString();
                } else if ("scriptData".equals(fieldName)) {
                    deserializedScriptReference.scriptData = reader.getString();
                } else if ("scriptArguments".equals(fieldName)) {
                    deserializedScriptReference.scriptArguments = reader.getString();
                } else if ("timeout".equals(fieldName)) {
                    deserializedScriptReference.timeout = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptReference;
        });
    }
}
