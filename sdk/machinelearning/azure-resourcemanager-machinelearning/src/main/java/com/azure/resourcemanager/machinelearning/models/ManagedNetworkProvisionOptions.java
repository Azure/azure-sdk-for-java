// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Managed Network Provisioning options for managed network of a machine learning workspace.
 */
@Fluent
public final class ManagedNetworkProvisionOptions implements JsonSerializable<ManagedNetworkProvisionOptions> {
    /*
     * The includeSpark property.
     */
    private Boolean includeSpark;

    /**
     * Creates an instance of ManagedNetworkProvisionOptions class.
     */
    public ManagedNetworkProvisionOptions() {
    }

    /**
     * Get the includeSpark property: The includeSpark property.
     * 
     * @return the includeSpark value.
     */
    public Boolean includeSpark() {
        return this.includeSpark;
    }

    /**
     * Set the includeSpark property: The includeSpark property.
     * 
     * @param includeSpark the includeSpark value to set.
     * @return the ManagedNetworkProvisionOptions object itself.
     */
    public ManagedNetworkProvisionOptions withIncludeSpark(Boolean includeSpark) {
        this.includeSpark = includeSpark;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("includeSpark", this.includeSpark);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedNetworkProvisionOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedNetworkProvisionOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedNetworkProvisionOptions.
     */
    public static ManagedNetworkProvisionOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedNetworkProvisionOptions deserializedManagedNetworkProvisionOptions
                = new ManagedNetworkProvisionOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("includeSpark".equals(fieldName)) {
                    deserializedManagedNetworkProvisionOptions.includeSpark
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedNetworkProvisionOptions;
        });
    }
}
