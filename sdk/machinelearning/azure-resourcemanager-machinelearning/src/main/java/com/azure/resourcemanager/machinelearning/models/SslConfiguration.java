// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ssl configuration for scoring.
 */
@Fluent
public final class SslConfiguration implements JsonSerializable<SslConfiguration> {
    /*
     * Enable or disable ssl for scoring
     */
    private SslConfigStatus status;

    /*
     * Cert data
     */
    private String cert;

    /*
     * Key data
     */
    private String key;

    /*
     * CNAME of the cert
     */
    private String cname;

    /*
     * Leaf domain label of public endpoint
     */
    private String leafDomainLabel;

    /*
     * Indicates whether to overwrite existing domain label.
     */
    private Boolean overwriteExistingDomain;

    /**
     * Creates an instance of SslConfiguration class.
     */
    public SslConfiguration() {
    }

    /**
     * Get the status property: Enable or disable ssl for scoring.
     * 
     * @return the status value.
     */
    public SslConfigStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Enable or disable ssl for scoring.
     * 
     * @param status the status value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withStatus(SslConfigStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the cert property: Cert data.
     * 
     * @return the cert value.
     */
    public String cert() {
        return this.cert;
    }

    /**
     * Set the cert property: Cert data.
     * 
     * @param cert the cert value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withCert(String cert) {
        this.cert = cert;
        return this;
    }

    /**
     * Get the key property: Key data.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: Key data.
     * 
     * @param key the key value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the cname property: CNAME of the cert.
     * 
     * @return the cname value.
     */
    public String cname() {
        return this.cname;
    }

    /**
     * Set the cname property: CNAME of the cert.
     * 
     * @param cname the cname value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withCname(String cname) {
        this.cname = cname;
        return this;
    }

    /**
     * Get the leafDomainLabel property: Leaf domain label of public endpoint.
     * 
     * @return the leafDomainLabel value.
     */
    public String leafDomainLabel() {
        return this.leafDomainLabel;
    }

    /**
     * Set the leafDomainLabel property: Leaf domain label of public endpoint.
     * 
     * @param leafDomainLabel the leafDomainLabel value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withLeafDomainLabel(String leafDomainLabel) {
        this.leafDomainLabel = leafDomainLabel;
        return this;
    }

    /**
     * Get the overwriteExistingDomain property: Indicates whether to overwrite existing domain label.
     * 
     * @return the overwriteExistingDomain value.
     */
    public Boolean overwriteExistingDomain() {
        return this.overwriteExistingDomain;
    }

    /**
     * Set the overwriteExistingDomain property: Indicates whether to overwrite existing domain label.
     * 
     * @param overwriteExistingDomain the overwriteExistingDomain value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withOverwriteExistingDomain(Boolean overwriteExistingDomain) {
        this.overwriteExistingDomain = overwriteExistingDomain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("cert", this.cert);
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("cname", this.cname);
        jsonWriter.writeStringField("leafDomainLabel", this.leafDomainLabel);
        jsonWriter.writeBooleanField("overwriteExistingDomain", this.overwriteExistingDomain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SslConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SslConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SslConfiguration.
     */
    public static SslConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SslConfiguration deserializedSslConfiguration = new SslConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedSslConfiguration.status = SslConfigStatus.fromString(reader.getString());
                } else if ("cert".equals(fieldName)) {
                    deserializedSslConfiguration.cert = reader.getString();
                } else if ("key".equals(fieldName)) {
                    deserializedSslConfiguration.key = reader.getString();
                } else if ("cname".equals(fieldName)) {
                    deserializedSslConfiguration.cname = reader.getString();
                } else if ("leafDomainLabel".equals(fieldName)) {
                    deserializedSslConfiguration.leafDomainLabel = reader.getString();
                } else if ("overwriteExistingDomain".equals(fieldName)) {
                    deserializedSslConfiguration.overwriteExistingDomain = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSslConfiguration;
        });
    }
}
