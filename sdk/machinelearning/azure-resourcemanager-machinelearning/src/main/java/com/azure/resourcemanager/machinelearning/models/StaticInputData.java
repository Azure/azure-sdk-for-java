// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Static input data definition.
 */
@Fluent
public final class StaticInputData extends MonitoringInputDataBase {
    /*
     * [Required] Specifies the type of signal to monitor.
     */
    private MonitoringInputDataType inputDataType = MonitoringInputDataType.STATIC;

    /*
     * [Required] The start date of the data window.
     */
    private OffsetDateTime windowStart;

    /*
     * [Required] The end date of the data window.
     */
    private OffsetDateTime windowEnd;

    /*
     * Reference to the component asset used to preprocess the data.
     */
    private String preprocessingComponentId;

    /**
     * Creates an instance of StaticInputData class.
     */
    public StaticInputData() {
    }

    /**
     * Get the inputDataType property: [Required] Specifies the type of signal to monitor.
     * 
     * @return the inputDataType value.
     */
    @Override
    public MonitoringInputDataType inputDataType() {
        return this.inputDataType;
    }

    /**
     * Get the windowStart property: [Required] The start date of the data window.
     * 
     * @return the windowStart value.
     */
    public OffsetDateTime windowStart() {
        return this.windowStart;
    }

    /**
     * Set the windowStart property: [Required] The start date of the data window.
     * 
     * @param windowStart the windowStart value to set.
     * @return the StaticInputData object itself.
     */
    public StaticInputData withWindowStart(OffsetDateTime windowStart) {
        this.windowStart = windowStart;
        return this;
    }

    /**
     * Get the windowEnd property: [Required] The end date of the data window.
     * 
     * @return the windowEnd value.
     */
    public OffsetDateTime windowEnd() {
        return this.windowEnd;
    }

    /**
     * Set the windowEnd property: [Required] The end date of the data window.
     * 
     * @param windowEnd the windowEnd value to set.
     * @return the StaticInputData object itself.
     */
    public StaticInputData withWindowEnd(OffsetDateTime windowEnd) {
        this.windowEnd = windowEnd;
        return this;
    }

    /**
     * Get the preprocessingComponentId property: Reference to the component asset used to preprocess the data.
     * 
     * @return the preprocessingComponentId value.
     */
    public String preprocessingComponentId() {
        return this.preprocessingComponentId;
    }

    /**
     * Set the preprocessingComponentId property: Reference to the component asset used to preprocess the data.
     * 
     * @param preprocessingComponentId the preprocessingComponentId value to set.
     * @return the StaticInputData object itself.
     */
    public StaticInputData withPreprocessingComponentId(String preprocessingComponentId) {
        this.preprocessingComponentId = preprocessingComponentId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StaticInputData withDataContext(String dataContext) {
        super.withDataContext(dataContext);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StaticInputData withJobInputType(JobInputType jobInputType) {
        super.withJobInputType(jobInputType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StaticInputData withUri(String uri) {
        super.withUri(uri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StaticInputData withColumns(Map<String, String> columns) {
        super.withColumns(columns);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (windowStart() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property windowStart in model StaticInputData"));
        }
        if (windowEnd() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property windowEnd in model StaticInputData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StaticInputData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobInputType", jobInputType() == null ? null : jobInputType().toString());
        jsonWriter.writeStringField("uri", uri());
        jsonWriter.writeStringField("dataContext", dataContext());
        jsonWriter.writeMapField("columns", columns(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("windowStart",
            this.windowStart == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.windowStart));
        jsonWriter.writeStringField("windowEnd",
            this.windowEnd == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.windowEnd));
        jsonWriter.writeStringField("inputDataType", this.inputDataType == null ? null : this.inputDataType.toString());
        jsonWriter.writeStringField("preprocessingComponentId", this.preprocessingComponentId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StaticInputData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StaticInputData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StaticInputData.
     */
    public static StaticInputData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StaticInputData deserializedStaticInputData = new StaticInputData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobInputType".equals(fieldName)) {
                    deserializedStaticInputData.withJobInputType(JobInputType.fromString(reader.getString()));
                } else if ("uri".equals(fieldName)) {
                    deserializedStaticInputData.withUri(reader.getString());
                } else if ("dataContext".equals(fieldName)) {
                    deserializedStaticInputData.withDataContext(reader.getString());
                } else if ("columns".equals(fieldName)) {
                    Map<String, String> columns = reader.readMap(reader1 -> reader1.getString());
                    deserializedStaticInputData.withColumns(columns);
                } else if ("windowStart".equals(fieldName)) {
                    deserializedStaticInputData.windowStart = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("windowEnd".equals(fieldName)) {
                    deserializedStaticInputData.windowEnd = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("inputDataType".equals(fieldName)) {
                    deserializedStaticInputData.inputDataType = MonitoringInputDataType.fromString(reader.getString());
                } else if ("preprocessingComponentId".equals(fieldName)) {
                    deserializedStaticInputData.preprocessingComponentId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStaticInputData;
        });
    }
}
