// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The workflow trigger recurrence for ComputeStartStop schedule type.
 */
@Fluent
public final class Recurrence implements JsonSerializable<Recurrence> {
    /*
     * [Required] The frequency to trigger schedule.
     */
    private ComputeRecurrenceFrequency frequency;

    /*
     * [Required] Specifies schedule interval in conjunction with frequency
     */
    private Integer interval;

    /*
     * The start time in yyyy-MM-ddTHH:mm:ss format.
     */
    private String startTime;

    /*
     * Specifies time zone in which the schedule runs.
     * TimeZone should follow Windows time zone format. Refer:
     * https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
     */
    private String timeZone;

    /*
     * [Required] The recurrence schedule.
     */
    private ComputeRecurrenceSchedule schedule;

    /**
     * Creates an instance of Recurrence class.
     */
    public Recurrence() {
    }

    /**
     * Get the frequency property: [Required] The frequency to trigger schedule.
     * 
     * @return the frequency value.
     */
    public ComputeRecurrenceFrequency frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: [Required] The frequency to trigger schedule.
     * 
     * @param frequency the frequency value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withFrequency(ComputeRecurrenceFrequency frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the interval property: [Required] Specifies schedule interval in conjunction with frequency.
     * 
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: [Required] Specifies schedule interval in conjunction with frequency.
     * 
     * @param interval the interval value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the startTime property: The start time in yyyy-MM-ddTHH:mm:ss format.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time in yyyy-MM-ddTHH:mm:ss format.
     * 
     * @param startTime the startTime value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the timeZone property: Specifies time zone in which the schedule runs.
     * TimeZone should follow Windows time zone format. Refer:
     * https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: Specifies time zone in which the schedule runs.
     * TimeZone should follow Windows time zone format. Refer:
     * https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11.
     * 
     * @param timeZone the timeZone value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the schedule property: [Required] The recurrence schedule.
     * 
     * @return the schedule value.
     */
    public ComputeRecurrenceSchedule schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: [Required] The recurrence schedule.
     * 
     * @param schedule the schedule value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withSchedule(ComputeRecurrenceSchedule schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (schedule() != null) {
            schedule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
        jsonWriter.writeNumberField("interval", this.interval);
        jsonWriter.writeStringField("startTime", this.startTime);
        jsonWriter.writeStringField("timeZone", this.timeZone);
        jsonWriter.writeJsonField("schedule", this.schedule);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Recurrence from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Recurrence if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Recurrence.
     */
    public static Recurrence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Recurrence deserializedRecurrence = new Recurrence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("frequency".equals(fieldName)) {
                    deserializedRecurrence.frequency = ComputeRecurrenceFrequency.fromString(reader.getString());
                } else if ("interval".equals(fieldName)) {
                    deserializedRecurrence.interval = reader.getNullable(JsonReader::getInt);
                } else if ("startTime".equals(fieldName)) {
                    deserializedRecurrence.startTime = reader.getString();
                } else if ("timeZone".equals(fieldName)) {
                    deserializedRecurrence.timeZone = reader.getString();
                } else if ("schedule".equals(fieldName)) {
                    deserializedRecurrence.schedule = ComputeRecurrenceSchedule.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecurrence;
        });
    }
}
