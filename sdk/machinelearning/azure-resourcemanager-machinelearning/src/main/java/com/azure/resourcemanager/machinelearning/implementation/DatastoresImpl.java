// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.DatastoresClient;
import com.azure.resourcemanager.machinelearning.fluent.models.DatastoreInner;
import com.azure.resourcemanager.machinelearning.fluent.models.DatastoreSecretsInner;
import com.azure.resourcemanager.machinelearning.models.Datastore;
import com.azure.resourcemanager.machinelearning.models.DatastoreSecrets;
import com.azure.resourcemanager.machinelearning.models.Datastores;
import java.util.List;

public final class DatastoresImpl implements Datastores {
    private static final ClientLogger LOGGER = new ClientLogger(DatastoresImpl.class);

    private final DatastoresClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public DatastoresImpl(
        DatastoresClient innerClient, com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Datastore> list(String resourceGroupName, String workspaceName) {
        PagedIterable<DatastoreInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new DatastoreImpl(inner1, this.manager()));
    }

    public PagedIterable<Datastore> list(
        String resourceGroupName,
        String workspaceName,
        String skip,
        Integer count,
        Boolean isDefault,
        List<String> names,
        String searchText,
        String orderBy,
        Boolean orderByAsc,
        Context context) {
        PagedIterable<DatastoreInner> inner =
            this
                .serviceClient()
                .list(
                    resourceGroupName,
                    workspaceName,
                    skip,
                    count,
                    isDefault,
                    names,
                    searchText,
                    orderBy,
                    orderByAsc,
                    context);
        return Utils.mapPage(inner, inner1 -> new DatastoreImpl(inner1, this.manager()));
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String workspaceName, String name, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, name, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String name) {
        this.serviceClient().delete(resourceGroupName, workspaceName, name);
    }

    public Response<Datastore> getWithResponse(
        String resourceGroupName, String workspaceName, String name, Context context) {
        Response<DatastoreInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatastoreImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Datastore get(String resourceGroupName, String workspaceName, String name) {
        DatastoreInner inner = this.serviceClient().get(resourceGroupName, workspaceName, name);
        if (inner != null) {
            return new DatastoreImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatastoreSecrets> listSecretsWithResponse(
        String resourceGroupName, String workspaceName, String name, Context context) {
        Response<DatastoreSecretsInner> inner =
            this.serviceClient().listSecretsWithResponse(resourceGroupName, workspaceName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatastoreSecretsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatastoreSecrets listSecrets(String resourceGroupName, String workspaceName, String name) {
        DatastoreSecretsInner inner = this.serviceClient().listSecrets(resourceGroupName, workspaceName, name);
        if (inner != null) {
            return new DatastoreSecretsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Datastore getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "datastores");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'datastores'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, name, Context.NONE).getValue();
    }

    public Response<Datastore> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "datastores");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'datastores'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "datastores");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'datastores'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, name, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "datastores");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'datastores'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, name, context);
    }

    private DatastoresClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public DatastoreImpl define(String name) {
        return new DatastoreImpl(name, this.manager());
    }
}
