// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Classification task in AutoML Table vertical. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "taskType")
@JsonTypeName("Classification")
@Fluent
public final class Classification extends AutoMLVertical {
    /*
     * Allowed models for classification task.
     */
    @JsonProperty(value = "allowedModels")
    private List<ClassificationModels> allowedModels;

    /*
     * Blocked models for classification task.
     */
    @JsonProperty(value = "blockedModels")
    private List<ClassificationModels> blockedModels;

    /*
     * Primary metric for the task.
     */
    @JsonProperty(value = "primaryMetric")
    private ClassificationPrimaryMetrics primaryMetric;

    /*
     * Data inputs for AutoMLJob.
     */
    @JsonProperty(value = "dataSettings")
    private TableVerticalDataSettings dataSettings;

    /*
     * Featurization inputs needed for AutoML job.
     */
    @JsonProperty(value = "featurizationSettings")
    private TableVerticalFeaturizationSettings featurizationSettings;

    /*
     * Execution constraints for AutoMLJob.
     */
    @JsonProperty(value = "limitSettings")
    private TableVerticalLimitSettings limitSettings;

    /*
     * Inputs for training phase for an AutoML Job.
     */
    @JsonProperty(value = "trainingSettings")
    private TrainingSettings trainingSettings;

    /**
     * Get the allowedModels property: Allowed models for classification task.
     *
     * @return the allowedModels value.
     */
    public List<ClassificationModels> allowedModels() {
        return this.allowedModels;
    }

    /**
     * Set the allowedModels property: Allowed models for classification task.
     *
     * @param allowedModels the allowedModels value to set.
     * @return the Classification object itself.
     */
    public Classification withAllowedModels(List<ClassificationModels> allowedModels) {
        this.allowedModels = allowedModels;
        return this;
    }

    /**
     * Get the blockedModels property: Blocked models for classification task.
     *
     * @return the blockedModels value.
     */
    public List<ClassificationModels> blockedModels() {
        return this.blockedModels;
    }

    /**
     * Set the blockedModels property: Blocked models for classification task.
     *
     * @param blockedModels the blockedModels value to set.
     * @return the Classification object itself.
     */
    public Classification withBlockedModels(List<ClassificationModels> blockedModels) {
        this.blockedModels = blockedModels;
        return this;
    }

    /**
     * Get the primaryMetric property: Primary metric for the task.
     *
     * @return the primaryMetric value.
     */
    public ClassificationPrimaryMetrics primaryMetric() {
        return this.primaryMetric;
    }

    /**
     * Set the primaryMetric property: Primary metric for the task.
     *
     * @param primaryMetric the primaryMetric value to set.
     * @return the Classification object itself.
     */
    public Classification withPrimaryMetric(ClassificationPrimaryMetrics primaryMetric) {
        this.primaryMetric = primaryMetric;
        return this;
    }

    /**
     * Get the dataSettings property: Data inputs for AutoMLJob.
     *
     * @return the dataSettings value.
     */
    public TableVerticalDataSettings dataSettings() {
        return this.dataSettings;
    }

    /**
     * Set the dataSettings property: Data inputs for AutoMLJob.
     *
     * @param dataSettings the dataSettings value to set.
     * @return the Classification object itself.
     */
    public Classification withDataSettings(TableVerticalDataSettings dataSettings) {
        this.dataSettings = dataSettings;
        return this;
    }

    /**
     * Get the featurizationSettings property: Featurization inputs needed for AutoML job.
     *
     * @return the featurizationSettings value.
     */
    public TableVerticalFeaturizationSettings featurizationSettings() {
        return this.featurizationSettings;
    }

    /**
     * Set the featurizationSettings property: Featurization inputs needed for AutoML job.
     *
     * @param featurizationSettings the featurizationSettings value to set.
     * @return the Classification object itself.
     */
    public Classification withFeaturizationSettings(TableVerticalFeaturizationSettings featurizationSettings) {
        this.featurizationSettings = featurizationSettings;
        return this;
    }

    /**
     * Get the limitSettings property: Execution constraints for AutoMLJob.
     *
     * @return the limitSettings value.
     */
    public TableVerticalLimitSettings limitSettings() {
        return this.limitSettings;
    }

    /**
     * Set the limitSettings property: Execution constraints for AutoMLJob.
     *
     * @param limitSettings the limitSettings value to set.
     * @return the Classification object itself.
     */
    public Classification withLimitSettings(TableVerticalLimitSettings limitSettings) {
        this.limitSettings = limitSettings;
        return this;
    }

    /**
     * Get the trainingSettings property: Inputs for training phase for an AutoML Job.
     *
     * @return the trainingSettings value.
     */
    public TrainingSettings trainingSettings() {
        return this.trainingSettings;
    }

    /**
     * Set the trainingSettings property: Inputs for training phase for an AutoML Job.
     *
     * @param trainingSettings the trainingSettings value to set.
     * @return the Classification object itself.
     */
    public Classification withTrainingSettings(TrainingSettings trainingSettings) {
        this.trainingSettings = trainingSettings;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Classification withLogVerbosity(LogVerbosity logVerbosity) {
        super.withLogVerbosity(logVerbosity);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dataSettings() != null) {
            dataSettings().validate();
        }
        if (featurizationSettings() != null) {
            featurizationSettings().validate();
        }
        if (limitSettings() != null) {
            limitSettings().validate();
        }
        if (trainingSettings() != null) {
            trainingSettings().validate();
        }
    }
}
