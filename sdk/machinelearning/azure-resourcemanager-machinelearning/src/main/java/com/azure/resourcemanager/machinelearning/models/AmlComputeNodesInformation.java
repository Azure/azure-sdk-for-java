// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Result of AmlCompute Nodes.
 */
@Immutable
public final class AmlComputeNodesInformation implements JsonSerializable<AmlComputeNodesInformation> {
    /*
     * The collection of returned AmlCompute nodes details.
     */
    private List<AmlComputeNodeInformation> nodes;

    /*
     * The continuation token.
     */
    private String nextLink;

    /**
     * Creates an instance of AmlComputeNodesInformation class.
     */
    public AmlComputeNodesInformation() {
    }

    /**
     * Get the nodes property: The collection of returned AmlCompute nodes details.
     * 
     * @return the nodes value.
     */
    public List<AmlComputeNodeInformation> nodes() {
        return this.nodes;
    }

    /**
     * Get the nextLink property: The continuation token.
     * 
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AmlComputeNodesInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AmlComputeNodesInformation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AmlComputeNodesInformation.
     */
    public static AmlComputeNodesInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AmlComputeNodesInformation deserializedAmlComputeNodesInformation = new AmlComputeNodesInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodes".equals(fieldName)) {
                    List<AmlComputeNodeInformation> nodes
                        = reader.readArray(reader1 -> AmlComputeNodeInformation.fromJson(reader1));
                    deserializedAmlComputeNodesInformation.nodes = nodes;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedAmlComputeNodesInformation.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAmlComputeNodesInformation;
        });
    }
}
