// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The DeploymentResourceConfiguration model.
 */
@Fluent
public final class DeploymentResourceConfiguration extends ResourceConfiguration {
    /**
     * Creates an instance of DeploymentResourceConfiguration class.
     */
    public DeploymentResourceConfiguration() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeploymentResourceConfiguration withInstanceCount(Integer instanceCount) {
        super.withInstanceCount(instanceCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeploymentResourceConfiguration withInstanceType(String instanceType) {
        super.withInstanceType(instanceType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeploymentResourceConfiguration withProperties(Map<String, Object> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("instanceCount", instanceCount());
        jsonWriter.writeStringField("instanceType", instanceType());
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentResourceConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentResourceConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentResourceConfiguration.
     */
    public static DeploymentResourceConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentResourceConfiguration deserializedDeploymentResourceConfiguration
                = new DeploymentResourceConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceCount".equals(fieldName)) {
                    deserializedDeploymentResourceConfiguration
                        .withInstanceCount(reader.getNullable(JsonReader::getInt));
                } else if ("instanceType".equals(fieldName)) {
                    deserializedDeploymentResourceConfiguration.withInstanceType(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDeploymentResourceConfiguration.withProperties(properties);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentResourceConfiguration;
        });
    }
}
