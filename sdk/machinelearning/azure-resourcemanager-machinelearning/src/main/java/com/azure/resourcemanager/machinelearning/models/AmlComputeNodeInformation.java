// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Compute node information related to a AmlCompute.
 */
@Immutable
public final class AmlComputeNodeInformation implements JsonSerializable<AmlComputeNodeInformation> {
    /*
     * ID of the compute node.
     */
    private String nodeId;

    /*
     * Private IP address of the compute node.
     */
    private String privateIpAddress;

    /*
     * Public IP address of the compute node.
     */
    private String publicIpAddress;

    /*
     * SSH port number of the node.
     */
    private Integer port;

    /*
     * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     */
    private NodeState nodeState;

    /*
     * ID of the Experiment running on the node, if any else null.
     */
    private String runId;

    /**
     * Creates an instance of AmlComputeNodeInformation class.
     */
    public AmlComputeNodeInformation() {
    }

    /**
     * Get the nodeId property: ID of the compute node.
     * 
     * @return the nodeId value.
     */
    public String nodeId() {
        return this.nodeId;
    }

    /**
     * Get the privateIpAddress property: Private IP address of the compute node.
     * 
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Get the publicIpAddress property: Public IP address of the compute node.
     * 
     * @return the publicIpAddress value.
     */
    public String publicIpAddress() {
        return this.publicIpAddress;
    }

    /**
     * Get the port property: SSH port number of the node.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Get the nodeState property: State of the compute node. Values are idle, running, preparing, unusable, leaving and
     * preempted.
     * 
     * @return the nodeState value.
     */
    public NodeState nodeState() {
        return this.nodeState;
    }

    /**
     * Get the runId property: ID of the Experiment running on the node, if any else null.
     * 
     * @return the runId value.
     */
    public String runId() {
        return this.runId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AmlComputeNodeInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AmlComputeNodeInformation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AmlComputeNodeInformation.
     */
    public static AmlComputeNodeInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AmlComputeNodeInformation deserializedAmlComputeNodeInformation = new AmlComputeNodeInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeId".equals(fieldName)) {
                    deserializedAmlComputeNodeInformation.nodeId = reader.getString();
                } else if ("privateIpAddress".equals(fieldName)) {
                    deserializedAmlComputeNodeInformation.privateIpAddress = reader.getString();
                } else if ("publicIpAddress".equals(fieldName)) {
                    deserializedAmlComputeNodeInformation.publicIpAddress = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedAmlComputeNodeInformation.port = reader.getNullable(JsonReader::getInt);
                } else if ("nodeState".equals(fieldName)) {
                    deserializedAmlComputeNodeInformation.nodeState = NodeState.fromString(reader.getString());
                } else if ("runId".equals(fieldName)) {
                    deserializedAmlComputeNodeInformation.runId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAmlComputeNodeInformation;
        });
    }
}
