// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the endpoint configuration for the container.
 */
@Fluent
public final class Endpoint implements JsonSerializable<Endpoint> {
    /*
     * Protocol over which communication will happen over this endpoint
     */
    private Protocol protocol;

    /*
     * Name of the Endpoint
     */
    private String name;

    /*
     * Application port inside the container.
     */
    private Integer target;

    /*
     * Port over which the application is exposed from container.
     */
    private Integer published;

    /*
     * Host IP over which the application is exposed from the container
     */
    private String hostIp;

    /**
     * Creates an instance of Endpoint class.
     */
    public Endpoint() {
    }

    /**
     * Get the protocol property: Protocol over which communication will happen over this endpoint.
     * 
     * @return the protocol value.
     */
    public Protocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Protocol over which communication will happen over this endpoint.
     * 
     * @param protocol the protocol value to set.
     * @return the Endpoint object itself.
     */
    public Endpoint withProtocol(Protocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the name property: Name of the Endpoint.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the Endpoint.
     * 
     * @param name the name value to set.
     * @return the Endpoint object itself.
     */
    public Endpoint withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the target property: Application port inside the container.
     * 
     * @return the target value.
     */
    public Integer target() {
        return this.target;
    }

    /**
     * Set the target property: Application port inside the container.
     * 
     * @param target the target value to set.
     * @return the Endpoint object itself.
     */
    public Endpoint withTarget(Integer target) {
        this.target = target;
        return this;
    }

    /**
     * Get the published property: Port over which the application is exposed from container.
     * 
     * @return the published value.
     */
    public Integer published() {
        return this.published;
    }

    /**
     * Set the published property: Port over which the application is exposed from container.
     * 
     * @param published the published value to set.
     * @return the Endpoint object itself.
     */
    public Endpoint withPublished(Integer published) {
        this.published = published;
        return this;
    }

    /**
     * Get the hostIp property: Host IP over which the application is exposed from the container.
     * 
     * @return the hostIp value.
     */
    public String hostIp() {
        return this.hostIp;
    }

    /**
     * Set the hostIp property: Host IP over which the application is exposed from the container.
     * 
     * @param hostIp the hostIp value to set.
     * @return the Endpoint object itself.
     */
    public Endpoint withHostIp(String hostIp) {
        this.hostIp = hostIp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("target", this.target);
        jsonWriter.writeNumberField("published", this.published);
        jsonWriter.writeStringField("hostIp", this.hostIp);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Endpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Endpoint if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Endpoint.
     */
    public static Endpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Endpoint deserializedEndpoint = new Endpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protocol".equals(fieldName)) {
                    deserializedEndpoint.protocol = Protocol.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedEndpoint.name = reader.getString();
                } else if ("target".equals(fieldName)) {
                    deserializedEndpoint.target = reader.getNullable(JsonReader::getInt);
                } else if ("published".equals(fieldName)) {
                    deserializedEndpoint.published = reader.getNullable(JsonReader::getInt);
                } else if ("hostIp".equals(fieldName)) {
                    deserializedEndpoint.hostIp = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpoint;
        });
    }
}
