// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Access credential with no credentials.
 */
@Immutable
public final class AnonymousAccessCredential extends DataReferenceCredential {
    /*
     * [Required] Credential type used to authentication with storage.
     */
    private DataReferenceCredentialType credentialType = DataReferenceCredentialType.NO_CREDENTIALS;

    /**
     * Creates an instance of AnonymousAccessCredential class.
     */
    public AnonymousAccessCredential() {
    }

    /**
     * Get the credentialType property: [Required] Credential type used to authentication with storage.
     * 
     * @return the credentialType value.
     */
    @Override
    public DataReferenceCredentialType credentialType() {
        return this.credentialType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("credentialType",
            this.credentialType == null ? null : this.credentialType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnonymousAccessCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnonymousAccessCredential if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnonymousAccessCredential.
     */
    public static AnonymousAccessCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnonymousAccessCredential deserializedAnonymousAccessCredential = new AnonymousAccessCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("credentialType".equals(fieldName)) {
                    deserializedAnonymousAccessCredential.credentialType
                        = DataReferenceCredentialType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnonymousAccessCredential;
        });
    }
}
