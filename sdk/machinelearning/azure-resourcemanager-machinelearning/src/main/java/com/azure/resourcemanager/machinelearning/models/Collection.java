// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Collection model.
 */
@Fluent
public final class Collection implements JsonSerializable<Collection> {
    /*
     * The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data by default.
     */
    private Double samplingRate;

    /*
     * Enable or disable data collection.
     */
    private DataCollectionMode dataCollectionMode;

    /*
     * The data asset arm resource id. Client side will ensure data asset is pointing to the blob storage, and backend
     * will collect data to the blob storage.
     */
    private String dataId;

    /*
     * The msi client id used to collect logging to blob storage. If it's null,backend will pick a registered endpoint
     * identity to auth.
     */
    private String clientId;

    /**
     * Creates an instance of Collection class.
     */
    public Collection() {
    }

    /**
     * Get the samplingRate property: The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data
     * by default.
     * 
     * @return the samplingRate value.
     */
    public Double samplingRate() {
        return this.samplingRate;
    }

    /**
     * Set the samplingRate property: The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data
     * by default.
     * 
     * @param samplingRate the samplingRate value to set.
     * @return the Collection object itself.
     */
    public Collection withSamplingRate(Double samplingRate) {
        this.samplingRate = samplingRate;
        return this;
    }

    /**
     * Get the dataCollectionMode property: Enable or disable data collection.
     * 
     * @return the dataCollectionMode value.
     */
    public DataCollectionMode dataCollectionMode() {
        return this.dataCollectionMode;
    }

    /**
     * Set the dataCollectionMode property: Enable or disable data collection.
     * 
     * @param dataCollectionMode the dataCollectionMode value to set.
     * @return the Collection object itself.
     */
    public Collection withDataCollectionMode(DataCollectionMode dataCollectionMode) {
        this.dataCollectionMode = dataCollectionMode;
        return this;
    }

    /**
     * Get the dataId property: The data asset arm resource id. Client side will ensure data asset is pointing to the
     * blob storage, and backend will collect data to the blob storage.
     * 
     * @return the dataId value.
     */
    public String dataId() {
        return this.dataId;
    }

    /**
     * Set the dataId property: The data asset arm resource id. Client side will ensure data asset is pointing to the
     * blob storage, and backend will collect data to the blob storage.
     * 
     * @param dataId the dataId value to set.
     * @return the Collection object itself.
     */
    public Collection withDataId(String dataId) {
        this.dataId = dataId;
        return this;
    }

    /**
     * Get the clientId property: The msi client id used to collect logging to blob storage. If it's null,backend will
     * pick a registered endpoint identity to auth.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The msi client id used to collect logging to blob storage. If it's null,backend will
     * pick a registered endpoint identity to auth.
     * 
     * @param clientId the clientId value to set.
     * @return the Collection object itself.
     */
    public Collection withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("samplingRate", this.samplingRate);
        jsonWriter.writeStringField("dataCollectionMode",
            this.dataCollectionMode == null ? null : this.dataCollectionMode.toString());
        jsonWriter.writeStringField("dataId", this.dataId);
        jsonWriter.writeStringField("clientId", this.clientId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Collection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Collection if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Collection.
     */
    public static Collection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Collection deserializedCollection = new Collection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("samplingRate".equals(fieldName)) {
                    deserializedCollection.samplingRate = reader.getNullable(JsonReader::getDouble);
                } else if ("dataCollectionMode".equals(fieldName)) {
                    deserializedCollection.dataCollectionMode = DataCollectionMode.fromString(reader.getString());
                } else if ("dataId".equals(fieldName)) {
                    deserializedCollection.dataId = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    deserializedCollection.clientId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCollection;
        });
    }
}
