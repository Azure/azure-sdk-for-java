// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Publishing destination registry asset information.
 */
@Fluent
public final class DestinationAsset implements JsonSerializable<DestinationAsset> {
    /*
     * Destination registry name
     */
    private String registryName;

    /*
     * Destination asset name
     */
    private String destinationName;

    /*
     * Destination asset version
     */
    private String destinationVersion;

    /**
     * Creates an instance of DestinationAsset class.
     */
    public DestinationAsset() {
    }

    /**
     * Get the registryName property: Destination registry name.
     * 
     * @return the registryName value.
     */
    public String registryName() {
        return this.registryName;
    }

    /**
     * Set the registryName property: Destination registry name.
     * 
     * @param registryName the registryName value to set.
     * @return the DestinationAsset object itself.
     */
    public DestinationAsset withRegistryName(String registryName) {
        this.registryName = registryName;
        return this;
    }

    /**
     * Get the destinationName property: Destination asset name.
     * 
     * @return the destinationName value.
     */
    public String destinationName() {
        return this.destinationName;
    }

    /**
     * Set the destinationName property: Destination asset name.
     * 
     * @param destinationName the destinationName value to set.
     * @return the DestinationAsset object itself.
     */
    public DestinationAsset withDestinationName(String destinationName) {
        this.destinationName = destinationName;
        return this;
    }

    /**
     * Get the destinationVersion property: Destination asset version.
     * 
     * @return the destinationVersion value.
     */
    public String destinationVersion() {
        return this.destinationVersion;
    }

    /**
     * Set the destinationVersion property: Destination asset version.
     * 
     * @param destinationVersion the destinationVersion value to set.
     * @return the DestinationAsset object itself.
     */
    public DestinationAsset withDestinationVersion(String destinationVersion) {
        this.destinationVersion = destinationVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("registryName", this.registryName);
        jsonWriter.writeStringField("destinationName", this.destinationName);
        jsonWriter.writeStringField("destinationVersion", this.destinationVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DestinationAsset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DestinationAsset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DestinationAsset.
     */
    public static DestinationAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DestinationAsset deserializedDestinationAsset = new DestinationAsset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("registryName".equals(fieldName)) {
                    deserializedDestinationAsset.registryName = reader.getString();
                } else if ("destinationName".equals(fieldName)) {
                    deserializedDestinationAsset.destinationName = reader.getString();
                } else if ("destinationVersion".equals(fieldName)) {
                    deserializedDestinationAsset.destinationVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDestinationAsset;
        });
    }
}
