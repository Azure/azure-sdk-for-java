// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines an Aml Instance container.
 */
@Fluent
public final class ComputeInstanceContainer implements JsonSerializable<ComputeInstanceContainer> {
    /*
     * Name of the ComputeInstance container.
     */
    private String name;

    /*
     * Auto save settings.
     */
    private Autosave autosave;

    /*
     * Information of GPU.
     */
    private String gpu;

    /*
     * network of this container.
     */
    private Network network;

    /*
     * Environment information of this container.
     */
    private ComputeInstanceEnvironmentInfo environment;

    /*
     * services of this containers.
     */
    private List<Object> services;

    /**
     * Creates an instance of ComputeInstanceContainer class.
     */
    public ComputeInstanceContainer() {
    }

    /**
     * Get the name property: Name of the ComputeInstance container.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the ComputeInstance container.
     * 
     * @param name the name value to set.
     * @return the ComputeInstanceContainer object itself.
     */
    public ComputeInstanceContainer withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the autosave property: Auto save settings.
     * 
     * @return the autosave value.
     */
    public Autosave autosave() {
        return this.autosave;
    }

    /**
     * Set the autosave property: Auto save settings.
     * 
     * @param autosave the autosave value to set.
     * @return the ComputeInstanceContainer object itself.
     */
    public ComputeInstanceContainer withAutosave(Autosave autosave) {
        this.autosave = autosave;
        return this;
    }

    /**
     * Get the gpu property: Information of GPU.
     * 
     * @return the gpu value.
     */
    public String gpu() {
        return this.gpu;
    }

    /**
     * Set the gpu property: Information of GPU.
     * 
     * @param gpu the gpu value to set.
     * @return the ComputeInstanceContainer object itself.
     */
    public ComputeInstanceContainer withGpu(String gpu) {
        this.gpu = gpu;
        return this;
    }

    /**
     * Get the network property: network of this container.
     * 
     * @return the network value.
     */
    public Network network() {
        return this.network;
    }

    /**
     * Set the network property: network of this container.
     * 
     * @param network the network value to set.
     * @return the ComputeInstanceContainer object itself.
     */
    public ComputeInstanceContainer withNetwork(Network network) {
        this.network = network;
        return this;
    }

    /**
     * Get the environment property: Environment information of this container.
     * 
     * @return the environment value.
     */
    public ComputeInstanceEnvironmentInfo environment() {
        return this.environment;
    }

    /**
     * Set the environment property: Environment information of this container.
     * 
     * @param environment the environment value to set.
     * @return the ComputeInstanceContainer object itself.
     */
    public ComputeInstanceContainer withEnvironment(ComputeInstanceEnvironmentInfo environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the services property: services of this containers.
     * 
     * @return the services value.
     */
    public List<Object> services() {
        return this.services;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (environment() != null) {
            environment().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("autosave", this.autosave == null ? null : this.autosave.toString());
        jsonWriter.writeStringField("gpu", this.gpu);
        jsonWriter.writeStringField("network", this.network == null ? null : this.network.toString());
        jsonWriter.writeJsonField("environment", this.environment);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeInstanceContainer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeInstanceContainer if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeInstanceContainer.
     */
    public static ComputeInstanceContainer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeInstanceContainer deserializedComputeInstanceContainer = new ComputeInstanceContainer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedComputeInstanceContainer.name = reader.getString();
                } else if ("autosave".equals(fieldName)) {
                    deserializedComputeInstanceContainer.autosave = Autosave.fromString(reader.getString());
                } else if ("gpu".equals(fieldName)) {
                    deserializedComputeInstanceContainer.gpu = reader.getString();
                } else if ("network".equals(fieldName)) {
                    deserializedComputeInstanceContainer.network = Network.fromString(reader.getString());
                } else if ("environment".equals(fieldName)) {
                    deserializedComputeInstanceContainer.environment = ComputeInstanceEnvironmentInfo.fromJson(reader);
                } else if ("services".equals(fieldName)) {
                    List<Object> services = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedComputeInstanceContainer.services = services;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeInstanceContainer;
        });
    }
}
