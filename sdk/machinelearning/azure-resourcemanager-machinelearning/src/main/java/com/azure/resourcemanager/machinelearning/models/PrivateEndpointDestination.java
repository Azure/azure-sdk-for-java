// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning
 * workspace.
 */
@Fluent
public final class PrivateEndpointDestination implements JsonSerializable<PrivateEndpointDestination> {
    /*
     * The serviceResourceId property.
     */
    private String serviceResourceId;

    /*
     * The sparkEnabled property.
     */
    private Boolean sparkEnabled;

    /*
     * Type of a managed network Outbound Rule of a machine learning workspace.
     */
    private RuleStatus sparkStatus;

    /*
     * The subresourceTarget property.
     */
    private String subresourceTarget;

    /**
     * Creates an instance of PrivateEndpointDestination class.
     */
    public PrivateEndpointDestination() {
    }

    /**
     * Get the serviceResourceId property: The serviceResourceId property.
     * 
     * @return the serviceResourceId value.
     */
    public String serviceResourceId() {
        return this.serviceResourceId;
    }

    /**
     * Set the serviceResourceId property: The serviceResourceId property.
     * 
     * @param serviceResourceId the serviceResourceId value to set.
     * @return the PrivateEndpointDestination object itself.
     */
    public PrivateEndpointDestination withServiceResourceId(String serviceResourceId) {
        this.serviceResourceId = serviceResourceId;
        return this;
    }

    /**
     * Get the sparkEnabled property: The sparkEnabled property.
     * 
     * @return the sparkEnabled value.
     */
    public Boolean sparkEnabled() {
        return this.sparkEnabled;
    }

    /**
     * Set the sparkEnabled property: The sparkEnabled property.
     * 
     * @param sparkEnabled the sparkEnabled value to set.
     * @return the PrivateEndpointDestination object itself.
     */
    public PrivateEndpointDestination withSparkEnabled(Boolean sparkEnabled) {
        this.sparkEnabled = sparkEnabled;
        return this;
    }

    /**
     * Get the sparkStatus property: Type of a managed network Outbound Rule of a machine learning workspace.
     * 
     * @return the sparkStatus value.
     */
    public RuleStatus sparkStatus() {
        return this.sparkStatus;
    }

    /**
     * Set the sparkStatus property: Type of a managed network Outbound Rule of a machine learning workspace.
     * 
     * @param sparkStatus the sparkStatus value to set.
     * @return the PrivateEndpointDestination object itself.
     */
    public PrivateEndpointDestination withSparkStatus(RuleStatus sparkStatus) {
        this.sparkStatus = sparkStatus;
        return this;
    }

    /**
     * Get the subresourceTarget property: The subresourceTarget property.
     * 
     * @return the subresourceTarget value.
     */
    public String subresourceTarget() {
        return this.subresourceTarget;
    }

    /**
     * Set the subresourceTarget property: The subresourceTarget property.
     * 
     * @param subresourceTarget the subresourceTarget value to set.
     * @return the PrivateEndpointDestination object itself.
     */
    public PrivateEndpointDestination withSubresourceTarget(String subresourceTarget) {
        this.subresourceTarget = subresourceTarget;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceResourceId", this.serviceResourceId);
        jsonWriter.writeBooleanField("sparkEnabled", this.sparkEnabled);
        jsonWriter.writeStringField("sparkStatus", this.sparkStatus == null ? null : this.sparkStatus.toString());
        jsonWriter.writeStringField("subresourceTarget", this.subresourceTarget);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateEndpointDestination from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateEndpointDestination if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrivateEndpointDestination.
     */
    public static PrivateEndpointDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateEndpointDestination deserializedPrivateEndpointDestination = new PrivateEndpointDestination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceResourceId".equals(fieldName)) {
                    deserializedPrivateEndpointDestination.serviceResourceId = reader.getString();
                } else if ("sparkEnabled".equals(fieldName)) {
                    deserializedPrivateEndpointDestination.sparkEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("sparkStatus".equals(fieldName)) {
                    deserializedPrivateEndpointDestination.sparkStatus = RuleStatus.fromString(reader.getString());
                } else if ("subresourceTarget".equals(fieldName)) {
                    deserializedPrivateEndpointDestination.subresourceTarget = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateEndpointDestination;
        });
    }
}
