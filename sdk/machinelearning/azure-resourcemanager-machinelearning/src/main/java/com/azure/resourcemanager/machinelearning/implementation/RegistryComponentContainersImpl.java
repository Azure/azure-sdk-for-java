// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.RegistryComponentContainersClient;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentContainerInner;
import com.azure.resourcemanager.machinelearning.models.ComponentContainer;
import com.azure.resourcemanager.machinelearning.models.RegistryComponentContainers;

public final class RegistryComponentContainersImpl implements RegistryComponentContainers {
    private static final ClientLogger LOGGER = new ClientLogger(RegistryComponentContainersImpl.class);

    private final RegistryComponentContainersClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public RegistryComponentContainersImpl(RegistryComponentContainersClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ComponentContainer> list(String resourceGroupName, String registryName) {
        PagedIterable<ComponentContainerInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ComponentContainerImpl(inner1, this.manager()));
    }

    public PagedIterable<ComponentContainer> list(String resourceGroupName, String registryName, String skip,
        Context context) {
        PagedIterable<ComponentContainerInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, skip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ComponentContainerImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String registryName, String componentName) {
        this.serviceClient().delete(resourceGroupName, registryName, componentName);
    }

    public void delete(String resourceGroupName, String registryName, String componentName, Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, componentName, context);
    }

    public Response<ComponentContainer> getWithResponse(String resourceGroupName, String registryName,
        String componentName, Context context) {
        Response<ComponentContainerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, registryName, componentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ComponentContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ComponentContainer get(String resourceGroupName, String registryName, String componentName) {
        ComponentContainerInner inner = this.serviceClient().get(resourceGroupName, registryName, componentName);
        if (inner != null) {
            return new ComponentContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ComponentContainer createOrUpdate(String resourceGroupName, String registryName, String componentName,
        ComponentContainerInner body) {
        ComponentContainerInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, registryName, componentName, body);
        if (inner != null) {
            return new ComponentContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ComponentContainer createOrUpdate(String resourceGroupName, String registryName, String componentName,
        ComponentContainerInner body, Context context) {
        ComponentContainerInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, registryName, componentName, body, context);
        if (inner != null) {
            return new ComponentContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private RegistryComponentContainersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }
}
