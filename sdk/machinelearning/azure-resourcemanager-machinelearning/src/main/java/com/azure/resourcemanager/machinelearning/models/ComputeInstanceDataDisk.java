// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines an Aml Instance DataDisk.
 */
@Fluent
public final class ComputeInstanceDataDisk implements JsonSerializable<ComputeInstanceDataDisk> {
    /*
     * Caching type of Data Disk.
     */
    private Caching caching;

    /*
     * The initial disk size in gigabytes.
     */
    private Integer diskSizeGB;

    /*
     * The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct
     * lun.
     */
    private Integer lun;

    /*
     * type of this storage account.
     */
    private StorageAccountType storageAccountType;

    /**
     * Creates an instance of ComputeInstanceDataDisk class.
     */
    public ComputeInstanceDataDisk() {
    }

    /**
     * Get the caching property: Caching type of Data Disk.
     * 
     * @return the caching value.
     */
    public Caching caching() {
        return this.caching;
    }

    /**
     * Set the caching property: Caching type of Data Disk.
     * 
     * @param caching the caching value to set.
     * @return the ComputeInstanceDataDisk object itself.
     */
    public ComputeInstanceDataDisk withCaching(Caching caching) {
        this.caching = caching;
        return this;
    }

    /**
     * Get the diskSizeGB property: The initial disk size in gigabytes.
     * 
     * @return the diskSizeGB value.
     */
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: The initial disk size in gigabytes.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the ComputeInstanceDataDisk object itself.
     */
    public ComputeInstanceDataDisk withDiskSizeGB(Integer diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the lun property: The lun is used to uniquely identify each data disk. If attaching multiple disks, each
     * should have a distinct lun.
     * 
     * @return the lun value.
     */
    public Integer lun() {
        return this.lun;
    }

    /**
     * Set the lun property: The lun is used to uniquely identify each data disk. If attaching multiple disks, each
     * should have a distinct lun.
     * 
     * @param lun the lun value to set.
     * @return the ComputeInstanceDataDisk object itself.
     */
    public ComputeInstanceDataDisk withLun(Integer lun) {
        this.lun = lun;
        return this;
    }

    /**
     * Get the storageAccountType property: type of this storage account.
     * 
     * @return the storageAccountType value.
     */
    public StorageAccountType storageAccountType() {
        return this.storageAccountType;
    }

    /**
     * Set the storageAccountType property: type of this storage account.
     * 
     * @param storageAccountType the storageAccountType value to set.
     * @return the ComputeInstanceDataDisk object itself.
     */
    public ComputeInstanceDataDisk withStorageAccountType(StorageAccountType storageAccountType) {
        this.storageAccountType = storageAccountType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("caching", this.caching == null ? null : this.caching.toString());
        jsonWriter.writeNumberField("diskSizeGB", this.diskSizeGB);
        jsonWriter.writeNumberField("lun", this.lun);
        jsonWriter.writeStringField("storageAccountType",
            this.storageAccountType == null ? null : this.storageAccountType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeInstanceDataDisk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeInstanceDataDisk if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeInstanceDataDisk.
     */
    public static ComputeInstanceDataDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeInstanceDataDisk deserializedComputeInstanceDataDisk = new ComputeInstanceDataDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("caching".equals(fieldName)) {
                    deserializedComputeInstanceDataDisk.caching = Caching.fromString(reader.getString());
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedComputeInstanceDataDisk.diskSizeGB = reader.getNullable(JsonReader::getInt);
                } else if ("lun".equals(fieldName)) {
                    deserializedComputeInstanceDataDisk.lun = reader.getNullable(JsonReader::getInt);
                } else if ("storageAccountType".equals(fieldName)) {
                    deserializedComputeInstanceDataDisk.storageAccountType
                        = StorageAccountType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeInstanceDataDisk;
        });
    }
}
