// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.FeaturestoreEntityVersionsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.FeaturestoreEntityVersionInner;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityVersion;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityVersions;
import com.azure.resourcemanager.machinelearning.models.ListViewType;

public final class FeaturestoreEntityVersionsImpl implements FeaturestoreEntityVersions {
    private static final ClientLogger LOGGER = new ClientLogger(FeaturestoreEntityVersionsImpl.class);

    private final FeaturestoreEntityVersionsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public FeaturestoreEntityVersionsImpl(FeaturestoreEntityVersionsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<FeaturestoreEntityVersion> list(String resourceGroupName, String workspaceName, String name) {
        PagedIterable<FeaturestoreEntityVersionInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, name);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FeaturestoreEntityVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<FeaturestoreEntityVersion> list(String resourceGroupName, String workspaceName, String name,
        String skip, String tags, ListViewType listViewType, Integer pageSize, String versionName, String version,
        String description, String createdBy, String stage, Context context) {
        PagedIterable<FeaturestoreEntityVersionInner> inner = this.serviceClient()
            .list(resourceGroupName, workspaceName, name, skip, tags, listViewType, pageSize, versionName, version,
                description, createdBy, stage, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FeaturestoreEntityVersionImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String workspaceName, String name, String version) {
        this.serviceClient().delete(resourceGroupName, workspaceName, name, version);
    }

    public void delete(String resourceGroupName, String workspaceName, String name, String version, Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, name, version, context);
    }

    public Response<FeaturestoreEntityVersion> getWithResponse(String resourceGroupName, String workspaceName,
        String name, String version, Context context) {
        Response<FeaturestoreEntityVersionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, name, version, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FeaturestoreEntityVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FeaturestoreEntityVersion get(String resourceGroupName, String workspaceName, String name, String version) {
        FeaturestoreEntityVersionInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, name, version);
        if (inner != null) {
            return new FeaturestoreEntityVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public FeaturestoreEntityVersion getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "featurestoreEntities");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'featurestoreEntities'.", id)));
        }
        String version = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, name, version, Context.NONE).getValue();
    }

    public Response<FeaturestoreEntityVersion> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "featurestoreEntities");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'featurestoreEntities'.", id)));
        }
        String version = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, name, version, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "featurestoreEntities");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'featurestoreEntities'.", id)));
        }
        String version = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, name, version, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "featurestoreEntities");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'featurestoreEntities'.", id)));
        }
        String version = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, name, version, context);
    }

    private FeaturestoreEntityVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public FeaturestoreEntityVersionImpl define(String name) {
        return new FeaturestoreEntityVersionImpl(name, this.manager());
    }
}
