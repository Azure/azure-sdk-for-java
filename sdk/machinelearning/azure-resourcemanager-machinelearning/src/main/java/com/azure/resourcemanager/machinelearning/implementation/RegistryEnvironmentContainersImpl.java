// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.RegistryEnvironmentContainersClient;
import com.azure.resourcemanager.machinelearning.fluent.models.EnvironmentContainerInner;
import com.azure.resourcemanager.machinelearning.models.EnvironmentContainer;
import com.azure.resourcemanager.machinelearning.models.ListViewType;
import com.azure.resourcemanager.machinelearning.models.RegistryEnvironmentContainers;

public final class RegistryEnvironmentContainersImpl implements RegistryEnvironmentContainers {
    private static final ClientLogger LOGGER = new ClientLogger(RegistryEnvironmentContainersImpl.class);

    private final RegistryEnvironmentContainersClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public RegistryEnvironmentContainersImpl(RegistryEnvironmentContainersClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EnvironmentContainer> list(String resourceGroupName, String registryName) {
        PagedIterable<EnvironmentContainerInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnvironmentContainerImpl(inner1, this.manager()));
    }

    public PagedIterable<EnvironmentContainer> list(String resourceGroupName, String registryName, String skip,
        ListViewType listViewType, Context context) {
        PagedIterable<EnvironmentContainerInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, skip, listViewType, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnvironmentContainerImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String registryName, String environmentName) {
        this.serviceClient().delete(resourceGroupName, registryName, environmentName);
    }

    public void delete(String resourceGroupName, String registryName, String environmentName, Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, environmentName, context);
    }

    public Response<EnvironmentContainer> getWithResponse(String resourceGroupName, String registryName,
        String environmentName, Context context) {
        Response<EnvironmentContainerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, registryName, environmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EnvironmentContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EnvironmentContainer get(String resourceGroupName, String registryName, String environmentName) {
        EnvironmentContainerInner inner = this.serviceClient().get(resourceGroupName, registryName, environmentName);
        if (inner != null) {
            return new EnvironmentContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EnvironmentContainer createOrUpdate(String resourceGroupName, String registryName, String environmentName,
        EnvironmentContainerInner body) {
        EnvironmentContainerInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, registryName, environmentName, body);
        if (inner != null) {
            return new EnvironmentContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EnvironmentContainer createOrUpdate(String resourceGroupName, String registryName, String environmentName,
        EnvironmentContainerInner body, Context context) {
        EnvironmentContainerInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, registryName, environmentName, body, context);
        if (inner != null) {
            return new EnvironmentContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private RegistryEnvironmentContainersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }
}
