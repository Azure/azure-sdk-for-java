// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of Databricks.
 */
@Fluent
public final class DatabricksProperties implements JsonSerializable<DatabricksProperties> {
    /*
     * Databricks access token
     */
    private String databricksAccessToken;

    /*
     * Workspace Url
     */
    private String workspaceUrl;

    /**
     * Creates an instance of DatabricksProperties class.
     */
    public DatabricksProperties() {
    }

    /**
     * Get the databricksAccessToken property: Databricks access token.
     * 
     * @return the databricksAccessToken value.
     */
    public String databricksAccessToken() {
        return this.databricksAccessToken;
    }

    /**
     * Set the databricksAccessToken property: Databricks access token.
     * 
     * @param databricksAccessToken the databricksAccessToken value to set.
     * @return the DatabricksProperties object itself.
     */
    public DatabricksProperties withDatabricksAccessToken(String databricksAccessToken) {
        this.databricksAccessToken = databricksAccessToken;
        return this;
    }

    /**
     * Get the workspaceUrl property: Workspace Url.
     * 
     * @return the workspaceUrl value.
     */
    public String workspaceUrl() {
        return this.workspaceUrl;
    }

    /**
     * Set the workspaceUrl property: Workspace Url.
     * 
     * @param workspaceUrl the workspaceUrl value to set.
     * @return the DatabricksProperties object itself.
     */
    public DatabricksProperties withWorkspaceUrl(String workspaceUrl) {
        this.workspaceUrl = workspaceUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("databricksAccessToken", this.databricksAccessToken);
        jsonWriter.writeStringField("workspaceUrl", this.workspaceUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabricksProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabricksProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabricksProperties.
     */
    public static DatabricksProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabricksProperties deserializedDatabricksProperties = new DatabricksProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databricksAccessToken".equals(fieldName)) {
                    deserializedDatabricksProperties.databricksAccessToken = reader.getString();
                } else if ("workspaceUrl".equals(fieldName)) {
                    deserializedDatabricksProperties.workspaceUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabricksProperties;
        });
    }
}
