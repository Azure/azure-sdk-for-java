// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ComputeRecurrenceSchedule model.
 */
@Fluent
public final class ComputeRecurrenceSchedule implements JsonSerializable<ComputeRecurrenceSchedule> {
    /*
     * [Required] List of hours for the schedule.
     */
    private List<Integer> hours;

    /*
     * [Required] List of minutes for the schedule.
     */
    private List<Integer> minutes;

    /*
     * List of month days for the schedule
     */
    private List<Integer> monthDays;

    /*
     * List of days for the schedule.
     */
    private List<ComputeWeekDay> weekDays;

    /**
     * Creates an instance of ComputeRecurrenceSchedule class.
     */
    public ComputeRecurrenceSchedule() {
    }

    /**
     * Get the hours property: [Required] List of hours for the schedule.
     * 
     * @return the hours value.
     */
    public List<Integer> hours() {
        return this.hours;
    }

    /**
     * Set the hours property: [Required] List of hours for the schedule.
     * 
     * @param hours the hours value to set.
     * @return the ComputeRecurrenceSchedule object itself.
     */
    public ComputeRecurrenceSchedule withHours(List<Integer> hours) {
        this.hours = hours;
        return this;
    }

    /**
     * Get the minutes property: [Required] List of minutes for the schedule.
     * 
     * @return the minutes value.
     */
    public List<Integer> minutes() {
        return this.minutes;
    }

    /**
     * Set the minutes property: [Required] List of minutes for the schedule.
     * 
     * @param minutes the minutes value to set.
     * @return the ComputeRecurrenceSchedule object itself.
     */
    public ComputeRecurrenceSchedule withMinutes(List<Integer> minutes) {
        this.minutes = minutes;
        return this;
    }

    /**
     * Get the monthDays property: List of month days for the schedule.
     * 
     * @return the monthDays value.
     */
    public List<Integer> monthDays() {
        return this.monthDays;
    }

    /**
     * Set the monthDays property: List of month days for the schedule.
     * 
     * @param monthDays the monthDays value to set.
     * @return the ComputeRecurrenceSchedule object itself.
     */
    public ComputeRecurrenceSchedule withMonthDays(List<Integer> monthDays) {
        this.monthDays = monthDays;
        return this;
    }

    /**
     * Get the weekDays property: List of days for the schedule.
     * 
     * @return the weekDays value.
     */
    public List<ComputeWeekDay> weekDays() {
        return this.weekDays;
    }

    /**
     * Set the weekDays property: List of days for the schedule.
     * 
     * @param weekDays the weekDays value to set.
     * @return the ComputeRecurrenceSchedule object itself.
     */
    public ComputeRecurrenceSchedule withWeekDays(List<ComputeWeekDay> weekDays) {
        this.weekDays = weekDays;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hours() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property hours in model ComputeRecurrenceSchedule"));
        }
        if (minutes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property minutes in model ComputeRecurrenceSchedule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ComputeRecurrenceSchedule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("hours", this.hours, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("minutes", this.minutes, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("monthDays", this.monthDays, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("weekDays", this.weekDays,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeRecurrenceSchedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeRecurrenceSchedule if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComputeRecurrenceSchedule.
     */
    public static ComputeRecurrenceSchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeRecurrenceSchedule deserializedComputeRecurrenceSchedule = new ComputeRecurrenceSchedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hours".equals(fieldName)) {
                    List<Integer> hours = reader.readArray(reader1 -> reader1.getInt());
                    deserializedComputeRecurrenceSchedule.hours = hours;
                } else if ("minutes".equals(fieldName)) {
                    List<Integer> minutes = reader.readArray(reader1 -> reader1.getInt());
                    deserializedComputeRecurrenceSchedule.minutes = minutes;
                } else if ("monthDays".equals(fieldName)) {
                    List<Integer> monthDays = reader.readArray(reader1 -> reader1.getInt());
                    deserializedComputeRecurrenceSchedule.monthDays = monthDays;
                } else if ("weekDays".equals(fieldName)) {
                    List<ComputeWeekDay> weekDays
                        = reader.readArray(reader1 -> ComputeWeekDay.fromString(reader1.getString()));
                    deserializedComputeRecurrenceSchedule.weekDays = weekDays;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeRecurrenceSchedule;
        });
    }
}
