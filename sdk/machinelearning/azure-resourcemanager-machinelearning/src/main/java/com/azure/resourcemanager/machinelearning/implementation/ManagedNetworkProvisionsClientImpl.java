// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.machinelearning.fluent.ManagedNetworkProvisionsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkProvisionStatusInner;
import com.azure.resourcemanager.machinelearning.models.ManagedNetworkProvisionOptions;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ManagedNetworkProvisionsClient.
 */
public final class ManagedNetworkProvisionsClientImpl implements ManagedNetworkProvisionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ManagedNetworkProvisionsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureMachineLearningWorkspacesImpl client;

    /**
     * Initializes an instance of ManagedNetworkProvisionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ManagedNetworkProvisionsClientImpl(AzureMachineLearningWorkspacesImpl client) {
        this.service = RestProxy.create(ManagedNetworkProvisionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureMachineLearningWorkspacesManagedNetworkProvisions to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureMachineLearning")
    public interface ManagedNetworkProvisionsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/provisionManagedNetwork")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> provisionManagedNetwork(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedNetworkProvisionOptions body, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param body Managed Network Provisioning Options for a machine learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of the Provisioning for the managed network of a machine learning workspace along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> provisionManagedNetworkWithResponseAsync(String resourceGroupName,
        String workspaceName, ManagedNetworkProvisionOptions body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.provisionManagedNetwork(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, workspaceName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param body Managed Network Provisioning Options for a machine learning workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of the Provisioning for the managed network of a machine learning workspace along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> provisionManagedNetworkWithResponseAsync(String resourceGroupName,
        String workspaceName, ManagedNetworkProvisionOptions body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.provisionManagedNetwork(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, workspaceName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param body Managed Network Provisioning Options for a machine learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of the Provisioning for the managed network of a machine
     * learning workspace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedNetworkProvisionStatusInner>, ManagedNetworkProvisionStatusInner>
        beginProvisionManagedNetworkAsync(String resourceGroupName, String workspaceName,
            ManagedNetworkProvisionOptions body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = provisionManagedNetworkWithResponseAsync(resourceGroupName, workspaceName, body);
        return this.client.<ManagedNetworkProvisionStatusInner, ManagedNetworkProvisionStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), ManagedNetworkProvisionStatusInner.class,
            ManagedNetworkProvisionStatusInner.class, this.client.getContext());
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of the Provisioning for the managed network of a machine
     * learning workspace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedNetworkProvisionStatusInner>, ManagedNetworkProvisionStatusInner>
        beginProvisionManagedNetworkAsync(String resourceGroupName, String workspaceName) {
        final ManagedNetworkProvisionOptions body = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = provisionManagedNetworkWithResponseAsync(resourceGroupName, workspaceName, body);
        return this.client.<ManagedNetworkProvisionStatusInner, ManagedNetworkProvisionStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), ManagedNetworkProvisionStatusInner.class,
            ManagedNetworkProvisionStatusInner.class, this.client.getContext());
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param body Managed Network Provisioning Options for a machine learning workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of the Provisioning for the managed network of a machine
     * learning workspace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedNetworkProvisionStatusInner>, ManagedNetworkProvisionStatusInner>
        beginProvisionManagedNetworkAsync(String resourceGroupName, String workspaceName,
            ManagedNetworkProvisionOptions body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = provisionManagedNetworkWithResponseAsync(resourceGroupName, workspaceName, body, context);
        return this.client.<ManagedNetworkProvisionStatusInner, ManagedNetworkProvisionStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), ManagedNetworkProvisionStatusInner.class,
            ManagedNetworkProvisionStatusInner.class, context);
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of status of the Provisioning for the managed network of a machine
     * learning workspace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedNetworkProvisionStatusInner>, ManagedNetworkProvisionStatusInner>
        beginProvisionManagedNetwork(String resourceGroupName, String workspaceName) {
        final ManagedNetworkProvisionOptions body = null;
        return this.beginProvisionManagedNetworkAsync(resourceGroupName, workspaceName, body).getSyncPoller();
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param body Managed Network Provisioning Options for a machine learning workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of status of the Provisioning for the managed network of a machine
     * learning workspace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedNetworkProvisionStatusInner>, ManagedNetworkProvisionStatusInner>
        beginProvisionManagedNetwork(String resourceGroupName, String workspaceName,
            ManagedNetworkProvisionOptions body, Context context) {
        return this.beginProvisionManagedNetworkAsync(resourceGroupName, workspaceName, body, context).getSyncPoller();
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param body Managed Network Provisioning Options for a machine learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of the Provisioning for the managed network of a machine learning workspace on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkProvisionStatusInner> provisionManagedNetworkAsync(String resourceGroupName,
        String workspaceName, ManagedNetworkProvisionOptions body) {
        return beginProvisionManagedNetworkAsync(resourceGroupName, workspaceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of the Provisioning for the managed network of a machine learning workspace on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkProvisionStatusInner> provisionManagedNetworkAsync(String resourceGroupName,
        String workspaceName) {
        final ManagedNetworkProvisionOptions body = null;
        return beginProvisionManagedNetworkAsync(resourceGroupName, workspaceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param body Managed Network Provisioning Options for a machine learning workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of the Provisioning for the managed network of a machine learning workspace on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkProvisionStatusInner> provisionManagedNetworkAsync(String resourceGroupName,
        String workspaceName, ManagedNetworkProvisionOptions body, Context context) {
        return beginProvisionManagedNetworkAsync(resourceGroupName, workspaceName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of the Provisioning for the managed network of a machine learning workspace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkProvisionStatusInner provisionManagedNetwork(String resourceGroupName, String workspaceName) {
        final ManagedNetworkProvisionOptions body = null;
        return provisionManagedNetworkAsync(resourceGroupName, workspaceName, body).block();
    }

    /**
     * Provisions the managed network of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param body Managed Network Provisioning Options for a machine learning workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of the Provisioning for the managed network of a machine learning workspace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkProvisionStatusInner provisionManagedNetwork(String resourceGroupName, String workspaceName,
        ManagedNetworkProvisionOptions body, Context context) {
        return provisionManagedNetworkAsync(resourceGroupName, workspaceName, body, context).block();
    }
}
