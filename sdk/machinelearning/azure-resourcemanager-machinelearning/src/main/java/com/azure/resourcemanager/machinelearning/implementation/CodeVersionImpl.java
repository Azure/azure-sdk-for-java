// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.fluent.models.CodeVersionInner;
import com.azure.resourcemanager.machinelearning.models.CodeVersion;
import com.azure.resourcemanager.machinelearning.models.CodeVersionProperties;
import com.azure.resourcemanager.machinelearning.models.PendingUploadRequestDto;
import com.azure.resourcemanager.machinelearning.models.PendingUploadResponseDto;

public final class CodeVersionImpl implements CodeVersion, CodeVersion.Definition, CodeVersion.Update {
    private CodeVersionInner innerObject;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public CodeVersionProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public CodeVersionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registryName;

    private String codeName;

    private String version;

    public CodeVersionImpl withExistingCode(String resourceGroupName, String registryName, String codeName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        this.codeName = codeName;
        return this;
    }

    public CodeVersion create() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryCodeVersions()
            .createOrUpdate(resourceGroupName, registryName, codeName, version, this.innerModel(), Context.NONE);
        return this;
    }

    public CodeVersion create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryCodeVersions()
            .createOrUpdate(resourceGroupName, registryName, codeName, version, this.innerModel(), context);
        return this;
    }

    CodeVersionImpl(String name, com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = new CodeVersionInner();
        this.serviceManager = serviceManager;
        this.version = name;
    }

    public CodeVersionImpl update() {
        return this;
    }

    public CodeVersion apply() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryCodeVersions()
            .createOrUpdate(resourceGroupName, registryName, codeName, version, this.innerModel(), Context.NONE);
        return this;
    }

    public CodeVersion apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryCodeVersions()
            .createOrUpdate(resourceGroupName, registryName, codeName, version, this.innerModel(), context);
        return this;
    }

    CodeVersionImpl(CodeVersionInner innerObject,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registryName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "registries");
        this.codeName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "codes");
        this.version = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "versions");
    }

    public CodeVersion refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryCodeVersions()
            .getWithResponse(resourceGroupName, registryName, codeName, version, Context.NONE)
            .getValue();
        return this;
    }

    public CodeVersion refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryCodeVersions()
            .getWithResponse(resourceGroupName, registryName, codeName, version, context)
            .getValue();
        return this;
    }

    public Response<PendingUploadResponseDto> createOrGetStartPendingUploadWithResponse(PendingUploadRequestDto body,
        Context context) {
        return serviceManager.registryCodeVersions()
            .createOrGetStartPendingUploadWithResponse(resourceGroupName, registryName, codeName, version, body,
                context);
    }

    public PendingUploadResponseDto createOrGetStartPendingUpload(PendingUploadRequestDto body) {
        return serviceManager.registryCodeVersions()
            .createOrGetStartPendingUpload(resourceGroupName, registryName, codeName, version, body);
    }

    public CodeVersionImpl withProperties(CodeVersionProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
