// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointAuthKeysInner;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointPropertiesBaseInner;
import java.io.IOException;
import java.util.Map;

/**
 * Online endpoint configuration.
 */
@Fluent
public final class OnlineEndpointProperties extends EndpointPropertiesBaseInner {
    /*
     * Provisioning state for the endpoint.
     */
    private EndpointProvisioningState provisioningState;

    /*
     * ARM resource ID of the compute if it exists.
     * optional
     */
    private String compute;

    /*
     * Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
     */
    private PublicNetworkAccessType publicNetworkAccess;

    /*
     * Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
     */
    private Map<String, Integer> traffic;

    /*
     * Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to
     * sum to utmost 50.
     */
    private Map<String, Integer> mirrorTraffic;

    /*
     * Endpoint URI.
     */
    private String scoringUri;

    /*
     * Endpoint Swagger URI.
     */
    private String swaggerUri;

    /**
     * Creates an instance of OnlineEndpointProperties class.
     */
    public OnlineEndpointProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state for the endpoint.
     * 
     * @return the provisioningState value.
     */
    public EndpointProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the compute property: ARM resource ID of the compute if it exists.
     * optional.
     * 
     * @return the compute value.
     */
    public String compute() {
        return this.compute;
    }

    /**
     * Set the compute property: ARM resource ID of the compute if it exists.
     * optional.
     * 
     * @param compute the compute value to set.
     * @return the OnlineEndpointProperties object itself.
     */
    public OnlineEndpointProperties withCompute(String compute) {
        this.compute = compute;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Set to "Enabled" for endpoints that should allow public access when Private
     * Link is enabled.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccessType publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Set to "Enabled" for endpoints that should allow public access when Private
     * Link is enabled.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the OnlineEndpointProperties object itself.
     */
    public OnlineEndpointProperties withPublicNetworkAccess(PublicNetworkAccessType publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the traffic property: Percentage of traffic from endpoint to divert to each deployment. Traffic values need
     * to sum to 100.
     * 
     * @return the traffic value.
     */
    public Map<String, Integer> traffic() {
        return this.traffic;
    }

    /**
     * Set the traffic property: Percentage of traffic from endpoint to divert to each deployment. Traffic values need
     * to sum to 100.
     * 
     * @param traffic the traffic value to set.
     * @return the OnlineEndpointProperties object itself.
     */
    public OnlineEndpointProperties withTraffic(Map<String, Integer> traffic) {
        this.traffic = traffic;
        return this;
    }

    /**
     * Get the mirrorTraffic property: Percentage of traffic to be mirrored to each deployment without using returned
     * scoring. Traffic values need to sum to utmost 50.
     * 
     * @return the mirrorTraffic value.
     */
    public Map<String, Integer> mirrorTraffic() {
        return this.mirrorTraffic;
    }

    /**
     * Set the mirrorTraffic property: Percentage of traffic to be mirrored to each deployment without using returned
     * scoring. Traffic values need to sum to utmost 50.
     * 
     * @param mirrorTraffic the mirrorTraffic value to set.
     * @return the OnlineEndpointProperties object itself.
     */
    public OnlineEndpointProperties withMirrorTraffic(Map<String, Integer> mirrorTraffic) {
        this.mirrorTraffic = mirrorTraffic;
        return this;
    }

    /**
     * Get the scoringUri property: Endpoint URI.
     * 
     * @return the scoringUri value.
     */
    @Override
    public String scoringUri() {
        return this.scoringUri;
    }

    /**
     * Get the swaggerUri property: Endpoint Swagger URI.
     * 
     * @return the swaggerUri value.
     */
    @Override
    public String swaggerUri() {
        return this.swaggerUri;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OnlineEndpointProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OnlineEndpointProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OnlineEndpointProperties withAuthMode(EndpointAuthMode authMode) {
        super.withAuthMode(authMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OnlineEndpointProperties withKeys(EndpointAuthKeysInner keys) {
        super.withKeys(keys);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authMode", authMode() == null ? null : authMode().toString());
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("keys", keys());
        jsonWriter.writeStringField("compute", this.compute);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeMapField("traffic", this.traffic, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeMapField("mirrorTraffic", this.mirrorTraffic, (writer, element) -> writer.writeInt(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnlineEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnlineEndpointProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OnlineEndpointProperties.
     */
    public static OnlineEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnlineEndpointProperties deserializedOnlineEndpointProperties = new OnlineEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authMode".equals(fieldName)) {
                    deserializedOnlineEndpointProperties.withAuthMode(EndpointAuthMode.fromString(reader.getString()));
                } else if ("description".equals(fieldName)) {
                    deserializedOnlineEndpointProperties.withDescription(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedOnlineEndpointProperties.withProperties(properties);
                } else if ("scoringUri".equals(fieldName)) {
                    deserializedOnlineEndpointProperties.scoringUri = reader.getString();
                } else if ("swaggerUri".equals(fieldName)) {
                    deserializedOnlineEndpointProperties.swaggerUri = reader.getString();
                } else if ("keys".equals(fieldName)) {
                    deserializedOnlineEndpointProperties.withKeys(EndpointAuthKeysInner.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOnlineEndpointProperties.provisioningState
                        = EndpointProvisioningState.fromString(reader.getString());
                } else if ("compute".equals(fieldName)) {
                    deserializedOnlineEndpointProperties.compute = reader.getString();
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedOnlineEndpointProperties.publicNetworkAccess
                        = PublicNetworkAccessType.fromString(reader.getString());
                } else if ("traffic".equals(fieldName)) {
                    Map<String, Integer> traffic = reader.readMap(reader1 -> reader1.getInt());
                    deserializedOnlineEndpointProperties.traffic = traffic;
                } else if ("mirrorTraffic".equals(fieldName)) {
                    Map<String, Integer> mirrorTraffic = reader.readMap(reader1 -> reader1.getInt());
                    deserializedOnlineEndpointProperties.mirrorTraffic = mirrorTraffic;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnlineEndpointProperties;
        });
    }
}
