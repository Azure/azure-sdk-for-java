// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.machinelearning.fluent.RegistryDataReferencesClient;
import com.azure.resourcemanager.machinelearning.fluent.models.GetBlobReferenceSasResponseDtoInner;
import com.azure.resourcemanager.machinelearning.models.GetBlobReferenceSasRequestDto;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in RegistryDataReferencesClient.
 */
public final class RegistryDataReferencesClientImpl implements RegistryDataReferencesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RegistryDataReferencesService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureMachineLearningWorkspacesImpl client;

    /**
     * Initializes an instance of RegistryDataReferencesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RegistryDataReferencesClientImpl(AzureMachineLearningWorkspacesImpl client) {
        this.service = RestProxy.create(RegistryDataReferencesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureMachineLearningWorkspacesRegistryDataReferences to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureMachineLearning")
    public interface RegistryDataReferencesService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/registries/{registryName}/datareferences/{name}/versions/{version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetBlobReferenceSasResponseDtoInner>> getBlobReferenceSas(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("registryName") String registryName,
            @PathParam("name") String name, @PathParam("version") String version,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GetBlobReferenceSasRequestDto body, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get blob reference SAS Uri.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName Name of Azure Machine Learning registry. This is case-insensitive.
     * @param name Data reference name.
     * @param version Version identifier.
     * @param body Asset id and blob uri.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return blob reference SAS Uri along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetBlobReferenceSasResponseDtoInner>> getBlobReferenceSasWithResponseAsync(
        String resourceGroupName, String registryName, String name, String version,
        GetBlobReferenceSasRequestDto body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter registryName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (version == null) {
            return Mono.error(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getBlobReferenceSas(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, registryName, name, version, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get blob reference SAS Uri.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName Name of Azure Machine Learning registry. This is case-insensitive.
     * @param name Data reference name.
     * @param version Version identifier.
     * @param body Asset id and blob uri.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return blob reference SAS Uri along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetBlobReferenceSasResponseDtoInner>> getBlobReferenceSasWithResponseAsync(
        String resourceGroupName, String registryName, String name, String version, GetBlobReferenceSasRequestDto body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter registryName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (version == null) {
            return Mono.error(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getBlobReferenceSas(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, registryName, name, version, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Get blob reference SAS Uri.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName Name of Azure Machine Learning registry. This is case-insensitive.
     * @param name Data reference name.
     * @param version Version identifier.
     * @param body Asset id and blob uri.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return blob reference SAS Uri on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetBlobReferenceSasResponseDtoInner> getBlobReferenceSasAsync(String resourceGroupName,
        String registryName, String name, String version, GetBlobReferenceSasRequestDto body) {
        return getBlobReferenceSasWithResponseAsync(resourceGroupName, registryName, name, version, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get blob reference SAS Uri.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName Name of Azure Machine Learning registry. This is case-insensitive.
     * @param name Data reference name.
     * @param version Version identifier.
     * @param body Asset id and blob uri.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return blob reference SAS Uri along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetBlobReferenceSasResponseDtoInner> getBlobReferenceSasWithResponse(String resourceGroupName,
        String registryName, String name, String version, GetBlobReferenceSasRequestDto body, Context context) {
        return getBlobReferenceSasWithResponseAsync(resourceGroupName, registryName, name, version, body, context)
            .block();
    }

    /**
     * Get blob reference SAS Uri.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName Name of Azure Machine Learning registry. This is case-insensitive.
     * @param name Data reference name.
     * @param version Version identifier.
     * @param body Asset id and blob uri.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return blob reference SAS Uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetBlobReferenceSasResponseDtoInner getBlobReferenceSas(String resourceGroupName, String registryName,
        String name, String version, GetBlobReferenceSasRequestDto body) {
        return getBlobReferenceSasWithResponse(resourceGroupName, registryName, name, version, body, Context.NONE)
            .getValue();
    }
}
