// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.RegistryComponentVersionsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentVersionInner;
import com.azure.resourcemanager.machinelearning.models.ComponentVersion;
import com.azure.resourcemanager.machinelearning.models.RegistryComponentVersions;

public final class RegistryComponentVersionsImpl implements RegistryComponentVersions {
    private static final ClientLogger LOGGER = new ClientLogger(RegistryComponentVersionsImpl.class);

    private final RegistryComponentVersionsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public RegistryComponentVersionsImpl(RegistryComponentVersionsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ComponentVersion> list(String resourceGroupName, String registryName, String componentName) {
        PagedIterable<ComponentVersionInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, componentName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ComponentVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<ComponentVersion> list(String resourceGroupName, String registryName, String componentName,
        String orderBy, Integer top, String skip, Context context) {
        PagedIterable<ComponentVersionInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, componentName, orderBy, top, skip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ComponentVersionImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String registryName, String componentName, String version) {
        this.serviceClient().delete(resourceGroupName, registryName, componentName, version);
    }

    public void delete(String resourceGroupName, String registryName, String componentName, String version,
        Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, componentName, version, context);
    }

    public Response<ComponentVersion> getWithResponse(String resourceGroupName, String registryName,
        String componentName, String version, Context context) {
        Response<ComponentVersionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, registryName, componentName, version, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ComponentVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ComponentVersion get(String resourceGroupName, String registryName, String componentName, String version) {
        ComponentVersionInner inner = this.serviceClient().get(resourceGroupName, registryName, componentName, version);
        if (inner != null) {
            return new ComponentVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ComponentVersion createOrUpdate(String resourceGroupName, String registryName, String componentName,
        String version, ComponentVersionInner body) {
        ComponentVersionInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, registryName, componentName, version, body);
        if (inner != null) {
            return new ComponentVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ComponentVersion createOrUpdate(String resourceGroupName, String registryName, String componentName,
        String version, ComponentVersionInner body, Context context) {
        ComponentVersionInner inner = this.serviceClient()
            .createOrUpdate(resourceGroupName, registryName, componentName, version, body, context);
        if (inner != null) {
            return new ComponentVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private RegistryComponentVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }
}
