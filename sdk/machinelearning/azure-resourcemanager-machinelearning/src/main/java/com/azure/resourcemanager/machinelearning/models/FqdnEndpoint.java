// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The FqdnEndpoint model.
 */
@Fluent
public final class FqdnEndpoint implements JsonSerializable<FqdnEndpoint> {
    /*
     * The domainName property.
     */
    private String domainName;

    /*
     * The endpointDetails property.
     */
    private List<FqdnEndpointDetail> endpointDetails;

    /**
     * Creates an instance of FqdnEndpoint class.
     */
    public FqdnEndpoint() {
    }

    /**
     * Get the domainName property: The domainName property.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: The domainName property.
     * 
     * @param domainName the domainName value to set.
     * @return the FqdnEndpoint object itself.
     */
    public FqdnEndpoint withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the endpointDetails property: The endpointDetails property.
     * 
     * @return the endpointDetails value.
     */
    public List<FqdnEndpointDetail> endpointDetails() {
        return this.endpointDetails;
    }

    /**
     * Set the endpointDetails property: The endpointDetails property.
     * 
     * @param endpointDetails the endpointDetails value to set.
     * @return the FqdnEndpoint object itself.
     */
    public FqdnEndpoint withEndpointDetails(List<FqdnEndpointDetail> endpointDetails) {
        this.endpointDetails = endpointDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointDetails() != null) {
            endpointDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("domainName", this.domainName);
        jsonWriter.writeArrayField("endpointDetails", this.endpointDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FqdnEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FqdnEndpoint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FqdnEndpoint.
     */
    public static FqdnEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FqdnEndpoint deserializedFqdnEndpoint = new FqdnEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domainName".equals(fieldName)) {
                    deserializedFqdnEndpoint.domainName = reader.getString();
                } else if ("endpointDetails".equals(fieldName)) {
                    List<FqdnEndpointDetail> endpointDetails
                        = reader.readArray(reader1 -> FqdnEndpointDetail.fromJson(reader1));
                    deserializedFqdnEndpoint.endpointDetails = endpointDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFqdnEndpoint;
        });
    }
}
