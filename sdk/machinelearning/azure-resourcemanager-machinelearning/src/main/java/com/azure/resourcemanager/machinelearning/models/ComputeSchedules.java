// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The list of schedules to be applied on the computes.
 */
@Fluent
public final class ComputeSchedules implements JsonSerializable<ComputeSchedules> {
    /*
     * The list of compute start stop schedules to be applied.
     */
    private List<ComputeStartStopSchedule> computeStartStop;

    /**
     * Creates an instance of ComputeSchedules class.
     */
    public ComputeSchedules() {
    }

    /**
     * Get the computeStartStop property: The list of compute start stop schedules to be applied.
     * 
     * @return the computeStartStop value.
     */
    public List<ComputeStartStopSchedule> computeStartStop() {
        return this.computeStartStop;
    }

    /**
     * Set the computeStartStop property: The list of compute start stop schedules to be applied.
     * 
     * @param computeStartStop the computeStartStop value to set.
     * @return the ComputeSchedules object itself.
     */
    public ComputeSchedules withComputeStartStop(List<ComputeStartStopSchedule> computeStartStop) {
        this.computeStartStop = computeStartStop;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (computeStartStop() != null) {
            computeStartStop().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("computeStartStop", this.computeStartStop,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeSchedules from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeSchedules if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeSchedules.
     */
    public static ComputeSchedules fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeSchedules deserializedComputeSchedules = new ComputeSchedules();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computeStartStop".equals(fieldName)) {
                    List<ComputeStartStopSchedule> computeStartStop
                        = reader.readArray(reader1 -> ComputeStartStopSchedule.fromJson(reader1));
                    deserializedComputeSchedules.computeStartStop = computeStartStop;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeSchedules;
        });
    }
}
