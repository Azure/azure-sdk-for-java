// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ScheduleBase model.
 */
@Fluent
public final class ScheduleBase implements JsonSerializable<ScheduleBase> {
    /*
     * A system assigned id for the schedule.
     */
    private String id;

    /*
     * The current deployment state of schedule.
     */
    private ScheduleProvisioningState provisioningStatus;

    /*
     * Is the schedule enabled or disabled?
     */
    private ScheduleStatus status;

    /**
     * Creates an instance of ScheduleBase class.
     */
    public ScheduleBase() {
    }

    /**
     * Get the id property: A system assigned id for the schedule.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: A system assigned id for the schedule.
     * 
     * @param id the id value to set.
     * @return the ScheduleBase object itself.
     */
    public ScheduleBase withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the provisioningStatus property: The current deployment state of schedule.
     * 
     * @return the provisioningStatus value.
     */
    public ScheduleProvisioningState provisioningStatus() {
        return this.provisioningStatus;
    }

    /**
     * Set the provisioningStatus property: The current deployment state of schedule.
     * 
     * @param provisioningStatus the provisioningStatus value to set.
     * @return the ScheduleBase object itself.
     */
    public ScheduleBase withProvisioningStatus(ScheduleProvisioningState provisioningStatus) {
        this.provisioningStatus = provisioningStatus;
        return this;
    }

    /**
     * Get the status property: Is the schedule enabled or disabled?.
     * 
     * @return the status value.
     */
    public ScheduleStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Is the schedule enabled or disabled?.
     * 
     * @param status the status value to set.
     * @return the ScheduleBase object itself.
     */
    public ScheduleBase withStatus(ScheduleStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("provisioningStatus",
            this.provisioningStatus == null ? null : this.provisioningStatus.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScheduleBase.
     */
    public static ScheduleBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleBase deserializedScheduleBase = new ScheduleBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedScheduleBase.id = reader.getString();
                } else if ("provisioningStatus".equals(fieldName)) {
                    deserializedScheduleBase.provisioningStatus
                        = ScheduleProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedScheduleBase.status = ScheduleStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduleBase;
        });
    }
}
