// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The FlavorData model.
 */
@Fluent
public final class FlavorData implements JsonSerializable<FlavorData> {
    /*
     * Model flavor-specific data.
     */
    private Map<String, String> data;

    /**
     * Creates an instance of FlavorData class.
     */
    public FlavorData() {
    }

    /**
     * Get the data property: Model flavor-specific data.
     * 
     * @return the data value.
     */
    public Map<String, String> data() {
        return this.data;
    }

    /**
     * Set the data property: Model flavor-specific data.
     * 
     * @param data the data value to set.
     * @return the FlavorData object itself.
     */
    public FlavorData withData(Map<String, String> data) {
        this.data = data;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("data", this.data, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FlavorData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FlavorData if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the FlavorData.
     */
    public static FlavorData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FlavorData deserializedFlavorData = new FlavorData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    Map<String, String> data = reader.readMap(reader1 -> reader1.getString());
                    deserializedFlavorData.data = data;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlavorData;
        });
    }
}
