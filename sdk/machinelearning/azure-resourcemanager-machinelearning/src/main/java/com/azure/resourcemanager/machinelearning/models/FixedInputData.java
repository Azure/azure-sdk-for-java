// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Fixed input data definition.
 */
@Fluent
public final class FixedInputData extends MonitoringInputDataBase {
    /*
     * [Required] Specifies the type of signal to monitor.
     */
    private MonitoringInputDataType inputDataType = MonitoringInputDataType.FIXED;

    /**
     * Creates an instance of FixedInputData class.
     */
    public FixedInputData() {
    }

    /**
     * Get the inputDataType property: [Required] Specifies the type of signal to monitor.
     * 
     * @return the inputDataType value.
     */
    @Override
    public MonitoringInputDataType inputDataType() {
        return this.inputDataType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FixedInputData withDataContext(String dataContext) {
        super.withDataContext(dataContext);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FixedInputData withJobInputType(JobInputType jobInputType) {
        super.withJobInputType(jobInputType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FixedInputData withUri(String uri) {
        super.withUri(uri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FixedInputData withColumns(Map<String, String> columns) {
        super.withColumns(columns);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobInputType", jobInputType() == null ? null : jobInputType().toString());
        jsonWriter.writeStringField("uri", uri());
        jsonWriter.writeStringField("dataContext", dataContext());
        jsonWriter.writeMapField("columns", columns(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("inputDataType", this.inputDataType == null ? null : this.inputDataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FixedInputData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FixedInputData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FixedInputData.
     */
    public static FixedInputData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FixedInputData deserializedFixedInputData = new FixedInputData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobInputType".equals(fieldName)) {
                    deserializedFixedInputData.withJobInputType(JobInputType.fromString(reader.getString()));
                } else if ("uri".equals(fieldName)) {
                    deserializedFixedInputData.withUri(reader.getString());
                } else if ("dataContext".equals(fieldName)) {
                    deserializedFixedInputData.withDataContext(reader.getString());
                } else if ("columns".equals(fieldName)) {
                    Map<String, String> columns = reader.readMap(reader1 -> reader1.getString());
                    deserializedFixedInputData.withColumns(columns);
                } else if ("inputDataType".equals(fieldName)) {
                    deserializedFixedInputData.inputDataType = MonitoringInputDataType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFixedInputData;
        });
    }
}
