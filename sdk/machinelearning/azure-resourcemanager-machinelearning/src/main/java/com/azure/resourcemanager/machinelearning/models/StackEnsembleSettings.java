// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Advances setting to customize StackEnsemble run. */
@Fluent
public final class StackEnsembleSettings {
    /*
     * Optional parameters to pass to the initializer of the meta-learner.
     */
    @JsonProperty(value = "stackMetaLearnerKWargs")
    private Object stackMetaLearnerKWargs;

    /*
     * Specifies the proportion of the training set (when choosing train and validation type of training) to be
     * reserved for training the meta-learner. Default value is 0.2.
     */
    @JsonProperty(value = "stackMetaLearnerTrainPercentage")
    private Double stackMetaLearnerTrainPercentage;

    /*
     * The meta-learner is a model trained on the output of the individual heterogeneous models.
     */
    @JsonProperty(value = "stackMetaLearnerType")
    private StackMetaLearnerType stackMetaLearnerType;

    /** Creates an instance of StackEnsembleSettings class. */
    public StackEnsembleSettings() {
    }

    /**
     * Get the stackMetaLearnerKWargs property: Optional parameters to pass to the initializer of the meta-learner.
     *
     * @return the stackMetaLearnerKWargs value.
     */
    public Object stackMetaLearnerKWargs() {
        return this.stackMetaLearnerKWargs;
    }

    /**
     * Set the stackMetaLearnerKWargs property: Optional parameters to pass to the initializer of the meta-learner.
     *
     * @param stackMetaLearnerKWargs the stackMetaLearnerKWargs value to set.
     * @return the StackEnsembleSettings object itself.
     */
    public StackEnsembleSettings withStackMetaLearnerKWargs(Object stackMetaLearnerKWargs) {
        this.stackMetaLearnerKWargs = stackMetaLearnerKWargs;
        return this;
    }

    /**
     * Get the stackMetaLearnerTrainPercentage property: Specifies the proportion of the training set (when choosing
     * train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
     *
     * @return the stackMetaLearnerTrainPercentage value.
     */
    public Double stackMetaLearnerTrainPercentage() {
        return this.stackMetaLearnerTrainPercentage;
    }

    /**
     * Set the stackMetaLearnerTrainPercentage property: Specifies the proportion of the training set (when choosing
     * train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
     *
     * @param stackMetaLearnerTrainPercentage the stackMetaLearnerTrainPercentage value to set.
     * @return the StackEnsembleSettings object itself.
     */
    public StackEnsembleSettings withStackMetaLearnerTrainPercentage(Double stackMetaLearnerTrainPercentage) {
        this.stackMetaLearnerTrainPercentage = stackMetaLearnerTrainPercentage;
        return this;
    }

    /**
     * Get the stackMetaLearnerType property: The meta-learner is a model trained on the output of the individual
     * heterogeneous models.
     *
     * @return the stackMetaLearnerType value.
     */
    public StackMetaLearnerType stackMetaLearnerType() {
        return this.stackMetaLearnerType;
    }

    /**
     * Set the stackMetaLearnerType property: The meta-learner is a model trained on the output of the individual
     * heterogeneous models.
     *
     * @param stackMetaLearnerType the stackMetaLearnerType value to set.
     * @return the StackEnsembleSettings object itself.
     */
    public StackEnsembleSettings withStackMetaLearnerType(StackMetaLearnerType stackMetaLearnerType) {
        this.stackMetaLearnerType = stackMetaLearnerType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
