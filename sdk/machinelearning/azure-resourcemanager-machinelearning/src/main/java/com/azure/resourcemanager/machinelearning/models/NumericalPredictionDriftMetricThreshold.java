// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NumericalPredictionDriftMetricThreshold model.
 */
@Fluent
public final class NumericalPredictionDriftMetricThreshold extends PredictionDriftMetricThresholdBase {
    /*
     * [Required] Specifies the data type of the metric threshold.
     */
    private MonitoringFeatureDataType dataType = MonitoringFeatureDataType.NUMERICAL;

    /*
     * [Required] The numerical prediction drift metric to calculate.
     */
    private NumericalPredictionDriftMetric metric;

    /**
     * Creates an instance of NumericalPredictionDriftMetricThreshold class.
     */
    public NumericalPredictionDriftMetricThreshold() {
    }

    /**
     * Get the dataType property: [Required] Specifies the data type of the metric threshold.
     * 
     * @return the dataType value.
     */
    @Override
    public MonitoringFeatureDataType dataType() {
        return this.dataType;
    }

    /**
     * Get the metric property: [Required] The numerical prediction drift metric to calculate.
     * 
     * @return the metric value.
     */
    public NumericalPredictionDriftMetric metric() {
        return this.metric;
    }

    /**
     * Set the metric property: [Required] The numerical prediction drift metric to calculate.
     * 
     * @param metric the metric value to set.
     * @return the NumericalPredictionDriftMetricThreshold object itself.
     */
    public NumericalPredictionDriftMetricThreshold withMetric(NumericalPredictionDriftMetric metric) {
        this.metric = metric;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NumericalPredictionDriftMetricThreshold withThreshold(MonitoringThreshold threshold) {
        super.withThreshold(threshold);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (metric() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metric in model NumericalPredictionDriftMetricThreshold"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NumericalPredictionDriftMetricThreshold.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("threshold", threshold());
        jsonWriter.writeStringField("metric", this.metric == null ? null : this.metric.toString());
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NumericalPredictionDriftMetricThreshold from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NumericalPredictionDriftMetricThreshold if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NumericalPredictionDriftMetricThreshold.
     */
    public static NumericalPredictionDriftMetricThreshold fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NumericalPredictionDriftMetricThreshold deserializedNumericalPredictionDriftMetricThreshold
                = new NumericalPredictionDriftMetricThreshold();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("threshold".equals(fieldName)) {
                    deserializedNumericalPredictionDriftMetricThreshold
                        .withThreshold(MonitoringThreshold.fromJson(reader));
                } else if ("metric".equals(fieldName)) {
                    deserializedNumericalPredictionDriftMetricThreshold.metric
                        = NumericalPredictionDriftMetric.fromString(reader.getString());
                } else if ("dataType".equals(fieldName)) {
                    deserializedNumericalPredictionDriftMetricThreshold.dataType
                        = MonitoringFeatureDataType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNumericalPredictionDriftMetricThreshold;
        });
    }
}
