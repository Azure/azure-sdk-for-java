// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.ComponentVersionsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentVersionInner;
import com.azure.resourcemanager.machinelearning.models.ComponentVersion;
import com.azure.resourcemanager.machinelearning.models.ComponentVersions;
import com.azure.resourcemanager.machinelearning.models.DestinationAsset;
import com.azure.resourcemanager.machinelearning.models.ListViewType;

public final class ComponentVersionsImpl implements ComponentVersions {
    private static final ClientLogger LOGGER = new ClientLogger(ComponentVersionsImpl.class);

    private final ComponentVersionsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public ComponentVersionsImpl(ComponentVersionsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ComponentVersion> list(String resourceGroupName, String workspaceName, String name) {
        PagedIterable<ComponentVersionInner> inner = this.serviceClient().list(resourceGroupName, workspaceName, name);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ComponentVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<ComponentVersion> list(String resourceGroupName, String workspaceName, String name,
        String orderBy, Integer top, String skip, ListViewType listViewType, Context context) {
        PagedIterable<ComponentVersionInner> inner = this.serviceClient()
            .list(resourceGroupName, workspaceName, name, orderBy, top, skip, listViewType, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ComponentVersionImpl(inner1, this.manager()));
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String name,
        String version, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, name, version, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String name, String version) {
        this.serviceClient().delete(resourceGroupName, workspaceName, name, version);
    }

    public Response<ComponentVersion> getWithResponse(String resourceGroupName, String workspaceName, String name,
        String version, Context context) {
        Response<ComponentVersionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, name, version, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ComponentVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ComponentVersion get(String resourceGroupName, String workspaceName, String name, String version) {
        ComponentVersionInner inner = this.serviceClient().get(resourceGroupName, workspaceName, name, version);
        if (inner != null) {
            return new ComponentVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ComponentVersion> createOrUpdateWithResponse(String resourceGroupName, String workspaceName,
        String name, String version, ComponentVersionInner body, Context context) {
        Response<ComponentVersionInner> inner = this.serviceClient()
            .createOrUpdateWithResponse(resourceGroupName, workspaceName, name, version, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ComponentVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ComponentVersion createOrUpdate(String resourceGroupName, String workspaceName, String name, String version,
        ComponentVersionInner body) {
        ComponentVersionInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, workspaceName, name, version, body);
        if (inner != null) {
            return new ComponentVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void publish(String resourceGroupName, String workspaceName, String name, String version,
        DestinationAsset body) {
        this.serviceClient().publish(resourceGroupName, workspaceName, name, version, body);
    }

    public void publish(String resourceGroupName, String workspaceName, String name, String version,
        DestinationAsset body, Context context) {
        this.serviceClient().publish(resourceGroupName, workspaceName, name, version, body, context);
    }

    private ComponentVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }
}
