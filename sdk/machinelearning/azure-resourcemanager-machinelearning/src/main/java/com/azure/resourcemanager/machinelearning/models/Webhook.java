// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Webhook base.
 */
@Fluent
public class Webhook implements JsonSerializable<Webhook> {
    /*
     * [Required] Specifies the type of service to send a callback
     */
    private WebhookType webhookType = WebhookType.fromString("Webhook");

    /*
     * Send callback on a specified notification event
     */
    private String eventType;

    /**
     * Creates an instance of Webhook class.
     */
    public Webhook() {
    }

    /**
     * Get the webhookType property: [Required] Specifies the type of service to send a callback.
     * 
     * @return the webhookType value.
     */
    public WebhookType webhookType() {
        return this.webhookType;
    }

    /**
     * Get the eventType property: Send callback on a specified notification event.
     * 
     * @return the eventType value.
     */
    public String eventType() {
        return this.eventType;
    }

    /**
     * Set the eventType property: Send callback on a specified notification event.
     * 
     * @param eventType the eventType value to set.
     * @return the Webhook object itself.
     */
    public Webhook withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("webhookType", this.webhookType == null ? null : this.webhookType.toString());
        jsonWriter.writeStringField("eventType", this.eventType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Webhook from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Webhook if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Webhook.
     */
    public static Webhook fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("webhookType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureDevOps".equals(discriminatorValue)) {
                    return AzureDevOpsWebhook.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static Webhook fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Webhook deserializedWebhook = new Webhook();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webhookType".equals(fieldName)) {
                    deserializedWebhook.webhookType = WebhookType.fromString(reader.getString());
                } else if ("eventType".equals(fieldName)) {
                    deserializedWebhook.eventType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebhook;
        });
    }
}
