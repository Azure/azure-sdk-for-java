// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Webhook details specific for Azure DevOps.
 */
@Fluent
public final class AzureDevOpsWebhook extends Webhook {
    /*
     * [Required] Specifies the type of service to send a callback
     */
    private WebhookType webhookType = WebhookType.AZURE_DEV_OPS;

    /**
     * Creates an instance of AzureDevOpsWebhook class.
     */
    public AzureDevOpsWebhook() {
    }

    /**
     * Get the webhookType property: [Required] Specifies the type of service to send a callback.
     * 
     * @return the webhookType value.
     */
    @Override
    public WebhookType webhookType() {
        return this.webhookType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureDevOpsWebhook withEventType(String eventType) {
        super.withEventType(eventType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventType", eventType());
        jsonWriter.writeStringField("webhookType", this.webhookType == null ? null : this.webhookType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureDevOpsWebhook from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureDevOpsWebhook if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureDevOpsWebhook.
     */
    public static AzureDevOpsWebhook fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureDevOpsWebhook deserializedAzureDevOpsWebhook = new AzureDevOpsWebhook();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventType".equals(fieldName)) {
                    deserializedAzureDevOpsWebhook.withEventType(reader.getString());
                } else if ("webhookType".equals(fieldName)) {
                    deserializedAzureDevOpsWebhook.webhookType = WebhookType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureDevOpsWebhook;
        });
    }
}
