// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The DiagnoseRequestProperties model.
 */
@Fluent
public final class DiagnoseRequestProperties implements JsonSerializable<DiagnoseRequestProperties> {
    /*
     * Setting for diagnosing user defined routing
     */
    private Map<String, Object> udr;

    /*
     * Setting for diagnosing network security group
     */
    private Map<String, Object> nsg;

    /*
     * Setting for diagnosing resource lock
     */
    private Map<String, Object> resourceLock;

    /*
     * Setting for diagnosing dns resolution
     */
    private Map<String, Object> dnsResolution;

    /*
     * Setting for diagnosing dependent storage account
     */
    private Map<String, Object> storageAccount;

    /*
     * Setting for diagnosing dependent key vault
     */
    private Map<String, Object> keyVault;

    /*
     * Setting for diagnosing dependent container registry
     */
    private Map<String, Object> containerRegistry;

    /*
     * Setting for diagnosing dependent application insights
     */
    private Map<String, Object> applicationInsights;

    /*
     * Setting for diagnosing unclassified category of problems
     */
    private Map<String, Object> others;

    /**
     * Creates an instance of DiagnoseRequestProperties class.
     */
    public DiagnoseRequestProperties() {
    }

    /**
     * Get the udr property: Setting for diagnosing user defined routing.
     * 
     * @return the udr value.
     */
    public Map<String, Object> udr() {
        return this.udr;
    }

    /**
     * Set the udr property: Setting for diagnosing user defined routing.
     * 
     * @param udr the udr value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withUdr(Map<String, Object> udr) {
        this.udr = udr;
        return this;
    }

    /**
     * Get the nsg property: Setting for diagnosing network security group.
     * 
     * @return the nsg value.
     */
    public Map<String, Object> nsg() {
        return this.nsg;
    }

    /**
     * Set the nsg property: Setting for diagnosing network security group.
     * 
     * @param nsg the nsg value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withNsg(Map<String, Object> nsg) {
        this.nsg = nsg;
        return this;
    }

    /**
     * Get the resourceLock property: Setting for diagnosing resource lock.
     * 
     * @return the resourceLock value.
     */
    public Map<String, Object> resourceLock() {
        return this.resourceLock;
    }

    /**
     * Set the resourceLock property: Setting for diagnosing resource lock.
     * 
     * @param resourceLock the resourceLock value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withResourceLock(Map<String, Object> resourceLock) {
        this.resourceLock = resourceLock;
        return this;
    }

    /**
     * Get the dnsResolution property: Setting for diagnosing dns resolution.
     * 
     * @return the dnsResolution value.
     */
    public Map<String, Object> dnsResolution() {
        return this.dnsResolution;
    }

    /**
     * Set the dnsResolution property: Setting for diagnosing dns resolution.
     * 
     * @param dnsResolution the dnsResolution value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withDnsResolution(Map<String, Object> dnsResolution) {
        this.dnsResolution = dnsResolution;
        return this;
    }

    /**
     * Get the storageAccount property: Setting for diagnosing dependent storage account.
     * 
     * @return the storageAccount value.
     */
    public Map<String, Object> storageAccount() {
        return this.storageAccount;
    }

    /**
     * Set the storageAccount property: Setting for diagnosing dependent storage account.
     * 
     * @param storageAccount the storageAccount value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withStorageAccount(Map<String, Object> storageAccount) {
        this.storageAccount = storageAccount;
        return this;
    }

    /**
     * Get the keyVault property: Setting for diagnosing dependent key vault.
     * 
     * @return the keyVault value.
     */
    public Map<String, Object> keyVault() {
        return this.keyVault;
    }

    /**
     * Set the keyVault property: Setting for diagnosing dependent key vault.
     * 
     * @param keyVault the keyVault value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withKeyVault(Map<String, Object> keyVault) {
        this.keyVault = keyVault;
        return this;
    }

    /**
     * Get the containerRegistry property: Setting for diagnosing dependent container registry.
     * 
     * @return the containerRegistry value.
     */
    public Map<String, Object> containerRegistry() {
        return this.containerRegistry;
    }

    /**
     * Set the containerRegistry property: Setting for diagnosing dependent container registry.
     * 
     * @param containerRegistry the containerRegistry value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withContainerRegistry(Map<String, Object> containerRegistry) {
        this.containerRegistry = containerRegistry;
        return this;
    }

    /**
     * Get the applicationInsights property: Setting for diagnosing dependent application insights.
     * 
     * @return the applicationInsights value.
     */
    public Map<String, Object> applicationInsights() {
        return this.applicationInsights;
    }

    /**
     * Set the applicationInsights property: Setting for diagnosing dependent application insights.
     * 
     * @param applicationInsights the applicationInsights value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withApplicationInsights(Map<String, Object> applicationInsights) {
        this.applicationInsights = applicationInsights;
        return this;
    }

    /**
     * Get the others property: Setting for diagnosing unclassified category of problems.
     * 
     * @return the others value.
     */
    public Map<String, Object> others() {
        return this.others;
    }

    /**
     * Set the others property: Setting for diagnosing unclassified category of problems.
     * 
     * @param others the others value to set.
     * @return the DiagnoseRequestProperties object itself.
     */
    public DiagnoseRequestProperties withOthers(Map<String, Object> others) {
        this.others = others;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("udr", this.udr, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("nsg", this.nsg, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("resourceLock", this.resourceLock, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("dnsResolution", this.dnsResolution,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("storageAccount", this.storageAccount,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("keyVault", this.keyVault, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("containerRegistry", this.containerRegistry,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("applicationInsights", this.applicationInsights,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("others", this.others, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnoseRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnoseRequestProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiagnoseRequestProperties.
     */
    public static DiagnoseRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnoseRequestProperties deserializedDiagnoseRequestProperties = new DiagnoseRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("udr".equals(fieldName)) {
                    Map<String, Object> udr = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.udr = udr;
                } else if ("nsg".equals(fieldName)) {
                    Map<String, Object> nsg = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.nsg = nsg;
                } else if ("resourceLock".equals(fieldName)) {
                    Map<String, Object> resourceLock = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.resourceLock = resourceLock;
                } else if ("dnsResolution".equals(fieldName)) {
                    Map<String, Object> dnsResolution = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.dnsResolution = dnsResolution;
                } else if ("storageAccount".equals(fieldName)) {
                    Map<String, Object> storageAccount = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.storageAccount = storageAccount;
                } else if ("keyVault".equals(fieldName)) {
                    Map<String, Object> keyVault = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.keyVault = keyVault;
                } else if ("containerRegistry".equals(fieldName)) {
                    Map<String, Object> containerRegistry = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.containerRegistry = containerRegistry;
                } else if ("applicationInsights".equals(fieldName)) {
                    Map<String, Object> applicationInsights = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.applicationInsights = applicationInsights;
                } else if ("others".equals(fieldName)) {
                    Map<String, Object> others = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDiagnoseRequestProperties.others = others;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnoseRequestProperties;
        });
    }
}
