// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DTO object representing index column.
 */
@Fluent
public final class IndexColumn implements JsonSerializable<IndexColumn> {
    /*
     * Specifies the data type
     */
    private FeatureDataType dataType;

    /*
     * Specifies the column name
     */
    private String columnName;

    /**
     * Creates an instance of IndexColumn class.
     */
    public IndexColumn() {
    }

    /**
     * Get the dataType property: Specifies the data type.
     * 
     * @return the dataType value.
     */
    public FeatureDataType dataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: Specifies the data type.
     * 
     * @param dataType the dataType value to set.
     * @return the IndexColumn object itself.
     */
    public IndexColumn withDataType(FeatureDataType dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Get the columnName property: Specifies the column name.
     * 
     * @return the columnName value.
     */
    public String columnName() {
        return this.columnName;
    }

    /**
     * Set the columnName property: Specifies the column name.
     * 
     * @param columnName the columnName value to set.
     * @return the IndexColumn object itself.
     */
    public IndexColumn withColumnName(String columnName) {
        this.columnName = columnName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        jsonWriter.writeStringField("columnName", this.columnName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexColumn from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexColumn if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IndexColumn.
     */
    public static IndexColumn fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexColumn deserializedIndexColumn = new IndexColumn();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataType".equals(fieldName)) {
                    deserializedIndexColumn.dataType = FeatureDataType.fromString(reader.getString());
                } else if ("columnName".equals(fieldName)) {
                    deserializedIndexColumn.columnName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexColumn;
        });
    }
}
