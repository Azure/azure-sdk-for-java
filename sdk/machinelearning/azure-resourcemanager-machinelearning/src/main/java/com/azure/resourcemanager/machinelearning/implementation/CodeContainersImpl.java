// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.CodeContainersClient;
import com.azure.resourcemanager.machinelearning.fluent.models.CodeContainerInner;
import com.azure.resourcemanager.machinelearning.models.CodeContainer;
import com.azure.resourcemanager.machinelearning.models.CodeContainers;

public final class CodeContainersImpl implements CodeContainers {
    private static final ClientLogger LOGGER = new ClientLogger(CodeContainersImpl.class);

    private final CodeContainersClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public CodeContainersImpl(CodeContainersClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CodeContainer> list(String resourceGroupName, String workspaceName) {
        PagedIterable<CodeContainerInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CodeContainerImpl(inner1, this.manager()));
    }

    public PagedIterable<CodeContainer> list(String resourceGroupName, String workspaceName, String skip,
        Context context) {
        PagedIterable<CodeContainerInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, skip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CodeContainerImpl(inner1, this.manager()));
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String name,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, name, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String name) {
        this.serviceClient().delete(resourceGroupName, workspaceName, name);
    }

    public Response<CodeContainer> getWithResponse(String resourceGroupName, String workspaceName, String name,
        Context context) {
        Response<CodeContainerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CodeContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CodeContainer get(String resourceGroupName, String workspaceName, String name) {
        CodeContainerInner inner = this.serviceClient().get(resourceGroupName, workspaceName, name);
        if (inner != null) {
            return new CodeContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CodeContainer> createOrUpdateWithResponse(String resourceGroupName, String workspaceName,
        String name, CodeContainerInner body, Context context) {
        Response<CodeContainerInner> inner
            = this.serviceClient().createOrUpdateWithResponse(resourceGroupName, workspaceName, name, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CodeContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CodeContainer createOrUpdate(String resourceGroupName, String workspaceName, String name,
        CodeContainerInner body) {
        CodeContainerInner inner = this.serviceClient().createOrUpdate(resourceGroupName, workspaceName, name, body);
        if (inner != null) {
            return new CodeContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private CodeContainersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }
}
