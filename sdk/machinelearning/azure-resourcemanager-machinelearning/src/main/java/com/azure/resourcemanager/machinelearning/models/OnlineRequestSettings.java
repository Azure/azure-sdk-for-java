// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Online deployment scoring requests configuration.
 */
@Fluent
public final class OnlineRequestSettings implements JsonSerializable<OnlineRequestSettings> {
    /*
     * (Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601
     * format.
     * Defaults to 500ms.
     * (Now increase `request_timeout_ms` to account for any networking/queue delays)
     */
    private Duration maxQueueWait;

    /*
     * The scoring timeout in ISO 8601 format.
     * Defaults to 5000ms.
     */
    private Duration requestTimeout;

    /*
     * The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
     */
    private Integer maxConcurrentRequestsPerInstance;

    /**
     * Creates an instance of OnlineRequestSettings class.
     */
    public OnlineRequestSettings() {
    }

    /**
     * Get the maxQueueWait property: (Deprecated for Managed Online Endpoints) The maximum amount of time a request
     * will stay in the queue in ISO 8601 format.
     * Defaults to 500ms.
     * (Now increase `request_timeout_ms` to account for any networking/queue delays).
     * 
     * @return the maxQueueWait value.
     */
    public Duration maxQueueWait() {
        return this.maxQueueWait;
    }

    /**
     * Set the maxQueueWait property: (Deprecated for Managed Online Endpoints) The maximum amount of time a request
     * will stay in the queue in ISO 8601 format.
     * Defaults to 500ms.
     * (Now increase `request_timeout_ms` to account for any networking/queue delays).
     * 
     * @param maxQueueWait the maxQueueWait value to set.
     * @return the OnlineRequestSettings object itself.
     */
    public OnlineRequestSettings withMaxQueueWait(Duration maxQueueWait) {
        this.maxQueueWait = maxQueueWait;
        return this;
    }

    /**
     * Get the requestTimeout property: The scoring timeout in ISO 8601 format.
     * Defaults to 5000ms.
     * 
     * @return the requestTimeout value.
     */
    public Duration requestTimeout() {
        return this.requestTimeout;
    }

    /**
     * Set the requestTimeout property: The scoring timeout in ISO 8601 format.
     * Defaults to 5000ms.
     * 
     * @param requestTimeout the requestTimeout value to set.
     * @return the OnlineRequestSettings object itself.
     */
    public OnlineRequestSettings withRequestTimeout(Duration requestTimeout) {
        this.requestTimeout = requestTimeout;
        return this;
    }

    /**
     * Get the maxConcurrentRequestsPerInstance property: The number of maximum concurrent requests per node allowed per
     * deployment. Defaults to 1.
     * 
     * @return the maxConcurrentRequestsPerInstance value.
     */
    public Integer maxConcurrentRequestsPerInstance() {
        return this.maxConcurrentRequestsPerInstance;
    }

    /**
     * Set the maxConcurrentRequestsPerInstance property: The number of maximum concurrent requests per node allowed per
     * deployment. Defaults to 1.
     * 
     * @param maxConcurrentRequestsPerInstance the maxConcurrentRequestsPerInstance value to set.
     * @return the OnlineRequestSettings object itself.
     */
    public OnlineRequestSettings withMaxConcurrentRequestsPerInstance(Integer maxConcurrentRequestsPerInstance) {
        this.maxConcurrentRequestsPerInstance = maxConcurrentRequestsPerInstance;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("maxQueueWait", CoreUtils.durationToStringWithDays(this.maxQueueWait));
        jsonWriter.writeStringField("requestTimeout", CoreUtils.durationToStringWithDays(this.requestTimeout));
        jsonWriter.writeNumberField("maxConcurrentRequestsPerInstance", this.maxConcurrentRequestsPerInstance);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnlineRequestSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnlineRequestSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnlineRequestSettings.
     */
    public static OnlineRequestSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnlineRequestSettings deserializedOnlineRequestSettings = new OnlineRequestSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxQueueWait".equals(fieldName)) {
                    deserializedOnlineRequestSettings.maxQueueWait
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("requestTimeout".equals(fieldName)) {
                    deserializedOnlineRequestSettings.requestTimeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("maxConcurrentRequestsPerInstance".equals(fieldName)) {
                    deserializedOnlineRequestSettings.maxConcurrentRequestsPerInstance
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnlineRequestSettings;
        });
    }
}
