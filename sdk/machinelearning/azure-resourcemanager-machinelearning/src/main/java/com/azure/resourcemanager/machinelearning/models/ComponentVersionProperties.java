// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of a component version: defines resources that span component types.
 */
@Fluent
public final class ComponentVersionProperties extends AssetBase {
    /*
     * Defines Component definition details.
     * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
     */
    private Object componentSpec;

    /*
     * Provisioning state for the component version.
     */
    private AssetProvisioningState provisioningState;

    /**
     * Creates an instance of ComponentVersionProperties class.
     */
    public ComponentVersionProperties() {
    }

    /**
     * Get the componentSpec property: Defines Component definition details.
     * &lt;see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" /&gt;.
     * 
     * @return the componentSpec value.
     */
    public Object componentSpec() {
        return this.componentSpec;
    }

    /**
     * Set the componentSpec property: Defines Component definition details.
     * &lt;see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" /&gt;.
     * 
     * @param componentSpec the componentSpec value to set.
     * @return the ComponentVersionProperties object itself.
     */
    public ComponentVersionProperties withComponentSpec(Object componentSpec) {
        this.componentSpec = componentSpec;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the component version.
     * 
     * @return the provisioningState value.
     */
    public AssetProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComponentVersionProperties withIsArchived(Boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComponentVersionProperties withIsAnonymous(Boolean isAnonymous) {
        super.withIsAnonymous(isAnonymous);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComponentVersionProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComponentVersionProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComponentVersionProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isArchived", isArchived());
        jsonWriter.writeBooleanField("isAnonymous", isAnonymous());
        jsonWriter.writeUntypedField("componentSpec", this.componentSpec);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComponentVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComponentVersionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComponentVersionProperties.
     */
    public static ComponentVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComponentVersionProperties deserializedComponentVersionProperties = new ComponentVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedComponentVersionProperties.withDescription(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedComponentVersionProperties.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedComponentVersionProperties.withProperties(properties);
                } else if ("isArchived".equals(fieldName)) {
                    deserializedComponentVersionProperties.withIsArchived(reader.getNullable(JsonReader::getBoolean));
                } else if ("isAnonymous".equals(fieldName)) {
                    deserializedComponentVersionProperties.withIsAnonymous(reader.getNullable(JsonReader::getBoolean));
                } else if ("componentSpec".equals(fieldName)) {
                    deserializedComponentVersionProperties.componentSpec = reader.readUntyped();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedComponentVersionProperties.provisioningState
                        = AssetProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComponentVersionProperties;
        });
    }
}
