// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * DTO object representing feature.
 */
@Fluent
public final class FeatureProperties extends ResourceBase {
    /*
     * Specifies name
     */
    private String featureName;

    /*
     * Specifies type
     */
    private FeatureDataType dataType;

    /**
     * Creates an instance of FeatureProperties class.
     */
    public FeatureProperties() {
    }

    /**
     * Get the featureName property: Specifies name.
     * 
     * @return the featureName value.
     */
    public String featureName() {
        return this.featureName;
    }

    /**
     * Set the featureName property: Specifies name.
     * 
     * @param featureName the featureName value to set.
     * @return the FeatureProperties object itself.
     */
    public FeatureProperties withFeatureName(String featureName) {
        this.featureName = featureName;
        return this;
    }

    /**
     * Get the dataType property: Specifies type.
     * 
     * @return the dataType value.
     */
    public FeatureDataType dataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: Specifies type.
     * 
     * @param dataType the dataType value to set.
     * @return the FeatureProperties object itself.
     */
    public FeatureProperties withDataType(FeatureDataType dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeatureProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeatureProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeatureProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("featureName", this.featureName);
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeatureProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeatureProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FeatureProperties.
     */
    public static FeatureProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeatureProperties deserializedFeatureProperties = new FeatureProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedFeatureProperties.withDescription(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedFeatureProperties.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedFeatureProperties.withProperties(properties);
                } else if ("featureName".equals(fieldName)) {
                    deserializedFeatureProperties.featureName = reader.getString();
                } else if ("dataType".equals(fieldName)) {
                    deserializedFeatureProperties.dataType = FeatureDataType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeatureProperties;
        });
    }
}
