// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Specifies the custom service configuration.
 */
@Fluent
public final class CustomService implements JsonSerializable<CustomService> {
    /*
     * Name of the Custom Service
     */
    private String name;

    /*
     * Describes the Image Specifications
     */
    private Image image;

    /*
     * Environment Variable for the container
     */
    private Map<String, EnvironmentVariable> environmentVariables;

    /*
     * Describes the docker settings for the image
     */
    private Docker docker;

    /*
     * Configuring the endpoints for the container
     */
    private List<Endpoint> endpoints;

    /*
     * Configuring the volumes for the container
     */
    private List<VolumeDefinition> volumes;

    /*
     * Specifies the custom service configuration
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of CustomService class.
     */
    public CustomService() {
    }

    /**
     * Get the name property: Name of the Custom Service.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the Custom Service.
     * 
     * @param name the name value to set.
     * @return the CustomService object itself.
     */
    public CustomService withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the image property: Describes the Image Specifications.
     * 
     * @return the image value.
     */
    public Image image() {
        return this.image;
    }

    /**
     * Set the image property: Describes the Image Specifications.
     * 
     * @param image the image value to set.
     * @return the CustomService object itself.
     */
    public CustomService withImage(Image image) {
        this.image = image;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment Variable for the container.
     * 
     * @return the environmentVariables value.
     */
    public Map<String, EnvironmentVariable> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment Variable for the container.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the CustomService object itself.
     */
    public CustomService withEnvironmentVariables(Map<String, EnvironmentVariable> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the docker property: Describes the docker settings for the image.
     * 
     * @return the docker value.
     */
    public Docker docker() {
        return this.docker;
    }

    /**
     * Set the docker property: Describes the docker settings for the image.
     * 
     * @param docker the docker value to set.
     * @return the CustomService object itself.
     */
    public CustomService withDocker(Docker docker) {
        this.docker = docker;
        return this;
    }

    /**
     * Get the endpoints property: Configuring the endpoints for the container.
     * 
     * @return the endpoints value.
     */
    public List<Endpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Configuring the endpoints for the container.
     * 
     * @param endpoints the endpoints value to set.
     * @return the CustomService object itself.
     */
    public CustomService withEndpoints(List<Endpoint> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the volumes property: Configuring the volumes for the container.
     * 
     * @return the volumes value.
     */
    public List<VolumeDefinition> volumes() {
        return this.volumes;
    }

    /**
     * Set the volumes property: Configuring the volumes for the container.
     * 
     * @param volumes the volumes value to set.
     * @return the CustomService object itself.
     */
    public CustomService withVolumes(List<VolumeDefinition> volumes) {
        this.volumes = volumes;
        return this;
    }

    /**
     * Get the additionalProperties property: Specifies the custom service configuration.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Specifies the custom service configuration.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the CustomService object itself.
     */
    public CustomService withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (image() != null) {
            image().validate();
        }
        if (environmentVariables() != null) {
            environmentVariables().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (docker() != null) {
            docker().validate();
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
        if (volumes() != null) {
            volumes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("image", this.image);
        jsonWriter.writeMapField("environmentVariables", this.environmentVariables,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("docker", this.docker);
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("volumes", this.volumes, (writer, element) -> writer.writeJson(element));
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomService if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomService.
     */
    public static CustomService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomService deserializedCustomService = new CustomService();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCustomService.name = reader.getString();
                } else if ("image".equals(fieldName)) {
                    deserializedCustomService.image = Image.fromJson(reader);
                } else if ("environmentVariables".equals(fieldName)) {
                    Map<String, EnvironmentVariable> environmentVariables
                        = reader.readMap(reader1 -> EnvironmentVariable.fromJson(reader1));
                    deserializedCustomService.environmentVariables = environmentVariables;
                } else if ("docker".equals(fieldName)) {
                    deserializedCustomService.docker = Docker.fromJson(reader);
                } else if ("endpoints".equals(fieldName)) {
                    List<Endpoint> endpoints = reader.readArray(reader1 -> Endpoint.fromJson(reader1));
                    deserializedCustomService.endpoints = endpoints;
                } else if ("volumes".equals(fieldName)) {
                    List<VolumeDefinition> volumes = reader.readArray(reader1 -> VolumeDefinition.fromJson(reader1));
                    deserializedCustomService.volumes = volumes;
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedCustomService.additionalProperties = additionalProperties;

            return deserializedCustomService;
        });
    }
}
