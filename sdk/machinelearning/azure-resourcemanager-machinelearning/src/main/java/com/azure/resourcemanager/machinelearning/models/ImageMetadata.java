// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returns metadata about the operating system image for this compute instance.
 */
@Fluent
public final class ImageMetadata implements JsonSerializable<ImageMetadata> {
    /*
     * Specifies the current operating system image version this compute instance is running on.
     */
    private String currentImageVersion;

    /*
     * Specifies the latest available operating system image version.
     */
    private String latestImageVersion;

    /*
     * Specifies whether this compute instance is running on the latest operating system image.
     */
    private Boolean isLatestOsImageVersion;

    /**
     * Creates an instance of ImageMetadata class.
     */
    public ImageMetadata() {
    }

    /**
     * Get the currentImageVersion property: Specifies the current operating system image version this compute instance
     * is running on.
     * 
     * @return the currentImageVersion value.
     */
    public String currentImageVersion() {
        return this.currentImageVersion;
    }

    /**
     * Set the currentImageVersion property: Specifies the current operating system image version this compute instance
     * is running on.
     * 
     * @param currentImageVersion the currentImageVersion value to set.
     * @return the ImageMetadata object itself.
     */
    public ImageMetadata withCurrentImageVersion(String currentImageVersion) {
        this.currentImageVersion = currentImageVersion;
        return this;
    }

    /**
     * Get the latestImageVersion property: Specifies the latest available operating system image version.
     * 
     * @return the latestImageVersion value.
     */
    public String latestImageVersion() {
        return this.latestImageVersion;
    }

    /**
     * Set the latestImageVersion property: Specifies the latest available operating system image version.
     * 
     * @param latestImageVersion the latestImageVersion value to set.
     * @return the ImageMetadata object itself.
     */
    public ImageMetadata withLatestImageVersion(String latestImageVersion) {
        this.latestImageVersion = latestImageVersion;
        return this;
    }

    /**
     * Get the isLatestOsImageVersion property: Specifies whether this compute instance is running on the latest
     * operating system image.
     * 
     * @return the isLatestOsImageVersion value.
     */
    public Boolean isLatestOsImageVersion() {
        return this.isLatestOsImageVersion;
    }

    /**
     * Set the isLatestOsImageVersion property: Specifies whether this compute instance is running on the latest
     * operating system image.
     * 
     * @param isLatestOsImageVersion the isLatestOsImageVersion value to set.
     * @return the ImageMetadata object itself.
     */
    public ImageMetadata withIsLatestOsImageVersion(Boolean isLatestOsImageVersion) {
        this.isLatestOsImageVersion = isLatestOsImageVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("currentImageVersion", this.currentImageVersion);
        jsonWriter.writeStringField("latestImageVersion", this.latestImageVersion);
        jsonWriter.writeBooleanField("isLatestOsImageVersion", this.isLatestOsImageVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageMetadata.
     */
    public static ImageMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageMetadata deserializedImageMetadata = new ImageMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("currentImageVersion".equals(fieldName)) {
                    deserializedImageMetadata.currentImageVersion = reader.getString();
                } else if ("latestImageVersion".equals(fieldName)) {
                    deserializedImageMetadata.latestImageVersion = reader.getString();
                } else if ("isLatestOsImageVersion".equals(fieldName)) {
                    deserializedImageMetadata.isLatestOsImageVersion = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageMetadata;
        });
    }
}
