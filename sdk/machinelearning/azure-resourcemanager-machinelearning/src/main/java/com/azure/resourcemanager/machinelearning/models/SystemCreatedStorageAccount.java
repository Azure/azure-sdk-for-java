// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SystemCreatedStorageAccount model.
 */
@Fluent
public final class SystemCreatedStorageAccount implements JsonSerializable<SystemCreatedStorageAccount> {
    /*
     * Public blob access allowed
     */
    private Boolean allowBlobPublicAccess;

    /*
     * This is populated once the storage account is created.
     */
    private ArmResourceId armResourceId;

    /*
     * HNS enabled for storage account
     */
    private Boolean storageAccountHnsEnabled;

    /*
     * Name of the storage account
     */
    private String storageAccountName;

    /*
     * Allowed values:
     * "Standard_LRS",
     * "Standard_GRS",
     * "Standard_RAGRS",
     * "Standard_ZRS",
     * "Standard_GZRS",
     * "Standard_RAGZRS",
     * "Premium_LRS",
     * "Premium_ZRS"
     */
    private String storageAccountType;

    /**
     * Creates an instance of SystemCreatedStorageAccount class.
     */
    public SystemCreatedStorageAccount() {
    }

    /**
     * Get the allowBlobPublicAccess property: Public blob access allowed.
     * 
     * @return the allowBlobPublicAccess value.
     */
    public Boolean allowBlobPublicAccess() {
        return this.allowBlobPublicAccess;
    }

    /**
     * Set the allowBlobPublicAccess property: Public blob access allowed.
     * 
     * @param allowBlobPublicAccess the allowBlobPublicAccess value to set.
     * @return the SystemCreatedStorageAccount object itself.
     */
    public SystemCreatedStorageAccount withAllowBlobPublicAccess(Boolean allowBlobPublicAccess) {
        this.allowBlobPublicAccess = allowBlobPublicAccess;
        return this;
    }

    /**
     * Get the armResourceId property: This is populated once the storage account is created.
     * 
     * @return the armResourceId value.
     */
    public ArmResourceId armResourceId() {
        return this.armResourceId;
    }

    /**
     * Set the armResourceId property: This is populated once the storage account is created.
     * 
     * @param armResourceId the armResourceId value to set.
     * @return the SystemCreatedStorageAccount object itself.
     */
    public SystemCreatedStorageAccount withArmResourceId(ArmResourceId armResourceId) {
        this.armResourceId = armResourceId;
        return this;
    }

    /**
     * Get the storageAccountHnsEnabled property: HNS enabled for storage account.
     * 
     * @return the storageAccountHnsEnabled value.
     */
    public Boolean storageAccountHnsEnabled() {
        return this.storageAccountHnsEnabled;
    }

    /**
     * Set the storageAccountHnsEnabled property: HNS enabled for storage account.
     * 
     * @param storageAccountHnsEnabled the storageAccountHnsEnabled value to set.
     * @return the SystemCreatedStorageAccount object itself.
     */
    public SystemCreatedStorageAccount withStorageAccountHnsEnabled(Boolean storageAccountHnsEnabled) {
        this.storageAccountHnsEnabled = storageAccountHnsEnabled;
        return this;
    }

    /**
     * Get the storageAccountName property: Name of the storage account.
     * 
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Set the storageAccountName property: Name of the storage account.
     * 
     * @param storageAccountName the storageAccountName value to set.
     * @return the SystemCreatedStorageAccount object itself.
     */
    public SystemCreatedStorageAccount withStorageAccountName(String storageAccountName) {
        this.storageAccountName = storageAccountName;
        return this;
    }

    /**
     * Get the storageAccountType property: Allowed values:
     * "Standard_LRS",
     * "Standard_GRS",
     * "Standard_RAGRS",
     * "Standard_ZRS",
     * "Standard_GZRS",
     * "Standard_RAGZRS",
     * "Premium_LRS",
     * "Premium_ZRS".
     * 
     * @return the storageAccountType value.
     */
    public String storageAccountType() {
        return this.storageAccountType;
    }

    /**
     * Set the storageAccountType property: Allowed values:
     * "Standard_LRS",
     * "Standard_GRS",
     * "Standard_RAGRS",
     * "Standard_ZRS",
     * "Standard_GZRS",
     * "Standard_RAGZRS",
     * "Premium_LRS",
     * "Premium_ZRS".
     * 
     * @param storageAccountType the storageAccountType value to set.
     * @return the SystemCreatedStorageAccount object itself.
     */
    public SystemCreatedStorageAccount withStorageAccountType(String storageAccountType) {
        this.storageAccountType = storageAccountType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (armResourceId() != null) {
            armResourceId().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("allowBlobPublicAccess", this.allowBlobPublicAccess);
        jsonWriter.writeJsonField("armResourceId", this.armResourceId);
        jsonWriter.writeBooleanField("storageAccountHnsEnabled", this.storageAccountHnsEnabled);
        jsonWriter.writeStringField("storageAccountName", this.storageAccountName);
        jsonWriter.writeStringField("storageAccountType", this.storageAccountType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SystemCreatedStorageAccount from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SystemCreatedStorageAccount if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SystemCreatedStorageAccount.
     */
    public static SystemCreatedStorageAccount fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SystemCreatedStorageAccount deserializedSystemCreatedStorageAccount = new SystemCreatedStorageAccount();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowBlobPublicAccess".equals(fieldName)) {
                    deserializedSystemCreatedStorageAccount.allowBlobPublicAccess
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("armResourceId".equals(fieldName)) {
                    deserializedSystemCreatedStorageAccount.armResourceId = ArmResourceId.fromJson(reader);
                } else if ("storageAccountHnsEnabled".equals(fieldName)) {
                    deserializedSystemCreatedStorageAccount.storageAccountHnsEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("storageAccountName".equals(fieldName)) {
                    deserializedSystemCreatedStorageAccount.storageAccountName = reader.getString();
                } else if ("storageAccountType".equals(fieldName)) {
                    deserializedSystemCreatedStorageAccount.storageAccountType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSystemCreatedStorageAccount;
        });
    }
}
