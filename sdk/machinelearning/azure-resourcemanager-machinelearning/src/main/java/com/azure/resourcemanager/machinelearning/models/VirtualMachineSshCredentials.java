// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Admin credentials for virtual machine.
 */
@Fluent
public final class VirtualMachineSshCredentials implements JsonSerializable<VirtualMachineSshCredentials> {
    /*
     * Username of admin account
     */
    private String username;

    /*
     * Password of admin account
     */
    private String password;

    /*
     * Public key data
     */
    private String publicKeyData;

    /*
     * Private key data
     */
    private String privateKeyData;

    /**
     * Creates an instance of VirtualMachineSshCredentials class.
     */
    public VirtualMachineSshCredentials() {
    }

    /**
     * Get the username property: Username of admin account.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Username of admin account.
     * 
     * @param username the username value to set.
     * @return the VirtualMachineSshCredentials object itself.
     */
    public VirtualMachineSshCredentials withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password of admin account.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password of admin account.
     * 
     * @param password the password value to set.
     * @return the VirtualMachineSshCredentials object itself.
     */
    public VirtualMachineSshCredentials withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the publicKeyData property: Public key data.
     * 
     * @return the publicKeyData value.
     */
    public String publicKeyData() {
        return this.publicKeyData;
    }

    /**
     * Set the publicKeyData property: Public key data.
     * 
     * @param publicKeyData the publicKeyData value to set.
     * @return the VirtualMachineSshCredentials object itself.
     */
    public VirtualMachineSshCredentials withPublicKeyData(String publicKeyData) {
        this.publicKeyData = publicKeyData;
        return this;
    }

    /**
     * Get the privateKeyData property: Private key data.
     * 
     * @return the privateKeyData value.
     */
    public String privateKeyData() {
        return this.privateKeyData;
    }

    /**
     * Set the privateKeyData property: Private key data.
     * 
     * @param privateKeyData the privateKeyData value to set.
     * @return the VirtualMachineSshCredentials object itself.
     */
    public VirtualMachineSshCredentials withPrivateKeyData(String privateKeyData) {
        this.privateKeyData = privateKeyData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeStringField("publicKeyData", this.publicKeyData);
        jsonWriter.writeStringField("privateKeyData", this.privateKeyData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineSshCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineSshCredentials if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineSshCredentials.
     */
    public static VirtualMachineSshCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineSshCredentials deserializedVirtualMachineSshCredentials = new VirtualMachineSshCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("username".equals(fieldName)) {
                    deserializedVirtualMachineSshCredentials.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedVirtualMachineSshCredentials.password = reader.getString();
                } else if ("publicKeyData".equals(fieldName)) {
                    deserializedVirtualMachineSshCredentials.publicKeyData = reader.getString();
                } else if ("privateKeyData".equals(fieldName)) {
                    deserializedVirtualMachineSshCredentials.privateKeyData = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineSshCredentials;
        });
    }
}
