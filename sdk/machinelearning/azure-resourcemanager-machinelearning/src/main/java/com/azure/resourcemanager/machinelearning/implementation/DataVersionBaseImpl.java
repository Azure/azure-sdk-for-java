// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.fluent.models.DataVersionBaseInner;
import com.azure.resourcemanager.machinelearning.models.DataVersionBase;
import com.azure.resourcemanager.machinelearning.models.DataVersionBaseProperties;
import com.azure.resourcemanager.machinelearning.models.PendingUploadRequestDto;
import com.azure.resourcemanager.machinelearning.models.PendingUploadResponseDto;

public final class DataVersionBaseImpl implements DataVersionBase, DataVersionBase.Definition, DataVersionBase.Update {
    private DataVersionBaseInner innerObject;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public DataVersionBaseProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DataVersionBaseInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registryName;

    private String name;

    private String version;

    public DataVersionBaseImpl withExistingData(String resourceGroupName, String registryName, String name) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        this.name = name;
        return this;
    }

    public DataVersionBase create() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryDataVersions()
            .createOrUpdate(resourceGroupName, registryName, name, version, this.innerModel(), Context.NONE);
        return this;
    }

    public DataVersionBase create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryDataVersions()
            .createOrUpdate(resourceGroupName, registryName, name, version, this.innerModel(), context);
        return this;
    }

    DataVersionBaseImpl(String name, com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = new DataVersionBaseInner();
        this.serviceManager = serviceManager;
        this.version = name;
    }

    public DataVersionBaseImpl update() {
        return this;
    }

    public DataVersionBase apply() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryDataVersions()
            .createOrUpdate(resourceGroupName, registryName, name, version, this.innerModel(), Context.NONE);
        return this;
    }

    public DataVersionBase apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryDataVersions()
            .createOrUpdate(resourceGroupName, registryName, name, version, this.innerModel(), context);
        return this;
    }

    DataVersionBaseImpl(DataVersionBaseInner innerObject,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registryName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "registries");
        this.name = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "data");
        this.version = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "versions");
    }

    public DataVersionBase refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryDataVersions()
            .getWithResponse(resourceGroupName, registryName, name, version, Context.NONE)
            .getValue();
        return this;
    }

    public DataVersionBase refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistryDataVersions()
            .getWithResponse(resourceGroupName, registryName, name, version, context)
            .getValue();
        return this;
    }

    public Response<PendingUploadResponseDto> createOrGetStartPendingUploadWithResponse(PendingUploadRequestDto body,
        Context context) {
        return serviceManager.registryDataVersions()
            .createOrGetStartPendingUploadWithResponse(resourceGroupName, registryName, name, version, body, context);
    }

    public PendingUploadResponseDto createOrGetStartPendingUpload(PendingUploadRequestDto body) {
        return serviceManager.registryDataVersions()
            .createOrGetStartPendingUpload(resourceGroupName, registryName, name, version, body);
    }

    public DataVersionBaseImpl withProperties(DataVersionBaseProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
