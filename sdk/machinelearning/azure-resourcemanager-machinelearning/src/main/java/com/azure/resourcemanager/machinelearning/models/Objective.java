// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Optimization objective.
 */
@Fluent
public final class Objective implements JsonSerializable<Objective> {
    /*
     * [Required] Name of the metric to optimize.
     */
    private String primaryMetric;

    /*
     * [Required] Defines supported metric goals for hyperparameter tuning
     */
    private Goal goal;

    /**
     * Creates an instance of Objective class.
     */
    public Objective() {
    }

    /**
     * Get the primaryMetric property: [Required] Name of the metric to optimize.
     * 
     * @return the primaryMetric value.
     */
    public String primaryMetric() {
        return this.primaryMetric;
    }

    /**
     * Set the primaryMetric property: [Required] Name of the metric to optimize.
     * 
     * @param primaryMetric the primaryMetric value to set.
     * @return the Objective object itself.
     */
    public Objective withPrimaryMetric(String primaryMetric) {
        this.primaryMetric = primaryMetric;
        return this;
    }

    /**
     * Get the goal property: [Required] Defines supported metric goals for hyperparameter tuning.
     * 
     * @return the goal value.
     */
    public Goal goal() {
        return this.goal;
    }

    /**
     * Set the goal property: [Required] Defines supported metric goals for hyperparameter tuning.
     * 
     * @param goal the goal value to set.
     * @return the Objective object itself.
     */
    public Objective withGoal(Goal goal) {
        this.goal = goal;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (primaryMetric() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property primaryMetric in model Objective"));
        }
        if (goal() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property goal in model Objective"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Objective.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("primaryMetric", this.primaryMetric);
        jsonWriter.writeStringField("goal", this.goal == null ? null : this.goal.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Objective from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Objective if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Objective.
     */
    public static Objective fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Objective deserializedObjective = new Objective();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("primaryMetric".equals(fieldName)) {
                    deserializedObjective.primaryMetric = reader.getString();
                } else if ("goal".equals(fieldName)) {
                    deserializedObjective.goal = Goal.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedObjective;
        });
    }
}
