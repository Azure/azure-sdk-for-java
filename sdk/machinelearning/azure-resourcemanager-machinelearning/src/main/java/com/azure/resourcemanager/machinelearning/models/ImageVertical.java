// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Abstract class for AutoML tasks that train image (computer vision) models - such as Image Classification / Image
 * Classification Multilabel / Image Object Detection / Image Instance Segmentation.
 */
@Fluent
public class ImageVertical {
    /*
     * [Required] Collection of registered Tabular Dataset Ids and other data
     * settings required for training and validating models.
     */
    @JsonProperty(value = "dataSettings", required = true)
    private ImageVerticalDataSettings dataSettings;

    /*
     * [Required] Limit settings for the AutoML job.
     */
    @JsonProperty(value = "limitSettings", required = true)
    private ImageLimitSettings limitSettings;

    /*
     * Model sweeping and hyperparameter sweeping related settings.
     */
    @JsonProperty(value = "sweepSettings")
    private ImageSweepSettings sweepSettings;

    /**
     * Get the dataSettings property: [Required] Collection of registered Tabular Dataset Ids and other data settings
     * required for training and validating models.
     *
     * @return the dataSettings value.
     */
    public ImageVerticalDataSettings dataSettings() {
        return this.dataSettings;
    }

    /**
     * Set the dataSettings property: [Required] Collection of registered Tabular Dataset Ids and other data settings
     * required for training and validating models.
     *
     * @param dataSettings the dataSettings value to set.
     * @return the ImageVertical object itself.
     */
    public ImageVertical withDataSettings(ImageVerticalDataSettings dataSettings) {
        this.dataSettings = dataSettings;
        return this;
    }

    /**
     * Get the limitSettings property: [Required] Limit settings for the AutoML job.
     *
     * @return the limitSettings value.
     */
    public ImageLimitSettings limitSettings() {
        return this.limitSettings;
    }

    /**
     * Set the limitSettings property: [Required] Limit settings for the AutoML job.
     *
     * @param limitSettings the limitSettings value to set.
     * @return the ImageVertical object itself.
     */
    public ImageVertical withLimitSettings(ImageLimitSettings limitSettings) {
        this.limitSettings = limitSettings;
        return this;
    }

    /**
     * Get the sweepSettings property: Model sweeping and hyperparameter sweeping related settings.
     *
     * @return the sweepSettings value.
     */
    public ImageSweepSettings sweepSettings() {
        return this.sweepSettings;
    }

    /**
     * Set the sweepSettings property: Model sweeping and hyperparameter sweeping related settings.
     *
     * @param sweepSettings the sweepSettings value to set.
     * @return the ImageVertical object itself.
     */
    public ImageVertical withSweepSettings(ImageSweepSettings sweepSettings) {
        this.sweepSettings = sweepSettings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataSettings() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property dataSettings in model ImageVertical"));
        } else {
            dataSettings().validate();
        }
        if (limitSettings() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property limitSettings in model ImageVertical"));
        } else {
            limitSettings().validate();
        }
        if (sweepSettings() != null) {
            sweepSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImageVertical.class);
}
