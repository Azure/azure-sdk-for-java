// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Abstract class for AutoML tasks that train image (computer vision) models -
 * such as Image Classification / Image Classification Multilabel / Image Object Detection / Image Instance
 * Segmentation.
 */
@Fluent
public class ImageVertical implements JsonSerializable<ImageVertical> {
    /*
     * [Required] Limit settings for the AutoML job.
     */
    private ImageLimitSettings limitSettings;

    /*
     * Model sweeping and hyperparameter sweeping related settings.
     */
    private ImageSweepSettings sweepSettings;

    /*
     * Validation data inputs.
     */
    private MLTableJobInput validationData;

    /*
     * The fraction of training dataset that needs to be set aside for validation purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     */
    private Double validationDataSize;

    /**
     * Creates an instance of ImageVertical class.
     */
    public ImageVertical() {
    }

    /**
     * Get the limitSettings property: [Required] Limit settings for the AutoML job.
     * 
     * @return the limitSettings value.
     */
    public ImageLimitSettings limitSettings() {
        return this.limitSettings;
    }

    /**
     * Set the limitSettings property: [Required] Limit settings for the AutoML job.
     * 
     * @param limitSettings the limitSettings value to set.
     * @return the ImageVertical object itself.
     */
    public ImageVertical withLimitSettings(ImageLimitSettings limitSettings) {
        this.limitSettings = limitSettings;
        return this;
    }

    /**
     * Get the sweepSettings property: Model sweeping and hyperparameter sweeping related settings.
     * 
     * @return the sweepSettings value.
     */
    public ImageSweepSettings sweepSettings() {
        return this.sweepSettings;
    }

    /**
     * Set the sweepSettings property: Model sweeping and hyperparameter sweeping related settings.
     * 
     * @param sweepSettings the sweepSettings value to set.
     * @return the ImageVertical object itself.
     */
    public ImageVertical withSweepSettings(ImageSweepSettings sweepSettings) {
        this.sweepSettings = sweepSettings;
        return this;
    }

    /**
     * Get the validationData property: Validation data inputs.
     * 
     * @return the validationData value.
     */
    public MLTableJobInput validationData() {
        return this.validationData;
    }

    /**
     * Set the validationData property: Validation data inputs.
     * 
     * @param validationData the validationData value to set.
     * @return the ImageVertical object itself.
     */
    public ImageVertical withValidationData(MLTableJobInput validationData) {
        this.validationData = validationData;
        return this;
    }

    /**
     * Get the validationDataSize property: The fraction of training dataset that needs to be set aside for validation
     * purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     * 
     * @return the validationDataSize value.
     */
    public Double validationDataSize() {
        return this.validationDataSize;
    }

    /**
     * Set the validationDataSize property: The fraction of training dataset that needs to be set aside for validation
     * purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     * 
     * @param validationDataSize the validationDataSize value to set.
     * @return the ImageVertical object itself.
     */
    public ImageVertical withValidationDataSize(Double validationDataSize) {
        this.validationDataSize = validationDataSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (limitSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property limitSettings in model ImageVertical"));
        } else {
            limitSettings().validate();
        }
        if (sweepSettings() != null) {
            sweepSettings().validate();
        }
        if (validationData() != null) {
            validationData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImageVertical.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("limitSettings", this.limitSettings);
        jsonWriter.writeJsonField("sweepSettings", this.sweepSettings);
        jsonWriter.writeJsonField("validationData", this.validationData);
        jsonWriter.writeNumberField("validationDataSize", this.validationDataSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageVertical from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageVertical if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageVertical.
     */
    public static ImageVertical fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageVertical deserializedImageVertical = new ImageVertical();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("limitSettings".equals(fieldName)) {
                    deserializedImageVertical.limitSettings = ImageLimitSettings.fromJson(reader);
                } else if ("sweepSettings".equals(fieldName)) {
                    deserializedImageVertical.sweepSettings = ImageSweepSettings.fromJson(reader);
                } else if ("validationData".equals(fieldName)) {
                    deserializedImageVertical.validationData = MLTableJobInput.fromJson(reader);
                } else if ("validationDataSize".equals(fieldName)) {
                    deserializedImageVertical.validationDataSize = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageVertical;
        });
    }
}
