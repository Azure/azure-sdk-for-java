// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AKS properties.
 */
@Fluent
public final class AksSchemaProperties implements JsonSerializable<AksSchemaProperties> {
    /*
     * Cluster full qualified domain name
     */
    private String clusterFqdn;

    /*
     * System services
     */
    private List<SystemService> systemServices;

    /*
     * Number of agents
     */
    private Integer agentCount;

    /*
     * Agent virtual machine size
     */
    private String agentVmSize;

    /*
     * Intended usage of the cluster
     */
    private ClusterPurpose clusterPurpose;

    /*
     * SSL configuration
     */
    private SslConfiguration sslConfiguration;

    /*
     * AKS networking configuration for vnet
     */
    private AksNetworkingConfiguration aksNetworkingConfiguration;

    /*
     * Load Balancer Type
     */
    private LoadBalancerType loadBalancerType;

    /*
     * Load Balancer Subnet
     */
    private String loadBalancerSubnet;

    /**
     * Creates an instance of AksSchemaProperties class.
     */
    public AksSchemaProperties() {
    }

    /**
     * Get the clusterFqdn property: Cluster full qualified domain name.
     * 
     * @return the clusterFqdn value.
     */
    public String clusterFqdn() {
        return this.clusterFqdn;
    }

    /**
     * Set the clusterFqdn property: Cluster full qualified domain name.
     * 
     * @param clusterFqdn the clusterFqdn value to set.
     * @return the AksSchemaProperties object itself.
     */
    public AksSchemaProperties withClusterFqdn(String clusterFqdn) {
        this.clusterFqdn = clusterFqdn;
        return this;
    }

    /**
     * Get the systemServices property: System services.
     * 
     * @return the systemServices value.
     */
    public List<SystemService> systemServices() {
        return this.systemServices;
    }

    /**
     * Get the agentCount property: Number of agents.
     * 
     * @return the agentCount value.
     */
    public Integer agentCount() {
        return this.agentCount;
    }

    /**
     * Set the agentCount property: Number of agents.
     * 
     * @param agentCount the agentCount value to set.
     * @return the AksSchemaProperties object itself.
     */
    public AksSchemaProperties withAgentCount(Integer agentCount) {
        this.agentCount = agentCount;
        return this;
    }

    /**
     * Get the agentVmSize property: Agent virtual machine size.
     * 
     * @return the agentVmSize value.
     */
    public String agentVmSize() {
        return this.agentVmSize;
    }

    /**
     * Set the agentVmSize property: Agent virtual machine size.
     * 
     * @param agentVmSize the agentVmSize value to set.
     * @return the AksSchemaProperties object itself.
     */
    public AksSchemaProperties withAgentVmSize(String agentVmSize) {
        this.agentVmSize = agentVmSize;
        return this;
    }

    /**
     * Get the clusterPurpose property: Intended usage of the cluster.
     * 
     * @return the clusterPurpose value.
     */
    public ClusterPurpose clusterPurpose() {
        return this.clusterPurpose;
    }

    /**
     * Set the clusterPurpose property: Intended usage of the cluster.
     * 
     * @param clusterPurpose the clusterPurpose value to set.
     * @return the AksSchemaProperties object itself.
     */
    public AksSchemaProperties withClusterPurpose(ClusterPurpose clusterPurpose) {
        this.clusterPurpose = clusterPurpose;
        return this;
    }

    /**
     * Get the sslConfiguration property: SSL configuration.
     * 
     * @return the sslConfiguration value.
     */
    public SslConfiguration sslConfiguration() {
        return this.sslConfiguration;
    }

    /**
     * Set the sslConfiguration property: SSL configuration.
     * 
     * @param sslConfiguration the sslConfiguration value to set.
     * @return the AksSchemaProperties object itself.
     */
    public AksSchemaProperties withSslConfiguration(SslConfiguration sslConfiguration) {
        this.sslConfiguration = sslConfiguration;
        return this;
    }

    /**
     * Get the aksNetworkingConfiguration property: AKS networking configuration for vnet.
     * 
     * @return the aksNetworkingConfiguration value.
     */
    public AksNetworkingConfiguration aksNetworkingConfiguration() {
        return this.aksNetworkingConfiguration;
    }

    /**
     * Set the aksNetworkingConfiguration property: AKS networking configuration for vnet.
     * 
     * @param aksNetworkingConfiguration the aksNetworkingConfiguration value to set.
     * @return the AksSchemaProperties object itself.
     */
    public AksSchemaProperties withAksNetworkingConfiguration(AksNetworkingConfiguration aksNetworkingConfiguration) {
        this.aksNetworkingConfiguration = aksNetworkingConfiguration;
        return this;
    }

    /**
     * Get the loadBalancerType property: Load Balancer Type.
     * 
     * @return the loadBalancerType value.
     */
    public LoadBalancerType loadBalancerType() {
        return this.loadBalancerType;
    }

    /**
     * Set the loadBalancerType property: Load Balancer Type.
     * 
     * @param loadBalancerType the loadBalancerType value to set.
     * @return the AksSchemaProperties object itself.
     */
    public AksSchemaProperties withLoadBalancerType(LoadBalancerType loadBalancerType) {
        this.loadBalancerType = loadBalancerType;
        return this;
    }

    /**
     * Get the loadBalancerSubnet property: Load Balancer Subnet.
     * 
     * @return the loadBalancerSubnet value.
     */
    public String loadBalancerSubnet() {
        return this.loadBalancerSubnet;
    }

    /**
     * Set the loadBalancerSubnet property: Load Balancer Subnet.
     * 
     * @param loadBalancerSubnet the loadBalancerSubnet value to set.
     * @return the AksSchemaProperties object itself.
     */
    public AksSchemaProperties withLoadBalancerSubnet(String loadBalancerSubnet) {
        this.loadBalancerSubnet = loadBalancerSubnet;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (systemServices() != null) {
            systemServices().forEach(e -> e.validate());
        }
        if (sslConfiguration() != null) {
            sslConfiguration().validate();
        }
        if (aksNetworkingConfiguration() != null) {
            aksNetworkingConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterFqdn", this.clusterFqdn);
        jsonWriter.writeNumberField("agentCount", this.agentCount);
        jsonWriter.writeStringField("agentVmSize", this.agentVmSize);
        jsonWriter.writeStringField("clusterPurpose",
            this.clusterPurpose == null ? null : this.clusterPurpose.toString());
        jsonWriter.writeJsonField("sslConfiguration", this.sslConfiguration);
        jsonWriter.writeJsonField("aksNetworkingConfiguration", this.aksNetworkingConfiguration);
        jsonWriter.writeStringField("loadBalancerType",
            this.loadBalancerType == null ? null : this.loadBalancerType.toString());
        jsonWriter.writeStringField("loadBalancerSubnet", this.loadBalancerSubnet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksSchemaProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksSchemaProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AksSchemaProperties.
     */
    public static AksSchemaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksSchemaProperties deserializedAksSchemaProperties = new AksSchemaProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterFqdn".equals(fieldName)) {
                    deserializedAksSchemaProperties.clusterFqdn = reader.getString();
                } else if ("systemServices".equals(fieldName)) {
                    List<SystemService> systemServices = reader.readArray(reader1 -> SystemService.fromJson(reader1));
                    deserializedAksSchemaProperties.systemServices = systemServices;
                } else if ("agentCount".equals(fieldName)) {
                    deserializedAksSchemaProperties.agentCount = reader.getNullable(JsonReader::getInt);
                } else if ("agentVmSize".equals(fieldName)) {
                    deserializedAksSchemaProperties.agentVmSize = reader.getString();
                } else if ("clusterPurpose".equals(fieldName)) {
                    deserializedAksSchemaProperties.clusterPurpose = ClusterPurpose.fromString(reader.getString());
                } else if ("sslConfiguration".equals(fieldName)) {
                    deserializedAksSchemaProperties.sslConfiguration = SslConfiguration.fromJson(reader);
                } else if ("aksNetworkingConfiguration".equals(fieldName)) {
                    deserializedAksSchemaProperties.aksNetworkingConfiguration
                        = AksNetworkingConfiguration.fromJson(reader);
                } else if ("loadBalancerType".equals(fieldName)) {
                    deserializedAksSchemaProperties.loadBalancerType = LoadBalancerType.fromString(reader.getString());
                } else if ("loadBalancerSubnet".equals(fieldName)) {
                    deserializedAksSchemaProperties.loadBalancerSubnet = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksSchemaProperties;
        });
    }
}
