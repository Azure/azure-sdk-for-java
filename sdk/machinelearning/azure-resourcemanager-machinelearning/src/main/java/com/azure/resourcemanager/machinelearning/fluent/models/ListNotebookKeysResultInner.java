// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ListNotebookKeysResult model.
 */
@Immutable
public final class ListNotebookKeysResultInner implements JsonSerializable<ListNotebookKeysResultInner> {
    /*
     * The primaryAccessKey property.
     */
    private String primaryAccessKey;

    /*
     * The secondaryAccessKey property.
     */
    private String secondaryAccessKey;

    /**
     * Creates an instance of ListNotebookKeysResultInner class.
     */
    public ListNotebookKeysResultInner() {
    }

    /**
     * Get the primaryAccessKey property: The primaryAccessKey property.
     * 
     * @return the primaryAccessKey value.
     */
    public String primaryAccessKey() {
        return this.primaryAccessKey;
    }

    /**
     * Get the secondaryAccessKey property: The secondaryAccessKey property.
     * 
     * @return the secondaryAccessKey value.
     */
    public String secondaryAccessKey() {
        return this.secondaryAccessKey;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListNotebookKeysResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListNotebookKeysResultInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ListNotebookKeysResultInner.
     */
    public static ListNotebookKeysResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ListNotebookKeysResultInner deserializedListNotebookKeysResultInner = new ListNotebookKeysResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("primaryAccessKey".equals(fieldName)) {
                    deserializedListNotebookKeysResultInner.primaryAccessKey = reader.getString();
                } else if ("secondaryAccessKey".equals(fieldName)) {
                    deserializedListNotebookKeysResultInner.secondaryAccessKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedListNotebookKeysResultInner;
        });
    }
}
