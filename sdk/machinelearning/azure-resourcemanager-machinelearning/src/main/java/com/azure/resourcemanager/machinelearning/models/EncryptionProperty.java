// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The EncryptionProperty model.
 */
@Fluent
public final class EncryptionProperty implements JsonSerializable<EncryptionProperty> {
    /*
     * Indicates whether or not the encryption is enabled for the workspace.
     */
    private EncryptionStatus status;

    /*
     * The identity that will be used to access the key vault for encryption at rest.
     */
    private IdentityForCmk identity;

    /*
     * Customer Key vault properties.
     */
    private EncryptionKeyVaultProperties keyVaultProperties;

    /**
     * Creates an instance of EncryptionProperty class.
     */
    public EncryptionProperty() {
    }

    /**
     * Get the status property: Indicates whether or not the encryption is enabled for the workspace.
     * 
     * @return the status value.
     */
    public EncryptionStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Indicates whether or not the encryption is enabled for the workspace.
     * 
     * @param status the status value to set.
     * @return the EncryptionProperty object itself.
     */
    public EncryptionProperty withStatus(EncryptionStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the identity property: The identity that will be used to access the key vault for encryption at rest.
     * 
     * @return the identity value.
     */
    public IdentityForCmk identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity that will be used to access the key vault for encryption at rest.
     * 
     * @param identity the identity value to set.
     * @return the EncryptionProperty object itself.
     */
    public EncryptionProperty withIdentity(IdentityForCmk identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the keyVaultProperties property: Customer Key vault properties.
     * 
     * @return the keyVaultProperties value.
     */
    public EncryptionKeyVaultProperties keyVaultProperties() {
        return this.keyVaultProperties;
    }

    /**
     * Set the keyVaultProperties property: Customer Key vault properties.
     * 
     * @param keyVaultProperties the keyVaultProperties value to set.
     * @return the EncryptionProperty object itself.
     */
    public EncryptionProperty withKeyVaultProperties(EncryptionKeyVaultProperties keyVaultProperties) {
        this.keyVaultProperties = keyVaultProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property status in model EncryptionProperty"));
        }
        if (identity() != null) {
            identity().validate();
        }
        if (keyVaultProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyVaultProperties in model EncryptionProperty"));
        } else {
            keyVaultProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EncryptionProperty.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("keyVaultProperties", this.keyVaultProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionProperty if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EncryptionProperty.
     */
    public static EncryptionProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionProperty deserializedEncryptionProperty = new EncryptionProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedEncryptionProperty.status = EncryptionStatus.fromString(reader.getString());
                } else if ("keyVaultProperties".equals(fieldName)) {
                    deserializedEncryptionProperty.keyVaultProperties = EncryptionKeyVaultProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedEncryptionProperty.identity = IdentityForCmk.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionProperty;
        });
    }
}
