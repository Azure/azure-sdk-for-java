// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Job output definition container information on where to find job output/logs.
 */
@Fluent
public class JobOutput implements JsonSerializable<JobOutput> {
    /*
     * [Required] Specifies the type of job.
     */
    private JobOutputType jobOutputType = JobOutputType.fromString("JobOutput");

    /*
     * Description for the output.
     */
    private String description;

    /**
     * Creates an instance of JobOutput class.
     */
    public JobOutput() {
    }

    /**
     * Get the jobOutputType property: [Required] Specifies the type of job.
     * 
     * @return the jobOutputType value.
     */
    public JobOutputType jobOutputType() {
        return this.jobOutputType;
    }

    /**
     * Get the description property: Description for the output.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description for the output.
     * 
     * @param description the description value to set.
     * @return the JobOutput object itself.
     */
    public JobOutput withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobOutputType", this.jobOutputType == null ? null : this.jobOutputType.toString());
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobOutput if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the JobOutput.
     */
    public static JobOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("jobOutputType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("custom_model".equals(discriminatorValue)) {
                    return CustomModelJobOutput.fromJson(readerToUse.reset());
                } else if ("mlflow_model".equals(discriminatorValue)) {
                    return MLFlowModelJobOutput.fromJson(readerToUse.reset());
                } else if ("mltable".equals(discriminatorValue)) {
                    return MLTableJobOutput.fromJson(readerToUse.reset());
                } else if ("triton_model".equals(discriminatorValue)) {
                    return TritonModelJobOutput.fromJson(readerToUse.reset());
                } else if ("uri_file".equals(discriminatorValue)) {
                    return UriFileJobOutput.fromJson(readerToUse.reset());
                } else if ("uri_folder".equals(discriminatorValue)) {
                    return UriFolderJobOutput.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static JobOutput fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobOutput deserializedJobOutput = new JobOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobOutputType".equals(fieldName)) {
                    deserializedJobOutput.jobOutputType = JobOutputType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedJobOutput.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobOutput;
        });
    }
}
