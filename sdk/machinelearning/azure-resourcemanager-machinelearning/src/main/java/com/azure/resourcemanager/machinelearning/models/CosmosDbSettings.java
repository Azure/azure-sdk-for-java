// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CosmosDbSettings model.
 */
@Fluent
public final class CosmosDbSettings implements JsonSerializable<CosmosDbSettings> {
    /*
     * The throughput of the collections in cosmosdb database
     */
    private Integer collectionsThroughput;

    /**
     * Creates an instance of CosmosDbSettings class.
     */
    public CosmosDbSettings() {
    }

    /**
     * Get the collectionsThroughput property: The throughput of the collections in cosmosdb database.
     * 
     * @return the collectionsThroughput value.
     */
    public Integer collectionsThroughput() {
        return this.collectionsThroughput;
    }

    /**
     * Set the collectionsThroughput property: The throughput of the collections in cosmosdb database.
     * 
     * @param collectionsThroughput the collectionsThroughput value to set.
     * @return the CosmosDbSettings object itself.
     */
    public CosmosDbSettings withCollectionsThroughput(Integer collectionsThroughput) {
        this.collectionsThroughput = collectionsThroughput;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("collectionsThroughput", this.collectionsThroughput);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosDbSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosDbSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CosmosDbSettings.
     */
    public static CosmosDbSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosDbSettings deserializedCosmosDbSettings = new CosmosDbSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collectionsThroughput".equals(fieldName)) {
                    deserializedCosmosDbSettings.collectionsThroughput = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCosmosDbSettings;
        });
    }
}
