// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * Forecasting Training related configuration.
 */
@Fluent
public final class ForecastingTrainingSettings extends TrainingSettings {
    /*
     * Allowed models for forecasting task.
     */
    private List<ForecastingModels> allowedTrainingAlgorithms;

    /*
     * Blocked models for forecasting task.
     */
    private List<ForecastingModels> blockedTrainingAlgorithms;

    /**
     * Creates an instance of ForecastingTrainingSettings class.
     */
    public ForecastingTrainingSettings() {
    }

    /**
     * Get the allowedTrainingAlgorithms property: Allowed models for forecasting task.
     * 
     * @return the allowedTrainingAlgorithms value.
     */
    public List<ForecastingModels> allowedTrainingAlgorithms() {
        return this.allowedTrainingAlgorithms;
    }

    /**
     * Set the allowedTrainingAlgorithms property: Allowed models for forecasting task.
     * 
     * @param allowedTrainingAlgorithms the allowedTrainingAlgorithms value to set.
     * @return the ForecastingTrainingSettings object itself.
     */
    public ForecastingTrainingSettings
        withAllowedTrainingAlgorithms(List<ForecastingModels> allowedTrainingAlgorithms) {
        this.allowedTrainingAlgorithms = allowedTrainingAlgorithms;
        return this;
    }

    /**
     * Get the blockedTrainingAlgorithms property: Blocked models for forecasting task.
     * 
     * @return the blockedTrainingAlgorithms value.
     */
    public List<ForecastingModels> blockedTrainingAlgorithms() {
        return this.blockedTrainingAlgorithms;
    }

    /**
     * Set the blockedTrainingAlgorithms property: Blocked models for forecasting task.
     * 
     * @param blockedTrainingAlgorithms the blockedTrainingAlgorithms value to set.
     * @return the ForecastingTrainingSettings object itself.
     */
    public ForecastingTrainingSettings
        withBlockedTrainingAlgorithms(List<ForecastingModels> blockedTrainingAlgorithms) {
        this.blockedTrainingAlgorithms = blockedTrainingAlgorithms;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForecastingTrainingSettings withEnableOnnxCompatibleModels(Boolean enableOnnxCompatibleModels) {
        super.withEnableOnnxCompatibleModels(enableOnnxCompatibleModels);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForecastingTrainingSettings withStackEnsembleSettings(StackEnsembleSettings stackEnsembleSettings) {
        super.withStackEnsembleSettings(stackEnsembleSettings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForecastingTrainingSettings withEnableStackEnsemble(Boolean enableStackEnsemble) {
        super.withEnableStackEnsemble(enableStackEnsemble);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForecastingTrainingSettings withEnableVoteEnsemble(Boolean enableVoteEnsemble) {
        super.withEnableVoteEnsemble(enableVoteEnsemble);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForecastingTrainingSettings withEnsembleModelDownloadTimeout(Duration ensembleModelDownloadTimeout) {
        super.withEnsembleModelDownloadTimeout(ensembleModelDownloadTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForecastingTrainingSettings withEnableModelExplainability(Boolean enableModelExplainability) {
        super.withEnableModelExplainability(enableModelExplainability);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForecastingTrainingSettings withEnableDnnTraining(Boolean enableDnnTraining) {
        super.withEnableDnnTraining(enableDnnTraining);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableOnnxCompatibleModels", enableOnnxCompatibleModels());
        jsonWriter.writeJsonField("stackEnsembleSettings", stackEnsembleSettings());
        jsonWriter.writeBooleanField("enableStackEnsemble", enableStackEnsemble());
        jsonWriter.writeBooleanField("enableVoteEnsemble", enableVoteEnsemble());
        jsonWriter.writeStringField("ensembleModelDownloadTimeout",
            CoreUtils.durationToStringWithDays(ensembleModelDownloadTimeout()));
        jsonWriter.writeBooleanField("enableModelExplainability", enableModelExplainability());
        jsonWriter.writeBooleanField("enableDnnTraining", enableDnnTraining());
        jsonWriter.writeArrayField("allowedTrainingAlgorithms", this.allowedTrainingAlgorithms,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("blockedTrainingAlgorithms", this.blockedTrainingAlgorithms,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ForecastingTrainingSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ForecastingTrainingSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ForecastingTrainingSettings.
     */
    public static ForecastingTrainingSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ForecastingTrainingSettings deserializedForecastingTrainingSettings = new ForecastingTrainingSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableOnnxCompatibleModels".equals(fieldName)) {
                    deserializedForecastingTrainingSettings
                        .withEnableOnnxCompatibleModels(reader.getNullable(JsonReader::getBoolean));
                } else if ("stackEnsembleSettings".equals(fieldName)) {
                    deserializedForecastingTrainingSettings
                        .withStackEnsembleSettings(StackEnsembleSettings.fromJson(reader));
                } else if ("enableStackEnsemble".equals(fieldName)) {
                    deserializedForecastingTrainingSettings
                        .withEnableStackEnsemble(reader.getNullable(JsonReader::getBoolean));
                } else if ("enableVoteEnsemble".equals(fieldName)) {
                    deserializedForecastingTrainingSettings
                        .withEnableVoteEnsemble(reader.getNullable(JsonReader::getBoolean));
                } else if ("ensembleModelDownloadTimeout".equals(fieldName)) {
                    deserializedForecastingTrainingSettings.withEnsembleModelDownloadTimeout(
                        reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("enableModelExplainability".equals(fieldName)) {
                    deserializedForecastingTrainingSettings
                        .withEnableModelExplainability(reader.getNullable(JsonReader::getBoolean));
                } else if ("enableDnnTraining".equals(fieldName)) {
                    deserializedForecastingTrainingSettings
                        .withEnableDnnTraining(reader.getNullable(JsonReader::getBoolean));
                } else if ("allowedTrainingAlgorithms".equals(fieldName)) {
                    List<ForecastingModels> allowedTrainingAlgorithms
                        = reader.readArray(reader1 -> ForecastingModels.fromString(reader1.getString()));
                    deserializedForecastingTrainingSettings.allowedTrainingAlgorithms = allowedTrainingAlgorithms;
                } else if ("blockedTrainingAlgorithms".equals(fieldName)) {
                    List<ForecastingModels> blockedTrainingAlgorithms
                        = reader.readArray(reader1 -> ForecastingModels.fromString(reader1.getString()));
                    deserializedForecastingTrainingSettings.blockedTrainingAlgorithms = blockedTrainingAlgorithms;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedForecastingTrainingSettings;
        });
    }
}
