// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.util.List;

/** Regression Training related configuration. */
@Fluent
public final class RegressionTrainingSettings extends TrainingSettings {
    /*
     * Allowed models for regression task.
     */
    @JsonProperty(value = "allowedTrainingAlgorithms")
    private List<RegressionModels> allowedTrainingAlgorithms;

    /*
     * Blocked models for regression task.
     */
    @JsonProperty(value = "blockedTrainingAlgorithms")
    private List<RegressionModels> blockedTrainingAlgorithms;

    /** Creates an instance of RegressionTrainingSettings class. */
    public RegressionTrainingSettings() {
    }

    /**
     * Get the allowedTrainingAlgorithms property: Allowed models for regression task.
     *
     * @return the allowedTrainingAlgorithms value.
     */
    public List<RegressionModels> allowedTrainingAlgorithms() {
        return this.allowedTrainingAlgorithms;
    }

    /**
     * Set the allowedTrainingAlgorithms property: Allowed models for regression task.
     *
     * @param allowedTrainingAlgorithms the allowedTrainingAlgorithms value to set.
     * @return the RegressionTrainingSettings object itself.
     */
    public RegressionTrainingSettings withAllowedTrainingAlgorithms(List<RegressionModels> allowedTrainingAlgorithms) {
        this.allowedTrainingAlgorithms = allowedTrainingAlgorithms;
        return this;
    }

    /**
     * Get the blockedTrainingAlgorithms property: Blocked models for regression task.
     *
     * @return the blockedTrainingAlgorithms value.
     */
    public List<RegressionModels> blockedTrainingAlgorithms() {
        return this.blockedTrainingAlgorithms;
    }

    /**
     * Set the blockedTrainingAlgorithms property: Blocked models for regression task.
     *
     * @param blockedTrainingAlgorithms the blockedTrainingAlgorithms value to set.
     * @return the RegressionTrainingSettings object itself.
     */
    public RegressionTrainingSettings withBlockedTrainingAlgorithms(List<RegressionModels> blockedTrainingAlgorithms) {
        this.blockedTrainingAlgorithms = blockedTrainingAlgorithms;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RegressionTrainingSettings withEnableDnnTraining(Boolean enableDnnTraining) {
        super.withEnableDnnTraining(enableDnnTraining);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RegressionTrainingSettings withEnableModelExplainability(Boolean enableModelExplainability) {
        super.withEnableModelExplainability(enableModelExplainability);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RegressionTrainingSettings withEnableOnnxCompatibleModels(Boolean enableOnnxCompatibleModels) {
        super.withEnableOnnxCompatibleModels(enableOnnxCompatibleModels);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RegressionTrainingSettings withEnableStackEnsemble(Boolean enableStackEnsemble) {
        super.withEnableStackEnsemble(enableStackEnsemble);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RegressionTrainingSettings withEnableVoteEnsemble(Boolean enableVoteEnsemble) {
        super.withEnableVoteEnsemble(enableVoteEnsemble);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RegressionTrainingSettings withEnsembleModelDownloadTimeout(Duration ensembleModelDownloadTimeout) {
        super.withEnsembleModelDownloadTimeout(ensembleModelDownloadTimeout);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RegressionTrainingSettings withStackEnsembleSettings(StackEnsembleSettings stackEnsembleSettings) {
        super.withStackEnsembleSettings(stackEnsembleSettings);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
