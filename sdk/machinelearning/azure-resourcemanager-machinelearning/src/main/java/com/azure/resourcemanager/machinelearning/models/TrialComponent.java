// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Trial component definition.
 */
@Fluent
public final class TrialComponent implements JsonSerializable<TrialComponent> {
    /*
     * ARM resource ID of the code asset.
     */
    private String codeId;

    /*
     * [Required] The command to execute on startup of the job. eg. "python train.py"
     */
    private String command;

    /*
     * [Required] The ARM resource ID of the Environment specification for the job.
     */
    private String environmentId;

    /*
     * Environment variables included in the job.
     */
    private Map<String, String> environmentVariables;

    /*
     * Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
     */
    private DistributionConfiguration distribution;

    /*
     * Compute Resource configuration for the job.
     */
    private JobResourceConfiguration resources;

    /**
     * Creates an instance of TrialComponent class.
     */
    public TrialComponent() {
    }

    /**
     * Get the codeId property: ARM resource ID of the code asset.
     * 
     * @return the codeId value.
     */
    public String codeId() {
        return this.codeId;
    }

    /**
     * Set the codeId property: ARM resource ID of the code asset.
     * 
     * @param codeId the codeId value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withCodeId(String codeId) {
        this.codeId = codeId;
        return this;
    }

    /**
     * Get the command property: [Required] The command to execute on startup of the job. eg. "python train.py".
     * 
     * @return the command value.
     */
    public String command() {
        return this.command;
    }

    /**
     * Set the command property: [Required] The command to execute on startup of the job. eg. "python train.py".
     * 
     * @param command the command value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withCommand(String command) {
        this.command = command;
        return this;
    }

    /**
     * Get the environmentId property: [Required] The ARM resource ID of the Environment specification for the job.
     * 
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: [Required] The ARM resource ID of the Environment specification for the job.
     * 
     * @param environmentId the environmentId value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables included in the job.
     * 
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables included in the job.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the distribution property: Distribution configuration of the job. If set, this should be one of Mpi,
     * Tensorflow, PyTorch, or null.
     * 
     * @return the distribution value.
     */
    public DistributionConfiguration distribution() {
        return this.distribution;
    }

    /**
     * Set the distribution property: Distribution configuration of the job. If set, this should be one of Mpi,
     * Tensorflow, PyTorch, or null.
     * 
     * @param distribution the distribution value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withDistribution(DistributionConfiguration distribution) {
        this.distribution = distribution;
        return this;
    }

    /**
     * Get the resources property: Compute Resource configuration for the job.
     * 
     * @return the resources value.
     */
    public JobResourceConfiguration resources() {
        return this.resources;
    }

    /**
     * Set the resources property: Compute Resource configuration for the job.
     * 
     * @param resources the resources value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withResources(JobResourceConfiguration resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (command() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property command in model TrialComponent"));
        }
        if (environmentId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property environmentId in model TrialComponent"));
        }
        if (distribution() != null) {
            distribution().validate();
        }
        if (resources() != null) {
            resources().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TrialComponent.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("command", this.command);
        jsonWriter.writeStringField("environmentId", this.environmentId);
        jsonWriter.writeStringField("codeId", this.codeId);
        jsonWriter.writeMapField("environmentVariables", this.environmentVariables,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("distribution", this.distribution);
        jsonWriter.writeJsonField("resources", this.resources);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrialComponent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrialComponent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrialComponent.
     */
    public static TrialComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrialComponent deserializedTrialComponent = new TrialComponent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("command".equals(fieldName)) {
                    deserializedTrialComponent.command = reader.getString();
                } else if ("environmentId".equals(fieldName)) {
                    deserializedTrialComponent.environmentId = reader.getString();
                } else if ("codeId".equals(fieldName)) {
                    deserializedTrialComponent.codeId = reader.getString();
                } else if ("environmentVariables".equals(fieldName)) {
                    Map<String, String> environmentVariables = reader.readMap(reader1 -> reader1.getString());
                    deserializedTrialComponent.environmentVariables = environmentVariables;
                } else if ("distribution".equals(fieldName)) {
                    deserializedTrialComponent.distribution = DistributionConfiguration.fromJson(reader);
                } else if ("resources".equals(fieldName)) {
                    deserializedTrialComponent.resources = JobResourceConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrialComponent;
        });
    }
}
