// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Counts of various compute node states on the amlCompute.
 */
@Immutable
public final class NodeStateCounts implements JsonSerializable<NodeStateCounts> {
    /*
     * Number of compute nodes in idle state.
     */
    private Integer idleNodeCount;

    /*
     * Number of compute nodes which are running jobs.
     */
    private Integer runningNodeCount;

    /*
     * Number of compute nodes which are being prepared.
     */
    private Integer preparingNodeCount;

    /*
     * Number of compute nodes which are in unusable state.
     */
    private Integer unusableNodeCount;

    /*
     * Number of compute nodes which are leaving the amlCompute.
     */
    private Integer leavingNodeCount;

    /*
     * Number of compute nodes which are in preempted state.
     */
    private Integer preemptedNodeCount;

    /**
     * Creates an instance of NodeStateCounts class.
     */
    public NodeStateCounts() {
    }

    /**
     * Get the idleNodeCount property: Number of compute nodes in idle state.
     * 
     * @return the idleNodeCount value.
     */
    public Integer idleNodeCount() {
        return this.idleNodeCount;
    }

    /**
     * Get the runningNodeCount property: Number of compute nodes which are running jobs.
     * 
     * @return the runningNodeCount value.
     */
    public Integer runningNodeCount() {
        return this.runningNodeCount;
    }

    /**
     * Get the preparingNodeCount property: Number of compute nodes which are being prepared.
     * 
     * @return the preparingNodeCount value.
     */
    public Integer preparingNodeCount() {
        return this.preparingNodeCount;
    }

    /**
     * Get the unusableNodeCount property: Number of compute nodes which are in unusable state.
     * 
     * @return the unusableNodeCount value.
     */
    public Integer unusableNodeCount() {
        return this.unusableNodeCount;
    }

    /**
     * Get the leavingNodeCount property: Number of compute nodes which are leaving the amlCompute.
     * 
     * @return the leavingNodeCount value.
     */
    public Integer leavingNodeCount() {
        return this.leavingNodeCount;
    }

    /**
     * Get the preemptedNodeCount property: Number of compute nodes which are in preempted state.
     * 
     * @return the preemptedNodeCount value.
     */
    public Integer preemptedNodeCount() {
        return this.preemptedNodeCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeStateCounts from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeStateCounts if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeStateCounts.
     */
    public static NodeStateCounts fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeStateCounts deserializedNodeStateCounts = new NodeStateCounts();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("idleNodeCount".equals(fieldName)) {
                    deserializedNodeStateCounts.idleNodeCount = reader.getNullable(JsonReader::getInt);
                } else if ("runningNodeCount".equals(fieldName)) {
                    deserializedNodeStateCounts.runningNodeCount = reader.getNullable(JsonReader::getInt);
                } else if ("preparingNodeCount".equals(fieldName)) {
                    deserializedNodeStateCounts.preparingNodeCount = reader.getNullable(JsonReader::getInt);
                } else if ("unusableNodeCount".equals(fieldName)) {
                    deserializedNodeStateCounts.unusableNodeCount = reader.getNullable(JsonReader::getInt);
                } else if ("leavingNodeCount".equals(fieldName)) {
                    deserializedNodeStateCounts.leavingNodeCount = reader.getNullable(JsonReader::getInt);
                } else if ("preemptedNodeCount".equals(fieldName)) {
                    deserializedNodeStateCounts.preemptedNodeCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeStateCounts;
        });
    }
}
