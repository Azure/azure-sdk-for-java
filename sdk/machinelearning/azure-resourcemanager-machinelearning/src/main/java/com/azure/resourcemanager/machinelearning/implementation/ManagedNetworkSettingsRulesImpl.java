// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.ManagedNetworkSettingsRulesClient;
import com.azure.resourcemanager.machinelearning.fluent.models.OutboundRuleBasicResourceInner;
import com.azure.resourcemanager.machinelearning.models.ManagedNetworkSettingsRules;
import com.azure.resourcemanager.machinelearning.models.OutboundRuleBasicResource;

public final class ManagedNetworkSettingsRulesImpl implements ManagedNetworkSettingsRules {
    private static final ClientLogger LOGGER = new ClientLogger(ManagedNetworkSettingsRulesImpl.class);

    private final ManagedNetworkSettingsRulesClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public ManagedNetworkSettingsRulesImpl(ManagedNetworkSettingsRulesClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<OutboundRuleBasicResource> list(String resourceGroupName, String workspaceName) {
        PagedIterable<OutboundRuleBasicResourceInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OutboundRuleBasicResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<OutboundRuleBasicResource> list(String resourceGroupName, String workspaceName,
        Context context) {
        PagedIterable<OutboundRuleBasicResourceInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OutboundRuleBasicResourceImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String workspaceName, String ruleName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, ruleName);
    }

    public void delete(String resourceGroupName, String workspaceName, String ruleName, Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, ruleName, context);
    }

    public Response<OutboundRuleBasicResource> getWithResponse(String resourceGroupName, String workspaceName,
        String ruleName, Context context) {
        Response<OutboundRuleBasicResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, ruleName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OutboundRuleBasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OutboundRuleBasicResource get(String resourceGroupName, String workspaceName, String ruleName) {
        OutboundRuleBasicResourceInner inner = this.serviceClient().get(resourceGroupName, workspaceName, ruleName);
        if (inner != null) {
            return new OutboundRuleBasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OutboundRuleBasicResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String ruleName = ResourceManagerUtils.getValueFromIdByName(id, "outboundRules");
        if (ruleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'outboundRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, ruleName, Context.NONE).getValue();
    }

    public Response<OutboundRuleBasicResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String ruleName = ResourceManagerUtils.getValueFromIdByName(id, "outboundRules");
        if (ruleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'outboundRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, ruleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String ruleName = ResourceManagerUtils.getValueFromIdByName(id, "outboundRules");
        if (ruleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'outboundRules'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, ruleName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String ruleName = ResourceManagerUtils.getValueFromIdByName(id, "outboundRules");
        if (ruleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'outboundRules'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, ruleName, context);
    }

    private ManagedNetworkSettingsRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public OutboundRuleBasicResourceImpl define(String name) {
        return new OutboundRuleBasicResourceImpl(name, this.manager());
    }
}
