// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Specifies the feature window.
 */
@Fluent
public final class FeatureWindow implements JsonSerializable<FeatureWindow> {
    /*
     * Specifies the feature window start time
     */
    private OffsetDateTime featureWindowStart;

    /*
     * Specifies the feature window end time
     */
    private OffsetDateTime featureWindowEnd;

    /**
     * Creates an instance of FeatureWindow class.
     */
    public FeatureWindow() {
    }

    /**
     * Get the featureWindowStart property: Specifies the feature window start time.
     * 
     * @return the featureWindowStart value.
     */
    public OffsetDateTime featureWindowStart() {
        return this.featureWindowStart;
    }

    /**
     * Set the featureWindowStart property: Specifies the feature window start time.
     * 
     * @param featureWindowStart the featureWindowStart value to set.
     * @return the FeatureWindow object itself.
     */
    public FeatureWindow withFeatureWindowStart(OffsetDateTime featureWindowStart) {
        this.featureWindowStart = featureWindowStart;
        return this;
    }

    /**
     * Get the featureWindowEnd property: Specifies the feature window end time.
     * 
     * @return the featureWindowEnd value.
     */
    public OffsetDateTime featureWindowEnd() {
        return this.featureWindowEnd;
    }

    /**
     * Set the featureWindowEnd property: Specifies the feature window end time.
     * 
     * @param featureWindowEnd the featureWindowEnd value to set.
     * @return the FeatureWindow object itself.
     */
    public FeatureWindow withFeatureWindowEnd(OffsetDateTime featureWindowEnd) {
        this.featureWindowEnd = featureWindowEnd;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("featureWindowStart",
            this.featureWindowStart == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.featureWindowStart));
        jsonWriter.writeStringField("featureWindowEnd",
            this.featureWindowEnd == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.featureWindowEnd));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeatureWindow from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeatureWindow if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FeatureWindow.
     */
    public static FeatureWindow fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeatureWindow deserializedFeatureWindow = new FeatureWindow();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("featureWindowStart".equals(fieldName)) {
                    deserializedFeatureWindow.featureWindowStart = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("featureWindowEnd".equals(fieldName)) {
                    deserializedFeatureWindow.featureWindowEnd = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeatureWindow;
        });
    }
}
