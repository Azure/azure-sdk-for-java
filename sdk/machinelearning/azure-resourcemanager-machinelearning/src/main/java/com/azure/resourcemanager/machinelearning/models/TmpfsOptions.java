// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the tmpfs options for the container.
 */
@Fluent
public final class TmpfsOptions implements JsonSerializable<TmpfsOptions> {
    /*
     * Mention the Tmpfs size
     */
    private Integer size;

    /**
     * Creates an instance of TmpfsOptions class.
     */
    public TmpfsOptions() {
    }

    /**
     * Get the size property: Mention the Tmpfs size.
     * 
     * @return the size value.
     */
    public Integer size() {
        return this.size;
    }

    /**
     * Set the size property: Mention the Tmpfs size.
     * 
     * @param size the size value to set.
     * @return the TmpfsOptions object itself.
     */
    public TmpfsOptions withSize(Integer size) {
        this.size = size;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("size", this.size);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TmpfsOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TmpfsOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TmpfsOptions.
     */
    public static TmpfsOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TmpfsOptions deserializedTmpfsOptions = new TmpfsOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("size".equals(fieldName)) {
                    deserializedTmpfsOptions.size = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTmpfsOptions;
        });
    }
}
