// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The estimated price info for using a VM.
 */
@Fluent
public final class EstimatedVMPrices implements JsonSerializable<EstimatedVMPrices> {
    /*
     * Three lettered code specifying the currency of the VM price. Example: USD
     */
    private BillingCurrency billingCurrency;

    /*
     * The unit of time measurement for the specified VM price. Example: OneHour
     */
    private UnitOfMeasure unitOfMeasure;

    /*
     * The list of estimated prices for using a VM of a particular OS type, tier, etc.
     */
    private List<EstimatedVMPrice> values;

    /**
     * Creates an instance of EstimatedVMPrices class.
     */
    public EstimatedVMPrices() {
    }

    /**
     * Get the billingCurrency property: Three lettered code specifying the currency of the VM price. Example: USD.
     * 
     * @return the billingCurrency value.
     */
    public BillingCurrency billingCurrency() {
        return this.billingCurrency;
    }

    /**
     * Set the billingCurrency property: Three lettered code specifying the currency of the VM price. Example: USD.
     * 
     * @param billingCurrency the billingCurrency value to set.
     * @return the EstimatedVMPrices object itself.
     */
    public EstimatedVMPrices withBillingCurrency(BillingCurrency billingCurrency) {
        this.billingCurrency = billingCurrency;
        return this;
    }

    /**
     * Get the unitOfMeasure property: The unit of time measurement for the specified VM price. Example: OneHour.
     * 
     * @return the unitOfMeasure value.
     */
    public UnitOfMeasure unitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Set the unitOfMeasure property: The unit of time measurement for the specified VM price. Example: OneHour.
     * 
     * @param unitOfMeasure the unitOfMeasure value to set.
     * @return the EstimatedVMPrices object itself.
     */
    public EstimatedVMPrices withUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
        this.unitOfMeasure = unitOfMeasure;
        return this;
    }

    /**
     * Get the values property: The list of estimated prices for using a VM of a particular OS type, tier, etc.
     * 
     * @return the values value.
     */
    public List<EstimatedVMPrice> values() {
        return this.values;
    }

    /**
     * Set the values property: The list of estimated prices for using a VM of a particular OS type, tier, etc.
     * 
     * @param values the values value to set.
     * @return the EstimatedVMPrices object itself.
     */
    public EstimatedVMPrices withValues(List<EstimatedVMPrice> values) {
        this.values = values;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (billingCurrency() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property billingCurrency in model EstimatedVMPrices"));
        }
        if (unitOfMeasure() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property unitOfMeasure in model EstimatedVMPrices"));
        }
        if (values() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property values in model EstimatedVMPrices"));
        } else {
            values().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EstimatedVMPrices.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingCurrency",
            this.billingCurrency == null ? null : this.billingCurrency.toString());
        jsonWriter.writeStringField("unitOfMeasure", this.unitOfMeasure == null ? null : this.unitOfMeasure.toString());
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EstimatedVMPrices from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EstimatedVMPrices if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EstimatedVMPrices.
     */
    public static EstimatedVMPrices fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EstimatedVMPrices deserializedEstimatedVMPrices = new EstimatedVMPrices();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingCurrency".equals(fieldName)) {
                    deserializedEstimatedVMPrices.billingCurrency = BillingCurrency.fromString(reader.getString());
                } else if ("unitOfMeasure".equals(fieldName)) {
                    deserializedEstimatedVMPrices.unitOfMeasure = UnitOfMeasure.fromString(reader.getString());
                } else if ("values".equals(fieldName)) {
                    List<EstimatedVMPrice> values = reader.readArray(reader1 -> EstimatedVMPrice.fromJson(reader1));
                    deserializedEstimatedVMPrices.values = values;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEstimatedVMPrices;
        });
    }
}
