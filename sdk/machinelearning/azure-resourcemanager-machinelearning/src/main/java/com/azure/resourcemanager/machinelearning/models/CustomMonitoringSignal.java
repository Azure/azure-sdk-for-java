// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CustomMonitoringSignal model.
 */
@Fluent
public final class CustomMonitoringSignal extends MonitoringSignalBase {
    /*
     * [Required] Specifies the type of signal to monitor.
     */
    private MonitoringSignalType signalType = MonitoringSignalType.CUSTOM;

    /*
     * Monitoring assets to take as input. Key is the component input port name, value is the data asset.
     */
    private Map<String, MonitoringInputDataBase> inputAssets;

    /*
     * Extra component parameters to take as input. Key is the component literal input port name, value is the parameter
     * value.
     */
    private Map<String, JobInput> inputs;

    /*
     * [Required] Reference to the component asset used to calculate the custom metrics.
     */
    private String componentId;

    /*
     * [Required] A list of metrics to calculate and their associated thresholds.
     */
    private List<CustomMetricThreshold> metricThresholds;

    /**
     * Creates an instance of CustomMonitoringSignal class.
     */
    public CustomMonitoringSignal() {
    }

    /**
     * Get the signalType property: [Required] Specifies the type of signal to monitor.
     * 
     * @return the signalType value.
     */
    @Override
    public MonitoringSignalType signalType() {
        return this.signalType;
    }

    /**
     * Get the inputAssets property: Monitoring assets to take as input. Key is the component input port name, value is
     * the data asset.
     * 
     * @return the inputAssets value.
     */
    public Map<String, MonitoringInputDataBase> inputAssets() {
        return this.inputAssets;
    }

    /**
     * Set the inputAssets property: Monitoring assets to take as input. Key is the component input port name, value is
     * the data asset.
     * 
     * @param inputAssets the inputAssets value to set.
     * @return the CustomMonitoringSignal object itself.
     */
    public CustomMonitoringSignal withInputAssets(Map<String, MonitoringInputDataBase> inputAssets) {
        this.inputAssets = inputAssets;
        return this;
    }

    /**
     * Get the inputs property: Extra component parameters to take as input. Key is the component literal input port
     * name, value is the parameter value.
     * 
     * @return the inputs value.
     */
    public Map<String, JobInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: Extra component parameters to take as input. Key is the component literal input port
     * name, value is the parameter value.
     * 
     * @param inputs the inputs value to set.
     * @return the CustomMonitoringSignal object itself.
     */
    public CustomMonitoringSignal withInputs(Map<String, JobInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the componentId property: [Required] Reference to the component asset used to calculate the custom metrics.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Set the componentId property: [Required] Reference to the component asset used to calculate the custom metrics.
     * 
     * @param componentId the componentId value to set.
     * @return the CustomMonitoringSignal object itself.
     */
    public CustomMonitoringSignal withComponentId(String componentId) {
        this.componentId = componentId;
        return this;
    }

    /**
     * Get the metricThresholds property: [Required] A list of metrics to calculate and their associated thresholds.
     * 
     * @return the metricThresholds value.
     */
    public List<CustomMetricThreshold> metricThresholds() {
        return this.metricThresholds;
    }

    /**
     * Set the metricThresholds property: [Required] A list of metrics to calculate and their associated thresholds.
     * 
     * @param metricThresholds the metricThresholds value to set.
     * @return the CustomMonitoringSignal object itself.
     */
    public CustomMonitoringSignal withMetricThresholds(List<CustomMetricThreshold> metricThresholds) {
        this.metricThresholds = metricThresholds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomMonitoringSignal withNotificationTypes(List<MonitoringNotificationType> notificationTypes) {
        super.withNotificationTypes(notificationTypes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomMonitoringSignal withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (inputAssets() != null) {
            inputAssets().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (inputs() != null) {
            inputs().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (componentId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property componentId in model CustomMonitoringSignal"));
        }
        if (metricThresholds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metricThresholds in model CustomMonitoringSignal"));
        } else {
            metricThresholds().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomMonitoringSignal.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("notificationTypes", notificationTypes(),
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("componentId", this.componentId);
        jsonWriter.writeArrayField("metricThresholds", this.metricThresholds,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("signalType", this.signalType == null ? null : this.signalType.toString());
        jsonWriter.writeMapField("inputAssets", this.inputAssets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("inputs", this.inputs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomMonitoringSignal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomMonitoringSignal if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomMonitoringSignal.
     */
    public static CustomMonitoringSignal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomMonitoringSignal deserializedCustomMonitoringSignal = new CustomMonitoringSignal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationTypes".equals(fieldName)) {
                    List<MonitoringNotificationType> notificationTypes
                        = reader.readArray(reader1 -> MonitoringNotificationType.fromString(reader1.getString()));
                    deserializedCustomMonitoringSignal.withNotificationTypes(notificationTypes);
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedCustomMonitoringSignal.withProperties(properties);
                } else if ("componentId".equals(fieldName)) {
                    deserializedCustomMonitoringSignal.componentId = reader.getString();
                } else if ("metricThresholds".equals(fieldName)) {
                    List<CustomMetricThreshold> metricThresholds
                        = reader.readArray(reader1 -> CustomMetricThreshold.fromJson(reader1));
                    deserializedCustomMonitoringSignal.metricThresholds = metricThresholds;
                } else if ("signalType".equals(fieldName)) {
                    deserializedCustomMonitoringSignal.signalType = MonitoringSignalType.fromString(reader.getString());
                } else if ("inputAssets".equals(fieldName)) {
                    Map<String, MonitoringInputDataBase> inputAssets
                        = reader.readMap(reader1 -> MonitoringInputDataBase.fromJson(reader1));
                    deserializedCustomMonitoringSignal.inputAssets = inputAssets;
                } else if ("inputs".equals(fieldName)) {
                    Map<String, JobInput> inputs = reader.readMap(reader1 -> JobInput.fromJson(reader1));
                    deserializedCustomMonitoringSignal.inputs = inputs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomMonitoringSignal;
        });
    }
}
