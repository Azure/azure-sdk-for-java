// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Early termination policies enable canceling poor-performing runs before they complete.
 */
@Fluent
public class EarlyTerminationPolicy implements JsonSerializable<EarlyTerminationPolicy> {
    /*
     * [Required] Name of policy configuration
     */
    private EarlyTerminationPolicyType policyType = EarlyTerminationPolicyType.fromString("EarlyTerminationPolicy");

    /*
     * Interval (number of runs) between policy evaluations.
     */
    private Integer evaluationInterval;

    /*
     * Number of intervals by which to delay the first evaluation.
     */
    private Integer delayEvaluation;

    /**
     * Creates an instance of EarlyTerminationPolicy class.
     */
    public EarlyTerminationPolicy() {
    }

    /**
     * Get the policyType property: [Required] Name of policy configuration.
     * 
     * @return the policyType value.
     */
    public EarlyTerminationPolicyType policyType() {
        return this.policyType;
    }

    /**
     * Get the evaluationInterval property: Interval (number of runs) between policy evaluations.
     * 
     * @return the evaluationInterval value.
     */
    public Integer evaluationInterval() {
        return this.evaluationInterval;
    }

    /**
     * Set the evaluationInterval property: Interval (number of runs) between policy evaluations.
     * 
     * @param evaluationInterval the evaluationInterval value to set.
     * @return the EarlyTerminationPolicy object itself.
     */
    public EarlyTerminationPolicy withEvaluationInterval(Integer evaluationInterval) {
        this.evaluationInterval = evaluationInterval;
        return this;
    }

    /**
     * Get the delayEvaluation property: Number of intervals by which to delay the first evaluation.
     * 
     * @return the delayEvaluation value.
     */
    public Integer delayEvaluation() {
        return this.delayEvaluation;
    }

    /**
     * Set the delayEvaluation property: Number of intervals by which to delay the first evaluation.
     * 
     * @param delayEvaluation the delayEvaluation value to set.
     * @return the EarlyTerminationPolicy object itself.
     */
    public EarlyTerminationPolicy withDelayEvaluation(Integer delayEvaluation) {
        this.delayEvaluation = delayEvaluation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("policyType", this.policyType == null ? null : this.policyType.toString());
        jsonWriter.writeNumberField("evaluationInterval", this.evaluationInterval);
        jsonWriter.writeNumberField("delayEvaluation", this.delayEvaluation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EarlyTerminationPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EarlyTerminationPolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EarlyTerminationPolicy.
     */
    public static EarlyTerminationPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("policyType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Bandit".equals(discriminatorValue)) {
                    return BanditPolicy.fromJson(readerToUse.reset());
                } else if ("MedianStopping".equals(discriminatorValue)) {
                    return MedianStoppingPolicy.fromJson(readerToUse.reset());
                } else if ("TruncationSelection".equals(discriminatorValue)) {
                    return TruncationSelectionPolicy.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static EarlyTerminationPolicy fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EarlyTerminationPolicy deserializedEarlyTerminationPolicy = new EarlyTerminationPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyType".equals(fieldName)) {
                    deserializedEarlyTerminationPolicy.policyType
                        = EarlyTerminationPolicyType.fromString(reader.getString());
                } else if ("evaluationInterval".equals(fieldName)) {
                    deserializedEarlyTerminationPolicy.evaluationInterval = reader.getNullable(JsonReader::getInt);
                } else if ("delayEvaluation".equals(fieldName)) {
                    deserializedEarlyTerminationPolicy.delayEvaluation = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEarlyTerminationPolicy;
        });
    }
}
