// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The ResourceConfiguration model.
 */
@Fluent
public class ResourceConfiguration implements JsonSerializable<ResourceConfiguration> {
    /*
     * Optional number of instances or nodes used by the compute target.
     */
    private Integer instanceCount;

    /*
     * Optional type of VM used as supported by the compute target.
     */
    private String instanceType;

    /*
     * Additional properties bag.
     */
    private Map<String, Object> properties;

    /**
     * Creates an instance of ResourceConfiguration class.
     */
    public ResourceConfiguration() {
    }

    /**
     * Get the instanceCount property: Optional number of instances or nodes used by the compute target.
     * 
     * @return the instanceCount value.
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }

    /**
     * Set the instanceCount property: Optional number of instances or nodes used by the compute target.
     * 
     * @param instanceCount the instanceCount value to set.
     * @return the ResourceConfiguration object itself.
     */
    public ResourceConfiguration withInstanceCount(Integer instanceCount) {
        this.instanceCount = instanceCount;
        return this;
    }

    /**
     * Get the instanceType property: Optional type of VM used as supported by the compute target.
     * 
     * @return the instanceType value.
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Set the instanceType property: Optional type of VM used as supported by the compute target.
     * 
     * @param instanceType the instanceType value to set.
     * @return the ResourceConfiguration object itself.
     */
    public ResourceConfiguration withInstanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Get the properties property: Additional properties bag.
     * 
     * @return the properties value.
     */
    public Map<String, Object> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Additional properties bag.
     * 
     * @param properties the properties value to set.
     * @return the ResourceConfiguration object itself.
     */
    public ResourceConfiguration withProperties(Map<String, Object> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("instanceCount", this.instanceCount);
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceConfiguration.
     */
    public static ResourceConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceConfiguration deserializedResourceConfiguration = new ResourceConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceCount".equals(fieldName)) {
                    deserializedResourceConfiguration.instanceCount = reader.getNullable(JsonReader::getInt);
                } else if ("instanceType".equals(fieldName)) {
                    deserializedResourceConfiguration.instanceType = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedResourceConfiguration.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceConfiguration;
        });
    }
}
