// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Configuration for notification.
 */
@Fluent
public final class NotificationSetting implements JsonSerializable<NotificationSetting> {
    /*
     * This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
     */
    private List<String> emails;

    /*
     * Send email notification to user on specified notification type
     */
    private List<EmailNotificationEnableType> emailOn;

    /*
     * Send webhook callback to a service. Key is a user-provided name for the webhook.
     */
    private Map<String, Webhook> webhooks;

    /**
     * Creates an instance of NotificationSetting class.
     */
    public NotificationSetting() {
    }

    /**
     * Get the emails property: This is the email recipient list which has a limitation of 499 characters in total
     * concat with comma separator.
     * 
     * @return the emails value.
     */
    public List<String> emails() {
        return this.emails;
    }

    /**
     * Set the emails property: This is the email recipient list which has a limitation of 499 characters in total
     * concat with comma separator.
     * 
     * @param emails the emails value to set.
     * @return the NotificationSetting object itself.
     */
    public NotificationSetting withEmails(List<String> emails) {
        this.emails = emails;
        return this;
    }

    /**
     * Get the emailOn property: Send email notification to user on specified notification type.
     * 
     * @return the emailOn value.
     */
    public List<EmailNotificationEnableType> emailOn() {
        return this.emailOn;
    }

    /**
     * Set the emailOn property: Send email notification to user on specified notification type.
     * 
     * @param emailOn the emailOn value to set.
     * @return the NotificationSetting object itself.
     */
    public NotificationSetting withEmailOn(List<EmailNotificationEnableType> emailOn) {
        this.emailOn = emailOn;
        return this;
    }

    /**
     * Get the webhooks property: Send webhook callback to a service. Key is a user-provided name for the webhook.
     * 
     * @return the webhooks value.
     */
    public Map<String, Webhook> webhooks() {
        return this.webhooks;
    }

    /**
     * Set the webhooks property: Send webhook callback to a service. Key is a user-provided name for the webhook.
     * 
     * @param webhooks the webhooks value to set.
     * @return the NotificationSetting object itself.
     */
    public NotificationSetting withWebhooks(Map<String, Webhook> webhooks) {
        this.webhooks = webhooks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (webhooks() != null) {
            webhooks().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("emails", this.emails, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("emailOn", this.emailOn,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeMapField("webhooks", this.webhooks, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationSetting if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotificationSetting.
     */
    public static NotificationSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationSetting deserializedNotificationSetting = new NotificationSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("emails".equals(fieldName)) {
                    List<String> emails = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotificationSetting.emails = emails;
                } else if ("emailOn".equals(fieldName)) {
                    List<EmailNotificationEnableType> emailOn
                        = reader.readArray(reader1 -> EmailNotificationEnableType.fromString(reader1.getString()));
                    deserializedNotificationSetting.emailOn = emailOn;
                } else if ("webhooks".equals(fieldName)) {
                    Map<String, Webhook> webhooks = reader.readMap(reader1 -> Webhook.fromJson(reader1));
                    deserializedNotificationSetting.webhooks = webhooks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationSetting;
        });
    }
}
