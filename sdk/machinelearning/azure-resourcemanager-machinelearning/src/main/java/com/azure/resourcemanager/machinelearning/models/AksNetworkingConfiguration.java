// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Advance configuration for AKS networking.
 */
@Fluent
public final class AksNetworkingConfiguration implements JsonSerializable<AksNetworkingConfiguration> {
    /*
     * Virtual network subnet resource ID the compute nodes belong to
     */
    private String subnetId;

    /*
     * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     */
    private String serviceCidr;

    /*
     * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range
     * specified in serviceCidr.
     */
    private String dnsServiceIp;

    /*
     * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or
     * the Kubernetes service address range.
     */
    private String dockerBridgeCidr;

    /**
     * Creates an instance of AksNetworkingConfiguration class.
     */
    public AksNetworkingConfiguration() {
    }

    /**
     * Get the subnetId property: Virtual network subnet resource ID the compute nodes belong to.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Virtual network subnet resource ID the compute nodes belong to.
     * 
     * @param subnetId the subnetId value to set.
     * @return the AksNetworkingConfiguration object itself.
     */
    public AksNetworkingConfiguration withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the serviceCidr property: A CIDR notation IP range from which to assign service cluster IPs. It must not
     * overlap with any Subnet IP ranges.
     * 
     * @return the serviceCidr value.
     */
    public String serviceCidr() {
        return this.serviceCidr;
    }

    /**
     * Set the serviceCidr property: A CIDR notation IP range from which to assign service cluster IPs. It must not
     * overlap with any Subnet IP ranges.
     * 
     * @param serviceCidr the serviceCidr value to set.
     * @return the AksNetworkingConfiguration object itself.
     */
    public AksNetworkingConfiguration withServiceCidr(String serviceCidr) {
        this.serviceCidr = serviceCidr;
        return this;
    }

    /**
     * Get the dnsServiceIp property: An IP address assigned to the Kubernetes DNS service. It must be within the
     * Kubernetes service address range specified in serviceCidr.
     * 
     * @return the dnsServiceIp value.
     */
    public String dnsServiceIp() {
        return this.dnsServiceIp;
    }

    /**
     * Set the dnsServiceIp property: An IP address assigned to the Kubernetes DNS service. It must be within the
     * Kubernetes service address range specified in serviceCidr.
     * 
     * @param dnsServiceIp the dnsServiceIp value to set.
     * @return the AksNetworkingConfiguration object itself.
     */
    public AksNetworkingConfiguration withDnsServiceIp(String dnsServiceIp) {
        this.dnsServiceIp = dnsServiceIp;
        return this;
    }

    /**
     * Get the dockerBridgeCidr property: A CIDR notation IP range assigned to the Docker bridge network. It must not
     * overlap with any Subnet IP ranges or the Kubernetes service address range.
     * 
     * @return the dockerBridgeCidr value.
     */
    public String dockerBridgeCidr() {
        return this.dockerBridgeCidr;
    }

    /**
     * Set the dockerBridgeCidr property: A CIDR notation IP range assigned to the Docker bridge network. It must not
     * overlap with any Subnet IP ranges or the Kubernetes service address range.
     * 
     * @param dockerBridgeCidr the dockerBridgeCidr value to set.
     * @return the AksNetworkingConfiguration object itself.
     */
    public AksNetworkingConfiguration withDockerBridgeCidr(String dockerBridgeCidr) {
        this.dockerBridgeCidr = dockerBridgeCidr;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("serviceCidr", this.serviceCidr);
        jsonWriter.writeStringField("dnsServiceIP", this.dnsServiceIp);
        jsonWriter.writeStringField("dockerBridgeCidr", this.dockerBridgeCidr);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksNetworkingConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksNetworkingConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AksNetworkingConfiguration.
     */
    public static AksNetworkingConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksNetworkingConfiguration deserializedAksNetworkingConfiguration = new AksNetworkingConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedAksNetworkingConfiguration.subnetId = reader.getString();
                } else if ("serviceCidr".equals(fieldName)) {
                    deserializedAksNetworkingConfiguration.serviceCidr = reader.getString();
                } else if ("dnsServiceIP".equals(fieldName)) {
                    deserializedAksNetworkingConfiguration.dnsServiceIp = reader.getString();
                } else if ("dockerBridgeCidr".equals(fieldName)) {
                    deserializedAksNetworkingConfiguration.dockerBridgeCidr = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksNetworkingConfiguration;
        });
    }
}
