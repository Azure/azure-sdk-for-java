// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The WorkspaceConnectionSharedAccessSignature model.
 */
@Fluent
public final class WorkspaceConnectionSharedAccessSignature
    implements JsonSerializable<WorkspaceConnectionSharedAccessSignature> {
    /*
     * The sas property.
     */
    private String sas;

    /**
     * Creates an instance of WorkspaceConnectionSharedAccessSignature class.
     */
    public WorkspaceConnectionSharedAccessSignature() {
    }

    /**
     * Get the sas property: The sas property.
     * 
     * @return the sas value.
     */
    public String sas() {
        return this.sas;
    }

    /**
     * Set the sas property: The sas property.
     * 
     * @param sas the sas value to set.
     * @return the WorkspaceConnectionSharedAccessSignature object itself.
     */
    public WorkspaceConnectionSharedAccessSignature withSas(String sas) {
        this.sas = sas;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sas", this.sas);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceConnectionSharedAccessSignature from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceConnectionSharedAccessSignature if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkspaceConnectionSharedAccessSignature.
     */
    public static WorkspaceConnectionSharedAccessSignature fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceConnectionSharedAccessSignature deserializedWorkspaceConnectionSharedAccessSignature
                = new WorkspaceConnectionSharedAccessSignature();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sas".equals(fieldName)) {
                    deserializedWorkspaceConnectionSharedAccessSignature.sas = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceConnectionSharedAccessSignature;
        });
    }
}
