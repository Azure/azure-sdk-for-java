// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LakeHouseArtifact model.
 */
@Fluent
public final class LakeHouseArtifact extends OneLakeArtifact {
    /*
     * [Required] OneLake artifact type
     */
    private OneLakeArtifactType artifactType = OneLakeArtifactType.LAKE_HOUSE;

    /**
     * Creates an instance of LakeHouseArtifact class.
     */
    public LakeHouseArtifact() {
    }

    /**
     * Get the artifactType property: [Required] OneLake artifact type.
     * 
     * @return the artifactType value.
     */
    @Override
    public OneLakeArtifactType artifactType() {
        return this.artifactType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LakeHouseArtifact withArtifactName(String artifactName) {
        super.withArtifactName(artifactName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("artifactName", artifactName());
        jsonWriter.writeStringField("artifactType", this.artifactType == null ? null : this.artifactType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LakeHouseArtifact from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LakeHouseArtifact if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LakeHouseArtifact.
     */
    public static LakeHouseArtifact fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LakeHouseArtifact deserializedLakeHouseArtifact = new LakeHouseArtifact();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifactName".equals(fieldName)) {
                    deserializedLakeHouseArtifact.withArtifactName(reader.getString());
                } else if ("artifactType".equals(fieldName)) {
                    deserializedLakeHouseArtifact.artifactType = OneLakeArtifactType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLakeHouseArtifact;
        });
    }
}
