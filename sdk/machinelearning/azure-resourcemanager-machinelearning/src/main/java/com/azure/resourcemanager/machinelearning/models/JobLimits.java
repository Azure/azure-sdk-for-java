// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * The JobLimits model.
 */
@Fluent
public class JobLimits implements JsonSerializable<JobLimits> {
    /*
     * [Required] JobLimit type.
     */
    private JobLimitsType jobLimitsType = JobLimitsType.fromString("JobLimits");

    /*
     * The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with
     * precision as low as Seconds.
     */
    private Duration timeout;

    /**
     * Creates an instance of JobLimits class.
     */
    public JobLimits() {
    }

    /**
     * Get the jobLimitsType property: [Required] JobLimit type.
     * 
     * @return the jobLimitsType value.
     */
    public JobLimitsType jobLimitsType() {
        return this.jobLimitsType;
    }

    /**
     * Get the timeout property: The max run duration in ISO 8601 format, after which the job will be cancelled. Only
     * supports duration with precision as low as Seconds.
     * 
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The max run duration in ISO 8601 format, after which the job will be cancelled. Only
     * supports duration with precision as low as Seconds.
     * 
     * @param timeout the timeout value to set.
     * @return the JobLimits object itself.
     */
    public JobLimits withTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobLimitsType", this.jobLimitsType == null ? null : this.jobLimitsType.toString());
        jsonWriter.writeStringField("timeout", CoreUtils.durationToStringWithDays(this.timeout));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobLimits from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobLimits if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the JobLimits.
     */
    public static JobLimits fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("jobLimitsType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Command".equals(discriminatorValue)) {
                    return CommandJobLimits.fromJson(readerToUse.reset());
                } else if ("Sweep".equals(discriminatorValue)) {
                    return SweepJobLimits.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static JobLimits fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobLimits deserializedJobLimits = new JobLimits();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobLimitsType".equals(fieldName)) {
                    deserializedJobLimits.jobLimitsType = JobLimitsType.fromString(reader.getString());
                } else if ("timeout".equals(fieldName)) {
                    deserializedJobLimits.timeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobLimits;
        });
    }
}
