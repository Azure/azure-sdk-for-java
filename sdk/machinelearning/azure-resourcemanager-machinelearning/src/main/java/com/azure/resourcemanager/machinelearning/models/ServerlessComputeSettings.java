// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ServerlessComputeSettings model.
 */
@Fluent
public final class ServerlessComputeSettings implements JsonSerializable<ServerlessComputeSettings> {
    /*
     * The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed
     */
    private String serverlessComputeCustomSubnet;

    /*
     * The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a
     * workspace with private endpoint
     */
    private Boolean serverlessComputeNoPublicIp;

    /**
     * Creates an instance of ServerlessComputeSettings class.
     */
    public ServerlessComputeSettings() {
    }

    /**
     * Get the serverlessComputeCustomSubnet property: The resource ID of an existing virtual network subnet in which
     * serverless compute nodes should be deployed.
     * 
     * @return the serverlessComputeCustomSubnet value.
     */
    public String serverlessComputeCustomSubnet() {
        return this.serverlessComputeCustomSubnet;
    }

    /**
     * Set the serverlessComputeCustomSubnet property: The resource ID of an existing virtual network subnet in which
     * serverless compute nodes should be deployed.
     * 
     * @param serverlessComputeCustomSubnet the serverlessComputeCustomSubnet value to set.
     * @return the ServerlessComputeSettings object itself.
     */
    public ServerlessComputeSettings withServerlessComputeCustomSubnet(String serverlessComputeCustomSubnet) {
        this.serverlessComputeCustomSubnet = serverlessComputeCustomSubnet;
        return this;
    }

    /**
     * Get the serverlessComputeNoPublicIp property: The flag to signal if serverless compute nodes deployed in custom
     * vNet would have no public IP addresses for a workspace with private endpoint.
     * 
     * @return the serverlessComputeNoPublicIp value.
     */
    public Boolean serverlessComputeNoPublicIp() {
        return this.serverlessComputeNoPublicIp;
    }

    /**
     * Set the serverlessComputeNoPublicIp property: The flag to signal if serverless compute nodes deployed in custom
     * vNet would have no public IP addresses for a workspace with private endpoint.
     * 
     * @param serverlessComputeNoPublicIp the serverlessComputeNoPublicIp value to set.
     * @return the ServerlessComputeSettings object itself.
     */
    public ServerlessComputeSettings withServerlessComputeNoPublicIp(Boolean serverlessComputeNoPublicIp) {
        this.serverlessComputeNoPublicIp = serverlessComputeNoPublicIp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverlessComputeCustomSubnet", this.serverlessComputeCustomSubnet);
        jsonWriter.writeBooleanField("serverlessComputeNoPublicIP", this.serverlessComputeNoPublicIp);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessComputeSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessComputeSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerlessComputeSettings.
     */
    public static ServerlessComputeSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessComputeSettings deserializedServerlessComputeSettings = new ServerlessComputeSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverlessComputeCustomSubnet".equals(fieldName)) {
                    deserializedServerlessComputeSettings.serverlessComputeCustomSubnet = reader.getString();
                } else if ("serverlessComputeNoPublicIP".equals(fieldName)) {
                    deserializedServerlessComputeSettings.serverlessComputeNoPublicIp
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessComputeSettings;
        });
    }
}
