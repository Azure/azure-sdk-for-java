// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.models.EndpointAuthMode;
import java.io.IOException;
import java.util.Map;

/**
 * Inference Endpoint base definition.
 */
@Fluent
public class EndpointPropertiesBaseInner implements JsonSerializable<EndpointPropertiesBaseInner> {
    /*
     * Description of the inference endpoint.
     */
    private String description;

    /*
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    private Map<String, String> properties;

    /*
     * Endpoint URI.
     */
    private String scoringUri;

    /*
     * Endpoint Swagger URI.
     */
    private String swaggerUri;

    /*
     * [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based
     * authentication. 'Key' doesn't expire but 'AMLToken' does.
     */
    private EndpointAuthMode authMode;

    /*
     * EndpointAuthKeys to set initially on an Endpoint.
     * This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
     */
    private EndpointAuthKeysInner keys;

    /**
     * Creates an instance of EndpointPropertiesBaseInner class.
     */
    public EndpointPropertiesBaseInner() {
    }

    /**
     * Get the description property: Description of the inference endpoint.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the inference endpoint.
     * 
     * @param description the description value to set.
     * @return the EndpointPropertiesBaseInner object itself.
     */
    public EndpointPropertiesBaseInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the properties property: Property dictionary. Properties can be added, but not removed or altered.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Property dictionary. Properties can be added, but not removed or altered.
     * 
     * @param properties the properties value to set.
     * @return the EndpointPropertiesBaseInner object itself.
     */
    public EndpointPropertiesBaseInner withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the scoringUri property: Endpoint URI.
     * 
     * @return the scoringUri value.
     */
    public String scoringUri() {
        return this.scoringUri;
    }

    /**
     * Set the scoringUri property: Endpoint URI.
     * 
     * @param scoringUri the scoringUri value to set.
     * @return the EndpointPropertiesBaseInner object itself.
     */
    EndpointPropertiesBaseInner withScoringUri(String scoringUri) {
        this.scoringUri = scoringUri;
        return this;
    }

    /**
     * Get the swaggerUri property: Endpoint Swagger URI.
     * 
     * @return the swaggerUri value.
     */
    public String swaggerUri() {
        return this.swaggerUri;
    }

    /**
     * Set the swaggerUri property: Endpoint Swagger URI.
     * 
     * @param swaggerUri the swaggerUri value to set.
     * @return the EndpointPropertiesBaseInner object itself.
     */
    EndpointPropertiesBaseInner withSwaggerUri(String swaggerUri) {
        this.swaggerUri = swaggerUri;
        return this;
    }

    /**
     * Get the authMode property: [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine
     * Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
     * 
     * @return the authMode value.
     */
    public EndpointAuthMode authMode() {
        return this.authMode;
    }

    /**
     * Set the authMode property: [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine
     * Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
     * 
     * @param authMode the authMode value to set.
     * @return the EndpointPropertiesBaseInner object itself.
     */
    public EndpointPropertiesBaseInner withAuthMode(EndpointAuthMode authMode) {
        this.authMode = authMode;
        return this;
    }

    /**
     * Get the keys property: EndpointAuthKeys to set initially on an Endpoint.
     * This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
     * 
     * @return the keys value.
     */
    public EndpointAuthKeysInner keys() {
        return this.keys;
    }

    /**
     * Set the keys property: EndpointAuthKeys to set initially on an Endpoint.
     * This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
     * 
     * @param keys the keys value to set.
     * @return the EndpointPropertiesBaseInner object itself.
     */
    public EndpointPropertiesBaseInner withKeys(EndpointAuthKeysInner keys) {
        this.keys = keys;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authMode in model EndpointPropertiesBaseInner"));
        }
        if (keys() != null) {
            keys().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EndpointPropertiesBaseInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authMode", this.authMode == null ? null : this.authMode.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("keys", this.keys);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointPropertiesBaseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointPropertiesBaseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EndpointPropertiesBaseInner.
     */
    public static EndpointPropertiesBaseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointPropertiesBaseInner deserializedEndpointPropertiesBaseInner = new EndpointPropertiesBaseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authMode".equals(fieldName)) {
                    deserializedEndpointPropertiesBaseInner.authMode = EndpointAuthMode.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedEndpointPropertiesBaseInner.description = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedEndpointPropertiesBaseInner.properties = properties;
                } else if ("scoringUri".equals(fieldName)) {
                    deserializedEndpointPropertiesBaseInner.scoringUri = reader.getString();
                } else if ("swaggerUri".equals(fieldName)) {
                    deserializedEndpointPropertiesBaseInner.swaggerUri = reader.getString();
                } else if ("keys".equals(fieldName)) {
                    deserializedEndpointPropertiesBaseInner.keys = EndpointAuthKeysInner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointPropertiesBaseInner;
        });
    }
}
