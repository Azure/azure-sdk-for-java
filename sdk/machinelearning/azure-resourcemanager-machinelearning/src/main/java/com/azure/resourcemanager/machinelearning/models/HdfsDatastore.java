// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/** The HdfsDatastore model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "datastoreType")
@JsonTypeName("Hdfs")
@Fluent
public final class HdfsDatastore extends DatastoreDetails {
    /*
     * The TLS cert of the HDFS server. Needs to be a base64 encoded string.
     * Required if "Https" protocol is selected.
     */
    @JsonProperty(value = "hdfsServerCertificate")
    private String hdfsServerCertificate;

    /*
     * [Required] IP Address or DNS HostName.
     */
    @JsonProperty(value = "nameNodeAddress", required = true)
    private String nameNodeAddress;

    /*
     * Protocol used to communicate with the storage account (Https/Http).
     */
    @JsonProperty(value = "protocol")
    private String protocol;

    /**
     * Get the hdfsServerCertificate property: The TLS cert of the HDFS server. Needs to be a base64 encoded string.
     * Required if "Https" protocol is selected.
     *
     * @return the hdfsServerCertificate value.
     */
    public String hdfsServerCertificate() {
        return this.hdfsServerCertificate;
    }

    /**
     * Set the hdfsServerCertificate property: The TLS cert of the HDFS server. Needs to be a base64 encoded string.
     * Required if "Https" protocol is selected.
     *
     * @param hdfsServerCertificate the hdfsServerCertificate value to set.
     * @return the HdfsDatastore object itself.
     */
    public HdfsDatastore withHdfsServerCertificate(String hdfsServerCertificate) {
        this.hdfsServerCertificate = hdfsServerCertificate;
        return this;
    }

    /**
     * Get the nameNodeAddress property: [Required] IP Address or DNS HostName.
     *
     * @return the nameNodeAddress value.
     */
    public String nameNodeAddress() {
        return this.nameNodeAddress;
    }

    /**
     * Set the nameNodeAddress property: [Required] IP Address or DNS HostName.
     *
     * @param nameNodeAddress the nameNodeAddress value to set.
     * @return the HdfsDatastore object itself.
     */
    public HdfsDatastore withNameNodeAddress(String nameNodeAddress) {
        this.nameNodeAddress = nameNodeAddress;
        return this;
    }

    /**
     * Get the protocol property: Protocol used to communicate with the storage account (Https/Http).
     *
     * @return the protocol value.
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Protocol used to communicate with the storage account (Https/Http).
     *
     * @param protocol the protocol value to set.
     * @return the HdfsDatastore object itself.
     */
    public HdfsDatastore withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HdfsDatastore withCredentials(DatastoreCredentials credentials) {
        super.withCredentials(credentials);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HdfsDatastore withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HdfsDatastore withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HdfsDatastore withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (nameNodeAddress() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property nameNodeAddress in model HdfsDatastore"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HdfsDatastore.class);
}
