// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Literal input type.
 */
@Fluent
public final class LiteralJobInput extends JobInput {
    /*
     * [Required] Specifies the type of job.
     */
    private JobInputType jobInputType = JobInputType.LITERAL;

    /*
     * [Required] Literal value for the input.
     */
    private String value;

    /**
     * Creates an instance of LiteralJobInput class.
     */
    public LiteralJobInput() {
    }

    /**
     * Get the jobInputType property: [Required] Specifies the type of job.
     * 
     * @return the jobInputType value.
     */
    @Override
    public JobInputType jobInputType() {
        return this.jobInputType;
    }

    /**
     * Get the value property: [Required] Literal value for the input.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: [Required] Literal value for the input.
     * 
     * @param value the value value to set.
     * @return the LiteralJobInput object itself.
     */
    public LiteralJobInput withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LiteralJobInput withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (value() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property value in model LiteralJobInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LiteralJobInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("jobInputType", this.jobInputType == null ? null : this.jobInputType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LiteralJobInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LiteralJobInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LiteralJobInput.
     */
    public static LiteralJobInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LiteralJobInput deserializedLiteralJobInput = new LiteralJobInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedLiteralJobInput.withDescription(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedLiteralJobInput.value = reader.getString();
                } else if ("jobInputType".equals(fieldName)) {
                    deserializedLiteralJobInput.jobInputType = JobInputType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLiteralJobInput;
        });
    }
}
