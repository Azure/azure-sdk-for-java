// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SparkResourceConfiguration model.
 */
@Fluent
public final class SparkResourceConfiguration implements JsonSerializable<SparkResourceConfiguration> {
    /*
     * Optional type of VM used as supported by the compute target.
     */
    private String instanceType;

    /*
     * Version of spark runtime used for the job.
     */
    private String runtimeVersion;

    /**
     * Creates an instance of SparkResourceConfiguration class.
     */
    public SparkResourceConfiguration() {
    }

    /**
     * Get the instanceType property: Optional type of VM used as supported by the compute target.
     * 
     * @return the instanceType value.
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Set the instanceType property: Optional type of VM used as supported by the compute target.
     * 
     * @param instanceType the instanceType value to set.
     * @return the SparkResourceConfiguration object itself.
     */
    public SparkResourceConfiguration withInstanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Get the runtimeVersion property: Version of spark runtime used for the job.
     * 
     * @return the runtimeVersion value.
     */
    public String runtimeVersion() {
        return this.runtimeVersion;
    }

    /**
     * Set the runtimeVersion property: Version of spark runtime used for the job.
     * 
     * @param runtimeVersion the runtimeVersion value to set.
     * @return the SparkResourceConfiguration object itself.
     */
    public SparkResourceConfiguration withRuntimeVersion(String runtimeVersion) {
        this.runtimeVersion = runtimeVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("runtimeVersion", this.runtimeVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkResourceConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkResourceConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SparkResourceConfiguration.
     */
    public static SparkResourceConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkResourceConfiguration deserializedSparkResourceConfiguration = new SparkResourceConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedSparkResourceConfiguration.instanceType = reader.getString();
                } else if ("runtimeVersion".equals(fieldName)) {
                    deserializedSparkResourceConfiguration.runtimeVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkResourceConfiguration;
        });
    }
}
