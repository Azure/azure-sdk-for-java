// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A system service running on a compute.
 */
@Immutable
public final class SystemService implements JsonSerializable<SystemService> {
    /*
     * The type of this system service.
     */
    private String systemServiceType;

    /*
     * Public IP address
     */
    private String publicIpAddress;

    /*
     * The version for this type.
     */
    private String version;

    /**
     * Creates an instance of SystemService class.
     */
    public SystemService() {
    }

    /**
     * Get the systemServiceType property: The type of this system service.
     * 
     * @return the systemServiceType value.
     */
    public String systemServiceType() {
        return this.systemServiceType;
    }

    /**
     * Get the publicIpAddress property: Public IP address.
     * 
     * @return the publicIpAddress value.
     */
    public String publicIpAddress() {
        return this.publicIpAddress;
    }

    /**
     * Get the version property: The version for this type.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SystemService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SystemService if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SystemService.
     */
    public static SystemService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SystemService deserializedSystemService = new SystemService();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("systemServiceType".equals(fieldName)) {
                    deserializedSystemService.systemServiceType = reader.getString();
                } else if ("publicIpAddress".equals(fieldName)) {
                    deserializedSystemService.publicIpAddress = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedSystemService.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSystemService;
        });
    }
}
