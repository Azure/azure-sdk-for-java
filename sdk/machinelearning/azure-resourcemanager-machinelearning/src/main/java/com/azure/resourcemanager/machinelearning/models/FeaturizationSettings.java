// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Featurization Configuration.
 */
@Fluent
public class FeaturizationSettings implements JsonSerializable<FeaturizationSettings> {
    /*
     * Dataset language, useful for the text data.
     */
    private String datasetLanguage;

    /**
     * Creates an instance of FeaturizationSettings class.
     */
    public FeaturizationSettings() {
    }

    /**
     * Get the datasetLanguage property: Dataset language, useful for the text data.
     * 
     * @return the datasetLanguage value.
     */
    public String datasetLanguage() {
        return this.datasetLanguage;
    }

    /**
     * Set the datasetLanguage property: Dataset language, useful for the text data.
     * 
     * @param datasetLanguage the datasetLanguage value to set.
     * @return the FeaturizationSettings object itself.
     */
    public FeaturizationSettings withDatasetLanguage(String datasetLanguage) {
        this.datasetLanguage = datasetLanguage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("datasetLanguage", this.datasetLanguage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeaturizationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeaturizationSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FeaturizationSettings.
     */
    public static FeaturizationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeaturizationSettings deserializedFeaturizationSettings = new FeaturizationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("datasetLanguage".equals(fieldName)) {
                    deserializedFeaturizationSettings.datasetLanguage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeaturizationSettings;
        });
    }
}
