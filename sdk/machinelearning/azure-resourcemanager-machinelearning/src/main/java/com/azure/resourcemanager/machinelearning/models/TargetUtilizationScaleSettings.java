// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * The TargetUtilizationScaleSettings model.
 */
@Fluent
public final class TargetUtilizationScaleSettings extends OnlineScaleSettings {
    /*
     * [Required] Type of deployment scaling algorithm
     */
    private ScaleType scaleType = ScaleType.TARGET_UTILIZATION;

    /*
     * The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
     */
    private Duration pollingInterval;

    /*
     * Target CPU usage for the autoscaler.
     */
    private Integer targetUtilizationPercentage;

    /*
     * The minimum number of instances to always be present.
     */
    private Integer minInstances;

    /*
     * The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
     */
    private Integer maxInstances;

    /**
     * Creates an instance of TargetUtilizationScaleSettings class.
     */
    public TargetUtilizationScaleSettings() {
    }

    /**
     * Get the scaleType property: [Required] Type of deployment scaling algorithm.
     * 
     * @return the scaleType value.
     */
    @Override
    public ScaleType scaleType() {
        return this.scaleType;
    }

    /**
     * Get the pollingInterval property: The polling interval in ISO 8691 format. Only supports duration with precision
     * as low as Seconds.
     * 
     * @return the pollingInterval value.
     */
    public Duration pollingInterval() {
        return this.pollingInterval;
    }

    /**
     * Set the pollingInterval property: The polling interval in ISO 8691 format. Only supports duration with precision
     * as low as Seconds.
     * 
     * @param pollingInterval the pollingInterval value to set.
     * @return the TargetUtilizationScaleSettings object itself.
     */
    public TargetUtilizationScaleSettings withPollingInterval(Duration pollingInterval) {
        this.pollingInterval = pollingInterval;
        return this;
    }

    /**
     * Get the targetUtilizationPercentage property: Target CPU usage for the autoscaler.
     * 
     * @return the targetUtilizationPercentage value.
     */
    public Integer targetUtilizationPercentage() {
        return this.targetUtilizationPercentage;
    }

    /**
     * Set the targetUtilizationPercentage property: Target CPU usage for the autoscaler.
     * 
     * @param targetUtilizationPercentage the targetUtilizationPercentage value to set.
     * @return the TargetUtilizationScaleSettings object itself.
     */
    public TargetUtilizationScaleSettings withTargetUtilizationPercentage(Integer targetUtilizationPercentage) {
        this.targetUtilizationPercentage = targetUtilizationPercentage;
        return this;
    }

    /**
     * Get the minInstances property: The minimum number of instances to always be present.
     * 
     * @return the minInstances value.
     */
    public Integer minInstances() {
        return this.minInstances;
    }

    /**
     * Set the minInstances property: The minimum number of instances to always be present.
     * 
     * @param minInstances the minInstances value to set.
     * @return the TargetUtilizationScaleSettings object itself.
     */
    public TargetUtilizationScaleSettings withMinInstances(Integer minInstances) {
        this.minInstances = minInstances;
        return this;
    }

    /**
     * Get the maxInstances property: The maximum number of instances that the deployment can scale to. The quota will
     * be reserved for max_instances.
     * 
     * @return the maxInstances value.
     */
    public Integer maxInstances() {
        return this.maxInstances;
    }

    /**
     * Set the maxInstances property: The maximum number of instances that the deployment can scale to. The quota will
     * be reserved for max_instances.
     * 
     * @param maxInstances the maxInstances value to set.
     * @return the TargetUtilizationScaleSettings object itself.
     */
    public TargetUtilizationScaleSettings withMaxInstances(Integer maxInstances) {
        this.maxInstances = maxInstances;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scaleType", this.scaleType == null ? null : this.scaleType.toString());
        jsonWriter.writeStringField("pollingInterval", CoreUtils.durationToStringWithDays(this.pollingInterval));
        jsonWriter.writeNumberField("targetUtilizationPercentage", this.targetUtilizationPercentage);
        jsonWriter.writeNumberField("minInstances", this.minInstances);
        jsonWriter.writeNumberField("maxInstances", this.maxInstances);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetUtilizationScaleSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetUtilizationScaleSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetUtilizationScaleSettings.
     */
    public static TargetUtilizationScaleSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetUtilizationScaleSettings deserializedTargetUtilizationScaleSettings
                = new TargetUtilizationScaleSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scaleType".equals(fieldName)) {
                    deserializedTargetUtilizationScaleSettings.scaleType = ScaleType.fromString(reader.getString());
                } else if ("pollingInterval".equals(fieldName)) {
                    deserializedTargetUtilizationScaleSettings.pollingInterval
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("targetUtilizationPercentage".equals(fieldName)) {
                    deserializedTargetUtilizationScaleSettings.targetUtilizationPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("minInstances".equals(fieldName)) {
                    deserializedTargetUtilizationScaleSettings.minInstances = reader.getNullable(JsonReader::getInt);
                } else if ("maxInstances".equals(fieldName)) {
                    deserializedTargetUtilizationScaleSettings.maxInstances = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetUtilizationScaleSettings;
        });
    }
}
