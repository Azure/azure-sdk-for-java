// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The DiagnoseResponseResultValue model.
 */
@Fluent
public final class DiagnoseResponseResultValue implements JsonSerializable<DiagnoseResponseResultValue> {
    /*
     * The userDefinedRouteResults property.
     */
    private List<DiagnoseResult> userDefinedRouteResults;

    /*
     * The networkSecurityRuleResults property.
     */
    private List<DiagnoseResult> networkSecurityRuleResults;

    /*
     * The resourceLockResults property.
     */
    private List<DiagnoseResult> resourceLockResults;

    /*
     * The dnsResolutionResults property.
     */
    private List<DiagnoseResult> dnsResolutionResults;

    /*
     * The storageAccountResults property.
     */
    private List<DiagnoseResult> storageAccountResults;

    /*
     * The keyVaultResults property.
     */
    private List<DiagnoseResult> keyVaultResults;

    /*
     * The containerRegistryResults property.
     */
    private List<DiagnoseResult> containerRegistryResults;

    /*
     * The applicationInsightsResults property.
     */
    private List<DiagnoseResult> applicationInsightsResults;

    /*
     * The otherResults property.
     */
    private List<DiagnoseResult> otherResults;

    /**
     * Creates an instance of DiagnoseResponseResultValue class.
     */
    public DiagnoseResponseResultValue() {
    }

    /**
     * Get the userDefinedRouteResults property: The userDefinedRouteResults property.
     * 
     * @return the userDefinedRouteResults value.
     */
    public List<DiagnoseResult> userDefinedRouteResults() {
        return this.userDefinedRouteResults;
    }

    /**
     * Set the userDefinedRouteResults property: The userDefinedRouteResults property.
     * 
     * @param userDefinedRouteResults the userDefinedRouteResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withUserDefinedRouteResults(List<DiagnoseResult> userDefinedRouteResults) {
        this.userDefinedRouteResults = userDefinedRouteResults;
        return this;
    }

    /**
     * Get the networkSecurityRuleResults property: The networkSecurityRuleResults property.
     * 
     * @return the networkSecurityRuleResults value.
     */
    public List<DiagnoseResult> networkSecurityRuleResults() {
        return this.networkSecurityRuleResults;
    }

    /**
     * Set the networkSecurityRuleResults property: The networkSecurityRuleResults property.
     * 
     * @param networkSecurityRuleResults the networkSecurityRuleResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withNetworkSecurityRuleResults(List<DiagnoseResult> networkSecurityRuleResults) {
        this.networkSecurityRuleResults = networkSecurityRuleResults;
        return this;
    }

    /**
     * Get the resourceLockResults property: The resourceLockResults property.
     * 
     * @return the resourceLockResults value.
     */
    public List<DiagnoseResult> resourceLockResults() {
        return this.resourceLockResults;
    }

    /**
     * Set the resourceLockResults property: The resourceLockResults property.
     * 
     * @param resourceLockResults the resourceLockResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withResourceLockResults(List<DiagnoseResult> resourceLockResults) {
        this.resourceLockResults = resourceLockResults;
        return this;
    }

    /**
     * Get the dnsResolutionResults property: The dnsResolutionResults property.
     * 
     * @return the dnsResolutionResults value.
     */
    public List<DiagnoseResult> dnsResolutionResults() {
        return this.dnsResolutionResults;
    }

    /**
     * Set the dnsResolutionResults property: The dnsResolutionResults property.
     * 
     * @param dnsResolutionResults the dnsResolutionResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withDnsResolutionResults(List<DiagnoseResult> dnsResolutionResults) {
        this.dnsResolutionResults = dnsResolutionResults;
        return this;
    }

    /**
     * Get the storageAccountResults property: The storageAccountResults property.
     * 
     * @return the storageAccountResults value.
     */
    public List<DiagnoseResult> storageAccountResults() {
        return this.storageAccountResults;
    }

    /**
     * Set the storageAccountResults property: The storageAccountResults property.
     * 
     * @param storageAccountResults the storageAccountResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withStorageAccountResults(List<DiagnoseResult> storageAccountResults) {
        this.storageAccountResults = storageAccountResults;
        return this;
    }

    /**
     * Get the keyVaultResults property: The keyVaultResults property.
     * 
     * @return the keyVaultResults value.
     */
    public List<DiagnoseResult> keyVaultResults() {
        return this.keyVaultResults;
    }

    /**
     * Set the keyVaultResults property: The keyVaultResults property.
     * 
     * @param keyVaultResults the keyVaultResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withKeyVaultResults(List<DiagnoseResult> keyVaultResults) {
        this.keyVaultResults = keyVaultResults;
        return this;
    }

    /**
     * Get the containerRegistryResults property: The containerRegistryResults property.
     * 
     * @return the containerRegistryResults value.
     */
    public List<DiagnoseResult> containerRegistryResults() {
        return this.containerRegistryResults;
    }

    /**
     * Set the containerRegistryResults property: The containerRegistryResults property.
     * 
     * @param containerRegistryResults the containerRegistryResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withContainerRegistryResults(List<DiagnoseResult> containerRegistryResults) {
        this.containerRegistryResults = containerRegistryResults;
        return this;
    }

    /**
     * Get the applicationInsightsResults property: The applicationInsightsResults property.
     * 
     * @return the applicationInsightsResults value.
     */
    public List<DiagnoseResult> applicationInsightsResults() {
        return this.applicationInsightsResults;
    }

    /**
     * Set the applicationInsightsResults property: The applicationInsightsResults property.
     * 
     * @param applicationInsightsResults the applicationInsightsResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withApplicationInsightsResults(List<DiagnoseResult> applicationInsightsResults) {
        this.applicationInsightsResults = applicationInsightsResults;
        return this;
    }

    /**
     * Get the otherResults property: The otherResults property.
     * 
     * @return the otherResults value.
     */
    public List<DiagnoseResult> otherResults() {
        return this.otherResults;
    }

    /**
     * Set the otherResults property: The otherResults property.
     * 
     * @param otherResults the otherResults value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withOtherResults(List<DiagnoseResult> otherResults) {
        this.otherResults = otherResults;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userDefinedRouteResults() != null) {
            userDefinedRouteResults().forEach(e -> e.validate());
        }
        if (networkSecurityRuleResults() != null) {
            networkSecurityRuleResults().forEach(e -> e.validate());
        }
        if (resourceLockResults() != null) {
            resourceLockResults().forEach(e -> e.validate());
        }
        if (dnsResolutionResults() != null) {
            dnsResolutionResults().forEach(e -> e.validate());
        }
        if (storageAccountResults() != null) {
            storageAccountResults().forEach(e -> e.validate());
        }
        if (keyVaultResults() != null) {
            keyVaultResults().forEach(e -> e.validate());
        }
        if (containerRegistryResults() != null) {
            containerRegistryResults().forEach(e -> e.validate());
        }
        if (applicationInsightsResults() != null) {
            applicationInsightsResults().forEach(e -> e.validate());
        }
        if (otherResults() != null) {
            otherResults().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("userDefinedRouteResults", this.userDefinedRouteResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("networkSecurityRuleResults", this.networkSecurityRuleResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("resourceLockResults", this.resourceLockResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("dnsResolutionResults", this.dnsResolutionResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("storageAccountResults", this.storageAccountResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("keyVaultResults", this.keyVaultResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("containerRegistryResults", this.containerRegistryResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("applicationInsightsResults", this.applicationInsightsResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("otherResults", this.otherResults, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnoseResponseResultValue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnoseResponseResultValue if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiagnoseResponseResultValue.
     */
    public static DiagnoseResponseResultValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnoseResponseResultValue deserializedDiagnoseResponseResultValue = new DiagnoseResponseResultValue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userDefinedRouteResults".equals(fieldName)) {
                    List<DiagnoseResult> userDefinedRouteResults
                        = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.userDefinedRouteResults = userDefinedRouteResults;
                } else if ("networkSecurityRuleResults".equals(fieldName)) {
                    List<DiagnoseResult> networkSecurityRuleResults
                        = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.networkSecurityRuleResults = networkSecurityRuleResults;
                } else if ("resourceLockResults".equals(fieldName)) {
                    List<DiagnoseResult> resourceLockResults
                        = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.resourceLockResults = resourceLockResults;
                } else if ("dnsResolutionResults".equals(fieldName)) {
                    List<DiagnoseResult> dnsResolutionResults
                        = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.dnsResolutionResults = dnsResolutionResults;
                } else if ("storageAccountResults".equals(fieldName)) {
                    List<DiagnoseResult> storageAccountResults
                        = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.storageAccountResults = storageAccountResults;
                } else if ("keyVaultResults".equals(fieldName)) {
                    List<DiagnoseResult> keyVaultResults
                        = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.keyVaultResults = keyVaultResults;
                } else if ("containerRegistryResults".equals(fieldName)) {
                    List<DiagnoseResult> containerRegistryResults
                        = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.containerRegistryResults = containerRegistryResults;
                } else if ("applicationInsightsResults".equals(fieldName)) {
                    List<DiagnoseResult> applicationInsightsResults
                        = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.applicationInsightsResults = applicationInsightsResults;
                } else if ("otherResults".equals(fieldName)) {
                    List<DiagnoseResult> otherResults = reader.readArray(reader1 -> DiagnoseResult.fromJson(reader1));
                    deserializedDiagnoseResponseResultValue.otherResults = otherResults;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnoseResponseResultValue;
        });
    }
}
