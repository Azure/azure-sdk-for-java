// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Monitoring target definition.
 */
@Fluent
public final class MonitoringTarget implements JsonSerializable<MonitoringTarget> {
    /*
     * Reference to the model asset targeted by this monitor.
     */
    private String modelId;

    /*
     * Reference to the deployment asset targeted by this monitor.
     */
    private String deploymentId;

    /*
     * [Required] The machine learning task type of the monitored model.
     */
    private ModelTaskType taskType;

    /**
     * Creates an instance of MonitoringTarget class.
     */
    public MonitoringTarget() {
    }

    /**
     * Get the modelId property: Reference to the model asset targeted by this monitor.
     * 
     * @return the modelId value.
     */
    public String modelId() {
        return this.modelId;
    }

    /**
     * Set the modelId property: Reference to the model asset targeted by this monitor.
     * 
     * @param modelId the modelId value to set.
     * @return the MonitoringTarget object itself.
     */
    public MonitoringTarget withModelId(String modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * Get the deploymentId property: Reference to the deployment asset targeted by this monitor.
     * 
     * @return the deploymentId value.
     */
    public String deploymentId() {
        return this.deploymentId;
    }

    /**
     * Set the deploymentId property: Reference to the deployment asset targeted by this monitor.
     * 
     * @param deploymentId the deploymentId value to set.
     * @return the MonitoringTarget object itself.
     */
    public MonitoringTarget withDeploymentId(String deploymentId) {
        this.deploymentId = deploymentId;
        return this;
    }

    /**
     * Get the taskType property: [Required] The machine learning task type of the monitored model.
     * 
     * @return the taskType value.
     */
    public ModelTaskType taskType() {
        return this.taskType;
    }

    /**
     * Set the taskType property: [Required] The machine learning task type of the monitored model.
     * 
     * @param taskType the taskType value to set.
     * @return the MonitoringTarget object itself.
     */
    public MonitoringTarget withTaskType(ModelTaskType taskType) {
        this.taskType = taskType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (taskType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property taskType in model MonitoringTarget"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitoringTarget.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("taskType", this.taskType == null ? null : this.taskType.toString());
        jsonWriter.writeStringField("modelId", this.modelId);
        jsonWriter.writeStringField("deploymentId", this.deploymentId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitoringTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitoringTarget if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MonitoringTarget.
     */
    public static MonitoringTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitoringTarget deserializedMonitoringTarget = new MonitoringTarget();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("taskType".equals(fieldName)) {
                    deserializedMonitoringTarget.taskType = ModelTaskType.fromString(reader.getString());
                } else if ("modelId".equals(fieldName)) {
                    deserializedMonitoringTarget.modelId = reader.getString();
                } else if ("deploymentId".equals(fieldName)) {
                    deserializedMonitoringTarget.deploymentId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitoringTarget;
        });
    }
}
