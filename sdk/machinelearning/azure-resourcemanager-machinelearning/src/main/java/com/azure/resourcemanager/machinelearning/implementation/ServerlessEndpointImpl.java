// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.fluent.models.ServerlessEndpointInner;
import com.azure.resourcemanager.machinelearning.models.EndpointAuthKeys;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.PartialManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.PartialMinimalTrackedResourceWithSkuAndIdentity;
import com.azure.resourcemanager.machinelearning.models.PartialSku;
import com.azure.resourcemanager.machinelearning.models.RegenerateEndpointKeysRequest;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpoint;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpointProperties;
import com.azure.resourcemanager.machinelearning.models.Sku;
import java.util.Collections;
import java.util.Map;

public final class ServerlessEndpointImpl
    implements ServerlessEndpoint, ServerlessEndpoint.Definition, ServerlessEndpoint.Update {
    private ServerlessEndpointInner innerObject;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ServerlessEndpointProperties properties() {
        return this.innerModel().properties();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ServerlessEndpointInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String name;

    private PartialMinimalTrackedResourceWithSkuAndIdentity updateBody;

    public ServerlessEndpointImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    public ServerlessEndpoint create() {
        this.innerObject = serviceManager.serviceClient()
            .getServerlessEndpoints()
            .createOrUpdate(resourceGroupName, workspaceName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public ServerlessEndpoint create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getServerlessEndpoints()
            .createOrUpdate(resourceGroupName, workspaceName, name, this.innerModel(), context);
        return this;
    }

    ServerlessEndpointImpl(String name,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = new ServerlessEndpointInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public ServerlessEndpointImpl update() {
        this.updateBody = new PartialMinimalTrackedResourceWithSkuAndIdentity();
        return this;
    }

    public ServerlessEndpoint apply() {
        this.innerObject = serviceManager.serviceClient()
            .getServerlessEndpoints()
            .update(resourceGroupName, workspaceName, name, updateBody, Context.NONE);
        return this;
    }

    public ServerlessEndpoint apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getServerlessEndpoints()
            .update(resourceGroupName, workspaceName, name, updateBody, context);
        return this;
    }

    ServerlessEndpointImpl(ServerlessEndpointInner innerObject,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.name = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "serverlessEndpoints");
    }

    public ServerlessEndpoint refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getServerlessEndpoints()
            .getWithResponse(resourceGroupName, workspaceName, name, Context.NONE)
            .getValue();
        return this;
    }

    public ServerlessEndpoint refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getServerlessEndpoints()
            .getWithResponse(resourceGroupName, workspaceName, name, context)
            .getValue();
        return this;
    }

    public Response<EndpointAuthKeys> listKeysWithResponse(Context context) {
        return serviceManager.serverlessEndpoints()
            .listKeysWithResponse(resourceGroupName, workspaceName, name, context);
    }

    public EndpointAuthKeys listKeys() {
        return serviceManager.serverlessEndpoints().listKeys(resourceGroupName, workspaceName, name);
    }

    public EndpointAuthKeys regenerateKeys(RegenerateEndpointKeysRequest body) {
        return serviceManager.serverlessEndpoints().regenerateKeys(resourceGroupName, workspaceName, name, body);
    }

    public EndpointAuthKeys regenerateKeys(RegenerateEndpointKeysRequest body, Context context) {
        return serviceManager.serverlessEndpoints()
            .regenerateKeys(resourceGroupName, workspaceName, name, body, context);
    }

    public ServerlessEndpointImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ServerlessEndpointImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ServerlessEndpointImpl withProperties(ServerlessEndpointProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public ServerlessEndpointImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public ServerlessEndpointImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public ServerlessEndpointImpl withIdentity(ManagedServiceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public ServerlessEndpointImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public ServerlessEndpointImpl withSku(PartialSku sku) {
        this.updateBody.withSku(sku);
        return this;
    }

    public ServerlessEndpointImpl withIdentity(PartialManagedServiceIdentity identity) {
        this.updateBody.withIdentity(identity);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
