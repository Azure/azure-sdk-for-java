// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * FQDN Outbound Rule for the managed network of a machine learning workspace.
 */
@Fluent
public final class FqdnOutboundRule extends OutboundRule {
    /*
     * Type of a managed network Outbound Rule of a machine learning workspace.
     */
    private RuleType type = RuleType.FQDN;

    /*
     * The destination property.
     */
    private String destination;

    /**
     * Creates an instance of FqdnOutboundRule class.
     */
    public FqdnOutboundRule() {
    }

    /**
     * Get the type property: Type of a managed network Outbound Rule of a machine learning workspace.
     * 
     * @return the type value.
     */
    @Override
    public RuleType type() {
        return this.type;
    }

    /**
     * Get the destination property: The destination property.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: The destination property.
     * 
     * @param destination the destination value to set.
     * @return the FqdnOutboundRule object itself.
     */
    public FqdnOutboundRule withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FqdnOutboundRule withCategory(RuleCategory category) {
        super.withCategory(category);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FqdnOutboundRule withStatus(RuleStatus status) {
        super.withStatus(status);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", category() == null ? null : category().toString());
        jsonWriter.writeStringField("status", status() == null ? null : status().toString());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("destination", this.destination);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FqdnOutboundRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FqdnOutboundRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FqdnOutboundRule.
     */
    public static FqdnOutboundRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FqdnOutboundRule deserializedFqdnOutboundRule = new FqdnOutboundRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    deserializedFqdnOutboundRule.withCategory(RuleCategory.fromString(reader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedFqdnOutboundRule.withStatus(RuleStatus.fromString(reader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedFqdnOutboundRule.type = RuleType.fromString(reader.getString());
                } else if ("destination".equals(fieldName)) {
                    deserializedFqdnOutboundRule.destination = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFqdnOutboundRule;
        });
    }
}
