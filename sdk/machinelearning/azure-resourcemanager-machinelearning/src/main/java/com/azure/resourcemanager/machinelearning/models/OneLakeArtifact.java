// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * OneLake artifact (data source) configuration.
 */
@Fluent
public class OneLakeArtifact implements JsonSerializable<OneLakeArtifact> {
    /*
     * [Required] OneLake artifact type
     */
    private OneLakeArtifactType artifactType = OneLakeArtifactType.fromString("OneLakeArtifact");

    /*
     * [Required] OneLake artifact name
     */
    private String artifactName;

    /**
     * Creates an instance of OneLakeArtifact class.
     */
    public OneLakeArtifact() {
    }

    /**
     * Get the artifactType property: [Required] OneLake artifact type.
     * 
     * @return the artifactType value.
     */
    public OneLakeArtifactType artifactType() {
        return this.artifactType;
    }

    /**
     * Get the artifactName property: [Required] OneLake artifact name.
     * 
     * @return the artifactName value.
     */
    public String artifactName() {
        return this.artifactName;
    }

    /**
     * Set the artifactName property: [Required] OneLake artifact name.
     * 
     * @param artifactName the artifactName value to set.
     * @return the OneLakeArtifact object itself.
     */
    public OneLakeArtifact withArtifactName(String artifactName) {
        this.artifactName = artifactName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (artifactName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property artifactName in model OneLakeArtifact"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OneLakeArtifact.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("artifactName", this.artifactName);
        jsonWriter.writeStringField("artifactType", this.artifactType == null ? null : this.artifactType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OneLakeArtifact from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OneLakeArtifact if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OneLakeArtifact.
     */
    public static OneLakeArtifact fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("artifactType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("LakeHouse".equals(discriminatorValue)) {
                    return LakeHouseArtifact.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static OneLakeArtifact fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OneLakeArtifact deserializedOneLakeArtifact = new OneLakeArtifact();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifactName".equals(fieldName)) {
                    deserializedOneLakeArtifact.artifactName = reader.getString();
                } else if ("artifactType".equals(fieldName)) {
                    deserializedOneLakeArtifact.artifactType = OneLakeArtifactType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOneLakeArtifact;
        });
    }
}
