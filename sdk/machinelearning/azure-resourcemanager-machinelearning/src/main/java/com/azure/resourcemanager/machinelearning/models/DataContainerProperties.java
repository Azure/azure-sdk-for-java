// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Container for data asset versions.
 */
@Fluent
public final class DataContainerProperties extends AssetContainer {
    /*
     * [Required] Specifies the type of data.
     */
    private DataType dataType;

    /*
     * The latest version inside this container.
     */
    private String latestVersion;

    /*
     * The next auto incremental version
     */
    private String nextVersion;

    /**
     * Creates an instance of DataContainerProperties class.
     */
    public DataContainerProperties() {
    }

    /**
     * Get the dataType property: [Required] Specifies the type of data.
     * 
     * @return the dataType value.
     */
    public DataType dataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: [Required] Specifies the type of data.
     * 
     * @param dataType the dataType value to set.
     * @return the DataContainerProperties object itself.
     */
    public DataContainerProperties withDataType(DataType dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Get the latestVersion property: The latest version inside this container.
     * 
     * @return the latestVersion value.
     */
    @Override
    public String latestVersion() {
        return this.latestVersion;
    }

    /**
     * Get the nextVersion property: The next auto incremental version.
     * 
     * @return the nextVersion value.
     */
    @Override
    public String nextVersion() {
        return this.nextVersion;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataContainerProperties withIsArchived(Boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataContainerProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataContainerProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataContainerProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dataType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataType in model DataContainerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataContainerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isArchived", isArchived());
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataContainerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataContainerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataContainerProperties.
     */
    public static DataContainerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataContainerProperties deserializedDataContainerProperties = new DataContainerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedDataContainerProperties.withDescription(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDataContainerProperties.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedDataContainerProperties.withProperties(properties);
                } else if ("isArchived".equals(fieldName)) {
                    deserializedDataContainerProperties.withIsArchived(reader.getNullable(JsonReader::getBoolean));
                } else if ("latestVersion".equals(fieldName)) {
                    deserializedDataContainerProperties.latestVersion = reader.getString();
                } else if ("nextVersion".equals(fieldName)) {
                    deserializedDataContainerProperties.nextVersion = reader.getString();
                } else if ("dataType".equals(fieldName)) {
                    deserializedDataContainerProperties.dataType = DataType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataContainerProperties;
        });
    }
}
