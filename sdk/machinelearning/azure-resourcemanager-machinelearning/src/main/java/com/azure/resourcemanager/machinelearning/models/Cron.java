// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The workflow trigger cron for ComputeStartStop schedule type.
 */
@Fluent
public final class Cron implements JsonSerializable<Cron> {
    /*
     * The start time in yyyy-MM-ddTHH:mm:ss format.
     */
    private String startTime;

    /*
     * Specifies time zone in which the schedule runs.
     * TimeZone should follow Windows time zone format. Refer:
     * https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
     */
    private String timeZone;

    /*
     * [Required] Specifies cron expression of schedule.
     * The expression should follow NCronTab format.
     */
    private String expression;

    /**
     * Creates an instance of Cron class.
     */
    public Cron() {
    }

    /**
     * Get the startTime property: The start time in yyyy-MM-ddTHH:mm:ss format.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time in yyyy-MM-ddTHH:mm:ss format.
     * 
     * @param startTime the startTime value to set.
     * @return the Cron object itself.
     */
    public Cron withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the timeZone property: Specifies time zone in which the schedule runs.
     * TimeZone should follow Windows time zone format. Refer:
     * https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: Specifies time zone in which the schedule runs.
     * TimeZone should follow Windows time zone format. Refer:
     * https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11.
     * 
     * @param timeZone the timeZone value to set.
     * @return the Cron object itself.
     */
    public Cron withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the expression property: [Required] Specifies cron expression of schedule.
     * The expression should follow NCronTab format.
     * 
     * @return the expression value.
     */
    public String expression() {
        return this.expression;
    }

    /**
     * Set the expression property: [Required] Specifies cron expression of schedule.
     * The expression should follow NCronTab format.
     * 
     * @param expression the expression value to set.
     * @return the Cron object itself.
     */
    public Cron withExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime", this.startTime);
        jsonWriter.writeStringField("timeZone", this.timeZone);
        jsonWriter.writeStringField("expression", this.expression);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Cron from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Cron if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Cron.
     */
    public static Cron fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Cron deserializedCron = new Cron();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedCron.startTime = reader.getString();
                } else if ("timeZone".equals(fieldName)) {
                    deserializedCron.timeZone = reader.getString();
                } else if ("expression".equals(fieldName)) {
                    deserializedCron.expression = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCron;
        });
    }
}
