// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpoint;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointConnection;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.machinelearning.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"hdbitq\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"jsgomrih\",\"actionsRequired\":\"grmsdbv\"},\"provisioningState\":\"Deleting\"},\"identity\":{\"principalId\":\"5aafabef-0191-43e6-8b0e-54177551d810\",\"tenantId\":\"ceddbe59-d31f-49a0-b381-faf4959bae4c\",\"type\":\"None\",\"userAssignedIdentities\":{\"dpbceh\":{\"principalId\":\"700d7ffe-e240-4348-8736-ccccd1a0abb2\",\"clientId\":\"0f6cfbbb-22cc-4fcb-9c2c-8d5a066c3eba\"},\"psesboynpyt\":{\"principalId\":\"98c29aeb-9931-4a36-bc62-ca05f3451233\",\"clientId\":\"53c394c3-65c9-4524-8993-5876360f910a\"},\"rvkxtfctaneti\":{\"principalId\":\"532bca4b-d6b8-46a3-b824-962ae539a0e1\",\"clientId\":\"1eeb7620-f8c5-45d6-862d-46e27172ee40\"},\"dhnpjnezjighdu\":{\"principalId\":\"9b48b8ee-e140-4a6e-82cd-780ae2d7ff45\",\"clientId\":\"64706117-bb9b-4e4c-9891-eb99f758a787\"}}},\"location\":\"tpmrzwvwetqf\",\"tags\":{\"bsotoc\":\"vfhuqhngqqx\",\"atwxpxb\":\"mrttujyd\"},\"sku\":{\"name\":\"dhxbboceksramqc\",\"tier\":\"Premium\",\"size\":\"fnlvvkswurxdq\",\"family\":\"hauimn\",\"capacity\":1536425318},\"id\":\"q\",\"name\":\"wq\",\"type\":\"nbnwi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("fy")
            .withExistingWorkspace("q", "rtgqrqkk")
            .withRegion("eadnyciw")
            .withTags(mapOf("vzohabbriz", "lykqadfge", "qsxofxqnkiuok", "adjrsbgailjqovqm", "bhiebruptls", "ltsxooi"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("fiozttcbi", new UserAssignedIdentity(), "gkudsozodwjc", new UserAssignedIdentity(),
                        "yxryqyc", new UserAssignedIdentity(), "rlcfgdwzauzf", new UserAssignedIdentity())))
            .withSku(new Sku().withName("qzgaqsosrnjlvgrg")
                .withTier(SkuTier.PREMIUM)
                .withSize("oxrqhjninpeswv")
                .withFamily("qkgebz")
                .withCapacity(156493894))
            .withPrivateEndpoint(new PrivateEndpoint())
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointServiceConnectionStatus.TIMEOUT)
                    .withDescription("pnyjtu")
                    .withActionsRequired("zyvextchslro"))
            .create();

        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("tpmrzwvwetqf", response.location());
        Assertions.assertEquals("vfhuqhngqqx", response.tags().get("bsotoc"));
        Assertions.assertEquals("dhxbboceksramqc", response.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.sku().tier());
        Assertions.assertEquals("fnlvvkswurxdq", response.sku().size());
        Assertions.assertEquals("hauimn", response.sku().family());
        Assertions.assertEquals(1536425318, response.sku().capacity());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.REJECTED,
            response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("jsgomrih", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("grmsdbv", response.privateLinkServiceConnectionState().actionsRequired());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
