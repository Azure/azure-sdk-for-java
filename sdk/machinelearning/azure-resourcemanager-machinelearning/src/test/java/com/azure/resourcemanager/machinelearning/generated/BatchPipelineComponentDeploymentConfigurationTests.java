// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BatchPipelineComponentDeploymentConfiguration;
import com.azure.resourcemanager.machinelearning.models.IdAssetReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BatchPipelineComponentDeploymentConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BatchPipelineComponentDeploymentConfiguration model = BinaryData.fromString(
            "{\"deploymentConfigurationType\":\"PipelineComponent\",\"componentId\":{\"referenceType\":\"Id\",\"assetId\":\"jgvhxcc\"},\"description\":\"kakmkookbputmgvm\",\"settings\":{\"ow\":\"kmlwkt\",\"ejtgzjxxl\":\"kroyrdurxflzqji\",\"lzuqloiwyayyzivr\":\"e\",\"jlei\":\"itcdqlhchwhrk\"},\"tags\":{\"nsmy\":\"fiplhx\"}}")
            .toObject(BatchPipelineComponentDeploymentConfiguration.class);
        Assertions.assertEquals("jgvhxcc", model.componentId().assetId());
        Assertions.assertEquals("kakmkookbputmgvm", model.description());
        Assertions.assertEquals("kmlwkt", model.settings().get("ow"));
        Assertions.assertEquals("fiplhx", model.tags().get("nsmy"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BatchPipelineComponentDeploymentConfiguration model = new BatchPipelineComponentDeploymentConfiguration()
            .withComponentId(new IdAssetReference().withAssetId("jgvhxcc"))
            .withDescription("kakmkookbputmgvm")
            .withSettings(
                mapOf("ow", "kmlwkt", "ejtgzjxxl", "kroyrdurxflzqji", "lzuqloiwyayyzivr", "e", "jlei", "itcdqlhchwhrk"))
            .withTags(mapOf("nsmy", "fiplhx"));
        model = BinaryData.fromObject(model).toObject(BatchPipelineComponentDeploymentConfiguration.class);
        Assertions.assertEquals("jgvhxcc", model.componentId().assetId());
        Assertions.assertEquals("kakmkookbputmgvm", model.description());
        Assertions.assertEquals("kmlwkt", model.settings().get("ow"));
        Assertions.assertEquals("fiplhx", model.tags().get("nsmy"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
