// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.ModelSize;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import com.azure.resourcemanager.machinelearning.models.ValidationMetricType;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageModelSettingsObjectDetectionTests {
    @Test
    public void testDeserialize() {
        ImageModelSettingsObjectDetection model =
            BinaryData
                .fromString(
                    "{\"boxDetectionsPerImage\":804515882,\"boxScoreThreshold\":15.321117,\"imageSize\":1524104857,\"maxSize\":949610294,\"minSize\":815205245,\"modelSize\":\"ExtraLarge\",\"multiScale\":true,\"nmsIouThreshold\":69.315125,\"tileGridSize\":\"cqypz\",\"tileOverlapRatio\":72.77272,\"tilePredictionsNmsThreshold\":67.758354,\"validationIouThreshold\":58.685936,\"validationMetricType\":\"None\",\"advancedSettings\":\"y\",\"amsGradient\":false,\"augmentations\":\"fxptpqayam\",\"beta1\":11.177516,\"beta2\":19.83164,\"checkpointFrequency\":2119061617,\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"mode\":\"EvalDownload\",\"uri\":\"nxocuul\",\"description\":\"j\"},\"checkpointRunId\":\"oy\",\"distributed\":true,\"earlyStopping\":true,\"earlyStoppingDelay\":2119144658,\"earlyStoppingPatience\":1382978370,\"enableOnnxNormalization\":true,\"evaluationFrequency\":1632204831,\"gradientAccumulationStep\":1136798703,\"layersToFreeze\":1187954647,\"learningRate\":22.63679,\"learningRateScheduler\":\"None\",\"modelName\":\"bsgzl\",\"momentum\":17.559093,\"nesterov\":true,\"numberOfEpochs\":1200964726,\"numberOfWorkers\":726386548,\"optimizer\":\"Adamw\",\"randomSeed\":1010779736,\"stepLRGamma\":73.46581,\"stepLRStepSize\":1919866291,\"trainingBatchSize\":97810383,\"validationBatchSize\":805060035,\"warmupCosineLRCycles\":76.252426,\"warmupCosineLRWarmupEpochs\":1758860426,\"weightDecay\":56.6569}")
                .toObject(ImageModelSettingsObjectDetection.class);
        Assertions.assertEquals("y", model.advancedSettings());
        Assertions.assertEquals(false, model.amsGradient());
        Assertions.assertEquals("fxptpqayam", model.augmentations());
        Assertions.assertEquals(11.177516F, model.beta1());
        Assertions.assertEquals(19.83164F, model.beta2());
        Assertions.assertEquals(2119061617, model.checkpointFrequency());
        Assertions.assertEquals("j", model.checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.checkpointModel().mode());
        Assertions.assertEquals("nxocuul", model.checkpointModel().uri());
        Assertions.assertEquals("oy", model.checkpointRunId());
        Assertions.assertEquals(true, model.distributed());
        Assertions.assertEquals(true, model.earlyStopping());
        Assertions.assertEquals(2119144658, model.earlyStoppingDelay());
        Assertions.assertEquals(1382978370, model.earlyStoppingPatience());
        Assertions.assertEquals(true, model.enableOnnxNormalization());
        Assertions.assertEquals(1632204831, model.evaluationFrequency());
        Assertions.assertEquals(1136798703, model.gradientAccumulationStep());
        Assertions.assertEquals(1187954647, model.layersToFreeze());
        Assertions.assertEquals(22.63679F, model.learningRate());
        Assertions.assertEquals(LearningRateScheduler.NONE, model.learningRateScheduler());
        Assertions.assertEquals("bsgzl", model.modelName());
        Assertions.assertEquals(17.559093F, model.momentum());
        Assertions.assertEquals(true, model.nesterov());
        Assertions.assertEquals(1200964726, model.numberOfEpochs());
        Assertions.assertEquals(726386548, model.numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAMW, model.optimizer());
        Assertions.assertEquals(1010779736, model.randomSeed());
        Assertions.assertEquals(73.46581F, model.stepLRGamma());
        Assertions.assertEquals(1919866291, model.stepLRStepSize());
        Assertions.assertEquals(97810383, model.trainingBatchSize());
        Assertions.assertEquals(805060035, model.validationBatchSize());
        Assertions.assertEquals(76.252426F, model.warmupCosineLRCycles());
        Assertions.assertEquals(1758860426, model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(56.6569F, model.weightDecay());
        Assertions.assertEquals(804515882, model.boxDetectionsPerImage());
        Assertions.assertEquals(15.321117F, model.boxScoreThreshold());
        Assertions.assertEquals(1524104857, model.imageSize());
        Assertions.assertEquals(949610294, model.maxSize());
        Assertions.assertEquals(815205245, model.minSize());
        Assertions.assertEquals(ModelSize.EXTRA_LARGE, model.modelSize());
        Assertions.assertEquals(true, model.multiScale());
        Assertions.assertEquals(69.315125F, model.nmsIouThreshold());
        Assertions.assertEquals("cqypz", model.tileGridSize());
        Assertions.assertEquals(72.77272F, model.tileOverlapRatio());
        Assertions.assertEquals(67.758354F, model.tilePredictionsNmsThreshold());
        Assertions.assertEquals(58.685936F, model.validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.NONE, model.validationMetricType());
    }

    @Test
    public void testSerialize() {
        ImageModelSettingsObjectDetection model =
            new ImageModelSettingsObjectDetection()
                .withAdvancedSettings("y")
                .withAmsGradient(false)
                .withAugmentations("fxptpqayam")
                .withBeta1(11.177516F)
                .withBeta2(19.83164F)
                .withCheckpointFrequency(2119061617)
                .withCheckpointModel(
                    new MLFlowModelJobInput()
                        .withDescription("j")
                        .withMode(InputDeliveryMode.EVAL_DOWNLOAD)
                        .withUri("nxocuul"))
                .withCheckpointRunId("oy")
                .withDistributed(true)
                .withEarlyStopping(true)
                .withEarlyStoppingDelay(2119144658)
                .withEarlyStoppingPatience(1382978370)
                .withEnableOnnxNormalization(true)
                .withEvaluationFrequency(1632204831)
                .withGradientAccumulationStep(1136798703)
                .withLayersToFreeze(1187954647)
                .withLearningRate(22.63679F)
                .withLearningRateScheduler(LearningRateScheduler.NONE)
                .withModelName("bsgzl")
                .withMomentum(17.559093F)
                .withNesterov(true)
                .withNumberOfEpochs(1200964726)
                .withNumberOfWorkers(726386548)
                .withOptimizer(StochasticOptimizer.ADAMW)
                .withRandomSeed(1010779736)
                .withStepLRGamma(73.46581F)
                .withStepLRStepSize(1919866291)
                .withTrainingBatchSize(97810383)
                .withValidationBatchSize(805060035)
                .withWarmupCosineLRCycles(76.252426F)
                .withWarmupCosineLRWarmupEpochs(1758860426)
                .withWeightDecay(56.6569F)
                .withBoxDetectionsPerImage(804515882)
                .withBoxScoreThreshold(15.321117F)
                .withImageSize(1524104857)
                .withMaxSize(949610294)
                .withMinSize(815205245)
                .withModelSize(ModelSize.EXTRA_LARGE)
                .withMultiScale(true)
                .withNmsIouThreshold(69.315125F)
                .withTileGridSize("cqypz")
                .withTileOverlapRatio(72.77272F)
                .withTilePredictionsNmsThreshold(67.758354F)
                .withValidationIouThreshold(58.685936F)
                .withValidationMetricType(ValidationMetricType.NONE);
        model = BinaryData.fromObject(model).toObject(ImageModelSettingsObjectDetection.class);
        Assertions.assertEquals("y", model.advancedSettings());
        Assertions.assertEquals(false, model.amsGradient());
        Assertions.assertEquals("fxptpqayam", model.augmentations());
        Assertions.assertEquals(11.177516F, model.beta1());
        Assertions.assertEquals(19.83164F, model.beta2());
        Assertions.assertEquals(2119061617, model.checkpointFrequency());
        Assertions.assertEquals("j", model.checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.checkpointModel().mode());
        Assertions.assertEquals("nxocuul", model.checkpointModel().uri());
        Assertions.assertEquals("oy", model.checkpointRunId());
        Assertions.assertEquals(true, model.distributed());
        Assertions.assertEquals(true, model.earlyStopping());
        Assertions.assertEquals(2119144658, model.earlyStoppingDelay());
        Assertions.assertEquals(1382978370, model.earlyStoppingPatience());
        Assertions.assertEquals(true, model.enableOnnxNormalization());
        Assertions.assertEquals(1632204831, model.evaluationFrequency());
        Assertions.assertEquals(1136798703, model.gradientAccumulationStep());
        Assertions.assertEquals(1187954647, model.layersToFreeze());
        Assertions.assertEquals(22.63679F, model.learningRate());
        Assertions.assertEquals(LearningRateScheduler.NONE, model.learningRateScheduler());
        Assertions.assertEquals("bsgzl", model.modelName());
        Assertions.assertEquals(17.559093F, model.momentum());
        Assertions.assertEquals(true, model.nesterov());
        Assertions.assertEquals(1200964726, model.numberOfEpochs());
        Assertions.assertEquals(726386548, model.numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAMW, model.optimizer());
        Assertions.assertEquals(1010779736, model.randomSeed());
        Assertions.assertEquals(73.46581F, model.stepLRGamma());
        Assertions.assertEquals(1919866291, model.stepLRStepSize());
        Assertions.assertEquals(97810383, model.trainingBatchSize());
        Assertions.assertEquals(805060035, model.validationBatchSize());
        Assertions.assertEquals(76.252426F, model.warmupCosineLRCycles());
        Assertions.assertEquals(1758860426, model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(56.6569F, model.weightDecay());
        Assertions.assertEquals(804515882, model.boxDetectionsPerImage());
        Assertions.assertEquals(15.321117F, model.boxScoreThreshold());
        Assertions.assertEquals(1524104857, model.imageSize());
        Assertions.assertEquals(949610294, model.maxSize());
        Assertions.assertEquals(815205245, model.minSize());
        Assertions.assertEquals(ModelSize.EXTRA_LARGE, model.modelSize());
        Assertions.assertEquals(true, model.multiScale());
        Assertions.assertEquals(69.315125F, model.nmsIouThreshold());
        Assertions.assertEquals("cqypz", model.tileGridSize());
        Assertions.assertEquals(72.77272F, model.tileOverlapRatio());
        Assertions.assertEquals(67.758354F, model.tilePredictionsNmsThreshold());
        Assertions.assertEquals(58.685936F, model.validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.NONE, model.validationMetricType());
    }
}
