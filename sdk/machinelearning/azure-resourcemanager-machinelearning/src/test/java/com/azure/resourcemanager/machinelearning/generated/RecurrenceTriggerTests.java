// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.RecurrenceSchedule;
import com.azure.resourcemanager.machinelearning.models.RecurrenceTrigger;
import com.azure.resourcemanager.machinelearning.models.WeekDay;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RecurrenceTriggerTests {
    @Test
    public void testDeserialize() {
        RecurrenceTrigger model =
            BinaryData
                .fromString(
                    "{\"triggerType\":\"Recurrence\",\"frequency\":\"Minute\",\"interval\":451158053,\"schedule\":{\"hours\":[481624861,1888372861,1827343978],\"minutes\":[166288318],\"monthDays\":[1307302388,589113457,1862922267],\"weekDays\":[\"Monday\"]},\"endTime\":\"xv\",\"startTime\":\"asbcrymodizrx\",\"timeZone\":\"obdxnazpmkmlm\"}")
                .toObject(RecurrenceTrigger.class);
        Assertions.assertEquals("xv", model.endTime());
        Assertions.assertEquals("asbcrymodizrx", model.startTime());
        Assertions.assertEquals("obdxnazpmkmlm", model.timeZone());
        Assertions.assertEquals(RecurrenceFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(451158053, model.interval());
        Assertions.assertEquals(481624861, model.schedule().hours().get(0));
        Assertions.assertEquals(166288318, model.schedule().minutes().get(0));
        Assertions.assertEquals(1307302388, model.schedule().monthDays().get(0));
        Assertions.assertEquals(WeekDay.MONDAY, model.schedule().weekDays().get(0));
    }

    @Test
    public void testSerialize() {
        RecurrenceTrigger model =
            new RecurrenceTrigger()
                .withEndTime("xv")
                .withStartTime("asbcrymodizrx")
                .withTimeZone("obdxnazpmkmlm")
                .withFrequency(RecurrenceFrequency.MINUTE)
                .withInterval(451158053)
                .withSchedule(
                    new RecurrenceSchedule()
                        .withHours(Arrays.asList(481624861, 1888372861, 1827343978))
                        .withMinutes(Arrays.asList(166288318))
                        .withMonthDays(Arrays.asList(1307302388, 589113457, 1862922267))
                        .withWeekDays(Arrays.asList(WeekDay.MONDAY)));
        model = BinaryData.fromObject(model).toObject(RecurrenceTrigger.class);
        Assertions.assertEquals("xv", model.endTime());
        Assertions.assertEquals("asbcrymodizrx", model.startTime());
        Assertions.assertEquals("obdxnazpmkmlm", model.timeZone());
        Assertions.assertEquals(RecurrenceFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(451158053, model.interval());
        Assertions.assertEquals(481624861, model.schedule().hours().get(0));
        Assertions.assertEquals(166288318, model.schedule().minutes().get(0));
        Assertions.assertEquals(1307302388, model.schedule().monthDays().get(0));
        Assertions.assertEquals(WeekDay.MONDAY, model.schedule().weekDays().get(0));
    }
}
