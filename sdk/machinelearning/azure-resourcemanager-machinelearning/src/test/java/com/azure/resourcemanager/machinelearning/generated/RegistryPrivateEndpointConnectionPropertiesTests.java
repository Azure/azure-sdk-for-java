// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.RegistryPrivateEndpointConnectionProperties;
import com.azure.resourcemanager.machinelearning.models.EndpointServiceConnectionStatus;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointResource;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateLinkServiceConnectionState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RegistryPrivateEndpointConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RegistryPrivateEndpointConnectionProperties model = BinaryData.fromString(
            "{\"groupIds\":[\"dfqnhttwdowrczfj\"],\"privateEndpoint\":{\"subnetArmId\":\"uxxrkkmhmnulwemp\",\"id\":\"ifrhjulrsul\"},\"registryPrivateLinkServiceConnectionState\":{\"actionsRequired\":\"flu\",\"description\":\"awmhh\",\"status\":\"Approved\"},\"provisioningState\":\"friyrg\"}")
            .toObject(RegistryPrivateEndpointConnectionProperties.class);
        Assertions.assertEquals("dfqnhttwdowrczfj", model.groupIds().get(0));
        Assertions.assertEquals("uxxrkkmhmnulwemp", model.privateEndpoint().subnetArmId());
        Assertions.assertEquals("flu", model.registryPrivateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("awmhh", model.registryPrivateLinkServiceConnectionState().description());
        Assertions.assertEquals(EndpointServiceConnectionStatus.APPROVED,
            model.registryPrivateLinkServiceConnectionState().status());
        Assertions.assertEquals("friyrg", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RegistryPrivateEndpointConnectionProperties model
            = new RegistryPrivateEndpointConnectionProperties().withGroupIds(Arrays.asList("dfqnhttwdowrczfj"))
                .withPrivateEndpoint(new PrivateEndpointResource().withSubnetArmId("uxxrkkmhmnulwemp"))
                .withRegistryPrivateLinkServiceConnectionState(
                    new RegistryPrivateLinkServiceConnectionState().withActionsRequired("flu")
                        .withDescription("awmhh")
                        .withStatus(EndpointServiceConnectionStatus.APPROVED))
                .withProvisioningState("friyrg");
        model = BinaryData.fromObject(model).toObject(RegistryPrivateEndpointConnectionProperties.class);
        Assertions.assertEquals("dfqnhttwdowrczfj", model.groupIds().get(0));
        Assertions.assertEquals("uxxrkkmhmnulwemp", model.privateEndpoint().subnetArmId());
        Assertions.assertEquals("flu", model.registryPrivateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("awmhh", model.registryPrivateLinkServiceConnectionState().description());
        Assertions.assertEquals(EndpointServiceConnectionStatus.APPROVED,
            model.registryPrivateLinkServiceConnectionState().status());
        Assertions.assertEquals("friyrg", model.provisioningState());
    }
}
