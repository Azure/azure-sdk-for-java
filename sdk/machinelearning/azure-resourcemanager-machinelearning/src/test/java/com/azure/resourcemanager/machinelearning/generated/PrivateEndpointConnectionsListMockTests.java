// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointConnection;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"urhvifqeqfs\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"kitlwgebylpz\",\"actionsRequired\":\"ldaqwjun\"},\"provisioningState\":\"Deleting\"},\"identity\":{\"principalId\":\"cf01a30f-2d6c-4526-96b5-061089f6b3dc\",\"tenantId\":\"95b0e625-c1a4-4838-9d14-c9e534f2e9aa\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"sypo\":{\"principalId\":\"ee98b5c3-7c30-4f31-9fe8-d9602d95e382\",\"clientId\":\"31c874be-b0b2-4362-8925-a45edefa3e41\"},\"kbvzpkodngvnq\":{\"principalId\":\"3c120bd5-f08e-4f0d-8ced-e415dbf563bc\",\"clientId\":\"bede4942-5ea9-4013-b1ab-a2129c2fb385\"},\"sbtwgnldxuc\":{\"principalId\":\"72923ffe-ef00-48a8-b09f-ebf43bbc0884\",\"clientId\":\"9e710428-b5a3-4a38-9551-5040aa24a865\"}}},\"location\":\"hvb\",\"tags\":{\"iuvcqoqkqwucqs\":\"znrirp\",\"xcwtvm\":\"g\",\"myvwp\":\"jccpkkjl\",\"nnlb\":\"jmaih\"},\"sku\":{\"name\":\"jppcbq\",\"tier\":\"Basic\",\"size\":\"fppvolzayj\",\"family\":\"unj\",\"capacity\":1717201097},\"id\":\"klatwiuujxsujkrw\",\"name\":\"xeegxbnjnc\",\"type\":\"epdp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PrivateEndpointConnection> response
            = manager.privateEndpointConnections().list("doqkanqtr", "icwhqyrgqmndk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("hvb", response.iterator().next().location());
        Assertions.assertEquals("znrirp", response.iterator().next().tags().get("iuvcqoqkqwucqs"));
        Assertions.assertEquals("jppcbq", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.iterator().next().sku().tier());
        Assertions.assertEquals("fppvolzayj", response.iterator().next().sku().size());
        Assertions.assertEquals("unj", response.iterator().next().sku().family());
        Assertions.assertEquals(1717201097, response.iterator().next().sku().capacity());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.REJECTED,
            response.iterator().next().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("kitlwgebylpz",
            response.iterator().next().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("ldaqwjun",
            response.iterator().next().privateLinkServiceConnectionState().actionsRequired());
    }
}
