// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.EmailNotificationEnableType;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersion;
import com.azure.resourcemanager.machinelearning.models.MaterializationStoreType;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FeaturesetVersionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"specification\":{\"path\":\"deoubv\"},\"materializationSettings\":{\"storeType\":\"OnlineAndOffline\",\"schedule\":{\"triggerType\":\"Recurrence\",\"frequency\":\"Day\",\"interval\":1311355901,\"schedule\":{\"hours\":[1757358361,1263017411,513981146],\"minutes\":[2095072946,1962296302],\"weekDays\":[\"Wednesday\",\"Thursday\",\"Saturday\",\"Thursday\"],\"monthDays\":[1281228089,1358126478,1774923631,1733089394]},\"endTime\":\"lbeqczzscgrop\",\"startTime\":\"giscgk\",\"timeZone\":\"iyikqlyoorm\"},\"notification\":{\"emails\":[\"lqijykck\"],\"emailOn\":[\"JobCancelled\"],\"webhooks\":{\"bcpiadjslvxs\":{\"webhookType\":\"Webhook\"},\"lcd\":{\"webhookType\":\"Webhook\"},\"bibfviacghygmt\":{\"webhookType\":\"Webhook\"},\"ivpzjnrw\":{\"webhookType\":\"Webhook\"}}},\"resource\":{\"instanceType\":\"zmxqyj\"},\"sparkConfiguration\":{\"kew\":\"jpy\"}},\"stage\":\"kzmsyezxifjuvhuo\",\"entities\":[\"twvkuhtdxd\",\"odzdh\",\"knmcvmxiun\",\"ifuahtkkccrusrzs\"],\"provisioningState\":\"Succeeded\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"ayxnlvt\",\"tags\":{\"wslctilbxnny\":\"o\",\"dfhpelzavohv\":\"jt\",\"liqcbonqjoek\":\"bncdrchuew\",\"xrbalvkfdq\":\"jcglvobctit\"},\"properties\":{\"yrqlazfjltck\":\"rqhxfqkqp\",\"pxalkqlvbkzaiyr\":\"jvdxhyfvqtdexfd\"}},\"id\":\"woi\",\"name\":\"iniyoizuww\",\"type\":\"crigbjbelnqalbs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        FeaturesetVersion response = manager.featuresetVersions()
            .getWithResponse("uafbddm", "fqynmldhgzzohtag", "yuhdqhqgrksypoo", "fxzobovsvhbtdgxg",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ayxnlvt", response.properties().description());
        Assertions.assertEquals("o", response.properties().tags().get("wslctilbxnny"));
        Assertions.assertEquals("rqhxfqkqp", response.properties().properties().get("yrqlazfjltck"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals("deoubv", response.properties().specification().path());
        Assertions.assertEquals(MaterializationStoreType.ONLINE_AND_OFFLINE,
            response.properties().materializationSettings().storeType());
        Assertions.assertEquals("lbeqczzscgrop", response.properties().materializationSettings().schedule().endTime());
        Assertions.assertEquals("giscgk", response.properties().materializationSettings().schedule().startTime());
        Assertions.assertEquals("iyikqlyoorm", response.properties().materializationSettings().schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.DAY,
            response.properties().materializationSettings().schedule().frequency());
        Assertions.assertEquals(1311355901, response.properties().materializationSettings().schedule().interval());
        Assertions.assertEquals(1757358361,
            response.properties().materializationSettings().schedule().schedule().hours().get(0));
        Assertions.assertEquals(2095072946,
            response.properties().materializationSettings().schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.WEDNESDAY,
            response.properties().materializationSettings().schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1281228089,
            response.properties().materializationSettings().schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("lqijykck",
            response.properties().materializationSettings().notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_CANCELLED,
            response.properties().materializationSettings().notification().emailOn().get(0));
        Assertions.assertEquals("zmxqyj", response.properties().materializationSettings().resource().instanceType());
        Assertions.assertEquals("jpy", response.properties().materializationSettings().sparkConfiguration().get("kew"));
        Assertions.assertEquals("kzmsyezxifjuvhuo", response.properties().stage());
        Assertions.assertEquals("twvkuhtdxd", response.properties().entities().get(0));
    }
}
