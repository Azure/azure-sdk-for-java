// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.RegistryInner;
import com.azure.resourcemanager.machinelearning.models.AcrDetails;
import com.azure.resourcemanager.machinelearning.models.ArmResourceId;
import com.azure.resourcemanager.machinelearning.models.EndpointServiceConnectionStatus;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointResource;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateEndpointConnection;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateLinkServiceConnectionState;
import com.azure.resourcemanager.machinelearning.models.RegistryRegionArmDetails;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.StorageAccountDetails;
import com.azure.resourcemanager.machinelearning.models.SystemCreatedAcrAccount;
import com.azure.resourcemanager.machinelearning.models.SystemCreatedStorageAccount;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import com.azure.resourcemanager.machinelearning.models.UserCreatedAcrAccount;
import com.azure.resourcemanager.machinelearning.models.UserCreatedStorageAccount;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RegistryInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RegistryInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"c28dc0eb-1396-4c64-9f4c-b71bae544745\",\"tenantId\":\"380fb1ea-f210-45c9-89b2-9c9594287564\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"mhk\":{\"principalId\":\"f2334a69-e548-4f24-a119-19afab5b1edc\",\"clientId\":\"a712a1e2-cd08-4106-aa9e-d32bfd6bd301\"},\"sdsu\":{\"principalId\":\"52fa938b-9b62-43ae-b242-2fe3db3c6443\",\"clientId\":\"e2b7fe03-df27-4741-8738-1753715fcc6a\"}}},\"kind\":\"eqdgcruxsp\",\"properties\":{\"discoveryUrl\":\"ymmqgwokmikp\",\"intellectualPropertyPublisher\":\"fbmjxuvji\",\"managedResourceGroup\":{\"resourceId\":\"vhax\"},\"mlFlowRegistryUri\":\"w\",\"registryPrivateEndpointConnections\":[{\"id\":\"pphthdklmvetatla\",\"location\":\"q\",\"properties\":{\"groupIds\":[\"giksbbvto\",\"xrpo\",\"wp\"],\"privateEndpoint\":{\"subnetArmId\":\"gjtnhtukfacihm\",\"id\":\"ntumeezbxvq\"},\"registryPrivateLinkServiceConnectionState\":{\"actionsRequired\":\"uvwc\",\"description\":\"sgomtmjz\",\"status\":\"Disconnected\"},\"provisioningState\":\"govsxpwwzt\"}},{\"id\":\"mkkhtgfredml\",\"location\":\"grllcc\",\"properties\":{\"groupIds\":[\"jowazhpab\",\"comlyotgkwsx\",\"srqorcgenmvceb\"],\"privateEndpoint\":{\"subnetArmId\":\"tqujxcxxqndcqjk\",\"id\":\"wqurc\"},\"registryPrivateLinkServiceConnectionState\":{\"actionsRequired\":\"mrvvxwj\",\"description\":\"gzseh\",\"status\":\"Disconnected\"},\"provisioningState\":\"ilcchskxxkansbvr\"}},{\"id\":\"qgvtojrulfu\",\"location\":\"ejrthcfjzhxlyub\",\"properties\":{\"groupIds\":[\"stvrjeqmt\",\"zbeqrztrxa\",\"xrd\",\"absr\"],\"privateEndpoint\":{\"subnetArmId\":\"nrhpqatiwkk\",\"id\":\"anxkvvcsemsvuv\"},\"registryPrivateLinkServiceConnectionState\":{\"actionsRequired\":\"qxetqmmlivrjjx\",\"description\":\"xdchp\",\"status\":\"Disconnected\"},\"provisioningState\":\"ehzl\"}},{\"id\":\"gfquwz\",\"location\":\"iibelwcerw\",\"properties\":{\"groupIds\":[\"jxljtxbusq\",\"bxxn\"],\"privateEndpoint\":{\"subnetArmId\":\"sdzhgbdgzpagsec\",\"id\":\"db\"},\"registryPrivateLinkServiceConnectionState\":{\"actionsRequired\":\"r\",\"description\":\"fllmqiy\",\"status\":\"Disconnected\"},\"provisioningState\":\"ellnkkii\"}}],\"publicNetworkAccess\":\"mtum\",\"regionDetails\":[{\"acrDetails\":[{\"systemCreatedAcrAccount\":{},\"userCreatedAcrAccount\":{}}],\"location\":\"axroqvqpilrgunc\",\"storageAccountDetails\":[{\"systemCreatedStorageAccount\":{},\"userCreatedStorageAccount\":{}},{\"systemCreatedStorageAccount\":{},\"userCreatedStorageAccount\":{}},{\"systemCreatedStorageAccount\":{},\"userCreatedStorageAccount\":{}}]},{\"acrDetails\":[{\"systemCreatedAcrAccount\":{},\"userCreatedAcrAccount\":{}},{\"systemCreatedAcrAccount\":{},\"userCreatedAcrAccount\":{}}],\"location\":\"klxymxkqvfqepdxc\",\"storageAccountDetails\":[{\"systemCreatedStorageAccount\":{},\"userCreatedStorageAccount\":{}},{\"systemCreatedStorageAccount\":{},\"userCreatedStorageAccount\":{}},{\"systemCreatedStorageAccount\":{},\"userCreatedStorageAccount\":{}}]}]},\"sku\":{\"name\":\"bowcpjqduqgi\",\"tier\":\"Standard\",\"size\":\"ydfbwlj\",\"family\":\"huerkjddvrglie\",\"capacity\":53261195},\"location\":\"vbiiftksdwgdnk\",\"tags\":{\"zoutb\":\"mwdhcebuvczldbg\",\"orbjg\":\"aqgzekajclyzgs\"},\"id\":\"nzjotvmr\",\"name\":\"khlobvvjbhvhdi\",\"type\":\"ayfluiyuosnu\"}")
            .toObject(RegistryInner.class);
        Assertions.assertEquals("vbiiftksdwgdnk", model.location());
        Assertions.assertEquals("mwdhcebuvczldbg", model.tags().get("zoutb"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("eqdgcruxsp", model.kind());
        Assertions.assertEquals("bowcpjqduqgi", model.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals("ydfbwlj", model.sku().size());
        Assertions.assertEquals("huerkjddvrglie", model.sku().family());
        Assertions.assertEquals(53261195, model.sku().capacity());
        Assertions.assertEquals("ymmqgwokmikp", model.discoveryUrl());
        Assertions.assertEquals("fbmjxuvji", model.intellectualPropertyPublisher());
        Assertions.assertEquals("vhax", model.managedResourceGroup().resourceId());
        Assertions.assertEquals("w", model.mlFlowRegistryUri());
        Assertions.assertEquals("pphthdklmvetatla", model.registryPrivateEndpointConnections().get(0).id());
        Assertions.assertEquals("q", model.registryPrivateEndpointConnections().get(0).location());
        Assertions.assertEquals("giksbbvto", model.registryPrivateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("gjtnhtukfacihm",
            model.registryPrivateEndpointConnections().get(0).privateEndpoint().subnetArmId());
        Assertions.assertEquals("uvwc",
            model.registryPrivateEndpointConnections()
                .get(0)
                .registryPrivateLinkServiceConnectionState()
                .actionsRequired());
        Assertions.assertEquals("sgomtmjz",
            model.registryPrivateEndpointConnections()
                .get(0)
                .registryPrivateLinkServiceConnectionState()
                .description());
        Assertions.assertEquals(EndpointServiceConnectionStatus.DISCONNECTED,
            model.registryPrivateEndpointConnections().get(0).registryPrivateLinkServiceConnectionState().status());
        Assertions.assertEquals("govsxpwwzt", model.registryPrivateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("mtum", model.publicNetworkAccess());
        Assertions.assertEquals("axroqvqpilrgunc", model.regionDetails().get(0).location());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RegistryInner model = new RegistryInner().withLocation("vbiiftksdwgdnk")
            .withTags(mapOf("zoutb", "mwdhcebuvczldbg", "orbjg", "aqgzekajclyzgs"))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("mhk", new UserAssignedIdentity(), "sdsu", new UserAssignedIdentity())))
            .withKind("eqdgcruxsp")
            .withSku(new Sku().withName("bowcpjqduqgi")
                .withTier(SkuTier.STANDARD)
                .withSize("ydfbwlj")
                .withFamily("huerkjddvrglie")
                .withCapacity(53261195))
            .withDiscoveryUrl("ymmqgwokmikp")
            .withIntellectualPropertyPublisher("fbmjxuvji")
            .withManagedResourceGroup(new ArmResourceId().withResourceId("vhax"))
            .withMlFlowRegistryUri("w")
            .withRegistryPrivateEndpointConnections(Arrays.asList(
                new RegistryPrivateEndpointConnection().withId("pphthdklmvetatla")
                    .withLocation("q")
                    .withGroupIds(Arrays.asList("giksbbvto", "xrpo", "wp"))
                    .withPrivateEndpoint(new PrivateEndpointResource().withSubnetArmId("gjtnhtukfacihm"))
                    .withRegistryPrivateLinkServiceConnectionState(
                        new RegistryPrivateLinkServiceConnectionState().withActionsRequired("uvwc")
                            .withDescription("sgomtmjz")
                            .withStatus(EndpointServiceConnectionStatus.DISCONNECTED))
                    .withProvisioningState("govsxpwwzt"),
                new RegistryPrivateEndpointConnection().withId("mkkhtgfredml")
                    .withLocation("grllcc")
                    .withGroupIds(Arrays.asList("jowazhpab", "comlyotgkwsx", "srqorcgenmvceb"))
                    .withPrivateEndpoint(new PrivateEndpointResource().withSubnetArmId("tqujxcxxqndcqjk"))
                    .withRegistryPrivateLinkServiceConnectionState(
                        new RegistryPrivateLinkServiceConnectionState().withActionsRequired("mrvvxwj")
                            .withDescription("gzseh")
                            .withStatus(EndpointServiceConnectionStatus.DISCONNECTED))
                    .withProvisioningState("ilcchskxxkansbvr"),
                new RegistryPrivateEndpointConnection().withId("qgvtojrulfu")
                    .withLocation("ejrthcfjzhxlyub")
                    .withGroupIds(Arrays.asList("stvrjeqmt", "zbeqrztrxa", "xrd", "absr"))
                    .withPrivateEndpoint(new PrivateEndpointResource().withSubnetArmId("nrhpqatiwkk"))
                    .withRegistryPrivateLinkServiceConnectionState(
                        new RegistryPrivateLinkServiceConnectionState().withActionsRequired("qxetqmmlivrjjx")
                            .withDescription("xdchp")
                            .withStatus(EndpointServiceConnectionStatus.DISCONNECTED))
                    .withProvisioningState("ehzl"),
                new RegistryPrivateEndpointConnection().withId("gfquwz")
                    .withLocation("iibelwcerw")
                    .withGroupIds(Arrays.asList("jxljtxbusq", "bxxn"))
                    .withPrivateEndpoint(new PrivateEndpointResource().withSubnetArmId("sdzhgbdgzpagsec"))
                    .withRegistryPrivateLinkServiceConnectionState(
                        new RegistryPrivateLinkServiceConnectionState().withActionsRequired("r")
                            .withDescription("fllmqiy")
                            .withStatus(EndpointServiceConnectionStatus.DISCONNECTED))
                    .withProvisioningState("ellnkkii")))
            .withPublicNetworkAccess("mtum")
            .withRegionDetails(Arrays.asList(
                new RegistryRegionArmDetails()
                    .withAcrDetails(
                        Arrays.asList(new AcrDetails().withSystemCreatedAcrAccount(new SystemCreatedAcrAccount())
                            .withUserCreatedAcrAccount(new UserCreatedAcrAccount())))
                    .withLocation("axroqvqpilrgunc")
                    .withStorageAccountDetails(Arrays.asList(
                        new StorageAccountDetails().withSystemCreatedStorageAccount(new SystemCreatedStorageAccount())
                            .withUserCreatedStorageAccount(new UserCreatedStorageAccount()),
                        new StorageAccountDetails().withSystemCreatedStorageAccount(new SystemCreatedStorageAccount())
                            .withUserCreatedStorageAccount(new UserCreatedStorageAccount()),
                        new StorageAccountDetails().withSystemCreatedStorageAccount(new SystemCreatedStorageAccount())
                            .withUserCreatedStorageAccount(new UserCreatedStorageAccount()))),
                new RegistryRegionArmDetails()
                    .withAcrDetails(Arrays.asList(
                        new AcrDetails().withSystemCreatedAcrAccount(new SystemCreatedAcrAccount())
                            .withUserCreatedAcrAccount(new UserCreatedAcrAccount()),
                        new AcrDetails().withSystemCreatedAcrAccount(new SystemCreatedAcrAccount())
                            .withUserCreatedAcrAccount(new UserCreatedAcrAccount())))
                    .withLocation("klxymxkqvfqepdxc")
                    .withStorageAccountDetails(Arrays.asList(
                        new StorageAccountDetails().withSystemCreatedStorageAccount(new SystemCreatedStorageAccount())
                            .withUserCreatedStorageAccount(new UserCreatedStorageAccount()),
                        new StorageAccountDetails().withSystemCreatedStorageAccount(new SystemCreatedStorageAccount())
                            .withUserCreatedStorageAccount(new UserCreatedStorageAccount()),
                        new StorageAccountDetails().withSystemCreatedStorageAccount(new SystemCreatedStorageAccount())
                            .withUserCreatedStorageAccount(new UserCreatedStorageAccount())))));
        model = BinaryData.fromObject(model).toObject(RegistryInner.class);
        Assertions.assertEquals("vbiiftksdwgdnk", model.location());
        Assertions.assertEquals("mwdhcebuvczldbg", model.tags().get("zoutb"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("eqdgcruxsp", model.kind());
        Assertions.assertEquals("bowcpjqduqgi", model.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals("ydfbwlj", model.sku().size());
        Assertions.assertEquals("huerkjddvrglie", model.sku().family());
        Assertions.assertEquals(53261195, model.sku().capacity());
        Assertions.assertEquals("ymmqgwokmikp", model.discoveryUrl());
        Assertions.assertEquals("fbmjxuvji", model.intellectualPropertyPublisher());
        Assertions.assertEquals("vhax", model.managedResourceGroup().resourceId());
        Assertions.assertEquals("w", model.mlFlowRegistryUri());
        Assertions.assertEquals("pphthdklmvetatla", model.registryPrivateEndpointConnections().get(0).id());
        Assertions.assertEquals("q", model.registryPrivateEndpointConnections().get(0).location());
        Assertions.assertEquals("giksbbvto", model.registryPrivateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("gjtnhtukfacihm",
            model.registryPrivateEndpointConnections().get(0).privateEndpoint().subnetArmId());
        Assertions.assertEquals("uvwc",
            model.registryPrivateEndpointConnections()
                .get(0)
                .registryPrivateLinkServiceConnectionState()
                .actionsRequired());
        Assertions.assertEquals("sgomtmjz",
            model.registryPrivateEndpointConnections()
                .get(0)
                .registryPrivateLinkServiceConnectionState()
                .description());
        Assertions.assertEquals(EndpointServiceConnectionStatus.DISCONNECTED,
            model.registryPrivateEndpointConnections().get(0).registryPrivateLinkServiceConnectionState().status());
        Assertions.assertEquals("govsxpwwzt", model.registryPrivateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("mtum", model.publicNetworkAccess());
        Assertions.assertEquals("axroqvqpilrgunc", model.regionDetails().get(0).location());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
