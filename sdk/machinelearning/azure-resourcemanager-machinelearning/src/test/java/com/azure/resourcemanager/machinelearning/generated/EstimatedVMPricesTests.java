// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BillingCurrency;
import com.azure.resourcemanager.machinelearning.models.EstimatedVMPrice;
import com.azure.resourcemanager.machinelearning.models.EstimatedVMPrices;
import com.azure.resourcemanager.machinelearning.models.UnitOfMeasure;
import com.azure.resourcemanager.machinelearning.models.VMPriceOSType;
import com.azure.resourcemanager.machinelearning.models.VMTier;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EstimatedVMPricesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EstimatedVMPrices model = BinaryData.fromString(
            "{\"billingCurrency\":\"USD\",\"unitOfMeasure\":\"OneHour\",\"values\":[{\"retailPrice\":51.60313899930067,\"osType\":\"Linux\",\"vmTier\":\"Spot\"},{\"retailPrice\":9.272665097148082,\"osType\":\"Windows\",\"vmTier\":\"LowPriority\"},{\"retailPrice\":45.65930032967857,\"osType\":\"Linux\",\"vmTier\":\"Spot\"},{\"retailPrice\":12.242522151631585,\"osType\":\"Linux\",\"vmTier\":\"LowPriority\"}]}")
            .toObject(EstimatedVMPrices.class);
        Assertions.assertEquals(BillingCurrency.USD, model.billingCurrency());
        Assertions.assertEquals(UnitOfMeasure.ONE_HOUR, model.unitOfMeasure());
        Assertions.assertEquals(51.60313899930067, model.values().get(0).retailPrice());
        Assertions.assertEquals(VMPriceOSType.LINUX, model.values().get(0).osType());
        Assertions.assertEquals(VMTier.SPOT, model.values().get(0).vmTier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EstimatedVMPrices model = new EstimatedVMPrices().withBillingCurrency(BillingCurrency.USD)
            .withUnitOfMeasure(UnitOfMeasure.ONE_HOUR)
            .withValues(Arrays.asList(
                new EstimatedVMPrice().withRetailPrice(51.60313899930067)
                    .withOsType(VMPriceOSType.LINUX)
                    .withVmTier(VMTier.SPOT),
                new EstimatedVMPrice().withRetailPrice(9.272665097148082)
                    .withOsType(VMPriceOSType.WINDOWS)
                    .withVmTier(VMTier.LOW_PRIORITY),
                new EstimatedVMPrice().withRetailPrice(45.65930032967857)
                    .withOsType(VMPriceOSType.LINUX)
                    .withVmTier(VMTier.SPOT),
                new EstimatedVMPrice().withRetailPrice(12.242522151631585)
                    .withOsType(VMPriceOSType.LINUX)
                    .withVmTier(VMTier.LOW_PRIORITY)));
        model = BinaryData.fromObject(model).toObject(EstimatedVMPrices.class);
        Assertions.assertEquals(BillingCurrency.USD, model.billingCurrency());
        Assertions.assertEquals(UnitOfMeasure.ONE_HOUR, model.unitOfMeasure());
        Assertions.assertEquals(51.60313899930067, model.values().get(0).retailPrice());
        Assertions.assertEquals(VMPriceOSType.LINUX, model.values().get(0).osType());
        Assertions.assertEquals(VMTier.SPOT, model.values().get(0).vmTier());
    }
}
