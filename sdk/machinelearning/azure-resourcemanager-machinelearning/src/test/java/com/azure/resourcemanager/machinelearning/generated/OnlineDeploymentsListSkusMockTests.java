// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.SkuResource;
import com.azure.resourcemanager.machinelearning.models.SkuScaleType;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OnlineDeploymentsListSkusMockTests {
    @Test
    public void testListSkus() throws Exception {
        String responseStr
            = "{\"value\":[{\"resourceType\":\"ofshda\",\"sku\":{\"name\":\"x\",\"tier\":\"Premium\"},\"capacity\":{\"minimum\":179860651,\"maximum\":1207864921,\"default\":1218022012,\"scaleType\":\"None\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SkuResource> response = manager.onlineDeployments()
            .listSkus("xewcscuveljfarin", "fziztgddahymvk", "jtdhmig", "waoex", 1355101501, "enylsijq",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("x", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals(179860651, response.iterator().next().capacity().minimum());
        Assertions.assertEquals(1207864921, response.iterator().next().capacity().maximum());
        Assertions.assertEquals(1218022012, response.iterator().next().capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.NONE, response.iterator().next().capacity().scaleType());
    }
}
