// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.FeaturesetContainerInner;
import com.azure.resourcemanager.machinelearning.models.FeaturesetContainerProperties;
import com.azure.resourcemanager.machinelearning.models.FeaturesetContainerResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturesetContainerResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeaturesetContainerResourceArmPaginatedResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"isArchived\":false,\"latestVersion\":\"ov\",\"nextVersion\":\"pikqmh\",\"description\":\"owjrmzvuporqz\",\"tags\":{\"xcnqmxqpswokmvkh\":\"ydzvkf\",\"wtglxx\":\"ggdhbemzqkzszuw\"},\"properties\":{\"gjsxv\":\"fpgpicrmnzhrgm\",\"qgvriibakcla\":\"qcbfrmbodths\",\"gmwohqfzizvu\":\"jfrnxousxauzlwv\"}},\"id\":\"mk\",\"name\":\"svth\",\"type\":\"wpztekovmribia\"},{\"properties\":{\"provisioningState\":\"Creating\",\"isArchived\":false,\"latestVersion\":\"cfotangcfhnykzcu\",\"nextVersion\":\"wvxwlmzqwmvt\",\"description\":\"jmxmcuqud\",\"tags\":{\"dkvgfabuiyjibuzp\":\"clxyn\"},\"properties\":{\"pgoxgji\":\"gneik\",\"rrxxgewpktvq\":\"qhibtozipqwjedm\"}},\"id\":\"kmqp\",\"name\":\"o\",\"type\":\"hlfbcgwgc\"}],\"nextLink\":\"xoe\"}")
            .toObject(FeaturesetContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("owjrmzvuporqz", model.value().get(0).properties().description());
        Assertions.assertEquals("ydzvkf", model.value().get(0).properties().tags().get("xcnqmxqpswokmvkh"));
        Assertions.assertEquals("fpgpicrmnzhrgm", model.value().get(0).properties().properties().get("gjsxv"));
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
        Assertions.assertEquals("xoe", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeaturesetContainerResourceArmPaginatedResult model
            = new FeaturesetContainerResourceArmPaginatedResult().withValue(Arrays.asList(
                new FeaturesetContainerInner()
                    .withProperties(new FeaturesetContainerProperties().withDescription("owjrmzvuporqz")
                        .withTags(mapOf("xcnqmxqpswokmvkh", "ydzvkf", "wtglxx", "ggdhbemzqkzszuw"))
                        .withProperties(mapOf("gjsxv", "fpgpicrmnzhrgm", "qgvriibakcla", "qcbfrmbodths", "gmwohqfzizvu",
                            "jfrnxousxauzlwv"))
                        .withIsArchived(false)),
                new FeaturesetContainerInner()
                    .withProperties(new FeaturesetContainerProperties().withDescription("jmxmcuqud")
                        .withTags(mapOf("dkvgfabuiyjibuzp", "clxyn"))
                        .withProperties(mapOf("pgoxgji", "gneik", "rrxxgewpktvq", "qhibtozipqwjedm"))
                        .withIsArchived(false))))
                .withNextLink("xoe");
        model = BinaryData.fromObject(model).toObject(FeaturesetContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("owjrmzvuporqz", model.value().get(0).properties().description());
        Assertions.assertEquals("ydzvkf", model.value().get(0).properties().tags().get("xcnqmxqpswokmvkh"));
        Assertions.assertEquals("fpgpicrmnzhrgm", model.value().get(0).properties().properties().get("gjsxv"));
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
        Assertions.assertEquals("xoe", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
