// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentVersionInner;
import com.azure.resourcemanager.machinelearning.models.ComponentVersion;
import com.azure.resourcemanager.machinelearning.models.ComponentVersionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ComponentVersionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"componentSpec\":\"datajniaffwcgj\",\"provisioningState\":\"Succeeded\",\"isArchived\":true,\"isAnonymous\":true,\"description\":\"gdkpnmwrfuq\",\"tags\":{\"cnbgibklscwdko\":\"byxq\",\"vxmtsmgk\":\"zyvihevb\",\"rceulbyzzcxsyg\":\"etsn\"},\"properties\":{\"bmljrjyfj\":\"myckdpzbr\"}},\"id\":\"uxixkpsjldgnimqo\",\"name\":\"cfqzxjziqcso\",\"type\":\"wq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ComponentVersion response = manager.componentVersions()
            .createOrUpdateWithResponse("kpoidfzwegvu", "juwgw", "ccvufjqv", "cfsssmyaemkrh",
                new ComponentVersionInner()
                    .withProperties(new ComponentVersionProperties().withDescription("cpenobqysbees")
                        .withTags(mapOf("rszsu", "vva", "intz", "zsautbricvvofe", "xjpisrdnowinc", "nhyyqxckd",
                            "vijnubxfiiytqx", "es"))
                        .withProperties(mapOf("hkvoxdporxki", "syutezl", "bvqnpwdwdmuvya", "bkutogecyqoytws"))
                        .withIsArchived(true)
                        .withIsAnonymous(true)
                        .withComponentSpec("datadgktl")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("gdkpnmwrfuq", response.properties().description());
        Assertions.assertEquals("byxq", response.properties().tags().get("cnbgibklscwdko"));
        Assertions.assertEquals("myckdpzbr", response.properties().properties().get("bmljrjyfj"));
        Assertions.assertEquals(true, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
