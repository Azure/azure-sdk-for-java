// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.JobBase;
import com.azure.resourcemanager.machinelearning.models.ListViewType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class JobsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"jobType\":\"JobBaseProperties\",\"componentId\":\"iwrycgnwplrrb\",\"computeId\":\"ctsbbibt\",\"displayName\":\"uhqvums\",\"experimentName\":\"fsfeqbbe\",\"identity\":{\"identityType\":\"IdentityConfiguration\"},\"isArchived\":true,\"services\":{},\"status\":\"Running\",\"description\":\"xmzrmtmvwitu\",\"properties\":{\"fuppoxprc\":\"yjshcyb\",\"ujx\":\"vo\",\"kj\":\"iikmoxrezsvavlrx\",\"zfn\":\"oywlunpipcwyb\"},\"tags\":{\"saebwfwhxorpwal\":\"atpf\",\"ojfccylhtrht\":\"zwuge\"}},\"id\":\"azjpwexcdrzpro\",\"name\":\"zzxezmnrkj\",\"type\":\"pjeuxsp\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MachineLearningManager manager =
            MachineLearningManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<JobBase> response =
            manager
                .jobs()
                .list("eddobmcnltm", "ytkujsq", "cm", "oxfab", "qgpwbmwhr", ListViewType.ARCHIVED_ONLY, Context.NONE);

        Assertions.assertEquals("xmzrmtmvwitu", response.iterator().next().properties().description());
        Assertions.assertEquals("yjshcyb", response.iterator().next().properties().properties().get("fuppoxprc"));
        Assertions.assertEquals("atpf", response.iterator().next().properties().tags().get("saebwfwhxorpwal"));
        Assertions.assertEquals("iwrycgnwplrrb", response.iterator().next().properties().componentId());
        Assertions.assertEquals("ctsbbibt", response.iterator().next().properties().computeId());
        Assertions.assertEquals("uhqvums", response.iterator().next().properties().displayName());
        Assertions.assertEquals("fsfeqbbe", response.iterator().next().properties().experimentName());
        Assertions.assertEquals(true, response.iterator().next().properties().isArchived());
    }
}
