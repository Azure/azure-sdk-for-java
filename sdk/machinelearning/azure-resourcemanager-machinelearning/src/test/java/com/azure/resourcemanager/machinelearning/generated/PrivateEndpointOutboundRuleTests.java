// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointDestination;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointOutboundRule;
import com.azure.resourcemanager.machinelearning.models.RuleCategory;
import com.azure.resourcemanager.machinelearning.models.RuleStatus;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointOutboundRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointOutboundRule model = BinaryData.fromString(
            "{\"type\":\"PrivateEndpoint\",\"destination\":{\"serviceResourceId\":\"zvoikvntwczf\",\"sparkEnabled\":true,\"sparkStatus\":\"Active\",\"subresourceTarget\":\"cxpblalhhezpfk\"},\"category\":\"Required\",\"status\":\"Active\"}")
            .toObject(PrivateEndpointOutboundRule.class);
        Assertions.assertEquals(RuleCategory.REQUIRED, model.category());
        Assertions.assertEquals(RuleStatus.ACTIVE, model.status());
        Assertions.assertEquals("zvoikvntwczf", model.destination().serviceResourceId());
        Assertions.assertEquals(true, model.destination().sparkEnabled());
        Assertions.assertEquals(RuleStatus.ACTIVE, model.destination().sparkStatus());
        Assertions.assertEquals("cxpblalhhezpfk", model.destination().subresourceTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointOutboundRule model = new PrivateEndpointOutboundRule().withCategory(RuleCategory.REQUIRED)
            .withStatus(RuleStatus.ACTIVE)
            .withDestination(new PrivateEndpointDestination().withServiceResourceId("zvoikvntwczf")
                .withSparkEnabled(true)
                .withSparkStatus(RuleStatus.ACTIVE)
                .withSubresourceTarget("cxpblalhhezpfk"));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointOutboundRule.class);
        Assertions.assertEquals(RuleCategory.REQUIRED, model.category());
        Assertions.assertEquals(RuleStatus.ACTIVE, model.status());
        Assertions.assertEquals("zvoikvntwczf", model.destination().serviceResourceId());
        Assertions.assertEquals(true, model.destination().sparkEnabled());
        Assertions.assertEquals(RuleStatus.ACTIVE, model.destination().sparkStatus());
        Assertions.assertEquals("cxpblalhhezpfk", model.destination().subresourceTarget());
    }
}
