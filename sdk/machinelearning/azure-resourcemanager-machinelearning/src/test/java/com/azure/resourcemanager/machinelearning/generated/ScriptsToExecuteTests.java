// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ScriptReference;
import com.azure.resourcemanager.machinelearning.models.ScriptsToExecute;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScriptsToExecuteTests {
    @Test
    public void testDeserialize() {
        ScriptsToExecute model =
            BinaryData
                .fromString(
                    "{\"startupScript\":{\"scriptSource\":\"x\",\"scriptData\":\"vs\",\"scriptArguments\":\"hlwntsjgq\",\"timeout\":\"xypruuuy\"},\"creationScript\":{\"scriptSource\":\"hrszi\",\"scriptData\":\"yuel\",\"scriptArguments\":\"tn\",\"timeout\":\"bf\"}}")
                .toObject(ScriptsToExecute.class);
        Assertions.assertEquals("x", model.startupScript().scriptSource());
        Assertions.assertEquals("vs", model.startupScript().scriptData());
        Assertions.assertEquals("hlwntsjgq", model.startupScript().scriptArguments());
        Assertions.assertEquals("xypruuuy", model.startupScript().timeout());
        Assertions.assertEquals("hrszi", model.creationScript().scriptSource());
        Assertions.assertEquals("yuel", model.creationScript().scriptData());
        Assertions.assertEquals("tn", model.creationScript().scriptArguments());
        Assertions.assertEquals("bf", model.creationScript().timeout());
    }

    @Test
    public void testSerialize() {
        ScriptsToExecute model =
            new ScriptsToExecute()
                .withStartupScript(
                    new ScriptReference()
                        .withScriptSource("x")
                        .withScriptData("vs")
                        .withScriptArguments("hlwntsjgq")
                        .withTimeout("xypruuuy"))
                .withCreationScript(
                    new ScriptReference()
                        .withScriptSource("hrszi")
                        .withScriptData("yuel")
                        .withScriptArguments("tn")
                        .withTimeout("bf"));
        model = BinaryData.fromObject(model).toObject(ScriptsToExecute.class);
        Assertions.assertEquals("x", model.startupScript().scriptSource());
        Assertions.assertEquals("vs", model.startupScript().scriptData());
        Assertions.assertEquals("hlwntsjgq", model.startupScript().scriptArguments());
        Assertions.assertEquals("xypruuuy", model.startupScript().timeout());
        Assertions.assertEquals("hrszi", model.creationScript().scriptSource());
        Assertions.assertEquals("yuel", model.creationScript().scriptData());
        Assertions.assertEquals("tn", model.creationScript().scriptArguments());
        Assertions.assertEquals("bf", model.creationScript().timeout());
    }
}
