// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ComputePowerAction;
import com.azure.resourcemanager.machinelearning.models.ComputeRecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.ComputeRecurrenceSchedule;
import com.azure.resourcemanager.machinelearning.models.ComputeSchedules;
import com.azure.resourcemanager.machinelearning.models.ComputeStartStopSchedule;
import com.azure.resourcemanager.machinelearning.models.ComputeTriggerType;
import com.azure.resourcemanager.machinelearning.models.ComputeWeekDay;
import com.azure.resourcemanager.machinelearning.models.Cron;
import com.azure.resourcemanager.machinelearning.models.Recurrence;
import com.azure.resourcemanager.machinelearning.models.ScheduleBase;
import com.azure.resourcemanager.machinelearning.models.ScheduleProvisioningState;
import com.azure.resourcemanager.machinelearning.models.ScheduleStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ComputeSchedulesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ComputeSchedules model = BinaryData.fromString(
            "{\"computeStartStop\":[{\"id\":\"g\",\"provisioningStatus\":\"Failed\",\"status\":\"Enabled\",\"action\":\"Stop\",\"triggerType\":\"Cron\",\"recurrence\":{\"frequency\":\"Month\",\"interval\":49803923,\"startTime\":\"bjmlreesrfwssz\",\"timeZone\":\"cwlisolntfxxcrqm\",\"schedule\":{\"hours\":[351599598,690611810,1156649488,1996694399],\"minutes\":[1847045848,246360701,778853988],\"monthDays\":[1390318472],\"weekDays\":[\"Tuesday\",\"Saturday\"]}},\"cron\":{\"startTime\":\"abuln\",\"timeZone\":\"skjto\",\"expression\":\"dzjs\"},\"schedule\":{\"id\":\"vhxqqmqipaydhfnz\",\"provisioningStatus\":\"Failed\",\"status\":\"Disabled\"}},{\"id\":\"shksny\",\"provisioningStatus\":\"Provisioning\",\"status\":\"Disabled\",\"action\":\"Stop\",\"triggerType\":\"Recurrence\",\"recurrence\":{\"frequency\":\"Minute\",\"interval\":976329767,\"startTime\":\"cefiqdkt\",\"timeZone\":\"kvi\",\"schedule\":{\"hours\":[1629072439,2029515706],\"minutes\":[1835241061,776692976],\"monthDays\":[1239574934,1328728868,2058931853],\"weekDays\":[\"Friday\",\"Tuesday\"]}},\"cron\":{\"startTime\":\"dpcmhjh\",\"timeZone\":\"sybkekymffzt\",\"expression\":\"lscvqsyeiihf\"},\"schedule\":{\"id\":\"ouihy\",\"provisioningStatus\":\"Completed\",\"status\":\"Enabled\"}}]}")
            .toObject(ComputeSchedules.class);
        Assertions.assertEquals(ScheduleStatus.ENABLED, model.computeStartStop().get(0).status());
        Assertions.assertEquals(ComputePowerAction.STOP, model.computeStartStop().get(0).action());
        Assertions.assertEquals(ComputeTriggerType.CRON, model.computeStartStop().get(0).triggerType());
        Assertions.assertEquals(ComputeRecurrenceFrequency.MONTH,
            model.computeStartStop().get(0).recurrence().frequency());
        Assertions.assertEquals(49803923, model.computeStartStop().get(0).recurrence().interval());
        Assertions.assertEquals("bjmlreesrfwssz", model.computeStartStop().get(0).recurrence().startTime());
        Assertions.assertEquals("cwlisolntfxxcrqm", model.computeStartStop().get(0).recurrence().timeZone());
        Assertions.assertEquals(351599598, model.computeStartStop().get(0).recurrence().schedule().hours().get(0));
        Assertions.assertEquals(1847045848, model.computeStartStop().get(0).recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1390318472, model.computeStartStop().get(0).recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(ComputeWeekDay.TUESDAY,
            model.computeStartStop().get(0).recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals("abuln", model.computeStartStop().get(0).cron().startTime());
        Assertions.assertEquals("skjto", model.computeStartStop().get(0).cron().timeZone());
        Assertions.assertEquals("dzjs", model.computeStartStop().get(0).cron().expression());
        Assertions.assertEquals("vhxqqmqipaydhfnz", model.computeStartStop().get(0).schedule().id());
        Assertions.assertEquals(ScheduleProvisioningState.FAILED,
            model.computeStartStop().get(0).schedule().provisioningStatus());
        Assertions.assertEquals(ScheduleStatus.DISABLED, model.computeStartStop().get(0).schedule().status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ComputeSchedules model = new ComputeSchedules().withComputeStartStop(Arrays.asList(
            new ComputeStartStopSchedule().withStatus(ScheduleStatus.ENABLED)
                .withAction(ComputePowerAction.STOP)
                .withTriggerType(ComputeTriggerType.CRON)
                .withRecurrence(new Recurrence().withFrequency(ComputeRecurrenceFrequency.MONTH)
                    .withInterval(49803923)
                    .withStartTime("bjmlreesrfwssz")
                    .withTimeZone("cwlisolntfxxcrqm")
                    .withSchedule(new ComputeRecurrenceSchedule()
                        .withHours(Arrays.asList(351599598, 690611810, 1156649488, 1996694399))
                        .withMinutes(Arrays.asList(1847045848, 246360701, 778853988))
                        .withMonthDays(Arrays.asList(1390318472))
                        .withWeekDays(Arrays.asList(ComputeWeekDay.TUESDAY, ComputeWeekDay.SATURDAY))))
                .withCron(new Cron().withStartTime("abuln").withTimeZone("skjto").withExpression("dzjs"))
                .withSchedule(new ScheduleBase().withId("vhxqqmqipaydhfnz")
                    .withProvisioningStatus(ScheduleProvisioningState.FAILED)
                    .withStatus(ScheduleStatus.DISABLED)),
            new ComputeStartStopSchedule().withStatus(ScheduleStatus.DISABLED)
                .withAction(ComputePowerAction.STOP)
                .withTriggerType(ComputeTriggerType.RECURRENCE)
                .withRecurrence(new Recurrence().withFrequency(ComputeRecurrenceFrequency.MINUTE)
                    .withInterval(976329767)
                    .withStartTime("cefiqdkt")
                    .withTimeZone("kvi")
                    .withSchedule(new ComputeRecurrenceSchedule().withHours(Arrays.asList(1629072439, 2029515706))
                        .withMinutes(Arrays.asList(1835241061, 776692976))
                        .withMonthDays(Arrays.asList(1239574934, 1328728868, 2058931853))
                        .withWeekDays(Arrays.asList(ComputeWeekDay.FRIDAY, ComputeWeekDay.TUESDAY))))
                .withCron(
                    new Cron().withStartTime("dpcmhjh").withTimeZone("sybkekymffzt").withExpression("lscvqsyeiihf"))
                .withSchedule(new ScheduleBase().withId("ouihy")
                    .withProvisioningStatus(ScheduleProvisioningState.COMPLETED)
                    .withStatus(ScheduleStatus.ENABLED))));
        model = BinaryData.fromObject(model).toObject(ComputeSchedules.class);
        Assertions.assertEquals(ScheduleStatus.ENABLED, model.computeStartStop().get(0).status());
        Assertions.assertEquals(ComputePowerAction.STOP, model.computeStartStop().get(0).action());
        Assertions.assertEquals(ComputeTriggerType.CRON, model.computeStartStop().get(0).triggerType());
        Assertions.assertEquals(ComputeRecurrenceFrequency.MONTH,
            model.computeStartStop().get(0).recurrence().frequency());
        Assertions.assertEquals(49803923, model.computeStartStop().get(0).recurrence().interval());
        Assertions.assertEquals("bjmlreesrfwssz", model.computeStartStop().get(0).recurrence().startTime());
        Assertions.assertEquals("cwlisolntfxxcrqm", model.computeStartStop().get(0).recurrence().timeZone());
        Assertions.assertEquals(351599598, model.computeStartStop().get(0).recurrence().schedule().hours().get(0));
        Assertions.assertEquals(1847045848, model.computeStartStop().get(0).recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1390318472, model.computeStartStop().get(0).recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(ComputeWeekDay.TUESDAY,
            model.computeStartStop().get(0).recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals("abuln", model.computeStartStop().get(0).cron().startTime());
        Assertions.assertEquals("skjto", model.computeStartStop().get(0).cron().timeZone());
        Assertions.assertEquals("dzjs", model.computeStartStop().get(0).cron().expression());
        Assertions.assertEquals("vhxqqmqipaydhfnz", model.computeStartStop().get(0).schedule().id());
        Assertions.assertEquals(ScheduleProvisioningState.FAILED,
            model.computeStartStop().get(0).schedule().provisioningStatus());
        Assertions.assertEquals(ScheduleStatus.DISABLED, model.computeStartStop().get(0).schedule().status());
    }
}
