// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ComputePowerAction;
import com.azure.resourcemanager.machinelearning.models.ComputeSchedules;
import com.azure.resourcemanager.machinelearning.models.ComputeStartStopSchedule;
import com.azure.resourcemanager.machinelearning.models.CronTrigger;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.RecurrenceTrigger;
import com.azure.resourcemanager.machinelearning.models.ScheduleBase;
import com.azure.resourcemanager.machinelearning.models.ScheduleProvisioningState;
import com.azure.resourcemanager.machinelearning.models.ScheduleStatus;
import com.azure.resourcemanager.machinelearning.models.TriggerType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ComputeSchedulesTests {
    @Test
    public void testDeserialize() {
        ComputeSchedules model =
            BinaryData
                .fromString(
                    "{\"computeStartStop\":[{\"id\":\"fusuckzmkwklsno\",\"provisioningStatus\":\"Provisioning\",\"status\":\"Enabled\",\"action\":\"Start\",\"triggerType\":\"Recurrence\",\"recurrence\":{\"triggerType\":\"Recurrence\",\"frequency\":\"Month\",\"interval\":377958143,\"endTime\":\"gwydyy\",\"startTime\":\"svkhgbv\",\"timeZone\":\"anarfdlpukhpyrne\"},\"cron\":{\"triggerType\":\"Cron\",\"expression\":\"jcpeogkhnmg\",\"endTime\":\"ouxddbhfhpfpazj\",\"startTime\":\"ywjxh\",\"timeZone\":\"ulontacnpqwteht\"},\"schedule\":{\"id\":\"rhrljyoogwxhn\",\"provisioningStatus\":\"Provisioning\",\"status\":\"Disabled\"}}]}")
                .toObject(ComputeSchedules.class);
        Assertions.assertEquals(ScheduleStatus.ENABLED, model.computeStartStop().get(0).status());
        Assertions.assertEquals(ComputePowerAction.START, model.computeStartStop().get(0).action());
        Assertions.assertEquals(TriggerType.RECURRENCE, model.computeStartStop().get(0).triggerType());
        Assertions.assertEquals("gwydyy", model.computeStartStop().get(0).recurrence().endTime());
        Assertions.assertEquals("svkhgbv", model.computeStartStop().get(0).recurrence().startTime());
        Assertions.assertEquals("anarfdlpukhpyrne", model.computeStartStop().get(0).recurrence().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.MONTH, model.computeStartStop().get(0).recurrence().frequency());
        Assertions.assertEquals(377958143, model.computeStartStop().get(0).recurrence().interval());
        Assertions.assertEquals("ouxddbhfhpfpazj", model.computeStartStop().get(0).cron().endTime());
        Assertions.assertEquals("ywjxh", model.computeStartStop().get(0).cron().startTime());
        Assertions.assertEquals("ulontacnpqwteht", model.computeStartStop().get(0).cron().timeZone());
        Assertions.assertEquals("jcpeogkhnmg", model.computeStartStop().get(0).cron().expression());
        Assertions.assertEquals("rhrljyoogwxhn", model.computeStartStop().get(0).schedule().id());
        Assertions
            .assertEquals(
                ScheduleProvisioningState.PROVISIONING,
                model.computeStartStop().get(0).schedule().provisioningStatus());
        Assertions.assertEquals(ScheduleStatus.DISABLED, model.computeStartStop().get(0).schedule().status());
    }

    @Test
    public void testSerialize() {
        ComputeSchedules model =
            new ComputeSchedules()
                .withComputeStartStop(
                    Arrays
                        .asList(
                            new ComputeStartStopSchedule()
                                .withStatus(ScheduleStatus.ENABLED)
                                .withAction(ComputePowerAction.START)
                                .withTriggerType(TriggerType.RECURRENCE)
                                .withRecurrence(
                                    new RecurrenceTrigger()
                                        .withEndTime("gwydyy")
                                        .withStartTime("svkhgbv")
                                        .withTimeZone("anarfdlpukhpyrne")
                                        .withFrequency(RecurrenceFrequency.MONTH)
                                        .withInterval(377958143))
                                .withCron(
                                    new CronTrigger()
                                        .withEndTime("ouxddbhfhpfpazj")
                                        .withStartTime("ywjxh")
                                        .withTimeZone("ulontacnpqwteht")
                                        .withExpression("jcpeogkhnmg"))
                                .withSchedule(
                                    new ScheduleBase()
                                        .withId("rhrljyoogwxhn")
                                        .withProvisioningStatus(ScheduleProvisioningState.PROVISIONING)
                                        .withStatus(ScheduleStatus.DISABLED))));
        model = BinaryData.fromObject(model).toObject(ComputeSchedules.class);
        Assertions.assertEquals(ScheduleStatus.ENABLED, model.computeStartStop().get(0).status());
        Assertions.assertEquals(ComputePowerAction.START, model.computeStartStop().get(0).action());
        Assertions.assertEquals(TriggerType.RECURRENCE, model.computeStartStop().get(0).triggerType());
        Assertions.assertEquals("gwydyy", model.computeStartStop().get(0).recurrence().endTime());
        Assertions.assertEquals("svkhgbv", model.computeStartStop().get(0).recurrence().startTime());
        Assertions.assertEquals("anarfdlpukhpyrne", model.computeStartStop().get(0).recurrence().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.MONTH, model.computeStartStop().get(0).recurrence().frequency());
        Assertions.assertEquals(377958143, model.computeStartStop().get(0).recurrence().interval());
        Assertions.assertEquals("ouxddbhfhpfpazj", model.computeStartStop().get(0).cron().endTime());
        Assertions.assertEquals("ywjxh", model.computeStartStop().get(0).cron().startTime());
        Assertions.assertEquals("ulontacnpqwteht", model.computeStartStop().get(0).cron().timeZone());
        Assertions.assertEquals("jcpeogkhnmg", model.computeStartStop().get(0).cron().expression());
        Assertions.assertEquals("rhrljyoogwxhn", model.computeStartStop().get(0).schedule().id());
        Assertions
            .assertEquals(
                ScheduleProvisioningState.PROVISIONING,
                model.computeStartStop().get(0).schedule().provisioningStatus());
        Assertions.assertEquals(ScheduleStatus.DISABLED, model.computeStartStop().get(0).schedule().status());
    }
}
