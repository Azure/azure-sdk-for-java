// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.JobBaseInner;
import com.azure.resourcemanager.machinelearning.models.JobBaseProperties;
import com.azure.resourcemanager.machinelearning.models.JobBaseResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobBaseResourceArmPaginatedResultTests {
    @Test
    public void testDeserialize() {
        JobBaseResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"rkjpvdwxfzwii\",\"value\":[{\"properties\":{\"jobType\":\"JobBaseProperties\",\"componentId\":\"bhyzsxjr\",\"computeId\":\"mbtrnegvmnvu\",\"displayName\":\"qvldspastjbkkd\",\"experimentName\":\"lves\",\"isArchived\":false,\"services\":{},\"status\":\"Running\",\"description\":\"lozapeewchpxlk\",\"properties\":{},\"tags\":{}},\"id\":\"ziycslevufuztck\",\"name\":\"yhjtqedcgzu\",\"type\":\"wmmrq\"}]}")
                .toObject(JobBaseResourceArmPaginatedResult.class);
        Assertions.assertEquals("rkjpvdwxfzwii", model.nextLink());
        Assertions.assertEquals("lozapeewchpxlk", model.value().get(0).properties().description());
        Assertions.assertEquals("bhyzsxjr", model.value().get(0).properties().componentId());
        Assertions.assertEquals("mbtrnegvmnvu", model.value().get(0).properties().computeId());
        Assertions.assertEquals("qvldspastjbkkd", model.value().get(0).properties().displayName());
        Assertions.assertEquals("lves", model.value().get(0).properties().experimentName());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @Test
    public void testSerialize() {
        JobBaseResourceArmPaginatedResult model =
            new JobBaseResourceArmPaginatedResult()
                .withNextLink("rkjpvdwxfzwii")
                .withValue(
                    Arrays
                        .asList(
                            new JobBaseInner()
                                .withProperties(
                                    new JobBaseProperties()
                                        .withDescription("lozapeewchpxlk")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withComponentId("bhyzsxjr")
                                        .withComputeId("mbtrnegvmnvu")
                                        .withDisplayName("qvldspastjbkkd")
                                        .withExperimentName("lves")
                                        .withIsArchived(false)
                                        .withServices(mapOf()))));
        model = BinaryData.fromObject(model).toObject(JobBaseResourceArmPaginatedResult.class);
        Assertions.assertEquals("rkjpvdwxfzwii", model.nextLink());
        Assertions.assertEquals("lozapeewchpxlk", model.value().get(0).properties().description());
        Assertions.assertEquals("bhyzsxjr", model.value().get(0).properties().componentId());
        Assertions.assertEquals("mbtrnegvmnvu", model.value().get(0).properties().computeId());
        Assertions.assertEquals("qvldspastjbkkd", model.value().get(0).properties().displayName());
        Assertions.assertEquals("lves", model.value().get(0).properties().experimentName());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
