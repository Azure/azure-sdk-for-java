// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalLimitSettings;
import com.azure.resourcemanager.machinelearning.models.TextNer;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TextNerTests {
    @Test
    public void testDeserialize() {
        TextNer model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"TextNER\",\"primaryMetric\":\"AveragePrecisionScoreWeighted\",\"featurizationSettings\":{\"datasetLanguage\":\"fx\"},\"limitSettings\":{\"maxConcurrentTrials\":1353197056,\"maxTrials\":1219409763,\"timeout\":\"PT119H4M38S\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadWriteMount\",\"uri\":\"fsn\",\"description\":\"kiioshj\"},\"logVerbosity\":\"Info\",\"targetColumnName\":\"tybnxgztlcgctj\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"Direct\",\"uri\":\"j\",\"description\":\"ywjzebecuvlbefvw\"}}")
                .toObject(TextNer.class);
        Assertions.assertEquals(LogVerbosity.INFO, model.logVerbosity());
        Assertions.assertEquals("tybnxgztlcgctj", model.targetColumnName());
        Assertions.assertEquals("ywjzebecuvlbefvw", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.trainingData().mode());
        Assertions.assertEquals("j", model.trainingData().uri());
        Assertions.assertEquals("fx", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(1353197056, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1219409763, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT119H4M38S"), model.limitSettings().timeout());
        Assertions.assertEquals("kiioshj", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("fsn", model.validationData().uri());
    }

    @Test
    public void testSerialize() {
        TextNer model =
            new TextNer()
                .withLogVerbosity(LogVerbosity.INFO)
                .withTargetColumnName("tybnxgztlcgctj")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("ywjzebecuvlbefvw")
                        .withMode(InputDeliveryMode.DIRECT)
                        .withUri("j"))
                .withFeaturizationSettings(new NlpVerticalFeaturizationSettings().withDatasetLanguage("fx"))
                .withLimitSettings(
                    new NlpVerticalLimitSettings()
                        .withMaxConcurrentTrials(1353197056)
                        .withMaxTrials(1219409763)
                        .withTimeout(Duration.parse("PT119H4M38S")))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("kiioshj")
                        .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                        .withUri("fsn"));
        model = BinaryData.fromObject(model).toObject(TextNer.class);
        Assertions.assertEquals(LogVerbosity.INFO, model.logVerbosity());
        Assertions.assertEquals("tybnxgztlcgctj", model.targetColumnName());
        Assertions.assertEquals("ywjzebecuvlbefvw", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.trainingData().mode());
        Assertions.assertEquals("j", model.trainingData().uri());
        Assertions.assertEquals("fx", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(1353197056, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1219409763, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT119H4M38S"), model.limitSettings().timeout());
        Assertions.assertEquals("kiioshj", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("fsn", model.validationData().uri());
    }
}
