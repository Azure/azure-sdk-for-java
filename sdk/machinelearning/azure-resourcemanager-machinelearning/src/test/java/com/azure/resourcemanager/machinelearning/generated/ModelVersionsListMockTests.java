// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ListViewType;
import com.azure.resourcemanager.machinelearning.models.ModelVersion;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ModelVersionsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"flavors\":{},\"jobName\":\"kg\",\"modelType\":\"auoors\",\"modelUri\":\"tfybipufdmxuqb\",\"isAnonymous\":true,\"isArchived\":false,\"description\":\"tuxvzfqayopbt\",\"properties\":{\"bhxmndztgsqjayq\":\"hg\",\"bjdqkn\":\"arxneibpgbr\",\"tpuwnnohmmzngocf\":\"qnm\",\"kfhaxttpfsmwgsgh\":\"juypwyiulaynosu\"},\"tags\":{\"thxuarigrjdl\":\"umlddauqmllfe\"}},\"id\":\"kqhvkrbzkuastaxk\",\"name\":\"pruulhg\",\"type\":\"t\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MachineLearningManager manager =
            MachineLearningManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ModelVersion> response =
            manager
                .modelVersions()
                .list(
                    "gaedaoiq",
                    "lm",
                    "dtwgabdxfkuzbwj",
                    "cooyvhtuqb",
                    "elnii",
                    2043359607,
                    "cgagdvcdqhftzbp",
                    "faofd",
                    1099034518,
                    "htncwmhjobzrfp",
                    "iz",
                    "cqhyftcvbz",
                    ListViewType.ARCHIVED_ONLY,
                    Context.NONE);

        Assertions.assertEquals("tuxvzfqayopbt", response.iterator().next().properties().description());
        Assertions.assertEquals("hg", response.iterator().next().properties().properties().get("bhxmndztgsqjayq"));
        Assertions.assertEquals("umlddauqmllfe", response.iterator().next().properties().tags().get("thxuarigrjdl"));
        Assertions.assertEquals(true, response.iterator().next().properties().isAnonymous());
        Assertions.assertEquals(false, response.iterator().next().properties().isArchived());
        Assertions.assertEquals("kg", response.iterator().next().properties().jobName());
        Assertions.assertEquals("auoors", response.iterator().next().properties().modelType());
        Assertions.assertEquals("tfybipufdmxuqb", response.iterator().next().properties().modelUri());
    }
}
