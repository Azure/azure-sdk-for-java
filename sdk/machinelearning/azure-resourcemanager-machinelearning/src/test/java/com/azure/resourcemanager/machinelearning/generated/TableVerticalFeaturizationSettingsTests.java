// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BlockedTransformers;
import com.azure.resourcemanager.machinelearning.models.ColumnTransformer;
import com.azure.resourcemanager.machinelearning.models.FeaturizationMode;
import com.azure.resourcemanager.machinelearning.models.TableVerticalFeaturizationSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TableVerticalFeaturizationSettingsTests {
    @Test
    public void testDeserialize() {
        TableVerticalFeaturizationSettings model =
            BinaryData
                .fromString(
                    "{\"blockedTransformers\":[\"CatTargetEncoder\",\"TextTargetEncoder\",\"TfIdf\"],\"columnNameAndTypes\":{\"vf\":\"pzealbmqkyojw\",\"jcmmzrrscub\":\"mbtsuahxsg\",\"jxcjrmmuabwib\":\"wsdrnpxqwodif\",\"e\":\"jogjonmc\"},\"enableDnnFeaturization\":false,\"mode\":\"Off\",\"transformerParams\":{\"vboclzhzjk\":[{\"fields\":[\"eofvfkakpoldt\"]}],\"bjgsjjxxahmrn\":[{\"fields\":[\"gvttx\",\"nrup\"]},{\"fields\":[\"rdixt\",\"ekidswyskb\",\"uffgllukkutvlx\"]},{\"fields\":[\"hvmblcouqehbhbc\",\"sziryrandoyp\",\"blto\"]},{\"fields\":[\"fqlwxldykalsy\",\"aolnjpnnbmjk\"]}]},\"datasetLanguage\":\"zyqegxyiv\"}")
                .toObject(TableVerticalFeaturizationSettings.class);
        Assertions.assertEquals("zyqegxyiv", model.datasetLanguage());
        Assertions.assertEquals(BlockedTransformers.CAT_TARGET_ENCODER, model.blockedTransformers().get(0));
        Assertions.assertEquals("pzealbmqkyojw", model.columnNameAndTypes().get("vf"));
        Assertions.assertEquals(false, model.enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.OFF, model.mode());
        Assertions.assertEquals("eofvfkakpoldt", model.transformerParams().get("vboclzhzjk").get(0).fields().get(0));
    }

    @Test
    public void testSerialize() {
        TableVerticalFeaturizationSettings model =
            new TableVerticalFeaturizationSettings()
                .withDatasetLanguage("zyqegxyiv")
                .withBlockedTransformers(
                    Arrays
                        .asList(
                            BlockedTransformers.CAT_TARGET_ENCODER,
                            BlockedTransformers.TEXT_TARGET_ENCODER,
                            BlockedTransformers.TF_IDF))
                .withColumnNameAndTypes(
                    mapOf(
                        "vf",
                        "pzealbmqkyojw",
                        "jcmmzrrscub",
                        "mbtsuahxsg",
                        "jxcjrmmuabwib",
                        "wsdrnpxqwodif",
                        "e",
                        "jogjonmc"))
                .withEnableDnnFeaturization(false)
                .withMode(FeaturizationMode.OFF)
                .withTransformerParams(
                    mapOf(
                        "vboclzhzjk",
                        Arrays.asList(new ColumnTransformer().withFields(Arrays.asList("eofvfkakpoldt"))),
                        "bjgsjjxxahmrn",
                        Arrays
                            .asList(
                                new ColumnTransformer().withFields(Arrays.asList("gvttx", "nrup")),
                                new ColumnTransformer()
                                    .withFields(Arrays.asList("rdixt", "ekidswyskb", "uffgllukkutvlx")),
                                new ColumnTransformer()
                                    .withFields(Arrays.asList("hvmblcouqehbhbc", "sziryrandoyp", "blto")),
                                new ColumnTransformer().withFields(Arrays.asList("fqlwxldykalsy", "aolnjpnnbmjk")))));
        model = BinaryData.fromObject(model).toObject(TableVerticalFeaturizationSettings.class);
        Assertions.assertEquals("zyqegxyiv", model.datasetLanguage());
        Assertions.assertEquals(BlockedTransformers.CAT_TARGET_ENCODER, model.blockedTransformers().get(0));
        Assertions.assertEquals("pzealbmqkyojw", model.columnNameAndTypes().get("vf"));
        Assertions.assertEquals(false, model.enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.OFF, model.mode());
        Assertions.assertEquals("eofvfkakpoldt", model.transformerParams().get("vboclzhzjk").get(0).fields().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
