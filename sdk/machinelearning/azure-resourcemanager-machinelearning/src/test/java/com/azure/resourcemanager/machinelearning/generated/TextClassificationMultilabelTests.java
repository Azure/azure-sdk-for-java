// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalLimitSettings;
import com.azure.resourcemanager.machinelearning.models.TextClassificationMultilabel;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TextClassificationMultilabelTests {
    @Test
    public void testDeserialize() {
        TextClassificationMultilabel model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"TextClassificationMultilabel\",\"primaryMetric\":\"NormMacroRecall\",\"featurizationSettings\":{\"datasetLanguage\":\"jgxieqfkyfh\"},\"limitSettings\":{\"maxConcurrentTrials\":1865845195,\"maxTrials\":1012712636,\"timeout\":\"PT47H4M26S\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"EvalMount\",\"uri\":\"nvskpaj\",\"description\":\"geumexm\"},\"logVerbosity\":\"Warning\",\"targetColumnName\":\"bccwkqmtxapeqi\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadOnlyMount\",\"uri\":\"p\",\"description\":\"gftrqrejdaahuqim\"}}")
                .toObject(TextClassificationMultilabel.class);
        Assertions.assertEquals(LogVerbosity.WARNING, model.logVerbosity());
        Assertions.assertEquals("bccwkqmtxapeqi", model.targetColumnName());
        Assertions.assertEquals("gftrqrejdaahuqim", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("p", model.trainingData().uri());
        Assertions.assertEquals("jgxieqfkyfh", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(1865845195, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1012712636, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT47H4M26S"), model.limitSettings().timeout());
        Assertions.assertEquals("geumexm", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.validationData().mode());
        Assertions.assertEquals("nvskpaj", model.validationData().uri());
    }

    @Test
    public void testSerialize() {
        TextClassificationMultilabel model =
            new TextClassificationMultilabel()
                .withLogVerbosity(LogVerbosity.WARNING)
                .withTargetColumnName("bccwkqmtxapeqi")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("gftrqrejdaahuqim")
                        .withMode(InputDeliveryMode.READ_ONLY_MOUNT)
                        .withUri("p"))
                .withFeaturizationSettings(new NlpVerticalFeaturizationSettings().withDatasetLanguage("jgxieqfkyfh"))
                .withLimitSettings(
                    new NlpVerticalLimitSettings()
                        .withMaxConcurrentTrials(1865845195)
                        .withMaxTrials(1012712636)
                        .withTimeout(Duration.parse("PT47H4M26S")))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("geumexm")
                        .withMode(InputDeliveryMode.EVAL_MOUNT)
                        .withUri("nvskpaj"));
        model = BinaryData.fromObject(model).toObject(TextClassificationMultilabel.class);
        Assertions.assertEquals(LogVerbosity.WARNING, model.logVerbosity());
        Assertions.assertEquals("bccwkqmtxapeqi", model.targetColumnName());
        Assertions.assertEquals("gftrqrejdaahuqim", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("p", model.trainingData().uri());
        Assertions.assertEquals("jgxieqfkyfh", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(1865845195, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1012712636, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT47H4M26S"), model.limitSettings().timeout());
        Assertions.assertEquals("geumexm", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.validationData().mode());
        Assertions.assertEquals("nvskpaj", model.validationData().uri());
    }
}
