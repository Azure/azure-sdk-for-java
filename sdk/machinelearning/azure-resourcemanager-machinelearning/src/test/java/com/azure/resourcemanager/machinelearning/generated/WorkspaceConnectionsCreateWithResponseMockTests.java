// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ConnectionCategory;
import com.azure.resourcemanager.machinelearning.models.ValueFormat;
import com.azure.resourcemanager.machinelearning.models.WorkspaceConnectionPropertiesV2;
import com.azure.resourcemanager.machinelearning.models.WorkspaceConnectionPropertiesV2BasicResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkspaceConnectionsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"authType\":\"WorkspaceConnectionPropertiesV2\",\"category\":\"AzureTableStorage\",\"createdByWorkspaceArmId\":\"njjthpsnxebycym\",\"expiryTime\":\"2021-04-08T08:44:08Z\",\"group\":\"AzureAI\",\"isSharedToAll\":false,\"target\":\"pnse\",\"metadata\":{\"dyzssjlmykdygj\":\"nous\",\"h\":\"gspjlf\",\"s\":\"ngwqxcrbcrgyoim\"},\"sharedUserList\":[\"cctvkog\",\"htvagwnnw\",\"nv\"],\"value\":\"yldjdkjvdryk\",\"valueFormat\":\"JSON\"},\"id\":\"oxh\",\"name\":\"rjlqdoqeje\",\"type\":\"fdlh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkspaceConnectionPropertiesV2BasicResource response = manager.workspaceConnections()
            .define("irlunsskydi")
            .withExistingWorkspace("ex", "fjqzyhzydyvtuq")
            .withProperties(new WorkspaceConnectionPropertiesV2().withCategory(ConnectionCategory.AZURE_MY_SQL_DB)
                .withExpiryTime(OffsetDateTime.parse("2021-10-27T23:46:30Z"))
                .withIsSharedToAll(true)
                .withTarget("dcwuzs")
                .withMetadata(mapOf("jeeyv", "yixecmasjnfgngxa", "axvwxtxuzh", "xbfckmoal"))
                .withSharedUserList(Arrays.asList("yffwflbkjcdzu", "ygtc", "z"))
                .withValue("efpubaldjcgldryv")
                .withValueFormat(ValueFormat.JSON))
            .create();

        Assertions.assertEquals(ConnectionCategory.AZURE_TABLE_STORAGE, response.properties().category());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-08T08:44:08Z"), response.properties().expiryTime());
        Assertions.assertEquals(false, response.properties().isSharedToAll());
        Assertions.assertEquals("pnse", response.properties().target());
        Assertions.assertEquals("nous", response.properties().metadata().get("dyzssjlmykdygj"));
        Assertions.assertEquals("cctvkog", response.properties().sharedUserList().get(0));
        Assertions.assertEquals("yldjdkjvdryk", response.properties().value());
        Assertions.assertEquals(ValueFormat.JSON, response.properties().valueFormat());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
