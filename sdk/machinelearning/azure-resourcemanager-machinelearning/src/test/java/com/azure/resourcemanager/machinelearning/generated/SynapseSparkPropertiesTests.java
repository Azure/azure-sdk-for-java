// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.AutoPauseProperties;
import com.azure.resourcemanager.machinelearning.models.AutoScaleProperties;
import com.azure.resourcemanager.machinelearning.models.SynapseSparkProperties;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SynapseSparkPropertiesTests {
    @Test
    public void testDeserialize() {
        SynapseSparkProperties model =
            BinaryData
                .fromString(
                    "{\"autoScaleProperties\":{\"minNodeCount\":402591341,\"enabled\":true,\"maxNodeCount\":1312612071},\"autoPauseProperties\":{\"delayInMinutes\":749070245,\"enabled\":false},\"sparkVersion\":\"tswfpfmdgycxnms\",\"nodeCount\":1511444784,\"nodeSize\":\"jjyslurlps\",\"nodeSizeFamily\":\"kvp\",\"subscriptionId\":\"wqslsrhmpqvw\",\"resourceGroup\":\"kondcb\",\"workspaceName\":\"imuvqejosovyrrl\",\"poolName\":\"esi\"}")
                .toObject(SynapseSparkProperties.class);
        Assertions.assertEquals(402591341, model.autoScaleProperties().minNodeCount());
        Assertions.assertEquals(true, model.autoScaleProperties().enabled());
        Assertions.assertEquals(1312612071, model.autoScaleProperties().maxNodeCount());
        Assertions.assertEquals(749070245, model.autoPauseProperties().delayInMinutes());
        Assertions.assertEquals(false, model.autoPauseProperties().enabled());
        Assertions.assertEquals("tswfpfmdgycxnms", model.sparkVersion());
        Assertions.assertEquals(1511444784, model.nodeCount());
        Assertions.assertEquals("jjyslurlps", model.nodeSize());
        Assertions.assertEquals("kvp", model.nodeSizeFamily());
        Assertions.assertEquals("wqslsrhmpqvw", model.subscriptionId());
        Assertions.assertEquals("kondcb", model.resourceGroup());
        Assertions.assertEquals("imuvqejosovyrrl", model.workspaceName());
        Assertions.assertEquals("esi", model.poolName());
    }

    @Test
    public void testSerialize() {
        SynapseSparkProperties model =
            new SynapseSparkProperties()
                .withAutoScaleProperties(
                    new AutoScaleProperties()
                        .withMinNodeCount(402591341)
                        .withEnabled(true)
                        .withMaxNodeCount(1312612071))
                .withAutoPauseProperties(new AutoPauseProperties().withDelayInMinutes(749070245).withEnabled(false))
                .withSparkVersion("tswfpfmdgycxnms")
                .withNodeCount(1511444784)
                .withNodeSize("jjyslurlps")
                .withNodeSizeFamily("kvp")
                .withSubscriptionId("wqslsrhmpqvw")
                .withResourceGroup("kondcb")
                .withWorkspaceName("imuvqejosovyrrl")
                .withPoolName("esi");
        model = BinaryData.fromObject(model).toObject(SynapseSparkProperties.class);
        Assertions.assertEquals(402591341, model.autoScaleProperties().minNodeCount());
        Assertions.assertEquals(true, model.autoScaleProperties().enabled());
        Assertions.assertEquals(1312612071, model.autoScaleProperties().maxNodeCount());
        Assertions.assertEquals(749070245, model.autoPauseProperties().delayInMinutes());
        Assertions.assertEquals(false, model.autoPauseProperties().enabled());
        Assertions.assertEquals("tswfpfmdgycxnms", model.sparkVersion());
        Assertions.assertEquals(1511444784, model.nodeCount());
        Assertions.assertEquals("jjyslurlps", model.nodeSize());
        Assertions.assertEquals("kvp", model.nodeSizeFamily());
        Assertions.assertEquals("wqslsrhmpqvw", model.subscriptionId());
        Assertions.assertEquals("kondcb", model.resourceGroup());
        Assertions.assertEquals("imuvqejosovyrrl", model.workspaceName());
        Assertions.assertEquals("esi", model.poolName());
    }
}
