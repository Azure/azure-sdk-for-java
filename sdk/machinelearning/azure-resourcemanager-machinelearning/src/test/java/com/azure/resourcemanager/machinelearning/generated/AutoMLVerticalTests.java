// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.AutoMLVertical;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import org.junit.jupiter.api.Assertions;

public final class AutoMLVerticalTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutoMLVertical model = BinaryData.fromString(
            "{\"taskType\":\"AutoMLVertical\",\"logVerbosity\":\"Error\",\"trainingData\":{\"jobInputType\":\"mltable\",\"uri\":\"q\",\"mode\":\"ReadOnlyMount\",\"description\":\"xqwqueu\"},\"targetColumnName\":\"lztpziizevjykof\"}")
            .toObject(AutoMLVertical.class);
        Assertions.assertEquals(LogVerbosity.ERROR, model.logVerbosity());
        Assertions.assertEquals("xqwqueu", model.trainingData().description());
        Assertions.assertEquals("q", model.trainingData().uri());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("lztpziizevjykof", model.targetColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutoMLVertical model = new AutoMLVertical().withLogVerbosity(LogVerbosity.ERROR)
            .withTrainingData(new MLTableJobInput().withDescription("xqwqueu")
                .withUri("q")
                .withMode(InputDeliveryMode.READ_ONLY_MOUNT))
            .withTargetColumnName("lztpziizevjykof");
        model = BinaryData.fromObject(model).toObject(AutoMLVertical.class);
        Assertions.assertEquals(LogVerbosity.ERROR, model.logVerbosity());
        Assertions.assertEquals("xqwqueu", model.trainingData().description());
        Assertions.assertEquals("q", model.trainingData().uri());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("lztpziizevjykof", model.targetColumnName());
    }
}
