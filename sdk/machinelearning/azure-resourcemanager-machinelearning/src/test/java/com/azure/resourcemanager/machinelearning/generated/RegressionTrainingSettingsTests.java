// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.RegressionModels;
import com.azure.resourcemanager.machinelearning.models.RegressionTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RegressionTrainingSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RegressionTrainingSettings model = BinaryData.fromString(
            "{\"allowedTrainingAlgorithms\":[\"ExtremeRandomTrees\",\"KNN\",\"LightGBM\",\"ElasticNet\"],\"blockedTrainingAlgorithms\":[\"ElasticNet\",\"ElasticNet\",\"GradientBoosting\",\"RandomForest\"],\"enableOnnxCompatibleModels\":false,\"stackEnsembleSettings\":{\"stackMetaLearnerType\":\"LightGBMClassifier\",\"stackMetaLearnerTrainPercentage\":82.88657288403749,\"stackMetaLearnerKWargs\":\"datagp\"},\"enableStackEnsemble\":false,\"enableVoteEnsemble\":true,\"ensembleModelDownloadTimeout\":\"PT146H7M34S\",\"enableModelExplainability\":false,\"enableDnnTraining\":false}")
            .toObject(RegressionTrainingSettings.class);
        Assertions.assertEquals(false, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.LIGHT_GBMCLASSIFIER,
            model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(82.88657288403749D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(true, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT146H7M34S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(false, model.enableModelExplainability());
        Assertions.assertEquals(false, model.enableDnnTraining());
        Assertions.assertEquals(RegressionModels.EXTREME_RANDOM_TREES, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(RegressionModels.ELASTIC_NET, model.blockedTrainingAlgorithms().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RegressionTrainingSettings model = new RegressionTrainingSettings().withEnableOnnxCompatibleModels(false)
            .withStackEnsembleSettings(
                new StackEnsembleSettings().withStackMetaLearnerType(StackMetaLearnerType.LIGHT_GBMCLASSIFIER)
                    .withStackMetaLearnerTrainPercentage(82.88657288403749D)
                    .withStackMetaLearnerKWargs("datagp"))
            .withEnableStackEnsemble(false)
            .withEnableVoteEnsemble(true)
            .withEnsembleModelDownloadTimeout(Duration.parse("PT146H7M34S"))
            .withEnableModelExplainability(false)
            .withEnableDnnTraining(false)
            .withAllowedTrainingAlgorithms(Arrays.asList(RegressionModels.EXTREME_RANDOM_TREES, RegressionModels.KNN,
                RegressionModels.LIGHT_GBM, RegressionModels.ELASTIC_NET))
            .withBlockedTrainingAlgorithms(Arrays.asList(RegressionModels.ELASTIC_NET, RegressionModels.ELASTIC_NET,
                RegressionModels.GRADIENT_BOOSTING, RegressionModels.RANDOM_FOREST));
        model = BinaryData.fromObject(model).toObject(RegressionTrainingSettings.class);
        Assertions.assertEquals(false, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.LIGHT_GBMCLASSIFIER,
            model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(82.88657288403749D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(true, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT146H7M34S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(false, model.enableModelExplainability());
        Assertions.assertEquals(false, model.enableDnnTraining());
        Assertions.assertEquals(RegressionModels.EXTREME_RANDOM_TREES, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(RegressionModels.ELASTIC_NET, model.blockedTrainingAlgorithms().get(0));
    }
}
