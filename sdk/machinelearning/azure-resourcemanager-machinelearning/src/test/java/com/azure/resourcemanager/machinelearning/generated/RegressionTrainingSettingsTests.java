// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.RegressionModels;
import com.azure.resourcemanager.machinelearning.models.RegressionTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RegressionTrainingSettingsTests {
    @Test
    public void testDeserialize() {
        RegressionTrainingSettings model =
            BinaryData
                .fromString(
                    "{\"allowedTrainingAlgorithms\":[\"LightGBM\"],\"blockedTrainingAlgorithms\":[\"GradientBoosting\",\"SGD\",\"ElasticNet\"],\"enableDnnTraining\":false,\"enableModelExplainability\":true,\"enableOnnxCompatibleModels\":false,\"enableStackEnsemble\":false,\"enableVoteEnsemble\":false,\"ensembleModelDownloadTimeout\":\"PT177H29M53S\",\"stackEnsembleSettings\":{\"stackMetaLearnerTrainPercentage\":94.01282002001749,\"stackMetaLearnerType\":\"None\"}}")
                .toObject(RegressionTrainingSettings.class);
        Assertions.assertEquals(false, model.enableDnnTraining());
        Assertions.assertEquals(true, model.enableModelExplainability());
        Assertions.assertEquals(false, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(false, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT177H29M53S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(94.01282002001749D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(StackMetaLearnerType.NONE, model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(RegressionModels.LIGHT_GBM, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(RegressionModels.GRADIENT_BOOSTING, model.blockedTrainingAlgorithms().get(0));
    }

    @Test
    public void testSerialize() {
        RegressionTrainingSettings model =
            new RegressionTrainingSettings()
                .withEnableDnnTraining(false)
                .withEnableModelExplainability(true)
                .withEnableOnnxCompatibleModels(false)
                .withEnableStackEnsemble(false)
                .withEnableVoteEnsemble(false)
                .withEnsembleModelDownloadTimeout(Duration.parse("PT177H29M53S"))
                .withStackEnsembleSettings(
                    new StackEnsembleSettings()
                        .withStackMetaLearnerTrainPercentage(94.01282002001749D)
                        .withStackMetaLearnerType(StackMetaLearnerType.NONE))
                .withAllowedTrainingAlgorithms(Arrays.asList(RegressionModels.LIGHT_GBM))
                .withBlockedTrainingAlgorithms(
                    Arrays
                        .asList(
                            RegressionModels.GRADIENT_BOOSTING, RegressionModels.SGD, RegressionModels.ELASTIC_NET));
        model = BinaryData.fromObject(model).toObject(RegressionTrainingSettings.class);
        Assertions.assertEquals(false, model.enableDnnTraining());
        Assertions.assertEquals(true, model.enableModelExplainability());
        Assertions.assertEquals(false, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(false, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT177H29M53S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(94.01282002001749D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(StackMetaLearnerType.NONE, model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(RegressionModels.LIGHT_GBM, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(RegressionModels.GRADIENT_BOOSTING, model.blockedTrainingAlgorithms().get(0));
    }
}
