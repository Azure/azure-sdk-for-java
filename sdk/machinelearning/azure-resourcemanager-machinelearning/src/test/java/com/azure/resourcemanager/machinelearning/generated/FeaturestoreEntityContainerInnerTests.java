// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.FeaturestoreEntityContainerInner;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturestoreEntityContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeaturestoreEntityContainerInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"isArchived\":true,\"latestVersion\":\"scubiwsdrnpxqwod\",\"nextVersion\":\"fjxcjrmmuabwibv\",\"description\":\"gjonmcy\",\"tags\":{\"bamwineo\":\"y\",\"vevboclzh\":\"vfkakpold\",\"gvttx\":\"jknyu\",\"a\":\"nrup\"},\"properties\":{\"swyskbruffg\":\"dixtreki\",\"lcouqehbhbcdszir\":\"lukkutvlxhrpqhvm\"}},\"id\":\"an\",\"name\":\"oypmbltoorm\",\"type\":\"fqlwxldykalsy\"}")
            .toObject(FeaturestoreEntityContainerInner.class);
        Assertions.assertEquals("gjonmcy", model.properties().description());
        Assertions.assertEquals("y", model.properties().tags().get("bamwineo"));
        Assertions.assertEquals("dixtreki", model.properties().properties().get("swyskbruffg"));
        Assertions.assertEquals(true, model.properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeaturestoreEntityContainerInner model = new FeaturestoreEntityContainerInner()
            .withProperties(new FeaturestoreEntityContainerProperties().withDescription("gjonmcy")
                .withTags(mapOf("bamwineo", "y", "vevboclzh", "vfkakpold", "gvttx", "jknyu", "a", "nrup"))
                .withProperties(mapOf("swyskbruffg", "dixtreki", "lcouqehbhbcdszir", "lukkutvlxhrpqhvm"))
                .withIsArchived(true));
        model = BinaryData.fromObject(model).toObject(FeaturestoreEntityContainerInner.class);
        Assertions.assertEquals("gjonmcy", model.properties().description());
        Assertions.assertEquals("y", model.properties().tags().get("bamwineo"));
        Assertions.assertEquals("dixtreki", model.properties().properties().get("swyskbruffg"));
        Assertions.assertEquals(true, model.properties().isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
