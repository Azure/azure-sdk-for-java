// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.SkuResourceInner;
import com.azure.resourcemanager.machinelearning.models.SkuCapacity;
import com.azure.resourcemanager.machinelearning.models.SkuResourceArmPaginatedResult;
import com.azure.resourcemanager.machinelearning.models.SkuScaleType;
import com.azure.resourcemanager.machinelearning.models.SkuSetting;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SkuResourceArmPaginatedResultTests {
    @Test
    public void testDeserialize() {
        SkuResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"tzh\",\"value\":[{\"capacity\":{\"default\":1692092604,\"maximum\":1169630994,\"minimum\":234207820,\"scaleType\":\"None\"},\"resourceType\":\"jeick\",\"sku\":{\"name\":\"vcpopmxe\",\"tier\":\"Standard\"}}]}")
                .toObject(SkuResourceArmPaginatedResult.class);
        Assertions.assertEquals("tzh", model.nextLink());
        Assertions.assertEquals(1692092604, model.value().get(0).capacity().defaultProperty());
        Assertions.assertEquals(1169630994, model.value().get(0).capacity().maximum());
        Assertions.assertEquals(234207820, model.value().get(0).capacity().minimum());
        Assertions.assertEquals(SkuScaleType.NONE, model.value().get(0).capacity().scaleType());
        Assertions.assertEquals("vcpopmxe", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.value().get(0).sku().tier());
    }

    @Test
    public void testSerialize() {
        SkuResourceArmPaginatedResult model =
            new SkuResourceArmPaginatedResult()
                .withNextLink("tzh")
                .withValue(
                    Arrays
                        .asList(
                            new SkuResourceInner()
                                .withCapacity(
                                    new SkuCapacity()
                                        .withDefaultProperty(1692092604)
                                        .withMaximum(1169630994)
                                        .withMinimum(234207820)
                                        .withScaleType(SkuScaleType.NONE))
                                .withSku(new SkuSetting().withName("vcpopmxe").withTier(SkuTier.STANDARD))));
        model = BinaryData.fromObject(model).toObject(SkuResourceArmPaginatedResult.class);
        Assertions.assertEquals("tzh", model.nextLink());
        Assertions.assertEquals(1692092604, model.value().get(0).capacity().defaultProperty());
        Assertions.assertEquals(1169630994, model.value().get(0).capacity().maximum());
        Assertions.assertEquals(234207820, model.value().get(0).capacity().minimum());
        Assertions.assertEquals(SkuScaleType.NONE, model.value().get(0).capacity().scaleType());
        Assertions.assertEquals("vcpopmxe", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.value().get(0).sku().tier());
    }
}
