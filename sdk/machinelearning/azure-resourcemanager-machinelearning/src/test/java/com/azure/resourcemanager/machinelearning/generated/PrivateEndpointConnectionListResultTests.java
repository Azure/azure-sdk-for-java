// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpoint;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointConnectionListResult;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.machinelearning.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"ixisxyawjoy\"},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"lyjpk\",\"actionsRequired\":\"dzyexznelixh\"},\"provisioningState\":\"Deleting\"},\"identity\":{\"principalId\":\"e8746914-d87b-4e6a-9063-7de91901ae30\",\"tenantId\":\"9e24205f-3af9-4d6e-8bf3-5baad886704c\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"knalaulppg\":{\"principalId\":\"1c6c4aa6-d801-4bf4-aa6a-da95d313dcd3\",\"clientId\":\"1fda9644-f31d-459a-b651-c5e4bf27f16e\"},\"pnapnyiropuh\":{\"principalId\":\"274a6b8d-d2e6-4826-bdfa-8ae08887b8b2\",\"clientId\":\"a3bb8cdd-3625-47f5-b9b6-0f06ea09f149\"},\"vpgylgqgitxmed\":{\"principalId\":\"21dfb45b-8d06-4cc2-98b7-7941b56010fc\",\"clientId\":\"f549fe67-e3ad-49a6-8971-7b7d3754c2a4\"},\"slynqwwnc\":{\"principalId\":\"98035cf2-5aeb-4878-a9cd-2b58e7712610\",\"clientId\":\"74bf5185-1bf4-4c1c-a586-1c753ca2913e\"}}},\"location\":\"zhxgktrmgucn\",\"tags\":{\"oellwp\":\"t\"},\"sku\":{\"name\":\"d\",\"tier\":\"Standard\",\"size\":\"qbuaceopzfqr\",\"family\":\"uaopppcqeq\",\"capacity\":1990032205},\"id\":\"dahzxctobg\",\"name\":\"kdmoi\",\"type\":\"postmgrcfbunrm\"}]}")
            .toObject(PrivateEndpointConnectionListResult.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("zhxgktrmgucn", model.value().get(0).location());
        Assertions.assertEquals("t", model.value().get(0).tags().get("oellwp"));
        Assertions.assertEquals("d", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.value().get(0).sku().tier());
        Assertions.assertEquals("qbuaceopzfqr", model.value().get(0).sku().size());
        Assertions.assertEquals("uaopppcqeq", model.value().get(0).sku().family());
        Assertions.assertEquals(1990032205, model.value().get(0).sku().capacity());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.DISCONNECTED,
            model.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("lyjpk", model.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("dzyexznelixh",
            model.value().get(0).privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionListResult model
            = new PrivateEndpointConnectionListResult()
                .withValue(
                    Arrays.asList(new PrivateEndpointConnectionInner()
                        .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("knalaulppg", new UserAssignedIdentity(), "pnapnyiropuh",
                                new UserAssignedIdentity(), "vpgylgqgitxmed", new UserAssignedIdentity(), "slynqwwnc",
                                new UserAssignedIdentity())))
                        .withLocation("zhxgktrmgucn")
                        .withTags(mapOf("oellwp", "t"))
                        .withSku(new Sku().withName("d")
                            .withTier(SkuTier.STANDARD)
                            .withSize("qbuaceopzfqr")
                            .withFamily("uaopppcqeq")
                            .withCapacity(1990032205))
                        .withPrivateEndpoint(new PrivateEndpoint())
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateEndpointServiceConnectionStatus.DISCONNECTED)
                            .withDescription("lyjpk")
                            .withActionsRequired("dzyexznelixh"))));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionListResult.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("zhxgktrmgucn", model.value().get(0).location());
        Assertions.assertEquals("t", model.value().get(0).tags().get("oellwp"));
        Assertions.assertEquals("d", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.value().get(0).sku().tier());
        Assertions.assertEquals("qbuaceopzfqr", model.value().get(0).sku().size());
        Assertions.assertEquals("uaopppcqeq", model.value().get(0).sku().family());
        Assertions.assertEquals(1990032205, model.value().get(0).sku().capacity());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.DISCONNECTED,
            model.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("lyjpk", model.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("dzyexznelixh",
            model.value().get(0).privateLinkServiceConnectionState().actionsRequired());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
