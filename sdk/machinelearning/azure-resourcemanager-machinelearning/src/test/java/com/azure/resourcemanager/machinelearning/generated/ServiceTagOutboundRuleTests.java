// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.RuleAction;
import com.azure.resourcemanager.machinelearning.models.RuleCategory;
import com.azure.resourcemanager.machinelearning.models.RuleStatus;
import com.azure.resourcemanager.machinelearning.models.ServiceTagDestination;
import com.azure.resourcemanager.machinelearning.models.ServiceTagOutboundRule;
import org.junit.jupiter.api.Assertions;

public final class ServiceTagOutboundRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceTagOutboundRule model = BinaryData.fromString(
            "{\"type\":\"ServiceTag\",\"destination\":{\"action\":\"Allow\",\"addressPrefixes\":[\"ijzzcaoijolbuauk\",\"wieopexelxqdw\"],\"portRanges\":\"wyil\",\"protocol\":\"ibkgxyxyau\",\"serviceTag\":\"eddobmcnltm\"},\"category\":\"UserDefined\",\"status\":\"Inactive\"}")
            .toObject(ServiceTagOutboundRule.class);
        Assertions.assertEquals(RuleCategory.USER_DEFINED, model.category());
        Assertions.assertEquals(RuleStatus.INACTIVE, model.status());
        Assertions.assertEquals(RuleAction.ALLOW, model.destination().action());
        Assertions.assertEquals("wyil", model.destination().portRanges());
        Assertions.assertEquals("ibkgxyxyau", model.destination().protocol());
        Assertions.assertEquals("eddobmcnltm", model.destination().serviceTag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceTagOutboundRule model = new ServiceTagOutboundRule().withCategory(RuleCategory.USER_DEFINED)
            .withStatus(RuleStatus.INACTIVE)
            .withDestination(new ServiceTagDestination().withAction(RuleAction.ALLOW)
                .withPortRanges("wyil")
                .withProtocol("ibkgxyxyau")
                .withServiceTag("eddobmcnltm"));
        model = BinaryData.fromObject(model).toObject(ServiceTagOutboundRule.class);
        Assertions.assertEquals(RuleCategory.USER_DEFINED, model.category());
        Assertions.assertEquals(RuleStatus.INACTIVE, model.status());
        Assertions.assertEquals(RuleAction.ALLOW, model.destination().action());
        Assertions.assertEquals("wyil", model.destination().portRanges());
        Assertions.assertEquals("ibkgxyxyau", model.destination().protocol());
        Assertions.assertEquals("eddobmcnltm", model.destination().serviceTag());
    }
}
