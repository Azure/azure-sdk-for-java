// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.CustomMetricThreshold;
import com.azure.resourcemanager.machinelearning.models.CustomMonitoringSignal;
import com.azure.resourcemanager.machinelearning.models.JobInput;
import com.azure.resourcemanager.machinelearning.models.JobInputType;
import com.azure.resourcemanager.machinelearning.models.MonitoringInputDataBase;
import com.azure.resourcemanager.machinelearning.models.MonitoringNotificationType;
import com.azure.resourcemanager.machinelearning.models.MonitoringThreshold;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomMonitoringSignalTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomMonitoringSignal model = BinaryData.fromString(
            "{\"signalType\":\"Custom\",\"inputAssets\":{\"or\":{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"ylqlocvvujexaygl\",\"jobInputType\":\"triton_model\",\"uri\":\"kgjn\",\"columns\":{\"iuofpieidz\":\"aslavxj\",\"vikmfngpmillxgj\":\"vssqywjopackyhy\",\"bijeiydy\":\"cizwgsori\",\"opdweoft\":\"uynhbokayrgwybr\"}}},\"inputs\":{\"octqkmvjanxvzf\":{\"jobInputType\":\"JobInput\",\"description\":\"s\"},\"xx\":{\"jobInputType\":\"JobInput\",\"description\":\"htjnwosstfjxtv\"},\"mxeezwyh\":{\"jobInputType\":\"JobInput\",\"description\":\"fcwrri\"}},\"componentId\":\"mbjiqeg\",\"metricThresholds\":[{\"threshold\":{\"value\":75.0769890262459},\"metric\":\"hc\"},{\"threshold\":{\"value\":63.09814916267899},\"metric\":\"dkgd\"}],\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"nensmuffi\":\"nzbjekwuycky\",\"otdxpo\":\"jbctvbpzujqj\",\"cktybhjuxid\":\"cslhwuusi\",\"ugxwjwilmqrslaat\":\"hxomilddxjx\"}}")
            .toObject(CustomMonitoringSignal.class);
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION, model.notificationTypes().get(0));
        Assertions.assertEquals("nzbjekwuycky", model.properties().get("nensmuffi"));
        Assertions.assertEquals("ylqlocvvujexaygl", model.inputAssets().get("or").dataContext());
        Assertions.assertEquals(JobInputType.TRITON_MODEL, model.inputAssets().get("or").jobInputType());
        Assertions.assertEquals("kgjn", model.inputAssets().get("or").uri());
        Assertions.assertEquals("aslavxj", model.inputAssets().get("or").columns().get("iuofpieidz"));
        Assertions.assertEquals("s", model.inputs().get("octqkmvjanxvzf").description());
        Assertions.assertEquals("mbjiqeg", model.componentId());
        Assertions.assertEquals(75.0769890262459D, model.metricThresholds().get(0).threshold().value());
        Assertions.assertEquals("hc", model.metricThresholds().get(0).metric());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomMonitoringSignal model = new CustomMonitoringSignal()
            .withNotificationTypes(
                Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION, MonitoringNotificationType.AML_NOTIFICATION))
            .withProperties(mapOf("nensmuffi", "nzbjekwuycky", "otdxpo", "jbctvbpzujqj", "cktybhjuxid", "cslhwuusi",
                "ugxwjwilmqrslaat", "hxomilddxjx"))
            .withInputAssets(mapOf("or",
                new MonitoringInputDataBase().withDataContext("ylqlocvvujexaygl")
                    .withJobInputType(JobInputType.TRITON_MODEL)
                    .withUri("kgjn")
                    .withColumns(mapOf("iuofpieidz", "aslavxj", "vikmfngpmillxgj", "vssqywjopackyhy", "bijeiydy",
                        "cizwgsori", "opdweoft", "uynhbokayrgwybr"))))
            .withInputs(mapOf("octqkmvjanxvzf", new JobInput().withDescription("s"), "xx",
                new JobInput().withDescription("htjnwosstfjxtv"), "mxeezwyh", new JobInput().withDescription("fcwrri")))
            .withComponentId("mbjiqeg")
            .withMetricThresholds(Arrays.asList(
                new CustomMetricThreshold().withThreshold(new MonitoringThreshold().withValue(75.0769890262459D))
                    .withMetric("hc"),
                new CustomMetricThreshold().withThreshold(new MonitoringThreshold().withValue(63.09814916267899D))
                    .withMetric("dkgd")));
        model = BinaryData.fromObject(model).toObject(CustomMonitoringSignal.class);
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION, model.notificationTypes().get(0));
        Assertions.assertEquals("nzbjekwuycky", model.properties().get("nensmuffi"));
        Assertions.assertEquals("ylqlocvvujexaygl", model.inputAssets().get("or").dataContext());
        Assertions.assertEquals(JobInputType.TRITON_MODEL, model.inputAssets().get("or").jobInputType());
        Assertions.assertEquals("kgjn", model.inputAssets().get("or").uri());
        Assertions.assertEquals("aslavxj", model.inputAssets().get("or").columns().get("iuofpieidz"));
        Assertions.assertEquals("s", model.inputs().get("octqkmvjanxvzf").description());
        Assertions.assertEquals("mbjiqeg", model.componentId());
        Assertions.assertEquals(75.0769890262459D, model.metricThresholds().get(0).threshold().value());
        Assertions.assertEquals("hc", model.metricThresholds().get(0).metric());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
