// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchema;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchemaResources;
import com.azure.resourcemanager.machinelearning.models.KubernetesProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesProperties model = BinaryData.fromString(
            "{\"relayConnectionString\":\"od\",\"serviceBusConnectionString\":\"vfsxx\",\"extensionPrincipalId\":\"desqlvg\",\"extensionInstanceReleaseTrain\":\"pwgoljt\",\"vcName\":\"nm\",\"namespace\":\"dobygoogxqapj\",\"defaultInstanceType\":\"azyj\",\"instanceTypes\":{\"qeq\":{\"nodeSelector\":{\"kvibfa\":\"odjnos\"},\"resources\":{\"requests\":{\"ktz\":\"trnzpducdaaktu\",\"wkppnwyytfvp\":\"oimyfpqd\",\"nwhvuldbkkejj\":\"tfjikffffgkuh\",\"xjqifhujjsbc\":\"jigawgaz\"},\"limits\":{\"rhhmojusu\":\"aahzbhuroolkol\",\"ia\":\"gfjzcvaax\",\"xkukm\":\"ahfxwccok\",\"ynuhh\":\"c\"}}}}}")
            .toObject(KubernetesProperties.class);
        Assertions.assertEquals("od", model.relayConnectionString());
        Assertions.assertEquals("vfsxx", model.serviceBusConnectionString());
        Assertions.assertEquals("desqlvg", model.extensionPrincipalId());
        Assertions.assertEquals("pwgoljt", model.extensionInstanceReleaseTrain());
        Assertions.assertEquals("nm", model.vcName());
        Assertions.assertEquals("dobygoogxqapj", model.namespace());
        Assertions.assertEquals("azyj", model.defaultInstanceType());
        Assertions.assertEquals("odjnos", model.instanceTypes().get("qeq").nodeSelector().get("kvibfa"));
        Assertions.assertEquals("trnzpducdaaktu", model.instanceTypes().get("qeq").resources().requests().get("ktz"));
        Assertions.assertEquals("aahzbhuroolkol",
            model.instanceTypes().get("qeq").resources().limits().get("rhhmojusu"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesProperties model = new KubernetesProperties().withRelayConnectionString("od")
            .withServiceBusConnectionString("vfsxx")
            .withExtensionPrincipalId("desqlvg")
            .withExtensionInstanceReleaseTrain("pwgoljt")
            .withVcName("nm")
            .withNamespace("dobygoogxqapj")
            .withDefaultInstanceType("azyj")
            .withInstanceTypes(mapOf("qeq", new InstanceTypeSchema().withNodeSelector(mapOf("kvibfa", "odjnos"))
                .withResources(new InstanceTypeSchemaResources()
                    .withRequests(mapOf("ktz", "trnzpducdaaktu", "wkppnwyytfvp", "oimyfpqd", "nwhvuldbkkejj",
                        "tfjikffffgkuh", "xjqifhujjsbc", "jigawgaz"))
                    .withLimits(
                        mapOf("rhhmojusu", "aahzbhuroolkol", "ia", "gfjzcvaax", "xkukm", "ahfxwccok", "ynuhh", "c")))));
        model = BinaryData.fromObject(model).toObject(KubernetesProperties.class);
        Assertions.assertEquals("od", model.relayConnectionString());
        Assertions.assertEquals("vfsxx", model.serviceBusConnectionString());
        Assertions.assertEquals("desqlvg", model.extensionPrincipalId());
        Assertions.assertEquals("pwgoljt", model.extensionInstanceReleaseTrain());
        Assertions.assertEquals("nm", model.vcName());
        Assertions.assertEquals("dobygoogxqapj", model.namespace());
        Assertions.assertEquals("azyj", model.defaultInstanceType());
        Assertions.assertEquals("odjnos", model.instanceTypes().get("qeq").nodeSelector().get("kvibfa"));
        Assertions.assertEquals("trnzpducdaaktu", model.instanceTypes().get("qeq").resources().requests().get("ktz"));
        Assertions.assertEquals("aahzbhuroolkol",
            model.instanceTypes().get("qeq").resources().limits().get("rhhmojusu"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
