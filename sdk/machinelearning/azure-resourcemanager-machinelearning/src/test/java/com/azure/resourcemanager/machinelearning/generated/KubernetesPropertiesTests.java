// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchema;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchemaResources;
import com.azure.resourcemanager.machinelearning.models.KubernetesProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class KubernetesPropertiesTests {
    @Test
    public void testDeserialize() {
        KubernetesProperties model =
            BinaryData
                .fromString(
                    "{\"relayConnectionString\":\"ribi\",\"serviceBusConnectionString\":\"tgplucfota\",\"extensionPrincipalId\":\"c\",\"extensionInstanceReleaseTrain\":\"nykzcugswvxwlm\",\"vcName\":\"wmvtxnjm\",\"namespace\":\"cuqudtcvclxy\",\"defaultInstanceType\":\"dkvgfabuiyjibuzp\",\"instanceTypes\":{\"ylkmqp\":{\"nodeSelector\":{\"gjiuqhibto\":\"eiknpgo\",\"jedmurrxxgewp\":\"ipq\"},\"resources\":{\"requests\":{},\"limits\":{}}},\"foiyjwpfilk\":{\"nodeSelector\":{\"oxoebqi\":\"hlfbcgwgc\",\"ujqlafcbahh\":\"jipnwj\"},\"resources\":{\"requests\":{},\"limits\":{}}}}}")
                .toObject(KubernetesProperties.class);
        Assertions.assertEquals("ribi", model.relayConnectionString());
        Assertions.assertEquals("tgplucfota", model.serviceBusConnectionString());
        Assertions.assertEquals("c", model.extensionPrincipalId());
        Assertions.assertEquals("nykzcugswvxwlm", model.extensionInstanceReleaseTrain());
        Assertions.assertEquals("wmvtxnjm", model.vcName());
        Assertions.assertEquals("cuqudtcvclxy", model.namespace());
        Assertions.assertEquals("dkvgfabuiyjibuzp", model.defaultInstanceType());
        Assertions.assertEquals("eiknpgo", model.instanceTypes().get("ylkmqp").nodeSelector().get("gjiuqhibto"));
    }

    @Test
    public void testSerialize() {
        KubernetesProperties model =
            new KubernetesProperties()
                .withRelayConnectionString("ribi")
                .withServiceBusConnectionString("tgplucfota")
                .withExtensionPrincipalId("c")
                .withExtensionInstanceReleaseTrain("nykzcugswvxwlm")
                .withVcName("wmvtxnjm")
                .withNamespace("cuqudtcvclxy")
                .withDefaultInstanceType("dkvgfabuiyjibuzp")
                .withInstanceTypes(
                    mapOf(
                        "ylkmqp",
                        new InstanceTypeSchema()
                            .withNodeSelector(mapOf("gjiuqhibto", "eiknpgo", "jedmurrxxgewp", "ipq"))
                            .withResources(new InstanceTypeSchemaResources().withRequests(mapOf()).withLimits(mapOf())),
                        "foiyjwpfilk",
                        new InstanceTypeSchema()
                            .withNodeSelector(mapOf("oxoebqi", "hlfbcgwgc", "ujqlafcbahh", "jipnwj"))
                            .withResources(
                                new InstanceTypeSchemaResources().withRequests(mapOf()).withLimits(mapOf()))));
        model = BinaryData.fromObject(model).toObject(KubernetesProperties.class);
        Assertions.assertEquals("ribi", model.relayConnectionString());
        Assertions.assertEquals("tgplucfota", model.serviceBusConnectionString());
        Assertions.assertEquals("c", model.extensionPrincipalId());
        Assertions.assertEquals("nykzcugswvxwlm", model.extensionInstanceReleaseTrain());
        Assertions.assertEquals("wmvtxnjm", model.vcName());
        Assertions.assertEquals("cuqudtcvclxy", model.namespace());
        Assertions.assertEquals("dkvgfabuiyjibuzp", model.defaultInstanceType());
        Assertions.assertEquals("eiknpgo", model.instanceTypes().get("ylkmqp").nodeSelector().get("gjiuqhibto"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
