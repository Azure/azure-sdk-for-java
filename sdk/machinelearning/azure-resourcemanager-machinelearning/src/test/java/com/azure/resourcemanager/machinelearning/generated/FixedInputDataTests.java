// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.FixedInputData;
import com.azure.resourcemanager.machinelearning.models.JobInputType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FixedInputDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FixedInputData model = BinaryData.fromString(
            "{\"inputDataType\":\"Fixed\",\"dataContext\":\"dpmtonvhgn\",\"jobInputType\":\"uri_folder\",\"uri\":\"me\",\"columns\":{\"mmmkvavucgjiuaiq\":\"bpjbapm\",\"hr\":\"mnuf\",\"vwlvivjmxmlit\":\"hxwwuzdm\",\"iifef\":\"dsjipdviscotyxb\"}}")
            .toObject(FixedInputData.class);
        Assertions.assertEquals("dpmtonvhgn", model.dataContext());
        Assertions.assertEquals(JobInputType.URI_FOLDER, model.jobInputType());
        Assertions.assertEquals("me", model.uri());
        Assertions.assertEquals("bpjbapm", model.columns().get("mmmkvavucgjiuaiq"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FixedInputData model = new FixedInputData().withDataContext("dpmtonvhgn")
            .withJobInputType(JobInputType.URI_FOLDER)
            .withUri("me")
            .withColumns(mapOf("mmmkvavucgjiuaiq", "bpjbapm", "hr", "mnuf", "vwlvivjmxmlit", "hxwwuzdm", "iifef",
                "dsjipdviscotyxb"));
        model = BinaryData.fromObject(model).toObject(FixedInputData.class);
        Assertions.assertEquals("dpmtonvhgn", model.dataContext());
        Assertions.assertEquals(JobInputType.URI_FOLDER, model.jobInputType());
        Assertions.assertEquals("me", model.uri());
        Assertions.assertEquals("bpjbapm", model.columns().get("mmmkvavucgjiuaiq"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
