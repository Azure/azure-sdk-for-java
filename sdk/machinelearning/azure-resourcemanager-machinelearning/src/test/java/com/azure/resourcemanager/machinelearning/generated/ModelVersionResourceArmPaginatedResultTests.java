// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ModelVersionInner;
import com.azure.resourcemanager.machinelearning.models.ModelVersionProperties;
import com.azure.resourcemanager.machinelearning.models.ModelVersionResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ModelVersionResourceArmPaginatedResultTests {
    @Test
    public void testDeserialize() {
        ModelVersionResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"qlyvijo\",\"value\":[{\"properties\":{\"flavors\":{},\"jobName\":\"xoyzunbix\",\"modelType\":\"ti\",\"modelUri\":\"cpwpg\",\"isAnonymous\":false,\"isArchived\":true,\"description\":\"tso\",\"properties\":{},\"tags\":{}},\"id\":\"enxpmyyefr\",\"name\":\"mpdnqqskawa\",\"type\":\"qvmmbn\"}]}")
                .toObject(ModelVersionResourceArmPaginatedResult.class);
        Assertions.assertEquals("qlyvijo", model.nextLink());
        Assertions.assertEquals("tso", model.value().get(0).properties().description());
        Assertions.assertEquals(false, model.value().get(0).properties().isAnonymous());
        Assertions.assertEquals(true, model.value().get(0).properties().isArchived());
        Assertions.assertEquals("xoyzunbix", model.value().get(0).properties().jobName());
        Assertions.assertEquals("ti", model.value().get(0).properties().modelType());
        Assertions.assertEquals("cpwpg", model.value().get(0).properties().modelUri());
    }

    @Test
    public void testSerialize() {
        ModelVersionResourceArmPaginatedResult model =
            new ModelVersionResourceArmPaginatedResult()
                .withNextLink("qlyvijo")
                .withValue(
                    Arrays
                        .asList(
                            new ModelVersionInner()
                                .withProperties(
                                    new ModelVersionProperties()
                                        .withDescription("tso")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsAnonymous(false)
                                        .withIsArchived(true)
                                        .withFlavors(mapOf())
                                        .withJobName("xoyzunbix")
                                        .withModelType("ti")
                                        .withModelUri("cpwpg"))));
        model = BinaryData.fromObject(model).toObject(ModelVersionResourceArmPaginatedResult.class);
        Assertions.assertEquals("qlyvijo", model.nextLink());
        Assertions.assertEquals("tso", model.value().get(0).properties().description());
        Assertions.assertEquals(false, model.value().get(0).properties().isAnonymous());
        Assertions.assertEquals(true, model.value().get(0).properties().isArchived());
        Assertions.assertEquals("xoyzunbix", model.value().get(0).properties().jobName());
        Assertions.assertEquals("ti", model.value().get(0).properties().modelType());
        Assertions.assertEquals("cpwpg", model.value().get(0).properties().modelUri());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
