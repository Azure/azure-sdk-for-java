// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.DataQualityMetricThresholdBase;
import com.azure.resourcemanager.machinelearning.models.DataQualityMonitoringSignal;
import com.azure.resourcemanager.machinelearning.models.FeatureImportanceMode;
import com.azure.resourcemanager.machinelearning.models.FeatureImportanceSettings;
import com.azure.resourcemanager.machinelearning.models.JobInputType;
import com.azure.resourcemanager.machinelearning.models.MonitoringFeatureDataType;
import com.azure.resourcemanager.machinelearning.models.MonitoringFeatureFilterBase;
import com.azure.resourcemanager.machinelearning.models.MonitoringInputDataBase;
import com.azure.resourcemanager.machinelearning.models.MonitoringNotificationType;
import com.azure.resourcemanager.machinelearning.models.MonitoringThreshold;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataQualityMonitoringSignalTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataQualityMonitoringSignal model = BinaryData.fromString(
            "{\"signalType\":\"DataQuality\",\"features\":{\"filterType\":\"MonitoringFeatureFilterBase\"},\"featureImportanceSettings\":{\"mode\":\"Disabled\",\"targetColumn\":\"gelajdyolje\"},\"metricThresholds\":[{\"dataType\":\"DataQualityMetricThresholdBase\",\"threshold\":{\"value\":72.15525185747076}},{\"dataType\":\"DataQualityMetricThresholdBase\",\"threshold\":{\"value\":73.54011054612096}},{\"dataType\":\"DataQualityMetricThresholdBase\",\"threshold\":{\"value\":63.244267432137526}},{\"dataType\":\"DataQualityMetricThresholdBase\",\"threshold\":{\"value\":6.228835392523502}}],\"productionData\":{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"jymgqbgcxhn\",\"jobInputType\":\"literal\",\"uri\":\"gzxlermkmerghski\",\"columns\":{\"jqnvtsdyd\":\"pupkcbkfukd\",\"yuf\":\"hkpafyaloowwzizz\",\"ti\":\"qz\"}},\"referenceData\":{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"uf\",\"jobInputType\":\"mltable\",\"uri\":\"fdk\",\"columns\":{\"qh\":\"vndjokgwesym\",\"ujqbbgsimwejl\":\"qpfzlpejtznxlue\",\"bcpr\":\"bkbpjzobd\",\"ydtnaczkfwfatgaw\":\"swku\"}},\"featureDataTypeOverride\":{\"kivdwgtqcume\":\"Categorical\",\"aaqgoqbdiuycs\":\"Numerical\",\"kowkrbhzhr\":\"Categorical\"},\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"gucyhfaimqvdruo\":\"wiuasfg\",\"kk\":\"kgyfpeoehgfmqm\",\"vzjyielb\":\"xvlzjxplhpevasyn\"}}")
            .toObject(DataQualityMonitoringSignal.class);
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION, model.notificationTypes().get(0));
        Assertions.assertEquals("wiuasfg", model.properties().get("gucyhfaimqvdruo"));
        Assertions.assertEquals(FeatureImportanceMode.DISABLED, model.featureImportanceSettings().mode());
        Assertions.assertEquals("gelajdyolje", model.featureImportanceSettings().targetColumn());
        Assertions.assertEquals(72.15525185747076D, model.metricThresholds().get(0).threshold().value());
        Assertions.assertEquals("jymgqbgcxhn", model.productionData().dataContext());
        Assertions.assertEquals(JobInputType.LITERAL, model.productionData().jobInputType());
        Assertions.assertEquals("gzxlermkmerghski", model.productionData().uri());
        Assertions.assertEquals("pupkcbkfukd", model.productionData().columns().get("jqnvtsdyd"));
        Assertions.assertEquals("uf", model.referenceData().dataContext());
        Assertions.assertEquals(JobInputType.MLTABLE, model.referenceData().jobInputType());
        Assertions.assertEquals("fdk", model.referenceData().uri());
        Assertions.assertEquals("vndjokgwesym", model.referenceData().columns().get("qh"));
        Assertions.assertEquals(MonitoringFeatureDataType.CATEGORICAL,
            model.featureDataTypeOverride().get("kivdwgtqcume"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataQualityMonitoringSignal model = new DataQualityMonitoringSignal()
            .withNotificationTypes(
                Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION, MonitoringNotificationType.AML_NOTIFICATION))
            .withProperties(mapOf("gucyhfaimqvdruo", "wiuasfg", "kk", "kgyfpeoehgfmqm", "vzjyielb", "xvlzjxplhpevasyn"))
            .withFeatures(new MonitoringFeatureFilterBase())
            .withFeatureImportanceSettings(new FeatureImportanceSettings().withMode(FeatureImportanceMode.DISABLED)
                .withTargetColumn("gelajdyolje"))
            .withMetricThresholds(Arrays.asList(
                new DataQualityMetricThresholdBase()
                    .withThreshold(new MonitoringThreshold().withValue(72.15525185747076D)),
                new DataQualityMetricThresholdBase()
                    .withThreshold(new MonitoringThreshold().withValue(73.54011054612096D)),
                new DataQualityMetricThresholdBase()
                    .withThreshold(new MonitoringThreshold().withValue(63.244267432137526D)),
                new DataQualityMetricThresholdBase()
                    .withThreshold(new MonitoringThreshold().withValue(6.228835392523502D))))
            .withProductionData(new MonitoringInputDataBase().withDataContext("jymgqbgcxhn")
                .withJobInputType(JobInputType.LITERAL)
                .withUri("gzxlermkmerghski")
                .withColumns(mapOf("jqnvtsdyd", "pupkcbkfukd", "yuf", "hkpafyaloowwzizz", "ti", "qz")))
            .withReferenceData(new MonitoringInputDataBase().withDataContext("uf")
                .withJobInputType(JobInputType.MLTABLE)
                .withUri("fdk")
                .withColumns(mapOf("qh", "vndjokgwesym", "ujqbbgsimwejl", "qpfzlpejtznxlue", "bcpr", "bkbpjzobd",
                    "ydtnaczkfwfatgaw", "swku")))
            .withFeatureDataTypeOverride(mapOf("kivdwgtqcume", MonitoringFeatureDataType.CATEGORICAL, "aaqgoqbdiuycs",
                MonitoringFeatureDataType.NUMERICAL, "kowkrbhzhr", MonitoringFeatureDataType.CATEGORICAL));
        model = BinaryData.fromObject(model).toObject(DataQualityMonitoringSignal.class);
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION, model.notificationTypes().get(0));
        Assertions.assertEquals("wiuasfg", model.properties().get("gucyhfaimqvdruo"));
        Assertions.assertEquals(FeatureImportanceMode.DISABLED, model.featureImportanceSettings().mode());
        Assertions.assertEquals("gelajdyolje", model.featureImportanceSettings().targetColumn());
        Assertions.assertEquals(72.15525185747076D, model.metricThresholds().get(0).threshold().value());
        Assertions.assertEquals("jymgqbgcxhn", model.productionData().dataContext());
        Assertions.assertEquals(JobInputType.LITERAL, model.productionData().jobInputType());
        Assertions.assertEquals("gzxlermkmerghski", model.productionData().uri());
        Assertions.assertEquals("pupkcbkfukd", model.productionData().columns().get("jqnvtsdyd"));
        Assertions.assertEquals("uf", model.referenceData().dataContext());
        Assertions.assertEquals(JobInputType.MLTABLE, model.referenceData().jobInputType());
        Assertions.assertEquals("fdk", model.referenceData().uri());
        Assertions.assertEquals("vndjokgwesym", model.referenceData().columns().get("qh"));
        Assertions.assertEquals(MonitoringFeatureDataType.CATEGORICAL,
            model.featureDataTypeOverride().get("kivdwgtqcume"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
