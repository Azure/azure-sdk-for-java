// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.FeaturesetContainerInner;
import com.azure.resourcemanager.machinelearning.models.FeaturesetContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturesetContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeaturesetContainerInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"isArchived\":false,\"latestVersion\":\"pnwjfujq\",\"nextVersion\":\"fcbahhp\",\"description\":\"ofoiy\",\"tags\":{\"ndviauogphuartvt\":\"filkmkkholv\"},\"properties\":{\"ahmnxhkxjqirw\":\"yefchnm\",\"ewmozqvbu\":\"weooxffifhxwrs\",\"ttaboidvmfqh\":\"qmamhsycxhxzga\",\"mtdherngb\":\"pubowsepdfg\"}},\"id\":\"juahokqto\",\"name\":\"kauxof\",\"type\":\"hfphwpnulaiywze\"}")
            .toObject(FeaturesetContainerInner.class);
        Assertions.assertEquals("ofoiy", model.properties().description());
        Assertions.assertEquals("filkmkkholv", model.properties().tags().get("ndviauogphuartvt"));
        Assertions.assertEquals("yefchnm", model.properties().properties().get("ahmnxhkxjqirw"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeaturesetContainerInner model
            = new FeaturesetContainerInner().withProperties(new FeaturesetContainerProperties().withDescription("ofoiy")
                .withTags(mapOf("ndviauogphuartvt", "filkmkkholv"))
                .withProperties(mapOf("ahmnxhkxjqirw", "yefchnm", "ewmozqvbu", "weooxffifhxwrs", "ttaboidvmfqh",
                    "qmamhsycxhxzga", "mtdherngb", "pubowsepdfg"))
                .withIsArchived(false));
        model = BinaryData.fromObject(model).toObject(FeaturesetContainerInner.class);
        Assertions.assertEquals("ofoiy", model.properties().description());
        Assertions.assertEquals("filkmkkholv", model.properties().tags().get("ndviauogphuartvt"));
        Assertions.assertEquals("yefchnm", model.properties().properties().get("ahmnxhkxjqirw"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
