// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.FeatureAttributionMetric;
import com.azure.resourcemanager.machinelearning.models.FeatureAttributionMetricThreshold;
import com.azure.resourcemanager.machinelearning.models.MonitoringThreshold;
import org.junit.jupiter.api.Assertions;

public final class FeatureAttributionMetricThresholdTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeatureAttributionMetricThreshold model = BinaryData
            .fromString(
                "{\"threshold\":{\"value\":57.97533067862126},\"metric\":\"NormalizedDiscountedCumulativeGain\"}")
            .toObject(FeatureAttributionMetricThreshold.class);
        Assertions.assertEquals(57.97533067862126D, model.threshold().value());
        Assertions.assertEquals(FeatureAttributionMetric.NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN, model.metric());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeatureAttributionMetricThreshold model = new FeatureAttributionMetricThreshold()
            .withThreshold(new MonitoringThreshold().withValue(57.97533067862126D))
            .withMetric(FeatureAttributionMetric.NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN);
        model = BinaryData.fromObject(model).toObject(FeatureAttributionMetricThreshold.class);
        Assertions.assertEquals(57.97533067862126D, model.threshold().value());
        Assertions.assertEquals(FeatureAttributionMetric.NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN, model.metric());
    }
}
