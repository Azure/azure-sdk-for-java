// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.DataContainer;
import com.azure.resourcemanager.machinelearning.models.DataType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataContainersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"dataType\":\"mltable\",\"isArchived\":false,\"latestVersion\":\"ffj\",\"nextVersion\":\"fadgywylavetq\",\"description\":\"ohystdgjtpbtkogf\",\"tags\":{\"eo\":\"lyzolrvwsgseqj\"},\"properties\":{\"jy\":\"rmgisw\",\"rirdzdgvqo\":\"pvsobamt\"}},\"id\":\"zukego\",\"name\":\"gxpypbmzqs\",\"type\":\"blmn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataContainer response = manager.dataContainers()
            .getWithResponse("ktavcebgodjfypla", "bvsece", "soqwexiebnz", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ohystdgjtpbtkogf", response.properties().description());
        Assertions.assertEquals("lyzolrvwsgseqj", response.properties().tags().get("eo"));
        Assertions.assertEquals("rmgisw", response.properties().properties().get("jy"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(DataType.MLTABLE, response.properties().dataType());
    }
}
