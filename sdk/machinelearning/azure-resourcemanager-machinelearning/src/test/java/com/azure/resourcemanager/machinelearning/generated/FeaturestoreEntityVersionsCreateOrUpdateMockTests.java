// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.FeatureDataType;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityVersion;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityVersionProperties;
import com.azure.resourcemanager.machinelearning.models.IndexColumn;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FeaturestoreEntityVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"indexColumns\":[{\"dataType\":\"Double\",\"columnName\":\"kwsuxrs\"},{\"dataType\":\"String\",\"columnName\":\"uu\"}],\"stage\":\"dcgxnkbwvuwbbz\",\"provisioningState\":\"Succeeded\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"cl\",\"tags\":{\"jfyfmjc\":\"r\"},\"properties\":{\"lmeyoncxjevma\":\"ybhsgqiumkt\"}},\"id\":\"rgwtynqbhhfhi\",\"name\":\"wwkhiyubykxzcvut\",\"type\":\"yihpsrjzpvojwjan\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        FeaturestoreEntityVersion response = manager.featurestoreEntityVersions()
            .define("razwkcohjxoc")
            .withExistingFeaturestoreEntity("bckl", "sxuuksvfsukpk", "ealbckpnnenrcezt")
            .withProperties(new FeaturestoreEntityVersionProperties().withDescription("jnadfhheilnh")
                .withTags(mapOf("azozo", "uounzzckogc", "diydwklkuamxho", "nyofts", "gmkztwzlwellh", "tnqeonyizqdw",
                    "vrfuzedudkt", "ppf"))
                .withProperties(mapOf("cflhycluou", "watfvjvumim"))
                .withIsArchived(false)
                .withIsAnonymous(true)
                .withIndexColumns(
                    Arrays.asList(new IndexColumn().withDataType(FeatureDataType.DOUBLE).withColumnName("orhkneu"),
                        new IndexColumn().withDataType(FeatureDataType.INTEGER).withColumnName("wizznkrarjii"),
                        new IndexColumn().withDataType(FeatureDataType.FLOAT).withColumnName("chcwhlhdzdcrlf"),
                        new IndexColumn().withDataType(FeatureDataType.STRING).withColumnName("xypxlzcrtmfvjzcv")))
                .withStage("pde"))
            .create();

        Assertions.assertEquals("cl", response.properties().description());
        Assertions.assertEquals("r", response.properties().tags().get("jfyfmjc"));
        Assertions.assertEquals("ybhsgqiumkt", response.properties().properties().get("lmeyoncxjevma"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals(FeatureDataType.DOUBLE, response.properties().indexColumns().get(0).dataType());
        Assertions.assertEquals("kwsuxrs", response.properties().indexColumns().get(0).columnName());
        Assertions.assertEquals("dcgxnkbwvuwbbz", response.properties().stage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
