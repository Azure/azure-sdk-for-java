// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BindOptions;
import com.azure.resourcemanager.machinelearning.models.TmpfsOptions;
import com.azure.resourcemanager.machinelearning.models.VolumeDefinition;
import com.azure.resourcemanager.machinelearning.models.VolumeDefinitionType;
import com.azure.resourcemanager.machinelearning.models.VolumeOptions;
import org.junit.jupiter.api.Assertions;

public final class VolumeDefinitionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeDefinition model = BinaryData.fromString(
            "{\"type\":\"bind\",\"readOnly\":true,\"source\":\"q\",\"target\":\"qkqsygxiyneco\",\"consistency\":\"gzkheubanl\",\"bind\":{\"propagation\":\"pqcckqiawzlz\",\"createHostPath\":true,\"selinux\":\"lg\"},\"volume\":{\"nocopy\":true},\"tmpfs\":{\"size\":1215971610}}")
            .toObject(VolumeDefinition.class);
        Assertions.assertEquals(VolumeDefinitionType.BIND, model.type());
        Assertions.assertEquals(true, model.readOnly());
        Assertions.assertEquals("q", model.source());
        Assertions.assertEquals("qkqsygxiyneco", model.target());
        Assertions.assertEquals("gzkheubanl", model.consistency());
        Assertions.assertEquals("pqcckqiawzlz", model.bind().propagation());
        Assertions.assertEquals(true, model.bind().createHostPath());
        Assertions.assertEquals("lg", model.bind().selinux());
        Assertions.assertEquals(true, model.volume().nocopy());
        Assertions.assertEquals(1215971610, model.tmpfs().size());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeDefinition model = new VolumeDefinition().withType(VolumeDefinitionType.BIND)
            .withReadOnly(true)
            .withSource("q")
            .withTarget("qkqsygxiyneco")
            .withConsistency("gzkheubanl")
            .withBind(new BindOptions().withPropagation("pqcckqiawzlz").withCreateHostPath(true).withSelinux("lg"))
            .withVolume(new VolumeOptions().withNocopy(true))
            .withTmpfs(new TmpfsOptions().withSize(1215971610));
        model = BinaryData.fromObject(model).toObject(VolumeDefinition.class);
        Assertions.assertEquals(VolumeDefinitionType.BIND, model.type());
        Assertions.assertEquals(true, model.readOnly());
        Assertions.assertEquals("q", model.source());
        Assertions.assertEquals("qkqsygxiyneco", model.target());
        Assertions.assertEquals("gzkheubanl", model.consistency());
        Assertions.assertEquals("pqcckqiawzlz", model.bind().propagation());
        Assertions.assertEquals(true, model.bind().createHostPath());
        Assertions.assertEquals("lg", model.bind().selinux());
        Assertions.assertEquals(true, model.volume().nocopy());
        Assertions.assertEquals(1215971610, model.tmpfs().size());
    }
}
