// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.FeaturestoreEntityContainerInner;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityContainerProperties;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityContainerResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturestoreEntityContainerResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeaturestoreEntityContainerResourceArmPaginatedResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Creating\",\"isArchived\":true,\"latestVersion\":\"dhga\",\"nextVersion\":\"pirpiwrqof\",\"description\":\"o\",\"tags\":{\"cbjpibkephuu\":\"nlexw\",\"qpbrlc\":\"erctatoyin\"},\"properties\":{\"crrpcjttbstvje\":\"uczkgofxyfsruc\",\"mlghktuidvrmazlp\":\"qnrmvvfko\"}},\"id\":\"wex\",\"name\":\"mzvlazipbh\",\"type\":\"wvqsgny\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"isArchived\":true,\"latestVersion\":\"ens\",\"nextVersion\":\"meyyvpkpatlb\",\"description\":\"pzgsk\",\"tags\":{\"xwcdomm\":\"hfvolmknb\"},\"properties\":{\"zfgbrttuiaclkie\":\"qa\",\"hiqfyuttdiy\":\"hajlfn\",\"vnwsw\":\"b\",\"cvogygzyvne\":\"txkyctwwgzwxjlm\"}},\"id\":\"aifghtmoqqt\",\"name\":\"ffhzbkrkjjjavfq\",\"type\":\"vhnqo\"},{\"properties\":{\"provisioningState\":\"Updating\",\"isArchived\":true,\"latestVersion\":\"yetesy\",\"nextVersion\":\"idbz\",\"description\":\"hqtfbovn\",\"tags\":{\"kzyaup\":\"bwetnjuhpsp\",\"vmaonurjt\":\"accxnafbwqroohtu\"},\"properties\":{\"lbl\":\"hihpvecmsl\",\"bsjuscvsfx\":\"jxl\",\"cydrtceukdqkk\":\"gctmgxuupbezq\"}},\"id\":\"hztgeqmgqzgwld\",\"name\":\"ychillcecfe\",\"type\":\"uwaoaguhicqlli\"},{\"properties\":{\"provisioningState\":\"Updating\",\"isArchived\":true,\"latestVersion\":\"jvhrweft\",\"nextVersion\":\"qejpmvssehaepwa\",\"description\":\"xtczhupeuknijd\",\"tags\":{\"ydjfb\":\"es\",\"v\":\"c\",\"uflgbhgauacdixm\":\"hulrtywikdmhla\",\"ryjqgdkf\":\"ufr\"},\"properties\":{\"vjhvefgwbm\":\"oeoq\"}},\"id\":\"c\",\"name\":\"ntasfaymxbu\",\"type\":\"pzealbmqkyojw\"}],\"nextLink\":\"fkmbtsuahxsgxj\"}")
            .toObject(FeaturestoreEntityContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("o", model.value().get(0).properties().description());
        Assertions.assertEquals("nlexw", model.value().get(0).properties().tags().get("cbjpibkephuu"));
        Assertions.assertEquals("uczkgofxyfsruc", model.value().get(0).properties().properties().get("crrpcjttbstvje"));
        Assertions.assertEquals(true, model.value().get(0).properties().isArchived());
        Assertions.assertEquals("fkmbtsuahxsgxj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeaturestoreEntityContainerResourceArmPaginatedResult model
            = new FeaturestoreEntityContainerResourceArmPaginatedResult()
                .withValue(
                    Arrays.asList(
                        new FeaturestoreEntityContainerInner()
                            .withProperties(new FeaturestoreEntityContainerProperties().withDescription("o")
                                .withTags(mapOf("cbjpibkephuu", "nlexw", "qpbrlc", "erctatoyin"))
                                .withProperties(
                                    mapOf("crrpcjttbstvje", "uczkgofxyfsruc", "mlghktuidvrmazlp", "qnrmvvfko"))
                                .withIsArchived(true)),
                        new FeaturestoreEntityContainerInner()
                            .withProperties(new FeaturestoreEntityContainerProperties().withDescription("pzgsk")
                                .withTags(mapOf("xwcdomm", "hfvolmknb"))
                                .withProperties(mapOf("zfgbrttuiaclkie", "qa", "hiqfyuttdiy", "hajlfn", "vnwsw", "b",
                                    "cvogygzyvne", "txkyctwwgzwxjlm"))
                                .withIsArchived(true)),
                        new FeaturestoreEntityContainerInner()
                            .withProperties(new FeaturestoreEntityContainerProperties().withDescription("hqtfbovn")
                                .withTags(mapOf("kzyaup", "bwetnjuhpsp", "vmaonurjt", "accxnafbwqroohtu"))
                                .withProperties(
                                    mapOf("lbl", "hihpvecmsl", "bsjuscvsfx", "jxl", "cydrtceukdqkk", "gctmgxuupbezq"))
                                .withIsArchived(true)),
                        new FeaturestoreEntityContainerInner().withProperties(
                            new FeaturestoreEntityContainerProperties().withDescription("xtczhupeuknijd")
                                .withTags(mapOf("ydjfb", "es", "v", "c", "uflgbhgauacdixm", "hulrtywikdmhla",
                                    "ryjqgdkf", "ufr"))
                                .withProperties(mapOf("vjhvefgwbm", "oeoq"))
                                .withIsArchived(true))))
                .withNextLink("fkmbtsuahxsgxj");
        model = BinaryData.fromObject(model).toObject(FeaturestoreEntityContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("o", model.value().get(0).properties().description());
        Assertions.assertEquals("nlexw", model.value().get(0).properties().tags().get("cbjpibkephuu"));
        Assertions.assertEquals("uczkgofxyfsruc", model.value().get(0).properties().properties().get("crrpcjttbstvje"));
        Assertions.assertEquals(true, model.value().get(0).properties().isArchived());
        Assertions.assertEquals("fkmbtsuahxsgxj", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
