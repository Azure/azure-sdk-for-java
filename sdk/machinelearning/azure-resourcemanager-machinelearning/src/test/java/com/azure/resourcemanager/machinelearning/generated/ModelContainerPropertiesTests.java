// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ModelContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ModelContainerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ModelContainerProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Failed\",\"isArchived\":false,\"latestVersion\":\"zzhmkd\",\"nextVersion\":\"vflyhbxcu\",\"description\":\"hxgsrboldfor\",\"tags\":{\"qpbtuodxes\":\"jlvizbfhfovva\",\"rrwoycqucwyhahn\":\"abbelawumuaslzk\",\"ywuhpsvfuur\":\"mdr\"},\"properties\":{\"xwlalniexzsrzpg\":\"we\",\"wpgdak\":\"pqtybb\"}}")
            .toObject(ModelContainerProperties.class);
        Assertions.assertEquals("hxgsrboldfor", model.description());
        Assertions.assertEquals("jlvizbfhfovva", model.tags().get("qpbtuodxes"));
        Assertions.assertEquals("we", model.properties().get("xwlalniexzsrzpg"));
        Assertions.assertEquals(false, model.isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ModelContainerProperties model = new ModelContainerProperties().withDescription("hxgsrboldfor")
            .withTags(mapOf("qpbtuodxes", "jlvizbfhfovva", "rrwoycqucwyhahn", "abbelawumuaslzk", "ywuhpsvfuur", "mdr"))
            .withProperties(mapOf("xwlalniexzsrzpg", "we", "wpgdak", "pqtybb"))
            .withIsArchived(false);
        model = BinaryData.fromObject(model).toObject(ModelContainerProperties.class);
        Assertions.assertEquals("hxgsrboldfor", model.description());
        Assertions.assertEquals("jlvizbfhfovva", model.tags().get("qpbtuodxes"));
        Assertions.assertEquals("we", model.properties().get("xwlalniexzsrzpg"));
        Assertions.assertEquals(false, model.isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
