// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ModelContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ModelContainerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ModelContainerProperties model =
            BinaryData
                .fromString(
                    "{\"isArchived\":false,\"latestVersion\":\"waoqvmmb\",\"nextVersion\":\"qfr\",\"description\":\"lkzmegnitgvkxl\",\"properties\":{\"gcealzxwh\":\"drf\",\"yqhlwigdivbkbx\":\"ansym\",\"wasqvdaeyyg\":\"omfaj\",\"zkgimsid\":\"xakjsqzhzb\"},\"tags\":{\"hpqgatjeaahhvj\":\"icddyvvjskgfmocw\",\"jjidjk\":\"hnakzyb\"}}")
                .toObject(ModelContainerProperties.class);
        Assertions.assertEquals("lkzmegnitgvkxl", model.description());
        Assertions.assertEquals("drf", model.properties().get("gcealzxwh"));
        Assertions.assertEquals("icddyvvjskgfmocw", model.tags().get("hpqgatjeaahhvj"));
        Assertions.assertEquals(false, model.isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ModelContainerProperties model =
            new ModelContainerProperties()
                .withDescription("lkzmegnitgvkxl")
                .withProperties(
                    mapOf(
                        "gcealzxwh",
                        "drf",
                        "yqhlwigdivbkbx",
                        "ansym",
                        "wasqvdaeyyg",
                        "omfaj",
                        "zkgimsid",
                        "xakjsqzhzb"))
                .withTags(mapOf("hpqgatjeaahhvj", "icddyvvjskgfmocw", "jjidjk", "hnakzyb"))
                .withIsArchived(false);
        model = BinaryData.fromObject(model).toObject(ModelContainerProperties.class);
        Assertions.assertEquals("lkzmegnitgvkxl", model.description());
        Assertions.assertEquals("drf", model.properties().get("gcealzxwh"));
        Assertions.assertEquals("icddyvvjskgfmocw", model.tags().get("hpqgatjeaahhvj"));
        Assertions.assertEquals(false, model.isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
