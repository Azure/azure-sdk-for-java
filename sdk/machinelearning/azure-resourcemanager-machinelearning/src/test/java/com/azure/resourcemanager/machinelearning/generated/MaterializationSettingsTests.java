// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EmailNotificationEnableType;
import com.azure.resourcemanager.machinelearning.models.MaterializationComputeResource;
import com.azure.resourcemanager.machinelearning.models.MaterializationSettings;
import com.azure.resourcemanager.machinelearning.models.MaterializationStoreType;
import com.azure.resourcemanager.machinelearning.models.NotificationSetting;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.RecurrenceSchedule;
import com.azure.resourcemanager.machinelearning.models.RecurrenceTrigger;
import com.azure.resourcemanager.machinelearning.models.Webhook;
import com.azure.resourcemanager.machinelearning.models.WeekDay;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MaterializationSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MaterializationSettings model = BinaryData.fromString(
            "{\"storeType\":\"Offline\",\"schedule\":{\"triggerType\":\"Recurrence\",\"frequency\":\"Day\",\"interval\":1695764846,\"schedule\":{\"hours\":[448963425,170152558,1340957573,1561402676],\"minutes\":[1767773898,490513850,526112283],\"weekDays\":[\"Thursday\",\"Thursday\"],\"monthDays\":[1412806239,1522988272,495310352,1541316864]},\"endTime\":\"yghs\",\"startTime\":\"cyl\",\"timeZone\":\"gmnsghpxy\"},\"notification\":{\"emails\":[\"rwjjkhvyomacluzv\",\"nqmhrp\",\"pd\"],\"emailOn\":[\"JobCancelled\",\"JobFailed\",\"JobCompleted\"],\"webhooks\":{\"ypobkdqzr\":{\"webhookType\":\"Webhook\",\"eventType\":\"ssffxuifmc\"}}},\"resource\":{\"instanceType\":\"ylollgtrczzydmxz\"},\"sparkConfiguration\":{\"uaurkihcir\":\"p\",\"xnbkkj\":\"defxrdc\",\"nqbpi\":\"nurnnq\",\"gypxrxvbfihwuhvc\":\"xqltgrd\"}}")
            .toObject(MaterializationSettings.class);
        Assertions.assertEquals(MaterializationStoreType.OFFLINE, model.storeType());
        Assertions.assertEquals("yghs", model.schedule().endTime());
        Assertions.assertEquals("cyl", model.schedule().startTime());
        Assertions.assertEquals("gmnsghpxy", model.schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.DAY, model.schedule().frequency());
        Assertions.assertEquals(1695764846, model.schedule().interval());
        Assertions.assertEquals(448963425, model.schedule().schedule().hours().get(0));
        Assertions.assertEquals(1767773898, model.schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.THURSDAY, model.schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1412806239, model.schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("rwjjkhvyomacluzv", model.notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_CANCELLED, model.notification().emailOn().get(0));
        Assertions.assertEquals("ssffxuifmc", model.notification().webhooks().get("ypobkdqzr").eventType());
        Assertions.assertEquals("ylollgtrczzydmxz", model.resource().instanceType());
        Assertions.assertEquals("p", model.sparkConfiguration().get("uaurkihcir"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MaterializationSettings model
            = new MaterializationSettings().withStoreType(MaterializationStoreType.OFFLINE)
                .withSchedule(
                    new RecurrenceTrigger().withEndTime("yghs")
                        .withStartTime("cyl")
                        .withTimeZone("gmnsghpxy")
                        .withFrequency(RecurrenceFrequency.DAY)
                        .withInterval(1695764846)
                        .withSchedule(new RecurrenceSchedule()
                            .withHours(Arrays.asList(448963425, 170152558, 1340957573, 1561402676))
                            .withMinutes(Arrays.asList(1767773898, 490513850, 526112283))
                            .withWeekDays(Arrays.asList(WeekDay.THURSDAY, WeekDay.THURSDAY))
                            .withMonthDays(Arrays.asList(1412806239, 1522988272, 495310352, 1541316864))))
                .withNotification(
                    new NotificationSetting().withEmails(Arrays.asList("rwjjkhvyomacluzv", "nqmhrp", "pd"))
                        .withEmailOn(Arrays.asList(EmailNotificationEnableType.JOB_CANCELLED,
                            EmailNotificationEnableType.JOB_FAILED, EmailNotificationEnableType.JOB_COMPLETED))
                        .withWebhooks(mapOf("ypobkdqzr", new Webhook().withEventType("ssffxuifmc"))))
                .withResource(new MaterializationComputeResource().withInstanceType("ylollgtrczzydmxz"))
                .withSparkConfiguration(
                    mapOf("uaurkihcir", "p", "xnbkkj", "defxrdc", "nqbpi", "nurnnq", "gypxrxvbfihwuhvc", "xqltgrd"));
        model = BinaryData.fromObject(model).toObject(MaterializationSettings.class);
        Assertions.assertEquals(MaterializationStoreType.OFFLINE, model.storeType());
        Assertions.assertEquals("yghs", model.schedule().endTime());
        Assertions.assertEquals("cyl", model.schedule().startTime());
        Assertions.assertEquals("gmnsghpxy", model.schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.DAY, model.schedule().frequency());
        Assertions.assertEquals(1695764846, model.schedule().interval());
        Assertions.assertEquals(448963425, model.schedule().schedule().hours().get(0));
        Assertions.assertEquals(1767773898, model.schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.THURSDAY, model.schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1412806239, model.schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("rwjjkhvyomacluzv", model.notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_CANCELLED, model.notification().emailOn().get(0));
        Assertions.assertEquals("ssffxuifmc", model.notification().webhooks().get("ypobkdqzr").eventType());
        Assertions.assertEquals("ylollgtrczzydmxz", model.resource().instanceType());
        Assertions.assertEquals("p", model.sparkConfiguration().get("uaurkihcir"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
