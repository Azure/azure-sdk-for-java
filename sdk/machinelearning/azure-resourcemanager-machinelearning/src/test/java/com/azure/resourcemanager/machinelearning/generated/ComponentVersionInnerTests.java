// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentVersionInner;
import com.azure.resourcemanager.machinelearning.models.ComponentVersionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ComponentVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ComponentVersionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"componentSpec\":\"datarnjwmw\",\"isAnonymous\":true,\"isArchived\":false,\"description\":\"zejjoqk\",\"properties\":{\"azpxdtnkdmkqjjl\":\"hsxttaugzxnf\",\"ou\":\"uenvrkp\",\"aays\":\"ibreb\"},\"tags\":{\"tezlwff\":\"xqtnq\",\"pqqmted\":\"iakp\"}},\"id\":\"mmji\",\"name\":\"yeozphvwauyqncy\",\"type\":\"upkvipmdsc\"}")
                .toObject(ComponentVersionInner.class);
        Assertions.assertEquals("zejjoqk", model.properties().description());
        Assertions.assertEquals("hsxttaugzxnf", model.properties().properties().get("azpxdtnkdmkqjjl"));
        Assertions.assertEquals("xqtnq", model.properties().tags().get("tezlwff"));
        Assertions.assertEquals(true, model.properties().isAnonymous());
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ComponentVersionInner model =
            new ComponentVersionInner()
                .withProperties(
                    new ComponentVersionProperties()
                        .withDescription("zejjoqk")
                        .withProperties(mapOf("azpxdtnkdmkqjjl", "hsxttaugzxnf", "ou", "uenvrkp", "aays", "ibreb"))
                        .withTags(mapOf("tezlwff", "xqtnq", "pqqmted", "iakp"))
                        .withIsAnonymous(true)
                        .withIsArchived(false)
                        .withComponentSpec("datarnjwmw"));
        model = BinaryData.fromObject(model).toObject(ComponentVersionInner.class);
        Assertions.assertEquals("zejjoqk", model.properties().description());
        Assertions.assertEquals("hsxttaugzxnf", model.properties().properties().get("azpxdtnkdmkqjjl"));
        Assertions.assertEquals("xqtnq", model.properties().tags().get("tezlwff"));
        Assertions.assertEquals(true, model.properties().isAnonymous());
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
