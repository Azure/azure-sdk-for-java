// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.CodeContainer;
import com.azure.resourcemanager.machinelearning.models.CodeContainerProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CodeContainersCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Creating\",\"isArchived\":false,\"latestVersion\":\"mluyrlkpismmr\",\"nextVersion\":\"jpjthizsabcylzz\",\"description\":\"tumzenkrdruesxe\",\"tags\":{\"qqeetsqac\":\"xoibdctjwfeb\",\"yyraiaiidkewqwa\":\"czfro\",\"fngfpilloir\":\"ptldddorzljhnxfk\",\"bktuqnbcjk\":\"vx\"},\"properties\":{\"inlic\":\"mznwwtkuytwii\",\"yzqke\":\"moyoioxdwff\",\"uecokyduqzusc\":\"curr\",\"htekxnvkdvc\":\"lbqv\"}},\"id\":\"wrd\",\"name\":\"ddddwzdlbbcztam\",\"type\":\"yrkwsthpivocf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CodeContainer response = manager.codeContainers()
            .define("uvqbeyxwrmupzpe")
            .withExistingWorkspace("gynsixgzbbnug", "quarb")
            .withProperties(new CodeContainerProperties().withDescription("gen")
                .withTags(mapOf("ppgl", "ybepsihzqieoy", "zlycxlubrukhqb", "jsfgbyyts"))
                .withProperties(mapOf("fjjfexuvsveam", "rbdkgqdmvvvj", "io", "eauuuvh", "mtyosdpxtsdy",
                    "glmufzuuyszhae", "wxiavwmixaqgfpu", "fgefvwgwp"))
                .withIsArchived(true))
            .create();

        Assertions.assertEquals("tumzenkrdruesxe", response.properties().description());
        Assertions.assertEquals("xoibdctjwfeb", response.properties().tags().get("qqeetsqac"));
        Assertions.assertEquals("mznwwtkuytwii", response.properties().properties().get("inlic"));
        Assertions.assertEquals(false, response.properties().isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
