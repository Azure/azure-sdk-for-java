// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpoint;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.machinelearning.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpoint\":{\"id\":\"jsprozvcpute\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"mfdatscmdvpj\",\"actionsRequired\":\"lsuuvmkjozkrwfnd\"},\"provisioningState\":\"Creating\"},\"identity\":{\"principalId\":\"7019862e-4533-4693-8853-f0cd6b6c6e89\",\"tenantId\":\"2a954b50-28af-4b69-b3b9-ff3698c39bfa\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"pvwryoqpsoacc\":{\"principalId\":\"c4839c09-9288-4406-9085-53ead4ae12ad\",\"clientId\":\"8bbf256b-2782-4abf-aeb5-f48b167f634e\"}}},\"location\":\"zakljlahbc\",\"tags\":{\"jakhmsbzjh\":\"fdfdosygexpa\",\"hqtrgqjbpf\":\"rzevdphlxaol\",\"tfell\":\"fsinzgvfcjrwzoxx\",\"lxofpdvhpfxxypin\":\"wfzitonpeqfpjk\"},\"sku\":{\"name\":\"mayhuybbkpodepoo\",\"tier\":\"Standard\",\"size\":\"vamih\",\"family\":\"gnarxzxtheo\",\"capacity\":372211152},\"id\":\"vyevcciqi\",\"name\":\"nhungbw\",\"type\":\"zrnf\"}")
            .toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("zakljlahbc", model.location());
        Assertions.assertEquals("fdfdosygexpa", model.tags().get("jakhmsbzjh"));
        Assertions.assertEquals("mayhuybbkpodepoo", model.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals("vamih", model.sku().size());
        Assertions.assertEquals("gnarxzxtheo", model.sku().family());
        Assertions.assertEquals(372211152, model.sku().capacity());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("mfdatscmdvpj", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("lsuuvmkjozkrwfnd", model.privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionInner model = new PrivateEndpointConnectionInner()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("pvwryoqpsoacc", new UserAssignedIdentity())))
            .withLocation("zakljlahbc")
            .withTags(mapOf("jakhmsbzjh", "fdfdosygexpa", "hqtrgqjbpf", "rzevdphlxaol", "tfell", "fsinzgvfcjrwzoxx",
                "lxofpdvhpfxxypin", "wfzitonpeqfpjk"))
            .withSku(new Sku().withName("mayhuybbkpodepoo")
                .withTier(SkuTier.STANDARD)
                .withSize("vamih")
                .withFamily("gnarxzxtheo")
                .withCapacity(372211152))
            .withPrivateEndpoint(new PrivateEndpoint())
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                    .withDescription("mfdatscmdvpj")
                    .withActionsRequired("lsuuvmkjozkrwfnd"));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("zakljlahbc", model.location());
        Assertions.assertEquals("fdfdosygexpa", model.tags().get("jakhmsbzjh"));
        Assertions.assertEquals("mayhuybbkpodepoo", model.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals("vamih", model.sku().size());
        Assertions.assertEquals("gnarxzxtheo", model.sku().family());
        Assertions.assertEquals(372211152, model.sku().capacity());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("mfdatscmdvpj", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("lsuuvmkjozkrwfnd", model.privateLinkServiceConnectionState().actionsRequired());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
