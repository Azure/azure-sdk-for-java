// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersion;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EnvironmentVersionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"environmentType\":\"Curated\",\"image\":\"yrpwzsmwgebpsk\",\"condaFile\":\"cifdvtwuncn\",\"build\":{\"contextUri\":\"yjwjmyubhtmlgjai\",\"dockerfilePath\":\"ymjdwirglqibj\"},\"osType\":\"Linux\",\"inferenceConfig\":{\"livenessRoute\":{\"path\":\"w\",\"port\":375117512},\"readinessRoute\":{\"path\":\"bzfhu\",\"port\":1172708430},\"scoringRoute\":{\"path\":\"k\",\"port\":777274816}},\"autoRebuild\":\"OnBaseImageUpdate\",\"provisioningState\":\"Failed\",\"stage\":\"xxiglehylbna\",\"isArchived\":false,\"isAnonymous\":false,\"description\":\"hoem\",\"tags\":{\"vfgukrxumwdqwy\":\"mmpvo\",\"umhaeqboig\":\"nawzeleqpnkqxk\",\"fhivsytidzvvndp\":\"jxatwxiya\",\"uexhgdhpkplas\":\"w\"},\"properties\":{\"oiddv\":\"tqxfpfopekyzdzvh\",\"sifixolvny\":\"qyjekvzpqr\",\"bpwpuayx\":\"fut\"}},\"id\":\"piultybwwmj\",\"name\":\"smkjalorxeegiczr\",\"type\":\"n\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        EnvironmentVersion response = manager.environmentVersions()
            .getWithResponse("ks", "gkvga", "nrhrqqiwfysujcv", "clgp", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("hoem", response.properties().description());
        Assertions.assertEquals("mmpvo", response.properties().tags().get("vfgukrxumwdqwy"));
        Assertions.assertEquals("tqxfpfopekyzdzvh", response.properties().properties().get("oiddv"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(false, response.properties().isAnonymous());
        Assertions.assertEquals("yrpwzsmwgebpsk", response.properties().image());
        Assertions.assertEquals("cifdvtwuncn", response.properties().condaFile());
        Assertions.assertEquals("yjwjmyubhtmlgjai", response.properties().build().contextUri());
        Assertions.assertEquals("ymjdwirglqibj", response.properties().build().dockerfilePath());
        Assertions.assertEquals(OperatingSystemType.LINUX, response.properties().osType());
        Assertions.assertEquals("w", response.properties().inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(375117512, response.properties().inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("bzfhu", response.properties().inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(1172708430, response.properties().inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("k", response.properties().inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(777274816, response.properties().inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(AutoRebuildSetting.ON_BASE_IMAGE_UPDATE, response.properties().autoRebuild());
        Assertions.assertEquals("xxiglehylbna", response.properties().stage());
    }
}
