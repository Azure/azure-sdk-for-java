// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.EnvironmentContainerInner;
import com.azure.resourcemanager.machinelearning.models.EnvironmentContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnvironmentContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnvironmentContainerInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Updating\",\"isArchived\":false,\"latestVersion\":\"ieypef\",\"nextVersion\":\"yqdhcuplcplcw\",\"description\":\"ihih\",\"tags\":{\"gmvecactxmw\":\"dsqtzbsrgnowcjh\",\"ovekqvgqouwi\":\"teyowclu\",\"ikf\":\"zmpjwyiv\",\"uagrttikteusqc\":\"cvhrfsp\"},\"properties\":{\"qcuubgqibrta\":\"yklxubyjaffmmfbl\",\"lqxihhrmooiz\":\"metttwgd\"}},\"id\":\"eypxiutcxapzhyr\",\"name\":\"etoge\",\"type\":\"joxslhvnhla\"}")
            .toObject(EnvironmentContainerInner.class);
        Assertions.assertEquals("ihih", model.properties().description());
        Assertions.assertEquals("dsqtzbsrgnowcjh", model.properties().tags().get("gmvecactxmw"));
        Assertions.assertEquals("yklxubyjaffmmfbl", model.properties().properties().get("qcuubgqibrta"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnvironmentContainerInner model = new EnvironmentContainerInner()
            .withProperties(new EnvironmentContainerProperties().withDescription("ihih")
                .withTags(mapOf("gmvecactxmw", "dsqtzbsrgnowcjh", "ovekqvgqouwi", "teyowclu", "ikf", "zmpjwyiv",
                    "uagrttikteusqc", "cvhrfsp"))
                .withProperties(mapOf("qcuubgqibrta", "yklxubyjaffmmfbl", "lqxihhrmooiz", "metttwgd"))
                .withIsArchived(false));
        model = BinaryData.fromObject(model).toObject(EnvironmentContainerInner.class);
        Assertions.assertEquals("ihih", model.properties().description());
        Assertions.assertEquals("dsqtzbsrgnowcjh", model.properties().tags().get("gmvecactxmw"));
        Assertions.assertEquals("yklxubyjaffmmfbl", model.properties().properties().get("qcuubgqibrta"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
