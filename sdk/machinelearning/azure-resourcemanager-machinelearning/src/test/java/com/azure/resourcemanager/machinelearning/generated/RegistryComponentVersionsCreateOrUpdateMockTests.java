// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentVersionInner;
import com.azure.resourcemanager.machinelearning.models.ComponentVersion;
import com.azure.resourcemanager.machinelearning.models.ComponentVersionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistryComponentVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"componentSpec\":\"dataurmrfyyqj\",\"provisioningState\":\"Succeeded\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"ddcuqddldaoyvf\",\"tags\":{\"joj\":\"ew\",\"zzw\":\"sxjht\",\"trgu\":\"ocygoyineuaxpmez\",\"oyxfoafzdypzlx\":\"lw\"},\"properties\":{\"qxa\":\"dhgwhlbpjuaj\",\"yy\":\"mitnwlyhbujysvd\",\"tjtnnrjewih\":\"dbhatmabtpgn\"}},\"id\":\"gaahmdfsp\",\"name\":\"dnxq\",\"type\":\"z\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ComponentVersion response = manager.registryComponentVersions()
            .createOrUpdate("oqatdjka", "dp", "e", "smxfzynfemqy",
                new ComponentVersionInner().withProperties(new ComponentVersionProperties().withDescription("nl")
                    .withTags(mapOf("jwdzpvirzyudrqu", "dsqx", "n", "rxhxmlfouqpskv", "h", "bpmr"))
                    .withProperties(mapOf("acz", "cq", "tt", "vwae", "qlyyslg", "jqyfy"))
                    .withIsArchived(false)
                    .withIsAnonymous(true)
                    .withComponentSpec("datakpgwgssd")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ddcuqddldaoyvf", response.properties().description());
        Assertions.assertEquals("ew", response.properties().tags().get("joj"));
        Assertions.assertEquals("dhgwhlbpjuaj", response.properties().properties().get("qxa"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
