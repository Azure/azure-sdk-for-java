// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ForecastingModels;
import com.azure.resourcemanager.machinelearning.models.ForecastingTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ForecastingTrainingSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForecastingTrainingSettings model = BinaryData.fromString(
            "{\"allowedTrainingAlgorithms\":[\"SeasonalNaive\",\"SeasonalAverage\",\"SeasonalAverage\"],\"blockedTrainingAlgorithms\":[\"ExponentialSmoothing\"],\"enableOnnxCompatibleModels\":false,\"stackEnsembleSettings\":{\"stackMetaLearnerType\":\"LightGBMClassifier\",\"stackMetaLearnerTrainPercentage\":13.408561162477984,\"stackMetaLearnerKWargs\":\"datakvbos\"},\"enableStackEnsemble\":false,\"enableVoteEnsemble\":false,\"ensembleModelDownloadTimeout\":\"PT27H40M3S\",\"enableModelExplainability\":true,\"enableDnnTraining\":true}")
            .toObject(ForecastingTrainingSettings.class);
        Assertions.assertEquals(false, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.LIGHT_GBMCLASSIFIER,
            model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(13.408561162477984D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(false, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT27H40M3S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(true, model.enableModelExplainability());
        Assertions.assertEquals(true, model.enableDnnTraining());
        Assertions.assertEquals(ForecastingModels.SEASONAL_NAIVE, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(ForecastingModels.EXPONENTIAL_SMOOTHING, model.blockedTrainingAlgorithms().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForecastingTrainingSettings model = new ForecastingTrainingSettings().withEnableOnnxCompatibleModels(false)
            .withStackEnsembleSettings(
                new StackEnsembleSettings().withStackMetaLearnerType(StackMetaLearnerType.LIGHT_GBMCLASSIFIER)
                    .withStackMetaLearnerTrainPercentage(13.408561162477984D)
                    .withStackMetaLearnerKWargs("datakvbos"))
            .withEnableStackEnsemble(false)
            .withEnableVoteEnsemble(false)
            .withEnsembleModelDownloadTimeout(Duration.parse("PT27H40M3S"))
            .withEnableModelExplainability(true)
            .withEnableDnnTraining(true)
            .withAllowedTrainingAlgorithms(Arrays.asList(ForecastingModels.SEASONAL_NAIVE,
                ForecastingModels.SEASONAL_AVERAGE, ForecastingModels.SEASONAL_AVERAGE))
            .withBlockedTrainingAlgorithms(Arrays.asList(ForecastingModels.EXPONENTIAL_SMOOTHING));
        model = BinaryData.fromObject(model).toObject(ForecastingTrainingSettings.class);
        Assertions.assertEquals(false, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.LIGHT_GBMCLASSIFIER,
            model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(13.408561162477984D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(false, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT27H40M3S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(true, model.enableModelExplainability());
        Assertions.assertEquals(true, model.enableDnnTraining());
        Assertions.assertEquals(ForecastingModels.SEASONAL_NAIVE, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(ForecastingModels.EXPONENTIAL_SMOOTHING, model.blockedTrainingAlgorithms().get(0));
    }
}
