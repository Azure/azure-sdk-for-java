// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.IdentityConfiguration;
import com.azure.resourcemanager.machinelearning.models.JobBaseProperties;
import com.azure.resourcemanager.machinelearning.models.JobScheduleAction;
import com.azure.resourcemanager.machinelearning.models.JobService;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobScheduleActionTests {
    @Test
    public void testDeserialize() {
        JobScheduleAction model =
            BinaryData
                .fromString(
                    "{\"actionType\":\"CreateJob\",\"jobDefinition\":{\"jobType\":\"JobBaseProperties\",\"componentId\":\"pmmzps\",\"computeId\":\"u\",\"displayName\":\"awi\",\"experimentName\":\"momsgvvj\",\"identity\":{\"identityType\":\"IdentityConfiguration\"},\"isArchived\":true,\"services\":{\"erufgjblcdrmy\":{\"endpoint\":\"hewjjmajnkdflqio\",\"errorMessage\":\"waeqkzfzqxjosho\",\"jobServiceType\":\"otryegp\",\"port\":113232070,\"properties\":{},\"status\":\"exznlwkbfokxkhup\"},\"kmhmnulwempdc\":{\"endpoint\":\"emftzgyyky\",\"errorMessage\":\"ugekdfqn\",\"jobServiceType\":\"twd\",\"port\":1005513256,\"properties\":{},\"status\":\"fjjnnuxxr\"},\"zotfriyrgkoek\":{\"endpoint\":\"rhjul\",\"errorMessage\":\"u\",\"jobServiceType\":\"zpfl\",\"port\":1920013433,\"properties\":{},\"status\":\"mhh\"},\"bmsgycqsxrmdv\":{\"endpoint\":\"wxxyxhighctx\",\"errorMessage\":\"molpcqyde\",\"jobServiceType\":\"vskiczd\",\"port\":568018810,\"properties\":{},\"status\":\"zikgqabooh\"}},\"status\":\"Paused\",\"description\":\"qaeo\",\"properties\":{\"oxae\":\"hgejkbvhhdaurgh\"},\"tags\":{\"obektmbozo\":\"hxjxjoezlqxrkdkn\"}}}")
                .toObject(JobScheduleAction.class);
        Assertions.assertEquals("qaeo", model.jobDefinition().description());
        Assertions.assertEquals("hgejkbvhhdaurgh", model.jobDefinition().properties().get("oxae"));
        Assertions.assertEquals("hxjxjoezlqxrkdkn", model.jobDefinition().tags().get("obektmbozo"));
        Assertions.assertEquals("pmmzps", model.jobDefinition().componentId());
        Assertions.assertEquals("u", model.jobDefinition().computeId());
        Assertions.assertEquals("awi", model.jobDefinition().displayName());
        Assertions.assertEquals("momsgvvj", model.jobDefinition().experimentName());
        Assertions.assertEquals(true, model.jobDefinition().isArchived());
        Assertions.assertEquals("hewjjmajnkdflqio", model.jobDefinition().services().get("erufgjblcdrmy").endpoint());
        Assertions.assertEquals("otryegp", model.jobDefinition().services().get("erufgjblcdrmy").jobServiceType());
        Assertions.assertEquals(113232070, model.jobDefinition().services().get("erufgjblcdrmy").port());
    }

    @Test
    public void testSerialize() {
        JobScheduleAction model =
            new JobScheduleAction()
                .withJobDefinition(
                    new JobBaseProperties()
                        .withDescription("qaeo")
                        .withProperties(mapOf("oxae", "hgejkbvhhdaurgh"))
                        .withTags(mapOf("obektmbozo", "hxjxjoezlqxrkdkn"))
                        .withComponentId("pmmzps")
                        .withComputeId("u")
                        .withDisplayName("awi")
                        .withExperimentName("momsgvvj")
                        .withIdentity(new IdentityConfiguration())
                        .withIsArchived(true)
                        .withServices(
                            mapOf(
                                "erufgjblcdrmy",
                                new JobService()
                                    .withEndpoint("hewjjmajnkdflqio")
                                    .withJobServiceType("otryegp")
                                    .withPort(113232070)
                                    .withProperties(mapOf()),
                                "kmhmnulwempdc",
                                new JobService()
                                    .withEndpoint("emftzgyyky")
                                    .withJobServiceType("twd")
                                    .withPort(1005513256)
                                    .withProperties(mapOf()),
                                "zotfriyrgkoek",
                                new JobService()
                                    .withEndpoint("rhjul")
                                    .withJobServiceType("zpfl")
                                    .withPort(1920013433)
                                    .withProperties(mapOf()),
                                "bmsgycqsxrmdv",
                                new JobService()
                                    .withEndpoint("wxxyxhighctx")
                                    .withJobServiceType("vskiczd")
                                    .withPort(568018810)
                                    .withProperties(mapOf()))));
        model = BinaryData.fromObject(model).toObject(JobScheduleAction.class);
        Assertions.assertEquals("qaeo", model.jobDefinition().description());
        Assertions.assertEquals("hgejkbvhhdaurgh", model.jobDefinition().properties().get("oxae"));
        Assertions.assertEquals("hxjxjoezlqxrkdkn", model.jobDefinition().tags().get("obektmbozo"));
        Assertions.assertEquals("pmmzps", model.jobDefinition().componentId());
        Assertions.assertEquals("u", model.jobDefinition().computeId());
        Assertions.assertEquals("awi", model.jobDefinition().displayName());
        Assertions.assertEquals("momsgvvj", model.jobDefinition().experimentName());
        Assertions.assertEquals(true, model.jobDefinition().isArchived());
        Assertions.assertEquals("hewjjmajnkdflqio", model.jobDefinition().services().get("erufgjblcdrmy").endpoint());
        Assertions.assertEquals("otryegp", model.jobDefinition().services().get("erufgjblcdrmy").jobServiceType());
        Assertions.assertEquals(113232070, model.jobDefinition().services().get("erufgjblcdrmy").port());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
