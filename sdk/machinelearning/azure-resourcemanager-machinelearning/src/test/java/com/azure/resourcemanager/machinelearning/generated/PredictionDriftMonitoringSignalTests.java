// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.JobInputType;
import com.azure.resourcemanager.machinelearning.models.MonitoringFeatureDataType;
import com.azure.resourcemanager.machinelearning.models.MonitoringInputDataBase;
import com.azure.resourcemanager.machinelearning.models.MonitoringNotificationType;
import com.azure.resourcemanager.machinelearning.models.MonitoringThreshold;
import com.azure.resourcemanager.machinelearning.models.PredictionDriftMetricThresholdBase;
import com.azure.resourcemanager.machinelearning.models.PredictionDriftMonitoringSignal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PredictionDriftMonitoringSignalTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PredictionDriftMonitoringSignal model = BinaryData.fromString(
            "{\"signalType\":\"PredictionDrift\",\"metricThresholds\":[{\"dataType\":\"PredictionDriftMetricThresholdBase\",\"threshold\":{\"value\":82.50470090588112}},{\"dataType\":\"PredictionDriftMetricThresholdBase\",\"threshold\":{\"value\":17.174727928466226}}],\"productionData\":{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"xpuckn\",\"jobInputType\":\"mlflow_model\",\"uri\":\"s\",\"columns\":{\"micttrvl\":\"smg\",\"cjrzvlcivqx\":\"vjmxokxxamq\"}},\"referenceData\":{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"mklphxwww\",\"jobInputType\":\"custom_model\",\"uri\":\"jkbgnfbr\",\"columns\":{\"evlahxczywyw\":\"fsunh\",\"axqjf\":\"ahwcorewcnn\",\"gewdqbxexfyzn\":\"ajrfgimom\"}},\"featureDataTypeOverride\":{\"uqks\":\"Categorical\",\"sfx\":\"Numerical\"},\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\",\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"rtlikff\":\"pmoh\",\"qrf\":\"dzt\",\"zdteqjmyqxuhg\":\"gynzfw\",\"wrrlccklyf\":\"axnyprijyoxxjxbs\"}}")
            .toObject(PredictionDriftMonitoringSignal.class);
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION, model.notificationTypes().get(0));
        Assertions.assertEquals("pmoh", model.properties().get("rtlikff"));
        Assertions.assertEquals(82.50470090588112D, model.metricThresholds().get(0).threshold().value());
        Assertions.assertEquals("xpuckn", model.productionData().dataContext());
        Assertions.assertEquals(JobInputType.MLFLOW_MODEL, model.productionData().jobInputType());
        Assertions.assertEquals("s", model.productionData().uri());
        Assertions.assertEquals("smg", model.productionData().columns().get("micttrvl"));
        Assertions.assertEquals("mklphxwww", model.referenceData().dataContext());
        Assertions.assertEquals(JobInputType.CUSTOM_MODEL, model.referenceData().jobInputType());
        Assertions.assertEquals("jkbgnfbr", model.referenceData().uri());
        Assertions.assertEquals("fsunh", model.referenceData().columns().get("evlahxczywyw"));
        Assertions.assertEquals(MonitoringFeatureDataType.CATEGORICAL, model.featureDataTypeOverride().get("uqks"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PredictionDriftMonitoringSignal model = new PredictionDriftMonitoringSignal()
            .withNotificationTypes(
                Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION, MonitoringNotificationType.AML_NOTIFICATION,
                    MonitoringNotificationType.AML_NOTIFICATION, MonitoringNotificationType.AML_NOTIFICATION))
            .withProperties(
                mapOf("rtlikff", "pmoh", "qrf", "dzt", "zdteqjmyqxuhg", "gynzfw", "wrrlccklyf", "axnyprijyoxxjxbs"))
            .withMetricThresholds(Arrays.asList(
                new PredictionDriftMetricThresholdBase()
                    .withThreshold(new MonitoringThreshold().withValue(82.50470090588112D)),
                new PredictionDriftMetricThresholdBase()
                    .withThreshold(new MonitoringThreshold().withValue(17.174727928466226D))))
            .withProductionData(new MonitoringInputDataBase().withDataContext("xpuckn")
                .withJobInputType(JobInputType.MLFLOW_MODEL)
                .withUri("s")
                .withColumns(mapOf("micttrvl", "smg", "cjrzvlcivqx", "vjmxokxxamq")))
            .withReferenceData(new MonitoringInputDataBase().withDataContext("mklphxwww")
                .withJobInputType(JobInputType.CUSTOM_MODEL)
                .withUri("jkbgnfbr")
                .withColumns(mapOf("evlahxczywyw", "fsunh", "axqjf", "ahwcorewcnn", "gewdqbxexfyzn", "ajrfgimom")))
            .withFeatureDataTypeOverride(
                mapOf("uqks", MonitoringFeatureDataType.CATEGORICAL, "sfx", MonitoringFeatureDataType.NUMERICAL));
        model = BinaryData.fromObject(model).toObject(PredictionDriftMonitoringSignal.class);
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION, model.notificationTypes().get(0));
        Assertions.assertEquals("pmoh", model.properties().get("rtlikff"));
        Assertions.assertEquals(82.50470090588112D, model.metricThresholds().get(0).threshold().value());
        Assertions.assertEquals("xpuckn", model.productionData().dataContext());
        Assertions.assertEquals(JobInputType.MLFLOW_MODEL, model.productionData().jobInputType());
        Assertions.assertEquals("s", model.productionData().uri());
        Assertions.assertEquals("smg", model.productionData().columns().get("micttrvl"));
        Assertions.assertEquals("mklphxwww", model.referenceData().dataContext());
        Assertions.assertEquals(JobInputType.CUSTOM_MODEL, model.referenceData().jobInputType());
        Assertions.assertEquals("jkbgnfbr", model.referenceData().uri());
        Assertions.assertEquals("fsunh", model.referenceData().columns().get("evlahxczywyw"));
        Assertions.assertEquals(MonitoringFeatureDataType.CATEGORICAL, model.featureDataTypeOverride().get("uqks"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
