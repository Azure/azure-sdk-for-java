// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageModelSettingsTests {
    @Test
    public void testDeserialize() {
        ImageModelSettings model =
            BinaryData
                .fromString(
                    "{\"advancedSettings\":\"lixqcah\",\"amsGradient\":true,\"augmentations\":\"lyb\",\"beta1\":62.22261,\"beta2\":85.89724,\"checkpointFrequency\":1668703834,\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"mode\":\"EvalDownload\",\"uri\":\"blxpkkwjdjodq\",\"description\":\"kincnremeh\"},\"checkpointRunId\":\"izhceumoqodkadp\",\"distributed\":true,\"earlyStopping\":true,\"earlyStoppingDelay\":1861946101,\"earlyStoppingPatience\":679762511,\"enableOnnxNormalization\":false,\"evaluationFrequency\":30824840,\"gradientAccumulationStep\":1164247130,\"layersToFreeze\":294480903,\"learningRate\":18.046337,\"learningRateScheduler\":\"Step\",\"modelName\":\"vadswzs\",\"momentum\":83.47022,\"nesterov\":true,\"numberOfEpochs\":1571331551,\"numberOfWorkers\":1687194645,\"optimizer\":\"Sgd\",\"randomSeed\":100278507,\"stepLRGamma\":24.121035,\"stepLRStepSize\":1748294835,\"trainingBatchSize\":1414324336,\"validationBatchSize\":1884184924,\"warmupCosineLRCycles\":51.774742,\"warmupCosineLRWarmupEpochs\":1986212179,\"weightDecay\":9.2496395}")
                .toObject(ImageModelSettings.class);
        Assertions.assertEquals("lixqcah", model.advancedSettings());
        Assertions.assertEquals(true, model.amsGradient());
        Assertions.assertEquals("lyb", model.augmentations());
        Assertions.assertEquals(62.22261F, model.beta1());
        Assertions.assertEquals(85.89724F, model.beta2());
        Assertions.assertEquals(1668703834, model.checkpointFrequency());
        Assertions.assertEquals("kincnremeh", model.checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.checkpointModel().mode());
        Assertions.assertEquals("blxpkkwjdjodq", model.checkpointModel().uri());
        Assertions.assertEquals("izhceumoqodkadp", model.checkpointRunId());
        Assertions.assertEquals(true, model.distributed());
        Assertions.assertEquals(true, model.earlyStopping());
        Assertions.assertEquals(1861946101, model.earlyStoppingDelay());
        Assertions.assertEquals(679762511, model.earlyStoppingPatience());
        Assertions.assertEquals(false, model.enableOnnxNormalization());
        Assertions.assertEquals(30824840, model.evaluationFrequency());
        Assertions.assertEquals(1164247130, model.gradientAccumulationStep());
        Assertions.assertEquals(294480903, model.layersToFreeze());
        Assertions.assertEquals(18.046337F, model.learningRate());
        Assertions.assertEquals(LearningRateScheduler.STEP, model.learningRateScheduler());
        Assertions.assertEquals("vadswzs", model.modelName());
        Assertions.assertEquals(83.47022F, model.momentum());
        Assertions.assertEquals(true, model.nesterov());
        Assertions.assertEquals(1571331551, model.numberOfEpochs());
        Assertions.assertEquals(1687194645, model.numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.SGD, model.optimizer());
        Assertions.assertEquals(100278507, model.randomSeed());
        Assertions.assertEquals(24.121035F, model.stepLRGamma());
        Assertions.assertEquals(1748294835, model.stepLRStepSize());
        Assertions.assertEquals(1414324336, model.trainingBatchSize());
        Assertions.assertEquals(1884184924, model.validationBatchSize());
        Assertions.assertEquals(51.774742F, model.warmupCosineLRCycles());
        Assertions.assertEquals(1986212179, model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(9.2496395F, model.weightDecay());
    }

    @Test
    public void testSerialize() {
        ImageModelSettings model =
            new ImageModelSettings()
                .withAdvancedSettings("lixqcah")
                .withAmsGradient(true)
                .withAugmentations("lyb")
                .withBeta1(62.22261F)
                .withBeta2(85.89724F)
                .withCheckpointFrequency(1668703834)
                .withCheckpointModel(
                    new MLFlowModelJobInput()
                        .withDescription("kincnremeh")
                        .withMode(InputDeliveryMode.EVAL_DOWNLOAD)
                        .withUri("blxpkkwjdjodq"))
                .withCheckpointRunId("izhceumoqodkadp")
                .withDistributed(true)
                .withEarlyStopping(true)
                .withEarlyStoppingDelay(1861946101)
                .withEarlyStoppingPatience(679762511)
                .withEnableOnnxNormalization(false)
                .withEvaluationFrequency(30824840)
                .withGradientAccumulationStep(1164247130)
                .withLayersToFreeze(294480903)
                .withLearningRate(18.046337F)
                .withLearningRateScheduler(LearningRateScheduler.STEP)
                .withModelName("vadswzs")
                .withMomentum(83.47022F)
                .withNesterov(true)
                .withNumberOfEpochs(1571331551)
                .withNumberOfWorkers(1687194645)
                .withOptimizer(StochasticOptimizer.SGD)
                .withRandomSeed(100278507)
                .withStepLRGamma(24.121035F)
                .withStepLRStepSize(1748294835)
                .withTrainingBatchSize(1414324336)
                .withValidationBatchSize(1884184924)
                .withWarmupCosineLRCycles(51.774742F)
                .withWarmupCosineLRWarmupEpochs(1986212179)
                .withWeightDecay(9.2496395F);
        model = BinaryData.fromObject(model).toObject(ImageModelSettings.class);
        Assertions.assertEquals("lixqcah", model.advancedSettings());
        Assertions.assertEquals(true, model.amsGradient());
        Assertions.assertEquals("lyb", model.augmentations());
        Assertions.assertEquals(62.22261F, model.beta1());
        Assertions.assertEquals(85.89724F, model.beta2());
        Assertions.assertEquals(1668703834, model.checkpointFrequency());
        Assertions.assertEquals("kincnremeh", model.checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.checkpointModel().mode());
        Assertions.assertEquals("blxpkkwjdjodq", model.checkpointModel().uri());
        Assertions.assertEquals("izhceumoqodkadp", model.checkpointRunId());
        Assertions.assertEquals(true, model.distributed());
        Assertions.assertEquals(true, model.earlyStopping());
        Assertions.assertEquals(1861946101, model.earlyStoppingDelay());
        Assertions.assertEquals(679762511, model.earlyStoppingPatience());
        Assertions.assertEquals(false, model.enableOnnxNormalization());
        Assertions.assertEquals(30824840, model.evaluationFrequency());
        Assertions.assertEquals(1164247130, model.gradientAccumulationStep());
        Assertions.assertEquals(294480903, model.layersToFreeze());
        Assertions.assertEquals(18.046337F, model.learningRate());
        Assertions.assertEquals(LearningRateScheduler.STEP, model.learningRateScheduler());
        Assertions.assertEquals("vadswzs", model.modelName());
        Assertions.assertEquals(83.47022F, model.momentum());
        Assertions.assertEquals(true, model.nesterov());
        Assertions.assertEquals(1571331551, model.numberOfEpochs());
        Assertions.assertEquals(1687194645, model.numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.SGD, model.optimizer());
        Assertions.assertEquals(100278507, model.randomSeed());
        Assertions.assertEquals(24.121035F, model.stepLRGamma());
        Assertions.assertEquals(1748294835, model.stepLRStepSize());
        Assertions.assertEquals(1414324336, model.trainingBatchSize());
        Assertions.assertEquals(1884184924, model.validationBatchSize());
        Assertions.assertEquals(51.774742F, model.warmupCosineLRCycles());
        Assertions.assertEquals(1986212179, model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(9.2496395F, model.weightDecay());
    }
}
