// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import org.junit.jupiter.api.Assertions;

public final class ImageModelSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageModelSettings model = BinaryData.fromString(
            "{\"amsGradient\":false,\"advancedSettings\":\"bjepzwhj\",\"augmentations\":\"fdgbggcjxzhbl\",\"beta1\":22.508585,\"beta2\":51.947952,\"checkpointFrequency\":1855309521,\"checkpointRunId\":\"ym\",\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"uri\":\"bhdosmbngkql\",\"mode\":\"ReadWriteMount\",\"description\":\"uvxdmxexatmd\"},\"distributed\":false,\"earlyStopping\":true,\"earlyStoppingDelay\":307725158,\"earlyStoppingPatience\":1605028001,\"evaluationFrequency\":696774738,\"enableOnnxNormalization\":true,\"gradientAccumulationStep\":1911706738,\"layersToFreeze\":10967468,\"learningRate\":8.704895,\"learningRateScheduler\":\"WarmupCosine\",\"modelName\":\"kzsoxz\",\"momentum\":17.274517,\"nesterov\":false,\"numberOfEpochs\":401465476,\"numberOfWorkers\":381354685,\"optimizer\":\"Sgd\",\"randomSeed\":1477736921,\"stepLRGamma\":48.98826,\"stepLRStepSize\":960769540,\"trainingBatchSize\":556171799,\"validationBatchSize\":2147008649,\"warmupCosineLRCycles\":63.310665,\"warmupCosineLRWarmupEpochs\":218469091,\"weightDecay\":33.301514}")
            .toObject(ImageModelSettings.class);
        Assertions.assertEquals(false, model.amsGradient());
        Assertions.assertEquals("bjepzwhj", model.advancedSettings());
        Assertions.assertEquals("fdgbggcjxzhbl", model.augmentations());
        Assertions.assertEquals(22.508585F, model.beta1());
        Assertions.assertEquals(51.947952F, model.beta2());
        Assertions.assertEquals(1855309521, model.checkpointFrequency());
        Assertions.assertEquals("ym", model.checkpointRunId());
        Assertions.assertEquals("uvxdmxexatmd", model.checkpointModel().description());
        Assertions.assertEquals("bhdosmbngkql", model.checkpointModel().uri());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.checkpointModel().mode());
        Assertions.assertEquals(false, model.distributed());
        Assertions.assertEquals(true, model.earlyStopping());
        Assertions.assertEquals(307725158, model.earlyStoppingDelay());
        Assertions.assertEquals(1605028001, model.earlyStoppingPatience());
        Assertions.assertEquals(696774738, model.evaluationFrequency());
        Assertions.assertEquals(true, model.enableOnnxNormalization());
        Assertions.assertEquals(1911706738, model.gradientAccumulationStep());
        Assertions.assertEquals(10967468, model.layersToFreeze());
        Assertions.assertEquals(8.704895F, model.learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.learningRateScheduler());
        Assertions.assertEquals("kzsoxz", model.modelName());
        Assertions.assertEquals(17.274517F, model.momentum());
        Assertions.assertEquals(false, model.nesterov());
        Assertions.assertEquals(401465476, model.numberOfEpochs());
        Assertions.assertEquals(381354685, model.numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.SGD, model.optimizer());
        Assertions.assertEquals(1477736921, model.randomSeed());
        Assertions.assertEquals(48.98826F, model.stepLRGamma());
        Assertions.assertEquals(960769540, model.stepLRStepSize());
        Assertions.assertEquals(556171799, model.trainingBatchSize());
        Assertions.assertEquals(2147008649, model.validationBatchSize());
        Assertions.assertEquals(63.310665F, model.warmupCosineLRCycles());
        Assertions.assertEquals(218469091, model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(33.301514F, model.weightDecay());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageModelSettings model = new ImageModelSettings().withAmsGradient(false)
            .withAdvancedSettings("bjepzwhj")
            .withAugmentations("fdgbggcjxzhbl")
            .withBeta1(22.508585F)
            .withBeta2(51.947952F)
            .withCheckpointFrequency(1855309521)
            .withCheckpointRunId("ym")
            .withCheckpointModel(new MLFlowModelJobInput().withDescription("uvxdmxexatmd")
                .withUri("bhdosmbngkql")
                .withMode(InputDeliveryMode.READ_WRITE_MOUNT))
            .withDistributed(false)
            .withEarlyStopping(true)
            .withEarlyStoppingDelay(307725158)
            .withEarlyStoppingPatience(1605028001)
            .withEvaluationFrequency(696774738)
            .withEnableOnnxNormalization(true)
            .withGradientAccumulationStep(1911706738)
            .withLayersToFreeze(10967468)
            .withLearningRate(8.704895F)
            .withLearningRateScheduler(LearningRateScheduler.WARMUP_COSINE)
            .withModelName("kzsoxz")
            .withMomentum(17.274517F)
            .withNesterov(false)
            .withNumberOfEpochs(401465476)
            .withNumberOfWorkers(381354685)
            .withOptimizer(StochasticOptimizer.SGD)
            .withRandomSeed(1477736921)
            .withStepLRGamma(48.98826F)
            .withStepLRStepSize(960769540)
            .withTrainingBatchSize(556171799)
            .withValidationBatchSize(2147008649)
            .withWarmupCosineLRCycles(63.310665F)
            .withWarmupCosineLRWarmupEpochs(218469091)
            .withWeightDecay(33.301514F);
        model = BinaryData.fromObject(model).toObject(ImageModelSettings.class);
        Assertions.assertEquals(false, model.amsGradient());
        Assertions.assertEquals("bjepzwhj", model.advancedSettings());
        Assertions.assertEquals("fdgbggcjxzhbl", model.augmentations());
        Assertions.assertEquals(22.508585F, model.beta1());
        Assertions.assertEquals(51.947952F, model.beta2());
        Assertions.assertEquals(1855309521, model.checkpointFrequency());
        Assertions.assertEquals("ym", model.checkpointRunId());
        Assertions.assertEquals("uvxdmxexatmd", model.checkpointModel().description());
        Assertions.assertEquals("bhdosmbngkql", model.checkpointModel().uri());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.checkpointModel().mode());
        Assertions.assertEquals(false, model.distributed());
        Assertions.assertEquals(true, model.earlyStopping());
        Assertions.assertEquals(307725158, model.earlyStoppingDelay());
        Assertions.assertEquals(1605028001, model.earlyStoppingPatience());
        Assertions.assertEquals(696774738, model.evaluationFrequency());
        Assertions.assertEquals(true, model.enableOnnxNormalization());
        Assertions.assertEquals(1911706738, model.gradientAccumulationStep());
        Assertions.assertEquals(10967468, model.layersToFreeze());
        Assertions.assertEquals(8.704895F, model.learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.learningRateScheduler());
        Assertions.assertEquals("kzsoxz", model.modelName());
        Assertions.assertEquals(17.274517F, model.momentum());
        Assertions.assertEquals(false, model.nesterov());
        Assertions.assertEquals(401465476, model.numberOfEpochs());
        Assertions.assertEquals(381354685, model.numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.SGD, model.optimizer());
        Assertions.assertEquals(1477736921, model.randomSeed());
        Assertions.assertEquals(48.98826F, model.stepLRGamma());
        Assertions.assertEquals(960769540, model.stepLRStepSize());
        Assertions.assertEquals(556171799, model.trainingBatchSize());
        Assertions.assertEquals(2147008649, model.validationBatchSize());
        Assertions.assertEquals(63.310665F, model.warmupCosineLRCycles());
        Assertions.assertEquals(218469091, model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(33.301514F, model.weightDecay());
    }
}
