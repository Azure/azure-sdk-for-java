// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.Collection;
import com.azure.resourcemanager.machinelearning.models.DataCollectionMode;
import com.azure.resourcemanager.machinelearning.models.DataCollector;
import com.azure.resourcemanager.machinelearning.models.RequestLogging;
import com.azure.resourcemanager.machinelearning.models.RollingRateType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataCollectorTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataCollector model = BinaryData.fromString(
            "{\"collections\":{\"jsvkskmqozzkivy\":{\"samplingRate\":40.92657360869598,\"dataCollectionMode\":\"Disabled\",\"dataId\":\"ulgm\",\"clientId\":\"jevdyznf\"}},\"rollingRate\":\"Year\",\"requestLogging\":{\"captureHeaders\":[\"zji\",\"lqfhefkwabs\"]}}")
            .toObject(DataCollector.class);
        Assertions.assertEquals(40.92657360869598D, model.collections().get("jsvkskmqozzkivy").samplingRate());
        Assertions.assertEquals(DataCollectionMode.DISABLED,
            model.collections().get("jsvkskmqozzkivy").dataCollectionMode());
        Assertions.assertEquals("ulgm", model.collections().get("jsvkskmqozzkivy").dataId());
        Assertions.assertEquals("jevdyznf", model.collections().get("jsvkskmqozzkivy").clientId());
        Assertions.assertEquals(RollingRateType.YEAR, model.rollingRate());
        Assertions.assertEquals("zji", model.requestLogging().captureHeaders().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataCollector model = new DataCollector()
            .withCollections(mapOf("jsvkskmqozzkivy",
                new Collection().withSamplingRate(40.92657360869598D)
                    .withDataCollectionMode(DataCollectionMode.DISABLED)
                    .withDataId("ulgm")
                    .withClientId("jevdyznf")))
            .withRollingRate(RollingRateType.YEAR)
            .withRequestLogging(new RequestLogging().withCaptureHeaders(Arrays.asList("zji", "lqfhefkwabs")));
        model = BinaryData.fromObject(model).toObject(DataCollector.class);
        Assertions.assertEquals(40.92657360869598D, model.collections().get("jsvkskmqozzkivy").samplingRate());
        Assertions.assertEquals(DataCollectionMode.DISABLED,
            model.collections().get("jsvkskmqozzkivy").dataCollectionMode());
        Assertions.assertEquals("ulgm", model.collections().get("jsvkskmqozzkivy").dataId());
        Assertions.assertEquals("jevdyznf", model.collections().get("jsvkskmqozzkivy").clientId());
        Assertions.assertEquals(RollingRateType.YEAR, model.rollingRate());
        Assertions.assertEquals("zji", model.requestLogging().captureHeaders().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
