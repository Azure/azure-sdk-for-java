// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.AssetBase;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssetBaseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssetBase model = BinaryData.fromString(
            "{\"isArchived\":false,\"isAnonymous\":true,\"description\":\"jrkvfgbvfvpdbo\",\"tags\":{\"bdeibqipqk\":\"izsjqlhkrr\",\"rwkq\":\"hvxndzwmkrefajpj\",\"sjabibs\":\"yhgbijtjivfx\",\"bjxbkzbzk\":\"stawfsdjpvkv\"},\"properties\":{\"zhjjklffhmouwq\":\"cjabudurgkakmo\"}}")
            .toObject(AssetBase.class);
        Assertions.assertEquals("jrkvfgbvfvpdbo", model.description());
        Assertions.assertEquals("izsjqlhkrr", model.tags().get("bdeibqipqk"));
        Assertions.assertEquals("cjabudurgkakmo", model.properties().get("zhjjklffhmouwq"));
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals(true, model.isAnonymous());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssetBase model = new AssetBase().withDescription("jrkvfgbvfvpdbo")
            .withTags(mapOf("bdeibqipqk", "izsjqlhkrr", "rwkq", "hvxndzwmkrefajpj", "sjabibs", "yhgbijtjivfx",
                "bjxbkzbzk", "stawfsdjpvkv"))
            .withProperties(mapOf("zhjjklffhmouwq", "cjabudurgkakmo"))
            .withIsArchived(false)
            .withIsAnonymous(true);
        model = BinaryData.fromObject(model).toObject(AssetBase.class);
        Assertions.assertEquals("jrkvfgbvfvpdbo", model.description());
        Assertions.assertEquals("izsjqlhkrr", model.tags().get("bdeibqipqk"));
        Assertions.assertEquals("cjabudurgkakmo", model.properties().get("zhjjklffhmouwq"));
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals(true, model.isAnonymous());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
