// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.AssetBase;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AssetBaseTests {
    @Test
    public void testDeserialize() {
        AssetBase model =
            BinaryData
                .fromString(
                    "{\"isAnonymous\":true,\"isArchived\":false,\"description\":\"p\",\"properties\":{\"j\":\"daciz\",\"hvxndzwmkrefajpj\":\"lhkrribdeibqipqk\"},\"tags\":{\"b\":\"kqnyh\",\"jivfxzsjabib\":\"j\"}}")
                .toObject(AssetBase.class);
        Assertions.assertEquals("p", model.description());
        Assertions.assertEquals("daciz", model.properties().get("j"));
        Assertions.assertEquals("kqnyh", model.tags().get("b"));
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
    }

    @Test
    public void testSerialize() {
        AssetBase model =
            new AssetBase()
                .withDescription("p")
                .withProperties(mapOf("j", "daciz", "hvxndzwmkrefajpj", "lhkrribdeibqipqk"))
                .withTags(mapOf("b", "kqnyh", "jivfxzsjabib", "j"))
                .withIsAnonymous(true)
                .withIsArchived(false);
        model = BinaryData.fromObject(model).toObject(AssetBase.class);
        Assertions.assertEquals("p", model.description());
        Assertions.assertEquals("daciz", model.properties().get("j"));
        Assertions.assertEquals("kqnyh", model.tags().get("b"));
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
