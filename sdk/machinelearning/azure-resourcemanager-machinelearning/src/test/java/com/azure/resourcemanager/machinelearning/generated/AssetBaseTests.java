// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.AssetBase;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssetBaseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssetBase model =
            BinaryData
                .fromString(
                    "{\"isAnonymous\":false,\"isArchived\":false,\"description\":\"szfjvfbgofelja\",\"properties\":{\"ojnal\":\"mqhldvrii\",\"qhhahhxvrhmzkwpj\":\"hfkvtvsexsowuel\",\"ughftqsx\":\"wws\"},\"tags\":{\"grjguufzd\":\"ujxukndxd\",\"whbotzingamv\":\"syqtfi\"}}")
                .toObject(AssetBase.class);
        Assertions.assertEquals("szfjvfbgofelja", model.description());
        Assertions.assertEquals("mqhldvrii", model.properties().get("ojnal"));
        Assertions.assertEquals("ujxukndxd", model.tags().get("grjguufzd"));
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssetBase model =
            new AssetBase()
                .withDescription("szfjvfbgofelja")
                .withProperties(mapOf("ojnal", "mqhldvrii", "qhhahhxvrhmzkwpj", "hfkvtvsexsowuel", "ughftqsx", "wws"))
                .withTags(mapOf("grjguufzd", "ujxukndxd", "whbotzingamv", "syqtfi"))
                .withIsAnonymous(false)
                .withIsArchived(false);
        model = BinaryData.fromObject(model).toObject(AssetBase.class);
        Assertions.assertEquals("szfjvfbgofelja", model.description());
        Assertions.assertEquals("mqhldvrii", model.properties().get("ojnal"));
        Assertions.assertEquals("ujxukndxd", model.tags().get("grjguufzd"));
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
