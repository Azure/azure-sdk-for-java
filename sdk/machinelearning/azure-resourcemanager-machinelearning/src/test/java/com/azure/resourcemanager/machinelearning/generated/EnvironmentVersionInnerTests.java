// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.EnvironmentVersionInner;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.BuildContext;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersionProperties;
import com.azure.resourcemanager.machinelearning.models.InferenceContainerProperties;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class EnvironmentVersionInnerTests {
    @Test
    public void testDeserialize() {
        EnvironmentVersionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"autoRebuild\":\"Disabled\",\"build\":{\"contextUri\":\"vazivjlfr\",\"dockerfilePath\":\"tbajlkatn\"},\"condaFile\":\"yiopi\",\"environmentType\":\"Curated\",\"image\":\"fku\",\"inferenceConfig\":{},\"osType\":\"Linux\",\"isAnonymous\":false,\"isArchived\":false,\"description\":\"ibrxkp\",\"properties\":{\"ocbgoorbteoyb\":\"azur\"},\"tags\":{\"il\":\"xakvvjgslor\",\"t\":\"yw\"}},\"id\":\"kxn\",\"name\":\"edabgyvudtjue\",\"type\":\"bcihxuuwhc\"}")
                .toObject(EnvironmentVersionInner.class);
        Assertions.assertEquals("ibrxkp", model.properties().description());
        Assertions.assertEquals("azur", model.properties().properties().get("ocbgoorbteoyb"));
        Assertions.assertEquals("xakvvjgslor", model.properties().tags().get("il"));
        Assertions.assertEquals(false, model.properties().isAnonymous());
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals(AutoRebuildSetting.DISABLED, model.properties().autoRebuild());
        Assertions.assertEquals("vazivjlfr", model.properties().build().contextUri());
        Assertions.assertEquals("tbajlkatn", model.properties().build().dockerfilePath());
        Assertions.assertEquals("yiopi", model.properties().condaFile());
        Assertions.assertEquals("fku", model.properties().image());
        Assertions.assertEquals(OperatingSystemType.LINUX, model.properties().osType());
    }

    @Test
    public void testSerialize() {
        EnvironmentVersionInner model =
            new EnvironmentVersionInner()
                .withProperties(
                    new EnvironmentVersionProperties()
                        .withDescription("ibrxkp")
                        .withProperties(mapOf("ocbgoorbteoyb", "azur"))
                        .withTags(mapOf("il", "xakvvjgslor", "t", "yw"))
                        .withIsAnonymous(false)
                        .withIsArchived(false)
                        .withAutoRebuild(AutoRebuildSetting.DISABLED)
                        .withBuild(new BuildContext().withContextUri("vazivjlfr").withDockerfilePath("tbajlkatn"))
                        .withCondaFile("yiopi")
                        .withImage("fku")
                        .withInferenceConfig(new InferenceContainerProperties())
                        .withOsType(OperatingSystemType.LINUX));
        model = BinaryData.fromObject(model).toObject(EnvironmentVersionInner.class);
        Assertions.assertEquals("ibrxkp", model.properties().description());
        Assertions.assertEquals("azur", model.properties().properties().get("ocbgoorbteoyb"));
        Assertions.assertEquals("xakvvjgslor", model.properties().tags().get("il"));
        Assertions.assertEquals(false, model.properties().isAnonymous());
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals(AutoRebuildSetting.DISABLED, model.properties().autoRebuild());
        Assertions.assertEquals("vazivjlfr", model.properties().build().contextUri());
        Assertions.assertEquals("tbajlkatn", model.properties().build().dockerfilePath());
        Assertions.assertEquals("yiopi", model.properties().condaFile());
        Assertions.assertEquals("fku", model.properties().image());
        Assertions.assertEquals(OperatingSystemType.LINUX, model.properties().osType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
