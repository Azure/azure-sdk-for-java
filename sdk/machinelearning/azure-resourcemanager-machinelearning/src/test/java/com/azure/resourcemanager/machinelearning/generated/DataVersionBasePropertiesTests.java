// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.DataVersionBaseProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DataVersionBasePropertiesTests {
    @Test
    public void testDeserialize() {
        DataVersionBaseProperties model =
            BinaryData
                .fromString(
                    "{\"dataType\":\"DataVersionBaseProperties\",\"dataUri\":\"p\",\"isAnonymous\":true,\"isArchived\":false,\"description\":\"wcfzqljyxgt\",\"properties\":{\"hmkxmaehvbb\":\"eydbsd\"},\"tags\":{\"n\":\"iplt\",\"xywr\":\"tbaxk\"}}")
                .toObject(DataVersionBaseProperties.class);
        Assertions.assertEquals("wcfzqljyxgt", model.description());
        Assertions.assertEquals("eydbsd", model.properties().get("hmkxmaehvbb"));
        Assertions.assertEquals("iplt", model.tags().get("n"));
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals("p", model.dataUri());
    }

    @Test
    public void testSerialize() {
        DataVersionBaseProperties model =
            new DataVersionBaseProperties()
                .withDescription("wcfzqljyxgt")
                .withProperties(mapOf("hmkxmaehvbb", "eydbsd"))
                .withTags(mapOf("n", "iplt", "xywr", "tbaxk"))
                .withIsAnonymous(true)
                .withIsArchived(false)
                .withDataUri("p");
        model = BinaryData.fromObject(model).toObject(DataVersionBaseProperties.class);
        Assertions.assertEquals("wcfzqljyxgt", model.description());
        Assertions.assertEquals("eydbsd", model.properties().get("hmkxmaehvbb"));
        Assertions.assertEquals("iplt", model.tags().get("n"));
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals("p", model.dataUri());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
