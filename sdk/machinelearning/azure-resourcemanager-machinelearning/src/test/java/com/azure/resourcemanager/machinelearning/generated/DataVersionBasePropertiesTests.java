// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.DataVersionBaseProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataVersionBasePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataVersionBaseProperties model =
            BinaryData
                .fromString(
                    "{\"dataType\":\"DataVersionBaseProperties\",\"dataUri\":\"vh\",\"isAnonymous\":false,\"isArchived\":true,\"description\":\"dqkdlwwqfbu\",\"properties\":{\"lmbtxhwgfwsrt\":\"xtrqjfs\",\"kh\":\"wcoezbrhub\"},\"tags\":{\"kkqfqjbvle\":\"goo\"}}")
                .toObject(DataVersionBaseProperties.class);
        Assertions.assertEquals("dqkdlwwqfbu", model.description());
        Assertions.assertEquals("xtrqjfs", model.properties().get("lmbtxhwgfwsrt"));
        Assertions.assertEquals("goo", model.tags().get("kkqfqjbvle"));
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals("vh", model.dataUri());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataVersionBaseProperties model =
            new DataVersionBaseProperties()
                .withDescription("dqkdlwwqfbu")
                .withProperties(mapOf("lmbtxhwgfwsrt", "xtrqjfs", "kh", "wcoezbrhub"))
                .withTags(mapOf("kkqfqjbvle", "goo"))
                .withIsAnonymous(false)
                .withIsArchived(true)
                .withDataUri("vh");
        model = BinaryData.fromObject(model).toObject(DataVersionBaseProperties.class);
        Assertions.assertEquals("dqkdlwwqfbu", model.description());
        Assertions.assertEquals("xtrqjfs", model.properties().get("lmbtxhwgfwsrt"));
        Assertions.assertEquals("goo", model.tags().get("kkqfqjbvle"));
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals("vh", model.dataUri());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
