// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.ImageVertical;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageVerticalTests {
    @Test
    public void testDeserialize() {
        ImageVertical model =
            BinaryData
                .fromString(
                    "{\"limitSettings\":{\"maxConcurrentTrials\":70196874,\"maxTrials\":1805575521,\"timeout\":\"PT13H44M58S\"},\"sweepSettings\":{\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"delayEvaluation\":109280308,\"evaluationInterval\":1383567847},\"samplingAlgorithm\":\"Random\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadWriteMount\",\"uri\":\"blqwaafrqulhmzy\",\"description\":\"hdvafjrqpjiyrqjc\"},\"validationDataSize\":6.0707580165831}")
                .toObject(ImageVertical.class);
        Assertions.assertEquals(70196874, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1805575521, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT13H44M58S"), model.limitSettings().timeout());
        Assertions.assertEquals(109280308, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(1383567847, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.RANDOM, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("hdvafjrqpjiyrqjc", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("blqwaafrqulhmzy", model.validationData().uri());
        Assertions.assertEquals(6.0707580165831D, model.validationDataSize());
    }

    @Test
    public void testSerialize() {
        ImageVertical model =
            new ImageVertical()
                .withLimitSettings(
                    new ImageLimitSettings()
                        .withMaxConcurrentTrials(70196874)
                        .withMaxTrials(1805575521)
                        .withTimeout(Duration.parse("PT13H44M58S")))
                .withSweepSettings(
                    new ImageSweepSettings()
                        .withEarlyTermination(
                            new EarlyTerminationPolicy()
                                .withDelayEvaluation(109280308)
                                .withEvaluationInterval(1383567847))
                        .withSamplingAlgorithm(SamplingAlgorithmType.RANDOM))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("hdvafjrqpjiyrqjc")
                        .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                        .withUri("blqwaafrqulhmzy"))
                .withValidationDataSize(6.0707580165831D);
        model = BinaryData.fromObject(model).toObject(ImageVertical.class);
        Assertions.assertEquals(70196874, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1805575521, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT13H44M58S"), model.limitSettings().timeout());
        Assertions.assertEquals(109280308, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(1383567847, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.RANDOM, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("hdvafjrqpjiyrqjc", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("blqwaafrqulhmzy", model.validationData().uri());
        Assertions.assertEquals(6.0707580165831D, model.validationDataSize());
    }
}
