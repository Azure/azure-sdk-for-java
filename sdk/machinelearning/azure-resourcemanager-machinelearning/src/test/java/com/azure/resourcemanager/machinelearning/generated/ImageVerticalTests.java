// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.ImageVertical;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class ImageVerticalTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageVertical model = BinaryData.fromString(
            "{\"limitSettings\":{\"maxTrials\":1994872439,\"timeout\":\"PT128H24M14S\",\"maxConcurrentTrials\":963869601},\"sweepSettings\":{\"samplingAlgorithm\":\"Random\",\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"evaluationInterval\":676982942,\"delayEvaluation\":1015925891}},\"validationData\":{\"jobInputType\":\"mltable\",\"uri\":\"nirupkqnst\",\"mode\":\"ReadOnlyMount\",\"description\":\"ibjg\"},\"validationDataSize\":70.27294181684461}")
            .toObject(ImageVertical.class);
        Assertions.assertEquals(1994872439, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT128H24M14S"), model.limitSettings().timeout());
        Assertions.assertEquals(963869601, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(SamplingAlgorithmType.RANDOM, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals(676982942, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(1015925891, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals("ibjg", model.validationData().description());
        Assertions.assertEquals("nirupkqnst", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.validationData().mode());
        Assertions.assertEquals(70.27294181684461D, model.validationDataSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageVertical model
            = new ImageVertical()
                .withLimitSettings(new ImageLimitSettings().withMaxTrials(1994872439)
                    .withTimeout(Duration.parse("PT128H24M14S"))
                    .withMaxConcurrentTrials(963869601))
                .withSweepSettings(
                    new ImageSweepSettings().withSamplingAlgorithm(SamplingAlgorithmType.RANDOM)
                        .withEarlyTermination(new EarlyTerminationPolicy().withEvaluationInterval(676982942)
                            .withDelayEvaluation(1015925891)))
                .withValidationData(new MLTableJobInput().withDescription("ibjg")
                    .withUri("nirupkqnst")
                    .withMode(InputDeliveryMode.READ_ONLY_MOUNT))
                .withValidationDataSize(70.27294181684461D);
        model = BinaryData.fromObject(model).toObject(ImageVertical.class);
        Assertions.assertEquals(1994872439, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT128H24M14S"), model.limitSettings().timeout());
        Assertions.assertEquals(963869601, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(SamplingAlgorithmType.RANDOM, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals(676982942, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(1015925891, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals("ibjg", model.validationData().description());
        Assertions.assertEquals("nirupkqnst", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.validationData().mode());
        Assertions.assertEquals(70.27294181684461D, model.validationDataSize());
    }
}
