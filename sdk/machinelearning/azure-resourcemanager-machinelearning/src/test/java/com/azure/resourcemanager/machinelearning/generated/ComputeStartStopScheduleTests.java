// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ComputePowerAction;
import com.azure.resourcemanager.machinelearning.models.ComputeStartStopSchedule;
import com.azure.resourcemanager.machinelearning.models.CronTrigger;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.RecurrenceSchedule;
import com.azure.resourcemanager.machinelearning.models.RecurrenceTrigger;
import com.azure.resourcemanager.machinelearning.models.ScheduleBase;
import com.azure.resourcemanager.machinelearning.models.ScheduleProvisioningState;
import com.azure.resourcemanager.machinelearning.models.ScheduleStatus;
import com.azure.resourcemanager.machinelearning.models.TriggerType;
import com.azure.resourcemanager.machinelearning.models.WeekDay;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ComputeStartStopScheduleTests {
    @Test
    public void testDeserialize() {
        ComputeStartStopSchedule model =
            BinaryData
                .fromString(
                    "{\"id\":\"bsre\",\"provisioningStatus\":\"Failed\",\"status\":\"Disabled\",\"action\":\"Start\",\"triggerType\":\"Cron\",\"recurrence\":{\"triggerType\":\"Recurrence\",\"frequency\":\"Hour\",\"interval\":451973602,\"schedule\":{\"hours\":[1102967023,1701983547,1757158898,1867886432],\"minutes\":[1998431294,1009916095],\"monthDays\":[1958015579],\"weekDays\":[\"Saturday\",\"Saturday\"]},\"endTime\":\"devjb\",\"startTime\":\"lcqxypokk\",\"timeZone\":\"inqcymczngnbdxxe\"},\"cron\":{\"triggerType\":\"Cron\",\"expression\":\"ninvudbchaqdt\",\"endTime\":\"ec\",\"startTime\":\"ct\",\"timeZone\":\"xdtddmflhuytxzv\"},\"schedule\":{\"id\":\"apxbannovvoxczy\",\"provisioningStatus\":\"Provisioning\",\"status\":\"Disabled\"}}")
                .toObject(ComputeStartStopSchedule.class);
        Assertions.assertEquals(ScheduleStatus.DISABLED, model.status());
        Assertions.assertEquals(ComputePowerAction.START, model.action());
        Assertions.assertEquals(TriggerType.CRON, model.triggerType());
        Assertions.assertEquals("devjb", model.recurrence().endTime());
        Assertions.assertEquals("lcqxypokk", model.recurrence().startTime());
        Assertions.assertEquals("inqcymczngnbdxxe", model.recurrence().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.HOUR, model.recurrence().frequency());
        Assertions.assertEquals(451973602, model.recurrence().interval());
        Assertions.assertEquals(1102967023, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(1998431294, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1958015579, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(WeekDay.SATURDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals("ec", model.cron().endTime());
        Assertions.assertEquals("ct", model.cron().startTime());
        Assertions.assertEquals("xdtddmflhuytxzv", model.cron().timeZone());
        Assertions.assertEquals("ninvudbchaqdt", model.cron().expression());
        Assertions.assertEquals("apxbannovvoxczy", model.schedule().id());
        Assertions.assertEquals(ScheduleProvisioningState.PROVISIONING, model.schedule().provisioningStatus());
        Assertions.assertEquals(ScheduleStatus.DISABLED, model.schedule().status());
    }

    @Test
    public void testSerialize() {
        ComputeStartStopSchedule model =
            new ComputeStartStopSchedule()
                .withStatus(ScheduleStatus.DISABLED)
                .withAction(ComputePowerAction.START)
                .withTriggerType(TriggerType.CRON)
                .withRecurrence(
                    new RecurrenceTrigger()
                        .withEndTime("devjb")
                        .withStartTime("lcqxypokk")
                        .withTimeZone("inqcymczngnbdxxe")
                        .withFrequency(RecurrenceFrequency.HOUR)
                        .withInterval(451973602)
                        .withSchedule(
                            new RecurrenceSchedule()
                                .withHours(Arrays.asList(1102967023, 1701983547, 1757158898, 1867886432))
                                .withMinutes(Arrays.asList(1998431294, 1009916095))
                                .withMonthDays(Arrays.asList(1958015579))
                                .withWeekDays(Arrays.asList(WeekDay.SATURDAY, WeekDay.SATURDAY))))
                .withCron(
                    new CronTrigger()
                        .withEndTime("ec")
                        .withStartTime("ct")
                        .withTimeZone("xdtddmflhuytxzv")
                        .withExpression("ninvudbchaqdt"))
                .withSchedule(
                    new ScheduleBase()
                        .withId("apxbannovvoxczy")
                        .withProvisioningStatus(ScheduleProvisioningState.PROVISIONING)
                        .withStatus(ScheduleStatus.DISABLED));
        model = BinaryData.fromObject(model).toObject(ComputeStartStopSchedule.class);
        Assertions.assertEquals(ScheduleStatus.DISABLED, model.status());
        Assertions.assertEquals(ComputePowerAction.START, model.action());
        Assertions.assertEquals(TriggerType.CRON, model.triggerType());
        Assertions.assertEquals("devjb", model.recurrence().endTime());
        Assertions.assertEquals("lcqxypokk", model.recurrence().startTime());
        Assertions.assertEquals("inqcymczngnbdxxe", model.recurrence().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.HOUR, model.recurrence().frequency());
        Assertions.assertEquals(451973602, model.recurrence().interval());
        Assertions.assertEquals(1102967023, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(1998431294, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1958015579, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(WeekDay.SATURDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals("ec", model.cron().endTime());
        Assertions.assertEquals("ct", model.cron().startTime());
        Assertions.assertEquals("xdtddmflhuytxzv", model.cron().timeZone());
        Assertions.assertEquals("ninvudbchaqdt", model.cron().expression());
        Assertions.assertEquals("apxbannovvoxczy", model.schedule().id());
        Assertions.assertEquals(ScheduleProvisioningState.PROVISIONING, model.schedule().provisioningStatus());
        Assertions.assertEquals(ScheduleStatus.DISABLED, model.schedule().status());
    }
}
