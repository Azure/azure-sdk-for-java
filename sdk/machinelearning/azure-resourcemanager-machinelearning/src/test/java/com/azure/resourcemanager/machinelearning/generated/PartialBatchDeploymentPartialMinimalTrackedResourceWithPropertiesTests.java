// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.PartialBatchDeployment;
import com.azure.resourcemanager.machinelearning.models.PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PartialBatchDeploymentPartialMinimalTrackedResourceWithPropertiesTests {
    @Test
    public void testDeserialize() {
        PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"description\":\"i\"},\"tags\":{\"q\":\"pdtii\",\"oaxoruzfgsqu\":\"d\",\"tramxjez\":\"fxrxxle\",\"tdooaoj\":\"lwnwxuqlcvydyp\"}}")
                .toObject(PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties.class);
        Assertions.assertEquals("i", model.properties().description());
        Assertions.assertEquals("pdtii", model.tags().get("q"));
    }

    @Test
    public void testSerialize() {
        PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties model =
            new PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties()
                .withProperties(new PartialBatchDeployment().withDescription("i"))
                .withTags(mapOf("q", "pdtii", "oaxoruzfgsqu", "d", "tramxjez", "fxrxxle", "tdooaoj", "lwnwxuqlcvydyp"));
        model =
            BinaryData
                .fromObject(model)
                .toObject(PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties.class);
        Assertions.assertEquals("i", model.properties().description());
        Assertions.assertEquals("pdtii", model.tags().get("q"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
