// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.UriFileDataVersion;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class UriFileDataVersionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UriFileDataVersion model = BinaryData.fromString(
            "{\"dataType\":\"uri_file\",\"dataUri\":\"vhkhpsp\",\"isArchived\":false,\"isAnonymous\":false,\"description\":\"yfaoexnguwnrdpu\",\"tags\":{\"ybsz\":\"ihsujtg\"},\"properties\":{\"yelrnh\":\"jxejpdcliqwzut\"}}")
            .toObject(UriFileDataVersion.class);
        Assertions.assertEquals("yfaoexnguwnrdpu", model.description());
        Assertions.assertEquals("ihsujtg", model.tags().get("ybsz"));
        Assertions.assertEquals("jxejpdcliqwzut", model.properties().get("yelrnh"));
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals("vhkhpsp", model.dataUri());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UriFileDataVersion model = new UriFileDataVersion().withDescription("yfaoexnguwnrdpu")
            .withTags(mapOf("ybsz", "ihsujtg"))
            .withProperties(mapOf("yelrnh", "jxejpdcliqwzut"))
            .withIsArchived(false)
            .withIsAnonymous(false)
            .withDataUri("vhkhpsp");
        model = BinaryData.fromObject(model).toObject(UriFileDataVersion.class);
        Assertions.assertEquals("yfaoexnguwnrdpu", model.description());
        Assertions.assertEquals("ihsujtg", model.tags().get("ybsz"));
        Assertions.assertEquals("jxejpdcliqwzut", model.properties().get("yelrnh"));
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals("vhkhpsp", model.dataUri());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
