// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.EnvironmentVersionInner;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.BuildContext;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersion;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersionProperties;
import com.azure.resourcemanager.machinelearning.models.InferenceContainerProperties;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import com.azure.resourcemanager.machinelearning.models.Route;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistryEnvironmentVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"environmentType\":\"Curated\",\"image\":\"ovelvsp\",\"condaFile\":\"xjtezujtoudo\",\"build\":{\"contextUri\":\"x\",\"dockerfilePath\":\"vssrj\"},\"osType\":\"Windows\",\"inferenceConfig\":{\"livenessRoute\":{\"path\":\"wemt\",\"port\":1587028677},\"readinessRoute\":{\"path\":\"ebymmcgskscbsx\",\"port\":297174289},\"scoringRoute\":{\"path\":\"xicjojxolknsh\",\"port\":307738924}},\"autoRebuild\":\"OnBaseImageUpdate\",\"provisioningState\":\"Succeeded\",\"stage\":\"hmbglmnlbn\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"zzc\",\"tags\":{\"kahophqwojdz\":\"ortdzzvhbu\",\"srbfbs\":\"cqt\"},\"properties\":{\"h\":\"cdzfbvexrv\",\"vrsksdzmhwt\":\"mfsnqpvjtshl\"}},\"id\":\"ppwfbw\",\"name\":\"etxizrfwxhflgdun\",\"type\":\"aypxsazbxs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        EnvironmentVersion response = manager.registryEnvironmentVersions()
            .createOrUpdate("bjlpfwuq", "rpdgitenyuksli", "mpnxg", "amrplanch",
                new EnvironmentVersionInner().withProperties(new EnvironmentVersionProperties().withDescription("a")
                    .withTags(mapOf("ltckiwxggfagi", "jt", "ah", "xmdboefnhx", "so", "qeinv", "ypcjxhyzzlocjhzp",
                        "mokrqdbsgkqyjko"))
                    .withProperties(mapOf("bofprsmivapesb", "rbmc"))
                    .withIsArchived(false)
                    .withIsAnonymous(false)
                    .withImage("mxlmxejwyvjzb")
                    .withCondaFile("vtuekbb")
                    .withBuild(new BuildContext().withContextUri("qsm").withDockerfilePath("beqieiuxhjuw"))
                    .withOsType(OperatingSystemType.LINUX)
                    .withInferenceConfig(new InferenceContainerProperties()
                        .withLivenessRoute(new Route().withPath("jjhrgkjjpc").withPort(752508930))
                        .withReadinessRoute(new Route().withPath("lzyxvtajfjatoid").withPort(1842998823))
                        .withScoringRoute(new Route().withPath("urdgc").withPort(1626550750)))
                    .withAutoRebuild(AutoRebuildSetting.DISABLED)
                    .withStage("engnpuelrnanbrpk")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zzc", response.properties().description());
        Assertions.assertEquals("ortdzzvhbu", response.properties().tags().get("kahophqwojdz"));
        Assertions.assertEquals("cdzfbvexrv", response.properties().properties().get("h"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals("ovelvsp", response.properties().image());
        Assertions.assertEquals("xjtezujtoudo", response.properties().condaFile());
        Assertions.assertEquals("x", response.properties().build().contextUri());
        Assertions.assertEquals("vssrj", response.properties().build().dockerfilePath());
        Assertions.assertEquals(OperatingSystemType.WINDOWS, response.properties().osType());
        Assertions.assertEquals("wemt", response.properties().inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(1587028677, response.properties().inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("ebymmcgskscbsx", response.properties().inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(297174289, response.properties().inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("xicjojxolknsh", response.properties().inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(307738924, response.properties().inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(AutoRebuildSetting.ON_BASE_IMAGE_UPDATE, response.properties().autoRebuild());
        Assertions.assertEquals("hmbglmnlbn", response.properties().stage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
