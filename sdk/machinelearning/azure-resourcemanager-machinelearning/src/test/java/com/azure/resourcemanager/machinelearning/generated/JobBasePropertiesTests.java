// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.IdentityConfiguration;
import com.azure.resourcemanager.machinelearning.models.JobBaseProperties;
import com.azure.resourcemanager.machinelearning.models.JobService;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobBasePropertiesTests {
    @Test
    public void testDeserialize() {
        JobBaseProperties model =
            BinaryData
                .fromString(
                    "{\"jobType\":\"JobBaseProperties\",\"componentId\":\"hzvhxnkomtkubo\",\"computeId\":\"pnvdxz\",\"displayName\":\"ihfrbbcevqa\",\"experimentName\":\"ltd\",\"identity\":{\"identityType\":\"IdentityConfiguration\"},\"isArchived\":false,\"services\":{\"fukiscvwmzhw\":{\"endpoint\":\"py\",\"errorMessage\":\"gtrd\",\"jobServiceType\":\"ifmzzsd\",\"port\":599707965,\"properties\":{\"ocxvdfffwafqr\":\"ysuxmprafwgck\",\"vkbunzozudh\":\"udaspavehh\",\"moy\":\"xg\",\"f\":\"cdyuibhmfdnbzyd\"},\"status\":\"cjnaeoisrvhmgor\"},\"ld\":{\"endpoint\":\"efaxvxilc\",\"errorMessage\":\"gnhnzeyq\",\"jobServiceType\":\"jjfzqlqhycavo\",\"port\":281911697,\"properties\":{\"iaa\":\"beesmieknlra\",\"agt\":\"iuagydwqfbylyrfg\"},\"status\":\"jocqwogfnzjvusf\"},\"mwotey\":{\"endpoint\":\"zuxylfsbtkadpyso\",\"errorMessage\":\"btgkbugrjqctoj\",\"jobServiceType\":\"isofieypefojyqd\",\"port\":219137261,\"properties\":{\"cwkhihi\":\"cp\",\"rgnowcjhfgm\":\"lhzdsqtzb\"},\"status\":\"cact\"}},\"status\":\"Canceled\",\"description\":\"uqovekqvgqouwif\",\"properties\":{\"yivqikfxcvhrfsp\":\"j\",\"kvyklxubyjaffmm\":\"uagrttikteusqc\"},\"tags\":{\"ubgq\":\"cqc\",\"metttwgd\":\"brta\",\"seypxiutcxapz\":\"lqxihhrmooiz\",\"petogebjox\":\"y\"}}")
                .toObject(JobBaseProperties.class);
        Assertions.assertEquals("uqovekqvgqouwif", model.description());
        Assertions.assertEquals("j", model.properties().get("yivqikfxcvhrfsp"));
        Assertions.assertEquals("cqc", model.tags().get("ubgq"));
        Assertions.assertEquals("hzvhxnkomtkubo", model.componentId());
        Assertions.assertEquals("pnvdxz", model.computeId());
        Assertions.assertEquals("ihfrbbcevqa", model.displayName());
        Assertions.assertEquals("ltd", model.experimentName());
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals("py", model.services().get("fukiscvwmzhw").endpoint());
        Assertions.assertEquals("ifmzzsd", model.services().get("fukiscvwmzhw").jobServiceType());
        Assertions.assertEquals(599707965, model.services().get("fukiscvwmzhw").port());
        Assertions
            .assertEquals("ysuxmprafwgck", model.services().get("fukiscvwmzhw").properties().get("ocxvdfffwafqr"));
    }

    @Test
    public void testSerialize() {
        JobBaseProperties model =
            new JobBaseProperties()
                .withDescription("uqovekqvgqouwif")
                .withProperties(mapOf("yivqikfxcvhrfsp", "j", "kvyklxubyjaffmm", "uagrttikteusqc"))
                .withTags(mapOf("ubgq", "cqc", "metttwgd", "brta", "seypxiutcxapz", "lqxihhrmooiz", "petogebjox", "y"))
                .withComponentId("hzvhxnkomtkubo")
                .withComputeId("pnvdxz")
                .withDisplayName("ihfrbbcevqa")
                .withExperimentName("ltd")
                .withIdentity(new IdentityConfiguration())
                .withIsArchived(false)
                .withServices(
                    mapOf(
                        "fukiscvwmzhw",
                        new JobService()
                            .withEndpoint("py")
                            .withJobServiceType("ifmzzsd")
                            .withPort(599707965)
                            .withProperties(
                                mapOf(
                                    "ocxvdfffwafqr",
                                    "ysuxmprafwgck",
                                    "vkbunzozudh",
                                    "udaspavehh",
                                    "moy",
                                    "xg",
                                    "f",
                                    "cdyuibhmfdnbzyd")),
                        "ld",
                        new JobService()
                            .withEndpoint("efaxvxilc")
                            .withJobServiceType("jjfzqlqhycavo")
                            .withPort(281911697)
                            .withProperties(mapOf("iaa", "beesmieknlra", "agt", "iuagydwqfbylyrfg")),
                        "mwotey",
                        new JobService()
                            .withEndpoint("zuxylfsbtkadpyso")
                            .withJobServiceType("isofieypefojyqd")
                            .withPort(219137261)
                            .withProperties(mapOf("cwkhihi", "cp", "rgnowcjhfgm", "lhzdsqtzb"))));
        model = BinaryData.fromObject(model).toObject(JobBaseProperties.class);
        Assertions.assertEquals("uqovekqvgqouwif", model.description());
        Assertions.assertEquals("j", model.properties().get("yivqikfxcvhrfsp"));
        Assertions.assertEquals("cqc", model.tags().get("ubgq"));
        Assertions.assertEquals("hzvhxnkomtkubo", model.componentId());
        Assertions.assertEquals("pnvdxz", model.computeId());
        Assertions.assertEquals("ihfrbbcevqa", model.displayName());
        Assertions.assertEquals("ltd", model.experimentName());
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals("py", model.services().get("fukiscvwmzhw").endpoint());
        Assertions.assertEquals("ifmzzsd", model.services().get("fukiscvwmzhw").jobServiceType());
        Assertions.assertEquals(599707965, model.services().get("fukiscvwmzhw").port());
        Assertions
            .assertEquals("ysuxmprafwgck", model.services().get("fukiscvwmzhw").properties().get("ocxvdfffwafqr"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
