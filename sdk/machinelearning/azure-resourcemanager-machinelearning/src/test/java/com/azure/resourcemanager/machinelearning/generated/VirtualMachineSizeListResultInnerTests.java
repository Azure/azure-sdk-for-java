// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.VirtualMachineSizeListResultInner;
import com.azure.resourcemanager.machinelearning.models.BillingCurrency;
import com.azure.resourcemanager.machinelearning.models.EstimatedVMPrices;
import com.azure.resourcemanager.machinelearning.models.UnitOfMeasure;
import com.azure.resourcemanager.machinelearning.models.VirtualMachineSize;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class VirtualMachineSizeListResultInnerTests {
    @Test
    public void testDeserialize() {
        VirtualMachineSizeListResultInner model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"name\":\"scpai\",\"family\":\"hhbcsglummajtjao\",\"vCPUs\":1555681942,\"gpus\":1341897858,\"osVhdSizeMB\":1455975978,\"maxResourceVolumeMB\":64161547,\"memoryGB\":58.66362913343964,\"lowPriorityCapable\":true,\"premiumIO\":true,\"estimatedVMPrices\":{\"billingCurrency\":\"USD\",\"unitOfMeasure\":\"OneHour\",\"values\":[]},\"supportedComputeTypes\":[\"mexgstxgcp\",\"dg\",\"aajrm\",\"djwzrlov\"]}]}")
                .toObject(VirtualMachineSizeListResultInner.class);
        Assertions.assertEquals(BillingCurrency.USD, model.value().get(0).estimatedVMPrices().billingCurrency());
        Assertions.assertEquals(UnitOfMeasure.ONE_HOUR, model.value().get(0).estimatedVMPrices().unitOfMeasure());
        Assertions.assertEquals("mexgstxgcp", model.value().get(0).supportedComputeTypes().get(0));
    }

    @Test
    public void testSerialize() {
        VirtualMachineSizeListResultInner model =
            new VirtualMachineSizeListResultInner()
                .withValue(
                    Arrays
                        .asList(
                            new VirtualMachineSize()
                                .withEstimatedVMPrices(
                                    new EstimatedVMPrices()
                                        .withBillingCurrency(BillingCurrency.USD)
                                        .withUnitOfMeasure(UnitOfMeasure.ONE_HOUR)
                                        .withValues(Arrays.asList()))
                                .withSupportedComputeTypes(Arrays.asList("mexgstxgcp", "dg", "aajrm", "djwzrlov"))));
        model = BinaryData.fromObject(model).toObject(VirtualMachineSizeListResultInner.class);
        Assertions.assertEquals(BillingCurrency.USD, model.value().get(0).estimatedVMPrices().billingCurrency());
        Assertions.assertEquals(UnitOfMeasure.ONE_HOUR, model.value().get(0).estimatedVMPrices().unitOfMeasure());
        Assertions.assertEquals("mexgstxgcp", model.value().get(0).supportedComputeTypes().get(0));
    }
}
