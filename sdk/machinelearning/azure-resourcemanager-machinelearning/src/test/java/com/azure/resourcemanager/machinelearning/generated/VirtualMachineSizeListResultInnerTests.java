// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.VirtualMachineSizeListResultInner;
import com.azure.resourcemanager.machinelearning.models.BillingCurrency;
import com.azure.resourcemanager.machinelearning.models.EstimatedVMPrice;
import com.azure.resourcemanager.machinelearning.models.EstimatedVMPrices;
import com.azure.resourcemanager.machinelearning.models.UnitOfMeasure;
import com.azure.resourcemanager.machinelearning.models.VirtualMachineSize;
import com.azure.resourcemanager.machinelearning.models.VMPriceOSType;
import com.azure.resourcemanager.machinelearning.models.VMTier;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineSizeListResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineSizeListResultInner model = BinaryData.fromString(
            "{\"value\":[{\"name\":\"ttgzfbis\",\"family\":\"bkh\",\"vCPUs\":2127806039,\"gpus\":1288949880,\"osVhdSizeMB\":38028181,\"maxResourceVolumeMB\":1859867828,\"memoryGB\":87.63753319479677,\"lowPriorityCapable\":true,\"premiumIO\":true,\"estimatedVMPrices\":{\"billingCurrency\":\"USD\",\"unitOfMeasure\":\"OneHour\",\"values\":[{\"retailPrice\":64.09894900073603,\"osType\":\"Windows\",\"vmTier\":\"Standard\"},{\"retailPrice\":79.35964206973047,\"osType\":\"Linux\",\"vmTier\":\"Standard\"},{\"retailPrice\":42.700623481202356,\"osType\":\"Windows\",\"vmTier\":\"LowPriority\"}]},\"supportedComputeTypes\":[\"ankixzbinjeput\",\"mryw\",\"uzoqft\"]},{\"name\":\"qzrnkcqvyxlwhz\",\"family\":\"icohoqqnwvl\",\"vCPUs\":137418501,\"gpus\":240696862,\"osVhdSizeMB\":989865410,\"maxResourceVolumeMB\":1111271416,\"memoryGB\":89.24862714636545,\"lowPriorityCapable\":true,\"premiumIO\":false,\"estimatedVMPrices\":{\"billingCurrency\":\"USD\",\"unitOfMeasure\":\"OneHour\",\"values\":[{\"retailPrice\":16.817525955184955,\"osType\":\"Windows\",\"vmTier\":\"Standard\"},{\"retailPrice\":34.762358205235685,\"osType\":\"Windows\",\"vmTier\":\"LowPriority\"}]},\"supportedComputeTypes\":[\"xuconu\",\"szfkbe\"]},{\"name\":\"ewrmjmwvvjektc\",\"family\":\"enhwlrs\",\"vCPUs\":1160903159,\"gpus\":1611937755,\"osVhdSizeMB\":88674605,\"maxResourceVolumeMB\":1497747183,\"memoryGB\":0.6800349373471626,\"lowPriorityCapable\":true,\"premiumIO\":true,\"estimatedVMPrices\":{\"billingCurrency\":\"USD\",\"unitOfMeasure\":\"OneHour\",\"values\":[{\"retailPrice\":75.88369080213783,\"osType\":\"Windows\",\"vmTier\":\"Spot\"}]},\"supportedComputeTypes\":[\"vfcivfsnkymuc\",\"qhjfbebr\",\"cxerf\"]}]}")
            .toObject(VirtualMachineSizeListResultInner.class);
        Assertions.assertEquals(BillingCurrency.USD, model.value().get(0).estimatedVMPrices().billingCurrency());
        Assertions.assertEquals(UnitOfMeasure.ONE_HOUR, model.value().get(0).estimatedVMPrices().unitOfMeasure());
        Assertions.assertEquals(64.09894900073603,
            model.value().get(0).estimatedVMPrices().values().get(0).retailPrice());
        Assertions.assertEquals(VMPriceOSType.WINDOWS,
            model.value().get(0).estimatedVMPrices().values().get(0).osType());
        Assertions.assertEquals(VMTier.STANDARD, model.value().get(0).estimatedVMPrices().values().get(0).vmTier());
        Assertions.assertEquals("ankixzbinjeput", model.value().get(0).supportedComputeTypes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineSizeListResultInner model = new VirtualMachineSizeListResultInner().withValue(Arrays.asList(
            new VirtualMachineSize()
                .withEstimatedVMPrices(new EstimatedVMPrices().withBillingCurrency(BillingCurrency.USD)
                    .withUnitOfMeasure(UnitOfMeasure.ONE_HOUR)
                    .withValues(Arrays.asList(
                        new EstimatedVMPrice().withRetailPrice(64.09894900073603)
                            .withOsType(VMPriceOSType.WINDOWS)
                            .withVmTier(VMTier.STANDARD),
                        new EstimatedVMPrice().withRetailPrice(79.35964206973047)
                            .withOsType(VMPriceOSType.LINUX)
                            .withVmTier(VMTier.STANDARD),
                        new EstimatedVMPrice().withRetailPrice(42.700623481202356)
                            .withOsType(VMPriceOSType.WINDOWS)
                            .withVmTier(VMTier.LOW_PRIORITY))))
                .withSupportedComputeTypes(Arrays.asList("ankixzbinjeput", "mryw", "uzoqft")),
            new VirtualMachineSize()
                .withEstimatedVMPrices(new EstimatedVMPrices().withBillingCurrency(BillingCurrency.USD)
                    .withUnitOfMeasure(UnitOfMeasure.ONE_HOUR)
                    .withValues(Arrays.asList(
                        new EstimatedVMPrice().withRetailPrice(16.817525955184955)
                            .withOsType(VMPriceOSType.WINDOWS)
                            .withVmTier(VMTier.STANDARD),
                        new EstimatedVMPrice().withRetailPrice(34.762358205235685)
                            .withOsType(VMPriceOSType.WINDOWS)
                            .withVmTier(VMTier.LOW_PRIORITY))))
                .withSupportedComputeTypes(Arrays.asList("xuconu", "szfkbe")),
            new VirtualMachineSize()
                .withEstimatedVMPrices(new EstimatedVMPrices().withBillingCurrency(BillingCurrency.USD)
                    .withUnitOfMeasure(UnitOfMeasure.ONE_HOUR)
                    .withValues(Arrays.asList(new EstimatedVMPrice().withRetailPrice(75.88369080213783)
                        .withOsType(VMPriceOSType.WINDOWS)
                        .withVmTier(VMTier.SPOT))))
                .withSupportedComputeTypes(Arrays.asList("vfcivfsnkymuc", "qhjfbebr", "cxerf"))));
        model = BinaryData.fromObject(model).toObject(VirtualMachineSizeListResultInner.class);
        Assertions.assertEquals(BillingCurrency.USD, model.value().get(0).estimatedVMPrices().billingCurrency());
        Assertions.assertEquals(UnitOfMeasure.ONE_HOUR, model.value().get(0).estimatedVMPrices().unitOfMeasure());
        Assertions.assertEquals(64.09894900073603,
            model.value().get(0).estimatedVMPrices().values().get(0).retailPrice());
        Assertions.assertEquals(VMPriceOSType.WINDOWS,
            model.value().get(0).estimatedVMPrices().values().get(0).osType());
        Assertions.assertEquals(VMTier.STANDARD, model.value().get(0).estimatedVMPrices().values().get(0).vmTier());
        Assertions.assertEquals("ankixzbinjeput", model.value().get(0).supportedComputeTypes().get(0));
    }
}
