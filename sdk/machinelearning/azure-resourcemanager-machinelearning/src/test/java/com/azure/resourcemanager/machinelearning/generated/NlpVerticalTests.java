// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NlpVertical;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalLimitSettings;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class NlpVerticalTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NlpVertical model = BinaryData.fromString(
            "{\"limitSettings\":{\"timeout\":\"PT133H10M21S\",\"maxTrials\":730548786,\"maxConcurrentTrials\":450987294},\"featurizationSettings\":{\"datasetLanguage\":\"qlngncrdorctysec\"},\"validationData\":{\"jobInputType\":\"mltable\",\"uri\":\"khxd\",\"mode\":\"ReadOnlyMount\",\"description\":\"tzcvimmwckoz\"}}")
            .toObject(NlpVertical.class);
        Assertions.assertEquals(Duration.parse("PT133H10M21S"), model.limitSettings().timeout());
        Assertions.assertEquals(730548786, model.limitSettings().maxTrials());
        Assertions.assertEquals(450987294, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals("qlngncrdorctysec", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals("tzcvimmwckoz", model.validationData().description());
        Assertions.assertEquals("khxd", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.validationData().mode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NlpVertical model = new NlpVertical()
            .withLimitSettings(new NlpVerticalLimitSettings().withTimeout(Duration.parse("PT133H10M21S"))
                .withMaxTrials(730548786)
                .withMaxConcurrentTrials(450987294))
            .withFeaturizationSettings(new NlpVerticalFeaturizationSettings().withDatasetLanguage("qlngncrdorctysec"))
            .withValidationData(new MLTableJobInput().withDescription("tzcvimmwckoz")
                .withUri("khxd")
                .withMode(InputDeliveryMode.READ_ONLY_MOUNT));
        model = BinaryData.fromObject(model).toObject(NlpVertical.class);
        Assertions.assertEquals(Duration.parse("PT133H10M21S"), model.limitSettings().timeout());
        Assertions.assertEquals(730548786, model.limitSettings().maxTrials());
        Assertions.assertEquals(450987294, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals("qlngncrdorctysec", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals("tzcvimmwckoz", model.validationData().description());
        Assertions.assertEquals("khxd", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.validationData().mode());
    }
}
