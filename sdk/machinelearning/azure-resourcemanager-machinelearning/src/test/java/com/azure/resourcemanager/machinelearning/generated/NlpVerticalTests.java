// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NlpVertical;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalLimitSettings;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class NlpVerticalTests {
    @Test
    public void testDeserialize() {
        NlpVertical model =
            BinaryData
                .fromString(
                    "{\"featurizationSettings\":{\"datasetLanguage\":\"pumltwjfluxynbp\"},\"limitSettings\":{\"maxConcurrentTrials\":496902378,\"maxTrials\":411909780,\"timeout\":\"PT35H33M48S\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"EvalMount\",\"uri\":\"jckhmocgj\",\"description\":\"gouarhwvixqq\"}}")
                .toObject(NlpVertical.class);
        Assertions.assertEquals("pumltwjfluxynbp", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(496902378, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(411909780, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT35H33M48S"), model.limitSettings().timeout());
        Assertions.assertEquals("gouarhwvixqq", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.validationData().mode());
        Assertions.assertEquals("jckhmocgj", model.validationData().uri());
    }

    @Test
    public void testSerialize() {
        NlpVertical model =
            new NlpVertical()
                .withFeaturizationSettings(
                    new NlpVerticalFeaturizationSettings().withDatasetLanguage("pumltwjfluxynbp"))
                .withLimitSettings(
                    new NlpVerticalLimitSettings()
                        .withMaxConcurrentTrials(496902378)
                        .withMaxTrials(411909780)
                        .withTimeout(Duration.parse("PT35H33M48S")))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("gouarhwvixqq")
                        .withMode(InputDeliveryMode.EVAL_MOUNT)
                        .withUri("jckhmocgj"));
        model = BinaryData.fromObject(model).toObject(NlpVertical.class);
        Assertions.assertEquals("pumltwjfluxynbp", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(496902378, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(411909780, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT35H33M48S"), model.limitSettings().timeout());
        Assertions.assertEquals("gouarhwvixqq", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.validationData().mode());
        Assertions.assertEquals("jckhmocgj", model.validationData().uri());
    }
}
