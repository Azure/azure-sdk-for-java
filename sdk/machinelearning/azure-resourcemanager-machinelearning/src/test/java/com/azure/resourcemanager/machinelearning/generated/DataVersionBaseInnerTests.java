// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.DataVersionBaseInner;
import com.azure.resourcemanager.machinelearning.models.DataVersionBaseProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DataVersionBaseInnerTests {
    @Test
    public void testDeserialize() {
        DataVersionBaseInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"dataType\":\"DataVersionBaseProperties\",\"dataUri\":\"aeqphchqnr\",\"isAnonymous\":true,\"isArchived\":true,\"description\":\"uwrykqgaifmvikl\",\"properties\":{\"vdsrhnjiv\":\"vkhbejdznx\"},\"tags\":{\"ltducea\":\"tnovqfzgemjdftul\"}},\"id\":\"mczuo\",\"name\":\"ejwcwwqiok\",\"type\":\"ssxmojms\"}")
                .toObject(DataVersionBaseInner.class);
        Assertions.assertEquals("uwrykqgaifmvikl", model.properties().description());
        Assertions.assertEquals("vkhbejdznx", model.properties().properties().get("vdsrhnjiv"));
        Assertions.assertEquals("tnovqfzgemjdftul", model.properties().tags().get("ltducea"));
        Assertions.assertEquals(true, model.properties().isAnonymous());
        Assertions.assertEquals(true, model.properties().isArchived());
        Assertions.assertEquals("aeqphchqnr", model.properties().dataUri());
    }

    @Test
    public void testSerialize() {
        DataVersionBaseInner model =
            new DataVersionBaseInner()
                .withProperties(
                    new DataVersionBaseProperties()
                        .withDescription("uwrykqgaifmvikl")
                        .withProperties(mapOf("vdsrhnjiv", "vkhbejdznx"))
                        .withTags(mapOf("ltducea", "tnovqfzgemjdftul"))
                        .withIsAnonymous(true)
                        .withIsArchived(true)
                        .withDataUri("aeqphchqnr"));
        model = BinaryData.fromObject(model).toObject(DataVersionBaseInner.class);
        Assertions.assertEquals("uwrykqgaifmvikl", model.properties().description());
        Assertions.assertEquals("vkhbejdznx", model.properties().properties().get("vdsrhnjiv"));
        Assertions.assertEquals("tnovqfzgemjdftul", model.properties().tags().get("ltducea"));
        Assertions.assertEquals(true, model.properties().isAnonymous());
        Assertions.assertEquals(true, model.properties().isArchived());
        Assertions.assertEquals("aeqphchqnr", model.properties().dataUri());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
