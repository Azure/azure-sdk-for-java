// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsClassification;
import org.junit.jupiter.api.Assertions;

public final class ImageModelDistributionSettingsClassificationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageModelDistributionSettingsClassification model = BinaryData.fromString(
            "{\"trainingCropSize\":\"xmmqmt\",\"validationCropSize\":\"ky\",\"validationResizeSize\":\"exwdonbexf\",\"weightedLoss\":\"daubheeggzgr\",\"amsGradient\":\"tlfozuumrtgjqgac\",\"augmentations\":\"tnsyxzxjm\",\"beta1\":\"nb\",\"beta2\":\"azofm\",\"distributed\":\"vtemaspmanydscdk\",\"earlyStopping\":\"dpwjcbhaahntof\",\"earlyStoppingDelay\":\"fh\",\"earlyStoppingPatience\":\"ixo\",\"evaluationFrequency\":\"kzdfiv\",\"enableOnnxNormalization\":\"jybsrwz\",\"gradientAccumulationStep\":\"rgt\",\"layersToFreeze\":\"hmfppinmgi\",\"learningRate\":\"smkw\",\"learningRateScheduler\":\"gfragjhxerxlobkd\",\"modelName\":\"qhvmmniiqy\",\"momentum\":\"lhjnskbggicnqwl\",\"nesterov\":\"m\",\"numberOfEpochs\":\"blxk\",\"numberOfWorkers\":\"qgvxrktjcjigcw\",\"optimizer\":\"panbqxasevc\",\"randomSeed\":\"fp\",\"stepLRGamma\":\"edyybruholaemwcg\",\"stepLRStepSize\":\"mrimaabsqql\",\"trainingBatchSize\":\"b\",\"validationBatchSize\":\"ow\",\"warmupCosineLRCycles\":\"hdkmbjsmihrijezb\",\"warmupCosineLRWarmupEpochs\":\"jwfcz\",\"weightDecay\":\"kvb\"}")
            .toObject(ImageModelDistributionSettingsClassification.class);
        Assertions.assertEquals("tlfozuumrtgjqgac", model.amsGradient());
        Assertions.assertEquals("tnsyxzxjm", model.augmentations());
        Assertions.assertEquals("nb", model.beta1());
        Assertions.assertEquals("azofm", model.beta2());
        Assertions.assertEquals("vtemaspmanydscdk", model.distributed());
        Assertions.assertEquals("dpwjcbhaahntof", model.earlyStopping());
        Assertions.assertEquals("fh", model.earlyStoppingDelay());
        Assertions.assertEquals("ixo", model.earlyStoppingPatience());
        Assertions.assertEquals("kzdfiv", model.evaluationFrequency());
        Assertions.assertEquals("jybsrwz", model.enableOnnxNormalization());
        Assertions.assertEquals("rgt", model.gradientAccumulationStep());
        Assertions.assertEquals("hmfppinmgi", model.layersToFreeze());
        Assertions.assertEquals("smkw", model.learningRate());
        Assertions.assertEquals("gfragjhxerxlobkd", model.learningRateScheduler());
        Assertions.assertEquals("qhvmmniiqy", model.modelName());
        Assertions.assertEquals("lhjnskbggicnqwl", model.momentum());
        Assertions.assertEquals("m", model.nesterov());
        Assertions.assertEquals("blxk", model.numberOfEpochs());
        Assertions.assertEquals("qgvxrktjcjigcw", model.numberOfWorkers());
        Assertions.assertEquals("panbqxasevc", model.optimizer());
        Assertions.assertEquals("fp", model.randomSeed());
        Assertions.assertEquals("edyybruholaemwcg", model.stepLRGamma());
        Assertions.assertEquals("mrimaabsqql", model.stepLRStepSize());
        Assertions.assertEquals("b", model.trainingBatchSize());
        Assertions.assertEquals("ow", model.validationBatchSize());
        Assertions.assertEquals("hdkmbjsmihrijezb", model.warmupCosineLRCycles());
        Assertions.assertEquals("jwfcz", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("kvb", model.weightDecay());
        Assertions.assertEquals("xmmqmt", model.trainingCropSize());
        Assertions.assertEquals("ky", model.validationCropSize());
        Assertions.assertEquals("exwdonbexf", model.validationResizeSize());
        Assertions.assertEquals("daubheeggzgr", model.weightedLoss());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageModelDistributionSettingsClassification model
            = new ImageModelDistributionSettingsClassification().withAmsGradient("tlfozuumrtgjqgac")
                .withAugmentations("tnsyxzxjm")
                .withBeta1("nb")
                .withBeta2("azofm")
                .withDistributed("vtemaspmanydscdk")
                .withEarlyStopping("dpwjcbhaahntof")
                .withEarlyStoppingDelay("fh")
                .withEarlyStoppingPatience("ixo")
                .withEvaluationFrequency("kzdfiv")
                .withEnableOnnxNormalization("jybsrwz")
                .withGradientAccumulationStep("rgt")
                .withLayersToFreeze("hmfppinmgi")
                .withLearningRate("smkw")
                .withLearningRateScheduler("gfragjhxerxlobkd")
                .withModelName("qhvmmniiqy")
                .withMomentum("lhjnskbggicnqwl")
                .withNesterov("m")
                .withNumberOfEpochs("blxk")
                .withNumberOfWorkers("qgvxrktjcjigcw")
                .withOptimizer("panbqxasevc")
                .withRandomSeed("fp")
                .withStepLRGamma("edyybruholaemwcg")
                .withStepLRStepSize("mrimaabsqql")
                .withTrainingBatchSize("b")
                .withValidationBatchSize("ow")
                .withWarmupCosineLRCycles("hdkmbjsmihrijezb")
                .withWarmupCosineLRWarmupEpochs("jwfcz")
                .withWeightDecay("kvb")
                .withTrainingCropSize("xmmqmt")
                .withValidationCropSize("ky")
                .withValidationResizeSize("exwdonbexf")
                .withWeightedLoss("daubheeggzgr");
        model = BinaryData.fromObject(model).toObject(ImageModelDistributionSettingsClassification.class);
        Assertions.assertEquals("tlfozuumrtgjqgac", model.amsGradient());
        Assertions.assertEquals("tnsyxzxjm", model.augmentations());
        Assertions.assertEquals("nb", model.beta1());
        Assertions.assertEquals("azofm", model.beta2());
        Assertions.assertEquals("vtemaspmanydscdk", model.distributed());
        Assertions.assertEquals("dpwjcbhaahntof", model.earlyStopping());
        Assertions.assertEquals("fh", model.earlyStoppingDelay());
        Assertions.assertEquals("ixo", model.earlyStoppingPatience());
        Assertions.assertEquals("kzdfiv", model.evaluationFrequency());
        Assertions.assertEquals("jybsrwz", model.enableOnnxNormalization());
        Assertions.assertEquals("rgt", model.gradientAccumulationStep());
        Assertions.assertEquals("hmfppinmgi", model.layersToFreeze());
        Assertions.assertEquals("smkw", model.learningRate());
        Assertions.assertEquals("gfragjhxerxlobkd", model.learningRateScheduler());
        Assertions.assertEquals("qhvmmniiqy", model.modelName());
        Assertions.assertEquals("lhjnskbggicnqwl", model.momentum());
        Assertions.assertEquals("m", model.nesterov());
        Assertions.assertEquals("blxk", model.numberOfEpochs());
        Assertions.assertEquals("qgvxrktjcjigcw", model.numberOfWorkers());
        Assertions.assertEquals("panbqxasevc", model.optimizer());
        Assertions.assertEquals("fp", model.randomSeed());
        Assertions.assertEquals("edyybruholaemwcg", model.stepLRGamma());
        Assertions.assertEquals("mrimaabsqql", model.stepLRStepSize());
        Assertions.assertEquals("b", model.trainingBatchSize());
        Assertions.assertEquals("ow", model.validationBatchSize());
        Assertions.assertEquals("hdkmbjsmihrijezb", model.warmupCosineLRCycles());
        Assertions.assertEquals("jwfcz", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("kvb", model.weightDecay());
        Assertions.assertEquals("xmmqmt", model.trainingCropSize());
        Assertions.assertEquals("ky", model.validationCropSize());
        Assertions.assertEquals("exwdonbexf", model.validationResizeSize());
        Assertions.assertEquals("daubheeggzgr", model.weightedLoss());
    }
}
