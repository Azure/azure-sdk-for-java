// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsClassification;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageModelDistributionSettingsClassificationTests {
    @Test
    public void testDeserialize() {
        ImageModelDistributionSettingsClassification model =
            BinaryData
                .fromString(
                    "{\"trainingCropSize\":\"idhftu\",\"validationCropSize\":\"hdxlw\",\"validationResizeSize\":\"jbfqzdk\",\"weightedLoss\":\"jyixhaf\",\"amsGradient\":\"tqxmbj\",\"augmentations\":\"umzznvalqjrhuz\",\"beta1\":\"xonjtpusl\",\"beta2\":\"wpvtiotzbpdbol\",\"distributed\":\"ryf\",\"earlyStopping\":\"uasigr\",\"earlyStoppingDelay\":\"socnequygdjboq\",\"earlyStoppingPatience\":\"mtqjkqevadrmm\",\"enableOnnxNormalization\":\"uawvcmjzk\",\"evaluationFrequency\":\"idisczskosw\",\"gradientAccumulationStep\":\"iqazugamxzkr\",\"layersToFreeze\":\"oiisbamnppcce\",\"learningRate\":\"ztdsbeza\",\"learningRateScheduler\":\"f\",\"modelName\":\"zxuizhyhnepkpe\",\"momentum\":\"arxqiubx\",\"nesterov\":\"kecpxdazvdh\",\"numberOfEpochs\":\"mmkoszudb\",\"numberOfWorkers\":\"s\",\"optimizer\":\"rpcaqkiofkbtf\",\"randomSeed\":\"kl\",\"stepLRGamma\":\"l\",\"stepLRStepSize\":\"vcb\",\"trainingBatchSize\":\"ezyquw\",\"validationBatchSize\":\"qxutrpbrruyuua\",\"warmupCosineLRCycles\":\"lmbjwcolbmxlbnw\",\"warmupCosineLRWarmupEpochs\":\"cpahprzrvxhm\",\"weightDecay\":\"hocn\"}")
                .toObject(ImageModelDistributionSettingsClassification.class);
        Assertions.assertEquals("tqxmbj", model.amsGradient());
        Assertions.assertEquals("umzznvalqjrhuz", model.augmentations());
        Assertions.assertEquals("xonjtpusl", model.beta1());
        Assertions.assertEquals("wpvtiotzbpdbol", model.beta2());
        Assertions.assertEquals("ryf", model.distributed());
        Assertions.assertEquals("uasigr", model.earlyStopping());
        Assertions.assertEquals("socnequygdjboq", model.earlyStoppingDelay());
        Assertions.assertEquals("mtqjkqevadrmm", model.earlyStoppingPatience());
        Assertions.assertEquals("uawvcmjzk", model.enableOnnxNormalization());
        Assertions.assertEquals("idisczskosw", model.evaluationFrequency());
        Assertions.assertEquals("iqazugamxzkr", model.gradientAccumulationStep());
        Assertions.assertEquals("oiisbamnppcce", model.layersToFreeze());
        Assertions.assertEquals("ztdsbeza", model.learningRate());
        Assertions.assertEquals("f", model.learningRateScheduler());
        Assertions.assertEquals("zxuizhyhnepkpe", model.modelName());
        Assertions.assertEquals("arxqiubx", model.momentum());
        Assertions.assertEquals("kecpxdazvdh", model.nesterov());
        Assertions.assertEquals("mmkoszudb", model.numberOfEpochs());
        Assertions.assertEquals("s", model.numberOfWorkers());
        Assertions.assertEquals("rpcaqkiofkbtf", model.optimizer());
        Assertions.assertEquals("kl", model.randomSeed());
        Assertions.assertEquals("l", model.stepLRGamma());
        Assertions.assertEquals("vcb", model.stepLRStepSize());
        Assertions.assertEquals("ezyquw", model.trainingBatchSize());
        Assertions.assertEquals("qxutrpbrruyuua", model.validationBatchSize());
        Assertions.assertEquals("lmbjwcolbmxlbnw", model.warmupCosineLRCycles());
        Assertions.assertEquals("cpahprzrvxhm", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("hocn", model.weightDecay());
        Assertions.assertEquals("idhftu", model.trainingCropSize());
        Assertions.assertEquals("hdxlw", model.validationCropSize());
        Assertions.assertEquals("jbfqzdk", model.validationResizeSize());
        Assertions.assertEquals("jyixhaf", model.weightedLoss());
    }

    @Test
    public void testSerialize() {
        ImageModelDistributionSettingsClassification model =
            new ImageModelDistributionSettingsClassification()
                .withAmsGradient("tqxmbj")
                .withAugmentations("umzznvalqjrhuz")
                .withBeta1("xonjtpusl")
                .withBeta2("wpvtiotzbpdbol")
                .withDistributed("ryf")
                .withEarlyStopping("uasigr")
                .withEarlyStoppingDelay("socnequygdjboq")
                .withEarlyStoppingPatience("mtqjkqevadrmm")
                .withEnableOnnxNormalization("uawvcmjzk")
                .withEvaluationFrequency("idisczskosw")
                .withGradientAccumulationStep("iqazugamxzkr")
                .withLayersToFreeze("oiisbamnppcce")
                .withLearningRate("ztdsbeza")
                .withLearningRateScheduler("f")
                .withModelName("zxuizhyhnepkpe")
                .withMomentum("arxqiubx")
                .withNesterov("kecpxdazvdh")
                .withNumberOfEpochs("mmkoszudb")
                .withNumberOfWorkers("s")
                .withOptimizer("rpcaqkiofkbtf")
                .withRandomSeed("kl")
                .withStepLRGamma("l")
                .withStepLRStepSize("vcb")
                .withTrainingBatchSize("ezyquw")
                .withValidationBatchSize("qxutrpbrruyuua")
                .withWarmupCosineLRCycles("lmbjwcolbmxlbnw")
                .withWarmupCosineLRWarmupEpochs("cpahprzrvxhm")
                .withWeightDecay("hocn")
                .withTrainingCropSize("idhftu")
                .withValidationCropSize("hdxlw")
                .withValidationResizeSize("jbfqzdk")
                .withWeightedLoss("jyixhaf");
        model = BinaryData.fromObject(model).toObject(ImageModelDistributionSettingsClassification.class);
        Assertions.assertEquals("tqxmbj", model.amsGradient());
        Assertions.assertEquals("umzznvalqjrhuz", model.augmentations());
        Assertions.assertEquals("xonjtpusl", model.beta1());
        Assertions.assertEquals("wpvtiotzbpdbol", model.beta2());
        Assertions.assertEquals("ryf", model.distributed());
        Assertions.assertEquals("uasigr", model.earlyStopping());
        Assertions.assertEquals("socnequygdjboq", model.earlyStoppingDelay());
        Assertions.assertEquals("mtqjkqevadrmm", model.earlyStoppingPatience());
        Assertions.assertEquals("uawvcmjzk", model.enableOnnxNormalization());
        Assertions.assertEquals("idisczskosw", model.evaluationFrequency());
        Assertions.assertEquals("iqazugamxzkr", model.gradientAccumulationStep());
        Assertions.assertEquals("oiisbamnppcce", model.layersToFreeze());
        Assertions.assertEquals("ztdsbeza", model.learningRate());
        Assertions.assertEquals("f", model.learningRateScheduler());
        Assertions.assertEquals("zxuizhyhnepkpe", model.modelName());
        Assertions.assertEquals("arxqiubx", model.momentum());
        Assertions.assertEquals("kecpxdazvdh", model.nesterov());
        Assertions.assertEquals("mmkoszudb", model.numberOfEpochs());
        Assertions.assertEquals("s", model.numberOfWorkers());
        Assertions.assertEquals("rpcaqkiofkbtf", model.optimizer());
        Assertions.assertEquals("kl", model.randomSeed());
        Assertions.assertEquals("l", model.stepLRGamma());
        Assertions.assertEquals("vcb", model.stepLRStepSize());
        Assertions.assertEquals("ezyquw", model.trainingBatchSize());
        Assertions.assertEquals("qxutrpbrruyuua", model.validationBatchSize());
        Assertions.assertEquals("lmbjwcolbmxlbnw", model.warmupCosineLRCycles());
        Assertions.assertEquals("cpahprzrvxhm", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("hocn", model.weightDecay());
        Assertions.assertEquals("idhftu", model.trainingCropSize());
        Assertions.assertEquals("hdxlw", model.validationCropSize());
        Assertions.assertEquals("jbfqzdk", model.validationResizeSize());
        Assertions.assertEquals("jyixhaf", model.weightedLoss());
    }
}
