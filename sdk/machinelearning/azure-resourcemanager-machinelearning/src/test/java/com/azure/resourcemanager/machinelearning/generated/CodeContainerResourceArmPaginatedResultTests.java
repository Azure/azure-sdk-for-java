// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.CodeContainerInner;
import com.azure.resourcemanager.machinelearning.models.CodeContainerProperties;
import com.azure.resourcemanager.machinelearning.models.CodeContainerResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class CodeContainerResourceArmPaginatedResultTests {
    @Test
    public void testDeserialize() {
        CodeContainerResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"bvdkcrodtjin\",\"value\":[{\"properties\":{\"isArchived\":false,\"latestVersion\":\"tkacj\",\"nextVersion\":\"f\",\"description\":\"lfoakg\",\"properties\":{},\"tags\":{}},\"id\":\"agaowpulpqblylsy\",\"name\":\"k\",\"type\":\"jnsjervtiagxsd\"},{\"properties\":{\"isArchived\":false,\"latestVersion\":\"mpsbzkfzbeyv\",\"nextVersion\":\"qi\",\"description\":\"invkjjxdxrbuu\",\"properties\":{},\"tags\":{}},\"id\":\"ewyhml\",\"name\":\"paztzpofncck\",\"type\":\"yfzqwhxxbu\"},{\"properties\":{\"isArchived\":false,\"latestVersion\":\"zfeqztppri\",\"nextVersion\":\"xorjaltolmncwsob\",\"description\":\"csdbnwdcfhuc\",\"properties\":{},\"tags\":{}},\"id\":\"uvglsbjjcanvx\",\"name\":\"vtvudutncormr\",\"type\":\"xqtvcofu\"},{\"properties\":{\"isArchived\":false,\"latestVersion\":\"kgjubgdknnqvsazn\",\"nextVersion\":\"tor\",\"description\":\"sgsahmkycgr\",\"properties\":{},\"tags\":{}},\"id\":\"uetae\",\"name\":\"uruv\",\"type\":\"movsmzlxwabmqoe\"}]}")
                .toObject(CodeContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("bvdkcrodtjin", model.nextLink());
        Assertions.assertEquals("lfoakg", model.value().get(0).properties().description());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @Test
    public void testSerialize() {
        CodeContainerResourceArmPaginatedResult model =
            new CodeContainerResourceArmPaginatedResult()
                .withNextLink("bvdkcrodtjin")
                .withValue(
                    Arrays
                        .asList(
                            new CodeContainerInner()
                                .withProperties(
                                    new CodeContainerProperties()
                                        .withDescription("lfoakg")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false)),
                            new CodeContainerInner()
                                .withProperties(
                                    new CodeContainerProperties()
                                        .withDescription("invkjjxdxrbuu")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false)),
                            new CodeContainerInner()
                                .withProperties(
                                    new CodeContainerProperties()
                                        .withDescription("csdbnwdcfhuc")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false)),
                            new CodeContainerInner()
                                .withProperties(
                                    new CodeContainerProperties()
                                        .withDescription("sgsahmkycgr")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false))));
        model = BinaryData.fromObject(model).toObject(CodeContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("bvdkcrodtjin", model.nextLink());
        Assertions.assertEquals("lfoakg", model.value().get(0).properties().description());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
