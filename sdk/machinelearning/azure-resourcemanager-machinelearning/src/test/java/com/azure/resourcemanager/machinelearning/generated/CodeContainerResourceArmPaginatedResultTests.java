// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.CodeContainerInner;
import com.azure.resourcemanager.machinelearning.models.CodeContainerProperties;
import com.azure.resourcemanager.machinelearning.models.CodeContainerResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CodeContainerResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CodeContainerResourceArmPaginatedResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"isArchived\":false,\"latestVersion\":\"mzqa\",\"nextVersion\":\"rmnjijpx\",\"description\":\"q\",\"tags\":{\"yxbaaabjyvayf\":\"fn\",\"exn\":\"imrzrtuzqog\",\"zsoibjudpfrxtr\":\"vfdnwnwmewzsyyce\",\"ytdw\":\"hzv\"},\"properties\":{\"vpdtiirqtdqoa\":\"rqubpaxhexiil\",\"eptra\":\"oruzfgsquyfxrxx\"}},\"id\":\"jezwlwnw\",\"name\":\"uqlcvydy\",\"type\":\"atdooaojkniod\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"isArchived\":false,\"latestVersion\":\"nuj\",\"nextVersion\":\"mmsbvdkcrodtjin\",\"description\":\"jlfltkacjvefkdlf\",\"tags\":{\"qblylsyxkqj\":\"ggkfpagaowpul\",\"gxsds\":\"sjervti\"},\"properties\":{\"nqicvinvkjjxdxrb\":\"mpsbzkfzbeyv\"}},\"id\":\"kzclewyh\",\"name\":\"lw\",\"type\":\"aztz\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"isArchived\":true,\"latestVersion\":\"kwyfzqwhxxbuyqax\",\"nextVersion\":\"eqz\",\"description\":\"priolx\",\"tags\":{\"ncwsob\":\"altol\",\"pfuvglsbjjca\":\"wcsdbnwdcfhucq\",\"t\":\"vxb\"},\"properties\":{\"lxqtvcofudfl\":\"utncorm\"}},\"id\":\"gj\",\"name\":\"bgdknnqv\",\"type\":\"aznqntoru\"}],\"nextLink\":\"gsahmkycgrauw\"}")
            .toObject(CodeContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("q", model.value().get(0).properties().description());
        Assertions.assertEquals("fn", model.value().get(0).properties().tags().get("yxbaaabjyvayf"));
        Assertions.assertEquals("rqubpaxhexiil", model.value().get(0).properties().properties().get("vpdtiirqtdqoa"));
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
        Assertions.assertEquals("gsahmkycgrauw", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CodeContainerResourceArmPaginatedResult model
            = new CodeContainerResourceArmPaginatedResult().withValue(Arrays.asList(
                new CodeContainerInner().withProperties(new CodeContainerProperties().withDescription("q")
                    .withTags(mapOf("yxbaaabjyvayf", "fn", "exn", "imrzrtuzqog", "zsoibjudpfrxtr", "vfdnwnwmewzsyyce",
                        "ytdw", "hzv"))
                    .withProperties(mapOf("vpdtiirqtdqoa", "rqubpaxhexiil", "eptra", "oruzfgsquyfxrxx"))
                    .withIsArchived(false)),
                new CodeContainerInner()
                    .withProperties(new CodeContainerProperties().withDescription("jlfltkacjvefkdlf")
                        .withTags(mapOf("qblylsyxkqj", "ggkfpagaowpul", "gxsds", "sjervti"))
                        .withProperties(mapOf("nqicvinvkjjxdxrb", "mpsbzkfzbeyv"))
                        .withIsArchived(false)),
                new CodeContainerInner().withProperties(new CodeContainerProperties().withDescription("priolx")
                    .withTags(mapOf("ncwsob", "altol", "pfuvglsbjjca", "wcsdbnwdcfhucq", "t", "vxb"))
                    .withProperties(mapOf("lxqtvcofudfl", "utncorm"))
                    .withIsArchived(true))))
                .withNextLink("gsahmkycgrauw");
        model = BinaryData.fromObject(model).toObject(CodeContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("q", model.value().get(0).properties().description());
        Assertions.assertEquals("fn", model.value().get(0).properties().tags().get("yxbaaabjyvayf"));
        Assertions.assertEquals("rqubpaxhexiil", model.value().get(0).properties().properties().get("vpdtiirqtdqoa"));
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
        Assertions.assertEquals("gsahmkycgrauw", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
