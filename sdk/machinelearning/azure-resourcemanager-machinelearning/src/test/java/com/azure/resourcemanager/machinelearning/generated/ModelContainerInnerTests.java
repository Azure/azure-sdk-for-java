// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ModelContainerInner;
import com.azure.resourcemanager.machinelearning.models.ModelContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ModelContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ModelContainerInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"isArchived\":false,\"latestVersion\":\"yrxpdlcgqls\",\"nextVersion\":\"mjqfrddgamquhio\",\"description\":\"sjuivfcdisyir\",\"tags\":{\"xrxzbujrtr\":\"hcz\",\"khgn\":\"qvwre\",\"piqywnc\":\"nzonzl\",\"zehtdhgb\":\"jtszcof\"},\"properties\":{\"zmlovuanash\":\"reljeamur\",\"erbdk\":\"xlpm\"}},\"id\":\"vidizozsdb\",\"name\":\"cxjmonfdgnwncyp\",\"type\":\"uwwltvuqjctz\"}")
            .toObject(ModelContainerInner.class);
        Assertions.assertEquals("sjuivfcdisyir", model.properties().description());
        Assertions.assertEquals("hcz", model.properties().tags().get("xrxzbujrtr"));
        Assertions.assertEquals("reljeamur", model.properties().properties().get("zmlovuanash"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ModelContainerInner model
            = new ModelContainerInner().withProperties(new ModelContainerProperties().withDescription("sjuivfcdisyir")
                .withTags(mapOf("xrxzbujrtr", "hcz", "khgn", "qvwre", "piqywnc", "nzonzl", "zehtdhgb", "jtszcof"))
                .withProperties(mapOf("zmlovuanash", "reljeamur", "erbdk", "xlpm"))
                .withIsArchived(false));
        model = BinaryData.fromObject(model).toObject(ModelContainerInner.class);
        Assertions.assertEquals("sjuivfcdisyir", model.properties().description());
        Assertions.assertEquals("hcz", model.properties().tags().get("xrxzbujrtr"));
        Assertions.assertEquals("reljeamur", model.properties().properties().get("zmlovuanash"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
