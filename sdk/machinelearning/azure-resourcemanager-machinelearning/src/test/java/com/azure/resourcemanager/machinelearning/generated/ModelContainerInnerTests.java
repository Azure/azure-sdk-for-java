// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ModelContainerInner;
import com.azure.resourcemanager.machinelearning.models.ModelContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ModelContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ModelContainerInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"isArchived\":false,\"latestVersion\":\"gaqvlgafcqusrd\",\"nextVersion\":\"t\",\"description\":\"sdtutnwlduyc\",\"properties\":{\"kuqgsjjxundxgket\":\"hyrmewipmvekdx\",\"gpmuneqsxvmhfbuz\":\"zhhzjhfjmhvvmu\",\"ms\":\"yihsasbhudypohyu\"},\"tags\":{\"pfoobr\":\"sqy\",\"qdnfwqzdz\":\"ttymsjny\",\"fhqlyvi\":\"tilaxh\",\"ti\":\"ouwivkxoyzunbixx\"}},\"id\":\"cpwpg\",\"name\":\"lrcivtsoxfrke\",\"type\":\"xpmyyefrpmpdnq\"}")
                .toObject(ModelContainerInner.class);
        Assertions.assertEquals("sdtutnwlduyc", model.properties().description());
        Assertions.assertEquals("hyrmewipmvekdx", model.properties().properties().get("kuqgsjjxundxgket"));
        Assertions.assertEquals("sqy", model.properties().tags().get("pfoobr"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ModelContainerInner model =
            new ModelContainerInner()
                .withProperties(
                    new ModelContainerProperties()
                        .withDescription("sdtutnwlduyc")
                        .withProperties(
                            mapOf(
                                "kuqgsjjxundxgket",
                                "hyrmewipmvekdx",
                                "gpmuneqsxvmhfbuz",
                                "zhhzjhfjmhvvmu",
                                "ms",
                                "yihsasbhudypohyu"))
                        .withTags(
                            mapOf(
                                "pfoobr",
                                "sqy",
                                "qdnfwqzdz",
                                "ttymsjny",
                                "fhqlyvi",
                                "tilaxh",
                                "ti",
                                "ouwivkxoyzunbixx"))
                        .withIsArchived(false));
        model = BinaryData.fromObject(model).toObject(ModelContainerInner.class);
        Assertions.assertEquals("sdtutnwlduyc", model.properties().description());
        Assertions.assertEquals("hyrmewipmvekdx", model.properties().properties().get("kuqgsjjxundxgket"));
        Assertions.assertEquals("sqy", model.properties().tags().get("pfoobr"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
