// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.Schedule;
import com.azure.resourcemanager.machinelearning.models.ScheduleActionBase;
import com.azure.resourcemanager.machinelearning.models.ScheduleProperties;
import com.azure.resourcemanager.machinelearning.models.TriggerBase;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchedulesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"qwkddgep\",\"isEnabled\":true,\"trigger\":{\"triggerType\":\"TriggerBase\",\"endTime\":\"bzfxgs\",\"startTime\":\"q\",\"timeZone\":\"eqfniag\"},\"action\":{\"actionType\":\"ScheduleActionBase\"},\"provisioningState\":\"Succeeded\",\"description\":\"soxqarjtu\",\"tags\":{\"uhylzbdimtdoh\":\"lmtiyg\",\"uwcilxznxhbttkk\":\"xfqy\",\"bblh\":\"cxjxueilixzjvkqj\",\"cljnkm\":\"mxxxpnk\"},\"properties\":{\"xqcim\":\"qu\",\"psybdgtfozysfjdc\":\"chvkjwrivagcsmrt\",\"pqelmszob\":\"kbp\",\"mududwecdsybi\":\"neltnbyvbgrdr\"}},\"id\":\"fvxdkwvceqly\",\"name\":\"byqqon\",\"type\":\"rekiojusmdodku\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response = manager.schedules()
            .define("pgqxt")
            .withExistingWorkspace("renuvpkpltn", "yeyjatfpbxnre")
            .withProperties(new ScheduleProperties().withDescription("pnixdgqjkfvmrn")
                .withTags(mapOf("iri", "ajyife", "nbtlxrdepqt", "mjdn", "onovfnob", "zhkp", "mmzxpsrlbppjq",
                    "whutvcdtgxsyfuh"))
                .withProperties(mapOf("kgtalljsoasxjjkl", "pdao", "b", "pbgrosxfdxr", "uevnomzlre", "mbbhluvdce",
                    "aleptaasqo", "wdskiegtae"))
                .withDisplayName("ruqtxim")
                .withIsEnabled(false)
                .withTrigger(
                    new TriggerBase().withEndTime("zz").withStartTime("xbuvygl").withTimeZone("fcsbkjhoxtbsybp"))
                .withAction(new ScheduleActionBase()))
            .create();

        Assertions.assertEquals("soxqarjtu", response.properties().description());
        Assertions.assertEquals("lmtiyg", response.properties().tags().get("uhylzbdimtdoh"));
        Assertions.assertEquals("qu", response.properties().properties().get("xqcim"));
        Assertions.assertEquals("qwkddgep", response.properties().displayName());
        Assertions.assertEquals(true, response.properties().isEnabled());
        Assertions.assertEquals("bzfxgs", response.properties().trigger().endTime());
        Assertions.assertEquals("q", response.properties().trigger().startTime());
        Assertions.assertEquals("eqfniag", response.properties().trigger().timeZone());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
