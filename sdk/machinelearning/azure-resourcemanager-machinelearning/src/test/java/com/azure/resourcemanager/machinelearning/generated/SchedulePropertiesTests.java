// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ScheduleActionBase;
import com.azure.resourcemanager.machinelearning.models.ScheduleProperties;
import com.azure.resourcemanager.machinelearning.models.TriggerBase;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SchedulePropertiesTests {
    @Test
    public void testDeserialize() {
        ScheduleProperties model =
            BinaryData
                .fromString(
                    "{\"action\":{\"actionType\":\"ScheduleActionBase\"},\"displayName\":\"ttaqutdew\",\"isEnabled\":false,\"provisioningState\":\"Deleting\",\"trigger\":{\"triggerType\":\"TriggerBase\",\"endTime\":\"ruunzzjgehkf\",\"startTime\":\"m\",\"timeZone\":\"ixokffqyin\"},\"description\":\"qepqwhixmon\",\"properties\":{\"birdsvuwcobiegs\":\"hiyxgvelfclduc\"},\"tags\":{\"shejjtbxqm\":\"inwjizcilngh\",\"ucrwnami\":\"luxlxqzvnersby\"}}")
                .toObject(ScheduleProperties.class);
        Assertions.assertEquals("qepqwhixmon", model.description());
        Assertions.assertEquals("hiyxgvelfclduc", model.properties().get("birdsvuwcobiegs"));
        Assertions.assertEquals("inwjizcilngh", model.tags().get("shejjtbxqm"));
        Assertions.assertEquals("ttaqutdew", model.displayName());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("ruunzzjgehkf", model.trigger().endTime());
        Assertions.assertEquals("m", model.trigger().startTime());
        Assertions.assertEquals("ixokffqyin", model.trigger().timeZone());
    }

    @Test
    public void testSerialize() {
        ScheduleProperties model =
            new ScheduleProperties()
                .withDescription("qepqwhixmon")
                .withProperties(mapOf("birdsvuwcobiegs", "hiyxgvelfclduc"))
                .withTags(mapOf("shejjtbxqm", "inwjizcilngh", "ucrwnami", "luxlxqzvnersby"))
                .withAction(new ScheduleActionBase())
                .withDisplayName("ttaqutdew")
                .withIsEnabled(false)
                .withTrigger(
                    new TriggerBase().withEndTime("ruunzzjgehkf").withStartTime("m").withTimeZone("ixokffqyin"));
        model = BinaryData.fromObject(model).toObject(ScheduleProperties.class);
        Assertions.assertEquals("qepqwhixmon", model.description());
        Assertions.assertEquals("hiyxgvelfclduc", model.properties().get("birdsvuwcobiegs"));
        Assertions.assertEquals("inwjizcilngh", model.tags().get("shejjtbxqm"));
        Assertions.assertEquals("ttaqutdew", model.displayName());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("ruunzzjgehkf", model.trigger().endTime());
        Assertions.assertEquals("m", model.trigger().startTime());
        Assertions.assertEquals("ixokffqyin", model.trigger().timeZone());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
