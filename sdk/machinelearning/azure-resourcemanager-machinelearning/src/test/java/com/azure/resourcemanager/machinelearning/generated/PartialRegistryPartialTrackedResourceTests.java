// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PartialRegistryPartialTrackedResource;
import com.azure.resourcemanager.machinelearning.models.PartialSku;
import com.azure.resourcemanager.machinelearning.models.RegistryPartialManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartialRegistryPartialTrackedResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartialRegistryPartialTrackedResource model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"ccca53e5-7dce-4b97-ba48-a0db7a29e200\",\"tenantId\":\"b8d54272-dee0-4d25-8cd0-b823d9d6ecca\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"r\":{\"principalId\":\"82e1c4fb-62c6-496a-8e05-5149b4052240\",\"clientId\":\"59d284fa-0b63-442b-8da1-572c154b3490\"},\"neyttl\":{\"principalId\":\"99cbfb55-0809-42f7-a448-5790e47c865f\",\"clientId\":\"9c526959-9d39-419b-8d11-15ff79cfbd9a\"},\"ivcbkutpumltwj\":{\"principalId\":\"770988ec-0154-4474-9836-eb9bfe031dcc\",\"clientId\":\"1e27902a-256d-4376-91ed-38f0da118754\"}}},\"sku\":{\"name\":\"xynbpvzlqywa\",\"tier\":\"Standard\",\"size\":\"jckhmocgj\",\"family\":\"gouarhwvixqq\",\"capacity\":902896501},\"tags\":{\"rvtz\":\"ybsjrc\",\"y\":\"nrbctbhpjhxpcvrd\"}}")
            .toObject(PartialRegistryPartialTrackedResource.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xynbpvzlqywa", model.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals("jckhmocgj", model.sku().size());
        Assertions.assertEquals("gouarhwvixqq", model.sku().family());
        Assertions.assertEquals(902896501, model.sku().capacity());
        Assertions.assertEquals("ybsjrc", model.tags().get("rvtz"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartialRegistryPartialTrackedResource model = new PartialRegistryPartialTrackedResource()
            .withIdentity(new RegistryPartialManagedServiceIdentity()
                .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("r", new UserAssignedIdentity(), "neyttl", new UserAssignedIdentity(),
                    "ivcbkutpumltwj", new UserAssignedIdentity())))
            .withSku(new PartialSku().withName("xynbpvzlqywa")
                .withTier(SkuTier.STANDARD)
                .withSize("jckhmocgj")
                .withFamily("gouarhwvixqq")
                .withCapacity(902896501))
            .withTags(mapOf("rvtz", "ybsjrc", "y", "nrbctbhpjhxpcvrd"));
        model = BinaryData.fromObject(model).toObject(PartialRegistryPartialTrackedResource.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xynbpvzlqywa", model.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals("jckhmocgj", model.sku().size());
        Assertions.assertEquals("gouarhwvixqq", model.sku().family());
        Assertions.assertEquals(902896501, model.sku().capacity());
        Assertions.assertEquals("ybsjrc", model.tags().get("rvtz"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
