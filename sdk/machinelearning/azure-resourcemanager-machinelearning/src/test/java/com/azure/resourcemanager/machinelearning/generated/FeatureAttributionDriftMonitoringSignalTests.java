// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.FeatureAttributionDriftMonitoringSignal;
import com.azure.resourcemanager.machinelearning.models.FeatureAttributionMetric;
import com.azure.resourcemanager.machinelearning.models.FeatureAttributionMetricThreshold;
import com.azure.resourcemanager.machinelearning.models.FeatureImportanceMode;
import com.azure.resourcemanager.machinelearning.models.FeatureImportanceSettings;
import com.azure.resourcemanager.machinelearning.models.JobInputType;
import com.azure.resourcemanager.machinelearning.models.MonitoringFeatureDataType;
import com.azure.resourcemanager.machinelearning.models.MonitoringInputDataBase;
import com.azure.resourcemanager.machinelearning.models.MonitoringNotificationType;
import com.azure.resourcemanager.machinelearning.models.MonitoringThreshold;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeatureAttributionDriftMonitoringSignalTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeatureAttributionDriftMonitoringSignal model = BinaryData.fromString(
            "{\"signalType\":\"FeatureAttributionDrift\",\"metricThreshold\":{\"threshold\":{\"value\":39.98706908901154},\"metric\":\"NormalizedDiscountedCumulativeGain\"},\"featureImportanceSettings\":{\"mode\":\"Disabled\",\"targetColumn\":\"snstl\"},\"productionData\":[{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"pjnx\",\"jobInputType\":\"uri_file\",\"uri\":\"htupsvyouweuiy\",\"columns\":{\"sf\":\"kzts\",\"ztadopgfz\":\"evyllznfhkqyt\",\"gqkzjuqw\":\"gjfcycrsvloyyh\",\"nfdbgsoscienezf\":\"ajquzxpixhyoi\"}},{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"ennmf\",\"jobInputType\":\"mltable\",\"uri\":\"pjnrtekwwnthro\",\"columns\":{\"yiurztvktjh\":\"ud\",\"hpuzxkpye\":\"fecqkoqyouerga\",\"zfz\":\"hfdyldhgye\",\"tdereunokakzw\":\"iyuq\"}},{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"jlwyxedzn\",\"jobInputType\":\"custom_model\",\"uri\":\"rfo\",\"columns\":{\"xfjjtpdyzout\":\"ewvmyifo\",\"gvad\":\"fptofhgnuywez\",\"pytpmpvdnogehlu\":\"aaqwvkg\",\"rtbnu\":\"b\"}},{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"faxzsvbxxyjissk\",\"jobInputType\":\"mlflow_model\",\"uri\":\"qocl\",\"columns\":{\"sqeq\":\"oewyhxessmvrkd\",\"esbrujbjpppktl\":\"bdxmd\",\"at\":\"dibfmthi\"}}],\"referenceData\":{\"inputDataType\":\"MonitoringInputDataBase\",\"dataContext\":\"jrnm\",\"jobInputType\":\"triton_model\",\"uri\":\"zqpl\",\"columns\":{\"nikzs\":\"ih\",\"gkensckhbmcarmo\":\"zfffjilzfbpnt\"}},\"featureDataTypeOverride\":{\"kwykuqdndxl\":\"Numerical\",\"h\":\"Numerical\",\"gapvdgtfpeerscdx\":\"Numerical\"},\"notificationTypes\":[\"AmlNotification\"],\"properties\":{\"fmbgacn\":\"c\",\"cmspsanmameubkqi\":\"gfdt\",\"hlq\":\"mlf\",\"uugkw\":\"skkqjmxptuei\"}}")
            .toObject(FeatureAttributionDriftMonitoringSignal.class);
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION, model.notificationTypes().get(0));
        Assertions.assertEquals("c", model.properties().get("fmbgacn"));
        Assertions.assertEquals(39.98706908901154D, model.metricThreshold().threshold().value());
        Assertions.assertEquals(FeatureAttributionMetric.NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN,
            model.metricThreshold().metric());
        Assertions.assertEquals(FeatureImportanceMode.DISABLED, model.featureImportanceSettings().mode());
        Assertions.assertEquals("snstl", model.featureImportanceSettings().targetColumn());
        Assertions.assertEquals("pjnx", model.productionData().get(0).dataContext());
        Assertions.assertEquals(JobInputType.URI_FILE, model.productionData().get(0).jobInputType());
        Assertions.assertEquals("htupsvyouweuiy", model.productionData().get(0).uri());
        Assertions.assertEquals("kzts", model.productionData().get(0).columns().get("sf"));
        Assertions.assertEquals("jrnm", model.referenceData().dataContext());
        Assertions.assertEquals(JobInputType.TRITON_MODEL, model.referenceData().jobInputType());
        Assertions.assertEquals("zqpl", model.referenceData().uri());
        Assertions.assertEquals("ih", model.referenceData().columns().get("nikzs"));
        Assertions.assertEquals(MonitoringFeatureDataType.NUMERICAL,
            model.featureDataTypeOverride().get("kwykuqdndxl"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeatureAttributionDriftMonitoringSignal model = new FeatureAttributionDriftMonitoringSignal()
            .withNotificationTypes(Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION))
            .withProperties(mapOf("fmbgacn", "c", "cmspsanmameubkqi", "gfdt", "hlq", "mlf", "uugkw", "skkqjmxptuei"))
            .withMetricThreshold(new FeatureAttributionMetricThreshold()
                .withThreshold(new MonitoringThreshold().withValue(39.98706908901154D))
                .withMetric(FeatureAttributionMetric.NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN))
            .withFeatureImportanceSettings(
                new FeatureImportanceSettings().withMode(FeatureImportanceMode.DISABLED).withTargetColumn("snstl"))
            .withProductionData(Arrays.asList(
                new MonitoringInputDataBase().withDataContext("pjnx")
                    .withJobInputType(JobInputType.URI_FILE)
                    .withUri("htupsvyouweuiy")
                    .withColumns(mapOf("sf", "kzts", "ztadopgfz", "evyllznfhkqyt", "gqkzjuqw", "gjfcycrsvloyyh",
                        "nfdbgsoscienezf", "ajquzxpixhyoi")),
                new MonitoringInputDataBase().withDataContext("ennmf")
                    .withJobInputType(JobInputType.MLTABLE)
                    .withUri("pjnrtekwwnthro")
                    .withColumns(mapOf("yiurztvktjh", "ud", "hpuzxkpye", "fecqkoqyouerga", "zfz", "hfdyldhgye",
                        "tdereunokakzw", "iyuq")),
                new MonitoringInputDataBase().withDataContext("jlwyxedzn")
                    .withJobInputType(JobInputType.CUSTOM_MODEL)
                    .withUri("rfo")
                    .withColumns(mapOf("xfjjtpdyzout", "ewvmyifo", "gvad", "fptofhgnuywez", "pytpmpvdnogehlu",
                        "aaqwvkg", "rtbnu", "b")),
                new MonitoringInputDataBase().withDataContext("faxzsvbxxyjissk")
                    .withJobInputType(JobInputType.MLFLOW_MODEL)
                    .withUri("qocl")
                    .withColumns(mapOf("sqeq", "oewyhxessmvrkd", "esbrujbjpppktl", "bdxmd", "at", "dibfmthi"))))
            .withReferenceData(new MonitoringInputDataBase().withDataContext("jrnm")
                .withJobInputType(JobInputType.TRITON_MODEL)
                .withUri("zqpl")
                .withColumns(mapOf("nikzs", "ih", "gkensckhbmcarmo", "zfffjilzfbpnt")))
            .withFeatureDataTypeOverride(mapOf("kwykuqdndxl", MonitoringFeatureDataType.NUMERICAL, "h",
                MonitoringFeatureDataType.NUMERICAL, "gapvdgtfpeerscdx", MonitoringFeatureDataType.NUMERICAL));
        model = BinaryData.fromObject(model).toObject(FeatureAttributionDriftMonitoringSignal.class);
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION, model.notificationTypes().get(0));
        Assertions.assertEquals("c", model.properties().get("fmbgacn"));
        Assertions.assertEquals(39.98706908901154D, model.metricThreshold().threshold().value());
        Assertions.assertEquals(FeatureAttributionMetric.NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN,
            model.metricThreshold().metric());
        Assertions.assertEquals(FeatureImportanceMode.DISABLED, model.featureImportanceSettings().mode());
        Assertions.assertEquals("snstl", model.featureImportanceSettings().targetColumn());
        Assertions.assertEquals("pjnx", model.productionData().get(0).dataContext());
        Assertions.assertEquals(JobInputType.URI_FILE, model.productionData().get(0).jobInputType());
        Assertions.assertEquals("htupsvyouweuiy", model.productionData().get(0).uri());
        Assertions.assertEquals("kzts", model.productionData().get(0).columns().get("sf"));
        Assertions.assertEquals("jrnm", model.referenceData().dataContext());
        Assertions.assertEquals(JobInputType.TRITON_MODEL, model.referenceData().jobInputType());
        Assertions.assertEquals("zqpl", model.referenceData().uri());
        Assertions.assertEquals("ih", model.referenceData().columns().get("nikzs"));
        Assertions.assertEquals(MonitoringFeatureDataType.NUMERICAL,
            model.featureDataTypeOverride().get("kwykuqdndxl"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
