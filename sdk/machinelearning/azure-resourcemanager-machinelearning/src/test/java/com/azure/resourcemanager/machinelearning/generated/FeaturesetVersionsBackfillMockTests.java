// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.DataAvailabilityStatus;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersionBackfillRequest;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersionBackfillResponse;
import com.azure.resourcemanager.machinelearning.models.FeatureWindow;
import com.azure.resourcemanager.machinelearning.models.MaterializationComputeResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FeaturesetVersionsBackfillMockTests {
    @Test
    public void testBackfill() throws Exception {
        String responseStr = "{\"jobIds\":[\"mmud\",\"ow\",\"bscidkwznw\",\"tlizdoys\"]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        FeaturesetVersionBackfillResponse response = manager.featuresetVersions()
            .backfill("qxajsiueaibqjbi", "bwxuypcuriwll", "tclveqdqtzsh", "lwjxrymiysgh",
                new FeaturesetVersionBackfillRequest().withDisplayName("mq")
                    .withDescription("kkw")
                    .withFeatureWindow(
                        new FeatureWindow().withFeatureWindowStart(OffsetDateTime.parse("2020-12-23T10:58Z"))
                            .withFeatureWindowEnd(OffsetDateTime.parse("2021-01-24T18:11:33Z")))
                    .withDataAvailabilityStatus(
                        Arrays.asList(DataAvailabilityStatus.NONE, DataAvailabilityStatus.INCOMPLETE))
                    .withJobId("aadnxbss")
                    .withTags(mapOf("xxccf", "ialrqhw"))
                    .withResource(new MaterializationComputeResource().withInstanceType("ozaiyvrex"))
                    .withSparkConfiguration(mapOf("clujyww", "zrikno"))
                    .withProperties(mapOf("msobuahoki", "usnawbncljk")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mmud", response.jobIds().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
