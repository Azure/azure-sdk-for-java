// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.FeatureInner;
import com.azure.resourcemanager.machinelearning.models.FeatureDataType;
import com.azure.resourcemanager.machinelearning.models.FeatureProperties;
import com.azure.resourcemanager.machinelearning.models.FeatureResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeatureResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeatureResourceArmPaginatedResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"featureName\":\"zonwpngajinnixj\",\"dataType\":\"Long\",\"description\":\"mjfjmyccxlzhcox\",\"tags\":{\"sfnrdtjxt\":\"ekhenl\",\"cq\":\"r\",\"uslvyjtcvuwkasi\":\"jvidttge\",\"tuqfecjxeygtu\":\"iesfuug\"},\"properties\":{\"uewmrswnjlxuzrhw\":\"ic\",\"dohzjq\":\"usxjbaqehg\",\"o\":\"tu\"}},\"id\":\"e\",\"name\":\"xncnwfe\",\"type\":\"bnwgfmxj\"},{\"properties\":{\"featureName\":\"g\",\"dataType\":\"Binary\",\"description\":\"dlfgtdysnaq\",\"tags\":{\"zjrwdkqze\":\"qbctqha\",\"fza\":\"yjleziunjx\",\"eg\":\"tkw\",\"uooqjagmdit\":\"amlbnseqacjjvpil\"},\"properties\":{\"tdtpdelqacslmo\":\"iookjbsah\",\"xofvcjk\":\"oebn\",\"xejw\":\"dirazf\"}},\"id\":\"mdujtmvcopexcm\",\"name\":\"urbuhhlkyqltq\",\"type\":\"rogtuwkf\"},{\"properties\":{\"featureName\":\"jk\",\"dataType\":\"Double\",\"description\":\"idfv\",\"tags\":{\"ikayiansharuj\":\"lxnfuijtkbusqogs\"},\"properties\":{\"qhjpenuygbqe\":\"qxfzyjqttvwk\"}},\"id\":\"ekewvnqvcdlguauc\",\"name\":\"f\",\"type\":\"jwnlax\"}],\"nextLink\":\"njqikcz\"}")
            .toObject(FeatureResourceArmPaginatedResult.class);
        Assertions.assertEquals("mjfjmyccxlzhcox", model.value().get(0).properties().description());
        Assertions.assertEquals("ekhenl", model.value().get(0).properties().tags().get("sfnrdtjxt"));
        Assertions.assertEquals("ic", model.value().get(0).properties().properties().get("uewmrswnjlxuzrhw"));
        Assertions.assertEquals("zonwpngajinnixj", model.value().get(0).properties().featureName());
        Assertions.assertEquals(FeatureDataType.LONG, model.value().get(0).properties().dataType());
        Assertions.assertEquals("njqikcz", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeatureResourceArmPaginatedResult model
            = new FeatureResourceArmPaginatedResult().withValue(Arrays.asList(
                new FeatureInner().withProperties(new FeatureProperties()
                    .withDescription("mjfjmyccxlzhcox")
                    .withTags(mapOf("sfnrdtjxt", "ekhenl", "cq", "r", "uslvyjtcvuwkasi", "jvidttge", "tuqfecjxeygtu",
                        "iesfuug"))
                    .withProperties(mapOf("uewmrswnjlxuzrhw", "ic", "dohzjq", "usxjbaqehg", "o", "tu"))
                    .withFeatureName("zonwpngajinnixj")
                    .withDataType(FeatureDataType.LONG)),
                new FeatureInner().withProperties(new FeatureProperties().withDescription("dlfgtdysnaq")
                    .withTags(mapOf("zjrwdkqze", "qbctqha", "fza", "yjleziunjx", "eg", "tkw", "uooqjagmdit",
                        "amlbnseqacjjvpil"))
                    .withProperties(mapOf("tdtpdelqacslmo", "iookjbsah", "xofvcjk", "oebn", "xejw", "dirazf"))
                    .withFeatureName("g")
                    .withDataType(FeatureDataType.BINARY)),
                new FeatureInner().withProperties(new FeatureProperties().withDescription("idfv")
                    .withTags(mapOf("ikayiansharuj", "lxnfuijtkbusqogs"))
                    .withProperties(mapOf("qhjpenuygbqe", "qxfzyjqttvwk"))
                    .withFeatureName("jk")
                    .withDataType(FeatureDataType.DOUBLE))))
                .withNextLink("njqikcz");
        model = BinaryData.fromObject(model).toObject(FeatureResourceArmPaginatedResult.class);
        Assertions.assertEquals("mjfjmyccxlzhcox", model.value().get(0).properties().description());
        Assertions.assertEquals("ekhenl", model.value().get(0).properties().tags().get("sfnrdtjxt"));
        Assertions.assertEquals("ic", model.value().get(0).properties().properties().get("uewmrswnjlxuzrhw"));
        Assertions.assertEquals("zonwpngajinnixj", model.value().get(0).properties().featureName());
        Assertions.assertEquals(FeatureDataType.LONG, model.value().get(0).properties().dataType());
        Assertions.assertEquals("njqikcz", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
