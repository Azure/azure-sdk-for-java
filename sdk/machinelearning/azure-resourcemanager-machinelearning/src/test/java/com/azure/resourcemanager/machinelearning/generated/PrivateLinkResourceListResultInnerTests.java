// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.PrivateLinkResourceListResultInner;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateLinkResource;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PrivateLinkResourceListResultInnerTests {
    @Test
    public void testDeserialize() {
        PrivateLinkResourceListResultInner model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"groupId\":\"oxuscrpabgyepsbj\",\"requiredMembers\":[],\"requiredZoneNames\":[]},\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"pmueefjzwfqk\",\"tags\":{\"yonobgl\":\"ids\",\"udxytlmoyrx\":\"ocqxtccmg\",\"qj\":\"wfudwpzntxhdzhl\",\"bkyvp\":\"hckfrlhrx\"},\"sku\":{\"name\":\"anuzbpzkafkuw\",\"tier\":\"Free\",\"size\":\"wbme\",\"family\":\"seyvj\",\"capacity\":661393497},\"id\":\"slhs\",\"name\":\"kdeemaofmxagkvtm\",\"type\":\"lmqkrhahvlj\"},{\"properties\":{\"groupId\":\"aquhcdhm\",\"requiredMembers\":[],\"requiredZoneNames\":[]},\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"vfadmws\",\"tags\":{\"gomz\":\"gvxp\"},\"sku\":{\"name\":\"misgwbnb\",\"tier\":\"Premium\",\"size\":\"awkz\",\"family\":\"liourqhak\",\"capacity\":1039189909},\"id\":\"shsfwxosowzxcu\",\"name\":\"i\",\"type\":\"jooxdjebw\"}]}")
                .toObject(PrivateLinkResourceListResultInner.class);
        Assertions
            .assertEquals(
                ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("pmueefjzwfqk", model.value().get(0).location());
        Assertions.assertEquals("ids", model.value().get(0).tags().get("yonobgl"));
        Assertions.assertEquals("anuzbpzkafkuw", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.value().get(0).sku().tier());
        Assertions.assertEquals("wbme", model.value().get(0).sku().size());
        Assertions.assertEquals("seyvj", model.value().get(0).sku().family());
        Assertions.assertEquals(661393497, model.value().get(0).sku().capacity());
    }

    @Test
    public void testSerialize() {
        PrivateLinkResourceListResultInner model =
            new PrivateLinkResourceListResultInner()
                .withValue(
                    Arrays
                        .asList(
                            new PrivateLinkResource()
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withLocation("pmueefjzwfqk")
                                .withTags(
                                    mapOf(
                                        "yonobgl",
                                        "ids",
                                        "udxytlmoyrx",
                                        "ocqxtccmg",
                                        "qj",
                                        "wfudwpzntxhdzhl",
                                        "bkyvp",
                                        "hckfrlhrx"))
                                .withSku(
                                    new Sku()
                                        .withName("anuzbpzkafkuw")
                                        .withTier(SkuTier.FREE)
                                        .withSize("wbme")
                                        .withFamily("seyvj")
                                        .withCapacity(661393497))
                                .withRequiredZoneNames(Arrays.asList()),
                            new PrivateLinkResource()
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.USER_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withLocation("vfadmws")
                                .withTags(mapOf("gomz", "gvxp"))
                                .withSku(
                                    new Sku()
                                        .withName("misgwbnb")
                                        .withTier(SkuTier.PREMIUM)
                                        .withSize("awkz")
                                        .withFamily("liourqhak")
                                        .withCapacity(1039189909))
                                .withRequiredZoneNames(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(PrivateLinkResourceListResultInner.class);
        Assertions
            .assertEquals(
                ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("pmueefjzwfqk", model.value().get(0).location());
        Assertions.assertEquals("ids", model.value().get(0).tags().get("yonobgl"));
        Assertions.assertEquals("anuzbpzkafkuw", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.value().get(0).sku().tier());
        Assertions.assertEquals("wbme", model.value().get(0).sku().size());
        Assertions.assertEquals("seyvj", model.value().get(0).sku().family());
        Assertions.assertEquals(661393497, model.value().get(0).sku().capacity());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
