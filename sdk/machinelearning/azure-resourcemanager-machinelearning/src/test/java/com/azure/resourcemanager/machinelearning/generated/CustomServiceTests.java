// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BindOptions;
import com.azure.resourcemanager.machinelearning.models.CustomService;
import com.azure.resourcemanager.machinelearning.models.Docker;
import com.azure.resourcemanager.machinelearning.models.Endpoint;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVariable;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVariableType;
import com.azure.resourcemanager.machinelearning.models.Image;
import com.azure.resourcemanager.machinelearning.models.ImageType;
import com.azure.resourcemanager.machinelearning.models.Protocol;
import com.azure.resourcemanager.machinelearning.models.TmpfsOptions;
import com.azure.resourcemanager.machinelearning.models.VolumeDefinition;
import com.azure.resourcemanager.machinelearning.models.VolumeDefinitionType;
import com.azure.resourcemanager.machinelearning.models.VolumeOptions;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomService model = BinaryData.fromString(
            "{\"name\":\"gj\",\"image\":{\"type\":\"docker\",\"reference\":\"pn\",\"\":{\"qqw\":\"datafcb\",\"uxejgwecywnfyszz\":\"datatqsmoxsa\",\"nqbdnddbboz\":\"dataczs\"}},\"environmentVariables\":{\"jpewpyjlfx\":{\"type\":\"local\",\"value\":\"jmyitrchwudl\",\"\":{\"msibzo\":\"dataihtpmnoejhql\",\"mypgfqvmty\":\"datarfgxkyd\",\"kxp\":\"datahl\"}},\"tnqsktx\":{\"type\":\"local\",\"value\":\"crzge\",\"\":{\"iatwfaujegqdtadr\":\"datab\",\"hjkrukizyhgs\":\"datakgd\"}},\"bwjtrdx\":{\"type\":\"local\",\"value\":\"bqggw\",\"\":{\"hdmncgbfz\":\"dataw\",\"bkl\":\"datascstunmlhxd\",\"f\":\"dataiichgjsysmvxodgw\",\"ec\":\"datazsifcuvbdujgcwx\"}},\"vydjufbnk\":{\"type\":\"local\",\"value\":\"gbbgiarksykp\",\"\":{\"dosqkptjqg\":\"dataxwabzrwiqrxhacl\",\"d\":\"dataifmmainwh\",\"qwuntob\":\"datakp\",\"lw\":\"dataizazz\"}}},\"docker\":{\"privileged\":false,\"\":{\"ytlbtlqhopxouvm\":\"dataegjwdabalfdxaglz\"}},\"endpoints\":[{\"protocol\":\"tcp\",\"name\":\"kyypzkgxfxfmy\",\"target\":1057393281,\"published\":1264769175,\"hostIp\":\"oksz\"},{\"protocol\":\"udp\",\"name\":\"wgpterdiuw\",\"target\":1339527688,\"published\":778791021,\"hostIp\":\"wzt\"},{\"protocol\":\"tcp\",\"name\":\"jygowifcqpolz\",\"target\":2140246849,\"published\":1155749309,\"hostIp\":\"zyybzo\"},{\"protocol\":\"udp\",\"name\":\"cptvdxxheig\",\"target\":1706348146,\"published\":1899017507,\"hostIp\":\"ghjhjvmabzzbwa\"}],\"volumes\":[{\"type\":\"bind\",\"readOnly\":false,\"source\":\"gymqtnapreoj\",\"target\":\"jnbscon\",\"consistency\":\"vi\",\"bind\":{\"propagation\":\"yc\",\"createHostPath\":false,\"selinux\":\"zqfsgnwdxzed\"},\"volume\":{\"nocopy\":false},\"tmpfs\":{\"size\":1629298194}},{\"type\":\"bind\",\"readOnly\":false,\"source\":\"lnfyzav\",\"target\":\"bypicdbkpdj\",\"consistency\":\"qh\",\"bind\":{\"propagation\":\"azpdg\",\"createHostPath\":false,\"selinux\":\"xsht\"},\"volume\":{\"nocopy\":true},\"tmpfs\":{\"size\":1082014127}},{\"type\":\"volume\",\"readOnly\":false,\"source\":\"bvcpxtzhi\",\"target\":\"qbtimpk\",\"consistency\":\"lornsihqh\",\"bind\":{\"propagation\":\"musuaawja\",\"createHostPath\":false,\"selinux\":\"nfczmnniixyxvq\"},\"volume\":{\"nocopy\":false},\"tmpfs\":{\"size\":1609830110}},{\"type\":\"bind\",\"readOnly\":false,\"source\":\"gmgmdd\",\"target\":\"gm\",\"consistency\":\"ltwmpftmf\",\"bind\":{\"propagation\":\"jogsyx\",\"createHostPath\":true,\"selinux\":\"mfd\"},\"volume\":{\"nocopy\":true},\"tmpfs\":{\"size\":64531850}}],\"\":{\"drmuhka\":\"datahnrecchd\",\"vkhhwm\":\"datamjedbiu\",\"rihufoihppiybxv\":\"datapjbweunxcq\"}}")
            .toObject(CustomService.class);
        Assertions.assertEquals("gj", model.name());
        Assertions.assertEquals(ImageType.DOCKER, model.image().type());
        Assertions.assertEquals("pn", model.image().reference());
        Assertions.assertEquals(EnvironmentVariableType.LOCAL, model.environmentVariables().get("jpewpyjlfx").type());
        Assertions.assertEquals("jmyitrchwudl", model.environmentVariables().get("jpewpyjlfx").value());
        Assertions.assertEquals(false, model.docker().privileged());
        Assertions.assertEquals(Protocol.TCP, model.endpoints().get(0).protocol());
        Assertions.assertEquals("kyypzkgxfxfmy", model.endpoints().get(0).name());
        Assertions.assertEquals(1057393281, model.endpoints().get(0).target());
        Assertions.assertEquals(1264769175, model.endpoints().get(0).published());
        Assertions.assertEquals("oksz", model.endpoints().get(0).hostIp());
        Assertions.assertEquals(VolumeDefinitionType.BIND, model.volumes().get(0).type());
        Assertions.assertEquals(false, model.volumes().get(0).readOnly());
        Assertions.assertEquals("gymqtnapreoj", model.volumes().get(0).source());
        Assertions.assertEquals("jnbscon", model.volumes().get(0).target());
        Assertions.assertEquals("vi", model.volumes().get(0).consistency());
        Assertions.assertEquals("yc", model.volumes().get(0).bind().propagation());
        Assertions.assertEquals(false, model.volumes().get(0).bind().createHostPath());
        Assertions.assertEquals("zqfsgnwdxzed", model.volumes().get(0).bind().selinux());
        Assertions.assertEquals(false, model.volumes().get(0).volume().nocopy());
        Assertions.assertEquals(1629298194, model.volumes().get(0).tmpfs().size());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomService model = new CustomService().withName("gj")
            .withImage(new Image().withType(ImageType.DOCKER).withReference("pn").withAdditionalProperties(mapOf()))
            .withEnvironmentVariables(mapOf("jpewpyjlfx",
                new EnvironmentVariable().withType(EnvironmentVariableType.LOCAL)
                    .withValue("jmyitrchwudl")
                    .withAdditionalProperties(mapOf()),
                "tnqsktx",
                new EnvironmentVariable().withType(EnvironmentVariableType.LOCAL)
                    .withValue("crzge")
                    .withAdditionalProperties(mapOf()),
                "bwjtrdx",
                new EnvironmentVariable().withType(EnvironmentVariableType.LOCAL)
                    .withValue("bqggw")
                    .withAdditionalProperties(mapOf()),
                "vydjufbnk",
                new EnvironmentVariable().withType(EnvironmentVariableType.LOCAL)
                    .withValue("gbbgiarksykp")
                    .withAdditionalProperties(mapOf())))
            .withDocker(new Docker().withPrivileged(false).withAdditionalProperties(mapOf()))
            .withEndpoints(Arrays.asList(
                new Endpoint().withProtocol(Protocol.TCP)
                    .withName("kyypzkgxfxfmy")
                    .withTarget(1057393281)
                    .withPublished(1264769175)
                    .withHostIp("oksz"),
                new Endpoint().withProtocol(Protocol.UDP)
                    .withName("wgpterdiuw")
                    .withTarget(1339527688)
                    .withPublished(778791021)
                    .withHostIp("wzt"),
                new Endpoint().withProtocol(Protocol.TCP)
                    .withName("jygowifcqpolz")
                    .withTarget(2140246849)
                    .withPublished(1155749309)
                    .withHostIp("zyybzo"),
                new Endpoint().withProtocol(Protocol.UDP)
                    .withName("cptvdxxheig")
                    .withTarget(1706348146)
                    .withPublished(1899017507)
                    .withHostIp("ghjhjvmabzzbwa")))
            .withVolumes(Arrays.asList(
                new VolumeDefinition().withType(VolumeDefinitionType.BIND)
                    .withReadOnly(false)
                    .withSource("gymqtnapreoj")
                    .withTarget("jnbscon")
                    .withConsistency("vi")
                    .withBind(
                        new BindOptions().withPropagation("yc").withCreateHostPath(false).withSelinux("zqfsgnwdxzed"))
                    .withVolume(new VolumeOptions().withNocopy(false))
                    .withTmpfs(new TmpfsOptions().withSize(1629298194)),
                new VolumeDefinition().withType(VolumeDefinitionType.BIND)
                    .withReadOnly(false)
                    .withSource("lnfyzav")
                    .withTarget("bypicdbkpdj")
                    .withConsistency("qh")
                    .withBind(new BindOptions().withPropagation("azpdg").withCreateHostPath(false).withSelinux("xsht"))
                    .withVolume(new VolumeOptions().withNocopy(true))
                    .withTmpfs(new TmpfsOptions().withSize(1082014127)),
                new VolumeDefinition().withType(VolumeDefinitionType.VOLUME)
                    .withReadOnly(false)
                    .withSource("bvcpxtzhi")
                    .withTarget("qbtimpk")
                    .withConsistency("lornsihqh")
                    .withBind(new BindOptions().withPropagation("musuaawja")
                        .withCreateHostPath(false)
                        .withSelinux("nfczmnniixyxvq"))
                    .withVolume(new VolumeOptions().withNocopy(false))
                    .withTmpfs(new TmpfsOptions().withSize(1609830110)),
                new VolumeDefinition().withType(VolumeDefinitionType.BIND)
                    .withReadOnly(false)
                    .withSource("gmgmdd")
                    .withTarget("gm")
                    .withConsistency("ltwmpftmf")
                    .withBind(new BindOptions().withPropagation("jogsyx").withCreateHostPath(true).withSelinux("mfd"))
                    .withVolume(new VolumeOptions().withNocopy(true))
                    .withTmpfs(new TmpfsOptions().withSize(64531850))))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(CustomService.class);
        Assertions.assertEquals("gj", model.name());
        Assertions.assertEquals(ImageType.DOCKER, model.image().type());
        Assertions.assertEquals("pn", model.image().reference());
        Assertions.assertEquals(EnvironmentVariableType.LOCAL, model.environmentVariables().get("jpewpyjlfx").type());
        Assertions.assertEquals("jmyitrchwudl", model.environmentVariables().get("jpewpyjlfx").value());
        Assertions.assertEquals(false, model.docker().privileged());
        Assertions.assertEquals(Protocol.TCP, model.endpoints().get(0).protocol());
        Assertions.assertEquals("kyypzkgxfxfmy", model.endpoints().get(0).name());
        Assertions.assertEquals(1057393281, model.endpoints().get(0).target());
        Assertions.assertEquals(1264769175, model.endpoints().get(0).published());
        Assertions.assertEquals("oksz", model.endpoints().get(0).hostIp());
        Assertions.assertEquals(VolumeDefinitionType.BIND, model.volumes().get(0).type());
        Assertions.assertEquals(false, model.volumes().get(0).readOnly());
        Assertions.assertEquals("gymqtnapreoj", model.volumes().get(0).source());
        Assertions.assertEquals("jnbscon", model.volumes().get(0).target());
        Assertions.assertEquals("vi", model.volumes().get(0).consistency());
        Assertions.assertEquals("yc", model.volumes().get(0).bind().propagation());
        Assertions.assertEquals(false, model.volumes().get(0).bind().createHostPath());
        Assertions.assertEquals("zqfsgnwdxzed", model.volumes().get(0).bind().selinux());
        Assertions.assertEquals(false, model.volumes().get(0).volume().nocopy());
        Assertions.assertEquals(1629298194, model.volumes().get(0).tmpfs().size());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
