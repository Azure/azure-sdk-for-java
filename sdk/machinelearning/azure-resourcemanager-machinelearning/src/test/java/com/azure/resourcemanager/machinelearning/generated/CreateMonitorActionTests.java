// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.CreateMonitorAction;
import com.azure.resourcemanager.machinelearning.models.ModelTaskType;
import com.azure.resourcemanager.machinelearning.models.MonitorComputeConfigurationBase;
import com.azure.resourcemanager.machinelearning.models.MonitorDefinition;
import com.azure.resourcemanager.machinelearning.models.MonitorEmailNotificationSettings;
import com.azure.resourcemanager.machinelearning.models.MonitoringNotificationType;
import com.azure.resourcemanager.machinelearning.models.MonitoringSignalBase;
import com.azure.resourcemanager.machinelearning.models.MonitoringTarget;
import com.azure.resourcemanager.machinelearning.models.MonitorNotificationSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CreateMonitorActionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CreateMonitorAction model = BinaryData.fromString(
            "{\"actionType\":\"CreateMonitor\",\"monitorDefinition\":{\"monitoringTarget\":{\"modelId\":\"tbwjjirmuydgftt\",\"deploymentId\":\"ofgeoagf\",\"taskType\":\"Regression\"},\"signals\":{\"gsevmdm\":{\"signalType\":\"MonitoringSignalBase\",\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\",\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"g\":\"dajwi\"}},\"ssgpgvo\":{\"signalType\":\"MonitoringSignalBase\",\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"ljdncidtjvamy\":\"gfc\",\"to\":\"znmrgcdogcvucg\",\"szp\":\"uwhttnzqsaqmeb\",\"z\":\"usdekpd\"}},\"dofuckclb\":{\"signalType\":\"MonitoringSignalBase\",\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"wztlvvwsnmrkky\":\"qzsquny\",\"wfkcauxuvavcpf\":\"trepw\"}},\"xydgtokvqbvwg\":{\"signalType\":\"MonitoringSignalBase\",\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\",\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"fsqebuuxjxhfxf\":\"zwilfngo\",\"wgzzxljb\":\"wpdkktpmbmxbmb\",\"jf\":\"hxsdplaumydmhwe\"}}},\"computeConfiguration\":{\"computeType\":\"MonitorComputeConfigurationBase\"},\"alertNotificationSettings\":{\"emailNotificationSettings\":{\"emails\":[\"vxakglh\",\"ses\",\"fga\",\"qiy\"]}}}}")
            .toObject(CreateMonitorAction.class);
        Assertions.assertEquals("tbwjjirmuydgftt", model.monitorDefinition().monitoringTarget().modelId());
        Assertions.assertEquals("ofgeoagf", model.monitorDefinition().monitoringTarget().deploymentId());
        Assertions.assertEquals(ModelTaskType.REGRESSION, model.monitorDefinition().monitoringTarget().taskType());
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION,
            model.monitorDefinition().signals().get("gsevmdm").notificationTypes().get(0));
        Assertions.assertEquals("dajwi", model.monitorDefinition().signals().get("gsevmdm").properties().get("g"));
        Assertions.assertEquals("vxakglh",
            model.monitorDefinition().alertNotificationSettings().emailNotificationSettings().emails().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CreateMonitorAction model = new CreateMonitorAction().withMonitorDefinition(new MonitorDefinition()
            .withMonitoringTarget(new MonitoringTarget().withModelId("tbwjjirmuydgftt")
                .withDeploymentId("ofgeoagf")
                .withTaskType(ModelTaskType.REGRESSION))
            .withSignals(mapOf("gsevmdm",
                new MonitoringSignalBase()
                    .withNotificationTypes(Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION,
                        MonitoringNotificationType.AML_NOTIFICATION, MonitoringNotificationType.AML_NOTIFICATION,
                        MonitoringNotificationType.AML_NOTIFICATION))
                    .withProperties(mapOf("g", "dajwi")),
                "ssgpgvo",
                new MonitoringSignalBase()
                    .withNotificationTypes(Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION,
                        MonitoringNotificationType.AML_NOTIFICATION))
                    .withProperties(
                        mapOf("ljdncidtjvamy", "gfc", "to", "znmrgcdogcvucg", "szp", "uwhttnzqsaqmeb", "z", "usdekpd")),
                "dofuckclb",
                new MonitoringSignalBase()
                    .withNotificationTypes(Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION,
                        MonitoringNotificationType.AML_NOTIFICATION, MonitoringNotificationType.AML_NOTIFICATION))
                    .withProperties(mapOf("wztlvvwsnmrkky", "qzsquny", "wfkcauxuvavcpf", "trepw")),
                "xydgtokvqbvwg",
                new MonitoringSignalBase()
                    .withNotificationTypes(Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION,
                        MonitoringNotificationType.AML_NOTIFICATION, MonitoringNotificationType.AML_NOTIFICATION,
                        MonitoringNotificationType.AML_NOTIFICATION))
                    .withProperties(
                        mapOf("fsqebuuxjxhfxf", "zwilfngo", "wgzzxljb", "wpdkktpmbmxbmb", "jf", "hxsdplaumydmhwe"))))
            .withComputeConfiguration(new MonitorComputeConfigurationBase())
            .withAlertNotificationSettings(new MonitorNotificationSettings().withEmailNotificationSettings(
                new MonitorEmailNotificationSettings().withEmails(Arrays.asList("vxakglh", "ses", "fga", "qiy")))));
        model = BinaryData.fromObject(model).toObject(CreateMonitorAction.class);
        Assertions.assertEquals("tbwjjirmuydgftt", model.monitorDefinition().monitoringTarget().modelId());
        Assertions.assertEquals("ofgeoagf", model.monitorDefinition().monitoringTarget().deploymentId());
        Assertions.assertEquals(ModelTaskType.REGRESSION, model.monitorDefinition().monitoringTarget().taskType());
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION,
            model.monitorDefinition().signals().get("gsevmdm").notificationTypes().get(0));
        Assertions.assertEquals("dajwi", model.monitorDefinition().signals().get("gsevmdm").properties().get("g"));
        Assertions.assertEquals("vxakglh",
            model.monitorDefinition().alertNotificationSettings().emailNotificationSettings().emails().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
