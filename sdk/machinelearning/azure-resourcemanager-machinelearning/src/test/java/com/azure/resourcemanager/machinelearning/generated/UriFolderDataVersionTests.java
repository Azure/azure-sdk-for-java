// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.UriFolderDataVersion;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class UriFolderDataVersionTests {
    @Test
    public void testDeserialize() {
        UriFolderDataVersion model =
            BinaryData
                .fromString(
                    "{\"dataType\":\"uri_folder\",\"dataUri\":\"ecpwgo\",\"isAnonymous\":true,\"isArchived\":true,\"description\":\"mxsdobygoog\",\"properties\":{\"csa\":\"pjxvazyjf\",\"sgm\":\"djnosdkvibf\",\"ktz\":\"trnzpducdaaktu\",\"wkppnwyytfvp\":\"oimyfpqd\"},\"tags\":{\"vuldbkkejjk\":\"jikffffgkuhznw\",\"azmxjqi\":\"igaw\",\"jjsbcmlzaahzbhur\":\"h\",\"lirh\":\"olk\"}}")
                .toObject(UriFolderDataVersion.class);
        Assertions.assertEquals("mxsdobygoog", model.description());
        Assertions.assertEquals("pjxvazyjf", model.properties().get("csa"));
        Assertions.assertEquals("jikffffgkuhznw", model.tags().get("vuldbkkejjk"));
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals("ecpwgo", model.dataUri());
    }

    @Test
    public void testSerialize() {
        UriFolderDataVersion model =
            new UriFolderDataVersion()
                .withDescription("mxsdobygoog")
                .withProperties(
                    mapOf(
                        "csa", "pjxvazyjf", "sgm", "djnosdkvibf", "ktz", "trnzpducdaaktu", "wkppnwyytfvp", "oimyfpqd"))
                .withTags(
                    mapOf("vuldbkkejjk", "jikffffgkuhznw", "azmxjqi", "igaw", "jjsbcmlzaahzbhur", "h", "lirh", "olk"))
                .withIsAnonymous(true)
                .withIsArchived(true)
                .withDataUri("ecpwgo");
        model = BinaryData.fromObject(model).toObject(UriFolderDataVersion.class);
        Assertions.assertEquals("mxsdobygoog", model.description());
        Assertions.assertEquals("pjxvazyjf", model.properties().get("csa"));
        Assertions.assertEquals("jikffffgkuhznw", model.tags().get("vuldbkkejjk"));
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals("ecpwgo", model.dataUri());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
