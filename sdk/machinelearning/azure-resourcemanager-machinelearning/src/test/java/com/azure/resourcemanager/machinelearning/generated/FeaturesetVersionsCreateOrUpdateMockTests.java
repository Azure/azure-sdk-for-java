// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.EmailNotificationEnableType;
import com.azure.resourcemanager.machinelearning.models.FeaturesetSpecification;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersion;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersionProperties;
import com.azure.resourcemanager.machinelearning.models.MaterializationComputeResource;
import com.azure.resourcemanager.machinelearning.models.MaterializationSettings;
import com.azure.resourcemanager.machinelearning.models.MaterializationStoreType;
import com.azure.resourcemanager.machinelearning.models.NotificationSetting;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.RecurrenceSchedule;
import com.azure.resourcemanager.machinelearning.models.RecurrenceTrigger;
import com.azure.resourcemanager.machinelearning.models.Webhook;
import com.azure.resourcemanager.machinelearning.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FeaturesetVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"specification\":{\"path\":\"nlcvlmrvhe\"},\"materializationSettings\":{\"storeType\":\"OnlineAndOffline\",\"schedule\":{\"triggerType\":\"Recurrence\",\"frequency\":\"Day\",\"interval\":460923091,\"schedule\":{\"hours\":[1207128416],\"minutes\":[850079120],\"weekDays\":[\"Friday\"],\"monthDays\":[1640588997,1906393199]},\"endTime\":\"d\",\"startTime\":\"talzcjaw\",\"timeZone\":\"xownoypqussxi\"},\"notification\":{\"emails\":[\"rsd\",\"tjxlopncca\"],\"emailOn\":[\"JobCancelled\",\"JobCompleted\",\"JobCancelled\",\"JobCancelled\"],\"webhooks\":{\"ijlwr\":{\"webhookType\":\"Webhook\"}}},\"resource\":{\"instanceType\":\"bzjpgh\"},\"sparkConfiguration\":{\"xi\":\"pceqaklsfxl\",\"xpuokk\":\"ymfqmvnhsfjxtusb\"}},\"stage\":\"tsppgt\",\"entities\":[\"nalpwa\",\"lkw\"],\"provisioningState\":\"Succeeded\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"njdrnfgtm\",\"tags\":{\"xufuwcajyezlk\":\"lhnxqvzzi\",\"bpnrgnxwrfu\":\"iveftugiwsvlfp\",\"xzyfqcjc\":\"zaysfzuvu\",\"nazpgvfcubxlmq\":\"vbqovkzueytp\"},\"properties\":{\"yfuupqkrzvdjpcev\":\"bqrlbyh\",\"phhpwxghwwfqzwys\":\"kkgqfjw\"}},\"id\":\"qqmdajsqepxftyi\",\"name\":\"adsliifdrbsrpjsp\",\"type\":\"ib\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        FeaturesetVersion response = manager.featuresetVersions()
            .define("dvuotkvkbpmk")
            .withExistingFeatureset("z", "bogdj", "uybcp")
            .withProperties(new FeaturesetVersionProperties().withDescription("kdihslnbyi")
                .withTags(mapOf("wjvxycygcvgebfe", "t", "nsicucqteciexsc", "tyantecvttkgopdj", "jlypwgwbycfam", "hzh",
                    "irhhbogxw", "ikisppygothi"))
                .withProperties(
                    mapOf("oza", "ymyerpu", "wdkgbzjoyyptno", "utjliwb", "ejzxkflzqwkxxboa", "doqxkzeowizv"))
                .withIsArchived(false)
                .withIsAnonymous(false)
                .withSpecification(new FeaturesetSpecification().withPath("nkcwauylkb"))
                .withMaterializationSettings(new MaterializationSettings()
                    .withStoreType(MaterializationStoreType.ONLINE)
                    .withSchedule(new RecurrenceTrigger().withEndTime("hyuxxeike")
                        .withStartTime("pwrnhqaf")
                        .withTimeZone("vysphjkxgfmes")
                        .withFrequency(RecurrenceFrequency.MONTH)
                        .withInterval(1882121848)
                        .withSchedule(new RecurrenceSchedule().withHours(Arrays.asList(1636152298, 1171310815))
                            .withMinutes(Arrays.asList(799567544, 1872935428))
                            .withWeekDays(Arrays.asList(WeekDay.SATURDAY, WeekDay.WEDNESDAY))
                            .withMonthDays(Arrays.asList(558205337))))
                    .withNotification(new NotificationSetting().withEmails(Arrays.asList("qfynvckx", "anlvo", "rvzhdn"))
                        .withEmailOn(Arrays.asList(EmailNotificationEnableType.JOB_COMPLETED,
                            EmailNotificationEnableType.JOB_CANCELLED))
                        .withWebhooks(mapOf("ssgq", new Webhook(), "nolspvxpiegxlzd", new Webhook(), "atptzkmfvdrkcw",
                            new Webhook())))
                    .withResource(new MaterializationComputeResource().withInstanceType("nwsffiahf"))
                    .withSparkConfiguration(mapOf("ozkdqzhr", "zzxirxxk")))
                .withStage("ivvpyznjwmduuzn")
                .withEntities(Arrays.asList("zzwsesqy", "ktvofgxorhsxcs", "axcme", "kpxt")))
            .create();

        Assertions.assertEquals("njdrnfgtm", response.properties().description());
        Assertions.assertEquals("lhnxqvzzi", response.properties().tags().get("xufuwcajyezlk"));
        Assertions.assertEquals("bqrlbyh", response.properties().properties().get("yfuupqkrzvdjpcev"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals("nlcvlmrvhe", response.properties().specification().path());
        Assertions.assertEquals(MaterializationStoreType.ONLINE_AND_OFFLINE,
            response.properties().materializationSettings().storeType());
        Assertions.assertEquals("d", response.properties().materializationSettings().schedule().endTime());
        Assertions.assertEquals("talzcjaw", response.properties().materializationSettings().schedule().startTime());
        Assertions.assertEquals("xownoypqussxi", response.properties().materializationSettings().schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.DAY,
            response.properties().materializationSettings().schedule().frequency());
        Assertions.assertEquals(460923091, response.properties().materializationSettings().schedule().interval());
        Assertions.assertEquals(1207128416,
            response.properties().materializationSettings().schedule().schedule().hours().get(0));
        Assertions.assertEquals(850079120,
            response.properties().materializationSettings().schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.FRIDAY,
            response.properties().materializationSettings().schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1640588997,
            response.properties().materializationSettings().schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("rsd", response.properties().materializationSettings().notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_CANCELLED,
            response.properties().materializationSettings().notification().emailOn().get(0));
        Assertions.assertEquals("bzjpgh", response.properties().materializationSettings().resource().instanceType());
        Assertions.assertEquals("pceqaklsfxl",
            response.properties().materializationSettings().sparkConfiguration().get("xi"));
        Assertions.assertEquals("tsppgt", response.properties().stage());
        Assertions.assertEquals("nalpwa", response.properties().entities().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
