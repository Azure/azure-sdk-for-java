// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EmailNotificationEnableType;
import com.azure.resourcemanager.machinelearning.models.FeaturesetSpecification;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersionProperties;
import com.azure.resourcemanager.machinelearning.models.MaterializationComputeResource;
import com.azure.resourcemanager.machinelearning.models.MaterializationSettings;
import com.azure.resourcemanager.machinelearning.models.MaterializationStoreType;
import com.azure.resourcemanager.machinelearning.models.NotificationSetting;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.RecurrenceSchedule;
import com.azure.resourcemanager.machinelearning.models.RecurrenceTrigger;
import com.azure.resourcemanager.machinelearning.models.Webhook;
import com.azure.resourcemanager.machinelearning.models.WeekDay;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturesetVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeaturesetVersionProperties model = BinaryData.fromString(
            "{\"specification\":{\"path\":\"hr\"},\"materializationSettings\":{\"storeType\":\"None\",\"schedule\":{\"triggerType\":\"Recurrence\",\"frequency\":\"Minute\",\"interval\":1553660421,\"schedule\":{\"hours\":[2094134008],\"minutes\":[809500058],\"weekDays\":[\"Saturday\",\"Wednesday\",\"Saturday\",\"Tuesday\"],\"monthDays\":[1275151185,264674589,1965793317,753182470]},\"endTime\":\"iowlxteqdptj\",\"startTime\":\"dtguk\",\"timeZone\":\"nblwphqlkcc\"},\"notification\":{\"emails\":[\"gqwa\",\"oiulwgniipr\",\"lvawuwzdufypivls\"],\"emailOn\":[\"JobFailed\",\"JobFailed\"],\"webhooks\":{\"phavpmhbrb\":{\"webhookType\":\"Webhook\",\"eventType\":\"kmifoxxkub\"},\"sqyzqedikdfr\":{\"webhookType\":\"Webhook\",\"eventType\":\"vgovpbbttefjokn\"}}},\"resource\":{\"instanceType\":\"qmrjg\"},\"sparkConfiguration\":{\"iwzcxmjpbyeph\":\"fqlggw\",\"ljvrcmyfqipgxhnp\":\"gt\"}},\"stage\":\"yqwcabvnuil\",\"entities\":[\"aswlp\",\"ugmrmf\",\"lrxw\"],\"provisioningState\":\"Succeeded\",\"isArchived\":true,\"isAnonymous\":false,\"description\":\"vcisiz\",\"tags\":{\"jwuive\":\"eds\"},\"properties\":{\"psmgo\":\"gyeewxeiq\",\"l\":\"guamlj\"}}")
            .toObject(FeaturesetVersionProperties.class);
        Assertions.assertEquals("vcisiz", model.description());
        Assertions.assertEquals("eds", model.tags().get("jwuive"));
        Assertions.assertEquals("gyeewxeiq", model.properties().get("psmgo"));
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals("hr", model.specification().path());
        Assertions.assertEquals(MaterializationStoreType.NONE, model.materializationSettings().storeType());
        Assertions.assertEquals("iowlxteqdptj", model.materializationSettings().schedule().endTime());
        Assertions.assertEquals("dtguk", model.materializationSettings().schedule().startTime());
        Assertions.assertEquals("nblwphqlkcc", model.materializationSettings().schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.MINUTE, model.materializationSettings().schedule().frequency());
        Assertions.assertEquals(1553660421, model.materializationSettings().schedule().interval());
        Assertions.assertEquals(2094134008, model.materializationSettings().schedule().schedule().hours().get(0));
        Assertions.assertEquals(809500058, model.materializationSettings().schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.SATURDAY,
            model.materializationSettings().schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1275151185, model.materializationSettings().schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("gqwa", model.materializationSettings().notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_FAILED,
            model.materializationSettings().notification().emailOn().get(0));
        Assertions.assertEquals("kmifoxxkub",
            model.materializationSettings().notification().webhooks().get("phavpmhbrb").eventType());
        Assertions.assertEquals("qmrjg", model.materializationSettings().resource().instanceType());
        Assertions.assertEquals("fqlggw", model.materializationSettings().sparkConfiguration().get("iwzcxmjpbyeph"));
        Assertions.assertEquals("yqwcabvnuil", model.stage());
        Assertions.assertEquals("aswlp", model.entities().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeaturesetVersionProperties model = new FeaturesetVersionProperties().withDescription("vcisiz")
            .withTags(mapOf("jwuive", "eds"))
            .withProperties(mapOf("psmgo", "gyeewxeiq", "l", "guamlj"))
            .withIsArchived(true)
            .withIsAnonymous(false)
            .withSpecification(new FeaturesetSpecification().withPath("hr"))
            .withMaterializationSettings(new MaterializationSettings().withStoreType(MaterializationStoreType.NONE)
                .withSchedule(new RecurrenceTrigger().withEndTime("iowlxteqdptj")
                    .withStartTime("dtguk")
                    .withTimeZone("nblwphqlkcc")
                    .withFrequency(RecurrenceFrequency.MINUTE)
                    .withInterval(1553660421)
                    .withSchedule(new RecurrenceSchedule().withHours(Arrays.asList(2094134008))
                        .withMinutes(Arrays.asList(809500058))
                        .withWeekDays(
                            Arrays.asList(WeekDay.SATURDAY, WeekDay.WEDNESDAY, WeekDay.SATURDAY, WeekDay.TUESDAY))
                        .withMonthDays(Arrays.asList(1275151185, 264674589, 1965793317, 753182470))))
                .withNotification(new NotificationSetting()
                    .withEmails(Arrays.asList("gqwa", "oiulwgniipr", "lvawuwzdufypivls"))
                    .withEmailOn(
                        Arrays.asList(EmailNotificationEnableType.JOB_FAILED, EmailNotificationEnableType.JOB_FAILED))
                    .withWebhooks(mapOf("phavpmhbrb", new Webhook().withEventType("kmifoxxkub"), "sqyzqedikdfr",
                        new Webhook().withEventType("vgovpbbttefjokn"))))
                .withResource(new MaterializationComputeResource().withInstanceType("qmrjg"))
                .withSparkConfiguration(mapOf("iwzcxmjpbyeph", "fqlggw", "ljvrcmyfqipgxhnp", "gt")))
            .withStage("yqwcabvnuil")
            .withEntities(Arrays.asList("aswlp", "ugmrmf", "lrxw"));
        model = BinaryData.fromObject(model).toObject(FeaturesetVersionProperties.class);
        Assertions.assertEquals("vcisiz", model.description());
        Assertions.assertEquals("eds", model.tags().get("jwuive"));
        Assertions.assertEquals("gyeewxeiq", model.properties().get("psmgo"));
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals("hr", model.specification().path());
        Assertions.assertEquals(MaterializationStoreType.NONE, model.materializationSettings().storeType());
        Assertions.assertEquals("iowlxteqdptj", model.materializationSettings().schedule().endTime());
        Assertions.assertEquals("dtguk", model.materializationSettings().schedule().startTime());
        Assertions.assertEquals("nblwphqlkcc", model.materializationSettings().schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.MINUTE, model.materializationSettings().schedule().frequency());
        Assertions.assertEquals(1553660421, model.materializationSettings().schedule().interval());
        Assertions.assertEquals(2094134008, model.materializationSettings().schedule().schedule().hours().get(0));
        Assertions.assertEquals(809500058, model.materializationSettings().schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.SATURDAY,
            model.materializationSettings().schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1275151185, model.materializationSettings().schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("gqwa", model.materializationSettings().notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_FAILED,
            model.materializationSettings().notification().emailOn().get(0));
        Assertions.assertEquals("kmifoxxkub",
            model.materializationSettings().notification().webhooks().get("phavpmhbrb").eventType());
        Assertions.assertEquals("qmrjg", model.materializationSettings().resource().instanceType());
        Assertions.assertEquals("fqlggw", model.materializationSettings().sparkConfiguration().get("iwzcxmjpbyeph"));
        Assertions.assertEquals("yqwcabvnuil", model.stage());
        Assertions.assertEquals("aswlp", model.entities().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
