// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ComponentVersionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ComponentVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ComponentVersionProperties model = BinaryData.fromString(
            "{\"componentSpec\":\"datadntwjchrdgo\",\"provisioningState\":\"Deleting\",\"isArchived\":true,\"isAnonymous\":false,\"description\":\"ond\",\"tags\":{\"fdlwg\":\"uu\",\"gseinq\":\"ytsbwtovv\",\"nepttwqmsni\":\"iufxqknpir\",\"rxfrddhc\":\"fcdmqnrojlpijn\"},\"properties\":{\"hftwesgog\":\"izzronasxiftozqy\",\"sxkkg\":\"zhonnxkrlgnyhmo\",\"rghxjb\":\"h\"}}")
            .toObject(ComponentVersionProperties.class);
        Assertions.assertEquals("ond", model.description());
        Assertions.assertEquals("uu", model.tags().get("fdlwg"));
        Assertions.assertEquals("izzronasxiftozqy", model.properties().get("hftwesgog"));
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals(false, model.isAnonymous());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ComponentVersionProperties model = new ComponentVersionProperties().withDescription("ond")
            .withTags(
                mapOf("fdlwg", "uu", "gseinq", "ytsbwtovv", "nepttwqmsni", "iufxqknpir", "rxfrddhc", "fcdmqnrojlpijn"))
            .withProperties(mapOf("hftwesgog", "izzronasxiftozqy", "sxkkg", "zhonnxkrlgnyhmo", "rghxjb", "h"))
            .withIsArchived(true)
            .withIsAnonymous(false)
            .withComponentSpec("datadntwjchrdgo");
        model = BinaryData.fromObject(model).toObject(ComponentVersionProperties.class);
        Assertions.assertEquals("ond", model.description());
        Assertions.assertEquals("uu", model.tags().get("fdlwg"));
        Assertions.assertEquals("izzronasxiftozqy", model.properties().get("hftwesgog"));
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals(false, model.isAnonymous());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
