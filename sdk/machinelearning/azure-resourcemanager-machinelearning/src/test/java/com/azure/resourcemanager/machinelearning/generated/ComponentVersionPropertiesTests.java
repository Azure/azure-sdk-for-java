// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ComponentVersionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ComponentVersionPropertiesTests {
    @Test
    public void testDeserialize() {
        ComponentVersionProperties model =
            BinaryData
                .fromString(
                    "{\"isAnonymous\":false,\"isArchived\":false,\"description\":\"oqkag\",\"properties\":{\"xdtnkdmkqjjlw\":\"xttaugzxnfaaz\",\"aysjkixqtnqttez\":\"envrkpyouaibrebq\"},\"tags\":{\"pqqmted\":\"ffiakp\",\"wau\":\"tmmjihyeozph\"}}")
                .toObject(ComponentVersionProperties.class);
        Assertions.assertEquals("oqkag", model.description());
        Assertions.assertEquals("xttaugzxnfaaz", model.properties().get("xdtnkdmkqjjlw"));
        Assertions.assertEquals("ffiakp", model.tags().get("pqqmted"));
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
    }

    @Test
    public void testSerialize() {
        ComponentVersionProperties model =
            new ComponentVersionProperties()
                .withDescription("oqkag")
                .withProperties(mapOf("xdtnkdmkqjjlw", "xttaugzxnfaaz", "aysjkixqtnqttez", "envrkpyouaibrebq"))
                .withTags(mapOf("pqqmted", "ffiakp", "wau", "tmmjihyeozph"))
                .withIsAnonymous(false)
                .withIsArchived(false);
        model = BinaryData.fromObject(model).toObject(ComponentVersionProperties.class);
        Assertions.assertEquals("oqkag", model.description());
        Assertions.assertEquals("xttaugzxnfaaz", model.properties().get("xdtnkdmkqjjlw"));
        Assertions.assertEquals("ffiakp", model.tags().get("pqqmted"));
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
