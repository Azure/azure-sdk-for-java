// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ClassificationModels;
import com.azure.resourcemanager.machinelearning.models.ClassificationTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ClassificationTrainingSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClassificationTrainingSettings model = BinaryData.fromString(
            "{\"allowedTrainingAlgorithms\":[\"ExtremeRandomTrees\",\"DecisionTree\",\"KNN\",\"SVM\"],\"blockedTrainingAlgorithms\":[\"SGD\",\"LogisticRegression\",\"XGBoostClassifier\",\"LinearSVM\"],\"enableOnnxCompatibleModels\":false,\"stackEnsembleSettings\":{\"stackMetaLearnerType\":\"LightGBMRegressor\",\"stackMetaLearnerTrainPercentage\":99.81987601096077,\"stackMetaLearnerKWargs\":\"dataqcnrrfijhggabqb\"},\"enableStackEnsemble\":false,\"enableVoteEnsemble\":true,\"ensembleModelDownloadTimeout\":\"PT110H9M4S\",\"enableModelExplainability\":true,\"enableDnnTraining\":false}")
            .toObject(ClassificationTrainingSettings.class);
        Assertions.assertEquals(false, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.LIGHT_GBMREGRESSOR,
            model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(99.81987601096077D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(true, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT110H9M4S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(true, model.enableModelExplainability());
        Assertions.assertEquals(false, model.enableDnnTraining());
        Assertions.assertEquals(ClassificationModels.EXTREME_RANDOM_TREES, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(ClassificationModels.SGD, model.blockedTrainingAlgorithms().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClassificationTrainingSettings model
            = new ClassificationTrainingSettings().withEnableOnnxCompatibleModels(false)
                .withStackEnsembleSettings(
                    new StackEnsembleSettings().withStackMetaLearnerType(StackMetaLearnerType.LIGHT_GBMREGRESSOR)
                        .withStackMetaLearnerTrainPercentage(99.81987601096077D)
                        .withStackMetaLearnerKWargs("dataqcnrrfijhggabqb"))
                .withEnableStackEnsemble(false)
                .withEnableVoteEnsemble(true)
                .withEnsembleModelDownloadTimeout(Duration.parse("PT110H9M4S"))
                .withEnableModelExplainability(true)
                .withEnableDnnTraining(false)
                .withAllowedTrainingAlgorithms(Arrays.asList(ClassificationModels.EXTREME_RANDOM_TREES,
                    ClassificationModels.DECISION_TREE, ClassificationModels.KNN, ClassificationModels.SVM))
                .withBlockedTrainingAlgorithms(
                    Arrays.asList(ClassificationModels.SGD, ClassificationModels.LOGISTIC_REGRESSION,
                        ClassificationModels.XGBOOST_CLASSIFIER, ClassificationModels.LINEAR_SVM));
        model = BinaryData.fromObject(model).toObject(ClassificationTrainingSettings.class);
        Assertions.assertEquals(false, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.LIGHT_GBMREGRESSOR,
            model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(99.81987601096077D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(true, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT110H9M4S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(true, model.enableModelExplainability());
        Assertions.assertEquals(false, model.enableDnnTraining());
        Assertions.assertEquals(ClassificationModels.EXTREME_RANDOM_TREES, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(ClassificationModels.SGD, model.blockedTrainingAlgorithms().get(0));
    }
}
