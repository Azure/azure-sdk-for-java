// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ClassificationModels;
import com.azure.resourcemanager.machinelearning.models.ClassificationTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ClassificationTrainingSettingsTests {
    @Test
    public void testDeserialize() {
        ClassificationTrainingSettings model =
            BinaryData
                .fromString(
                    "{\"allowedTrainingAlgorithms\":[\"MultinomialNaiveBayes\",\"LightGBM\",\"LogisticRegression\"],\"blockedTrainingAlgorithms\":[\"SGD\",\"ExtremeRandomTrees\",\"BernoulliNaiveBayes\"],\"enableDnnTraining\":true,\"enableModelExplainability\":true,\"enableOnnxCompatibleModels\":true,\"enableStackEnsemble\":false,\"enableVoteEnsemble\":true,\"ensembleModelDownloadTimeout\":\"PT19H43M7S\",\"stackEnsembleSettings\":{\"stackMetaLearnerTrainPercentage\":75.648883491889,\"stackMetaLearnerType\":\"ElasticNet\"}}")
                .toObject(ClassificationTrainingSettings.class);
        Assertions.assertEquals(true, model.enableDnnTraining());
        Assertions.assertEquals(true, model.enableModelExplainability());
        Assertions.assertEquals(true, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(true, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT19H43M7S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(75.648883491889D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(StackMetaLearnerType.ELASTIC_NET, model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(ClassificationModels.MULTINOMIAL_NAIVE_BAYES, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(ClassificationModels.SGD, model.blockedTrainingAlgorithms().get(0));
    }

    @Test
    public void testSerialize() {
        ClassificationTrainingSettings model =
            new ClassificationTrainingSettings()
                .withEnableDnnTraining(true)
                .withEnableModelExplainability(true)
                .withEnableOnnxCompatibleModels(true)
                .withEnableStackEnsemble(false)
                .withEnableVoteEnsemble(true)
                .withEnsembleModelDownloadTimeout(Duration.parse("PT19H43M7S"))
                .withStackEnsembleSettings(
                    new StackEnsembleSettings()
                        .withStackMetaLearnerTrainPercentage(75.648883491889D)
                        .withStackMetaLearnerType(StackMetaLearnerType.ELASTIC_NET))
                .withAllowedTrainingAlgorithms(
                    Arrays
                        .asList(
                            ClassificationModels.MULTINOMIAL_NAIVE_BAYES,
                            ClassificationModels.LIGHT_GBM,
                            ClassificationModels.LOGISTIC_REGRESSION))
                .withBlockedTrainingAlgorithms(
                    Arrays
                        .asList(
                            ClassificationModels.SGD,
                            ClassificationModels.EXTREME_RANDOM_TREES,
                            ClassificationModels.BERNOULLI_NAIVE_BAYES));
        model = BinaryData.fromObject(model).toObject(ClassificationTrainingSettings.class);
        Assertions.assertEquals(true, model.enableDnnTraining());
        Assertions.assertEquals(true, model.enableModelExplainability());
        Assertions.assertEquals(true, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(false, model.enableStackEnsemble());
        Assertions.assertEquals(true, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT19H43M7S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(75.648883491889D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(StackMetaLearnerType.ELASTIC_NET, model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(ClassificationModels.MULTINOMIAL_NAIVE_BAYES, model.allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(ClassificationModels.SGD, model.blockedTrainingAlgorithms().get(0));
    }
}
