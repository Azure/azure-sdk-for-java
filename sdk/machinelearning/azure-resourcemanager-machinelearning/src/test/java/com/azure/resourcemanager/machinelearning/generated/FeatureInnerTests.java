// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.FeatureInner;
import com.azure.resourcemanager.machinelearning.models.FeatureDataType;
import com.azure.resourcemanager.machinelearning.models.FeatureProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeatureInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeatureInner model = BinaryData.fromString(
            "{\"properties\":{\"featureName\":\"itacgxmfcsserx\",\"dataType\":\"String\",\"description\":\"oxhlw\",\"tags\":{\"qrsxyp\":\"j\",\"yuel\":\"uuuybnchrsziz\",\"nlgmtrwahzjmu\":\"etndnbfqyggagf\"},\"properties\":{\"fusuckzmkwklsno\":\"byrplrohkpig\"}},\"id\":\"xmqeqalh\",\"name\":\"jnhgwydyyn\",\"type\":\"svkhgbv\"}")
            .toObject(FeatureInner.class);
        Assertions.assertEquals("oxhlw", model.properties().description());
        Assertions.assertEquals("j", model.properties().tags().get("qrsxyp"));
        Assertions.assertEquals("byrplrohkpig", model.properties().properties().get("fusuckzmkwklsno"));
        Assertions.assertEquals("itacgxmfcsserx", model.properties().featureName());
        Assertions.assertEquals(FeatureDataType.STRING, model.properties().dataType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeatureInner model = new FeatureInner().withProperties(new FeatureProperties().withDescription("oxhlw")
            .withTags(mapOf("qrsxyp", "j", "yuel", "uuuybnchrsziz", "nlgmtrwahzjmu", "etndnbfqyggagf"))
            .withProperties(mapOf("fusuckzmkwklsno", "byrplrohkpig"))
            .withFeatureName("itacgxmfcsserx")
            .withDataType(FeatureDataType.STRING));
        model = BinaryData.fromObject(model).toObject(FeatureInner.class);
        Assertions.assertEquals("oxhlw", model.properties().description());
        Assertions.assertEquals("j", model.properties().tags().get("qrsxyp"));
        Assertions.assertEquals("byrplrohkpig", model.properties().properties().get("fusuckzmkwklsno"));
        Assertions.assertEquals("itacgxmfcsserx", model.properties().featureName());
        Assertions.assertEquals(FeatureDataType.STRING, model.properties().dataType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
