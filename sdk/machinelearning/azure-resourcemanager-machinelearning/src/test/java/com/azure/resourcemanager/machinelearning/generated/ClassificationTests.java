// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BlockedTransformers;
import com.azure.resourcemanager.machinelearning.models.Classification;
import com.azure.resourcemanager.machinelearning.models.ClassificationModels;
import com.azure.resourcemanager.machinelearning.models.ClassificationPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.ClassificationTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.FeaturizationMode;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NCrossValidations;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import com.azure.resourcemanager.machinelearning.models.TableVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.TableVerticalLimitSettings;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ClassificationTests {
    @Test
    public void testDeserialize() {
        Classification model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"Classification\",\"positiveLabel\":\"pmjnlexwhcb\",\"primaryMetric\":\"PrecisionScoreWeighted\",\"trainingSettings\":{\"allowedTrainingAlgorithms\":[\"SVM\"],\"blockedTrainingAlgorithms\":[\"DecisionTree\",\"DecisionTree\"],\"enableDnnTraining\":false,\"enableModelExplainability\":false,\"enableOnnxCompatibleModels\":false,\"enableStackEnsemble\":true,\"enableVoteEnsemble\":false,\"ensembleModelDownloadTimeout\":\"PT104H34M3S\",\"stackEnsembleSettings\":{\"stackMetaLearnerTrainPercentage\":12.380071794249393,\"stackMetaLearnerType\":\"LightGBMRegressor\"}},\"cvSplitColumnNames\":[\"czkgofxyfsrucvcr\",\"pcjttbstvjeaqn\",\"mvvfko\",\"mlghktuidvrmazlp\"],\"featurizationSettings\":{\"blockedTransformers\":[\"CountVectorizer\",\"HashOneHotEncoder\"],\"columnNameAndTypes\":{\"uuzivensrpmeyyvp\":\"vlazipbhpwvqsgny\",\"gsksrfhf\":\"patlbijp\",\"bnxwc\":\"olmk\",\"fgbrtt\":\"ommpvfqaw\"},\"enableDnnFeaturization\":true,\"mode\":\"Custom\",\"transformerParams\":{\"xhajlfnth\":[],\"fyut\":[]},\"datasetLanguage\":\"iygbpvn\"},\"limitSettings\":{\"enableEarlyTermination\":false,\"exitScore\":65.94055450514983,\"maxConcurrentTrials\":1696965657,\"maxCoresPerTrial\":1359589623,\"maxTrials\":1045525461,\"timeout\":\"PT135H30M57S\",\"trialTimeout\":\"PT121H43M45S\"},\"nCrossValidations\":{\"mode\":\"NCrossValidations\"},\"testData\":{\"jobInputType\":\"mltable\",\"mode\":\"Download\",\"uri\":\"vogygzyvneez\",\"description\":\"fg\"},\"testDataSize\":73.74216356322904,\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadOnlyMount\",\"uri\":\"lffhz\",\"description\":\"rkjjjavfqnvhnq\"},\"validationDataSize\":69.29112176921352,\"weightColumnName\":\"giyetesypvidbz\",\"logVerbosity\":\"Critical\",\"targetColumnName\":\"t\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"Direct\",\"uri\":\"vnynkb\",\"description\":\"tnjuhpsprkzyaupi\"}}")
                .toObject(Classification.class);
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.logVerbosity());
        Assertions.assertEquals("t", model.targetColumnName());
        Assertions.assertEquals("tnjuhpsprkzyaupi", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.trainingData().mode());
        Assertions.assertEquals("vnynkb", model.trainingData().uri());
        Assertions.assertEquals("pmjnlexwhcb", model.positiveLabel());
        Assertions.assertEquals(ClassificationPrimaryMetrics.PRECISION_SCORE_WEIGHTED, model.primaryMetric());
        Assertions.assertEquals(false, model.trainingSettings().enableDnnTraining());
        Assertions.assertEquals(false, model.trainingSettings().enableModelExplainability());
        Assertions.assertEquals(false, model.trainingSettings().enableOnnxCompatibleModels());
        Assertions.assertEquals(true, model.trainingSettings().enableStackEnsemble());
        Assertions.assertEquals(false, model.trainingSettings().enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT104H34M3S"), model.trainingSettings().ensembleModelDownloadTimeout());
        Assertions
            .assertEquals(
                12.380071794249393D,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions
            .assertEquals(
                StackMetaLearnerType.LIGHT_GBMREGRESSOR,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(ClassificationModels.SVM, model.trainingSettings().allowedTrainingAlgorithms().get(0));
        Assertions
            .assertEquals(
                ClassificationModels.DECISION_TREE, model.trainingSettings().blockedTrainingAlgorithms().get(0));
        Assertions.assertEquals("czkgofxyfsrucvcr", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("iygbpvn", model.featurizationSettings().datasetLanguage());
        Assertions
            .assertEquals(
                BlockedTransformers.COUNT_VECTORIZER, model.featurizationSettings().blockedTransformers().get(0));
        Assertions
            .assertEquals(
                "vlazipbhpwvqsgny", model.featurizationSettings().columnNameAndTypes().get("uuzivensrpmeyyvp"));
        Assertions.assertEquals(true, model.featurizationSettings().enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.CUSTOM, model.featurizationSettings().mode());
        Assertions.assertEquals(false, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals(65.94055450514983D, model.limitSettings().exitScore());
        Assertions.assertEquals(1696965657, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1359589623, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(1045525461, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT135H30M57S"), model.limitSettings().timeout());
        Assertions.assertEquals(Duration.parse("PT121H43M45S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals("fg", model.testData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.testData().mode());
        Assertions.assertEquals("vogygzyvneez", model.testData().uri());
        Assertions.assertEquals(73.74216356322904D, model.testDataSize());
        Assertions.assertEquals("rkjjjavfqnvhnq", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.validationData().mode());
        Assertions.assertEquals("lffhz", model.validationData().uri());
        Assertions.assertEquals(69.29112176921352D, model.validationDataSize());
        Assertions.assertEquals("giyetesypvidbz", model.weightColumnName());
    }

    @Test
    public void testSerialize() {
        Classification model =
            new Classification()
                .withLogVerbosity(LogVerbosity.CRITICAL)
                .withTargetColumnName("t")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("tnjuhpsprkzyaupi")
                        .withMode(InputDeliveryMode.DIRECT)
                        .withUri("vnynkb"))
                .withPositiveLabel("pmjnlexwhcb")
                .withPrimaryMetric(ClassificationPrimaryMetrics.PRECISION_SCORE_WEIGHTED)
                .withTrainingSettings(
                    new ClassificationTrainingSettings()
                        .withEnableDnnTraining(false)
                        .withEnableModelExplainability(false)
                        .withEnableOnnxCompatibleModels(false)
                        .withEnableStackEnsemble(true)
                        .withEnableVoteEnsemble(false)
                        .withEnsembleModelDownloadTimeout(Duration.parse("PT104H34M3S"))
                        .withStackEnsembleSettings(
                            new StackEnsembleSettings()
                                .withStackMetaLearnerTrainPercentage(12.380071794249393D)
                                .withStackMetaLearnerType(StackMetaLearnerType.LIGHT_GBMREGRESSOR))
                        .withAllowedTrainingAlgorithms(Arrays.asList(ClassificationModels.SVM))
                        .withBlockedTrainingAlgorithms(
                            Arrays.asList(ClassificationModels.DECISION_TREE, ClassificationModels.DECISION_TREE)))
                .withCvSplitColumnNames(
                    Arrays.asList("czkgofxyfsrucvcr", "pcjttbstvjeaqn", "mvvfko", "mlghktuidvrmazlp"))
                .withFeaturizationSettings(
                    new TableVerticalFeaturizationSettings()
                        .withDatasetLanguage("iygbpvn")
                        .withBlockedTransformers(
                            Arrays
                                .asList(BlockedTransformers.COUNT_VECTORIZER, BlockedTransformers.HASH_ONE_HOT_ENCODER))
                        .withColumnNameAndTypes(
                            mapOf(
                                "uuzivensrpmeyyvp",
                                "vlazipbhpwvqsgny",
                                "gsksrfhf",
                                "patlbijp",
                                "bnxwc",
                                "olmk",
                                "fgbrtt",
                                "ommpvfqaw"))
                        .withEnableDnnFeaturization(true)
                        .withMode(FeaturizationMode.CUSTOM)
                        .withTransformerParams(mapOf("xhajlfnth", Arrays.asList(), "fyut", Arrays.asList())))
                .withLimitSettings(
                    new TableVerticalLimitSettings()
                        .withEnableEarlyTermination(false)
                        .withExitScore(65.94055450514983D)
                        .withMaxConcurrentTrials(1696965657)
                        .withMaxCoresPerTrial(1359589623)
                        .withMaxTrials(1045525461)
                        .withTimeout(Duration.parse("PT135H30M57S"))
                        .withTrialTimeout(Duration.parse("PT121H43M45S")))
                .withNCrossValidations(new NCrossValidations())
                .withTestData(
                    new MLTableJobInput()
                        .withDescription("fg")
                        .withMode(InputDeliveryMode.DOWNLOAD)
                        .withUri("vogygzyvneez"))
                .withTestDataSize(73.74216356322904D)
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("rkjjjavfqnvhnq")
                        .withMode(InputDeliveryMode.READ_ONLY_MOUNT)
                        .withUri("lffhz"))
                .withValidationDataSize(69.29112176921352D)
                .withWeightColumnName("giyetesypvidbz");
        model = BinaryData.fromObject(model).toObject(Classification.class);
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.logVerbosity());
        Assertions.assertEquals("t", model.targetColumnName());
        Assertions.assertEquals("tnjuhpsprkzyaupi", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.trainingData().mode());
        Assertions.assertEquals("vnynkb", model.trainingData().uri());
        Assertions.assertEquals("pmjnlexwhcb", model.positiveLabel());
        Assertions.assertEquals(ClassificationPrimaryMetrics.PRECISION_SCORE_WEIGHTED, model.primaryMetric());
        Assertions.assertEquals(false, model.trainingSettings().enableDnnTraining());
        Assertions.assertEquals(false, model.trainingSettings().enableModelExplainability());
        Assertions.assertEquals(false, model.trainingSettings().enableOnnxCompatibleModels());
        Assertions.assertEquals(true, model.trainingSettings().enableStackEnsemble());
        Assertions.assertEquals(false, model.trainingSettings().enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT104H34M3S"), model.trainingSettings().ensembleModelDownloadTimeout());
        Assertions
            .assertEquals(
                12.380071794249393D,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions
            .assertEquals(
                StackMetaLearnerType.LIGHT_GBMREGRESSOR,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(ClassificationModels.SVM, model.trainingSettings().allowedTrainingAlgorithms().get(0));
        Assertions
            .assertEquals(
                ClassificationModels.DECISION_TREE, model.trainingSettings().blockedTrainingAlgorithms().get(0));
        Assertions.assertEquals("czkgofxyfsrucvcr", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("iygbpvn", model.featurizationSettings().datasetLanguage());
        Assertions
            .assertEquals(
                BlockedTransformers.COUNT_VECTORIZER, model.featurizationSettings().blockedTransformers().get(0));
        Assertions
            .assertEquals(
                "vlazipbhpwvqsgny", model.featurizationSettings().columnNameAndTypes().get("uuzivensrpmeyyvp"));
        Assertions.assertEquals(true, model.featurizationSettings().enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.CUSTOM, model.featurizationSettings().mode());
        Assertions.assertEquals(false, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals(65.94055450514983D, model.limitSettings().exitScore());
        Assertions.assertEquals(1696965657, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1359589623, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(1045525461, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT135H30M57S"), model.limitSettings().timeout());
        Assertions.assertEquals(Duration.parse("PT121H43M45S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals("fg", model.testData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.testData().mode());
        Assertions.assertEquals("vogygzyvneez", model.testData().uri());
        Assertions.assertEquals(73.74216356322904D, model.testDataSize());
        Assertions.assertEquals("rkjjjavfqnvhnq", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.validationData().mode());
        Assertions.assertEquals("lffhz", model.validationData().uri());
        Assertions.assertEquals(69.29112176921352D, model.validationDataSize());
        Assertions.assertEquals("giyetesypvidbz", model.weightColumnName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
