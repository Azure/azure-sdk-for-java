// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PublicNetworkAccess;
import com.azure.resourcemanager.machinelearning.models.ServiceManagedResourcesSettings;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import com.azure.resourcemanager.machinelearning.models.WorkspaceUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WorkspaceUpdateParametersTests {
    @Test
    public void testDeserialize() {
        WorkspaceUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"yqduujit\":\"mgxsab\",\"rwpdappdsbdkvwrw\":\"jczdzevndh\"},\"sku\":{\"name\":\"eusnhutj\",\"tier\":\"Premium\",\"size\":\"rl\",\"family\":\"ugjzzdatqxhocdge\",\"capacity\":1293628182},\"identity\":{\"principalId\":\"298ff0f1-32f6-4ac2-9266-6d3b268f9989\",\"tenantId\":\"fecc6f50-496b-4ac8-b7a1-f8a7e2c386e5\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"dvkaozw\":{\"principalId\":\"98cb0dd7-6625-4338-9273-f282333158bb\",\"clientId\":\"3ed86f0d-aaf4-4ccf-b66f-5eb43ba49553\"},\"tyhxhurokft\":{\"principalId\":\"54e20893-94be-4251-93a3-6abc228a0604\",\"clientId\":\"1657007b-0139-42f1-99e3-4f8ace583b82\"},\"lniwpwcukjfkgiaw\":{\"principalId\":\"2ab72242-345a-40ef-9e3c-4e20b303e11b\",\"clientId\":\"e23a0334-d84b-43fd-9785-c9b94891b432\"},\"ryplwckbasyypn\":{\"principalId\":\"c1d2f6b5-dc4c-4697-b79a-4fd2b1f83c61\",\"clientId\":\"c1917550-0b2e-4a58-8059-607942f56fbc\"}}},\"properties\":{\"description\":\"sgcbac\",\"friendlyName\":\"ejk\",\"imageBuildCompute\":\"ynqgoulzndlikwyq\",\"serviceManagedResourcesSettings\":{},\"primaryUserAssignedIdentity\":\"ibmadgakeqsrxy\",\"publicNetworkAccess\":\"Disabled\",\"applicationInsights\":\"e\",\"containerRegistry\":\"ytb\"}}")
                .toObject(WorkspaceUpdateParameters.class);
        Assertions.assertEquals("mgxsab", model.tags().get("yqduujit"));
        Assertions.assertEquals("eusnhutj", model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("rl", model.sku().size());
        Assertions.assertEquals("ugjzzdatqxhocdge", model.sku().family());
        Assertions.assertEquals(1293628182, model.sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("sgcbac", model.description());
        Assertions.assertEquals("ejk", model.friendlyName());
        Assertions.assertEquals("ynqgoulzndlikwyq", model.imageBuildCompute());
        Assertions.assertEquals("ibmadgakeqsrxy", model.primaryUserAssignedIdentity());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("e", model.applicationInsights());
        Assertions.assertEquals("ytb", model.containerRegistry());
    }

    @Test
    public void testSerialize() {
        WorkspaceUpdateParameters model =
            new WorkspaceUpdateParameters()
                .withTags(mapOf("yqduujit", "mgxsab", "rwpdappdsbdkvwrw", "jczdzevndh"))
                .withSku(
                    new Sku()
                        .withName("eusnhutj")
                        .withTier(SkuTier.PREMIUM)
                        .withSize("rl")
                        .withFamily("ugjzzdatqxhocdge")
                        .withCapacity(1293628182))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "dvkaozw",
                                new UserAssignedIdentity(),
                                "tyhxhurokft",
                                new UserAssignedIdentity(),
                                "lniwpwcukjfkgiaw",
                                new UserAssignedIdentity(),
                                "ryplwckbasyypn",
                                new UserAssignedIdentity())))
                .withDescription("sgcbac")
                .withFriendlyName("ejk")
                .withImageBuildCompute("ynqgoulzndlikwyq")
                .withServiceManagedResourcesSettings(new ServiceManagedResourcesSettings())
                .withPrimaryUserAssignedIdentity("ibmadgakeqsrxy")
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                .withApplicationInsights("e")
                .withContainerRegistry("ytb");
        model = BinaryData.fromObject(model).toObject(WorkspaceUpdateParameters.class);
        Assertions.assertEquals("mgxsab", model.tags().get("yqduujit"));
        Assertions.assertEquals("eusnhutj", model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("rl", model.sku().size());
        Assertions.assertEquals("ugjzzdatqxhocdge", model.sku().family());
        Assertions.assertEquals(1293628182, model.sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("sgcbac", model.description());
        Assertions.assertEquals("ejk", model.friendlyName());
        Assertions.assertEquals("ynqgoulzndlikwyq", model.imageBuildCompute());
        Assertions.assertEquals("ibmadgakeqsrxy", model.primaryUserAssignedIdentity());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("e", model.applicationInsights());
        Assertions.assertEquals("ytb", model.containerRegistry());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
