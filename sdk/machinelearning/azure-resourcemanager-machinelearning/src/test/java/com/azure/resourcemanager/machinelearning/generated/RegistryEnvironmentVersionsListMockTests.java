// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersion;
import com.azure.resourcemanager.machinelearning.models.ListViewType;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistryEnvironmentVersionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"environmentType\":\"Curated\",\"image\":\"zebc\",\"condaFile\":\"luedcmkryhh\",\"build\":{\"contextUri\":\"xzh\",\"dockerfilePath\":\"lxwknooxdjklfsdn\"},\"osType\":\"Linux\",\"inferenceConfig\":{\"livenessRoute\":{\"path\":\"mmddslwnlg\",\"port\":1497973223},\"readinessRoute\":{\"path\":\"hmk\",\"port\":775061052},\"scoringRoute\":{\"path\":\"bnnnlpqdnns\",\"port\":2111031568}},\"autoRebuild\":\"Disabled\",\"provisioningState\":\"Creating\",\"stage\":\"slwknrdvvmb\",\"isArchived\":true,\"isAnonymous\":true,\"description\":\"zywx\",\"tags\":{\"etnnefputlkszux\":\"qxtkd\"},\"properties\":{\"wasfw\":\"zs\"}},\"id\":\"zybmfqdnppfcf\",\"name\":\"uamrvamuvkgd\",\"type\":\"pjbblukgctv\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<EnvironmentVersion> response = manager.registryEnvironmentVersions()
            .list("nuvhgcgrllyyfsm", "cbx", "rchmetvzhuugd", "kgdskwvb", 577736960, "awwayqtsrny",
                ListViewType.ACTIVE_ONLY, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zywx", response.iterator().next().properties().description());
        Assertions.assertEquals("qxtkd", response.iterator().next().properties().tags().get("etnnefputlkszux"));
        Assertions.assertEquals("zs", response.iterator().next().properties().properties().get("wasfw"));
        Assertions.assertEquals(true, response.iterator().next().properties().isArchived());
        Assertions.assertEquals(true, response.iterator().next().properties().isAnonymous());
        Assertions.assertEquals("zebc", response.iterator().next().properties().image());
        Assertions.assertEquals("luedcmkryhh", response.iterator().next().properties().condaFile());
        Assertions.assertEquals("xzh", response.iterator().next().properties().build().contextUri());
        Assertions.assertEquals("lxwknooxdjklfsdn", response.iterator().next().properties().build().dockerfilePath());
        Assertions.assertEquals(OperatingSystemType.LINUX, response.iterator().next().properties().osType());
        Assertions.assertEquals("mmddslwnlg",
            response.iterator().next().properties().inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(1497973223,
            response.iterator().next().properties().inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("hmk",
            response.iterator().next().properties().inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(775061052,
            response.iterator().next().properties().inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("bnnnlpqdnns",
            response.iterator().next().properties().inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(2111031568,
            response.iterator().next().properties().inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(AutoRebuildSetting.DISABLED, response.iterator().next().properties().autoRebuild());
        Assertions.assertEquals("slwknrdvvmb", response.iterator().next().properties().stage());
    }
}
