// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BlockedTransformers;
import com.azure.resourcemanager.machinelearning.models.FeatureLags;
import com.azure.resourcemanager.machinelearning.models.FeaturizationMode;
import com.azure.resourcemanager.machinelearning.models.ForecastHorizon;
import com.azure.resourcemanager.machinelearning.models.Forecasting;
import com.azure.resourcemanager.machinelearning.models.ForecastingModels;
import com.azure.resourcemanager.machinelearning.models.ForecastingPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.ForecastingSettings;
import com.azure.resourcemanager.machinelearning.models.ForecastingTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NCrossValidations;
import com.azure.resourcemanager.machinelearning.models.Seasonality;
import com.azure.resourcemanager.machinelearning.models.ShortSeriesHandlingConfiguration;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import com.azure.resourcemanager.machinelearning.models.TableVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.TableVerticalLimitSettings;
import com.azure.resourcemanager.machinelearning.models.TargetAggregationFunction;
import com.azure.resourcemanager.machinelearning.models.TargetLags;
import com.azure.resourcemanager.machinelearning.models.TargetRollingWindowSize;
import com.azure.resourcemanager.machinelearning.models.UseStl;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ForecastingTests {
    @Test
    public void testDeserialize() {
        Forecasting model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"Forecasting\",\"forecastingSettings\":{\"countryOrRegionForHolidays\":\"jb\",\"cvStepSize\":391224209,\"featureLags\":\"Auto\",\"forecastHorizon\":{\"mode\":\"ForecastHorizon\"},\"frequency\":\"cjenkyhfqzvsqxf\",\"seasonality\":{\"mode\":\"Seasonality\"},\"shortSeriesHandlingConfig\":\"None\",\"targetAggregateFunction\":\"Mean\",\"targetLags\":{\"mode\":\"TargetLags\"},\"targetRollingWindowSize\":{\"mode\":\"TargetRollingWindowSize\"},\"timeColumnName\":\"qjhhhqxuwyvc\",\"timeSeriesIdColumnNames\":[\"yv\",\"vbsizusjszlbscm\",\"lzijiufehgmvflnw\"],\"useStl\":\"SeasonTrend\"},\"primaryMetric\":\"NormalizedMeanAbsoluteError\",\"trainingSettings\":{\"allowedTrainingAlgorithms\":[\"LassoLars\",\"SGD\"],\"blockedTrainingAlgorithms\":[\"GradientBoosting\"],\"enableDnnTraining\":true,\"enableModelExplainability\":false,\"enableOnnxCompatibleModels\":true,\"enableStackEnsemble\":false,\"enableVoteEnsemble\":true,\"ensembleModelDownloadTimeout\":\"PT129H53M6S\",\"stackEnsembleSettings\":{\"stackMetaLearnerTrainPercentage\":7.448081638131965,\"stackMetaLearnerType\":\"LinearRegression\"}},\"cvSplitColumnNames\":[\"xyjtcdxabbujf\"],\"featurizationSettings\":{\"blockedTransformers\":[\"TextTargetEncoder\",\"TfIdf\",\"LabelEncoder\",\"HashOneHotEncoder\"],\"columnNameAndTypes\":{\"e\":\"pxzuca\",\"a\":\"dwwnl\",\"gookrtalvnb\":\"wxudgn\",\"yrdnqod\":\"gpbemeluclvdjju\"},\"enableDnnFeaturization\":false,\"mode\":\"Off\",\"transformerParams\":{\"aqnvzoqgyipemchg\":[],\"sczuejdtxptlghwz\":[],\"mewjjstliuhq\":[]},\"datasetLanguage\":\"moaiancz\"},\"limitSettings\":{\"enableEarlyTermination\":true,\"exitScore\":29.24313972294792,\"maxConcurrentTrials\":1931817911,\"maxCoresPerTrial\":1846205215,\"maxTrials\":295871756,\"timeout\":\"PT148H37M12S\",\"trialTimeout\":\"PT29H28M17S\"},\"nCrossValidations\":{\"mode\":\"NCrossValidations\"},\"testData\":{\"jobInputType\":\"mltable\",\"mode\":\"EvalDownload\",\"uri\":\"iwkgfbqljnq\",\"description\":\"ychocokulehu\"},\"testDataSize\":27.225052837563812,\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadWriteMount\",\"uri\":\"aweyur\",\"description\":\"hy\"},\"validationDataSize\":15.436527655542577,\"weightColumnName\":\"vjuqdbrxmrgchb\",\"logVerbosity\":\"Debug\",\"targetColumnName\":\"iyfjjkbajbuscg\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadOnlyMount\",\"uri\":\"sioycblevpmcl\",\"description\":\"yxkyxlz\"}}")
                .toObject(Forecasting.class);
        Assertions.assertEquals(LogVerbosity.DEBUG, model.logVerbosity());
        Assertions.assertEquals("iyfjjkbajbuscg", model.targetColumnName());
        Assertions.assertEquals("yxkyxlz", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("sioycblevpmcl", model.trainingData().uri());
        Assertions.assertEquals("jb", model.forecastingSettings().countryOrRegionForHolidays());
        Assertions.assertEquals(391224209, model.forecastingSettings().cvStepSize());
        Assertions.assertEquals(FeatureLags.AUTO, model.forecastingSettings().featureLags());
        Assertions.assertEquals("cjenkyhfqzvsqxf", model.forecastingSettings().frequency());
        Assertions
            .assertEquals(
                ShortSeriesHandlingConfiguration.NONE, model.forecastingSettings().shortSeriesHandlingConfig());
        Assertions.assertEquals(TargetAggregationFunction.MEAN, model.forecastingSettings().targetAggregateFunction());
        Assertions.assertEquals("qjhhhqxuwyvc", model.forecastingSettings().timeColumnName());
        Assertions.assertEquals("yv", model.forecastingSettings().timeSeriesIdColumnNames().get(0));
        Assertions.assertEquals(UseStl.SEASON_TREND, model.forecastingSettings().useStl());
        Assertions.assertEquals(ForecastingPrimaryMetrics.NORMALIZED_MEAN_ABSOLUTE_ERROR, model.primaryMetric());
        Assertions.assertEquals(true, model.trainingSettings().enableDnnTraining());
        Assertions.assertEquals(false, model.trainingSettings().enableModelExplainability());
        Assertions.assertEquals(true, model.trainingSettings().enableOnnxCompatibleModels());
        Assertions.assertEquals(false, model.trainingSettings().enableStackEnsemble());
        Assertions.assertEquals(true, model.trainingSettings().enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT129H53M6S"), model.trainingSettings().ensembleModelDownloadTimeout());
        Assertions
            .assertEquals(
                7.448081638131965D, model.trainingSettings().stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions
            .assertEquals(
                StackMetaLearnerType.LINEAR_REGRESSION,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerType());
        Assertions
            .assertEquals(ForecastingModels.LASSO_LARS, model.trainingSettings().allowedTrainingAlgorithms().get(0));
        Assertions
            .assertEquals(
                ForecastingModels.GRADIENT_BOOSTING, model.trainingSettings().blockedTrainingAlgorithms().get(0));
        Assertions.assertEquals("xyjtcdxabbujf", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("moaiancz", model.featurizationSettings().datasetLanguage());
        Assertions
            .assertEquals(
                BlockedTransformers.TEXT_TARGET_ENCODER, model.featurizationSettings().blockedTransformers().get(0));
        Assertions.assertEquals("pxzuca", model.featurizationSettings().columnNameAndTypes().get("e"));
        Assertions.assertEquals(false, model.featurizationSettings().enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.OFF, model.featurizationSettings().mode());
        Assertions.assertEquals(true, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals(29.24313972294792D, model.limitSettings().exitScore());
        Assertions.assertEquals(1931817911, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1846205215, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(295871756, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT148H37M12S"), model.limitSettings().timeout());
        Assertions.assertEquals(Duration.parse("PT29H28M17S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals("ychocokulehu", model.testData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.testData().mode());
        Assertions.assertEquals("iwkgfbqljnq", model.testData().uri());
        Assertions.assertEquals(27.225052837563812D, model.testDataSize());
        Assertions.assertEquals("hy", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("aweyur", model.validationData().uri());
        Assertions.assertEquals(15.436527655542577D, model.validationDataSize());
        Assertions.assertEquals("vjuqdbrxmrgchb", model.weightColumnName());
    }

    @Test
    public void testSerialize() {
        Forecasting model =
            new Forecasting()
                .withLogVerbosity(LogVerbosity.DEBUG)
                .withTargetColumnName("iyfjjkbajbuscg")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("yxkyxlz")
                        .withMode(InputDeliveryMode.READ_ONLY_MOUNT)
                        .withUri("sioycblevpmcl"))
                .withForecastingSettings(
                    new ForecastingSettings()
                        .withCountryOrRegionForHolidays("jb")
                        .withCvStepSize(391224209)
                        .withFeatureLags(FeatureLags.AUTO)
                        .withForecastHorizon(new ForecastHorizon())
                        .withFrequency("cjenkyhfqzvsqxf")
                        .withSeasonality(new Seasonality())
                        .withShortSeriesHandlingConfig(ShortSeriesHandlingConfiguration.NONE)
                        .withTargetAggregateFunction(TargetAggregationFunction.MEAN)
                        .withTargetLags(new TargetLags())
                        .withTargetRollingWindowSize(new TargetRollingWindowSize())
                        .withTimeColumnName("qjhhhqxuwyvc")
                        .withTimeSeriesIdColumnNames(Arrays.asList("yv", "vbsizusjszlbscm", "lzijiufehgmvflnw"))
                        .withUseStl(UseStl.SEASON_TREND))
                .withPrimaryMetric(ForecastingPrimaryMetrics.NORMALIZED_MEAN_ABSOLUTE_ERROR)
                .withTrainingSettings(
                    new ForecastingTrainingSettings()
                        .withEnableDnnTraining(true)
                        .withEnableModelExplainability(false)
                        .withEnableOnnxCompatibleModels(true)
                        .withEnableStackEnsemble(false)
                        .withEnableVoteEnsemble(true)
                        .withEnsembleModelDownloadTimeout(Duration.parse("PT129H53M6S"))
                        .withStackEnsembleSettings(
                            new StackEnsembleSettings()
                                .withStackMetaLearnerTrainPercentage(7.448081638131965D)
                                .withStackMetaLearnerType(StackMetaLearnerType.LINEAR_REGRESSION))
                        .withAllowedTrainingAlgorithms(
                            Arrays.asList(ForecastingModels.LASSO_LARS, ForecastingModels.SGD))
                        .withBlockedTrainingAlgorithms(Arrays.asList(ForecastingModels.GRADIENT_BOOSTING)))
                .withCvSplitColumnNames(Arrays.asList("xyjtcdxabbujf"))
                .withFeaturizationSettings(
                    new TableVerticalFeaturizationSettings()
                        .withDatasetLanguage("moaiancz")
                        .withBlockedTransformers(
                            Arrays
                                .asList(
                                    BlockedTransformers.TEXT_TARGET_ENCODER,
                                    BlockedTransformers.TF_IDF,
                                    BlockedTransformers.LABEL_ENCODER,
                                    BlockedTransformers.HASH_ONE_HOT_ENCODER))
                        .withColumnNameAndTypes(
                            mapOf("e", "pxzuca", "a", "dwwnl", "gookrtalvnb", "wxudgn", "yrdnqod", "gpbemeluclvdjju"))
                        .withEnableDnnFeaturization(false)
                        .withMode(FeaturizationMode.OFF)
                        .withTransformerParams(
                            mapOf(
                                "aqnvzoqgyipemchg",
                                Arrays.asList(),
                                "sczuejdtxptlghwz",
                                Arrays.asList(),
                                "mewjjstliuhq",
                                Arrays.asList())))
                .withLimitSettings(
                    new TableVerticalLimitSettings()
                        .withEnableEarlyTermination(true)
                        .withExitScore(29.24313972294792D)
                        .withMaxConcurrentTrials(1931817911)
                        .withMaxCoresPerTrial(1846205215)
                        .withMaxTrials(295871756)
                        .withTimeout(Duration.parse("PT148H37M12S"))
                        .withTrialTimeout(Duration.parse("PT29H28M17S")))
                .withNCrossValidations(new NCrossValidations())
                .withTestData(
                    new MLTableJobInput()
                        .withDescription("ychocokulehu")
                        .withMode(InputDeliveryMode.EVAL_DOWNLOAD)
                        .withUri("iwkgfbqljnq"))
                .withTestDataSize(27.225052837563812D)
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("hy")
                        .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                        .withUri("aweyur"))
                .withValidationDataSize(15.436527655542577D)
                .withWeightColumnName("vjuqdbrxmrgchb");
        model = BinaryData.fromObject(model).toObject(Forecasting.class);
        Assertions.assertEquals(LogVerbosity.DEBUG, model.logVerbosity());
        Assertions.assertEquals("iyfjjkbajbuscg", model.targetColumnName());
        Assertions.assertEquals("yxkyxlz", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("sioycblevpmcl", model.trainingData().uri());
        Assertions.assertEquals("jb", model.forecastingSettings().countryOrRegionForHolidays());
        Assertions.assertEquals(391224209, model.forecastingSettings().cvStepSize());
        Assertions.assertEquals(FeatureLags.AUTO, model.forecastingSettings().featureLags());
        Assertions.assertEquals("cjenkyhfqzvsqxf", model.forecastingSettings().frequency());
        Assertions
            .assertEquals(
                ShortSeriesHandlingConfiguration.NONE, model.forecastingSettings().shortSeriesHandlingConfig());
        Assertions.assertEquals(TargetAggregationFunction.MEAN, model.forecastingSettings().targetAggregateFunction());
        Assertions.assertEquals("qjhhhqxuwyvc", model.forecastingSettings().timeColumnName());
        Assertions.assertEquals("yv", model.forecastingSettings().timeSeriesIdColumnNames().get(0));
        Assertions.assertEquals(UseStl.SEASON_TREND, model.forecastingSettings().useStl());
        Assertions.assertEquals(ForecastingPrimaryMetrics.NORMALIZED_MEAN_ABSOLUTE_ERROR, model.primaryMetric());
        Assertions.assertEquals(true, model.trainingSettings().enableDnnTraining());
        Assertions.assertEquals(false, model.trainingSettings().enableModelExplainability());
        Assertions.assertEquals(true, model.trainingSettings().enableOnnxCompatibleModels());
        Assertions.assertEquals(false, model.trainingSettings().enableStackEnsemble());
        Assertions.assertEquals(true, model.trainingSettings().enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT129H53M6S"), model.trainingSettings().ensembleModelDownloadTimeout());
        Assertions
            .assertEquals(
                7.448081638131965D, model.trainingSettings().stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions
            .assertEquals(
                StackMetaLearnerType.LINEAR_REGRESSION,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerType());
        Assertions
            .assertEquals(ForecastingModels.LASSO_LARS, model.trainingSettings().allowedTrainingAlgorithms().get(0));
        Assertions
            .assertEquals(
                ForecastingModels.GRADIENT_BOOSTING, model.trainingSettings().blockedTrainingAlgorithms().get(0));
        Assertions.assertEquals("xyjtcdxabbujf", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("moaiancz", model.featurizationSettings().datasetLanguage());
        Assertions
            .assertEquals(
                BlockedTransformers.TEXT_TARGET_ENCODER, model.featurizationSettings().blockedTransformers().get(0));
        Assertions.assertEquals("pxzuca", model.featurizationSettings().columnNameAndTypes().get("e"));
        Assertions.assertEquals(false, model.featurizationSettings().enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.OFF, model.featurizationSettings().mode());
        Assertions.assertEquals(true, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals(29.24313972294792D, model.limitSettings().exitScore());
        Assertions.assertEquals(1931817911, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1846205215, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(295871756, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT148H37M12S"), model.limitSettings().timeout());
        Assertions.assertEquals(Duration.parse("PT29H28M17S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals("ychocokulehu", model.testData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.testData().mode());
        Assertions.assertEquals("iwkgfbqljnq", model.testData().uri());
        Assertions.assertEquals(27.225052837563812D, model.testDataSize());
        Assertions.assertEquals("hy", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("aweyur", model.validationData().uri());
        Assertions.assertEquals(15.436527655542577D, model.validationDataSize());
        Assertions.assertEquals("vjuqdbrxmrgchb", model.weightColumnName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
