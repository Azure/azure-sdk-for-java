// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BlockedTransformers;
import com.azure.resourcemanager.machinelearning.models.ColumnTransformer;
import com.azure.resourcemanager.machinelearning.models.FeatureLags;
import com.azure.resourcemanager.machinelearning.models.FeaturizationMode;
import com.azure.resourcemanager.machinelearning.models.ForecastHorizon;
import com.azure.resourcemanager.machinelearning.models.Forecasting;
import com.azure.resourcemanager.machinelearning.models.ForecastingModels;
import com.azure.resourcemanager.machinelearning.models.ForecastingPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.ForecastingSettings;
import com.azure.resourcemanager.machinelearning.models.ForecastingTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NCrossValidations;
import com.azure.resourcemanager.machinelearning.models.Seasonality;
import com.azure.resourcemanager.machinelearning.models.ShortSeriesHandlingConfiguration;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import com.azure.resourcemanager.machinelearning.models.TableVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.TableVerticalLimitSettings;
import com.azure.resourcemanager.machinelearning.models.TargetAggregationFunction;
import com.azure.resourcemanager.machinelearning.models.TargetLags;
import com.azure.resourcemanager.machinelearning.models.TargetRollingWindowSize;
import com.azure.resourcemanager.machinelearning.models.UseStl;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForecastingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Forecasting model = BinaryData.fromString(
            "{\"taskType\":\"Forecasting\",\"primaryMetric\":\"SpearmanCorrelation\",\"forecastingSettings\":{\"countryOrRegionForHolidays\":\"rqoemwsieeailwdq\",\"timeColumnName\":\"fydeotmfxlkd\",\"targetLags\":{\"mode\":\"TargetLags\"},\"targetRollingWindowSize\":{\"mode\":\"TargetRollingWindowSize\"},\"forecastHorizon\":{\"mode\":\"ForecastHorizon\"},\"timeSeriesIdColumnNames\":[\"mkuuyiuy\",\"afixlxicwgpthd\",\"fmfzcfasfodropa\",\"v\"],\"frequency\":\"tw\",\"featureLags\":\"None\",\"seasonality\":{\"mode\":\"Seasonality\"},\"shortSeriesHandlingConfig\":\"Auto\",\"useStl\":\"None\",\"targetAggregateFunction\":\"Mean\",\"cvStepSize\":1700774376},\"trainingSettings\":{\"allowedTrainingAlgorithms\":[\"ExtremeRandomTrees\",\"SeasonalNaive\",\"TCNForecaster\",\"LassoLars\"],\"blockedTrainingAlgorithms\":[\"GradientBoosting\",\"XGBoostRegressor\",\"ElasticNet\"],\"enableOnnxCompatibleModels\":true,\"stackEnsembleSettings\":{\"stackMetaLearnerType\":\"ElasticNet\",\"stackMetaLearnerTrainPercentage\":66.84514235526332,\"stackMetaLearnerKWargs\":\"dataxlzmiyddee\"},\"enableStackEnsemble\":true,\"enableVoteEnsemble\":false,\"ensembleModelDownloadTimeout\":\"PT182H54M43S\",\"enableModelExplainability\":true,\"enableDnnTraining\":true},\"limitSettings\":{\"maxTrials\":656139727,\"trialTimeout\":\"PT61H59M4S\",\"timeout\":\"PT204H44M19S\",\"maxConcurrentTrials\":1030669826,\"maxCoresPerTrial\":1032949821,\"exitScore\":48.61053148417434,\"enableEarlyTermination\":true},\"nCrossValidations\":{\"mode\":\"NCrossValidations\"},\"cvSplitColumnNames\":[\"pxyazk\",\"pirgzxvbczwhy\"],\"weightColumnName\":\"bthmsritj\",\"validationData\":{\"jobInputType\":\"mltable\",\"uri\":\"iggrunoz\",\"mode\":\"Direct\",\"description\":\"ljthoiv\"},\"testData\":{\"jobInputType\":\"mltable\",\"uri\":\"wsn\",\"mode\":\"EvalMount\",\"description\":\"ihscjvakmhzbhw\"},\"validationDataSize\":28.61316181159782,\"testDataSize\":4.746102486575632,\"featurizationSettings\":{\"mode\":\"Auto\",\"blockedTransformers\":[\"WordEmbedding\"],\"columnNameAndTypes\":{\"fzs\":\"nuqqkotauratnicp\",\"yrletndqlmf\":\"le\",\"evnoqayrehjuqwva\":\"ggnbbuypwovvvsfl\",\"enqqzlxnqzu\":\"xrlzhpziha\"},\"transformerParams\":{\"gzsdtmwbyorjp\":[{\"fields\":[\"bg\",\"kfwmjcwtewfh\",\"wyrkbrehzlrynjpc\",\"amkaepl\"],\"parameters\":\"datajub\"},{\"fields\":[\"ywevtjrieikmw\",\"aoklfnis\",\"xgucbmtredscnn\",\"tjcyyuv\"],\"parameters\":\"datarx\"},{\"fields\":[\"lecwwtz\"],\"parameters\":\"datacloyhy\"},{\"fields\":[\"idhz\"],\"parameters\":\"datare\"}],\"ifq\":[{\"fields\":[\"ychakvy\",\"fbqvumkxqj\",\"iuepmaxfnzlpqmp\",\"t\"],\"parameters\":\"datafvulb\"},{\"fields\":[\"tuxy\"],\"parameters\":\"datahfcaeo\"}],\"nivrxpfduio\":[{\"fields\":[\"flobhahq\",\"omfecorkfro\",\"gbmxldjmz\",\"zbjesylslur\"],\"parameters\":\"datafygpnyhgd\"},{\"fields\":[\"sc\",\"gqyvouprsytqzss\"],\"parameters\":\"datamgw\"}],\"tewuvcy\":[{\"fields\":[\"qvpbfjpoqzucfzl\",\"czdquurbo\",\"mvhvz\"],\"parameters\":\"datal\"},{\"fields\":[\"nqujywz\",\"qyggmnwsvhb\",\"gqiwy\"],\"parameters\":\"datatobdrrpnre\"},{\"fields\":[\"nsbfjhhlwtpkvege\",\"tt\",\"zkgtzqn\"],\"parameters\":\"datas\"}]},\"enableDnnFeaturization\":true,\"datasetLanguage\":\"fjxflpditfno\"},\"logVerbosity\":\"Warning\",\"trainingData\":{\"jobInputType\":\"mltable\",\"uri\":\"yuxlvrhprrv\",\"mode\":\"EvalMount\",\"description\":\"leqflv\"},\"targetColumnName\":\"rv\"}")
            .toObject(Forecasting.class);
        Assertions.assertEquals(LogVerbosity.WARNING, model.logVerbosity());
        Assertions.assertEquals("leqflv", model.trainingData().description());
        Assertions.assertEquals("yuxlvrhprrv", model.trainingData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("rv", model.targetColumnName());
        Assertions.assertEquals(ForecastingPrimaryMetrics.SPEARMAN_CORRELATION, model.primaryMetric());
        Assertions.assertEquals("rqoemwsieeailwdq", model.forecastingSettings().countryOrRegionForHolidays());
        Assertions.assertEquals("fydeotmfxlkd", model.forecastingSettings().timeColumnName());
        Assertions.assertEquals("mkuuyiuy", model.forecastingSettings().timeSeriesIdColumnNames().get(0));
        Assertions.assertEquals("tw", model.forecastingSettings().frequency());
        Assertions.assertEquals(FeatureLags.NONE, model.forecastingSettings().featureLags());
        Assertions.assertEquals(ShortSeriesHandlingConfiguration.AUTO,
            model.forecastingSettings().shortSeriesHandlingConfig());
        Assertions.assertEquals(UseStl.NONE, model.forecastingSettings().useStl());
        Assertions.assertEquals(TargetAggregationFunction.MEAN, model.forecastingSettings().targetAggregateFunction());
        Assertions.assertEquals(1700774376, model.forecastingSettings().cvStepSize());
        Assertions.assertEquals(true, model.trainingSettings().enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.ELASTIC_NET,
            model.trainingSettings().stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(66.84514235526332D,
            model.trainingSettings().stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(true, model.trainingSettings().enableStackEnsemble());
        Assertions.assertEquals(false, model.trainingSettings().enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT182H54M43S"),
            model.trainingSettings().ensembleModelDownloadTimeout());
        Assertions.assertEquals(true, model.trainingSettings().enableModelExplainability());
        Assertions.assertEquals(true, model.trainingSettings().enableDnnTraining());
        Assertions.assertEquals(ForecastingModels.EXTREME_RANDOM_TREES,
            model.trainingSettings().allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(ForecastingModels.GRADIENT_BOOSTING,
            model.trainingSettings().blockedTrainingAlgorithms().get(0));
        Assertions.assertEquals(656139727, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT61H59M4S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals(Duration.parse("PT204H44M19S"), model.limitSettings().timeout());
        Assertions.assertEquals(1030669826, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1032949821, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(48.61053148417434D, model.limitSettings().exitScore());
        Assertions.assertEquals(true, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals("pxyazk", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("bthmsritj", model.weightColumnName());
        Assertions.assertEquals("ljthoiv", model.validationData().description());
        Assertions.assertEquals("iggrunoz", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.validationData().mode());
        Assertions.assertEquals("ihscjvakmhzbhw", model.testData().description());
        Assertions.assertEquals("wsn", model.testData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.testData().mode());
        Assertions.assertEquals(28.61316181159782D, model.validationDataSize());
        Assertions.assertEquals(4.746102486575632D, model.testDataSize());
        Assertions.assertEquals("fjxflpditfno", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(FeaturizationMode.AUTO, model.featurizationSettings().mode());
        Assertions.assertEquals(BlockedTransformers.WORD_EMBEDDING,
            model.featurizationSettings().blockedTransformers().get(0));
        Assertions.assertEquals("nuqqkotauratnicp", model.featurizationSettings().columnNameAndTypes().get("fzs"));
        Assertions.assertEquals("bg",
            model.featurizationSettings().transformerParams().get("gzsdtmwbyorjp").get(0).fields().get(0));
        Assertions.assertEquals(true, model.featurizationSettings().enableDnnFeaturization());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Forecasting model = new Forecasting().withLogVerbosity(LogVerbosity.WARNING)
            .withTrainingData(new MLTableJobInput().withDescription("leqflv")
                .withUri("yuxlvrhprrv")
                .withMode(InputDeliveryMode.EVAL_MOUNT))
            .withTargetColumnName("rv")
            .withPrimaryMetric(ForecastingPrimaryMetrics.SPEARMAN_CORRELATION)
            .withForecastingSettings(new ForecastingSettings().withCountryOrRegionForHolidays("rqoemwsieeailwdq")
                .withTimeColumnName("fydeotmfxlkd")
                .withTargetLags(new TargetLags())
                .withTargetRollingWindowSize(new TargetRollingWindowSize())
                .withForecastHorizon(new ForecastHorizon())
                .withTimeSeriesIdColumnNames(Arrays.asList("mkuuyiuy", "afixlxicwgpthd", "fmfzcfasfodropa", "v"))
                .withFrequency("tw")
                .withFeatureLags(FeatureLags.NONE)
                .withSeasonality(new Seasonality())
                .withShortSeriesHandlingConfig(ShortSeriesHandlingConfiguration.AUTO)
                .withUseStl(UseStl.NONE)
                .withTargetAggregateFunction(TargetAggregationFunction.MEAN)
                .withCvStepSize(1700774376))
            .withTrainingSettings(new ForecastingTrainingSettings().withEnableOnnxCompatibleModels(true)
                .withStackEnsembleSettings(
                    new StackEnsembleSettings().withStackMetaLearnerType(StackMetaLearnerType.ELASTIC_NET)
                        .withStackMetaLearnerTrainPercentage(66.84514235526332D)
                        .withStackMetaLearnerKWargs("dataxlzmiyddee"))
                .withEnableStackEnsemble(true)
                .withEnableVoteEnsemble(false)
                .withEnsembleModelDownloadTimeout(Duration.parse("PT182H54M43S"))
                .withEnableModelExplainability(true)
                .withEnableDnnTraining(true)
                .withAllowedTrainingAlgorithms(Arrays.asList(ForecastingModels.EXTREME_RANDOM_TREES,
                    ForecastingModels.SEASONAL_NAIVE, ForecastingModels.TCNFORECASTER, ForecastingModels.LASSO_LARS))
                .withBlockedTrainingAlgorithms(Arrays.asList(ForecastingModels.GRADIENT_BOOSTING,
                    ForecastingModels.XGBOOST_REGRESSOR, ForecastingModels.ELASTIC_NET)))
            .withLimitSettings(new TableVerticalLimitSettings().withMaxTrials(656139727)
                .withTrialTimeout(Duration.parse("PT61H59M4S"))
                .withTimeout(Duration.parse("PT204H44M19S"))
                .withMaxConcurrentTrials(1030669826)
                .withMaxCoresPerTrial(1032949821)
                .withExitScore(48.61053148417434D)
                .withEnableEarlyTermination(true))
            .withNCrossValidations(new NCrossValidations())
            .withCvSplitColumnNames(Arrays.asList("pxyazk", "pirgzxvbczwhy"))
            .withWeightColumnName("bthmsritj")
            .withValidationData(
                new MLTableJobInput().withDescription("ljthoiv").withUri("iggrunoz").withMode(InputDeliveryMode.DIRECT))
            .withTestData(new MLTableJobInput().withDescription("ihscjvakmhzbhw")
                .withUri("wsn")
                .withMode(InputDeliveryMode.EVAL_MOUNT))
            .withValidationDataSize(28.61316181159782D)
            .withTestDataSize(4.746102486575632D)
            .withFeaturizationSettings(new TableVerticalFeaturizationSettings().withDatasetLanguage("fjxflpditfno")
                .withMode(FeaturizationMode.AUTO)
                .withBlockedTransformers(Arrays.asList(BlockedTransformers.WORD_EMBEDDING))
                .withColumnNameAndTypes(mapOf("fzs", "nuqqkotauratnicp", "yrletndqlmf", "le", "evnoqayrehjuqwva",
                    "ggnbbuypwovvvsfl", "enqqzlxnqzu", "xrlzhpziha"))
                .withTransformerParams(mapOf("gzsdtmwbyorjp",
                    Arrays.asList(
                        new ColumnTransformer()
                            .withFields(Arrays.asList("bg", "kfwmjcwtewfh", "wyrkbrehzlrynjpc", "amkaepl"))
                            .withParameters("datajub"),
                        new ColumnTransformer()
                            .withFields(Arrays.asList("ywevtjrieikmw", "aoklfnis", "xgucbmtredscnn", "tjcyyuv"))
                            .withParameters("datarx"),
                        new ColumnTransformer().withFields(Arrays.asList("lecwwtz")).withParameters("datacloyhy"),
                        new ColumnTransformer().withFields(Arrays.asList("idhz")).withParameters("datare")),
                    "ifq",
                    Arrays.asList(
                        new ColumnTransformer()
                            .withFields(Arrays.asList("ychakvy", "fbqvumkxqj", "iuepmaxfnzlpqmp", "t"))
                            .withParameters("datafvulb"),
                        new ColumnTransformer().withFields(Arrays.asList("tuxy")).withParameters("datahfcaeo")),
                    "nivrxpfduio",
                    Arrays.asList(
                        new ColumnTransformer()
                            .withFields(Arrays.asList("flobhahq", "omfecorkfro", "gbmxldjmz", "zbjesylslur"))
                            .withParameters("datafygpnyhgd"),
                        new ColumnTransformer().withFields(Arrays.asList("sc", "gqyvouprsytqzss"))
                            .withParameters("datamgw")),
                    "tewuvcy",
                    Arrays.asList(
                        new ColumnTransformer().withFields(Arrays.asList("qvpbfjpoqzucfzl", "czdquurbo", "mvhvz"))
                            .withParameters("datal"),
                        new ColumnTransformer().withFields(Arrays.asList("nqujywz", "qyggmnwsvhb", "gqiwy"))
                            .withParameters("datatobdrrpnre"),
                        new ColumnTransformer().withFields(Arrays.asList("nsbfjhhlwtpkvege", "tt", "zkgtzqn"))
                            .withParameters("datas"))))
                .withEnableDnnFeaturization(true));
        model = BinaryData.fromObject(model).toObject(Forecasting.class);
        Assertions.assertEquals(LogVerbosity.WARNING, model.logVerbosity());
        Assertions.assertEquals("leqflv", model.trainingData().description());
        Assertions.assertEquals("yuxlvrhprrv", model.trainingData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("rv", model.targetColumnName());
        Assertions.assertEquals(ForecastingPrimaryMetrics.SPEARMAN_CORRELATION, model.primaryMetric());
        Assertions.assertEquals("rqoemwsieeailwdq", model.forecastingSettings().countryOrRegionForHolidays());
        Assertions.assertEquals("fydeotmfxlkd", model.forecastingSettings().timeColumnName());
        Assertions.assertEquals("mkuuyiuy", model.forecastingSettings().timeSeriesIdColumnNames().get(0));
        Assertions.assertEquals("tw", model.forecastingSettings().frequency());
        Assertions.assertEquals(FeatureLags.NONE, model.forecastingSettings().featureLags());
        Assertions.assertEquals(ShortSeriesHandlingConfiguration.AUTO,
            model.forecastingSettings().shortSeriesHandlingConfig());
        Assertions.assertEquals(UseStl.NONE, model.forecastingSettings().useStl());
        Assertions.assertEquals(TargetAggregationFunction.MEAN, model.forecastingSettings().targetAggregateFunction());
        Assertions.assertEquals(1700774376, model.forecastingSettings().cvStepSize());
        Assertions.assertEquals(true, model.trainingSettings().enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.ELASTIC_NET,
            model.trainingSettings().stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(66.84514235526332D,
            model.trainingSettings().stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(true, model.trainingSettings().enableStackEnsemble());
        Assertions.assertEquals(false, model.trainingSettings().enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT182H54M43S"),
            model.trainingSettings().ensembleModelDownloadTimeout());
        Assertions.assertEquals(true, model.trainingSettings().enableModelExplainability());
        Assertions.assertEquals(true, model.trainingSettings().enableDnnTraining());
        Assertions.assertEquals(ForecastingModels.EXTREME_RANDOM_TREES,
            model.trainingSettings().allowedTrainingAlgorithms().get(0));
        Assertions.assertEquals(ForecastingModels.GRADIENT_BOOSTING,
            model.trainingSettings().blockedTrainingAlgorithms().get(0));
        Assertions.assertEquals(656139727, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT61H59M4S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals(Duration.parse("PT204H44M19S"), model.limitSettings().timeout());
        Assertions.assertEquals(1030669826, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1032949821, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(48.61053148417434D, model.limitSettings().exitScore());
        Assertions.assertEquals(true, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals("pxyazk", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("bthmsritj", model.weightColumnName());
        Assertions.assertEquals("ljthoiv", model.validationData().description());
        Assertions.assertEquals("iggrunoz", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.validationData().mode());
        Assertions.assertEquals("ihscjvakmhzbhw", model.testData().description());
        Assertions.assertEquals("wsn", model.testData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.testData().mode());
        Assertions.assertEquals(28.61316181159782D, model.validationDataSize());
        Assertions.assertEquals(4.746102486575632D, model.testDataSize());
        Assertions.assertEquals("fjxflpditfno", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(FeaturizationMode.AUTO, model.featurizationSettings().mode());
        Assertions.assertEquals(BlockedTransformers.WORD_EMBEDDING,
            model.featurizationSettings().blockedTransformers().get(0));
        Assertions.assertEquals("nuqqkotauratnicp", model.featurizationSettings().columnNameAndTypes().get("fzs"));
        Assertions.assertEquals("bg",
            model.featurizationSettings().transformerParams().get("gzsdtmwbyorjp").get(0).fields().get(0));
        Assertions.assertEquals(true, model.featurizationSettings().enableDnnFeaturization());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
