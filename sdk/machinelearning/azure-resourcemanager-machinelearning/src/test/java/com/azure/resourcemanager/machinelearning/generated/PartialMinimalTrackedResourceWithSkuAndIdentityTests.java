// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PartialManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.PartialMinimalTrackedResourceWithSkuAndIdentity;
import com.azure.resourcemanager.machinelearning.models.PartialSku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartialMinimalTrackedResourceWithSkuAndIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartialMinimalTrackedResourceWithSkuAndIdentity model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"ljuxl\",\"tier\":\"Free\",\"size\":\"tvtfjms\",\"family\":\"chmaiubavlzwpvgm\",\"capacity\":30040168},\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"rokzrthqetwpq\":\"datagokedgjqafkm\"}},\"tags\":{\"ixiezeag\":\"aoznq\",\"hfpjstlzmbls\":\"ceituuge\"}}")
            .toObject(PartialMinimalTrackedResourceWithSkuAndIdentity.class);
        Assertions.assertEquals("aoznq", model.tags().get("ixiezeag"));
        Assertions.assertEquals("ljuxl", model.sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.sku().tier());
        Assertions.assertEquals("tvtfjms", model.sku().size());
        Assertions.assertEquals("chmaiubavlzwpvgm", model.sku().family());
        Assertions.assertEquals(30040168, model.sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartialMinimalTrackedResourceWithSkuAndIdentity model = new PartialMinimalTrackedResourceWithSkuAndIdentity()
            .withTags(mapOf("ixiezeag", "aoznq", "hfpjstlzmbls", "ceituuge"))
            .withSku(new PartialSku().withName("ljuxl")
                .withTier(SkuTier.FREE)
                .withSize("tvtfjms")
                .withFamily("chmaiubavlzwpvgm")
                .withCapacity(30040168))
            .withIdentity(
                new PartialManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("rokzrthqetwpq", "datagokedgjqafkm")));
        model = BinaryData.fromObject(model).toObject(PartialMinimalTrackedResourceWithSkuAndIdentity.class);
        Assertions.assertEquals("aoznq", model.tags().get("ixiezeag"));
        Assertions.assertEquals("ljuxl", model.sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.sku().tier());
        Assertions.assertEquals("tvtfjms", model.sku().size());
        Assertions.assertEquals("chmaiubavlzwpvgm", model.sku().family());
        Assertions.assertEquals(30040168, model.sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
