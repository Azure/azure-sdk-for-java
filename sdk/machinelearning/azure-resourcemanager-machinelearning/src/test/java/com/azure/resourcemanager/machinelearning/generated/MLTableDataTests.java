// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.MLTableData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MLTableDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MLTableData model = BinaryData.fromString(
            "{\"dataType\":\"mltable\",\"referencedUris\":[\"xdfsfvkjc\",\"m\"],\"dataUri\":\"rsvxphtjnhptj\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"z\",\"tags\":{\"rgyzcslazp\":\"mydtdtftmizuzjd\",\"teagbgac\":\"kqoyimxpggk\",\"lpbybkisb\":\"qpjuytvude\",\"glpwdjr\":\"ifm\"},\"properties\":{\"ttuhaaax\":\"fshznu\",\"xstowagehxuihwes\":\"dcdjmdkqtxfrmbe\",\"kncypmte\":\"tjaqgbl\",\"hrfbrj\":\"spsaneyvaerpiob\"}}")
            .toObject(MLTableData.class);
        Assertions.assertEquals("z", model.description());
        Assertions.assertEquals("mydtdtftmizuzjd", model.tags().get("rgyzcslazp"));
        Assertions.assertEquals("fshznu", model.properties().get("ttuhaaax"));
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals("rsvxphtjnhptj", model.dataUri());
        Assertions.assertEquals("xdfsfvkjc", model.referencedUris().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MLTableData model = new MLTableData().withDescription("z")
            .withTags(mapOf("rgyzcslazp", "mydtdtftmizuzjd", "teagbgac", "kqoyimxpggk", "lpbybkisb", "qpjuytvude",
                "glpwdjr", "ifm"))
            .withProperties(mapOf("ttuhaaax", "fshznu", "xstowagehxuihwes", "dcdjmdkqtxfrmbe", "kncypmte", "tjaqgbl",
                "hrfbrj", "spsaneyvaerpiob"))
            .withIsArchived(false)
            .withIsAnonymous(true)
            .withDataUri("rsvxphtjnhptj")
            .withReferencedUris(Arrays.asList("xdfsfvkjc", "m"));
        model = BinaryData.fromObject(model).toObject(MLTableData.class);
        Assertions.assertEquals("z", model.description());
        Assertions.assertEquals("mydtdtftmizuzjd", model.tags().get("rgyzcslazp"));
        Assertions.assertEquals("fshznu", model.properties().get("ttuhaaax"));
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals("rsvxphtjnhptj", model.dataUri());
        Assertions.assertEquals("xdfsfvkjc", model.referencedUris().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
