// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.MLTableData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MLTableDataTests {
    @Test
    public void testDeserialize() {
        MLTableData model =
            BinaryData
                .fromString(
                    "{\"dataType\":\"mltable\",\"referencedUris\":[\"eswhd\",\"zydisnuep\",\"wyj\",\"nldpxottd\"],\"dataUri\":\"i\",\"isAnonymous\":false,\"isArchived\":false,\"description\":\"zjihweebiphr\",\"properties\":{\"w\":\"jw\",\"zybspijhfrzgdkk\":\"qsratjhd\"},\"tags\":{\"hsusmmor\":\"wu\"}}")
                .toObject(MLTableData.class);
        Assertions.assertEquals("zjihweebiphr", model.description());
        Assertions.assertEquals("jw", model.properties().get("w"));
        Assertions.assertEquals("wu", model.tags().get("hsusmmor"));
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals("i", model.dataUri());
        Assertions.assertEquals("eswhd", model.referencedUris().get(0));
    }

    @Test
    public void testSerialize() {
        MLTableData model =
            new MLTableData()
                .withDescription("zjihweebiphr")
                .withProperties(mapOf("w", "jw", "zybspijhfrzgdkk", "qsratjhd"))
                .withTags(mapOf("hsusmmor", "wu"))
                .withIsAnonymous(false)
                .withIsArchived(false)
                .withDataUri("i")
                .withReferencedUris(Arrays.asList("eswhd", "zydisnuep", "wyj", "nldpxottd"));
        model = BinaryData.fromObject(model).toObject(MLTableData.class);
        Assertions.assertEquals("zjihweebiphr", model.description());
        Assertions.assertEquals("jw", model.properties().get("w"));
        Assertions.assertEquals("wu", model.tags().get("hsusmmor"));
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals("i", model.dataUri());
        Assertions.assertEquals("eswhd", model.referencedUris().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
