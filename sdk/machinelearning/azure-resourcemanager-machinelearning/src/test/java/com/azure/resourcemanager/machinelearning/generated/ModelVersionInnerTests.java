// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ModelVersionInner;
import com.azure.resourcemanager.machinelearning.models.FlavorData;
import com.azure.resourcemanager.machinelearning.models.ModelVersionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ModelVersionInnerTests {
    @Test
    public void testDeserialize() {
        ModelVersionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"flavors\":{\"tqlkz\":{\"data\":{}}},\"jobName\":\"gnitgvkxlzyq\",\"modelType\":\"fegcea\",\"modelUri\":\"xwh\",\"isAnonymous\":true,\"isArchived\":false,\"description\":\"oyqhlwig\",\"properties\":{\"uwasqvd\":\"bkbxgomfa\",\"y\":\"e\",\"imsidxasicddyvvj\":\"uxakjsqzhzbezk\"},\"tags\":{\"atjeaahh\":\"fmocwahpq\"}},\"id\":\"hhnakzybbj\",\"name\":\"idjks\",\"type\":\"xkyxvxevblbj\"}")
                .toObject(ModelVersionInner.class);
        Assertions.assertEquals("oyqhlwig", model.properties().description());
        Assertions.assertEquals("bkbxgomfa", model.properties().properties().get("uwasqvd"));
        Assertions.assertEquals("fmocwahpq", model.properties().tags().get("atjeaahh"));
        Assertions.assertEquals(true, model.properties().isAnonymous());
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals("gnitgvkxlzyq", model.properties().jobName());
        Assertions.assertEquals("fegcea", model.properties().modelType());
        Assertions.assertEquals("xwh", model.properties().modelUri());
    }

    @Test
    public void testSerialize() {
        ModelVersionInner model =
            new ModelVersionInner()
                .withProperties(
                    new ModelVersionProperties()
                        .withDescription("oyqhlwig")
                        .withProperties(mapOf("uwasqvd", "bkbxgomfa", "y", "e", "imsidxasicddyvvj", "uxakjsqzhzbezk"))
                        .withTags(mapOf("atjeaahh", "fmocwahpq"))
                        .withIsAnonymous(true)
                        .withIsArchived(false)
                        .withFlavors(mapOf("tqlkz", new FlavorData().withData(mapOf())))
                        .withJobName("gnitgvkxlzyq")
                        .withModelType("fegcea")
                        .withModelUri("xwh"));
        model = BinaryData.fromObject(model).toObject(ModelVersionInner.class);
        Assertions.assertEquals("oyqhlwig", model.properties().description());
        Assertions.assertEquals("bkbxgomfa", model.properties().properties().get("uwasqvd"));
        Assertions.assertEquals("fmocwahpq", model.properties().tags().get("atjeaahh"));
        Assertions.assertEquals(true, model.properties().isAnonymous());
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals("gnitgvkxlzyq", model.properties().jobName());
        Assertions.assertEquals("fegcea", model.properties().modelType());
        Assertions.assertEquals("xwh", model.properties().modelUri());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
