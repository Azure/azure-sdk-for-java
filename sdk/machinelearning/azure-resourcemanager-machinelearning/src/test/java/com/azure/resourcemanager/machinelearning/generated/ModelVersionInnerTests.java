// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ModelVersionInner;
import com.azure.resourcemanager.machinelearning.models.FlavorData;
import com.azure.resourcemanager.machinelearning.models.ModelVersionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ModelVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ModelVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"flavors\":{\"zcyjtot\":{\"data\":{\"ftpmdtzfjltfv\":\"lgorb\"}}},\"modelType\":\"opv\",\"modelUri\":\"dbzqgqqihed\",\"jobName\":\"qwthmky\",\"provisioningState\":\"Deleting\",\"stage\":\"sihsgqcwdhohsd\",\"isArchived\":false,\"isAnonymous\":false,\"description\":\"ufcohdxbz\",\"tags\":{\"qxeysko\":\"muapcvhdbevw\",\"z\":\"qzinkfkbg\",\"vkzqk\":\"owxeqocljmy\"},\"properties\":{\"zrxcczurt\":\"okbzef\",\"pqxbkwvzgnzvdf\":\"e\"}},\"id\":\"d\",\"name\":\"xzmqpnodawop\",\"type\":\"hewjptmcgsbost\"}")
            .toObject(ModelVersionInner.class);
        Assertions.assertEquals("ufcohdxbz", model.properties().description());
        Assertions.assertEquals("muapcvhdbevw", model.properties().tags().get("qxeysko"));
        Assertions.assertEquals("okbzef", model.properties().properties().get("zrxcczurt"));
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals(false, model.properties().isAnonymous());
        Assertions.assertEquals("lgorb", model.properties().flavors().get("zcyjtot").data().get("ftpmdtzfjltfv"));
        Assertions.assertEquals("opv", model.properties().modelType());
        Assertions.assertEquals("dbzqgqqihed", model.properties().modelUri());
        Assertions.assertEquals("qwthmky", model.properties().jobName());
        Assertions.assertEquals("sihsgqcwdhohsd", model.properties().stage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ModelVersionInner model
            = new ModelVersionInner().withProperties(new ModelVersionProperties().withDescription("ufcohdxbz")
                .withTags(mapOf("qxeysko", "muapcvhdbevw", "z", "qzinkfkbg", "vkzqk", "owxeqocljmy"))
                .withProperties(mapOf("zrxcczurt", "okbzef", "pqxbkwvzgnzvdf", "e"))
                .withIsArchived(false)
                .withIsAnonymous(false)
                .withFlavors(mapOf("zcyjtot", new FlavorData().withData(mapOf("ftpmdtzfjltfv", "lgorb"))))
                .withModelType("opv")
                .withModelUri("dbzqgqqihed")
                .withJobName("qwthmky")
                .withStage("sihsgqcwdhohsd"));
        model = BinaryData.fromObject(model).toObject(ModelVersionInner.class);
        Assertions.assertEquals("ufcohdxbz", model.properties().description());
        Assertions.assertEquals("muapcvhdbevw", model.properties().tags().get("qxeysko"));
        Assertions.assertEquals("okbzef", model.properties().properties().get("zrxcczurt"));
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals(false, model.properties().isAnonymous());
        Assertions.assertEquals("lgorb", model.properties().flavors().get("zcyjtot").data().get("ftpmdtzfjltfv"));
        Assertions.assertEquals("opv", model.properties().modelType());
        Assertions.assertEquals("dbzqgqqihed", model.properties().modelUri());
        Assertions.assertEquals("qwthmky", model.properties().jobName());
        Assertions.assertEquals("sihsgqcwdhohsd", model.properties().stage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
