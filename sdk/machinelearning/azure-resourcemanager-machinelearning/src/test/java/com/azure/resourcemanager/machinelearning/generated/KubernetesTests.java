// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchema;
import com.azure.resourcemanager.machinelearning.models.Kubernetes;
import com.azure.resourcemanager.machinelearning.models.KubernetesProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class KubernetesTests {
    @Test
    public void testDeserialize() {
        Kubernetes model =
            BinaryData
                .fromString(
                    "{\"computeType\":\"Kubernetes\",\"properties\":{\"relayConnectionString\":\"jpmspbpssdfppy\",\"serviceBusConnectionString\":\"tieyujtvczkcny\",\"extensionPrincipalId\":\"x\",\"extensionInstanceReleaseTrain\":\"njdxvglnkvxl\",\"vcName\":\"aglqivbgkcvkh\",\"namespace\":\"vuqd\",\"defaultInstanceType\":\"voniypfp\",\"instanceTypes\":{\"g\":{\"nodeSelector\":{}},\"ivhjknidi\":{\"nodeSelector\":{}},\"jxgpnrhgovfg\":{\"nodeSelector\":{}}}},\"computeLocation\":\"kqmhhaowjr\",\"provisioningState\":\"Deleting\",\"description\":\"porqzdfu\",\"createdOn\":\"2021-10-09T16:57:19Z\",\"modifiedOn\":\"2021-12-10T06:33:21Z\",\"resourceId\":\"vxcnqmxqps\",\"provisioningErrors\":[],\"isAttachedCompute\":true,\"disableLocalAuth\":false}")
                .toObject(Kubernetes.class);
        Assertions.assertEquals("kqmhhaowjr", model.computeLocation());
        Assertions.assertEquals("porqzdfu", model.description());
        Assertions.assertEquals("vxcnqmxqps", model.resourceId());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals("jpmspbpssdfppy", model.properties().relayConnectionString());
        Assertions.assertEquals("tieyujtvczkcny", model.properties().serviceBusConnectionString());
        Assertions.assertEquals("x", model.properties().extensionPrincipalId());
        Assertions.assertEquals("njdxvglnkvxl", model.properties().extensionInstanceReleaseTrain());
        Assertions.assertEquals("aglqivbgkcvkh", model.properties().vcName());
        Assertions.assertEquals("vuqd", model.properties().namespace());
        Assertions.assertEquals("voniypfp", model.properties().defaultInstanceType());
    }

    @Test
    public void testSerialize() {
        Kubernetes model =
            new Kubernetes()
                .withComputeLocation("kqmhhaowjr")
                .withDescription("porqzdfu")
                .withResourceId("vxcnqmxqps")
                .withDisableLocalAuth(false)
                .withProperties(
                    new KubernetesProperties()
                        .withRelayConnectionString("jpmspbpssdfppy")
                        .withServiceBusConnectionString("tieyujtvczkcny")
                        .withExtensionPrincipalId("x")
                        .withExtensionInstanceReleaseTrain("njdxvglnkvxl")
                        .withVcName("aglqivbgkcvkh")
                        .withNamespace("vuqd")
                        .withDefaultInstanceType("voniypfp")
                        .withInstanceTypes(
                            mapOf(
                                "g",
                                new InstanceTypeSchema().withNodeSelector(mapOf()),
                                "ivhjknidi",
                                new InstanceTypeSchema().withNodeSelector(mapOf()),
                                "jxgpnrhgovfg",
                                new InstanceTypeSchema().withNodeSelector(mapOf()))));
        model = BinaryData.fromObject(model).toObject(Kubernetes.class);
        Assertions.assertEquals("kqmhhaowjr", model.computeLocation());
        Assertions.assertEquals("porqzdfu", model.description());
        Assertions.assertEquals("vxcnqmxqps", model.resourceId());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals("jpmspbpssdfppy", model.properties().relayConnectionString());
        Assertions.assertEquals("tieyujtvczkcny", model.properties().serviceBusConnectionString());
        Assertions.assertEquals("x", model.properties().extensionPrincipalId());
        Assertions.assertEquals("njdxvglnkvxl", model.properties().extensionInstanceReleaseTrain());
        Assertions.assertEquals("aglqivbgkcvkh", model.properties().vcName());
        Assertions.assertEquals("vuqd", model.properties().namespace());
        Assertions.assertEquals("voniypfp", model.properties().defaultInstanceType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
