// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.EnvironmentVersionInner;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.BuildContext;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersion;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersionProperties;
import com.azure.resourcemanager.machinelearning.models.InferenceContainerProperties;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import com.azure.resourcemanager.machinelearning.models.Route;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EnvironmentVersionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"environmentType\":\"UserCreated\",\"image\":\"wmbfjjselblw\",\"condaFile\":\"udpn\",\"build\":{\"contextUri\":\"s\",\"dockerfilePath\":\"mfktytri\"},\"osType\":\"Windows\",\"inferenceConfig\":{\"livenessRoute\":{\"path\":\"vefnzv\",\"port\":2054222626},\"readinessRoute\":{\"path\":\"wbakszxcm\",\"port\":1616604324},\"scoringRoute\":{\"path\":\"zas\",\"port\":93911031}},\"autoRebuild\":\"OnBaseImageUpdate\",\"provisioningState\":\"Failed\",\"stage\":\"roxlybddxeb\",\"isArchived\":true,\"isAnonymous\":true,\"description\":\"zfjgrepbr\",\"tags\":{\"jwpvqrexluipa\":\"rtv\"},\"properties\":{\"ltjdrfiwe\":\"brfiovp\",\"cetrvirdfsdswp\":\"l\",\"yzegchtabhac\":\"nloop\",\"wvpfqtpvzhml\":\"lfqzcklv\"}},\"id\":\"vyhdh\",\"name\":\"fnsdmhawbxnlk\",\"type\":\"azhlewyroksayeh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        EnvironmentVersion response = manager.environmentVersions()
            .createOrUpdateWithResponse("zlcvndihkph", "zgkkucwmjmgsw", "w", "skuqgneorqtr",
                new EnvironmentVersionInner()
                    .withProperties(new EnvironmentVersionProperties().withDescription("burbxovgjipbnngh")
                        .withTags(mapOf("xenhpyixibrsaeu", "wjnwg", "blyygfticu", "so", "euyqtzoeaotrbn", "drswqm",
                            "af", "oephttoq"))
                        .withProperties(mapOf("mdjpspipkpcvhqa", "rlrsrfrxy", "ixuqvat", "jcasncgq"))
                        .withIsArchived(true)
                        .withIsAnonymous(false)
                        .withImage("kqv")
                        .withCondaFile("gnzbkqqbjcd")
                        .withBuild(new BuildContext().withContextUri("csom").withDockerfilePath("gjynuwcqu"))
                        .withOsType(OperatingSystemType.WINDOWS)
                        .withInferenceConfig(new InferenceContainerProperties()
                            .withLivenessRoute(new Route().withPath("dm").withPort(883095381))
                            .withReadinessRoute(new Route().withPath("dpgtblmxblc").withPort(688293142))
                            .withScoringRoute(new Route().withPath("sqpeavlcbb").withPort(237789436)))
                        .withAutoRebuild(AutoRebuildSetting.ON_BASE_IMAGE_UPDATE)
                        .withStage("rsfilxusyzcnxjvi")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("zfjgrepbr", response.properties().description());
        Assertions.assertEquals("rtv", response.properties().tags().get("jwpvqrexluipa"));
        Assertions.assertEquals("brfiovp", response.properties().properties().get("ltjdrfiwe"));
        Assertions.assertEquals(true, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals("wmbfjjselblw", response.properties().image());
        Assertions.assertEquals("udpn", response.properties().condaFile());
        Assertions.assertEquals("s", response.properties().build().contextUri());
        Assertions.assertEquals("mfktytri", response.properties().build().dockerfilePath());
        Assertions.assertEquals(OperatingSystemType.WINDOWS, response.properties().osType());
        Assertions.assertEquals("vefnzv", response.properties().inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(2054222626, response.properties().inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("wbakszxcm", response.properties().inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(1616604324, response.properties().inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("zas", response.properties().inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(93911031, response.properties().inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(AutoRebuildSetting.ON_BASE_IMAGE_UPDATE, response.properties().autoRebuild());
        Assertions.assertEquals("roxlybddxeb", response.properties().stage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
