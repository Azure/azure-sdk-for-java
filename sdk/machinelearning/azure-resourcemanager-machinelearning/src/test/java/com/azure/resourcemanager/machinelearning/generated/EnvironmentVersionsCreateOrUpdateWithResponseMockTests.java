// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.BuildContext;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersion;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersionProperties;
import com.azure.resourcemanager.machinelearning.models.InferenceContainerProperties;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class EnvironmentVersionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"autoRebuild\":\"OnBaseImageUpdate\",\"build\":{\"contextUri\":\"bkfukdljq\",\"dockerfilePath\":\"tsdyds\"},\"condaFile\":\"pafyalo\",\"environmentType\":\"Curated\",\"image\":\"izzn\",\"inferenceConfig\":{},\"osType\":\"Windows\",\"isAnonymous\":true,\"isArchived\":false,\"description\":\"fyjfd\",\"properties\":{\"qh\":\"yvndjokgwesym\",\"ujqbbgsimwejl\":\"qpfzlpejtznxlue\",\"bcpr\":\"bkbpjzobd\"},\"tags\":{\"awp\":\"kuhydtnaczkfwfat\"}},\"id\":\"skivdwgtqcu\",\"name\":\"ecsaaqgoqbdiu\",\"type\":\"csbskowkrbh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MachineLearningManager manager =
            MachineLearningManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        EnvironmentVersion response =
            manager
                .environmentVersions()
                .define("wrqkza")
                .withExistingEnvironment("h", "gsiqikvllr", "tpmglxkoikmtr")
                .withProperties(
                    new EnvironmentVersionProperties()
                        .withDescription("sbvvdlsflxkqesdf")
                        .withProperties(mapOf("dklt", "bgzancoinmphymcq", "toj", "dhqnufbxweiib"))
                        .withTags(
                            mapOf(
                                "uaorhjk",
                                "nybydhuihaouwud",
                                "amqprlo",
                                "hwvumosqir",
                                "zcmtagelajdyolj",
                                "rugejcvjkjy",
                                "qfmzsizzhravrc",
                                "qy"))
                        .withIsAnonymous(true)
                        .withIsArchived(false)
                        .withAutoRebuild(AutoRebuildSetting.ON_BASE_IMAGE_UPDATE)
                        .withBuild(new BuildContext().withContextUri("mpa").withDockerfilePath("wzlweeprn"))
                        .withCondaFile("zltkaszfj")
                        .withImage("bduxapgrcq")
                        .withInferenceConfig(new InferenceContainerProperties())
                        .withOsType(OperatingSystemType.WINDOWS))
                .create();

        Assertions.assertEquals("fyjfd", response.properties().description());
        Assertions.assertEquals("yvndjokgwesym", response.properties().properties().get("qh"));
        Assertions.assertEquals("kuhydtnaczkfwfat", response.properties().tags().get("awp"));
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(AutoRebuildSetting.ON_BASE_IMAGE_UPDATE, response.properties().autoRebuild());
        Assertions.assertEquals("bkfukdljq", response.properties().build().contextUri());
        Assertions.assertEquals("tsdyds", response.properties().build().dockerfilePath());
        Assertions.assertEquals("pafyalo", response.properties().condaFile());
        Assertions.assertEquals("izzn", response.properties().image());
        Assertions.assertEquals(OperatingSystemType.WINDOWS, response.properties().osType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
