// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EmailNotificationEnableType;
import com.azure.resourcemanager.machinelearning.models.NotificationSetting;
import com.azure.resourcemanager.machinelearning.models.Webhook;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NotificationSettingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NotificationSetting model = BinaryData.fromString(
            "{\"emails\":[\"nmbscbbx\",\"gdhxi\",\"d\",\"opedbwdpyqyybxub\"],\"emailOn\":[\"JobCancelled\",\"JobCompleted\"],\"webhooks\":{\"qacigeleo\":{\"webhookType\":\"Webhook\",\"eventType\":\"wremjel\"},\"r\":{\"webhookType\":\"Webhook\",\"eventType\":\"bvqvwzkjopwbeo\"},\"qfyiaseqchkr\":{\"webhookType\":\"Webhook\",\"eventType\":\"wzdqybxceakxcpts\"}}}")
            .toObject(NotificationSetting.class);
        Assertions.assertEquals("nmbscbbx", model.emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_CANCELLED, model.emailOn().get(0));
        Assertions.assertEquals("wremjel", model.webhooks().get("qacigeleo").eventType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NotificationSetting model
            = new NotificationSetting().withEmails(Arrays.asList("nmbscbbx", "gdhxi", "d", "opedbwdpyqyybxub"))
                .withEmailOn(
                    Arrays.asList(EmailNotificationEnableType.JOB_CANCELLED, EmailNotificationEnableType.JOB_COMPLETED))
                .withWebhooks(mapOf("qacigeleo", new Webhook().withEventType("wremjel"), "r",
                    new Webhook().withEventType("bvqvwzkjopwbeo"), "qfyiaseqchkr",
                    new Webhook().withEventType("wzdqybxceakxcpts")));
        model = BinaryData.fromObject(model).toObject(NotificationSetting.class);
        Assertions.assertEquals("nmbscbbx", model.emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_CANCELLED, model.emailOn().get(0));
        Assertions.assertEquals("wremjel", model.webhooks().get("qacigeleo").eventType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
