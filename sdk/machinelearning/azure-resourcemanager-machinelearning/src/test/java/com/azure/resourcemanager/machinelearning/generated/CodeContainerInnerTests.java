// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.CodeContainerInner;
import com.azure.resourcemanager.machinelearning.models.CodeContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CodeContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CodeContainerInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Updating\",\"isArchived\":true,\"latestVersion\":\"buruvd\",\"nextVersion\":\"vsmzlxwab\",\"description\":\"oefki\",\"tags\":{\"gkfbtndoaong\":\"tpuqujmq\",\"tcje\":\"jcntuj\",\"zfoqouicybxar\":\"ftwwaezkojvdc\"},\"properties\":{\"x\":\"zuf\",\"khazxkhnzbonlwn\":\"iqopidoamciod\",\"szzcmrvexztv\":\"oegokdwbwh\",\"gsfraoyzkoow\":\"t\"}},\"id\":\"mnguxawqaldsyu\",\"name\":\"ximerqfobwyznk\",\"type\":\"ykutwpf\"}")
            .toObject(CodeContainerInner.class);
        Assertions.assertEquals("oefki", model.properties().description());
        Assertions.assertEquals("tpuqujmq", model.properties().tags().get("gkfbtndoaong"));
        Assertions.assertEquals("zuf", model.properties().properties().get("x"));
        Assertions.assertEquals(true, model.properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CodeContainerInner model
            = new CodeContainerInner().withProperties(new CodeContainerProperties().withDescription("oefki")
                .withTags(mapOf("gkfbtndoaong", "tpuqujmq", "tcje", "jcntuj", "zfoqouicybxar", "ftwwaezkojvdc"))
                .withProperties(mapOf("x", "zuf", "khazxkhnzbonlwn", "iqopidoamciod", "szzcmrvexztv", "oegokdwbwh",
                    "gsfraoyzkoow", "t"))
                .withIsArchived(true));
        model = BinaryData.fromObject(model).toObject(CodeContainerInner.class);
        Assertions.assertEquals("oefki", model.properties().description());
        Assertions.assertEquals("tpuqujmq", model.properties().tags().get("gkfbtndoaong"));
        Assertions.assertEquals("zuf", model.properties().properties().get("x"));
        Assertions.assertEquals(true, model.properties().isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
