// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.CodeContainerInner;
import com.azure.resourcemanager.machinelearning.models.CodeContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class CodeContainerInnerTests {
    @Test
    public void testDeserialize() {
        CodeContainerInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"isArchived\":false,\"latestVersion\":\"rvtp\",\"nextVersion\":\"ujmqlgkfbtndoa\",\"description\":\"gbjcntujitcjed\",\"properties\":{\"pzfoqoui\":\"waezkojvd\"},\"tags\":{\"p\":\"xarzgszufoxciq\",\"xkhnzbonlwnto\":\"doamciodhkha\",\"zcmrvexztvb\":\"gokdwbwhks\",\"lmnguxaw\":\"qgsfraoyzkoow\"}},\"id\":\"ldsyuuximerqfob\",\"name\":\"yznkby\",\"type\":\"utwpfhp\"}")
                .toObject(CodeContainerInner.class);
        Assertions.assertEquals("gbjcntujitcjed", model.properties().description());
        Assertions.assertEquals("waezkojvd", model.properties().properties().get("pzfoqoui"));
        Assertions.assertEquals("xarzgszufoxciq", model.properties().tags().get("p"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @Test
    public void testSerialize() {
        CodeContainerInner model =
            new CodeContainerInner()
                .withProperties(
                    new CodeContainerProperties()
                        .withDescription("gbjcntujitcjed")
                        .withProperties(mapOf("pzfoqoui", "waezkojvd"))
                        .withTags(
                            mapOf(
                                "p",
                                "xarzgszufoxciq",
                                "xkhnzbonlwnto",
                                "doamciodhkha",
                                "zcmrvexztvb",
                                "gokdwbwhks",
                                "lmnguxaw",
                                "qgsfraoyzkoow"))
                        .withIsArchived(false));
        model = BinaryData.fromObject(model).toObject(CodeContainerInner.class);
        Assertions.assertEquals("gbjcntujitcjed", model.properties().description());
        Assertions.assertEquals("waezkojvd", model.properties().properties().get("pzfoqoui"));
        Assertions.assertEquals("xarzgszufoxciq", model.properties().tags().get("p"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
