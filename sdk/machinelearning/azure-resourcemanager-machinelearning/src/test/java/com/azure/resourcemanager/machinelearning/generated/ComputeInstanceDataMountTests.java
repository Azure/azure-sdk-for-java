// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ComputeInstanceDataMount;
import com.azure.resourcemanager.machinelearning.models.MountAction;
import com.azure.resourcemanager.machinelearning.models.MountState;
import com.azure.resourcemanager.machinelearning.models.SourceType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ComputeInstanceDataMountTests {
    @Test
    public void testDeserialize() {
        ComputeInstanceDataMount model =
            BinaryData
                .fromString(
                    "{\"source\":\"iroqbosh\",\"sourceType\":\"Dataset\",\"mountName\":\"apyyrmfsvbpavbo\",\"mountAction\":\"Unmount\",\"createdBy\":\"dbwnu\",\"mountPath\":\"ahxku\",\"mountState\":\"MountFailed\",\"mountedOn\":\"2021-05-28T23:15:35Z\",\"error\":\"acfdmmcpugme\"}")
                .toObject(ComputeInstanceDataMount.class);
        Assertions.assertEquals("iroqbosh", model.source());
        Assertions.assertEquals(SourceType.DATASET, model.sourceType());
        Assertions.assertEquals("apyyrmfsvbpavbo", model.mountName());
        Assertions.assertEquals(MountAction.UNMOUNT, model.mountAction());
        Assertions.assertEquals("dbwnu", model.createdBy());
        Assertions.assertEquals("ahxku", model.mountPath());
        Assertions.assertEquals(MountState.MOUNT_FAILED, model.mountState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-28T23:15:35Z"), model.mountedOn());
        Assertions.assertEquals("acfdmmcpugme", model.error());
    }

    @Test
    public void testSerialize() {
        ComputeInstanceDataMount model =
            new ComputeInstanceDataMount()
                .withSource("iroqbosh")
                .withSourceType(SourceType.DATASET)
                .withMountName("apyyrmfsvbpavbo")
                .withMountAction(MountAction.UNMOUNT)
                .withCreatedBy("dbwnu")
                .withMountPath("ahxku")
                .withMountState(MountState.MOUNT_FAILED)
                .withMountedOn(OffsetDateTime.parse("2021-05-28T23:15:35Z"))
                .withError("acfdmmcpugme");
        model = BinaryData.fromObject(model).toObject(ComputeInstanceDataMount.class);
        Assertions.assertEquals("iroqbosh", model.source());
        Assertions.assertEquals(SourceType.DATASET, model.sourceType());
        Assertions.assertEquals("apyyrmfsvbpavbo", model.mountName());
        Assertions.assertEquals(MountAction.UNMOUNT, model.mountAction());
        Assertions.assertEquals("dbwnu", model.createdBy());
        Assertions.assertEquals("ahxku", model.mountPath());
        Assertions.assertEquals(MountState.MOUNT_FAILED, model.mountState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-28T23:15:35Z"), model.mountedOn());
        Assertions.assertEquals("acfdmmcpugme", model.error());
    }
}
