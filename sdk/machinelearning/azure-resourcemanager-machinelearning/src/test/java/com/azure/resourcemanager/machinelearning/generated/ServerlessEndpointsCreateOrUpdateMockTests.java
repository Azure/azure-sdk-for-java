// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ContentSafety;
import com.azure.resourcemanager.machinelearning.models.ContentSafetyStatus;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.ModelSettings;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpoint;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpointProperties;
import com.azure.resourcemanager.machinelearning.models.ServerlessInferenceEndpointAuthMode;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServerlessEndpointsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"modelSettings\":{\"modelId\":\"fokcbxrskylqppp\"},\"authMode\":\"Key\",\"inferenceEndpoint\":{\"uri\":\"ikktretutsy\",\"headers\":{\"erotghxkrrpmgdol\":\"plaxxfnrltanv\"}},\"provisioningState\":\"Succeeded\",\"endpointState\":\"Suspended\",\"marketplaceSubscriptionId\":\"lavdtttydjqom\",\"contentSafety\":{\"contentSafetyStatus\":\"Enabled\"}},\"kind\":\"jqcshbypw\",\"identity\":{\"principalId\":\"37edbc76-cef9-48b9-9cc2-79608d9945c7\",\"tenantId\":\"0aced1ac-e90b-4127-8f23-14aec8e79d91\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"dmoufjuqowuicvjy\":{\"principalId\":\"71f38893-306d-4554-94d3-d704ba5e4069\",\"clientId\":\"d6c0480e-abcd-4bba-ad9c-0c48ba346fab\"},\"mleuqxhmrilwkcg\":{\"principalId\":\"36881254-7f80-4b44-8ab1-6e4042c96c90\",\"clientId\":\"d3cf50b0-d2ec-475a-a730-1ff16c1504a3\"}}},\"sku\":{\"name\":\"vpvta\",\"tier\":\"Basic\",\"size\":\"znfxdqqzikvgwqi\",\"family\":\"dhas\",\"capacity\":561322142},\"location\":\"exrzxvff\",\"tags\":{\"t\":\"tdmhr\"},\"id\":\"yulkoeps\",\"name\":\"oqdibygrqcid\",\"type\":\"wkxikxiqxlxoksy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ServerlessEndpoint response = manager.serverlessEndpoints()
            .define("szbvhxnjor")
            .withRegion("xtnk")
            .withExistingWorkspace("voderduabqbverb", "c")
            .withProperties(new ServerlessEndpointProperties().withModelSettings(new ModelSettings().withModelId("o"))
                .withAuthMode(ServerlessInferenceEndpointAuthMode.KEY)
                .withContentSafety(new ContentSafety().withContentSafetyStatus(ContentSafetyStatus.DISABLED)))
            .withTags(mapOf("rkyaovc", "dvxsgdaajlhgsuq", "taingadkrkny", "dsrxhpqlxnbd", "fgwbuxqzf", "jngdfzqcjfqm"))
            .withKind("vsfgyw")
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("gmebvn", new UserAssignedIdentity(), "hdkvkqjjouh",
                    new UserAssignedIdentity(), "cttpcctvcjdrmkn", new UserAssignedIdentity())))
            .withSku(new Sku().withName("hvcrjqzbmyftzbx")
                .withTier(SkuTier.FREE)
                .withSize("rbullqnfz")
                .withFamily("gursbzm")
                .withCapacity(720175035))
            .create();

        Assertions.assertEquals("exrzxvff", response.location());
        Assertions.assertEquals("tdmhr", response.tags().get("t"));
        Assertions.assertEquals("fokcbxrskylqppp", response.properties().modelSettings().modelId());
        Assertions.assertEquals(ServerlessInferenceEndpointAuthMode.KEY, response.properties().authMode());
        Assertions.assertEquals(ContentSafetyStatus.ENABLED,
            response.properties().contentSafety().contentSafetyStatus());
        Assertions.assertEquals("jqcshbypw", response.kind());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("vpvta", response.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.sku().tier());
        Assertions.assertEquals("znfxdqqzikvgwqi", response.sku().size());
        Assertions.assertEquals("dhas", response.sku().family());
        Assertions.assertEquals(561322142, response.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
