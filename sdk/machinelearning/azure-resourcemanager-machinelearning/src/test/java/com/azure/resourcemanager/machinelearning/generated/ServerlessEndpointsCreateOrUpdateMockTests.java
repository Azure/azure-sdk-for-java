// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ContentSafety;
import com.azure.resourcemanager.machinelearning.models.ContentSafetyStatus;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.ModelSettings;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpoint;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpointProperties;
import com.azure.resourcemanager.machinelearning.models.ServerlessInferenceEndpointAuthMode;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServerlessEndpointsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"modelSettings\":{\"modelId\":\"ingadkrkny\"},\"authMode\":\"Key\",\"inferenceEndpoint\":{\"uri\":\"g\",\"headers\":{\"xqzfw\":\"qcjfqmyfgwb\",\"vexzyjf\":\"bq\"}},\"provisioningState\":\"Succeeded\",\"endpointState\":\"DeletionFailed\",\"marketplaceSubscriptionId\":\"utgxdlznfo\",\"contentSafety\":{\"contentSafetyStatus\":\"Enabled\"}},\"kind\":\"rskyl\",\"identity\":{\"principalId\":\"083bfe9f-f956-4328-9570-fffac8cccef6\",\"tenantId\":\"185fc4b6-64ec-4758-a95b-54080204d7be\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"ktretutsygzjp\":{\"principalId\":\"b3d094c7-f01c-4476-9450-5b3dfcefaed3\",\"clientId\":\"a9231c08-ade5-492d-91c8-54eef7732f02\"},\"xfnrltanvb\":{\"principalId\":\"29f45918-8ad6-4c91-b6ff-bd7a917c9c68\",\"clientId\":\"5dec5150-9dcc-4062-8b19-8b31f38fa57a\"},\"t\":{\"principalId\":\"76756a78-ff6f-4f72-b9a3-5745d619f190\",\"clientId\":\"5b1aba86-fb96-4b34-a86a-4896f7969c2d\"}}},\"sku\":{\"name\":\"xk\",\"tier\":\"Standard\",\"size\":\"gdo\",\"family\":\"aizsglavdtttyd\",\"capacity\":576123165},\"location\":\"zrqkjqcshby\",\"tags\":{\"cikedmoufjuqow\":\"vey\",\"jyjszm\":\"ic\",\"wkcgu\":\"euqxhmri\",\"lxxzn\":\"vpvta\"},\"id\":\"xdq\",\"name\":\"zikvgwqiwodhasl\",\"type\":\"aae\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ServerlessEndpoint response = manager.serverlessEndpoints()
            .define("c")
            .withRegion("bvninjhdkv")
            .withExistingWorkspace("zcbohbb", "voderduabqbverb")
            .withProperties(
                new ServerlessEndpointProperties().withModelSettings(new ModelSettings().withModelId("bvhxnjorvpc"))
                    .withAuthMode(ServerlessInferenceEndpointAuthMode.KEY)
                    .withContentSafety(new ContentSafety().withContentSafetyStatus(ContentSafetyStatus.ENABLED)))
            .withTags(
                mapOf("pcctvcjdrm", "jouhoxkct", "qzbmyftzbxfg", "nkkhvcr", "l", "srb", "mixwaxtnkvt", "qnfzsegursb"))
            .withKind("e")
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("rwrvnscmacbrywqq", new UserAssignedIdentity(), "lfajlgxrsnbt",
                        new UserAssignedIdentity())))
            .withSku(new Sku().withName("oaah")
                .withTier(SkuTier.BASIC)
                .withSize("gywkin")
                .withFamily("vtx")
                .withCapacity(639472821))
            .create();

        Assertions.assertEquals("zrqkjqcshby", response.location());
        Assertions.assertEquals("vey", response.tags().get("cikedmoufjuqow"));
        Assertions.assertEquals("ingadkrkny", response.properties().modelSettings().modelId());
        Assertions.assertEquals(ServerlessInferenceEndpointAuthMode.KEY, response.properties().authMode());
        Assertions.assertEquals(ContentSafetyStatus.ENABLED,
            response.properties().contentSafety().contentSafetyStatus());
        Assertions.assertEquals("rskyl", response.kind());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("xk", response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("gdo", response.sku().size());
        Assertions.assertEquals("aizsglavdtttyd", response.sku().family());
        Assertions.assertEquals(576123165, response.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
