// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.FeaturesetVersionInner;
import com.azure.resourcemanager.machinelearning.models.EmailNotificationEnableType;
import com.azure.resourcemanager.machinelearning.models.FeaturesetSpecification;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersionProperties;
import com.azure.resourcemanager.machinelearning.models.MaterializationComputeResource;
import com.azure.resourcemanager.machinelearning.models.MaterializationSettings;
import com.azure.resourcemanager.machinelearning.models.MaterializationStoreType;
import com.azure.resourcemanager.machinelearning.models.NotificationSetting;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.RecurrenceSchedule;
import com.azure.resourcemanager.machinelearning.models.RecurrenceTrigger;
import com.azure.resourcemanager.machinelearning.models.Webhook;
import com.azure.resourcemanager.machinelearning.models.WeekDay;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturesetVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeaturesetVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"specification\":{\"path\":\"sxcdgljplkeuach\"},\"materializationSettings\":{\"storeType\":\"Offline\",\"schedule\":{\"triggerType\":\"Recurrence\",\"frequency\":\"Week\",\"interval\":1553395151,\"schedule\":{\"hours\":[286506544,1823247004],\"minutes\":[467932979,1819324739],\"weekDays\":[\"Tuesday\",\"Tuesday\",\"Wednesday\",\"Tuesday\"],\"monthDays\":[1207457404]},\"endTime\":\"hqjjys\",\"startTime\":\"rlpshhkv\",\"timeZone\":\"dwqslsrhmpqvw\"},\"notification\":{\"emails\":[\"ndcbrwi\",\"uvqejosovyrrle\"],\"emailOn\":[\"JobFailed\",\"JobFailed\",\"JobFailed\",\"JobFailed\"],\"webhooks\":{\"bmrqbrjbbmp\":{\"webhookType\":\"Webhook\",\"eventType\":\"qobbpihehcec\"},\"rseqwjksghudgz\":{\"webhookType\":\"Webhook\",\"eventType\":\"lvykfrex\"},\"hrkmdyomkxfbvfbh\":{\"webhookType\":\"Webhook\",\"eventType\":\"ogjggsvoujkxibda\"},\"hpwpgddeimawzovg\":{\"webhookType\":\"Webhook\",\"eventType\":\"i\"}}},\"resource\":{\"instanceType\":\"muikjcjcaztbws\"},\"sparkConfiguration\":{\"ytwvczcswkacve\":\"owxwcomli\",\"pqthehnmnaoya\":\"yfdvlvhbwrnfxtgd\"}},\"stage\":\"coeqswankltytm\",\"entities\":[\"oznnhdrlktgj\",\"sggux\",\"eml\",\"ywaeeczgf\"],\"provisioningState\":\"Updating\",\"isArchived\":true,\"isAnonymous\":true,\"description\":\"sxbly\",\"tags\":{\"plpvm\":\"zujksrlsmdes\",\"eowxvgpi\":\"cdoewbidyv\",\"xzecpaxwkufykhvu\":\"deugf\"},\"properties\":{\"znabaobns\":\"pmru\",\"ihywartspph\":\"ujdjltymkmvg\"}},\"id\":\"xkykxdssjp\",\"name\":\"mmuc\",\"type\":\"xhikkflrmymyin\"}")
            .toObject(FeaturesetVersionInner.class);
        Assertions.assertEquals("sxbly", model.properties().description());
        Assertions.assertEquals("zujksrlsmdes", model.properties().tags().get("plpvm"));
        Assertions.assertEquals("pmru", model.properties().properties().get("znabaobns"));
        Assertions.assertEquals(true, model.properties().isArchived());
        Assertions.assertEquals(true, model.properties().isAnonymous());
        Assertions.assertEquals("sxcdgljplkeuach", model.properties().specification().path());
        Assertions.assertEquals(MaterializationStoreType.OFFLINE,
            model.properties().materializationSettings().storeType());
        Assertions.assertEquals("hqjjys", model.properties().materializationSettings().schedule().endTime());
        Assertions.assertEquals("rlpshhkv", model.properties().materializationSettings().schedule().startTime());
        Assertions.assertEquals("dwqslsrhmpqvw", model.properties().materializationSettings().schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.WEEK,
            model.properties().materializationSettings().schedule().frequency());
        Assertions.assertEquals(1553395151, model.properties().materializationSettings().schedule().interval());
        Assertions.assertEquals(286506544,
            model.properties().materializationSettings().schedule().schedule().hours().get(0));
        Assertions.assertEquals(467932979,
            model.properties().materializationSettings().schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.TUESDAY,
            model.properties().materializationSettings().schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1207457404,
            model.properties().materializationSettings().schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("ndcbrwi", model.properties().materializationSettings().notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_FAILED,
            model.properties().materializationSettings().notification().emailOn().get(0));
        Assertions.assertEquals("qobbpihehcec",
            model.properties().materializationSettings().notification().webhooks().get("bmrqbrjbbmp").eventType());
        Assertions.assertEquals("muikjcjcaztbws",
            model.properties().materializationSettings().resource().instanceType());
        Assertions.assertEquals("owxwcomli",
            model.properties().materializationSettings().sparkConfiguration().get("ytwvczcswkacve"));
        Assertions.assertEquals("coeqswankltytm", model.properties().stage());
        Assertions.assertEquals("oznnhdrlktgj", model.properties().entities().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeaturesetVersionInner model = new FeaturesetVersionInner().withProperties(new FeaturesetVersionProperties()
            .withDescription("sxbly")
            .withTags(mapOf("plpvm", "zujksrlsmdes", "eowxvgpi", "cdoewbidyv", "xzecpaxwkufykhvu", "deugf"))
            .withProperties(mapOf("znabaobns", "pmru", "ihywartspph", "ujdjltymkmvg"))
            .withIsArchived(true)
            .withIsAnonymous(true)
            .withSpecification(new FeaturesetSpecification().withPath("sxcdgljplkeuach"))
            .withMaterializationSettings(new MaterializationSettings().withStoreType(MaterializationStoreType.OFFLINE)
                .withSchedule(new RecurrenceTrigger().withEndTime("hqjjys")
                    .withStartTime("rlpshhkv")
                    .withTimeZone("dwqslsrhmpqvw")
                    .withFrequency(RecurrenceFrequency.WEEK)
                    .withInterval(1553395151)
                    .withSchedule(new RecurrenceSchedule().withHours(Arrays.asList(286506544, 1823247004))
                        .withMinutes(Arrays.asList(467932979, 1819324739))
                        .withWeekDays(
                            Arrays.asList(WeekDay.TUESDAY, WeekDay.TUESDAY, WeekDay.WEDNESDAY, WeekDay.TUESDAY))
                        .withMonthDays(Arrays.asList(1207457404))))
                .withNotification(
                    new NotificationSetting().withEmails(Arrays.asList("ndcbrwi", "uvqejosovyrrle"))
                        .withEmailOn(Arrays.asList(EmailNotificationEnableType.JOB_FAILED,
                            EmailNotificationEnableType.JOB_FAILED, EmailNotificationEnableType.JOB_FAILED,
                            EmailNotificationEnableType.JOB_FAILED))
                        .withWebhooks(mapOf("bmrqbrjbbmp", new Webhook().withEventType("qobbpihehcec"),
                            "rseqwjksghudgz", new Webhook().withEventType("lvykfrex"), "hrkmdyomkxfbvfbh",
                            new Webhook().withEventType("ogjggsvoujkxibda"), "hpwpgddeimawzovg",
                            new Webhook().withEventType("i"))))
                .withResource(new MaterializationComputeResource().withInstanceType("muikjcjcaztbws"))
                .withSparkConfiguration(mapOf("ytwvczcswkacve", "owxwcomli", "pqthehnmnaoya", "yfdvlvhbwrnfxtgd")))
            .withStage("coeqswankltytm")
            .withEntities(Arrays.asList("oznnhdrlktgj", "sggux", "eml", "ywaeeczgf")));
        model = BinaryData.fromObject(model).toObject(FeaturesetVersionInner.class);
        Assertions.assertEquals("sxbly", model.properties().description());
        Assertions.assertEquals("zujksrlsmdes", model.properties().tags().get("plpvm"));
        Assertions.assertEquals("pmru", model.properties().properties().get("znabaobns"));
        Assertions.assertEquals(true, model.properties().isArchived());
        Assertions.assertEquals(true, model.properties().isAnonymous());
        Assertions.assertEquals("sxcdgljplkeuach", model.properties().specification().path());
        Assertions.assertEquals(MaterializationStoreType.OFFLINE,
            model.properties().materializationSettings().storeType());
        Assertions.assertEquals("hqjjys", model.properties().materializationSettings().schedule().endTime());
        Assertions.assertEquals("rlpshhkv", model.properties().materializationSettings().schedule().startTime());
        Assertions.assertEquals("dwqslsrhmpqvw", model.properties().materializationSettings().schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.WEEK,
            model.properties().materializationSettings().schedule().frequency());
        Assertions.assertEquals(1553395151, model.properties().materializationSettings().schedule().interval());
        Assertions.assertEquals(286506544,
            model.properties().materializationSettings().schedule().schedule().hours().get(0));
        Assertions.assertEquals(467932979,
            model.properties().materializationSettings().schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.TUESDAY,
            model.properties().materializationSettings().schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1207457404,
            model.properties().materializationSettings().schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("ndcbrwi", model.properties().materializationSettings().notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_FAILED,
            model.properties().materializationSettings().notification().emailOn().get(0));
        Assertions.assertEquals("qobbpihehcec",
            model.properties().materializationSettings().notification().webhooks().get("bmrqbrjbbmp").eventType());
        Assertions.assertEquals("muikjcjcaztbws",
            model.properties().materializationSettings().resource().instanceType());
        Assertions.assertEquals("owxwcomli",
            model.properties().materializationSettings().sparkConfiguration().get("ytwvczcswkacve"));
        Assertions.assertEquals("coeqswankltytm", model.properties().stage());
        Assertions.assertEquals("oznnhdrlktgj", model.properties().entities().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
