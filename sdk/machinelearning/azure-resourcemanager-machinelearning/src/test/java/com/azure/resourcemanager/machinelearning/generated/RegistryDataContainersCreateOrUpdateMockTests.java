// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.DataContainerInner;
import com.azure.resourcemanager.machinelearning.models.DataContainer;
import com.azure.resourcemanager.machinelearning.models.DataContainerProperties;
import com.azure.resourcemanager.machinelearning.models.DataType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistryDataContainersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"dataType\":\"uri_file\",\"isArchived\":false,\"latestVersion\":\"zfmnpbdrcibjxnn\",\"nextVersion\":\"ztnhvdtuoamqobq\",\"description\":\"spshtis\",\"tags\":{\"wckzeb\":\"eoctrzjwn\"},\"properties\":{\"qzlmln\":\"wdxgyypm\",\"ilyeshox\":\"rcatkuhskegdkvv\",\"jdmu\":\"z\",\"xzgzum\":\"busxyugozwp\"}},\"id\":\"tiixkkbygbgi\",\"name\":\"kwyshybbn\",\"type\":\"ttyizonzsurqcoja\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataContainer response = manager.registryDataContainers()
            .createOrUpdate("uijtickzo", "guzprpxhhboigzxk", "pqlrzhtocjzfppex",
                new DataContainerInner().withProperties(new DataContainerProperties().withDescription("joypplodaqrbk")
                    .withTags(mapOf("valcrqaxlmbrtvtg", "ffsobg"))
                    .withProperties(
                        mapOf("oysxaqq", "lplgtlayyxhxj", "njc", "hdfhfaob", "qwssyd", "bozvc", "ywo", "wrybi"))
                    .withIsArchived(true)
                    .withDataType(DataType.URI_FILE)),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("spshtis", response.properties().description());
        Assertions.assertEquals("eoctrzjwn", response.properties().tags().get("wckzeb"));
        Assertions.assertEquals("wdxgyypm", response.properties().properties().get("qzlmln"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(DataType.URI_FILE, response.properties().dataType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
