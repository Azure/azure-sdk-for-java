// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.JobService;
import com.azure.resourcemanager.machinelearning.models.Nodes;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobService model = BinaryData.fromString(
            "{\"jobServiceType\":\"wuowhlxlnwy\",\"port\":1884184924,\"endpoint\":\"vblgmokzk\",\"status\":\"rfowtdvrfmvlih\",\"errorMessage\":\"jdrqcrjidhftu\",\"properties\":{\"kfnjyixhafrat\":\"dxlwyojbfqz\",\"znv\":\"xmbjroum\"},\"nodes\":{\"nodesValueType\":\"Nodes\"}}")
            .toObject(JobService.class);
        Assertions.assertEquals("wuowhlxlnwy", model.jobServiceType());
        Assertions.assertEquals(1884184924, model.port());
        Assertions.assertEquals("vblgmokzk", model.endpoint());
        Assertions.assertEquals("dxlwyojbfqz", model.properties().get("kfnjyixhafrat"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobService model = new JobService().withJobServiceType("wuowhlxlnwy")
            .withPort(1884184924)
            .withEndpoint("vblgmokzk")
            .withProperties(mapOf("kfnjyixhafrat", "dxlwyojbfqz", "znv", "xmbjroum"))
            .withNodes(new Nodes());
        model = BinaryData.fromObject(model).toObject(JobService.class);
        Assertions.assertEquals("wuowhlxlnwy", model.jobServiceType());
        Assertions.assertEquals(1884184924, model.port());
        Assertions.assertEquals("vblgmokzk", model.endpoint());
        Assertions.assertEquals("dxlwyojbfqz", model.properties().get("kfnjyixhafrat"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
