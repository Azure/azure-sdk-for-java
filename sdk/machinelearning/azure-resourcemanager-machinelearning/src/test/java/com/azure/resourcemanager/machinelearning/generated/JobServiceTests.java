// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.JobService;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobServiceTests {
    @Test
    public void testDeserialize() {
        JobService model =
            BinaryData
                .fromString(
                    "{\"endpoint\":\"hvnh\",\"errorMessage\":\"brqnkkzjcjb\",\"jobServiceType\":\"gaehvvibrxjjst\",\"port\":1668662925,\"properties\":{\"dgfcwqmp\":\"tpkxztmoobklft\"},\"status\":\"aqxzhemjyho\"}")
                .toObject(JobService.class);
        Assertions.assertEquals("hvnh", model.endpoint());
        Assertions.assertEquals("gaehvvibrxjjst", model.jobServiceType());
        Assertions.assertEquals(1668662925, model.port());
        Assertions.assertEquals("tpkxztmoobklft", model.properties().get("dgfcwqmp"));
    }

    @Test
    public void testSerialize() {
        JobService model =
            new JobService()
                .withEndpoint("hvnh")
                .withJobServiceType("gaehvvibrxjjst")
                .withPort(1668662925)
                .withProperties(mapOf("dgfcwqmp", "tpkxztmoobklft"));
        model = BinaryData.fromObject(model).toObject(JobService.class);
        Assertions.assertEquals("hvnh", model.endpoint());
        Assertions.assertEquals("gaehvvibrxjjst", model.jobServiceType());
        Assertions.assertEquals(1668662925, model.port());
        Assertions.assertEquals("tpkxztmoobklft", model.properties().get("dgfcwqmp"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
