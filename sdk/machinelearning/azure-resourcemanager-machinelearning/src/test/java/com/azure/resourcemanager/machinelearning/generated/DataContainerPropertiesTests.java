// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.DataContainerProperties;
import com.azure.resourcemanager.machinelearning.models.DataType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataContainerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataContainerProperties model = BinaryData.fromString(
            "{\"dataType\":\"uri_folder\",\"isArchived\":true,\"latestVersion\":\"guaadraufactkahz\",\"nextVersion\":\"ajjziuxxpshne\",\"description\":\"ulfgslqu\",\"tags\":{\"o\":\"dlenrdsutujbazpj\",\"uvwpklvxwmyg\":\"minyflnorwm\",\"hiszepnnbjcrxgib\":\"xpgpq\"},\"properties\":{\"kokwbqplhlvnu\":\"xconfozauors\",\"phwzsoldweyuqdu\":\"epzl\",\"biorktal\":\"vmnnrw\"}}")
            .toObject(DataContainerProperties.class);
        Assertions.assertEquals("ulfgslqu", model.description());
        Assertions.assertEquals("dlenrdsutujbazpj", model.tags().get("o"));
        Assertions.assertEquals("xconfozauors", model.properties().get("kokwbqplhlvnu"));
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals(DataType.URI_FOLDER, model.dataType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataContainerProperties model = new DataContainerProperties().withDescription("ulfgslqu")
            .withTags(mapOf("o", "dlenrdsutujbazpj", "uvwpklvxwmyg", "minyflnorwm", "hiszepnnbjcrxgib", "xpgpq"))
            .withProperties(mapOf("kokwbqplhlvnu", "xconfozauors", "phwzsoldweyuqdu", "epzl", "biorktal", "vmnnrw"))
            .withIsArchived(true)
            .withDataType(DataType.URI_FOLDER);
        model = BinaryData.fromObject(model).toObject(DataContainerProperties.class);
        Assertions.assertEquals("ulfgslqu", model.description());
        Assertions.assertEquals("dlenrdsutujbazpj", model.tags().get("o"));
        Assertions.assertEquals("xconfozauors", model.properties().get("kokwbqplhlvnu"));
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals(DataType.URI_FOLDER, model.dataType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
