// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ClassificationMultilabelPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageClassificationMultilabel;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsClassification;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettingsClassification;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageClassificationMultilabelTests {
    @Test
    public void testDeserialize() {
        ImageClassificationMultilabel model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"ImageClassificationMultilabel\",\"primaryMetric\":\"Accuracy\",\"modelSettings\":{\"trainingCropSize\":527832603,\"validationCropSize\":1746768038,\"validationResizeSize\":801292109,\"weightedLoss\":412593801,\"advancedSettings\":\"gxx\",\"amsGradient\":true,\"augmentations\":\"gzdgvpyigda\",\"beta1\":50.284134,\"beta2\":78.38917,\"checkpointFrequency\":15308107,\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"mode\":\"Download\",\"uri\":\"joedx\",\"description\":\"ucaifpaurwwgilf\"},\"checkpointRunId\":\"qacdmkxwxdcvjwcy\",\"distributed\":true,\"earlyStopping\":false,\"earlyStoppingDelay\":919883073,\"earlyStoppingPatience\":1735818040,\"enableOnnxNormalization\":false,\"evaluationFrequency\":1522504135,\"gradientAccumulationStep\":1636678617,\"layersToFreeze\":259397092,\"learningRate\":7.0950627,\"learningRateScheduler\":\"WarmupCosine\",\"modelName\":\"m\",\"momentum\":59.436913,\"nesterov\":true,\"numberOfEpochs\":1080891031,\"numberOfWorkers\":615131106,\"optimizer\":\"Adamw\",\"randomSeed\":1475743348,\"stepLRGamma\":79.30035,\"stepLRStepSize\":1316431372,\"trainingBatchSize\":2128038288,\"validationBatchSize\":215602639,\"warmupCosineLRCycles\":40.02701,\"warmupCosineLRWarmupEpochs\":84373044,\"weightDecay\":18.430948},\"searchSpace\":[{\"trainingCropSize\":\"djrkclamggl\",\"validationCropSize\":\"mfejdoqeykglty\",\"validationResizeSize\":\"hqfgqkayejsx\",\"weightedLoss\":\"gflwfgziiucijj\",\"amsGradient\":\"atlijjjr\",\"augmentations\":\"am\",\"beta1\":\"szknxkvccxe\",\"beta2\":\"vkunmign\",\"distributed\":\"ikkgqo\",\"earlyStopping\":\"wpin\",\"earlyStoppingDelay\":\"dvabbxbhmedeilb\",\"earlyStoppingPatience\":\"wfcfxzirzz\",\"enableOnnxNormalization\":\"vwypusuvjsl\",\"evaluationFrequency\":\"wci\",\"gradientAccumulationStep\":\"jsllfryvd\",\"layersToFreeze\":\"x\",\"learningRate\":\"q\",\"learningRateScheduler\":\"frgnawbabgfbktyj\",\"modelName\":\"czlfsy\",\"momentum\":\"frbzgowo\",\"nesterov\":\"mj\",\"numberOfEpochs\":\"jcx\",\"numberOfWorkers\":\"qg\",\"optimizer\":\"lusrv\",\"randomSeed\":\"simjceagbjqvlsu\",\"stepLRGamma\":\"wzas\",\"stepLRStepSize\":\"gon\",\"trainingBatchSize\":\"jfqipubyznclkfk\",\"validationBatchSize\":\"bgvopemt\",\"warmupCosineLRCycles\":\"qujlyegqa\",\"warmupCosineLRWarmupEpochs\":\"igflqqbtnyjp\",\"weightDecay\":\"xdb\"},{\"trainingCropSize\":\"abmvmsxbaevwjc\",\"validationCropSize\":\"ot\",\"validationResizeSize\":\"wuhvaj\",\"weightedLoss\":\"ilfemjj\",\"amsGradient\":\"kzwjiqullq\",\"augmentations\":\"dmvr\",\"beta1\":\"mqerndb\",\"beta2\":\"yeofltfnnxrkad\",\"distributed\":\"ynnfmuiii\",\"earlyStopping\":\"pfoh\",\"earlyStoppingDelay\":\"fkx\",\"earlyStoppingPatience\":\"cbrwjiutgnjizbe\",\"enableOnnxNormalization\":\"oiymrvzbjuyrsrzi\",\"evaluationFrequency\":\"tixgbd\",\"gradientAccumulationStep\":\"ifrevk\",\"layersToFreeze\":\"pezkis\",\"learningRate\":\"jm\",\"learningRateScheduler\":\"hsyparybjuf\",\"modelName\":\"bjczjnciuiyqvlda\",\"momentum\":\"v\",\"nesterov\":\"i\",\"numberOfEpochs\":\"qzlgcndhzxrrfcfs\",\"numberOfWorkers\":\"khgsnxuwwkpphefs\",\"optimizer\":\"xlb\",\"randomSeed\":\"omeikjcl\",\"stepLRGamma\":\"acnmwpfsuqtaaz\",\"stepLRStepSize\":\"bxyxoy\",\"trainingBatchSize\":\"uqqiqezxlhd\",\"validationBatchSize\":\"qdcadwvps\",\"warmupCosineLRCycles\":\"j\",\"warmupCosineLRWarmupEpochs\":\"hjriyb\",\"weightDecay\":\"zo\"},{\"trainingCropSize\":\"nxwdvwnjkg\",\"validationCropSize\":\"nmx\",\"validationResizeSize\":\"rsqftib\",\"weightedLoss\":\"ibuyvpirf\",\"amsGradient\":\"pnqn\",\"augmentations\":\"w\",\"beta1\":\"edenrexkxbhxv\",\"beta2\":\"nul\",\"distributed\":\"nhj\",\"earlyStopping\":\"dyznfajsvks\",\"earlyStoppingDelay\":\"qozzkivyhjrliizj\",\"earlyStoppingPatience\":\"lqfhefkwabs\",\"enableOnnxNormalization\":\"ron\",\"evaluationFrequency\":\"lmgnlqxsjx\",\"gradientAccumulationStep\":\"lexhv\",\"layersToFreeze\":\"b\",\"learningRate\":\"oolzqocarkuzl\",\"learningRateScheduler\":\"nndtsnxa\",\"modelName\":\"ytllhdyzmy\",\"momentum\":\"zexnxakcky\",\"nesterov\":\"mxgaabjkdtfohfao\",\"numberOfEpochs\":\"vkiwrsiwdyjqu\",\"numberOfWorkers\":\"kcrr\",\"optimizer\":\"eek\",\"randomSeed\":\"uehogdd\",\"stepLRGamma\":\"bcbgydlqidywmhm\",\"stepLRStepSize\":\"yrilkfb\",\"trainingBatchSize\":\"qqxvztpbn\",\"validationBatchSize\":\"qtxjtomalswbnfdd\",\"warmupCosineLRCycles\":\"ldwq\",\"warmupCosineLRWarmupEpochs\":\"sfzygleexahv\",\"weightDecay\":\"whsbrcary\"}],\"limitSettings\":{\"maxConcurrentTrials\":1128714196,\"maxTrials\":1833029555,\"timeout\":\"PT1H22M34S\"},\"sweepSettings\":{\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"delayEvaluation\":1400168777,\"evaluationInterval\":1978407151},\"samplingAlgorithm\":\"Bayesian\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"Direct\",\"uri\":\"ptdmkrrbhmpful\",\"description\":\"efgybpmfbfununmp\"},\"validationDataSize\":66.79392779384834,\"logVerbosity\":\"Critical\",\"targetColumnName\":\"fkd\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"Download\",\"uri\":\"lzvfictnkjjwg\",\"description\":\"nphbkgfyrt\"}}")
                .toObject(ImageClassificationMultilabel.class);
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.logVerbosity());
        Assertions.assertEquals("fkd", model.targetColumnName());
        Assertions.assertEquals("nphbkgfyrt", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("lzvfictnkjjwg", model.trainingData().uri());
        Assertions.assertEquals(ClassificationMultilabelPrimaryMetrics.ACCURACY, model.primaryMetric());
        Assertions.assertEquals("gxx", model.modelSettings().advancedSettings());
        Assertions.assertEquals(true, model.modelSettings().amsGradient());
        Assertions.assertEquals("gzdgvpyigda", model.modelSettings().augmentations());
        Assertions.assertEquals(50.284134F, model.modelSettings().beta1());
        Assertions.assertEquals(78.38917F, model.modelSettings().beta2());
        Assertions.assertEquals(15308107, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("ucaifpaurwwgilf", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("joedx", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("qacdmkxwxdcvjwcy", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(false, model.modelSettings().earlyStopping());
        Assertions.assertEquals(919883073, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(1735818040, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(false, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1522504135, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(1636678617, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(259397092, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(7.0950627F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("m", model.modelSettings().modelName());
        Assertions.assertEquals(59.436913F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(1080891031, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(615131106, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAMW, model.modelSettings().optimizer());
        Assertions.assertEquals(1475743348, model.modelSettings().randomSeed());
        Assertions.assertEquals(79.30035F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(1316431372, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(2128038288, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(215602639, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(40.02701F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(84373044, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(18.430948F, model.modelSettings().weightDecay());
        Assertions.assertEquals(527832603, model.modelSettings().trainingCropSize());
        Assertions.assertEquals(1746768038, model.modelSettings().validationCropSize());
        Assertions.assertEquals(801292109, model.modelSettings().validationResizeSize());
        Assertions.assertEquals(412593801, model.modelSettings().weightedLoss());
        Assertions.assertEquals("atlijjjr", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("am", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("szknxkvccxe", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("vkunmign", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("ikkgqo", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("wpin", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("dvabbxbhmedeilb", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("wfcfxzirzz", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("vwypusuvjsl", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("wci", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("jsllfryvd", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("x", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("q", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("frgnawbabgfbktyj", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("czlfsy", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("frbzgowo", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("mj", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("jcx", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("qg", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("lusrv", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("simjceagbjqvlsu", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("wzas", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("gon", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("jfqipubyznclkfk", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("bgvopemt", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("qujlyegqa", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("igflqqbtnyjp", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("xdb", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("djrkclamggl", model.searchSpace().get(0).trainingCropSize());
        Assertions.assertEquals("mfejdoqeykglty", model.searchSpace().get(0).validationCropSize());
        Assertions.assertEquals("hqfgqkayejsx", model.searchSpace().get(0).validationResizeSize());
        Assertions.assertEquals("gflwfgziiucijj", model.searchSpace().get(0).weightedLoss());
        Assertions.assertEquals(1128714196, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1833029555, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT1H22M34S"), model.limitSettings().timeout());
        Assertions.assertEquals(1400168777, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(1978407151, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("efgybpmfbfununmp", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.validationData().mode());
        Assertions.assertEquals("ptdmkrrbhmpful", model.validationData().uri());
        Assertions.assertEquals(66.79392779384834D, model.validationDataSize());
    }

    @Test
    public void testSerialize() {
        ImageClassificationMultilabel model =
            new ImageClassificationMultilabel()
                .withLogVerbosity(LogVerbosity.CRITICAL)
                .withTargetColumnName("fkd")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("nphbkgfyrt")
                        .withMode(InputDeliveryMode.DOWNLOAD)
                        .withUri("lzvfictnkjjwg"))
                .withPrimaryMetric(ClassificationMultilabelPrimaryMetrics.ACCURACY)
                .withModelSettings(
                    new ImageModelSettingsClassification()
                        .withAdvancedSettings("gxx")
                        .withAmsGradient(true)
                        .withAugmentations("gzdgvpyigda")
                        .withBeta1(50.284134F)
                        .withBeta2(78.38917F)
                        .withCheckpointFrequency(15308107)
                        .withCheckpointModel(
                            new MLFlowModelJobInput()
                                .withDescription("ucaifpaurwwgilf")
                                .withMode(InputDeliveryMode.DOWNLOAD)
                                .withUri("joedx"))
                        .withCheckpointRunId("qacdmkxwxdcvjwcy")
                        .withDistributed(true)
                        .withEarlyStopping(false)
                        .withEarlyStoppingDelay(919883073)
                        .withEarlyStoppingPatience(1735818040)
                        .withEnableOnnxNormalization(false)
                        .withEvaluationFrequency(1522504135)
                        .withGradientAccumulationStep(1636678617)
                        .withLayersToFreeze(259397092)
                        .withLearningRate(7.0950627F)
                        .withLearningRateScheduler(LearningRateScheduler.WARMUP_COSINE)
                        .withModelName("m")
                        .withMomentum(59.436913F)
                        .withNesterov(true)
                        .withNumberOfEpochs(1080891031)
                        .withNumberOfWorkers(615131106)
                        .withOptimizer(StochasticOptimizer.ADAMW)
                        .withRandomSeed(1475743348)
                        .withStepLRGamma(79.30035F)
                        .withStepLRStepSize(1316431372)
                        .withTrainingBatchSize(2128038288)
                        .withValidationBatchSize(215602639)
                        .withWarmupCosineLRCycles(40.02701F)
                        .withWarmupCosineLRWarmupEpochs(84373044)
                        .withWeightDecay(18.430948F)
                        .withTrainingCropSize(527832603)
                        .withValidationCropSize(1746768038)
                        .withValidationResizeSize(801292109)
                        .withWeightedLoss(412593801))
                .withSearchSpace(
                    Arrays
                        .asList(
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("atlijjjr")
                                .withAugmentations("am")
                                .withBeta1("szknxkvccxe")
                                .withBeta2("vkunmign")
                                .withDistributed("ikkgqo")
                                .withEarlyStopping("wpin")
                                .withEarlyStoppingDelay("dvabbxbhmedeilb")
                                .withEarlyStoppingPatience("wfcfxzirzz")
                                .withEnableOnnxNormalization("vwypusuvjsl")
                                .withEvaluationFrequency("wci")
                                .withGradientAccumulationStep("jsllfryvd")
                                .withLayersToFreeze("x")
                                .withLearningRate("q")
                                .withLearningRateScheduler("frgnawbabgfbktyj")
                                .withModelName("czlfsy")
                                .withMomentum("frbzgowo")
                                .withNesterov("mj")
                                .withNumberOfEpochs("jcx")
                                .withNumberOfWorkers("qg")
                                .withOptimizer("lusrv")
                                .withRandomSeed("simjceagbjqvlsu")
                                .withStepLRGamma("wzas")
                                .withStepLRStepSize("gon")
                                .withTrainingBatchSize("jfqipubyznclkfk")
                                .withValidationBatchSize("bgvopemt")
                                .withWarmupCosineLRCycles("qujlyegqa")
                                .withWarmupCosineLRWarmupEpochs("igflqqbtnyjp")
                                .withWeightDecay("xdb")
                                .withTrainingCropSize("djrkclamggl")
                                .withValidationCropSize("mfejdoqeykglty")
                                .withValidationResizeSize("hqfgqkayejsx")
                                .withWeightedLoss("gflwfgziiucijj"),
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("kzwjiqullq")
                                .withAugmentations("dmvr")
                                .withBeta1("mqerndb")
                                .withBeta2("yeofltfnnxrkad")
                                .withDistributed("ynnfmuiii")
                                .withEarlyStopping("pfoh")
                                .withEarlyStoppingDelay("fkx")
                                .withEarlyStoppingPatience("cbrwjiutgnjizbe")
                                .withEnableOnnxNormalization("oiymrvzbjuyrsrzi")
                                .withEvaluationFrequency("tixgbd")
                                .withGradientAccumulationStep("ifrevk")
                                .withLayersToFreeze("pezkis")
                                .withLearningRate("jm")
                                .withLearningRateScheduler("hsyparybjuf")
                                .withModelName("bjczjnciuiyqvlda")
                                .withMomentum("v")
                                .withNesterov("i")
                                .withNumberOfEpochs("qzlgcndhzxrrfcfs")
                                .withNumberOfWorkers("khgsnxuwwkpphefs")
                                .withOptimizer("xlb")
                                .withRandomSeed("omeikjcl")
                                .withStepLRGamma("acnmwpfsuqtaaz")
                                .withStepLRStepSize("bxyxoy")
                                .withTrainingBatchSize("uqqiqezxlhd")
                                .withValidationBatchSize("qdcadwvps")
                                .withWarmupCosineLRCycles("j")
                                .withWarmupCosineLRWarmupEpochs("hjriyb")
                                .withWeightDecay("zo")
                                .withTrainingCropSize("abmvmsxbaevwjc")
                                .withValidationCropSize("ot")
                                .withValidationResizeSize("wuhvaj")
                                .withWeightedLoss("ilfemjj"),
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("pnqn")
                                .withAugmentations("w")
                                .withBeta1("edenrexkxbhxv")
                                .withBeta2("nul")
                                .withDistributed("nhj")
                                .withEarlyStopping("dyznfajsvks")
                                .withEarlyStoppingDelay("qozzkivyhjrliizj")
                                .withEarlyStoppingPatience("lqfhefkwabs")
                                .withEnableOnnxNormalization("ron")
                                .withEvaluationFrequency("lmgnlqxsjx")
                                .withGradientAccumulationStep("lexhv")
                                .withLayersToFreeze("b")
                                .withLearningRate("oolzqocarkuzl")
                                .withLearningRateScheduler("nndtsnxa")
                                .withModelName("ytllhdyzmy")
                                .withMomentum("zexnxakcky")
                                .withNesterov("mxgaabjkdtfohfao")
                                .withNumberOfEpochs("vkiwrsiwdyjqu")
                                .withNumberOfWorkers("kcrr")
                                .withOptimizer("eek")
                                .withRandomSeed("uehogdd")
                                .withStepLRGamma("bcbgydlqidywmhm")
                                .withStepLRStepSize("yrilkfb")
                                .withTrainingBatchSize("qqxvztpbn")
                                .withValidationBatchSize("qtxjtomalswbnfdd")
                                .withWarmupCosineLRCycles("ldwq")
                                .withWarmupCosineLRWarmupEpochs("sfzygleexahv")
                                .withWeightDecay("whsbrcary")
                                .withTrainingCropSize("nxwdvwnjkg")
                                .withValidationCropSize("nmx")
                                .withValidationResizeSize("rsqftib")
                                .withWeightedLoss("ibuyvpirf")))
                .withLimitSettings(
                    new ImageLimitSettings()
                        .withMaxConcurrentTrials(1128714196)
                        .withMaxTrials(1833029555)
                        .withTimeout(Duration.parse("PT1H22M34S")))
                .withSweepSettings(
                    new ImageSweepSettings()
                        .withEarlyTermination(
                            new EarlyTerminationPolicy()
                                .withDelayEvaluation(1400168777)
                                .withEvaluationInterval(1978407151))
                        .withSamplingAlgorithm(SamplingAlgorithmType.BAYESIAN))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("efgybpmfbfununmp")
                        .withMode(InputDeliveryMode.DIRECT)
                        .withUri("ptdmkrrbhmpful"))
                .withValidationDataSize(66.79392779384834D);
        model = BinaryData.fromObject(model).toObject(ImageClassificationMultilabel.class);
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.logVerbosity());
        Assertions.assertEquals("fkd", model.targetColumnName());
        Assertions.assertEquals("nphbkgfyrt", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("lzvfictnkjjwg", model.trainingData().uri());
        Assertions.assertEquals(ClassificationMultilabelPrimaryMetrics.ACCURACY, model.primaryMetric());
        Assertions.assertEquals("gxx", model.modelSettings().advancedSettings());
        Assertions.assertEquals(true, model.modelSettings().amsGradient());
        Assertions.assertEquals("gzdgvpyigda", model.modelSettings().augmentations());
        Assertions.assertEquals(50.284134F, model.modelSettings().beta1());
        Assertions.assertEquals(78.38917F, model.modelSettings().beta2());
        Assertions.assertEquals(15308107, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("ucaifpaurwwgilf", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("joedx", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("qacdmkxwxdcvjwcy", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(false, model.modelSettings().earlyStopping());
        Assertions.assertEquals(919883073, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(1735818040, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(false, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1522504135, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(1636678617, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(259397092, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(7.0950627F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("m", model.modelSettings().modelName());
        Assertions.assertEquals(59.436913F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(1080891031, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(615131106, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAMW, model.modelSettings().optimizer());
        Assertions.assertEquals(1475743348, model.modelSettings().randomSeed());
        Assertions.assertEquals(79.30035F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(1316431372, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(2128038288, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(215602639, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(40.02701F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(84373044, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(18.430948F, model.modelSettings().weightDecay());
        Assertions.assertEquals(527832603, model.modelSettings().trainingCropSize());
        Assertions.assertEquals(1746768038, model.modelSettings().validationCropSize());
        Assertions.assertEquals(801292109, model.modelSettings().validationResizeSize());
        Assertions.assertEquals(412593801, model.modelSettings().weightedLoss());
        Assertions.assertEquals("atlijjjr", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("am", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("szknxkvccxe", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("vkunmign", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("ikkgqo", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("wpin", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("dvabbxbhmedeilb", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("wfcfxzirzz", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("vwypusuvjsl", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("wci", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("jsllfryvd", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("x", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("q", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("frgnawbabgfbktyj", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("czlfsy", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("frbzgowo", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("mj", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("jcx", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("qg", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("lusrv", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("simjceagbjqvlsu", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("wzas", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("gon", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("jfqipubyznclkfk", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("bgvopemt", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("qujlyegqa", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("igflqqbtnyjp", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("xdb", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("djrkclamggl", model.searchSpace().get(0).trainingCropSize());
        Assertions.assertEquals("mfejdoqeykglty", model.searchSpace().get(0).validationCropSize());
        Assertions.assertEquals("hqfgqkayejsx", model.searchSpace().get(0).validationResizeSize());
        Assertions.assertEquals("gflwfgziiucijj", model.searchSpace().get(0).weightedLoss());
        Assertions.assertEquals(1128714196, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1833029555, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT1H22M34S"), model.limitSettings().timeout());
        Assertions.assertEquals(1400168777, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(1978407151, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("efgybpmfbfununmp", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.validationData().mode());
        Assertions.assertEquals("ptdmkrrbhmpful", model.validationData().uri());
        Assertions.assertEquals(66.79392779384834D, model.validationDataSize());
    }
}
