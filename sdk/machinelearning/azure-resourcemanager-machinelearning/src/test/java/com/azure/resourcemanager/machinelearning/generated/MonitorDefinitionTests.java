// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ModelTaskType;
import com.azure.resourcemanager.machinelearning.models.MonitorComputeConfigurationBase;
import com.azure.resourcemanager.machinelearning.models.MonitorDefinition;
import com.azure.resourcemanager.machinelearning.models.MonitorEmailNotificationSettings;
import com.azure.resourcemanager.machinelearning.models.MonitoringNotificationType;
import com.azure.resourcemanager.machinelearning.models.MonitoringSignalBase;
import com.azure.resourcemanager.machinelearning.models.MonitoringTarget;
import com.azure.resourcemanager.machinelearning.models.MonitorNotificationSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MonitorDefinitionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitorDefinition model = BinaryData.fromString(
            "{\"monitoringTarget\":{\"modelId\":\"cgdhyhgoq\",\"deploymentId\":\"oyqyxyjrcbqpb\",\"taskType\":\"Classification\"},\"signals\":{\"oeehpmjenvjeatea\":{\"signalType\":\"MonitoringSignalBase\",\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"fwjlof\":\"tdahneaoovtyjzti\",\"uklajvcfoc\":\"ekfsrm\",\"kwxnhwhhnoyrza\":\"hapejov\"}},\"kft\":{\"signalType\":\"MonitoringSignalBase\",\"notificationTypes\":[\"AmlNotification\",\"AmlNotification\"],\"properties\":{\"olrndwdb\":\"djxldnaryyinzk\",\"xlu\":\"xvzaledoy\"}}},\"computeConfiguration\":{\"computeType\":\"MonitorComputeConfigurationBase\"},\"alertNotificationSettings\":{\"emailNotificationSettings\":{\"emails\":[\"qxmyzkl\",\"oanpohrvm\",\"rqra\",\"a\"]}}}")
            .toObject(MonitorDefinition.class);
        Assertions.assertEquals("cgdhyhgoq", model.monitoringTarget().modelId());
        Assertions.assertEquals("oyqyxyjrcbqpb", model.monitoringTarget().deploymentId());
        Assertions.assertEquals(ModelTaskType.CLASSIFICATION, model.monitoringTarget().taskType());
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION,
            model.signals().get("oeehpmjenvjeatea").notificationTypes().get(0));
        Assertions.assertEquals("tdahneaoovtyjzti", model.signals().get("oeehpmjenvjeatea").properties().get("fwjlof"));
        Assertions.assertEquals("qxmyzkl",
            model.alertNotificationSettings().emailNotificationSettings().emails().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitorDefinition model = new MonitorDefinition()
            .withMonitoringTarget(new MonitoringTarget().withModelId("cgdhyhgoq")
                .withDeploymentId("oyqyxyjrcbqpb")
                .withTaskType(ModelTaskType.CLASSIFICATION))
            .withSignals(mapOf("oeehpmjenvjeatea",
                new MonitoringSignalBase()
                    .withNotificationTypes(Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION,
                        MonitoringNotificationType.AML_NOTIFICATION))
                    .withProperties(
                        mapOf("fwjlof", "tdahneaoovtyjzti", "uklajvcfoc", "ekfsrm", "kwxnhwhhnoyrza", "hapejov")),
                "kft",
                new MonitoringSignalBase()
                    .withNotificationTypes(Arrays.asList(MonitoringNotificationType.AML_NOTIFICATION,
                        MonitoringNotificationType.AML_NOTIFICATION))
                    .withProperties(mapOf("olrndwdb", "djxldnaryyinzk", "xlu", "xvzaledoy"))))
            .withComputeConfiguration(new MonitorComputeConfigurationBase())
            .withAlertNotificationSettings(new MonitorNotificationSettings().withEmailNotificationSettings(
                new MonitorEmailNotificationSettings().withEmails(Arrays.asList("qxmyzkl", "oanpohrvm", "rqra", "a"))));
        model = BinaryData.fromObject(model).toObject(MonitorDefinition.class);
        Assertions.assertEquals("cgdhyhgoq", model.monitoringTarget().modelId());
        Assertions.assertEquals("oyqyxyjrcbqpb", model.monitoringTarget().deploymentId());
        Assertions.assertEquals(ModelTaskType.CLASSIFICATION, model.monitoringTarget().taskType());
        Assertions.assertEquals(MonitoringNotificationType.AML_NOTIFICATION,
            model.signals().get("oeehpmjenvjeatea").notificationTypes().get(0));
        Assertions.assertEquals("tdahneaoovtyjzti", model.signals().get("oeehpmjenvjeatea").properties().get("fwjlof"));
        Assertions.assertEquals("qxmyzkl",
            model.alertNotificationSettings().emailNotificationSettings().emails().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
