// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.AcrDetails;
import com.azure.resourcemanager.machinelearning.models.ArmResourceId;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointResource;
import com.azure.resourcemanager.machinelearning.models.Registry;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateEndpointConnection;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateLinkServiceConnectionState;
import com.azure.resourcemanager.machinelearning.models.RegistryRegionArmDetails;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.StorageAccountDetails;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistriesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"85c77efe-f610-4d9c-bd67-7ac1145cdff2\",\"tenantId\":\"ed4db2e1-86b4-489c-a771-b618b5b286f0\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"kbiekyvak\":{\"principalId\":\"4e370532-1fae-4120-a7e8-d1a0de7cc17f\",\"clientId\":\"8b2094dd-ca57-4a8e-8910-f6e3e7bd35a7\"},\"opgnapkpaiedoxv\":{\"principalId\":\"d58533f5-3e45-4b7c-bc5c-69bacdd6299c\",\"clientId\":\"58356f63-ef06-4ee3-ac9d-8dbc7f31d432\"}}},\"kind\":\"o\",\"properties\":{\"discoveryUrl\":\"e\",\"intellectualPropertyPublisher\":\"clmzm\",\"managedResourceGroup\":{\"resourceId\":\"lghlrc\"},\"mlFlowRegistryUri\":\"qhvhc\",\"registryPrivateEndpointConnections\":[{\"id\":\"wif\",\"location\":\"jtockgqaawyyszwo\",\"properties\":{\"groupIds\":[\"lwfqrfy\",\"wzsipkhqh\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"ztmqdkhohspkgxem\"}},{\"id\":\"yaprjzbxxxqfr\",\"location\":\"zbhmxlp\",\"properties\":{\"groupIds\":[\"vgtoinozsmyv\",\"fapfbmrwhknefcoo\",\"tmd\",\"pdd\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"iosibgolaxuy\"}}],\"publicNetworkAccess\":\"jwny\",\"regionDetails\":[{\"acrDetails\":[{},{}],\"location\":\"tnrikssq\",\"storageAccountDetails\":[{}]},{\"acrDetails\":[{}],\"location\":\"kignmtoqtuivi\",\"storageAccountDetails\":[{},{},{},{}]},{\"acrDetails\":[{},{},{}],\"location\":\"slp\",\"storageAccountDetails\":[{},{},{}]}]},\"sku\":{\"name\":\"qydnokkkgi\",\"tier\":\"Free\",\"size\":\"ftsneftzetjclaq\",\"family\":\"b\",\"capacity\":1937707937},\"location\":\"gpdsuyyw\",\"tags\":{\"ddfzcnylzwlhufsg\":\"gooxuhhv\"},\"id\":\"pwrtgtd\",\"name\":\"gfhof\",\"type\":\"ptbiuikp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Registry response
            = manager.registries()
                .define("qhei")
                .withRegion("buiteedjnklvbrsx")
                .withExistingResourceGroup("yzssgbs")
                .withTags(mapOf("sd", "bh", "sdxylndbgaic", "djitlqxpsnnnxhgd"))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf("igaxw", new UserAssignedIdentity(), "arct",
                        new UserAssignedIdentity(), "ggtdvhokxxf", new UserAssignedIdentity())))
                .withKind("ho")
                .withSku(new Sku().withName("l")
                    .withTier(SkuTier.PREMIUM)
                    .withSize("rqhpxwqhzsxgm")
                    .withFamily("ygmt")
                    .withCapacity(1915398308))
                .withDiscoveryUrl("rsolhhvmfoej")
                .withIntellectualPropertyPublisher("iq")
                .withManagedResourceGroup(new ArmResourceId().withResourceId("el"))
                .withMlFlowRegistryUri("difierxxorsd")
                .withRegistryPrivateEndpointConnections(
                    Arrays.asList(
                        new RegistryPrivateEndpointConnection().withId("qfksjll")
                            .withLocation("md")
                            .withGroupIds(Arrays.asList("lvrsqci", "mirybwga", "cv"))
                            .withPrivateEndpoint(new PrivateEndpointResource())
                            .withRegistryPrivateLinkServiceConnectionState(
                                new RegistryPrivateLinkServiceConnectionState())
                            .withProvisioningState("emazgtbynxshc"),
                        new RegistryPrivateEndpointConnection().withId("exgeqojzvuz")
                            .withLocation("kojjp")
                            .withGroupIds(Arrays.asList("uovsv", "npcxdkmtvpa"))
                            .withPrivateEndpoint(new PrivateEndpointResource())
                            .withRegistryPrivateLinkServiceConnectionState(
                                new RegistryPrivateLinkServiceConnectionState())
                            .withProvisioningState("nyhmlpzde"),
                        new RegistryPrivateEndpointConnection().withId("tucnzbpoc")
                            .withLocation("qzf")
                            .withGroupIds(Arrays.asList("mzdnvno", "klgrenuqsgertxic", "mgsncbbdokp", "aedbsl"))
                            .withPrivateEndpoint(new PrivateEndpointResource())
                            .withRegistryPrivateLinkServiceConnectionState(
                                new RegistryPrivateLinkServiceConnectionState())
                            .withProvisioningState("pxswmccykbvi")))
                .withPublicNetworkAccess("epxlxbo")
                .withRegionDetails(
                    Arrays
                        .asList(
                            new RegistryRegionArmDetails()
                                .withAcrDetails(Arrays.asList(new AcrDetails(), new AcrDetails(), new AcrDetails(),
                                    new AcrDetails()))
                                .withLocation("acfskzwesetutq")
                                .withStorageAccountDetails(Arrays.asList(new StorageAccountDetails())),
                            new RegistryRegionArmDetails().withAcrDetails(Arrays.asList(new AcrDetails()))
                                .withLocation("ixtrnakytzcm")
                                .withStorageAccountDetails(Arrays.asList(new StorageAccountDetails()))))
                .create();

        Assertions.assertEquals("gpdsuyyw", response.location());
        Assertions.assertEquals("gooxuhhv", response.tags().get("ddfzcnylzwlhufsg"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("o", response.kind());
        Assertions.assertEquals("qydnokkkgi", response.sku().name());
        Assertions.assertEquals(SkuTier.FREE, response.sku().tier());
        Assertions.assertEquals("ftsneftzetjclaq", response.sku().size());
        Assertions.assertEquals("b", response.sku().family());
        Assertions.assertEquals(1937707937, response.sku().capacity());
        Assertions.assertEquals("e", response.discoveryUrl());
        Assertions.assertEquals("clmzm", response.intellectualPropertyPublisher());
        Assertions.assertEquals("lghlrc", response.managedResourceGroup().resourceId());
        Assertions.assertEquals("qhvhc", response.mlFlowRegistryUri());
        Assertions.assertEquals("wif", response.registryPrivateEndpointConnections().get(0).id());
        Assertions.assertEquals("jtockgqaawyyszwo", response.registryPrivateEndpointConnections().get(0).location());
        Assertions.assertEquals("lwfqrfy", response.registryPrivateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("ztmqdkhohspkgxem",
            response.registryPrivateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("jwny", response.publicNetworkAccess());
        Assertions.assertEquals("tnrikssq", response.regionDetails().get(0).location());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
