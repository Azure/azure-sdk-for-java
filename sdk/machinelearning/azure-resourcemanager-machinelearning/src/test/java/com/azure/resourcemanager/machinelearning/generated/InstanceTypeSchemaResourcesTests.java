// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchemaResources;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InstanceTypeSchemaResourcesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceTypeSchemaResources model = BinaryData.fromString(
            "{\"requests\":{\"mdlgy\":\"mw\",\"gnqfqqdlcvmyol\":\"ixokwtjawhv\",\"nzyzawatuwqko\":\"aymjchtvsnvlaq\",\"wgwima\":\"bczothymgobllms\"},\"limits\":{\"vkhgv\":\"akhtmhobcyanrfvq\",\"ymhcctopuo\":\"ogxkfnaoa\",\"hquhczygxvhajp\":\"yrnskb\"}}")
            .toObject(InstanceTypeSchemaResources.class);
        Assertions.assertEquals("mw", model.requests().get("mdlgy"));
        Assertions.assertEquals("akhtmhobcyanrfvq", model.limits().get("vkhgv"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceTypeSchemaResources model = new InstanceTypeSchemaResources()
            .withRequests(mapOf("mdlgy", "mw", "gnqfqqdlcvmyol", "ixokwtjawhv", "nzyzawatuwqko", "aymjchtvsnvlaq",
                "wgwima", "bczothymgobllms"))
            .withLimits(mapOf("vkhgv", "akhtmhobcyanrfvq", "ymhcctopuo", "ogxkfnaoa", "hquhczygxvhajp", "yrnskb"));
        model = BinaryData.fromObject(model).toObject(InstanceTypeSchemaResources.class);
        Assertions.assertEquals("mw", model.requests().get("mdlgy"));
        Assertions.assertEquals("akhtmhobcyanrfvq", model.limits().get("vkhgv"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
