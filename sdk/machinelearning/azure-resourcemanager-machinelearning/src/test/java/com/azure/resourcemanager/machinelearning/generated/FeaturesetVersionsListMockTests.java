// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.EmailNotificationEnableType;
import com.azure.resourcemanager.machinelearning.models.FeaturesetVersion;
import com.azure.resourcemanager.machinelearning.models.ListViewType;
import com.azure.resourcemanager.machinelearning.models.MaterializationStoreType;
import com.azure.resourcemanager.machinelearning.models.RecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FeaturesetVersionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"specification\":{\"path\":\"zuimpiybmybtihcg\"},\"materializationSettings\":{\"storeType\":\"None\",\"schedule\":{\"triggerType\":\"Recurrence\",\"frequency\":\"Hour\",\"interval\":754391268,\"schedule\":{\"hours\":[471304798,2070713613],\"minutes\":[78034116,484189663,1618494270],\"weekDays\":[\"Thursday\",\"Monday\",\"Wednesday\"],\"monthDays\":[1881150095,1100953393]},\"endTime\":\"iasichhxqnlmjv\",\"startTime\":\"sdfibwvhw\",\"timeZone\":\"hysrmk\"},\"notification\":{\"emails\":[\"nxzljxaayxpd\",\"vgyujkxjge\",\"zdbigitra\"],\"emailOn\":[\"JobCancelled\"],\"webhooks\":{\"irnbpiddvbxqxoli\":{\"webhookType\":\"Webhook\"}}},\"resource\":{\"instanceType\":\"lsr\"},\"sparkConfiguration\":{\"ktbay\":\"vtzy\",\"lk\":\"asnj\",\"fdssofuxys\":\"yzlkqyezyzxkr\",\"qajfwz\":\"ltkqvikoi\"}},\"stage\":\"fgoqv\",\"entities\":[\"eiydoqbr\"],\"provisioningState\":\"Failed\",\"isArchived\":true,\"isAnonymous\":true,\"description\":\"ednkz\",\"tags\":{\"xpkrwgznacmkw\":\"jawpzrtse\"},\"properties\":{\"niadgzxbwn\":\"l\",\"u\":\"yihct\"}},\"id\":\"zozbkh\",\"name\":\"vughutiql\",\"type\":\"vnfyfyftkvzb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<FeaturesetVersion> response = manager.featuresetVersions()
            .list("wjudx", "fvn", "zcffchn", "iyevjeht", "eaoxxsehfl", ListViewType.ARCHIVED_ONLY, 1116596337, "bpyz",
                "cplphfstvurtkce", "yvaxwzbwxx", "disxsrrhr", "rbbedrn", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ednkz", response.iterator().next().properties().description());
        Assertions.assertEquals("jawpzrtse", response.iterator().next().properties().tags().get("xpkrwgznacmkw"));
        Assertions.assertEquals("l", response.iterator().next().properties().properties().get("niadgzxbwn"));
        Assertions.assertEquals(true, response.iterator().next().properties().isArchived());
        Assertions.assertEquals(true, response.iterator().next().properties().isAnonymous());
        Assertions.assertEquals("zuimpiybmybtihcg", response.iterator().next().properties().specification().path());
        Assertions.assertEquals(MaterializationStoreType.NONE,
            response.iterator().next().properties().materializationSettings().storeType());
        Assertions.assertEquals("iasichhxqnlmjv",
            response.iterator().next().properties().materializationSettings().schedule().endTime());
        Assertions.assertEquals("sdfibwvhw",
            response.iterator().next().properties().materializationSettings().schedule().startTime());
        Assertions.assertEquals("hysrmk",
            response.iterator().next().properties().materializationSettings().schedule().timeZone());
        Assertions.assertEquals(RecurrenceFrequency.HOUR,
            response.iterator().next().properties().materializationSettings().schedule().frequency());
        Assertions.assertEquals(754391268,
            response.iterator().next().properties().materializationSettings().schedule().interval());
        Assertions.assertEquals(471304798,
            response.iterator().next().properties().materializationSettings().schedule().schedule().hours().get(0));
        Assertions.assertEquals(78034116,
            response.iterator().next().properties().materializationSettings().schedule().schedule().minutes().get(0));
        Assertions.assertEquals(WeekDay.THURSDAY,
            response.iterator().next().properties().materializationSettings().schedule().schedule().weekDays().get(0));
        Assertions.assertEquals(1881150095,
            response.iterator().next().properties().materializationSettings().schedule().schedule().monthDays().get(0));
        Assertions.assertEquals("nxzljxaayxpd",
            response.iterator().next().properties().materializationSettings().notification().emails().get(0));
        Assertions.assertEquals(EmailNotificationEnableType.JOB_CANCELLED,
            response.iterator().next().properties().materializationSettings().notification().emailOn().get(0));
        Assertions.assertEquals("lsr",
            response.iterator().next().properties().materializationSettings().resource().instanceType());
        Assertions.assertEquals("vtzy",
            response.iterator().next().properties().materializationSettings().sparkConfiguration().get("ktbay"));
        Assertions.assertEquals("fgoqv", response.iterator().next().properties().stage());
        Assertions.assertEquals("eiydoqbr", response.iterator().next().properties().entities().get(0));
    }
}
