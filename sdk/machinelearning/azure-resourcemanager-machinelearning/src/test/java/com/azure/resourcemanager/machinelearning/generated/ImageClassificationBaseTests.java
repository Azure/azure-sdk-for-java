// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageClassificationBase;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsClassification;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettingsClassification;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageClassificationBaseTests {
    @Test
    public void testDeserialize() {
        ImageClassificationBase model =
            BinaryData
                .fromString(
                    "{\"modelSettings\":{\"trainingCropSize\":1502657115,\"validationCropSize\":1753796230,\"validationResizeSize\":1188668576,\"weightedLoss\":230855548,\"advancedSettings\":\"zmnhiilialwc\",\"amsGradient\":false,\"augmentations\":\"bbcccgz\",\"beta1\":5.081415,\"beta2\":95.825554,\"checkpointFrequency\":68368510,\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"mode\":\"ReadWriteMount\",\"uri\":\"a\",\"description\":\"gftipwc\"},\"checkpointRunId\":\"yubhiqdx\",\"distributed\":true,\"earlyStopping\":true,\"earlyStoppingDelay\":830946639,\"earlyStoppingPatience\":979480154,\"enableOnnxNormalization\":true,\"evaluationFrequency\":1652198165,\"gradientAccumulationStep\":2134025478,\"layersToFreeze\":605759870,\"learningRate\":44.40366,\"learningRateScheduler\":\"WarmupCosine\",\"modelName\":\"bui\",\"momentum\":41.08408,\"nesterov\":true,\"numberOfEpochs\":822937790,\"numberOfWorkers\":1188527137,\"optimizer\":\"Adam\",\"randomSeed\":206743911,\"stepLRGamma\":93.7044,\"stepLRStepSize\":1081534668,\"trainingBatchSize\":222537578,\"validationBatchSize\":1620341221,\"warmupCosineLRCycles\":44.47214,\"warmupCosineLRWarmupEpochs\":895962731,\"weightDecay\":84.9758},\"searchSpace\":[{\"trainingCropSize\":\"ov\",\"validationCropSize\":\"exdnd\",\"validationResizeSize\":\"dwead\",\"weightedLoss\":\"zmwntopagt\",\"amsGradient\":\"v\",\"augmentations\":\"agoaqylkjztji\",\"beta1\":\"zjcg\",\"beta2\":\"itpfinzcpdl\",\"distributed\":\"rlgjm\",\"earlyStopping\":\"drvcqguef\",\"earlyStoppingDelay\":\"ompheqdur\",\"earlyStoppingPatience\":\"yujlfyoumpckyecl\",\"enableOnnxNormalization\":\"igptajbrzmqxucyc\",\"evaluationFrequency\":\"oclxiut\",\"gradientAccumulationStep\":\"cyzyzjdnrqjbt\",\"layersToFreeze\":\"eaoqaqbzgyhf\",\"learningRate\":\"v\",\"learningRateScheduler\":\"tbwbqamteuli\",\"modelName\":\"lpkcvmwfauxxep\",\"momentum\":\"wbormcqmi\",\"nesterov\":\"ijqpkzfbojxjmcs\",\"numberOfEpochs\":\"qwixvcpwnk\",\"numberOfWorkers\":\"wzwofalickduo\",\"optimizer\":\"tamtyv\",\"randomSeed\":\"nxrwzawnvs\",\"stepLRGamma\":\"fhzag\",\"stepLRStepSize\":\"vhycvdimwrzregzg\",\"trainingBatchSize\":\"futrwpweryekzkd\",\"validationBatchSize\":\"eotta\",\"warmupCosineLRCycles\":\"yos\",\"warmupCosineLRWarmupEpochs\":\"whnhjtfv\",\"weightDecay\":\"dpmiljpn\"},{\"trainingCropSize\":\"nudqllz\",\"validationCropSize\":\"uzpjlxeehux\",\"validationResizeSize\":\"hzlraymezxlsk\",\"weightedLoss\":\"mxrfdsa\",\"amsGradient\":\"ednwyyshtu\",\"augmentations\":\"mevuafpwzy\",\"beta1\":\"rkgwltxeqip\",\"beta2\":\"zdyi\",\"distributed\":\"fayorpravkjoges\",\"earlyStopping\":\"bnsmjkwynqxaek\",\"earlyStoppingDelay\":\"ykvwjtqpkevmyltj\",\"earlyStoppingPatience\":\"spxklu\",\"enableOnnxNormalization\":\"clf\",\"evaluationFrequency\":\"annnoytzposewx\",\"gradientAccumulationStep\":\"pxvkqma\",\"layersToFreeze\":\"xvpif\",\"learningRate\":\"aifyzyzeyuubeids\",\"learningRateScheduler\":\"fytoi\",\"modelName\":\"gygvfltgvdiho\",\"momentum\":\"krxwet\",\"nesterov\":\"drcyrucpcun\",\"numberOfEpochs\":\"zdqumoe\",\"numberOfWorkers\":\"dnaienhqhskndnel\",\"optimizer\":\"aadl\",\"randomSeed\":\"wf\",\"stepLRGamma\":\"nniyopetxi\",\"stepLRStepSize\":\"nrlyxnuc\",\"trainingBatchSize\":\"p\",\"validationBatchSize\":\"lkwq\",\"warmupCosineLRCycles\":\"tv\",\"warmupCosineLRWarmupEpochs\":\"sdtcjbctvivuzqym\",\"weightDecay\":\"owog\"},{\"trainingCropSize\":\"it\",\"validationCropSize\":\"hzvb\",\"validationResizeSize\":\"cdb\",\"weightedLoss\":\"fzndscxmxeatkd\",\"amsGradient\":\"wnrdjyibqbnaom\",\"augmentations\":\"rmkuh\",\"beta1\":\"xljalfihc\",\"beta2\":\"obcancdexxqcw\",\"distributed\":\"xf\",\"earlyStopping\":\"aknokzwjjzrl\",\"earlyStoppingDelay\":\"xldzyyfytpqsix\",\"earlyStoppingPatience\":\"m\",\"enableOnnxNormalization\":\"jivyqlkjuv\",\"evaluationFrequency\":\"bmslzoyov\",\"gradientAccumulationStep\":\"dbpqvybefgvm\",\"layersToFreeze\":\"okcvtlubses\",\"learningRate\":\"cua\",\"learningRateScheduler\":\"rhunlp\",\"modelName\":\"ykycndzfqi\",\"momentum\":\"reuykbbmnwagl\",\"nesterov\":\"xoe\",\"numberOfEpochs\":\"nqlnfwmyymvqd\",\"numberOfWorkers\":\"bhfckdvezcrcssb\",\"optimizer\":\"ddubbnqfblhkal\",\"randomSeed\":\"pavawugiqjtio\",\"stepLRGamma\":\"gdmin\",\"stepLRStepSize\":\"tteajohiygs\",\"trainingBatchSize\":\"bonhpczykmktp\",\"validationBatchSize\":\"xqcsehch\",\"warmupCosineLRCycles\":\"ufmpqumqyjgy\",\"warmupCosineLRWarmupEpochs\":\"ulodsaeuzanhsfnh\",\"weightDecay\":\"nwph\"}],\"limitSettings\":{\"maxConcurrentTrials\":1070293066,\"maxTrials\":1152899646,\"timeout\":\"PT122H42S\"},\"sweepSettings\":{\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"delayEvaluation\":1809951616,\"evaluationInterval\":1731697979},\"samplingAlgorithm\":\"Bayesian\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"EvalMount\",\"uri\":\"jufwbeqrkuorhtss\",\"description\":\"qnmdvhazcvjy\"},\"validationDataSize\":57.07089539667136}")
                .toObject(ImageClassificationBase.class);
        Assertions.assertEquals(1070293066, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1152899646, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT122H42S"), model.limitSettings().timeout());
        Assertions.assertEquals(1809951616, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(1731697979, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("qnmdvhazcvjy", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.validationData().mode());
        Assertions.assertEquals("jufwbeqrkuorhtss", model.validationData().uri());
        Assertions.assertEquals(57.07089539667136D, model.validationDataSize());
        Assertions.assertEquals("zmnhiilialwc", model.modelSettings().advancedSettings());
        Assertions.assertEquals(false, model.modelSettings().amsGradient());
        Assertions.assertEquals("bbcccgz", model.modelSettings().augmentations());
        Assertions.assertEquals(5.081415F, model.modelSettings().beta1());
        Assertions.assertEquals(95.825554F, model.modelSettings().beta2());
        Assertions.assertEquals(68368510, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("gftipwc", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("a", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("yubhiqdx", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(true, model.modelSettings().earlyStopping());
        Assertions.assertEquals(830946639, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(979480154, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(true, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1652198165, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(2134025478, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(605759870, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(44.40366F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("bui", model.modelSettings().modelName());
        Assertions.assertEquals(41.08408F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(822937790, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(1188527137, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAM, model.modelSettings().optimizer());
        Assertions.assertEquals(206743911, model.modelSettings().randomSeed());
        Assertions.assertEquals(93.7044F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(1081534668, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(222537578, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(1620341221, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(44.47214F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(895962731, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(84.9758F, model.modelSettings().weightDecay());
        Assertions.assertEquals(1502657115, model.modelSettings().trainingCropSize());
        Assertions.assertEquals(1753796230, model.modelSettings().validationCropSize());
        Assertions.assertEquals(1188668576, model.modelSettings().validationResizeSize());
        Assertions.assertEquals(230855548, model.modelSettings().weightedLoss());
        Assertions.assertEquals("v", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("agoaqylkjztji", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("zjcg", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("itpfinzcpdl", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("rlgjm", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("drvcqguef", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("ompheqdur", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("yujlfyoumpckyecl", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("igptajbrzmqxucyc", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("oclxiut", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("cyzyzjdnrqjbt", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("eaoqaqbzgyhf", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("v", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("tbwbqamteuli", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("lpkcvmwfauxxep", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("wbormcqmi", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("ijqpkzfbojxjmcs", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("qwixvcpwnk", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("wzwofalickduo", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("tamtyv", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("nxrwzawnvs", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("fhzag", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("vhycvdimwrzregzg", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("futrwpweryekzkd", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("eotta", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("yos", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("whnhjtfv", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("dpmiljpn", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("ov", model.searchSpace().get(0).trainingCropSize());
        Assertions.assertEquals("exdnd", model.searchSpace().get(0).validationCropSize());
        Assertions.assertEquals("dwead", model.searchSpace().get(0).validationResizeSize());
        Assertions.assertEquals("zmwntopagt", model.searchSpace().get(0).weightedLoss());
    }

    @Test
    public void testSerialize() {
        ImageClassificationBase model =
            new ImageClassificationBase()
                .withLimitSettings(
                    new ImageLimitSettings()
                        .withMaxConcurrentTrials(1070293066)
                        .withMaxTrials(1152899646)
                        .withTimeout(Duration.parse("PT122H42S")))
                .withSweepSettings(
                    new ImageSweepSettings()
                        .withEarlyTermination(
                            new EarlyTerminationPolicy()
                                .withDelayEvaluation(1809951616)
                                .withEvaluationInterval(1731697979))
                        .withSamplingAlgorithm(SamplingAlgorithmType.BAYESIAN))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("qnmdvhazcvjy")
                        .withMode(InputDeliveryMode.EVAL_MOUNT)
                        .withUri("jufwbeqrkuorhtss"))
                .withValidationDataSize(57.07089539667136D)
                .withModelSettings(
                    new ImageModelSettingsClassification()
                        .withAdvancedSettings("zmnhiilialwc")
                        .withAmsGradient(false)
                        .withAugmentations("bbcccgz")
                        .withBeta1(5.081415F)
                        .withBeta2(95.825554F)
                        .withCheckpointFrequency(68368510)
                        .withCheckpointModel(
                            new MLFlowModelJobInput()
                                .withDescription("gftipwc")
                                .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                                .withUri("a"))
                        .withCheckpointRunId("yubhiqdx")
                        .withDistributed(true)
                        .withEarlyStopping(true)
                        .withEarlyStoppingDelay(830946639)
                        .withEarlyStoppingPatience(979480154)
                        .withEnableOnnxNormalization(true)
                        .withEvaluationFrequency(1652198165)
                        .withGradientAccumulationStep(2134025478)
                        .withLayersToFreeze(605759870)
                        .withLearningRate(44.40366F)
                        .withLearningRateScheduler(LearningRateScheduler.WARMUP_COSINE)
                        .withModelName("bui")
                        .withMomentum(41.08408F)
                        .withNesterov(true)
                        .withNumberOfEpochs(822937790)
                        .withNumberOfWorkers(1188527137)
                        .withOptimizer(StochasticOptimizer.ADAM)
                        .withRandomSeed(206743911)
                        .withStepLRGamma(93.7044F)
                        .withStepLRStepSize(1081534668)
                        .withTrainingBatchSize(222537578)
                        .withValidationBatchSize(1620341221)
                        .withWarmupCosineLRCycles(44.47214F)
                        .withWarmupCosineLRWarmupEpochs(895962731)
                        .withWeightDecay(84.9758F)
                        .withTrainingCropSize(1502657115)
                        .withValidationCropSize(1753796230)
                        .withValidationResizeSize(1188668576)
                        .withWeightedLoss(230855548))
                .withSearchSpace(
                    Arrays
                        .asList(
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("v")
                                .withAugmentations("agoaqylkjztji")
                                .withBeta1("zjcg")
                                .withBeta2("itpfinzcpdl")
                                .withDistributed("rlgjm")
                                .withEarlyStopping("drvcqguef")
                                .withEarlyStoppingDelay("ompheqdur")
                                .withEarlyStoppingPatience("yujlfyoumpckyecl")
                                .withEnableOnnxNormalization("igptajbrzmqxucyc")
                                .withEvaluationFrequency("oclxiut")
                                .withGradientAccumulationStep("cyzyzjdnrqjbt")
                                .withLayersToFreeze("eaoqaqbzgyhf")
                                .withLearningRate("v")
                                .withLearningRateScheduler("tbwbqamteuli")
                                .withModelName("lpkcvmwfauxxep")
                                .withMomentum("wbormcqmi")
                                .withNesterov("ijqpkzfbojxjmcs")
                                .withNumberOfEpochs("qwixvcpwnk")
                                .withNumberOfWorkers("wzwofalickduo")
                                .withOptimizer("tamtyv")
                                .withRandomSeed("nxrwzawnvs")
                                .withStepLRGamma("fhzag")
                                .withStepLRStepSize("vhycvdimwrzregzg")
                                .withTrainingBatchSize("futrwpweryekzkd")
                                .withValidationBatchSize("eotta")
                                .withWarmupCosineLRCycles("yos")
                                .withWarmupCosineLRWarmupEpochs("whnhjtfv")
                                .withWeightDecay("dpmiljpn")
                                .withTrainingCropSize("ov")
                                .withValidationCropSize("exdnd")
                                .withValidationResizeSize("dwead")
                                .withWeightedLoss("zmwntopagt"),
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("ednwyyshtu")
                                .withAugmentations("mevuafpwzy")
                                .withBeta1("rkgwltxeqip")
                                .withBeta2("zdyi")
                                .withDistributed("fayorpravkjoges")
                                .withEarlyStopping("bnsmjkwynqxaek")
                                .withEarlyStoppingDelay("ykvwjtqpkevmyltj")
                                .withEarlyStoppingPatience("spxklu")
                                .withEnableOnnxNormalization("clf")
                                .withEvaluationFrequency("annnoytzposewx")
                                .withGradientAccumulationStep("pxvkqma")
                                .withLayersToFreeze("xvpif")
                                .withLearningRate("aifyzyzeyuubeids")
                                .withLearningRateScheduler("fytoi")
                                .withModelName("gygvfltgvdiho")
                                .withMomentum("krxwet")
                                .withNesterov("drcyrucpcun")
                                .withNumberOfEpochs("zdqumoe")
                                .withNumberOfWorkers("dnaienhqhskndnel")
                                .withOptimizer("aadl")
                                .withRandomSeed("wf")
                                .withStepLRGamma("nniyopetxi")
                                .withStepLRStepSize("nrlyxnuc")
                                .withTrainingBatchSize("p")
                                .withValidationBatchSize("lkwq")
                                .withWarmupCosineLRCycles("tv")
                                .withWarmupCosineLRWarmupEpochs("sdtcjbctvivuzqym")
                                .withWeightDecay("owog")
                                .withTrainingCropSize("nudqllz")
                                .withValidationCropSize("uzpjlxeehux")
                                .withValidationResizeSize("hzlraymezxlsk")
                                .withWeightedLoss("mxrfdsa"),
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("wnrdjyibqbnaom")
                                .withAugmentations("rmkuh")
                                .withBeta1("xljalfihc")
                                .withBeta2("obcancdexxqcw")
                                .withDistributed("xf")
                                .withEarlyStopping("aknokzwjjzrl")
                                .withEarlyStoppingDelay("xldzyyfytpqsix")
                                .withEarlyStoppingPatience("m")
                                .withEnableOnnxNormalization("jivyqlkjuv")
                                .withEvaluationFrequency("bmslzoyov")
                                .withGradientAccumulationStep("dbpqvybefgvm")
                                .withLayersToFreeze("okcvtlubses")
                                .withLearningRate("cua")
                                .withLearningRateScheduler("rhunlp")
                                .withModelName("ykycndzfqi")
                                .withMomentum("reuykbbmnwagl")
                                .withNesterov("xoe")
                                .withNumberOfEpochs("nqlnfwmyymvqd")
                                .withNumberOfWorkers("bhfckdvezcrcssb")
                                .withOptimizer("ddubbnqfblhkal")
                                .withRandomSeed("pavawugiqjtio")
                                .withStepLRGamma("gdmin")
                                .withStepLRStepSize("tteajohiygs")
                                .withTrainingBatchSize("bonhpczykmktp")
                                .withValidationBatchSize("xqcsehch")
                                .withWarmupCosineLRCycles("ufmpqumqyjgy")
                                .withWarmupCosineLRWarmupEpochs("ulodsaeuzanhsfnh")
                                .withWeightDecay("nwph")
                                .withTrainingCropSize("it")
                                .withValidationCropSize("hzvb")
                                .withValidationResizeSize("cdb")
                                .withWeightedLoss("fzndscxmxeatkd")));
        model = BinaryData.fromObject(model).toObject(ImageClassificationBase.class);
        Assertions.assertEquals(1070293066, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1152899646, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT122H42S"), model.limitSettings().timeout());
        Assertions.assertEquals(1809951616, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(1731697979, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("qnmdvhazcvjy", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.validationData().mode());
        Assertions.assertEquals("jufwbeqrkuorhtss", model.validationData().uri());
        Assertions.assertEquals(57.07089539667136D, model.validationDataSize());
        Assertions.assertEquals("zmnhiilialwc", model.modelSettings().advancedSettings());
        Assertions.assertEquals(false, model.modelSettings().amsGradient());
        Assertions.assertEquals("bbcccgz", model.modelSettings().augmentations());
        Assertions.assertEquals(5.081415F, model.modelSettings().beta1());
        Assertions.assertEquals(95.825554F, model.modelSettings().beta2());
        Assertions.assertEquals(68368510, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("gftipwc", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("a", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("yubhiqdx", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(true, model.modelSettings().earlyStopping());
        Assertions.assertEquals(830946639, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(979480154, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(true, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1652198165, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(2134025478, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(605759870, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(44.40366F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("bui", model.modelSettings().modelName());
        Assertions.assertEquals(41.08408F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(822937790, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(1188527137, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAM, model.modelSettings().optimizer());
        Assertions.assertEquals(206743911, model.modelSettings().randomSeed());
        Assertions.assertEquals(93.7044F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(1081534668, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(222537578, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(1620341221, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(44.47214F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(895962731, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(84.9758F, model.modelSettings().weightDecay());
        Assertions.assertEquals(1502657115, model.modelSettings().trainingCropSize());
        Assertions.assertEquals(1753796230, model.modelSettings().validationCropSize());
        Assertions.assertEquals(1188668576, model.modelSettings().validationResizeSize());
        Assertions.assertEquals(230855548, model.modelSettings().weightedLoss());
        Assertions.assertEquals("v", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("agoaqylkjztji", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("zjcg", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("itpfinzcpdl", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("rlgjm", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("drvcqguef", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("ompheqdur", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("yujlfyoumpckyecl", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("igptajbrzmqxucyc", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("oclxiut", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("cyzyzjdnrqjbt", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("eaoqaqbzgyhf", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("v", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("tbwbqamteuli", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("lpkcvmwfauxxep", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("wbormcqmi", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("ijqpkzfbojxjmcs", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("qwixvcpwnk", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("wzwofalickduo", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("tamtyv", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("nxrwzawnvs", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("fhzag", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("vhycvdimwrzregzg", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("futrwpweryekzkd", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("eotta", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("yos", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("whnhjtfv", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("dpmiljpn", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("ov", model.searchSpace().get(0).trainingCropSize());
        Assertions.assertEquals("exdnd", model.searchSpace().get(0).validationCropSize());
        Assertions.assertEquals("dwead", model.searchSpace().get(0).validationResizeSize());
        Assertions.assertEquals("zmwntopagt", model.searchSpace().get(0).weightedLoss());
    }
}
