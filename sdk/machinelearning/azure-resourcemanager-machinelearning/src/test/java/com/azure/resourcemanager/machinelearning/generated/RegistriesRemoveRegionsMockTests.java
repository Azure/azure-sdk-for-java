// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.RegistryInner;
import com.azure.resourcemanager.machinelearning.models.AcrDetails;
import com.azure.resourcemanager.machinelearning.models.ArmResourceId;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointResource;
import com.azure.resourcemanager.machinelearning.models.Registry;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateEndpointConnection;
import com.azure.resourcemanager.machinelearning.models.RegistryPrivateLinkServiceConnectionState;
import com.azure.resourcemanager.machinelearning.models.RegistryRegionArmDetails;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.StorageAccountDetails;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistriesRemoveRegionsMockTests {
    @Test
    public void testRemoveRegions() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"e98eb1f4-78b4-4ccc-bbf7-3df0dcf73381\",\"tenantId\":\"ab07c3b1-ab20-4753-aaf8-10b832ae959b\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"jxdrgxpuxpzslmf\":{\"principalId\":\"5263d61b-b20a-44f1-b1ec-aa5982634523\",\"clientId\":\"1296c499-c356-4dd9-ad7c-8e76c83dab8e\"}}},\"kind\":\"pzrycchqz\",\"properties\":{\"discoveryUrl\":\"gesdzgszjhe\",\"intellectualPropertyPublisher\":\"mdhchi\",\"managedResourceGroup\":{\"resourceId\":\"rhgpityeuv\"},\"mlFlowRegistryUri\":\"sbmebfgbzn\",\"registryPrivateEndpointConnections\":[{\"id\":\"kupaeywy\",\"location\":\"vyzuyqzjfvbn\",\"properties\":{\"groupIds\":[\"zlscyzvvsxmyz\",\"sgb\",\"cqheixazebmmjaig\",\"xwqiparctsheggt\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"kxx\"}},{\"id\":\"whoosrsolhhv\",\"location\":\"oejbgiqhjpe\",\"properties\":{\"groupIds\":[\"ifie\",\"xxorsdvuirqfk\",\"jllfgmdoaihl\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"ci\"}}],\"publicNetworkAccess\":\"irybwgaccvwky\",\"regionDetails\":[{\"acrDetails\":[{},{}],\"location\":\"tbynxshcawexge\",\"storageAccountDetails\":[{},{}]},{\"acrDetails\":[{},{},{}],\"location\":\"zxxkojjphbobu\",\"storageAccountDetails\":[{}]}]},\"sku\":{\"name\":\"wnpcxdkmtvparyub\",\"tier\":\"Standard\",\"size\":\"lpz\",\"family\":\"votuc\",\"capacity\":489805159},\"location\":\"ocumqzf\",\"tags\":{\"qsgert\":\"emzdnvnooklgren\",\"bd\":\"icemgsnc\",\"slbnunpxswmcc\":\"kphaed\"},\"id\":\"k\",\"name\":\"viaaep\",\"type\":\"lxbofdchboacf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Registry response
            = manager.registries()
                .removeRegions("bbbgvm", "wyzxqhuhmldhnz", new RegistryInner().withLocation("jqsshu")
                    .withTags(mapOf("rqza", "ttnurkm", "qvvtjwdlduvim", "uwome", "rmxoxtap", "tce", "bkj", "fbj"))
                    .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("o", new UserAssignedIdentity(), "tqhq",
                            new UserAssignedIdentity(), "uaermawwlnsdaz", new UserAssignedIdentity())))
                    .withKind("emcotwfuot")
                    .withSku(new Sku().withName("znyjqbwxp")
                        .withTier(SkuTier.STANDARD)
                        .withSize("isloquttkbzwgju")
                        .withFamily("bdqm")
                        .withCapacity(310451773))
                    .withDiscoveryUrl("sxzhik")
                    .withIntellectualPropertyPublisher("fszxbupsxqo")
                    .withManagedResourceGroup(new ArmResourceId().withResourceId("xcgqkhyvtajwkr"))
                    .withMlFlowRegistryUri("zlmwfncwlwov")
                    .withRegistryPrivateEndpointConnections(Arrays.asList(
                        new RegistryPrivateEndpointConnection().withId("mjbyssprkbzraljw")
                            .withLocation("csa")
                            .withGroupIds(Arrays.asList("pgzmxrg"))
                            .withPrivateEndpoint(new PrivateEndpointResource())
                            .withRegistryPrivateLinkServiceConnectionState(
                                new RegistryPrivateLinkServiceConnectionState())
                            .withProvisioningState("jdmjunnt"),
                        new RegistryPrivateEndpointConnection().withId("g")
                            .withLocation("vnwrziminet")
                            .withGroupIds(Arrays.asList("fuxdtpjcsqkedlcl"))
                            .withPrivateEndpoint(new PrivateEndpointResource())
                            .withRegistryPrivateLinkServiceConnectionState(
                                new RegistryPrivateLinkServiceConnectionState())
                            .withProvisioningState("yfftqombdsgqxa")))
                    .withPublicNetworkAccess("duo")
                    .withRegionDetails(Arrays.asList(new RegistryRegionArmDetails()
                        .withAcrDetails(Arrays.asList(new AcrDetails(), new AcrDetails(), new AcrDetails()))
                        .withLocation("byfdfuajnhpy")
                        .withStorageAccountDetails(
                            Arrays.asList(new StorageAccountDetails(), new StorageAccountDetails(),
                                new StorageAccountDetails(), new StorageAccountDetails())),
                        new RegistryRegionArmDetails()
                            .withAcrDetails(
                                Arrays.asList(new AcrDetails(), new AcrDetails(), new AcrDetails(), new AcrDetails()))
                            .withLocation("iw")
                            .withStorageAccountDetails(
                                Arrays.asList(new StorageAccountDetails(), new StorageAccountDetails(),
                                    new StorageAccountDetails(), new StorageAccountDetails())))),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ocumqzf", response.location());
        Assertions.assertEquals("emzdnvnooklgren", response.tags().get("qsgert"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("pzrycchqz", response.kind());
        Assertions.assertEquals("wnpcxdkmtvparyub", response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("lpz", response.sku().size());
        Assertions.assertEquals("votuc", response.sku().family());
        Assertions.assertEquals(489805159, response.sku().capacity());
        Assertions.assertEquals("gesdzgszjhe", response.discoveryUrl());
        Assertions.assertEquals("mdhchi", response.intellectualPropertyPublisher());
        Assertions.assertEquals("rhgpityeuv", response.managedResourceGroup().resourceId());
        Assertions.assertEquals("sbmebfgbzn", response.mlFlowRegistryUri());
        Assertions.assertEquals("kupaeywy", response.registryPrivateEndpointConnections().get(0).id());
        Assertions.assertEquals("vyzuyqzjfvbn", response.registryPrivateEndpointConnections().get(0).location());
        Assertions.assertEquals("zlscyzvvsxmyz",
            response.registryPrivateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("kxx", response.registryPrivateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("irybwgaccvwky", response.publicNetworkAccess());
        Assertions.assertEquals("tbynxshcawexge", response.regionDetails().get(0).location());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
