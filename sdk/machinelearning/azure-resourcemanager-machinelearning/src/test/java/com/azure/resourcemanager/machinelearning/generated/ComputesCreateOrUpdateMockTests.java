// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.Compute;
import com.azure.resourcemanager.machinelearning.models.ComputeResource;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ComputesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"bgymqt\",\"tags\":{\"nx\":\"reojxrjnbsc\",\"neychbjizq\":\"vi\",\"rfbo\":\"sgnwdxzedpq\",\"mlnfyz\":\"xi\"},\"sku\":{\"name\":\"frbypi\",\"tier\":\"Standard\",\"size\":\"pdjtaqh\",\"family\":\"q\",\"capacity\":87303763},\"properties\":{\"computeType\":\"Compute\",\"computeLocation\":\"njhx\",\"provisioningState\":\"Succeeded\",\"description\":\"mgpczqulptkbvc\",\"createdOn\":\"2021-07-14T21:29:39Z\",\"modifiedOn\":\"2021-07-30T18:39:13Z\",\"resourceId\":\"gqqbtimpk\",\"provisioningErrors\":[],\"isAttachedCompute\":true,\"disableLocalAuth\":false},\"id\":\"ihqhudsmusua\",\"name\":\"w\",\"type\":\"akx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MachineLearningManager manager =
            MachineLearningManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ComputeResource response =
            manager
                .computes()
                .define("cdosqkptj")
                .withExistingWorkspace("rksykp", "dqxwabzrwiqrxhac")
                .withRegion("inwhed")
                .withTags(
                    mapOf(
                        "gvydjufbnklblaxp",
                        "bqwuntobuizazzel",
                        "lfdxaglz",
                        "gjwdab",
                        "siflikyypzkgxf",
                        "ytlbtlqhopxouvm"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf()))
                .withSku(
                    new Sku()
                        .withName("myrqsdbpokszan")
                        .withTier(SkuTier.STANDARD)
                        .withSize("pter")
                        .withFamily("uwkirk")
                        .withCapacity(552788517))
                .withProperties(
                    new Compute()
                        .withComputeLocation("detjygowi")
                        .withDescription("olzkgys")
                        .withResourceId("zoxlvoc")
                        .withDisableLocalAuth(true))
                .create();

        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("bgymqt", response.location());
        Assertions.assertEquals("reojxrjnbsc", response.tags().get("nx"));
        Assertions.assertEquals("frbypi", response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("pdjtaqh", response.sku().size());
        Assertions.assertEquals("q", response.sku().family());
        Assertions.assertEquals(87303763, response.sku().capacity());
        Assertions.assertEquals("njhx", response.properties().computeLocation());
        Assertions.assertEquals("mgpczqulptkbvc", response.properties().description());
        Assertions.assertEquals("gqqbtimpk", response.properties().resourceId());
        Assertions.assertEquals(false, response.properties().disableLocalAuth());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
