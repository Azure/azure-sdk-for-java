// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentContainerInner;
import com.azure.resourcemanager.machinelearning.models.ComponentContainerProperties;
import com.azure.resourcemanager.machinelearning.models.ComponentContainerResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ComponentContainerResourceArmPaginatedResultTests {
    @Test
    public void testDeserialize() {
        ComponentContainerResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"stawfsdjpvkv\",\"value\":[{\"properties\":{\"isArchived\":false,\"latestVersion\":\"zbzkdvncjabudurg\",\"nextVersion\":\"kmokz\",\"description\":\"jk\",\"properties\":{},\"tags\":{}},\"id\":\"mouwqlgzrfzeey\",\"name\":\"bizikayuhq\",\"type\":\"bjbsybb\"},{\"properties\":{\"isArchived\":false,\"latestVersion\":\"t\",\"nextVersion\":\"gmfpgvmp\",\"description\":\"as\",\"properties\":{},\"tags\":{}},\"id\":\"qfxssmwutw\",\"name\":\"dsrezpdrhneuyow\",\"type\":\"kdw\"},{\"properties\":{\"isArchived\":false,\"latestVersion\":\"ib\",\"nextVersion\":\"cgpik\",\"description\":\"imejzanl\",\"properties\":{},\"tags\":{}},\"id\":\"av\",\"name\":\"mbzonokix\",\"type\":\"jq\"}]}")
                .toObject(ComponentContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("stawfsdjpvkv", model.nextLink());
        Assertions.assertEquals("jk", model.value().get(0).properties().description());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @Test
    public void testSerialize() {
        ComponentContainerResourceArmPaginatedResult model =
            new ComponentContainerResourceArmPaginatedResult()
                .withNextLink("stawfsdjpvkv")
                .withValue(
                    Arrays
                        .asList(
                            new ComponentContainerInner()
                                .withProperties(
                                    new ComponentContainerProperties()
                                        .withDescription("jk")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false)),
                            new ComponentContainerInner()
                                .withProperties(
                                    new ComponentContainerProperties()
                                        .withDescription("as")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false)),
                            new ComponentContainerInner()
                                .withProperties(
                                    new ComponentContainerProperties()
                                        .withDescription("imejzanl")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false))));
        model = BinaryData.fromObject(model).toObject(ComponentContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("stawfsdjpvkv", model.nextLink());
        Assertions.assertEquals("jk", model.value().get(0).properties().description());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
