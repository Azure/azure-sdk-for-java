// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ServerlessEndpointInner;
import com.azure.resourcemanager.machinelearning.models.ContentSafety;
import com.azure.resourcemanager.machinelearning.models.ContentSafetyStatus;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.ModelSettings;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpointProperties;
import com.azure.resourcemanager.machinelearning.models.ServerlessInferenceEndpointAuthMode;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServerlessEndpointInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerlessEndpointInner model = BinaryData.fromString(
            "{\"properties\":{\"modelSettings\":{\"modelId\":\"h\"},\"authMode\":\"Key\",\"inferenceEndpoint\":{\"uri\":\"pjtnqjilaywkdcw\",\"headers\":{\"lnkkbjpjvlywltmf\":\"yrilmhxdqaolf\",\"fnqzocr\":\"obbjwhlwy\"}},\"provisioningState\":\"Failed\",\"endpointState\":\"Suspended\",\"marketplaceSubscriptionId\":\"untgxdn\",\"contentSafety\":{\"contentSafetyStatus\":\"Enabled\"}},\"kind\":\"tiekoifuvnyttz\",\"identity\":{\"principalId\":\"7f62875c-d396-45a2-b1da-da7c4db12a89\",\"tenantId\":\"39df265d-813e-4d5e-84b3-6134ec2354fc\",\"type\":\"None\",\"userAssignedIdentities\":{\"gm\":{\"principalId\":\"a49947ca-fdaf-4604-aef9-2fd1b4656623\",\"clientId\":\"2bc9890b-220e-4d75-89d4-92a440052ecc\"},\"hlqtxnrflkn\":{\"principalId\":\"131a3a94-149d-431f-89d7-a64607ae0e41\",\"clientId\":\"3db55ce2-f3bd-45bd-9820-f0afc2c01369\"}}},\"sku\":{\"name\":\"ndpgfjodhda\",\"tier\":\"Basic\",\"size\":\"fhipx\",\"family\":\"sabvcip\",\"capacity\":1000118308},\"location\":\"fczuumljcir\",\"tags\":{\"ei\":\"fycd\"},\"id\":\"itjn\",\"name\":\"xzajlnsjhwjuyxxb\",\"type\":\"qvmvuaytuadxkxe\"}")
            .toObject(ServerlessEndpointInner.class);
        Assertions.assertEquals("fczuumljcir", model.location());
        Assertions.assertEquals("fycd", model.tags().get("ei"));
        Assertions.assertEquals("h", model.properties().modelSettings().modelId());
        Assertions.assertEquals(ServerlessInferenceEndpointAuthMode.KEY, model.properties().authMode());
        Assertions.assertEquals(ContentSafetyStatus.ENABLED, model.properties().contentSafety().contentSafetyStatus());
        Assertions.assertEquals("tiekoifuvnyttz", model.kind());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ndpgfjodhda", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("fhipx", model.sku().size());
        Assertions.assertEquals("sabvcip", model.sku().family());
        Assertions.assertEquals(1000118308, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerlessEndpointInner model = new ServerlessEndpointInner().withLocation("fczuumljcir")
            .withTags(mapOf("ei", "fycd"))
            .withProperties(new ServerlessEndpointProperties().withModelSettings(new ModelSettings().withModelId("h"))
                .withAuthMode(ServerlessInferenceEndpointAuthMode.KEY)
                .withContentSafety(new ContentSafety().withContentSafetyStatus(ContentSafetyStatus.ENABLED)))
            .withKind("tiekoifuvnyttz")
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("gm", new UserAssignedIdentity(), "hlqtxnrflkn", new UserAssignedIdentity())))
            .withSku(new Sku().withName("ndpgfjodhda")
                .withTier(SkuTier.BASIC)
                .withSize("fhipx")
                .withFamily("sabvcip")
                .withCapacity(1000118308));
        model = BinaryData.fromObject(model).toObject(ServerlessEndpointInner.class);
        Assertions.assertEquals("fczuumljcir", model.location());
        Assertions.assertEquals("fycd", model.tags().get("ei"));
        Assertions.assertEquals("h", model.properties().modelSettings().modelId());
        Assertions.assertEquals(ServerlessInferenceEndpointAuthMode.KEY, model.properties().authMode());
        Assertions.assertEquals(ContentSafetyStatus.ENABLED, model.properties().contentSafety().contentSafetyStatus());
        Assertions.assertEquals("tiekoifuvnyttz", model.kind());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ndpgfjodhda", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("fhipx", model.sku().size());
        Assertions.assertEquals("sabvcip", model.sku().family());
        Assertions.assertEquals(1000118308, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
