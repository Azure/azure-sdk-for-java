// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.Registry;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistriesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"141ec51f-bcbd-4680-9f13-3c5b7f6b3901\",\"tenantId\":\"d3ceaf90-66f4-4949-b865-0382412f4bac\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"mvounbyvsfqu\":{\"principalId\":\"7a880d14-c548-4657-bb26-b800f6c645d6\",\"clientId\":\"64869d44-d589-4903-9612-7566c8e00e94\"}}},\"kind\":\"g\",\"properties\":{\"discoveryUrl\":\"bknoxjhed\",\"intellectualPropertyPublisher\":\"mmwbvrpajbiig\",\"managedResourceGroup\":{\"resourceId\":\"ez\"},\"mlFlowRegistryUri\":\"z\",\"registryPrivateEndpointConnections\":[{\"id\":\"ifinoysdtlpsh\",\"location\":\"h\",\"properties\":{\"groupIds\":[\"ooa\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"gqsqvf\"}},{\"id\":\"ksstaljiqlxjjlt\",\"location\":\"mnaaqhscaanddlv\",\"properties\":{\"groupIds\":[\"cvaflsbyjgdj\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"asdprknupfte\"}}],\"publicNetworkAccess\":\"gsnpv\",\"regionDetails\":[{\"acrDetails\":[{},{},{},{}],\"location\":\"oaol\",\"storageAccountDetails\":[{},{}]},{\"acrDetails\":[{},{},{}],\"location\":\"uebt\",\"storageAccountDetails\":[{},{},{},{}]},{\"acrDetails\":[{},{}],\"location\":\"mtxmdj\",\"storageAccountDetails\":[{},{},{}]},{\"acrDetails\":[{}],\"location\":\"koir\",\"storageAccountDetails\":[{},{},{},{}]}]},\"sku\":{\"name\":\"tlbskinmx\",\"tier\":\"Basic\",\"size\":\"uadhi\",\"family\":\"fxstwaaz\",\"capacity\":1401507309},\"location\":\"ouuuj\",\"tags\":{\"hop\":\"icshmqxgjzs\"},\"id\":\"qxipbxs\",\"name\":\"vkcnggoc\",\"type\":\"wnjmiitlamfb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Registry> response
            = manager.registries().listByResourceGroup("wrtmjskb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ouuuj", response.iterator().next().location());
        Assertions.assertEquals("icshmqxgjzs", response.iterator().next().tags().get("hop"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("g", response.iterator().next().kind());
        Assertions.assertEquals("tlbskinmx", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.iterator().next().sku().tier());
        Assertions.assertEquals("uadhi", response.iterator().next().sku().size());
        Assertions.assertEquals("fxstwaaz", response.iterator().next().sku().family());
        Assertions.assertEquals(1401507309, response.iterator().next().sku().capacity());
        Assertions.assertEquals("bknoxjhed", response.iterator().next().discoveryUrl());
        Assertions.assertEquals("mmwbvrpajbiig", response.iterator().next().intellectualPropertyPublisher());
        Assertions.assertEquals("ez", response.iterator().next().managedResourceGroup().resourceId());
        Assertions.assertEquals("z", response.iterator().next().mlFlowRegistryUri());
        Assertions.assertEquals("ifinoysdtlpsh",
            response.iterator().next().registryPrivateEndpointConnections().get(0).id());
        Assertions.assertEquals("h", response.iterator().next().registryPrivateEndpointConnections().get(0).location());
        Assertions.assertEquals("ooa",
            response.iterator().next().registryPrivateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("gqsqvf",
            response.iterator().next().registryPrivateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("gsnpv", response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("oaol", response.iterator().next().regionDetails().get(0).location());
    }
}
