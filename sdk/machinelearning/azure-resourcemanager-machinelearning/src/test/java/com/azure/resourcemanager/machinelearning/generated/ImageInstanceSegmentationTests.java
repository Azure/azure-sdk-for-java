// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageInstanceSegmentation;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.InstanceSegmentationPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.ModelSize;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import com.azure.resourcemanager.machinelearning.models.ValidationMetricType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageInstanceSegmentationTests {
    @Test
    public void testDeserialize() {
        ImageInstanceSegmentation model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"ImageInstanceSegmentation\",\"primaryMetric\":\"MeanAveragePrecision\",\"modelSettings\":{\"boxDetectionsPerImage\":237087161,\"boxScoreThreshold\":15.272355,\"imageSize\":544288248,\"maxSize\":329267906,\"minSize\":1180645886,\"modelSize\":\"Small\",\"multiScale\":true,\"nmsIouThreshold\":11.528492,\"tileGridSize\":\"gwmseharxifv\",\"tileOverlapRatio\":73.017426,\"tilePredictionsNmsThreshold\":32.30052,\"validationIouThreshold\":78.72817,\"validationMetricType\":\"CocoVoc\",\"advancedSettings\":\"tnvw\",\"amsGradient\":true,\"augmentations\":\"idqpxlbtpakftn\",\"beta1\":45.26174,\"beta2\":84.33736,\"checkpointFrequency\":1909112060,\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"mode\":\"EvalMount\",\"uri\":\"rymdwmf\",\"description\":\"pycvjqdvdwkqpldr\"},\"checkpointRunId\":\"fgnaavuagnteta\",\"distributed\":true,\"earlyStopping\":true,\"earlyStoppingDelay\":1955105914,\"earlyStoppingPatience\":1340286391,\"enableOnnxNormalization\":true,\"evaluationFrequency\":1434439298,\"gradientAccumulationStep\":1132415165,\"layersToFreeze\":244814593,\"learningRate\":41.067375,\"learningRateScheduler\":\"WarmupCosine\",\"modelName\":\"uyld\",\"momentum\":52.818142,\"nesterov\":true,\"numberOfEpochs\":121614822,\"numberOfWorkers\":919079569,\"optimizer\":\"Adamw\",\"randomSeed\":31567678,\"stepLRGamma\":41.01514,\"stepLRStepSize\":765927655,\"trainingBatchSize\":1592275125,\"validationBatchSize\":1076512865,\"warmupCosineLRCycles\":89.45306,\"warmupCosineLRWarmupEpochs\":1557990379,\"weightDecay\":7.7580214},\"searchSpace\":[{\"boxDetectionsPerImage\":\"atxtjrrlkmdskjhh\",\"boxScoreThreshold\":\"lajfoxcxscvslxlh\",\"imageSize\":\"vkrmukmyjmkx\",\"maxSize\":\"tcsloj\",\"minSize\":\"qid\",\"modelSize\":\"toqxjh\",\"multiScale\":\"csqhtkbtnqlrng\",\"nmsIouThreshold\":\"mbiipsnawwlqk\",\"tileGridSize\":\"xhhllxricct\",\"tileOverlapRatio\":\"muqqoajxei\",\"tilePredictionsNmsThreshold\":\"lesrwva\",\"validationIouThreshold\":\"hdctrceqn\",\"validationMetricType\":\"rupobehd\",\"amsGradient\":\"jzacvumepjpbibn\",\"augmentations\":\"phepifexleqirc\",\"beta1\":\"cly\",\"beta2\":\"gxvrpjl\",\"distributed\":\"zuodacpun\",\"earlyStopping\":\"tepdjxqes\",\"earlyStoppingDelay\":\"ynu\",\"earlyStoppingPatience\":\"lpckaewsedves\",\"enableOnnxNormalization\":\"xegqphr\",\"evaluationFrequency\":\"nzhctmjtsgh\",\"gradientAccumulationStep\":\"c\",\"layersToFreeze\":\"pzarpzeqacdld\",\"learningRate\":\"mpypefcpczshnuq\",\"learningRateScheduler\":\"aizu\",\"modelName\":\"kh\",\"momentum\":\"tu\",\"nesterov\":\"xhmt\",\"numberOfEpochs\":\"vegwqiukvz\",\"numberOfWorkers\":\"dwttha\",\"optimizer\":\"gkskjivbss\",\"randomSeed\":\"jqf\",\"stepLRGamma\":\"peexpgeumilhwuit\",\"stepLRStepSize\":\"exyionofninbd\",\"trainingBatchSize\":\"s\",\"validationBatchSize\":\"wqqrsmpcbbprtuga\",\"warmupCosineLRCycles\":\"zbcyksiv\",\"warmupCosineLRWarmupEpochs\":\"ogd\",\"weightDecay\":\"bfcmkrfts\"},{\"boxDetectionsPerImage\":\"wjjxsgm\",\"boxScoreThreshold\":\"wvif\",\"imageSize\":\"kecifhocjxwklo\",\"maxSize\":\"rvtxvcmufunlc\",\"minSize\":\"xvi\",\"modelSize\":\"eyngjg\",\"multiScale\":\"quv\",\"nmsIouThreshold\":\"gglpmcrdcuelj\",\"tileGridSize\":\"ahxm\",\"tileOverlapRatio\":\"ryarvsxzqb\",\"tilePredictionsNmsThreshold\":\"cjkay\",\"validationIouThreshold\":\"thzodubtlmjtgbl\",\"validationMetricType\":\"skkfmk\",\"amsGradient\":\"djxyxgbkkqvjcteo\",\"augmentations\":\"l\",\"beta1\":\"lskkzpxvj\",\"beta2\":\"dpvocojhpcn\",\"distributed\":\"xzfsnggytexvzilm\",\"earlyStopping\":\"vzkwwwncknr\",\"earlyStoppingDelay\":\"ajlskzptj\",\"earlyStoppingPatience\":\"lwe\",\"enableOnnxNormalization\":\"yrth\",\"evaluationFrequency\":\"lehmcgcjeinueho\",\"gradientAccumulationStep\":\"mvfejvqnttmbqd\",\"layersToFreeze\":\"zfivfokpysthhzag\",\"learningRate\":\"wyy\",\"learningRateScheduler\":\"hgenuzejgvkveb\",\"modelName\":\"szllrzlsmmdqgmi\",\"momentum\":\"pimcqrhn\",\"nesterov\":\"minkl\",\"numberOfEpochs\":\"xsvtzarhzvqnsqk\",\"numberOfWorkers\":\"mbjwzzoslpkyb\",\"optimizer\":\"lwkzpgajsqjcem\",\"randomSeed\":\"mfuvqarwzxuqr\",\"stepLRGamma\":\"lui\",\"stepLRStepSize\":\"bwxsfgtdm\",\"trainingBatchSize\":\"xekr\",\"validationBatchSize\":\"k\",\"warmupCosineLRCycles\":\"budbt\",\"warmupCosineLRWarmupEpochs\":\"okbavlyttaak\",\"weightDecay\":\"frkebsmhpd\"},{\"boxDetectionsPerImage\":\"dig\",\"boxScoreThreshold\":\"olekscbctnanqim\",\"imageSize\":\"zxpdcldpkawnsnl\",\"maxSize\":\"mouxwksqmudmfco\",\"minSize\":\"icziuswswjrkb\",\"modelSize\":\"jhbtqq\",\"multiScale\":\"fs\",\"nmsIouThreshold\":\"rfwb\",\"tileGridSize\":\"qvogfuyz\",\"tileOverlapRatio\":\"bhli\",\"tilePredictionsNmsThreshold\":\"yqe\",\"validationIouThreshold\":\"ood\",\"validationMetricType\":\"kcdrdaasaxxobsm\",\"amsGradient\":\"wiyjvzuko\",\"augmentations\":\"nawnvz\",\"beta1\":\"n\",\"beta2\":\"ywsxvjabjqqaxu\",\"distributed\":\"y\",\"earlyStopping\":\"nudn\",\"earlyStoppingDelay\":\"abhjx\",\"earlyStoppingPatience\":\"qweuip\",\"enableOnnxNormalization\":\"vk\",\"evaluationFrequency\":\"itnsqxtltc\",\"gradientAccumulationStep\":\"rdpqgfhy\",\"layersToFreeze\":\"rakkld\",\"learningRate\":\"c\",\"learningRateScheduler\":\"cmfcnrjajq\",\"modelName\":\"txjtielnzqgx\",\"momentum\":\"fbbmtlp\",\"nesterov\":\"gynoiprnzcali\",\"numberOfEpochs\":\"ryqxzxa\",\"numberOfWorkers\":\"ibmq\",\"optimizer\":\"iymqr\",\"randomSeed\":\"guhfupe\",\"stepLRGamma\":\"svvoqsbpkflanfk\",\"stepLRStepSize\":\"syaowuzowp\",\"trainingBatchSize\":\"hdkcprgu\",\"validationBatchSize\":\"rztiochlutixmqr\",\"warmupCosineLRCycles\":\"jizcbfzmcrunfhiu\",\"warmupCosineLRWarmupEpochs\":\"mfbcpaqktkrum\",\"weightDecay\":\"ed\"}],\"limitSettings\":{\"maxConcurrentTrials\":893251293,\"maxTrials\":414135386,\"timeout\":\"PT90H10M1S\"},\"sweepSettings\":{\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"delayEvaluation\":781078177,\"evaluationInterval\":113581490},\"samplingAlgorithm\":\"Bayesian\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadOnlyMount\",\"uri\":\"gvqrnhyhlwcj\",\"description\":\"ggjh\"},\"validationDataSize\":51.36864611394011,\"logVerbosity\":\"Debug\",\"targetColumnName\":\"kijpeuqlsdxeqztv\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"Download\",\"uri\":\"wwmjs\",\"description\":\"na\"}}")
                .toObject(ImageInstanceSegmentation.class);
        Assertions.assertEquals(LogVerbosity.DEBUG, model.logVerbosity());
        Assertions.assertEquals("kijpeuqlsdxeqztv", model.targetColumnName());
        Assertions.assertEquals("na", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("wwmjs", model.trainingData().uri());
        Assertions.assertEquals(InstanceSegmentationPrimaryMetrics.MEAN_AVERAGE_PRECISION, model.primaryMetric());
        Assertions.assertEquals("tnvw", model.modelSettings().advancedSettings());
        Assertions.assertEquals(true, model.modelSettings().amsGradient());
        Assertions.assertEquals("idqpxlbtpakftn", model.modelSettings().augmentations());
        Assertions.assertEquals(45.26174F, model.modelSettings().beta1());
        Assertions.assertEquals(84.33736F, model.modelSettings().beta2());
        Assertions.assertEquals(1909112060, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("pycvjqdvdwkqpldr", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("rymdwmf", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("fgnaavuagnteta", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(true, model.modelSettings().earlyStopping());
        Assertions.assertEquals(1955105914, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(1340286391, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(true, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1434439298, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(1132415165, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(244814593, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(41.067375F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("uyld", model.modelSettings().modelName());
        Assertions.assertEquals(52.818142F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(121614822, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(919079569, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAMW, model.modelSettings().optimizer());
        Assertions.assertEquals(31567678, model.modelSettings().randomSeed());
        Assertions.assertEquals(41.01514F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(765927655, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(1592275125, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(1076512865, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(89.45306F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(1557990379, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(7.7580214F, model.modelSettings().weightDecay());
        Assertions.assertEquals(237087161, model.modelSettings().boxDetectionsPerImage());
        Assertions.assertEquals(15.272355F, model.modelSettings().boxScoreThreshold());
        Assertions.assertEquals(544288248, model.modelSettings().imageSize());
        Assertions.assertEquals(329267906, model.modelSettings().maxSize());
        Assertions.assertEquals(1180645886, model.modelSettings().minSize());
        Assertions.assertEquals(ModelSize.SMALL, model.modelSettings().modelSize());
        Assertions.assertEquals(true, model.modelSettings().multiScale());
        Assertions.assertEquals(11.528492F, model.modelSettings().nmsIouThreshold());
        Assertions.assertEquals("gwmseharxifv", model.modelSettings().tileGridSize());
        Assertions.assertEquals(73.017426F, model.modelSettings().tileOverlapRatio());
        Assertions.assertEquals(32.30052F, model.modelSettings().tilePredictionsNmsThreshold());
        Assertions.assertEquals(78.72817F, model.modelSettings().validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.COCO_VOC, model.modelSettings().validationMetricType());
        Assertions.assertEquals("jzacvumepjpbibn", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("phepifexleqirc", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("cly", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("gxvrpjl", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("zuodacpun", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("tepdjxqes", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("ynu", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("lpckaewsedves", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("xegqphr", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("nzhctmjtsgh", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("c", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("pzarpzeqacdld", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("mpypefcpczshnuq", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("aizu", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("kh", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("tu", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("xhmt", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("vegwqiukvz", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("dwttha", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("gkskjivbss", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("jqf", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("peexpgeumilhwuit", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("exyionofninbd", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("s", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("wqqrsmpcbbprtuga", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("zbcyksiv", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("ogd", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("bfcmkrfts", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("atxtjrrlkmdskjhh", model.searchSpace().get(0).boxDetectionsPerImage());
        Assertions.assertEquals("lajfoxcxscvslxlh", model.searchSpace().get(0).boxScoreThreshold());
        Assertions.assertEquals("vkrmukmyjmkx", model.searchSpace().get(0).imageSize());
        Assertions.assertEquals("tcsloj", model.searchSpace().get(0).maxSize());
        Assertions.assertEquals("qid", model.searchSpace().get(0).minSize());
        Assertions.assertEquals("toqxjh", model.searchSpace().get(0).modelSize());
        Assertions.assertEquals("csqhtkbtnqlrng", model.searchSpace().get(0).multiScale());
        Assertions.assertEquals("mbiipsnawwlqk", model.searchSpace().get(0).nmsIouThreshold());
        Assertions.assertEquals("xhhllxricct", model.searchSpace().get(0).tileGridSize());
        Assertions.assertEquals("muqqoajxei", model.searchSpace().get(0).tileOverlapRatio());
        Assertions.assertEquals("lesrwva", model.searchSpace().get(0).tilePredictionsNmsThreshold());
        Assertions.assertEquals("hdctrceqn", model.searchSpace().get(0).validationIouThreshold());
        Assertions.assertEquals("rupobehd", model.searchSpace().get(0).validationMetricType());
        Assertions.assertEquals(893251293, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(414135386, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT90H10M1S"), model.limitSettings().timeout());
        Assertions.assertEquals(781078177, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(113581490, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("ggjh", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.validationData().mode());
        Assertions.assertEquals("gvqrnhyhlwcj", model.validationData().uri());
        Assertions.assertEquals(51.36864611394011D, model.validationDataSize());
    }

    @Test
    public void testSerialize() {
        ImageInstanceSegmentation model =
            new ImageInstanceSegmentation()
                .withLogVerbosity(LogVerbosity.DEBUG)
                .withTargetColumnName("kijpeuqlsdxeqztv")
                .withTrainingData(
                    new MLTableJobInput().withDescription("na").withMode(InputDeliveryMode.DOWNLOAD).withUri("wwmjs"))
                .withPrimaryMetric(InstanceSegmentationPrimaryMetrics.MEAN_AVERAGE_PRECISION)
                .withModelSettings(
                    new ImageModelSettingsObjectDetection()
                        .withAdvancedSettings("tnvw")
                        .withAmsGradient(true)
                        .withAugmentations("idqpxlbtpakftn")
                        .withBeta1(45.26174F)
                        .withBeta2(84.33736F)
                        .withCheckpointFrequency(1909112060)
                        .withCheckpointModel(
                            new MLFlowModelJobInput()
                                .withDescription("pycvjqdvdwkqpldr")
                                .withMode(InputDeliveryMode.EVAL_MOUNT)
                                .withUri("rymdwmf"))
                        .withCheckpointRunId("fgnaavuagnteta")
                        .withDistributed(true)
                        .withEarlyStopping(true)
                        .withEarlyStoppingDelay(1955105914)
                        .withEarlyStoppingPatience(1340286391)
                        .withEnableOnnxNormalization(true)
                        .withEvaluationFrequency(1434439298)
                        .withGradientAccumulationStep(1132415165)
                        .withLayersToFreeze(244814593)
                        .withLearningRate(41.067375F)
                        .withLearningRateScheduler(LearningRateScheduler.WARMUP_COSINE)
                        .withModelName("uyld")
                        .withMomentum(52.818142F)
                        .withNesterov(true)
                        .withNumberOfEpochs(121614822)
                        .withNumberOfWorkers(919079569)
                        .withOptimizer(StochasticOptimizer.ADAMW)
                        .withRandomSeed(31567678)
                        .withStepLRGamma(41.01514F)
                        .withStepLRStepSize(765927655)
                        .withTrainingBatchSize(1592275125)
                        .withValidationBatchSize(1076512865)
                        .withWarmupCosineLRCycles(89.45306F)
                        .withWarmupCosineLRWarmupEpochs(1557990379)
                        .withWeightDecay(7.7580214F)
                        .withBoxDetectionsPerImage(237087161)
                        .withBoxScoreThreshold(15.272355F)
                        .withImageSize(544288248)
                        .withMaxSize(329267906)
                        .withMinSize(1180645886)
                        .withModelSize(ModelSize.SMALL)
                        .withMultiScale(true)
                        .withNmsIouThreshold(11.528492F)
                        .withTileGridSize("gwmseharxifv")
                        .withTileOverlapRatio(73.017426F)
                        .withTilePredictionsNmsThreshold(32.30052F)
                        .withValidationIouThreshold(78.72817F)
                        .withValidationMetricType(ValidationMetricType.COCO_VOC))
                .withSearchSpace(
                    Arrays
                        .asList(
                            new ImageModelDistributionSettingsObjectDetection()
                                .withAmsGradient("jzacvumepjpbibn")
                                .withAugmentations("phepifexleqirc")
                                .withBeta1("cly")
                                .withBeta2("gxvrpjl")
                                .withDistributed("zuodacpun")
                                .withEarlyStopping("tepdjxqes")
                                .withEarlyStoppingDelay("ynu")
                                .withEarlyStoppingPatience("lpckaewsedves")
                                .withEnableOnnxNormalization("xegqphr")
                                .withEvaluationFrequency("nzhctmjtsgh")
                                .withGradientAccumulationStep("c")
                                .withLayersToFreeze("pzarpzeqacdld")
                                .withLearningRate("mpypefcpczshnuq")
                                .withLearningRateScheduler("aizu")
                                .withModelName("kh")
                                .withMomentum("tu")
                                .withNesterov("xhmt")
                                .withNumberOfEpochs("vegwqiukvz")
                                .withNumberOfWorkers("dwttha")
                                .withOptimizer("gkskjivbss")
                                .withRandomSeed("jqf")
                                .withStepLRGamma("peexpgeumilhwuit")
                                .withStepLRStepSize("exyionofninbd")
                                .withTrainingBatchSize("s")
                                .withValidationBatchSize("wqqrsmpcbbprtuga")
                                .withWarmupCosineLRCycles("zbcyksiv")
                                .withWarmupCosineLRWarmupEpochs("ogd")
                                .withWeightDecay("bfcmkrfts")
                                .withBoxDetectionsPerImage("atxtjrrlkmdskjhh")
                                .withBoxScoreThreshold("lajfoxcxscvslxlh")
                                .withImageSize("vkrmukmyjmkx")
                                .withMaxSize("tcsloj")
                                .withMinSize("qid")
                                .withModelSize("toqxjh")
                                .withMultiScale("csqhtkbtnqlrng")
                                .withNmsIouThreshold("mbiipsnawwlqk")
                                .withTileGridSize("xhhllxricct")
                                .withTileOverlapRatio("muqqoajxei")
                                .withTilePredictionsNmsThreshold("lesrwva")
                                .withValidationIouThreshold("hdctrceqn")
                                .withValidationMetricType("rupobehd"),
                            new ImageModelDistributionSettingsObjectDetection()
                                .withAmsGradient("djxyxgbkkqvjcteo")
                                .withAugmentations("l")
                                .withBeta1("lskkzpxvj")
                                .withBeta2("dpvocojhpcn")
                                .withDistributed("xzfsnggytexvzilm")
                                .withEarlyStopping("vzkwwwncknr")
                                .withEarlyStoppingDelay("ajlskzptj")
                                .withEarlyStoppingPatience("lwe")
                                .withEnableOnnxNormalization("yrth")
                                .withEvaluationFrequency("lehmcgcjeinueho")
                                .withGradientAccumulationStep("mvfejvqnttmbqd")
                                .withLayersToFreeze("zfivfokpysthhzag")
                                .withLearningRate("wyy")
                                .withLearningRateScheduler("hgenuzejgvkveb")
                                .withModelName("szllrzlsmmdqgmi")
                                .withMomentum("pimcqrhn")
                                .withNesterov("minkl")
                                .withNumberOfEpochs("xsvtzarhzvqnsqk")
                                .withNumberOfWorkers("mbjwzzoslpkyb")
                                .withOptimizer("lwkzpgajsqjcem")
                                .withRandomSeed("mfuvqarwzxuqr")
                                .withStepLRGamma("lui")
                                .withStepLRStepSize("bwxsfgtdm")
                                .withTrainingBatchSize("xekr")
                                .withValidationBatchSize("k")
                                .withWarmupCosineLRCycles("budbt")
                                .withWarmupCosineLRWarmupEpochs("okbavlyttaak")
                                .withWeightDecay("frkebsmhpd")
                                .withBoxDetectionsPerImage("wjjxsgm")
                                .withBoxScoreThreshold("wvif")
                                .withImageSize("kecifhocjxwklo")
                                .withMaxSize("rvtxvcmufunlc")
                                .withMinSize("xvi")
                                .withModelSize("eyngjg")
                                .withMultiScale("quv")
                                .withNmsIouThreshold("gglpmcrdcuelj")
                                .withTileGridSize("ahxm")
                                .withTileOverlapRatio("ryarvsxzqb")
                                .withTilePredictionsNmsThreshold("cjkay")
                                .withValidationIouThreshold("thzodubtlmjtgbl")
                                .withValidationMetricType("skkfmk"),
                            new ImageModelDistributionSettingsObjectDetection()
                                .withAmsGradient("wiyjvzuko")
                                .withAugmentations("nawnvz")
                                .withBeta1("n")
                                .withBeta2("ywsxvjabjqqaxu")
                                .withDistributed("y")
                                .withEarlyStopping("nudn")
                                .withEarlyStoppingDelay("abhjx")
                                .withEarlyStoppingPatience("qweuip")
                                .withEnableOnnxNormalization("vk")
                                .withEvaluationFrequency("itnsqxtltc")
                                .withGradientAccumulationStep("rdpqgfhy")
                                .withLayersToFreeze("rakkld")
                                .withLearningRate("c")
                                .withLearningRateScheduler("cmfcnrjajq")
                                .withModelName("txjtielnzqgx")
                                .withMomentum("fbbmtlp")
                                .withNesterov("gynoiprnzcali")
                                .withNumberOfEpochs("ryqxzxa")
                                .withNumberOfWorkers("ibmq")
                                .withOptimizer("iymqr")
                                .withRandomSeed("guhfupe")
                                .withStepLRGamma("svvoqsbpkflanfk")
                                .withStepLRStepSize("syaowuzowp")
                                .withTrainingBatchSize("hdkcprgu")
                                .withValidationBatchSize("rztiochlutixmqr")
                                .withWarmupCosineLRCycles("jizcbfzmcrunfhiu")
                                .withWarmupCosineLRWarmupEpochs("mfbcpaqktkrum")
                                .withWeightDecay("ed")
                                .withBoxDetectionsPerImage("dig")
                                .withBoxScoreThreshold("olekscbctnanqim")
                                .withImageSize("zxpdcldpkawnsnl")
                                .withMaxSize("mouxwksqmudmfco")
                                .withMinSize("icziuswswjrkb")
                                .withModelSize("jhbtqq")
                                .withMultiScale("fs")
                                .withNmsIouThreshold("rfwb")
                                .withTileGridSize("qvogfuyz")
                                .withTileOverlapRatio("bhli")
                                .withTilePredictionsNmsThreshold("yqe")
                                .withValidationIouThreshold("ood")
                                .withValidationMetricType("kcdrdaasaxxobsm")))
                .withLimitSettings(
                    new ImageLimitSettings()
                        .withMaxConcurrentTrials(893251293)
                        .withMaxTrials(414135386)
                        .withTimeout(Duration.parse("PT90H10M1S")))
                .withSweepSettings(
                    new ImageSweepSettings()
                        .withEarlyTermination(
                            new EarlyTerminationPolicy()
                                .withDelayEvaluation(781078177)
                                .withEvaluationInterval(113581490))
                        .withSamplingAlgorithm(SamplingAlgorithmType.BAYESIAN))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("ggjh")
                        .withMode(InputDeliveryMode.READ_ONLY_MOUNT)
                        .withUri("gvqrnhyhlwcj"))
                .withValidationDataSize(51.36864611394011D);
        model = BinaryData.fromObject(model).toObject(ImageInstanceSegmentation.class);
        Assertions.assertEquals(LogVerbosity.DEBUG, model.logVerbosity());
        Assertions.assertEquals("kijpeuqlsdxeqztv", model.targetColumnName());
        Assertions.assertEquals("na", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("wwmjs", model.trainingData().uri());
        Assertions.assertEquals(InstanceSegmentationPrimaryMetrics.MEAN_AVERAGE_PRECISION, model.primaryMetric());
        Assertions.assertEquals("tnvw", model.modelSettings().advancedSettings());
        Assertions.assertEquals(true, model.modelSettings().amsGradient());
        Assertions.assertEquals("idqpxlbtpakftn", model.modelSettings().augmentations());
        Assertions.assertEquals(45.26174F, model.modelSettings().beta1());
        Assertions.assertEquals(84.33736F, model.modelSettings().beta2());
        Assertions.assertEquals(1909112060, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("pycvjqdvdwkqpldr", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("rymdwmf", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("fgnaavuagnteta", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(true, model.modelSettings().earlyStopping());
        Assertions.assertEquals(1955105914, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(1340286391, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(true, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1434439298, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(1132415165, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(244814593, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(41.067375F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("uyld", model.modelSettings().modelName());
        Assertions.assertEquals(52.818142F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(121614822, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(919079569, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAMW, model.modelSettings().optimizer());
        Assertions.assertEquals(31567678, model.modelSettings().randomSeed());
        Assertions.assertEquals(41.01514F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(765927655, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(1592275125, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(1076512865, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(89.45306F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(1557990379, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(7.7580214F, model.modelSettings().weightDecay());
        Assertions.assertEquals(237087161, model.modelSettings().boxDetectionsPerImage());
        Assertions.assertEquals(15.272355F, model.modelSettings().boxScoreThreshold());
        Assertions.assertEquals(544288248, model.modelSettings().imageSize());
        Assertions.assertEquals(329267906, model.modelSettings().maxSize());
        Assertions.assertEquals(1180645886, model.modelSettings().minSize());
        Assertions.assertEquals(ModelSize.SMALL, model.modelSettings().modelSize());
        Assertions.assertEquals(true, model.modelSettings().multiScale());
        Assertions.assertEquals(11.528492F, model.modelSettings().nmsIouThreshold());
        Assertions.assertEquals("gwmseharxifv", model.modelSettings().tileGridSize());
        Assertions.assertEquals(73.017426F, model.modelSettings().tileOverlapRatio());
        Assertions.assertEquals(32.30052F, model.modelSettings().tilePredictionsNmsThreshold());
        Assertions.assertEquals(78.72817F, model.modelSettings().validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.COCO_VOC, model.modelSettings().validationMetricType());
        Assertions.assertEquals("jzacvumepjpbibn", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("phepifexleqirc", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("cly", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("gxvrpjl", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("zuodacpun", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("tepdjxqes", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("ynu", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("lpckaewsedves", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("xegqphr", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("nzhctmjtsgh", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("c", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("pzarpzeqacdld", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("mpypefcpczshnuq", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("aizu", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("kh", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("tu", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("xhmt", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("vegwqiukvz", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("dwttha", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("gkskjivbss", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("jqf", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("peexpgeumilhwuit", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("exyionofninbd", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("s", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("wqqrsmpcbbprtuga", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("zbcyksiv", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("ogd", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("bfcmkrfts", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("atxtjrrlkmdskjhh", model.searchSpace().get(0).boxDetectionsPerImage());
        Assertions.assertEquals("lajfoxcxscvslxlh", model.searchSpace().get(0).boxScoreThreshold());
        Assertions.assertEquals("vkrmukmyjmkx", model.searchSpace().get(0).imageSize());
        Assertions.assertEquals("tcsloj", model.searchSpace().get(0).maxSize());
        Assertions.assertEquals("qid", model.searchSpace().get(0).minSize());
        Assertions.assertEquals("toqxjh", model.searchSpace().get(0).modelSize());
        Assertions.assertEquals("csqhtkbtnqlrng", model.searchSpace().get(0).multiScale());
        Assertions.assertEquals("mbiipsnawwlqk", model.searchSpace().get(0).nmsIouThreshold());
        Assertions.assertEquals("xhhllxricct", model.searchSpace().get(0).tileGridSize());
        Assertions.assertEquals("muqqoajxei", model.searchSpace().get(0).tileOverlapRatio());
        Assertions.assertEquals("lesrwva", model.searchSpace().get(0).tilePredictionsNmsThreshold());
        Assertions.assertEquals("hdctrceqn", model.searchSpace().get(0).validationIouThreshold());
        Assertions.assertEquals("rupobehd", model.searchSpace().get(0).validationMetricType());
        Assertions.assertEquals(893251293, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(414135386, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT90H10M1S"), model.limitSettings().timeout());
        Assertions.assertEquals(781078177, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(113581490, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("ggjh", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_ONLY_MOUNT, model.validationData().mode());
        Assertions.assertEquals("gvqrnhyhlwcj", model.validationData().uri());
        Assertions.assertEquals(51.36864611394011D, model.validationDataSize());
    }
}
