// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageInstanceSegmentation;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.InstanceSegmentationPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.ModelSize;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import com.azure.resourcemanager.machinelearning.models.ValidationMetricType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ImageInstanceSegmentationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageInstanceSegmentation model = BinaryData.fromString(
            "{\"taskType\":\"ImageInstanceSegmentation\",\"primaryMetric\":\"MeanAveragePrecision\",\"modelSettings\":{\"boxDetectionsPerImage\":1534306057,\"boxScoreThreshold\":27.125877,\"imageSize\":509776627,\"maxSize\":1800994072,\"minSize\":1064698713,\"modelSize\":\"Small\",\"multiScale\":false,\"nmsIouThreshold\":73.876884,\"tileGridSize\":\"b\",\"tileOverlapRatio\":98.34619,\"tilePredictionsNmsThreshold\":49.36939,\"validationIouThreshold\":23.7808,\"validationMetricType\":\"None\",\"amsGradient\":false,\"advancedSettings\":\"qddlggbq\",\"augmentations\":\"lgzubak\",\"beta1\":52.478916,\"beta2\":73.25457,\"checkpointFrequency\":44605172,\"checkpointRunId\":\"fnsffetpkmixwew\",\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"uri\":\"s\",\"mode\":\"Download\",\"description\":\"epnqvxgvohdb\"},\"distributed\":true,\"earlyStopping\":false,\"earlyStoppingDelay\":469971245,\"earlyStoppingPatience\":1372482998,\"evaluationFrequency\":234642424,\"enableOnnxNormalization\":true,\"gradientAccumulationStep\":1882721834,\"layersToFreeze\":342131546,\"learningRate\":8.727491,\"learningRateScheduler\":\"Step\",\"modelName\":\"xqhpjhuboh\",\"momentum\":40.88772,\"nesterov\":false,\"numberOfEpochs\":1117928548,\"numberOfWorkers\":568762031,\"optimizer\":\"Sgd\",\"randomSeed\":32020513,\"stepLRGamma\":86.87302,\"stepLRStepSize\":173984136,\"trainingBatchSize\":212469610,\"validationBatchSize\":775443642,\"warmupCosineLRCycles\":4.8310876,\"warmupCosineLRWarmupEpochs\":1009329595,\"weightDecay\":38.67607},\"searchSpace\":[{\"boxDetectionsPerImage\":\"amqx\",\"boxScoreThreshold\":\"ssanybzzg\",\"imageSize\":\"dfeumyjsvcdh\",\"maxSize\":\"wkhookj\",\"minSize\":\"zxezriwgo\",\"modelSize\":\"apcqksaaapxjh\",\"multiScale\":\"tibenwsd\",\"nmsIouThreshold\":\"vdaahlfrcqklpmvz\",\"tileGridSize\":\"reszyaqgom\",\"tileOverlapRatio\":\"mfggeokfekc\",\"tilePredictionsNmsThreshold\":\"lwkyeahhh\",\"validationIouThreshold\":\"pulnrfcqufmcihp\",\"validationMetricType\":\"owrer\",\"amsGradient\":\"xptch\",\"augmentations\":\"yqqidqimlgbbfjm\",\"beta1\":\"jvxlhmpmh\",\"beta2\":\"t\",\"distributed\":\"phqeofy\",\"earlyStopping\":\"snlow\",\"earlyStoppingDelay\":\"mcqixuanccqvjf\",\"earlyStoppingPatience\":\"fqpmquxpj\",\"evaluationFrequency\":\"faar\",\"enableOnnxNormalization\":\"ci\",\"gradientAccumulationStep\":\"mufzgugrbl\",\"layersToFreeze\":\"l\",\"learningRate\":\"ssnqe\",\"learningRateScheduler\":\"otbptg\",\"modelName\":\"manxx\",\"momentum\":\"qfmdqecvtam\",\"nesterov\":\"zmnobfeww\",\"numberOfEpochs\":\"ibxovu\",\"numberOfWorkers\":\"qjrkbln\",\"optimizer\":\"clwgycv\",\"randomSeed\":\"nzjcyqqzhembtbw\",\"stepLRGamma\":\"lbadp\",\"stepLRStepSize\":\"jdleajvmvvlooubs\",\"trainingBatchSize\":\"ipjeo\",\"validationBatchSize\":\"kgocj\",\"warmupCosineLRCycles\":\"lupfazus\",\"warmupCosineLRWarmupEpochs\":\"dhuslgdwz\",\"weightDecay\":\"dqyxajclgr\"},{\"boxDetectionsPerImage\":\"vqcwyzoqzk\",\"boxScoreThreshold\":\"cwwsj\",\"imageSize\":\"iixepbntqqwwgfgs\",\"maxSize\":\"ilefej\",\"minSize\":\"wrznequ\",\"modelSize\":\"nttwk\",\"multiScale\":\"ajksbs\",\"nmsIouThreshold\":\"gjmqjhgcydijnmcv\",\"tileGridSize\":\"ssfcriqxzixtd\",\"tileOverlapRatio\":\"wmvcdkucpxpyafrw\",\"tilePredictionsNmsThreshold\":\"orogeuv\",\"validationIouThreshold\":\"rspnrsjsem\",\"validationMetricType\":\"ofrsnq\",\"amsGradient\":\"jp\",\"augmentations\":\"exutike\",\"beta1\":\"m\",\"beta2\":\"rpub\",\"distributed\":\"dhvos\",\"earlyStopping\":\"zscueza\",\"earlyStoppingDelay\":\"vdfwgqjhewcffrx\",\"earlyStoppingPatience\":\"ezkhzp\",\"evaluationFrequency\":\"qissen\",\"enableOnnxNormalization\":\"rusyzai\",\"gradientAccumulationStep\":\"psjnpck\",\"layersToFreeze\":\"ujyduonbdawsao\",\"learningRate\":\"vvm\",\"learningRateScheduler\":\"kxjarsbbdddw\",\"modelName\":\"qxa\",\"momentum\":\"xqkdyqjvzvcgrds\",\"nesterov\":\"esfkqqxuhv\",\"numberOfEpochs\":\"lbrouszxac\",\"numberOfWorkers\":\"uk\",\"optimizer\":\"goojjfuk\",\"randomSeed\":\"bc\",\"stepLRGamma\":\"nhgbtzvxxvsbc\",\"stepLRStepSize\":\"fkrfnkcni\",\"trainingBatchSize\":\"swxmfurqm\",\"validationBatchSize\":\"wwp\",\"warmupCosineLRCycles\":\"um\",\"warmupCosineLRWarmupEpochs\":\"ahbqsvnkxm\",\"weightDecay\":\"zuae\"}],\"limitSettings\":{\"maxTrials\":1864326135,\"timeout\":\"PT127H34M59S\",\"maxConcurrentTrials\":645713420},\"sweepSettings\":{\"samplingAlgorithm\":\"Grid\",\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"evaluationInterval\":1109486386,\"delayEvaluation\":682993372}},\"validationData\":{\"jobInputType\":\"mltable\",\"uri\":\"zzmiemqyft\",\"mode\":\"EvalDownload\",\"description\":\"sw\"},\"validationDataSize\":7.272261053343065,\"logVerbosity\":\"Warning\",\"trainingData\":{\"jobInputType\":\"mltable\",\"uri\":\"ghpakbqyhlsorn\",\"mode\":\"EvalDownload\",\"description\":\"qagkncjmybn\"},\"targetColumnName\":\"vztnjawrhulemm\"}")
            .toObject(ImageInstanceSegmentation.class);
        Assertions.assertEquals(LogVerbosity.WARNING, model.logVerbosity());
        Assertions.assertEquals("qagkncjmybn", model.trainingData().description());
        Assertions.assertEquals("ghpakbqyhlsorn", model.trainingData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("vztnjawrhulemm", model.targetColumnName());
        Assertions.assertEquals(InstanceSegmentationPrimaryMetrics.MEAN_AVERAGE_PRECISION, model.primaryMetric());
        Assertions.assertEquals(false, model.modelSettings().amsGradient());
        Assertions.assertEquals("qddlggbq", model.modelSettings().advancedSettings());
        Assertions.assertEquals("lgzubak", model.modelSettings().augmentations());
        Assertions.assertEquals(52.478916F, model.modelSettings().beta1());
        Assertions.assertEquals(73.25457F, model.modelSettings().beta2());
        Assertions.assertEquals(44605172, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("fnsffetpkmixwew", model.modelSettings().checkpointRunId());
        Assertions.assertEquals("epnqvxgvohdb", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals("s", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(false, model.modelSettings().earlyStopping());
        Assertions.assertEquals(469971245, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(1372482998, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(234642424, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(true, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1882721834, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(342131546, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(8.727491F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.STEP, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("xqhpjhuboh", model.modelSettings().modelName());
        Assertions.assertEquals(40.88772F, model.modelSettings().momentum());
        Assertions.assertEquals(false, model.modelSettings().nesterov());
        Assertions.assertEquals(1117928548, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(568762031, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.SGD, model.modelSettings().optimizer());
        Assertions.assertEquals(32020513, model.modelSettings().randomSeed());
        Assertions.assertEquals(86.87302F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(173984136, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(212469610, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(775443642, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(4.8310876F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(1009329595, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(38.67607F, model.modelSettings().weightDecay());
        Assertions.assertEquals(1534306057, model.modelSettings().boxDetectionsPerImage());
        Assertions.assertEquals(27.125877F, model.modelSettings().boxScoreThreshold());
        Assertions.assertEquals(509776627, model.modelSettings().imageSize());
        Assertions.assertEquals(1800994072, model.modelSettings().maxSize());
        Assertions.assertEquals(1064698713, model.modelSettings().minSize());
        Assertions.assertEquals(ModelSize.SMALL, model.modelSettings().modelSize());
        Assertions.assertEquals(false, model.modelSettings().multiScale());
        Assertions.assertEquals(73.876884F, model.modelSettings().nmsIouThreshold());
        Assertions.assertEquals("b", model.modelSettings().tileGridSize());
        Assertions.assertEquals(98.34619F, model.modelSettings().tileOverlapRatio());
        Assertions.assertEquals(49.36939F, model.modelSettings().tilePredictionsNmsThreshold());
        Assertions.assertEquals(23.7808F, model.modelSettings().validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.NONE, model.modelSettings().validationMetricType());
        Assertions.assertEquals("xptch", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("yqqidqimlgbbfjm", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("jvxlhmpmh", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("t", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("phqeofy", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("snlow", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("mcqixuanccqvjf", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("fqpmquxpj", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("faar", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("ci", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("mufzgugrbl", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("l", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("ssnqe", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("otbptg", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("manxx", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("qfmdqecvtam", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("zmnobfeww", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("ibxovu", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("qjrkbln", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("clwgycv", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("nzjcyqqzhembtbw", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("lbadp", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("jdleajvmvvlooubs", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("ipjeo", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("kgocj", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("lupfazus", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("dhuslgdwz", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("dqyxajclgr", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("amqx", model.searchSpace().get(0).boxDetectionsPerImage());
        Assertions.assertEquals("ssanybzzg", model.searchSpace().get(0).boxScoreThreshold());
        Assertions.assertEquals("dfeumyjsvcdh", model.searchSpace().get(0).imageSize());
        Assertions.assertEquals("wkhookj", model.searchSpace().get(0).maxSize());
        Assertions.assertEquals("zxezriwgo", model.searchSpace().get(0).minSize());
        Assertions.assertEquals("apcqksaaapxjh", model.searchSpace().get(0).modelSize());
        Assertions.assertEquals("tibenwsd", model.searchSpace().get(0).multiScale());
        Assertions.assertEquals("vdaahlfrcqklpmvz", model.searchSpace().get(0).nmsIouThreshold());
        Assertions.assertEquals("reszyaqgom", model.searchSpace().get(0).tileGridSize());
        Assertions.assertEquals("mfggeokfekc", model.searchSpace().get(0).tileOverlapRatio());
        Assertions.assertEquals("lwkyeahhh", model.searchSpace().get(0).tilePredictionsNmsThreshold());
        Assertions.assertEquals("pulnrfcqufmcihp", model.searchSpace().get(0).validationIouThreshold());
        Assertions.assertEquals("owrer", model.searchSpace().get(0).validationMetricType());
        Assertions.assertEquals(1864326135, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT127H34M59S"), model.limitSettings().timeout());
        Assertions.assertEquals(645713420, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(SamplingAlgorithmType.GRID, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals(1109486386, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(682993372, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals("sw", model.validationData().description());
        Assertions.assertEquals("zzmiemqyft", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.validationData().mode());
        Assertions.assertEquals(7.272261053343065D, model.validationDataSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageInstanceSegmentation model = new ImageInstanceSegmentation().withLogVerbosity(LogVerbosity.WARNING)
            .withTrainingData(new MLTableJobInput().withDescription("qagkncjmybn")
                .withUri("ghpakbqyhlsorn")
                .withMode(InputDeliveryMode.EVAL_DOWNLOAD))
            .withTargetColumnName("vztnjawrhulemm")
            .withPrimaryMetric(InstanceSegmentationPrimaryMetrics.MEAN_AVERAGE_PRECISION)
            .withModelSettings(new ImageModelSettingsObjectDetection().withAmsGradient(false)
                .withAdvancedSettings("qddlggbq")
                .withAugmentations("lgzubak")
                .withBeta1(52.478916F)
                .withBeta2(73.25457F)
                .withCheckpointFrequency(44605172)
                .withCheckpointRunId("fnsffetpkmixwew")
                .withCheckpointModel(new MLFlowModelJobInput().withDescription("epnqvxgvohdb")
                    .withUri("s")
                    .withMode(InputDeliveryMode.DOWNLOAD))
                .withDistributed(true)
                .withEarlyStopping(false)
                .withEarlyStoppingDelay(469971245)
                .withEarlyStoppingPatience(1372482998)
                .withEvaluationFrequency(234642424)
                .withEnableOnnxNormalization(true)
                .withGradientAccumulationStep(1882721834)
                .withLayersToFreeze(342131546)
                .withLearningRate(8.727491F)
                .withLearningRateScheduler(LearningRateScheduler.STEP)
                .withModelName("xqhpjhuboh")
                .withMomentum(40.88772F)
                .withNesterov(false)
                .withNumberOfEpochs(1117928548)
                .withNumberOfWorkers(568762031)
                .withOptimizer(StochasticOptimizer.SGD)
                .withRandomSeed(32020513)
                .withStepLRGamma(86.87302F)
                .withStepLRStepSize(173984136)
                .withTrainingBatchSize(212469610)
                .withValidationBatchSize(775443642)
                .withWarmupCosineLRCycles(4.8310876F)
                .withWarmupCosineLRWarmupEpochs(1009329595)
                .withWeightDecay(38.67607F)
                .withBoxDetectionsPerImage(1534306057)
                .withBoxScoreThreshold(27.125877F)
                .withImageSize(509776627)
                .withMaxSize(1800994072)
                .withMinSize(1064698713)
                .withModelSize(ModelSize.SMALL)
                .withMultiScale(false)
                .withNmsIouThreshold(73.876884F)
                .withTileGridSize("b")
                .withTileOverlapRatio(98.34619F)
                .withTilePredictionsNmsThreshold(49.36939F)
                .withValidationIouThreshold(23.7808F)
                .withValidationMetricType(ValidationMetricType.NONE))
            .withSearchSpace(Arrays.asList(
                new ImageModelDistributionSettingsObjectDetection().withAmsGradient("xptch")
                    .withAugmentations("yqqidqimlgbbfjm")
                    .withBeta1("jvxlhmpmh")
                    .withBeta2("t")
                    .withDistributed("phqeofy")
                    .withEarlyStopping("snlow")
                    .withEarlyStoppingDelay("mcqixuanccqvjf")
                    .withEarlyStoppingPatience("fqpmquxpj")
                    .withEvaluationFrequency("faar")
                    .withEnableOnnxNormalization("ci")
                    .withGradientAccumulationStep("mufzgugrbl")
                    .withLayersToFreeze("l")
                    .withLearningRate("ssnqe")
                    .withLearningRateScheduler("otbptg")
                    .withModelName("manxx")
                    .withMomentum("qfmdqecvtam")
                    .withNesterov("zmnobfeww")
                    .withNumberOfEpochs("ibxovu")
                    .withNumberOfWorkers("qjrkbln")
                    .withOptimizer("clwgycv")
                    .withRandomSeed("nzjcyqqzhembtbw")
                    .withStepLRGamma("lbadp")
                    .withStepLRStepSize("jdleajvmvvlooubs")
                    .withTrainingBatchSize("ipjeo")
                    .withValidationBatchSize("kgocj")
                    .withWarmupCosineLRCycles("lupfazus")
                    .withWarmupCosineLRWarmupEpochs("dhuslgdwz")
                    .withWeightDecay("dqyxajclgr")
                    .withBoxDetectionsPerImage("amqx")
                    .withBoxScoreThreshold("ssanybzzg")
                    .withImageSize("dfeumyjsvcdh")
                    .withMaxSize("wkhookj")
                    .withMinSize("zxezriwgo")
                    .withModelSize("apcqksaaapxjh")
                    .withMultiScale("tibenwsd")
                    .withNmsIouThreshold("vdaahlfrcqklpmvz")
                    .withTileGridSize("reszyaqgom")
                    .withTileOverlapRatio("mfggeokfekc")
                    .withTilePredictionsNmsThreshold("lwkyeahhh")
                    .withValidationIouThreshold("pulnrfcqufmcihp")
                    .withValidationMetricType("owrer"),
                new ImageModelDistributionSettingsObjectDetection().withAmsGradient("jp")
                    .withAugmentations("exutike")
                    .withBeta1("m")
                    .withBeta2("rpub")
                    .withDistributed("dhvos")
                    .withEarlyStopping("zscueza")
                    .withEarlyStoppingDelay("vdfwgqjhewcffrx")
                    .withEarlyStoppingPatience("ezkhzp")
                    .withEvaluationFrequency("qissen")
                    .withEnableOnnxNormalization("rusyzai")
                    .withGradientAccumulationStep("psjnpck")
                    .withLayersToFreeze("ujyduonbdawsao")
                    .withLearningRate("vvm")
                    .withLearningRateScheduler("kxjarsbbdddw")
                    .withModelName("qxa")
                    .withMomentum("xqkdyqjvzvcgrds")
                    .withNesterov("esfkqqxuhv")
                    .withNumberOfEpochs("lbrouszxac")
                    .withNumberOfWorkers("uk")
                    .withOptimizer("goojjfuk")
                    .withRandomSeed("bc")
                    .withStepLRGamma("nhgbtzvxxvsbc")
                    .withStepLRStepSize("fkrfnkcni")
                    .withTrainingBatchSize("swxmfurqm")
                    .withValidationBatchSize("wwp")
                    .withWarmupCosineLRCycles("um")
                    .withWarmupCosineLRWarmupEpochs("ahbqsvnkxm")
                    .withWeightDecay("zuae")
                    .withBoxDetectionsPerImage("vqcwyzoqzk")
                    .withBoxScoreThreshold("cwwsj")
                    .withImageSize("iixepbntqqwwgfgs")
                    .withMaxSize("ilefej")
                    .withMinSize("wrznequ")
                    .withModelSize("nttwk")
                    .withMultiScale("ajksbs")
                    .withNmsIouThreshold("gjmqjhgcydijnmcv")
                    .withTileGridSize("ssfcriqxzixtd")
                    .withTileOverlapRatio("wmvcdkucpxpyafrw")
                    .withTilePredictionsNmsThreshold("orogeuv")
                    .withValidationIouThreshold("rspnrsjsem")
                    .withValidationMetricType("ofrsnq")))
            .withLimitSettings(new ImageLimitSettings().withMaxTrials(1864326135)
                .withTimeout(Duration.parse("PT127H34M59S"))
                .withMaxConcurrentTrials(645713420))
            .withSweepSettings(new ImageSweepSettings().withSamplingAlgorithm(SamplingAlgorithmType.GRID)
                .withEarlyTermination(
                    new EarlyTerminationPolicy().withEvaluationInterval(1109486386).withDelayEvaluation(682993372)))
            .withValidationData(new MLTableJobInput().withDescription("sw")
                .withUri("zzmiemqyft")
                .withMode(InputDeliveryMode.EVAL_DOWNLOAD))
            .withValidationDataSize(7.272261053343065D);
        model = BinaryData.fromObject(model).toObject(ImageInstanceSegmentation.class);
        Assertions.assertEquals(LogVerbosity.WARNING, model.logVerbosity());
        Assertions.assertEquals("qagkncjmybn", model.trainingData().description());
        Assertions.assertEquals("ghpakbqyhlsorn", model.trainingData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("vztnjawrhulemm", model.targetColumnName());
        Assertions.assertEquals(InstanceSegmentationPrimaryMetrics.MEAN_AVERAGE_PRECISION, model.primaryMetric());
        Assertions.assertEquals(false, model.modelSettings().amsGradient());
        Assertions.assertEquals("qddlggbq", model.modelSettings().advancedSettings());
        Assertions.assertEquals("lgzubak", model.modelSettings().augmentations());
        Assertions.assertEquals(52.478916F, model.modelSettings().beta1());
        Assertions.assertEquals(73.25457F, model.modelSettings().beta2());
        Assertions.assertEquals(44605172, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("fnsffetpkmixwew", model.modelSettings().checkpointRunId());
        Assertions.assertEquals("epnqvxgvohdb", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals("s", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(false, model.modelSettings().earlyStopping());
        Assertions.assertEquals(469971245, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(1372482998, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(234642424, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(true, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1882721834, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(342131546, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(8.727491F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.STEP, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("xqhpjhuboh", model.modelSettings().modelName());
        Assertions.assertEquals(40.88772F, model.modelSettings().momentum());
        Assertions.assertEquals(false, model.modelSettings().nesterov());
        Assertions.assertEquals(1117928548, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(568762031, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.SGD, model.modelSettings().optimizer());
        Assertions.assertEquals(32020513, model.modelSettings().randomSeed());
        Assertions.assertEquals(86.87302F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(173984136, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(212469610, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(775443642, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(4.8310876F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(1009329595, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(38.67607F, model.modelSettings().weightDecay());
        Assertions.assertEquals(1534306057, model.modelSettings().boxDetectionsPerImage());
        Assertions.assertEquals(27.125877F, model.modelSettings().boxScoreThreshold());
        Assertions.assertEquals(509776627, model.modelSettings().imageSize());
        Assertions.assertEquals(1800994072, model.modelSettings().maxSize());
        Assertions.assertEquals(1064698713, model.modelSettings().minSize());
        Assertions.assertEquals(ModelSize.SMALL, model.modelSettings().modelSize());
        Assertions.assertEquals(false, model.modelSettings().multiScale());
        Assertions.assertEquals(73.876884F, model.modelSettings().nmsIouThreshold());
        Assertions.assertEquals("b", model.modelSettings().tileGridSize());
        Assertions.assertEquals(98.34619F, model.modelSettings().tileOverlapRatio());
        Assertions.assertEquals(49.36939F, model.modelSettings().tilePredictionsNmsThreshold());
        Assertions.assertEquals(23.7808F, model.modelSettings().validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.NONE, model.modelSettings().validationMetricType());
        Assertions.assertEquals("xptch", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("yqqidqimlgbbfjm", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("jvxlhmpmh", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("t", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("phqeofy", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("snlow", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("mcqixuanccqvjf", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("fqpmquxpj", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("faar", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("ci", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("mufzgugrbl", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("l", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("ssnqe", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("otbptg", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("manxx", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("qfmdqecvtam", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("zmnobfeww", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("ibxovu", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("qjrkbln", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("clwgycv", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("nzjcyqqzhembtbw", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("lbadp", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("jdleajvmvvlooubs", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("ipjeo", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("kgocj", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("lupfazus", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("dhuslgdwz", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("dqyxajclgr", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("amqx", model.searchSpace().get(0).boxDetectionsPerImage());
        Assertions.assertEquals("ssanybzzg", model.searchSpace().get(0).boxScoreThreshold());
        Assertions.assertEquals("dfeumyjsvcdh", model.searchSpace().get(0).imageSize());
        Assertions.assertEquals("wkhookj", model.searchSpace().get(0).maxSize());
        Assertions.assertEquals("zxezriwgo", model.searchSpace().get(0).minSize());
        Assertions.assertEquals("apcqksaaapxjh", model.searchSpace().get(0).modelSize());
        Assertions.assertEquals("tibenwsd", model.searchSpace().get(0).multiScale());
        Assertions.assertEquals("vdaahlfrcqklpmvz", model.searchSpace().get(0).nmsIouThreshold());
        Assertions.assertEquals("reszyaqgom", model.searchSpace().get(0).tileGridSize());
        Assertions.assertEquals("mfggeokfekc", model.searchSpace().get(0).tileOverlapRatio());
        Assertions.assertEquals("lwkyeahhh", model.searchSpace().get(0).tilePredictionsNmsThreshold());
        Assertions.assertEquals("pulnrfcqufmcihp", model.searchSpace().get(0).validationIouThreshold());
        Assertions.assertEquals("owrer", model.searchSpace().get(0).validationMetricType());
        Assertions.assertEquals(1864326135, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT127H34M59S"), model.limitSettings().timeout());
        Assertions.assertEquals(645713420, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(SamplingAlgorithmType.GRID, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals(1109486386, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(682993372, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals("sw", model.validationData().description());
        Assertions.assertEquals("zzmiemqyft", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.validationData().mode());
        Assertions.assertEquals(7.272261053343065D, model.validationDataSize());
    }
}
