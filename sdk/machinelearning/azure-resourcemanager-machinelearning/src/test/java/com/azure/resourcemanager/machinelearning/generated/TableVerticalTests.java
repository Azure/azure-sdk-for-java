// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BlockedTransformers;
import com.azure.resourcemanager.machinelearning.models.FeaturizationMode;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NCrossValidations;
import com.azure.resourcemanager.machinelearning.models.TableVertical;
import com.azure.resourcemanager.machinelearning.models.TableVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.TableVerticalLimitSettings;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TableVerticalTests {
    @Test
    public void testDeserialize() {
        TableVertical model =
            BinaryData
                .fromString(
                    "{\"cvSplitColumnNames\":[\"xigc\"],\"featurizationSettings\":{\"blockedTransformers\":[\"OneHotEncoder\"],\"columnNameAndTypes\":{\"ceukdqkkyihztg\":\"bezqccydr\",\"qzgwldoychil\":\"qm\",\"cqlliz\":\"cecfehuwaoaguh\",\"jvhrweft\":\"tac\"},\"enableDnnFeaturization\":true,\"mode\":\"Auto\",\"transformerParams\":{\"sse\":[]},\"datasetLanguage\":\"epwamcxtcz\"},\"limitSettings\":{\"enableEarlyTermination\":true,\"exitScore\":59.264437619056345,\"maxConcurrentTrials\":1186128312,\"maxCoresPerTrial\":1078285058,\"maxTrials\":1251720208,\"timeout\":\"PT40H9M40S\",\"trialTimeout\":\"PT147H26M41S\"},\"nCrossValidations\":{\"mode\":\"NCrossValidations\"},\"testData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadWriteMount\",\"uri\":\"ocyvhhulrtywikdm\",\"description\":\"akuflgbhgauacdix\"},\"testDataSize\":14.551281956494833,\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"Download\",\"uri\":\"yjq\",\"description\":\"kfnozoeoqbvj\"},\"validationDataSize\":56.1608374839119,\"weightColumnName\":\"wbmqjchntas\"}")
                .toObject(TableVertical.class);
        Assertions.assertEquals("xigc", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("epwamcxtcz", model.featurizationSettings().datasetLanguage());
        Assertions
            .assertEquals(
                BlockedTransformers.ONE_HOT_ENCODER, model.featurizationSettings().blockedTransformers().get(0));
        Assertions.assertEquals("bezqccydr", model.featurizationSettings().columnNameAndTypes().get("ceukdqkkyihztg"));
        Assertions.assertEquals(true, model.featurizationSettings().enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.AUTO, model.featurizationSettings().mode());
        Assertions.assertEquals(true, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals(59.264437619056345D, model.limitSettings().exitScore());
        Assertions.assertEquals(1186128312, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1078285058, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(1251720208, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT40H9M40S"), model.limitSettings().timeout());
        Assertions.assertEquals(Duration.parse("PT147H26M41S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals("akuflgbhgauacdix", model.testData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.testData().mode());
        Assertions.assertEquals("ocyvhhulrtywikdm", model.testData().uri());
        Assertions.assertEquals(14.551281956494833D, model.testDataSize());
        Assertions.assertEquals("kfnozoeoqbvj", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.validationData().mode());
        Assertions.assertEquals("yjq", model.validationData().uri());
        Assertions.assertEquals(56.1608374839119D, model.validationDataSize());
        Assertions.assertEquals("wbmqjchntas", model.weightColumnName());
    }

    @Test
    public void testSerialize() {
        TableVertical model =
            new TableVertical()
                .withCvSplitColumnNames(Arrays.asList("xigc"))
                .withFeaturizationSettings(
                    new TableVerticalFeaturizationSettings()
                        .withDatasetLanguage("epwamcxtcz")
                        .withBlockedTransformers(Arrays.asList(BlockedTransformers.ONE_HOT_ENCODER))
                        .withColumnNameAndTypes(
                            mapOf(
                                "ceukdqkkyihztg",
                                "bezqccydr",
                                "qzgwldoychil",
                                "qm",
                                "cqlliz",
                                "cecfehuwaoaguh",
                                "jvhrweft",
                                "tac"))
                        .withEnableDnnFeaturization(true)
                        .withMode(FeaturizationMode.AUTO)
                        .withTransformerParams(mapOf("sse", Arrays.asList())))
                .withLimitSettings(
                    new TableVerticalLimitSettings()
                        .withEnableEarlyTermination(true)
                        .withExitScore(59.264437619056345D)
                        .withMaxConcurrentTrials(1186128312)
                        .withMaxCoresPerTrial(1078285058)
                        .withMaxTrials(1251720208)
                        .withTimeout(Duration.parse("PT40H9M40S"))
                        .withTrialTimeout(Duration.parse("PT147H26M41S")))
                .withNCrossValidations(new NCrossValidations())
                .withTestData(
                    new MLTableJobInput()
                        .withDescription("akuflgbhgauacdix")
                        .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                        .withUri("ocyvhhulrtywikdm"))
                .withTestDataSize(14.551281956494833D)
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("kfnozoeoqbvj")
                        .withMode(InputDeliveryMode.DOWNLOAD)
                        .withUri("yjq"))
                .withValidationDataSize(56.1608374839119D)
                .withWeightColumnName("wbmqjchntas");
        model = BinaryData.fromObject(model).toObject(TableVertical.class);
        Assertions.assertEquals("xigc", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("epwamcxtcz", model.featurizationSettings().datasetLanguage());
        Assertions
            .assertEquals(
                BlockedTransformers.ONE_HOT_ENCODER, model.featurizationSettings().blockedTransformers().get(0));
        Assertions.assertEquals("bezqccydr", model.featurizationSettings().columnNameAndTypes().get("ceukdqkkyihztg"));
        Assertions.assertEquals(true, model.featurizationSettings().enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.AUTO, model.featurizationSettings().mode());
        Assertions.assertEquals(true, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals(59.264437619056345D, model.limitSettings().exitScore());
        Assertions.assertEquals(1186128312, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1078285058, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(1251720208, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT40H9M40S"), model.limitSettings().timeout());
        Assertions.assertEquals(Duration.parse("PT147H26M41S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals("akuflgbhgauacdix", model.testData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.testData().mode());
        Assertions.assertEquals("ocyvhhulrtywikdm", model.testData().uri());
        Assertions.assertEquals(14.551281956494833D, model.testDataSize());
        Assertions.assertEquals("kfnozoeoqbvj", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.validationData().mode());
        Assertions.assertEquals("yjq", model.validationData().uri());
        Assertions.assertEquals(56.1608374839119D, model.validationDataSize());
        Assertions.assertEquals("wbmqjchntas", model.weightColumnName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
