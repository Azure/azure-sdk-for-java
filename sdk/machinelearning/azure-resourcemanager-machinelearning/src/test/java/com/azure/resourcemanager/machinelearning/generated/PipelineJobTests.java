// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.IdentityConfiguration;
import com.azure.resourcemanager.machinelearning.models.JobInput;
import com.azure.resourcemanager.machinelearning.models.JobOutput;
import com.azure.resourcemanager.machinelearning.models.JobService;
import com.azure.resourcemanager.machinelearning.models.PipelineJob;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PipelineJobTests {
    @Test
    public void testDeserialize() {
        PipelineJob model =
            BinaryData
                .fromString(
                    "{\"jobType\":\"Pipeline\",\"inputs\":{\"wspcaxikhfjqebg\":{\"jobInputType\":\"JobInput\",\"description\":\"evsaa\"},\"ygysemtme\":{\"jobInputType\":\"JobInput\",\"description\":\"xkxgzzrom\"}},\"jobs\":{},\"outputs\":{\"qtdiswxspvckoj\":{\"jobOutputType\":\"JobOutput\",\"description\":\"inkzpa\"},\"pftesubzpvpvdy\":{\"jobOutputType\":\"JobOutput\",\"description\":\"bbg\"},\"xzfxn\":{\"jobOutputType\":\"JobOutput\",\"description\":\"tcovqseusrfjb\"}},\"sourceJobId\":\"b\",\"componentId\":\"oswkjmdihdcyyyzl\",\"computeId\":\"bwzjnufzrf\",\"displayName\":\"dq\",\"experimentName\":\"nbzrtfte\",\"identity\":{\"identityType\":\"IdentityConfiguration\"},\"isArchived\":true,\"services\":{\"tjzgczfcm\":{\"endpoint\":\"vgjs\",\"errorMessage\":\"tyjjvavdpwwobt\",\"jobServiceType\":\"htitsffofwan\",\"port\":125255275,\"properties\":{\"riwgybjp\":\"auwazcgwd\",\"lix\":\"zokscvg\",\"qkjvxprwpxsoohu\":\"gbyfgwe\",\"ugggzlfbgrdcgu\":\"xlcskltez\"},\"status\":\"rtmdylperpil\"},\"qibukklvzrl\":{\"endpoint\":\"fbodetresrgvts\",\"errorMessage\":\"vftwaiv\",\"jobServiceType\":\"qkevzgj\",\"port\":1026409362,\"properties\":{\"jwotnxlkfhglhrf\":\"xmpdxxzetww\",\"wecr\":\"x\"},\"status\":\"hpcselqxovp\"}},\"status\":\"Paused\",\"description\":\"cme\",\"properties\":{\"dsyenzsieuscpl\":\"czivfqbqna\"},\"tags\":{\"vkolrupjovmo\":\"dgxlyzkxitdshez\",\"wzlpzbtz\":\"sayebra\"}}")
                .toObject(PipelineJob.class);
        Assertions.assertEquals("cme", model.description());
        Assertions.assertEquals("czivfqbqna", model.properties().get("dsyenzsieuscpl"));
        Assertions.assertEquals("dgxlyzkxitdshez", model.tags().get("vkolrupjovmo"));
        Assertions.assertEquals("oswkjmdihdcyyyzl", model.componentId());
        Assertions.assertEquals("bwzjnufzrf", model.computeId());
        Assertions.assertEquals("dq", model.displayName());
        Assertions.assertEquals("nbzrtfte", model.experimentName());
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals("vgjs", model.services().get("tjzgczfcm").endpoint());
        Assertions.assertEquals("htitsffofwan", model.services().get("tjzgczfcm").jobServiceType());
        Assertions.assertEquals(125255275, model.services().get("tjzgczfcm").port());
        Assertions.assertEquals("auwazcgwd", model.services().get("tjzgczfcm").properties().get("riwgybjp"));
        Assertions.assertEquals("evsaa", model.inputs().get("wspcaxikhfjqebg").description());
        Assertions.assertEquals("inkzpa", model.outputs().get("qtdiswxspvckoj").description());
        Assertions.assertEquals("b", model.sourceJobId());
    }

    @Test
    public void testSerialize() {
        PipelineJob model =
            new PipelineJob()
                .withDescription("cme")
                .withProperties(mapOf("dsyenzsieuscpl", "czivfqbqna"))
                .withTags(mapOf("vkolrupjovmo", "dgxlyzkxitdshez", "wzlpzbtz", "sayebra"))
                .withComponentId("oswkjmdihdcyyyzl")
                .withComputeId("bwzjnufzrf")
                .withDisplayName("dq")
                .withExperimentName("nbzrtfte")
                .withIdentity(new IdentityConfiguration())
                .withIsArchived(true)
                .withServices(
                    mapOf(
                        "tjzgczfcm",
                        new JobService()
                            .withEndpoint("vgjs")
                            .withJobServiceType("htitsffofwan")
                            .withPort(125255275)
                            .withProperties(
                                mapOf(
                                    "riwgybjp",
                                    "auwazcgwd",
                                    "lix",
                                    "zokscvg",
                                    "qkjvxprwpxsoohu",
                                    "gbyfgwe",
                                    "ugggzlfbgrdcgu",
                                    "xlcskltez")),
                        "qibukklvzrl",
                        new JobService()
                            .withEndpoint("fbodetresrgvts")
                            .withJobServiceType("qkevzgj")
                            .withPort(1026409362)
                            .withProperties(mapOf("jwotnxlkfhglhrf", "xmpdxxzetww", "wecr", "x"))))
                .withInputs(
                    mapOf(
                        "wspcaxikhfjqebg",
                        new JobInput().withDescription("evsaa"),
                        "ygysemtme",
                        new JobInput().withDescription("xkxgzzrom")))
                .withJobs(mapOf())
                .withOutputs(
                    mapOf(
                        "qtdiswxspvckoj",
                        new JobOutput().withDescription("inkzpa"),
                        "pftesubzpvpvdy",
                        new JobOutput().withDescription("bbg"),
                        "xzfxn",
                        new JobOutput().withDescription("tcovqseusrfjb")))
                .withSourceJobId("b");
        model = BinaryData.fromObject(model).toObject(PipelineJob.class);
        Assertions.assertEquals("cme", model.description());
        Assertions.assertEquals("czivfqbqna", model.properties().get("dsyenzsieuscpl"));
        Assertions.assertEquals("dgxlyzkxitdshez", model.tags().get("vkolrupjovmo"));
        Assertions.assertEquals("oswkjmdihdcyyyzl", model.componentId());
        Assertions.assertEquals("bwzjnufzrf", model.computeId());
        Assertions.assertEquals("dq", model.displayName());
        Assertions.assertEquals("nbzrtfte", model.experimentName());
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals("vgjs", model.services().get("tjzgczfcm").endpoint());
        Assertions.assertEquals("htitsffofwan", model.services().get("tjzgczfcm").jobServiceType());
        Assertions.assertEquals(125255275, model.services().get("tjzgczfcm").port());
        Assertions.assertEquals("auwazcgwd", model.services().get("tjzgczfcm").properties().get("riwgybjp"));
        Assertions.assertEquals("evsaa", model.inputs().get("wspcaxikhfjqebg").description());
        Assertions.assertEquals("inkzpa", model.outputs().get("qtdiswxspvckoj").description());
        Assertions.assertEquals("b", model.sourceJobId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
