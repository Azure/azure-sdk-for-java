// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ScheduleInner;
import com.azure.resourcemanager.machinelearning.models.ScheduleActionBase;
import com.azure.resourcemanager.machinelearning.models.ScheduleProperties;
import com.azure.resourcemanager.machinelearning.models.TriggerBase;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScheduleInnerTests {
    @Test
    public void testDeserialize() {
        ScheduleInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"action\":{\"actionType\":\"ScheduleActionBase\"},\"displayName\":\"c\",\"isEnabled\":false,\"provisioningState\":\"Canceled\",\"trigger\":{\"triggerType\":\"TriggerBase\",\"endTime\":\"twfans\",\"startTime\":\"pdibmikostbzbki\",\"timeZone\":\"uqn\"},\"description\":\"phzfylsgcrp\",\"properties\":{\"zcezelfwyfwl\":\"une\",\"psihcla\":\"xjwet\",\"tcmwqkchc\":\"zvaylptrsqqw\",\"xfdeqvhpsyl\":\"waxfewzjkj\"},\"tags\":{\"zjrgyww\":\"hkbffmbm\"}},\"id\":\"jx\",\"name\":\"nptfujgi\",\"type\":\"gaao\"}")
                .toObject(ScheduleInner.class);
        Assertions.assertEquals("phzfylsgcrp", model.properties().description());
        Assertions.assertEquals("une", model.properties().properties().get("zcezelfwyfwl"));
        Assertions.assertEquals("hkbffmbm", model.properties().tags().get("zjrgyww"));
        Assertions.assertEquals("c", model.properties().displayName());
        Assertions.assertEquals(false, model.properties().isEnabled());
        Assertions.assertEquals("twfans", model.properties().trigger().endTime());
        Assertions.assertEquals("pdibmikostbzbki", model.properties().trigger().startTime());
        Assertions.assertEquals("uqn", model.properties().trigger().timeZone());
    }

    @Test
    public void testSerialize() {
        ScheduleInner model =
            new ScheduleInner()
                .withProperties(
                    new ScheduleProperties()
                        .withDescription("phzfylsgcrp")
                        .withProperties(
                            mapOf(
                                "zcezelfwyfwl",
                                "une",
                                "psihcla",
                                "xjwet",
                                "tcmwqkchc",
                                "zvaylptrsqqw",
                                "xfdeqvhpsyl",
                                "waxfewzjkj"))
                        .withTags(mapOf("zjrgyww", "hkbffmbm"))
                        .withAction(new ScheduleActionBase())
                        .withDisplayName("c")
                        .withIsEnabled(false)
                        .withTrigger(
                            new TriggerBase()
                                .withEndTime("twfans")
                                .withStartTime("pdibmikostbzbki")
                                .withTimeZone("uqn")));
        model = BinaryData.fromObject(model).toObject(ScheduleInner.class);
        Assertions.assertEquals("phzfylsgcrp", model.properties().description());
        Assertions.assertEquals("une", model.properties().properties().get("zcezelfwyfwl"));
        Assertions.assertEquals("hkbffmbm", model.properties().tags().get("zjrgyww"));
        Assertions.assertEquals("c", model.properties().displayName());
        Assertions.assertEquals(false, model.properties().isEnabled());
        Assertions.assertEquals("twfans", model.properties().trigger().endTime());
        Assertions.assertEquals("pdibmikostbzbki", model.properties().trigger().startTime());
        Assertions.assertEquals("uqn", model.properties().trigger().timeZone());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
