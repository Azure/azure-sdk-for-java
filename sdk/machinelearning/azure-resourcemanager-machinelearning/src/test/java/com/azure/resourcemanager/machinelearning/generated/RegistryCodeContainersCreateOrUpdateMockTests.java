// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.CodeContainerInner;
import com.azure.resourcemanager.machinelearning.models.CodeContainer;
import com.azure.resourcemanager.machinelearning.models.CodeContainerProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistryCodeContainersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"isArchived\":true,\"latestVersion\":\"putocr\",\"nextVersion\":\"gqicmdrgcuzjmvkr\",\"description\":\"jcqhgcmljzksqim\",\"tags\":{\"qpvhszopeukufds\":\"jvfiomhc\",\"fsjbpwjwz\":\"bsskgqjemosq\"},\"properties\":{\"zkhxfp\":\"pdzy\",\"ibweua\":\"cuudqhadxjvvl\"}},\"id\":\"txlz\",\"name\":\"coqxtvytzqlyldj\",\"type\":\"zmxyrazzstjvcs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CodeContainer response = manager.registryCodeContainers()
            .createOrUpdate("btd", "zhixccnkf", "og",
                new CodeContainerInner().withProperties(new CodeContainerProperties().withDescription("ev")
                    .withTags(
                        mapOf("wukfjvqglaxseisv", "ddpwmgw", "phheove", "vg", "h", "kpalecztl", "fssrgrq", "tzpu"))
                    .withProperties(mapOf("louurmuzembqq", "quo", "oxlorxgsl", "ehdhjofywwna", "u", "c"))
                    .withIsArchived(true)),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jcqhgcmljzksqim", response.properties().description());
        Assertions.assertEquals("jvfiomhc", response.properties().tags().get("qpvhszopeukufds"));
        Assertions.assertEquals("pdzy", response.properties().properties().get("zkhxfp"));
        Assertions.assertEquals(true, response.properties().isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
