// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.DataVersionBase;
import com.azure.resourcemanager.machinelearning.models.DataVersionBaseProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataVersionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"dataType\":\"DataVersionBaseProperties\",\"dataUri\":\"znqqkqxkdglse\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"yakr\",\"tags\":{\"nnvxouhdcf\":\"nwgokrllbec\",\"g\":\"ptfcjapmfwxmcxhw\",\"mgadhmqyufpfo\":\"hifoyo\"},\"properties\":{\"qcypm\":\"ylszrtng\",\"cigcbmayhdtjfrp\":\"nfcorcnhf\"}},\"id\":\"ajzdj\",\"name\":\"zbrwrfrmhouf\",\"type\":\"krbgvojcks\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataVersionBase response = manager.dataVersions()
            .define("rru")
            .withExistingData("rucwzc", "judhgw", "qeglym")
            .withProperties(new DataVersionBaseProperties().withDescription("lfi")
                .withTags(mapOf("e", "nnyxwdpm"))
                .withProperties(mapOf("mmvdpavc", "vzxgbamqrbbsnp", "wdtunpcskdlrfo", "kbyjuwhizcbqjxm"))
                .withIsArchived(false)
                .withIsAnonymous(true)
                .withDataUri("sqpiyxkmqm"))
            .create();

        Assertions.assertEquals("yakr", response.properties().description());
        Assertions.assertEquals("nwgokrllbec", response.properties().tags().get("nnvxouhdcf"));
        Assertions.assertEquals("ylszrtng", response.properties().properties().get("qcypm"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals("znqqkqxkdglse", response.properties().dataUri());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
