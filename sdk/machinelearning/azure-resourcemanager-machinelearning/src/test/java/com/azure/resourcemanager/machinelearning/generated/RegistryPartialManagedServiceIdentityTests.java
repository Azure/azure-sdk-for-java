// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.RegistryPartialManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RegistryPartialManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RegistryPartialManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"acaceebc-8dc5-46a0-a47a-b4682a356778\",\"tenantId\":\"05e04309-83a4-4a06-a3fe-43ad2d346a82\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"dynzjahwr\":{\"principalId\":\"fd0a6aeb-9da8-46f3-9fec-e6c6e47ced61\",\"clientId\":\"48715817-14d2-4ade-b6f6-ebc25ebde7a4\"}}}")
            .toObject(RegistryPartialManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RegistryPartialManagedServiceIdentity model
            = new RegistryPartialManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("dynzjahwr", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(RegistryPartialManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
