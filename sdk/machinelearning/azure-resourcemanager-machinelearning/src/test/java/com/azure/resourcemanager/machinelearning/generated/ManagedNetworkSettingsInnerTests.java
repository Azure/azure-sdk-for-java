// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkProvisionStatusInner;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkSettingsInner;
import com.azure.resourcemanager.machinelearning.models.IsolationMode;
import com.azure.resourcemanager.machinelearning.models.ManagedNetworkStatus;
import com.azure.resourcemanager.machinelearning.models.OutboundRule;
import com.azure.resourcemanager.machinelearning.models.RuleCategory;
import com.azure.resourcemanager.machinelearning.models.RuleStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedNetworkSettingsInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedNetworkSettingsInner model = BinaryData.fromString(
            "{\"isolationMode\":\"AllowOnlyApprovedOutbound\",\"networkId\":\"koty\",\"outboundRules\":{\"ndlik\":{\"type\":\"OutboundRule\",\"category\":\"UserDefined\",\"status\":\"Inactive\"}},\"status\":{\"sparkReady\":false,\"status\":\"Active\"}}")
            .toObject(ManagedNetworkSettingsInner.class);
        Assertions.assertEquals(IsolationMode.ALLOW_ONLY_APPROVED_OUTBOUND, model.isolationMode());
        Assertions.assertEquals(RuleCategory.USER_DEFINED, model.outboundRules().get("ndlik").category());
        Assertions.assertEquals(RuleStatus.INACTIVE, model.outboundRules().get("ndlik").status());
        Assertions.assertEquals(false, model.status().sparkReady());
        Assertions.assertEquals(ManagedNetworkStatus.ACTIVE, model.status().status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedNetworkSettingsInner model = new ManagedNetworkSettingsInner()
            .withIsolationMode(IsolationMode.ALLOW_ONLY_APPROVED_OUTBOUND)
            .withOutboundRules(mapOf("ndlik",
                new OutboundRule().withCategory(RuleCategory.USER_DEFINED).withStatus(RuleStatus.INACTIVE)))
            .withStatus(
                new ManagedNetworkProvisionStatusInner().withSparkReady(false).withStatus(ManagedNetworkStatus.ACTIVE));
        model = BinaryData.fromObject(model).toObject(ManagedNetworkSettingsInner.class);
        Assertions.assertEquals(IsolationMode.ALLOW_ONLY_APPROVED_OUTBOUND, model.isolationMode());
        Assertions.assertEquals(RuleCategory.USER_DEFINED, model.outboundRules().get("ndlik").category());
        Assertions.assertEquals(RuleStatus.INACTIVE, model.outboundRules().get("ndlik").status());
        Assertions.assertEquals(false, model.status().sparkReady());
        Assertions.assertEquals(ManagedNetworkStatus.ACTIVE, model.status().status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
