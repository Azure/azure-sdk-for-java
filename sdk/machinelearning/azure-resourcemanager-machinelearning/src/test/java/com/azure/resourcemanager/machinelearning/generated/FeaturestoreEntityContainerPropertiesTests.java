// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturestoreEntityContainerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeaturestoreEntityContainerProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"isArchived\":false,\"latestVersion\":\"pnnbm\",\"nextVersion\":\"sibjgs\",\"description\":\"xxahmrnadzyqegxy\",\"tags\":{\"bjijkgqxnh\":\"inbmh\",\"aujvaa\":\"bkezn\",\"xw\":\"nggiycwkdtaa\",\"rq\":\"ekaum\"},\"properties\":{\"bnxwbjsidbirkf\":\"mqkra\",\"dgo\":\"kso\",\"zkye\":\"ewijymrhbguz\",\"o\":\"nfnzhhh\"}}")
            .toObject(FeaturestoreEntityContainerProperties.class);
        Assertions.assertEquals("xxahmrnadzyqegxy", model.description());
        Assertions.assertEquals("inbmh", model.tags().get("bjijkgqxnh"));
        Assertions.assertEquals("mqkra", model.properties().get("bnxwbjsidbirkf"));
        Assertions.assertEquals(false, model.isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeaturestoreEntityContainerProperties model
            = new FeaturestoreEntityContainerProperties().withDescription("xxahmrnadzyqegxy")
                .withTags(mapOf("bjijkgqxnh", "inbmh", "aujvaa", "bkezn", "xw", "nggiycwkdtaa", "rq", "ekaum"))
                .withProperties(mapOf("bnxwbjsidbirkf", "mqkra", "dgo", "kso", "zkye", "ewijymrhbguz", "o", "nfnzhhh"))
                .withIsArchived(false);
        model = BinaryData.fromObject(model).toObject(FeaturestoreEntityContainerProperties.class);
        Assertions.assertEquals("xxahmrnadzyqegxy", model.description());
        Assertions.assertEquals("inbmh", model.tags().get("bjijkgqxnh"));
        Assertions.assertEquals("mqkra", model.properties().get("bnxwbjsidbirkf"));
        Assertions.assertEquals(false, model.isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
