// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsObjectDetection;
import org.junit.jupiter.api.Assertions;

public final class ImageModelDistributionSettingsObjectDetectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageModelDistributionSettingsObjectDetection model = BinaryData.fromString(
            "{\"boxDetectionsPerImage\":\"wkkfzzetl\",\"boxScoreThreshold\":\"dyxzlvwywjvr\",\"imageSize\":\"qpwwlzpddarc\",\"maxSize\":\"dwhslxebaj\",\"minSize\":\"knmstbdoprwkamp\",\"modelSize\":\"wpbldz\",\"multiScale\":\"udrcycm\",\"nmsIouThreshold\":\"uzymhlhihqknlv\",\"tileGridSize\":\"n\",\"tileOverlapRatio\":\"kopaiildcp\",\"tilePredictionsNmsThreshold\":\"khquxsy\",\"validationIouThreshold\":\"fpgvedrobujnjgyb\",\"validationMetricType\":\"mqx\",\"amsGradient\":\"idullnjgcpskg\",\"augmentations\":\"nytslgsazuqznghx\",\"beta1\":\"yqz\",\"beta2\":\"dkpvnrvzw\",\"distributed\":\"fxsfybntmveho\",\"earlyStopping\":\"lyuvbgtzqzqwe\",\"earlyStoppingDelay\":\"dybnairvhpqsvb\",\"earlyStoppingPatience\":\"ogeatrcnqnvn\",\"evaluationFrequency\":\"rfcs\",\"enableOnnxNormalization\":\"jnkoiz\",\"gradientAccumulationStep\":\"sqbibaa\",\"layersToFreeze\":\"icovj\",\"learningRate\":\"vwrmjx\",\"learningRateScheduler\":\"uod\",\"modelName\":\"czbassqfyylwpp\",\"momentum\":\"gkbzbloas\",\"nesterov\":\"xhqvovdpmht\",\"numberOfEpochs\":\"vsqjs\",\"numberOfWorkers\":\"jnqtaqg\",\"optimizer\":\"bfkceincnrecj\",\"randomSeed\":\"ywevsfgdrmnszdo\",\"stepLRGamma\":\"j\",\"stepLRStepSize\":\"svz\",\"trainingBatchSize\":\"xtcwgh\",\"validationBatchSize\":\"aevhgsulwvg\",\"warmupCosineLRCycles\":\"ufigvfjjuzki\",\"warmupCosineLRWarmupEpochs\":\"ciwuhyzekypy\",\"weightDecay\":\"ljlbzdlby\"}")
            .toObject(ImageModelDistributionSettingsObjectDetection.class);
        Assertions.assertEquals("idullnjgcpskg", model.amsGradient());
        Assertions.assertEquals("nytslgsazuqznghx", model.augmentations());
        Assertions.assertEquals("yqz", model.beta1());
        Assertions.assertEquals("dkpvnrvzw", model.beta2());
        Assertions.assertEquals("fxsfybntmveho", model.distributed());
        Assertions.assertEquals("lyuvbgtzqzqwe", model.earlyStopping());
        Assertions.assertEquals("dybnairvhpqsvb", model.earlyStoppingDelay());
        Assertions.assertEquals("ogeatrcnqnvn", model.earlyStoppingPatience());
        Assertions.assertEquals("rfcs", model.evaluationFrequency());
        Assertions.assertEquals("jnkoiz", model.enableOnnxNormalization());
        Assertions.assertEquals("sqbibaa", model.gradientAccumulationStep());
        Assertions.assertEquals("icovj", model.layersToFreeze());
        Assertions.assertEquals("vwrmjx", model.learningRate());
        Assertions.assertEquals("uod", model.learningRateScheduler());
        Assertions.assertEquals("czbassqfyylwpp", model.modelName());
        Assertions.assertEquals("gkbzbloas", model.momentum());
        Assertions.assertEquals("xhqvovdpmht", model.nesterov());
        Assertions.assertEquals("vsqjs", model.numberOfEpochs());
        Assertions.assertEquals("jnqtaqg", model.numberOfWorkers());
        Assertions.assertEquals("bfkceincnrecj", model.optimizer());
        Assertions.assertEquals("ywevsfgdrmnszdo", model.randomSeed());
        Assertions.assertEquals("j", model.stepLRGamma());
        Assertions.assertEquals("svz", model.stepLRStepSize());
        Assertions.assertEquals("xtcwgh", model.trainingBatchSize());
        Assertions.assertEquals("aevhgsulwvg", model.validationBatchSize());
        Assertions.assertEquals("ufigvfjjuzki", model.warmupCosineLRCycles());
        Assertions.assertEquals("ciwuhyzekypy", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("ljlbzdlby", model.weightDecay());
        Assertions.assertEquals("wkkfzzetl", model.boxDetectionsPerImage());
        Assertions.assertEquals("dyxzlvwywjvr", model.boxScoreThreshold());
        Assertions.assertEquals("qpwwlzpddarc", model.imageSize());
        Assertions.assertEquals("dwhslxebaj", model.maxSize());
        Assertions.assertEquals("knmstbdoprwkamp", model.minSize());
        Assertions.assertEquals("wpbldz", model.modelSize());
        Assertions.assertEquals("udrcycm", model.multiScale());
        Assertions.assertEquals("uzymhlhihqknlv", model.nmsIouThreshold());
        Assertions.assertEquals("n", model.tileGridSize());
        Assertions.assertEquals("kopaiildcp", model.tileOverlapRatio());
        Assertions.assertEquals("khquxsy", model.tilePredictionsNmsThreshold());
        Assertions.assertEquals("fpgvedrobujnjgyb", model.validationIouThreshold());
        Assertions.assertEquals("mqx", model.validationMetricType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageModelDistributionSettingsObjectDetection model
            = new ImageModelDistributionSettingsObjectDetection().withAmsGradient("idullnjgcpskg")
                .withAugmentations("nytslgsazuqznghx")
                .withBeta1("yqz")
                .withBeta2("dkpvnrvzw")
                .withDistributed("fxsfybntmveho")
                .withEarlyStopping("lyuvbgtzqzqwe")
                .withEarlyStoppingDelay("dybnairvhpqsvb")
                .withEarlyStoppingPatience("ogeatrcnqnvn")
                .withEvaluationFrequency("rfcs")
                .withEnableOnnxNormalization("jnkoiz")
                .withGradientAccumulationStep("sqbibaa")
                .withLayersToFreeze("icovj")
                .withLearningRate("vwrmjx")
                .withLearningRateScheduler("uod")
                .withModelName("czbassqfyylwpp")
                .withMomentum("gkbzbloas")
                .withNesterov("xhqvovdpmht")
                .withNumberOfEpochs("vsqjs")
                .withNumberOfWorkers("jnqtaqg")
                .withOptimizer("bfkceincnrecj")
                .withRandomSeed("ywevsfgdrmnszdo")
                .withStepLRGamma("j")
                .withStepLRStepSize("svz")
                .withTrainingBatchSize("xtcwgh")
                .withValidationBatchSize("aevhgsulwvg")
                .withWarmupCosineLRCycles("ufigvfjjuzki")
                .withWarmupCosineLRWarmupEpochs("ciwuhyzekypy")
                .withWeightDecay("ljlbzdlby")
                .withBoxDetectionsPerImage("wkkfzzetl")
                .withBoxScoreThreshold("dyxzlvwywjvr")
                .withImageSize("qpwwlzpddarc")
                .withMaxSize("dwhslxebaj")
                .withMinSize("knmstbdoprwkamp")
                .withModelSize("wpbldz")
                .withMultiScale("udrcycm")
                .withNmsIouThreshold("uzymhlhihqknlv")
                .withTileGridSize("n")
                .withTileOverlapRatio("kopaiildcp")
                .withTilePredictionsNmsThreshold("khquxsy")
                .withValidationIouThreshold("fpgvedrobujnjgyb")
                .withValidationMetricType("mqx");
        model = BinaryData.fromObject(model).toObject(ImageModelDistributionSettingsObjectDetection.class);
        Assertions.assertEquals("idullnjgcpskg", model.amsGradient());
        Assertions.assertEquals("nytslgsazuqznghx", model.augmentations());
        Assertions.assertEquals("yqz", model.beta1());
        Assertions.assertEquals("dkpvnrvzw", model.beta2());
        Assertions.assertEquals("fxsfybntmveho", model.distributed());
        Assertions.assertEquals("lyuvbgtzqzqwe", model.earlyStopping());
        Assertions.assertEquals("dybnairvhpqsvb", model.earlyStoppingDelay());
        Assertions.assertEquals("ogeatrcnqnvn", model.earlyStoppingPatience());
        Assertions.assertEquals("rfcs", model.evaluationFrequency());
        Assertions.assertEquals("jnkoiz", model.enableOnnxNormalization());
        Assertions.assertEquals("sqbibaa", model.gradientAccumulationStep());
        Assertions.assertEquals("icovj", model.layersToFreeze());
        Assertions.assertEquals("vwrmjx", model.learningRate());
        Assertions.assertEquals("uod", model.learningRateScheduler());
        Assertions.assertEquals("czbassqfyylwpp", model.modelName());
        Assertions.assertEquals("gkbzbloas", model.momentum());
        Assertions.assertEquals("xhqvovdpmht", model.nesterov());
        Assertions.assertEquals("vsqjs", model.numberOfEpochs());
        Assertions.assertEquals("jnqtaqg", model.numberOfWorkers());
        Assertions.assertEquals("bfkceincnrecj", model.optimizer());
        Assertions.assertEquals("ywevsfgdrmnszdo", model.randomSeed());
        Assertions.assertEquals("j", model.stepLRGamma());
        Assertions.assertEquals("svz", model.stepLRStepSize());
        Assertions.assertEquals("xtcwgh", model.trainingBatchSize());
        Assertions.assertEquals("aevhgsulwvg", model.validationBatchSize());
        Assertions.assertEquals("ufigvfjjuzki", model.warmupCosineLRCycles());
        Assertions.assertEquals("ciwuhyzekypy", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("ljlbzdlby", model.weightDecay());
        Assertions.assertEquals("wkkfzzetl", model.boxDetectionsPerImage());
        Assertions.assertEquals("dyxzlvwywjvr", model.boxScoreThreshold());
        Assertions.assertEquals("qpwwlzpddarc", model.imageSize());
        Assertions.assertEquals("dwhslxebaj", model.maxSize());
        Assertions.assertEquals("knmstbdoprwkamp", model.minSize());
        Assertions.assertEquals("wpbldz", model.modelSize());
        Assertions.assertEquals("udrcycm", model.multiScale());
        Assertions.assertEquals("uzymhlhihqknlv", model.nmsIouThreshold());
        Assertions.assertEquals("n", model.tileGridSize());
        Assertions.assertEquals("kopaiildcp", model.tileOverlapRatio());
        Assertions.assertEquals("khquxsy", model.tilePredictionsNmsThreshold());
        Assertions.assertEquals("fpgvedrobujnjgyb", model.validationIouThreshold());
        Assertions.assertEquals("mqx", model.validationMetricType());
    }
}
