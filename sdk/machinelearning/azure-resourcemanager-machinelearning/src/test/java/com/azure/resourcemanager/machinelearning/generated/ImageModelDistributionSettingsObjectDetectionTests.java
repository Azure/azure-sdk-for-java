// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsObjectDetection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageModelDistributionSettingsObjectDetectionTests {
    @Test
    public void testDeserialize() {
        ImageModelDistributionSettingsObjectDetection model =
            BinaryData
                .fromString(
                    "{\"boxDetectionsPerImage\":\"inxojjlux\",\"boxScoreThreshold\":\"hilzzdzzq\",\"imageSize\":\"uezayov\",\"maxSize\":\"bqlotokhtvwtazn\",\"minSize\":\"qww\",\"modelSize\":\"jyofgwhnk\",\"multiScale\":\"lwljss\",\"nmsIouThreshold\":\"tsnld\",\"tileGridSize\":\"wolgisubxbt\",\"tileOverlapRatio\":\"gfgf\",\"tilePredictionsNmsThreshold\":\"jrykwlefksxqce\",\"validationIouThreshold\":\"fpxgnmqvz\",\"validationMetricType\":\"uyqqaiosssc\",\"amsGradient\":\"aifppuacvfyeowp\",\"augmentations\":\"x\",\"beta1\":\"dhsoymhpv\",\"beta2\":\"qfttehdpboujs\",\"distributed\":\"fvvdshxcdedsue\",\"earlyStopping\":\"gnxcgjtfrnquktr\",\"earlyStoppingDelay\":\"s\",\"earlyStoppingPatience\":\"lr\",\"enableOnnxNormalization\":\"myltrwntfmtbg\",\"evaluationFrequency\":\"dxwnazkurrd\",\"gradientAccumulationStep\":\"yzjwhsetwwjwzzq\",\"layersToFreeze\":\"uzu\",\"learningRate\":\"y\",\"learningRateScheduler\":\"yqhyqqzzdcykey\",\"modelName\":\"ewfopazdazg\",\"momentum\":\"qgpewqcfutmdpvoz\",\"nesterov\":\"qjbknl\",\"numberOfEpochs\":\"lctzeyowmndcovd\",\"numberOfWorkers\":\"qauxzan\",\"optimizer\":\"kvfruwkudr\",\"randomSeed\":\"pftxudqyeme\",\"stepLRGamma\":\"naucmcirtnee\",\"stepLRStepSize\":\"jauwcgxefnohaitr\",\"trainingBatchSize\":\"izerw\",\"validationBatchSize\":\"dasmxu\",\"warmupCosineLRCycles\":\"fbngfcocef\",\"warmupCosineLRWarmupEpochs\":\"riylfmpztra\",\"weightDecay\":\"svhl\"}")
                .toObject(ImageModelDistributionSettingsObjectDetection.class);
        Assertions.assertEquals("aifppuacvfyeowp", model.amsGradient());
        Assertions.assertEquals("x", model.augmentations());
        Assertions.assertEquals("dhsoymhpv", model.beta1());
        Assertions.assertEquals("qfttehdpboujs", model.beta2());
        Assertions.assertEquals("fvvdshxcdedsue", model.distributed());
        Assertions.assertEquals("gnxcgjtfrnquktr", model.earlyStopping());
        Assertions.assertEquals("s", model.earlyStoppingDelay());
        Assertions.assertEquals("lr", model.earlyStoppingPatience());
        Assertions.assertEquals("myltrwntfmtbg", model.enableOnnxNormalization());
        Assertions.assertEquals("dxwnazkurrd", model.evaluationFrequency());
        Assertions.assertEquals("yzjwhsetwwjwzzq", model.gradientAccumulationStep());
        Assertions.assertEquals("uzu", model.layersToFreeze());
        Assertions.assertEquals("y", model.learningRate());
        Assertions.assertEquals("yqhyqqzzdcykey", model.learningRateScheduler());
        Assertions.assertEquals("ewfopazdazg", model.modelName());
        Assertions.assertEquals("qgpewqcfutmdpvoz", model.momentum());
        Assertions.assertEquals("qjbknl", model.nesterov());
        Assertions.assertEquals("lctzeyowmndcovd", model.numberOfEpochs());
        Assertions.assertEquals("qauxzan", model.numberOfWorkers());
        Assertions.assertEquals("kvfruwkudr", model.optimizer());
        Assertions.assertEquals("pftxudqyeme", model.randomSeed());
        Assertions.assertEquals("naucmcirtnee", model.stepLRGamma());
        Assertions.assertEquals("jauwcgxefnohaitr", model.stepLRStepSize());
        Assertions.assertEquals("izerw", model.trainingBatchSize());
        Assertions.assertEquals("dasmxu", model.validationBatchSize());
        Assertions.assertEquals("fbngfcocef", model.warmupCosineLRCycles());
        Assertions.assertEquals("riylfmpztra", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("svhl", model.weightDecay());
        Assertions.assertEquals("inxojjlux", model.boxDetectionsPerImage());
        Assertions.assertEquals("hilzzdzzq", model.boxScoreThreshold());
        Assertions.assertEquals("uezayov", model.imageSize());
        Assertions.assertEquals("bqlotokhtvwtazn", model.maxSize());
        Assertions.assertEquals("qww", model.minSize());
        Assertions.assertEquals("jyofgwhnk", model.modelSize());
        Assertions.assertEquals("lwljss", model.multiScale());
        Assertions.assertEquals("tsnld", model.nmsIouThreshold());
        Assertions.assertEquals("wolgisubxbt", model.tileGridSize());
        Assertions.assertEquals("gfgf", model.tileOverlapRatio());
        Assertions.assertEquals("jrykwlefksxqce", model.tilePredictionsNmsThreshold());
        Assertions.assertEquals("fpxgnmqvz", model.validationIouThreshold());
        Assertions.assertEquals("uyqqaiosssc", model.validationMetricType());
    }

    @Test
    public void testSerialize() {
        ImageModelDistributionSettingsObjectDetection model =
            new ImageModelDistributionSettingsObjectDetection()
                .withAmsGradient("aifppuacvfyeowp")
                .withAugmentations("x")
                .withBeta1("dhsoymhpv")
                .withBeta2("qfttehdpboujs")
                .withDistributed("fvvdshxcdedsue")
                .withEarlyStopping("gnxcgjtfrnquktr")
                .withEarlyStoppingDelay("s")
                .withEarlyStoppingPatience("lr")
                .withEnableOnnxNormalization("myltrwntfmtbg")
                .withEvaluationFrequency("dxwnazkurrd")
                .withGradientAccumulationStep("yzjwhsetwwjwzzq")
                .withLayersToFreeze("uzu")
                .withLearningRate("y")
                .withLearningRateScheduler("yqhyqqzzdcykey")
                .withModelName("ewfopazdazg")
                .withMomentum("qgpewqcfutmdpvoz")
                .withNesterov("qjbknl")
                .withNumberOfEpochs("lctzeyowmndcovd")
                .withNumberOfWorkers("qauxzan")
                .withOptimizer("kvfruwkudr")
                .withRandomSeed("pftxudqyeme")
                .withStepLRGamma("naucmcirtnee")
                .withStepLRStepSize("jauwcgxefnohaitr")
                .withTrainingBatchSize("izerw")
                .withValidationBatchSize("dasmxu")
                .withWarmupCosineLRCycles("fbngfcocef")
                .withWarmupCosineLRWarmupEpochs("riylfmpztra")
                .withWeightDecay("svhl")
                .withBoxDetectionsPerImage("inxojjlux")
                .withBoxScoreThreshold("hilzzdzzq")
                .withImageSize("uezayov")
                .withMaxSize("bqlotokhtvwtazn")
                .withMinSize("qww")
                .withModelSize("jyofgwhnk")
                .withMultiScale("lwljss")
                .withNmsIouThreshold("tsnld")
                .withTileGridSize("wolgisubxbt")
                .withTileOverlapRatio("gfgf")
                .withTilePredictionsNmsThreshold("jrykwlefksxqce")
                .withValidationIouThreshold("fpxgnmqvz")
                .withValidationMetricType("uyqqaiosssc");
        model = BinaryData.fromObject(model).toObject(ImageModelDistributionSettingsObjectDetection.class);
        Assertions.assertEquals("aifppuacvfyeowp", model.amsGradient());
        Assertions.assertEquals("x", model.augmentations());
        Assertions.assertEquals("dhsoymhpv", model.beta1());
        Assertions.assertEquals("qfttehdpboujs", model.beta2());
        Assertions.assertEquals("fvvdshxcdedsue", model.distributed());
        Assertions.assertEquals("gnxcgjtfrnquktr", model.earlyStopping());
        Assertions.assertEquals("s", model.earlyStoppingDelay());
        Assertions.assertEquals("lr", model.earlyStoppingPatience());
        Assertions.assertEquals("myltrwntfmtbg", model.enableOnnxNormalization());
        Assertions.assertEquals("dxwnazkurrd", model.evaluationFrequency());
        Assertions.assertEquals("yzjwhsetwwjwzzq", model.gradientAccumulationStep());
        Assertions.assertEquals("uzu", model.layersToFreeze());
        Assertions.assertEquals("y", model.learningRate());
        Assertions.assertEquals("yqhyqqzzdcykey", model.learningRateScheduler());
        Assertions.assertEquals("ewfopazdazg", model.modelName());
        Assertions.assertEquals("qgpewqcfutmdpvoz", model.momentum());
        Assertions.assertEquals("qjbknl", model.nesterov());
        Assertions.assertEquals("lctzeyowmndcovd", model.numberOfEpochs());
        Assertions.assertEquals("qauxzan", model.numberOfWorkers());
        Assertions.assertEquals("kvfruwkudr", model.optimizer());
        Assertions.assertEquals("pftxudqyeme", model.randomSeed());
        Assertions.assertEquals("naucmcirtnee", model.stepLRGamma());
        Assertions.assertEquals("jauwcgxefnohaitr", model.stepLRStepSize());
        Assertions.assertEquals("izerw", model.trainingBatchSize());
        Assertions.assertEquals("dasmxu", model.validationBatchSize());
        Assertions.assertEquals("fbngfcocef", model.warmupCosineLRCycles());
        Assertions.assertEquals("riylfmpztra", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("svhl", model.weightDecay());
        Assertions.assertEquals("inxojjlux", model.boxDetectionsPerImage());
        Assertions.assertEquals("hilzzdzzq", model.boxScoreThreshold());
        Assertions.assertEquals("uezayov", model.imageSize());
        Assertions.assertEquals("bqlotokhtvwtazn", model.maxSize());
        Assertions.assertEquals("qww", model.minSize());
        Assertions.assertEquals("jyofgwhnk", model.modelSize());
        Assertions.assertEquals("lwljss", model.multiScale());
        Assertions.assertEquals("tsnld", model.nmsIouThreshold());
        Assertions.assertEquals("wolgisubxbt", model.tileGridSize());
        Assertions.assertEquals("gfgf", model.tileOverlapRatio());
        Assertions.assertEquals("jrykwlefksxqce", model.tilePredictionsNmsThreshold());
        Assertions.assertEquals("fpxgnmqvz", model.validationIouThreshold());
        Assertions.assertEquals("uyqqaiosssc", model.validationMetricType());
    }
}
