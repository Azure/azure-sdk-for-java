// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ModelContainerInner;
import com.azure.resourcemanager.machinelearning.models.ModelContainerProperties;
import com.azure.resourcemanager.machinelearning.models.ModelContainerResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ModelContainerResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ModelContainerResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"m\",\"value\":[{\"properties\":{\"isArchived\":false,\"latestVersion\":\"iwrxgkn\",\"nextVersion\":\"vyi\",\"description\":\"qodfvp\",\"properties\":{},\"tags\":{}},\"id\":\"xgsg\",\"name\":\"p\",\"type\":\"gzdjtxvzf\"}]}")
                .toObject(ModelContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("m", model.nextLink());
        Assertions.assertEquals("qodfvp", model.value().get(0).properties().description());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ModelContainerResourceArmPaginatedResult model =
            new ModelContainerResourceArmPaginatedResult()
                .withNextLink("m")
                .withValue(
                    Arrays
                        .asList(
                            new ModelContainerInner()
                                .withProperties(
                                    new ModelContainerProperties()
                                        .withDescription("qodfvp")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false))));
        model = BinaryData.fromObject(model).toObject(ModelContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("m", model.nextLink());
        Assertions.assertEquals("qodfvp", model.value().get(0).properties().description());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
