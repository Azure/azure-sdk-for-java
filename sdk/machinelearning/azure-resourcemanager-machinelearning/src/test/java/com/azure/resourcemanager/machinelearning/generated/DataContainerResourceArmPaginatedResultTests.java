// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.DataContainerInner;
import com.azure.resourcemanager.machinelearning.models.DataContainerProperties;
import com.azure.resourcemanager.machinelearning.models.DataContainerResourceArmPaginatedResult;
import com.azure.resourcemanager.machinelearning.models.DataType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataContainerResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataContainerResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"ufxqknpirgnepttw\",\"value\":[{\"properties\":{\"dataType\":\"uri_file\",\"isArchived\":true,\"latestVersion\":\"cdm\",\"nextVersion\":\"r\",\"description\":\"lpijnkrxfrd\",\"properties\":{},\"tags\":{}},\"id\":\"atiz\",\"name\":\"ronasxift\",\"type\":\"zq\"},{\"properties\":{\"dataType\":\"uri_folder\",\"isArchived\":false,\"latestVersion\":\"wesgogczh\",\"nextVersion\":\"nxkrlgnyhmossxkk\",\"description\":\"h\",\"properties\":{},\"tags\":{}},\"id\":\"xjb\",\"name\":\"hqxvcxgfrpdsofbs\",\"type\":\"rnsvbuswd\"}]}")
                .toObject(DataContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("ufxqknpirgnepttw", model.nextLink());
        Assertions.assertEquals("lpijnkrxfrd", model.value().get(0).properties().description());
        Assertions.assertEquals(true, model.value().get(0).properties().isArchived());
        Assertions.assertEquals(DataType.URI_FILE, model.value().get(0).properties().dataType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataContainerResourceArmPaginatedResult model =
            new DataContainerResourceArmPaginatedResult()
                .withNextLink("ufxqknpirgnepttw")
                .withValue(
                    Arrays
                        .asList(
                            new DataContainerInner()
                                .withProperties(
                                    new DataContainerProperties()
                                        .withDescription("lpijnkrxfrd")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(true)
                                        .withDataType(DataType.URI_FILE)),
                            new DataContainerInner()
                                .withProperties(
                                    new DataContainerProperties()
                                        .withDescription("h")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsArchived(false)
                                        .withDataType(DataType.URI_FOLDER))));
        model = BinaryData.fromObject(model).toObject(DataContainerResourceArmPaginatedResult.class);
        Assertions.assertEquals("ufxqknpirgnepttw", model.nextLink());
        Assertions.assertEquals("lpijnkrxfrd", model.value().get(0).properties().description());
        Assertions.assertEquals(true, model.value().get(0).properties().isArchived());
        Assertions.assertEquals(DataType.URI_FILE, model.value().get(0).properties().dataType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
