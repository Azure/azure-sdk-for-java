// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.CodeContainer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CodeContainersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"isArchived\":false,\"latestVersion\":\"kbzltnowpajfhx\",\"nextVersion\":\"ubbzadzglmuuzps\",\"description\":\"sypxmul\",\"tags\":{\"p\":\"rerk\",\"bdjkmnxsggnow\":\"fjxkbywsbuqfm\"},\"properties\":{\"hbtyc\":\"vdbrdvsv\",\"rcthypepxs\":\"lkusgiik\"}},\"id\":\"rdis\",\"name\":\"sdvkym\",\"type\":\"tcwmivoxgzeg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CodeContainer> response
            = manager.codeContainers().list("r", "tqnk", "qjftvltj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sypxmul", response.iterator().next().properties().description());
        Assertions.assertEquals("rerk", response.iterator().next().properties().tags().get("p"));
        Assertions.assertEquals("vdbrdvsv", response.iterator().next().properties().properties().get("hbtyc"));
        Assertions.assertEquals(false, response.iterator().next().properties().isArchived());
    }
}
