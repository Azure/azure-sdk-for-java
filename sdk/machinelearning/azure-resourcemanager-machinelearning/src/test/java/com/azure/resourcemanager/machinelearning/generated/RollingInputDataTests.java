// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.JobInputType;
import com.azure.resourcemanager.machinelearning.models.RollingInputData;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RollingInputDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RollingInputData model = BinaryData.fromString(
            "{\"inputDataType\":\"Rolling\",\"windowOffset\":\"PT167H19S\",\"windowSize\":\"PT35H51M52S\",\"preprocessingComponentId\":\"mqfvxgwpqnyumz\",\"dataContext\":\"dokez\",\"jobInputType\":\"custom_model\",\"uri\":\"ezknfzqnzbflbqmh\",\"columns\":{\"bs\":\"xxvwedhagq\",\"crolrzesbomp\":\"seayuflmsyzz\",\"munwjivtbuszbdjr\":\"zk\",\"isdeqng\":\"feujywda\"}}")
            .toObject(RollingInputData.class);
        Assertions.assertEquals("dokez", model.dataContext());
        Assertions.assertEquals(JobInputType.CUSTOM_MODEL, model.jobInputType());
        Assertions.assertEquals("ezknfzqnzbflbqmh", model.uri());
        Assertions.assertEquals("xxvwedhagq", model.columns().get("bs"));
        Assertions.assertEquals(Duration.parse("PT167H19S"), model.windowOffset());
        Assertions.assertEquals(Duration.parse("PT35H51M52S"), model.windowSize());
        Assertions.assertEquals("mqfvxgwpqnyumz", model.preprocessingComponentId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RollingInputData model = new RollingInputData().withDataContext("dokez")
            .withJobInputType(JobInputType.CUSTOM_MODEL)
            .withUri("ezknfzqnzbflbqmh")
            .withColumns(mapOf("bs", "xxvwedhagq", "crolrzesbomp", "seayuflmsyzz", "munwjivtbuszbdjr", "zk", "isdeqng",
                "feujywda"))
            .withWindowOffset(Duration.parse("PT167H19S"))
            .withWindowSize(Duration.parse("PT35H51M52S"))
            .withPreprocessingComponentId("mqfvxgwpqnyumz");
        model = BinaryData.fromObject(model).toObject(RollingInputData.class);
        Assertions.assertEquals("dokez", model.dataContext());
        Assertions.assertEquals(JobInputType.CUSTOM_MODEL, model.jobInputType());
        Assertions.assertEquals("ezknfzqnzbflbqmh", model.uri());
        Assertions.assertEquals("xxvwedhagq", model.columns().get("bs"));
        Assertions.assertEquals(Duration.parse("PT167H19S"), model.windowOffset());
        Assertions.assertEquals(Duration.parse("PT35H51M52S"), model.windowSize());
        Assertions.assertEquals("mqfvxgwpqnyumz", model.preprocessingComponentId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
