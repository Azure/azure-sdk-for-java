// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.AutoMLJob;
import com.azure.resourcemanager.machinelearning.models.AutoMLVertical;
import com.azure.resourcemanager.machinelearning.models.IdentityConfiguration;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.JobOutput;
import com.azure.resourcemanager.machinelearning.models.JobResourceConfiguration;
import com.azure.resourcemanager.machinelearning.models.JobService;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AutoMLJobTests {
    @Test
    public void testDeserialize() {
        AutoMLJob model =
            BinaryData
                .fromString(
                    "{\"jobType\":\"AutoML\",\"environmentId\":\"phkixkykxdssjpe\",\"environmentVariables\":{\"yincql\":\"cfxhikkflrmy\"},\"outputs\":{\"uugqk\":{\"jobOutputType\":\"JobOutput\",\"description\":\"wslmiiiovgqcg\"}},\"resources\":{\"dockerArgs\":\"tiowlx\",\"shmSize\":\"qd\",\"instanceCount\":1254395806,\"instanceType\":\"wdtgukranblw\",\"properties\":{}},\"taskDetails\":{\"taskType\":\"AutoMLVertical\",\"logVerbosity\":\"Critical\",\"targetColumnName\":\"c\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadWriteMount\",\"uri\":\"ygqwahoiu\",\"description\":\"gniiprglvaw\"}},\"componentId\":\"z\",\"computeId\":\"fypiv\",\"displayName\":\"bbjpmcubkmif\",\"experimentName\":\"xkubvphavpmhbrbq\",\"identity\":{\"identityType\":\"IdentityConfiguration\"},\"isArchived\":true,\"services\":{\"oaedsxjwuivedwcg\":{\"endpoint\":\"bttefjoknss\",\"errorMessage\":\"zqedikdfrdbi\",\"jobServiceType\":\"rjgeih\",\"port\":448495041,\"properties\":{\"byephmgt\":\"wfiwzcxmj\",\"myqwcab\":\"ljvrcmyfqipgxhnp\",\"aswlp\":\"nuilee\",\"lrxw\":\"ugmrmf\"},\"status\":\"aukhfkvcisiz\"},\"oi\":{\"endpoint\":\"ewxeiqbpsm\",\"errorMessage\":\"mguaml\",\"jobServiceType\":\"l\",\"port\":1701552880,\"properties\":{\"nxkympqanxrjk\":\"lzgaufcshhvnew\",\"ypnyghshxc\":\"xtwbta\",\"ycphdrwjjkhvyo\":\"lhkgmnsghp\",\"u\":\"ac\"},\"status\":\"xnqmhrpqpdfwm\"},\"fihwu\":{\"endpoint\":\"css\",\"errorMessage\":\"xuifmcsypobkdqz\",\"jobServiceType\":\"zsylollgt\",\"port\":1425308748,\"properties\":{\"aurkihcirlde\":\"dmxzjijpv\",\"urnnqbnqbpiz\":\"xrdcoxnbkkja\"},\"status\":\"ltgrdogypxrxv\"},\"yqyybxubmdna\":{\"endpoint\":\"ctafsrbxrblm\",\"errorMessage\":\"owxih\",\"jobServiceType\":\"nxw\",\"port\":1077098777,\"properties\":{\"gwwrxaomzis\":\"pzwaklsbsbqqq\",\"zkhhltnjadhqo\":\"lrrcz\",\"ueayfbpcmsplb\":\"wjqo\",\"mbscbbx\":\"rrueqthwmg\"},\"status\":\"dhxiidlopedbwd\"}},\"status\":\"Completed\",\"description\":\"wremjel\",\"properties\":{\"kjopwbeon\":\"cigeleohdbvqvw\",\"soqfyiaseqchkrt\":\"lkwzdqybxceakxcp\"},\"tags\":{\"uem\":\"azisgyk\",\"klinhmdptysprq\":\"anbwzohmnrxxbso\"}}")
                .toObject(AutoMLJob.class);
        Assertions.assertEquals("wremjel", model.description());
        Assertions.assertEquals("cigeleohdbvqvw", model.properties().get("kjopwbeon"));
        Assertions.assertEquals("azisgyk", model.tags().get("uem"));
        Assertions.assertEquals("z", model.componentId());
        Assertions.assertEquals("fypiv", model.computeId());
        Assertions.assertEquals("bbjpmcubkmif", model.displayName());
        Assertions.assertEquals("xkubvphavpmhbrbq", model.experimentName());
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals("bttefjoknss", model.services().get("oaedsxjwuivedwcg").endpoint());
        Assertions.assertEquals("rjgeih", model.services().get("oaedsxjwuivedwcg").jobServiceType());
        Assertions.assertEquals(448495041, model.services().get("oaedsxjwuivedwcg").port());
        Assertions.assertEquals("wfiwzcxmj", model.services().get("oaedsxjwuivedwcg").properties().get("byephmgt"));
        Assertions.assertEquals("phkixkykxdssjpe", model.environmentId());
        Assertions.assertEquals("cfxhikkflrmy", model.environmentVariables().get("yincql"));
        Assertions.assertEquals("wslmiiiovgqcg", model.outputs().get("uugqk").description());
        Assertions.assertEquals(1254395806, model.resources().instanceCount());
        Assertions.assertEquals("wdtgukranblw", model.resources().instanceType());
        Assertions.assertEquals("tiowlx", model.resources().dockerArgs());
        Assertions.assertEquals("qd", model.resources().shmSize());
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.taskDetails().logVerbosity());
        Assertions.assertEquals("c", model.taskDetails().targetColumnName());
        Assertions.assertEquals("gniiprglvaw", model.taskDetails().trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.taskDetails().trainingData().mode());
        Assertions.assertEquals("ygqwahoiu", model.taskDetails().trainingData().uri());
    }

    @Test
    public void testSerialize() {
        AutoMLJob model =
            new AutoMLJob()
                .withDescription("wremjel")
                .withProperties(mapOf("kjopwbeon", "cigeleohdbvqvw", "soqfyiaseqchkrt", "lkwzdqybxceakxcp"))
                .withTags(mapOf("uem", "azisgyk", "klinhmdptysprq", "anbwzohmnrxxbso"))
                .withComponentId("z")
                .withComputeId("fypiv")
                .withDisplayName("bbjpmcubkmif")
                .withExperimentName("xkubvphavpmhbrbq")
                .withIdentity(new IdentityConfiguration())
                .withIsArchived(true)
                .withServices(
                    mapOf(
                        "oaedsxjwuivedwcg",
                        new JobService()
                            .withEndpoint("bttefjoknss")
                            .withJobServiceType("rjgeih")
                            .withPort(448495041)
                            .withProperties(
                                mapOf(
                                    "byephmgt",
                                    "wfiwzcxmj",
                                    "myqwcab",
                                    "ljvrcmyfqipgxhnp",
                                    "aswlp",
                                    "nuilee",
                                    "lrxw",
                                    "ugmrmf")),
                        "oi",
                        new JobService()
                            .withEndpoint("ewxeiqbpsm")
                            .withJobServiceType("l")
                            .withPort(1701552880)
                            .withProperties(
                                mapOf(
                                    "nxkympqanxrjk",
                                    "lzgaufcshhvnew",
                                    "ypnyghshxc",
                                    "xtwbta",
                                    "ycphdrwjjkhvyo",
                                    "lhkgmnsghp",
                                    "u",
                                    "ac")),
                        "fihwu",
                        new JobService()
                            .withEndpoint("css")
                            .withJobServiceType("zsylollgt")
                            .withPort(1425308748)
                            .withProperties(mapOf("aurkihcirlde", "dmxzjijpv", "urnnqbnqbpiz", "xrdcoxnbkkja")),
                        "yqyybxubmdna",
                        new JobService()
                            .withEndpoint("ctafsrbxrblm")
                            .withJobServiceType("nxw")
                            .withPort(1077098777)
                            .withProperties(
                                mapOf(
                                    "gwwrxaomzis",
                                    "pzwaklsbsbqqq",
                                    "zkhhltnjadhqo",
                                    "lrrcz",
                                    "ueayfbpcmsplb",
                                    "wjqo",
                                    "mbscbbx",
                                    "rrueqthwmg"))))
                .withEnvironmentId("phkixkykxdssjpe")
                .withEnvironmentVariables(mapOf("yincql", "cfxhikkflrmy"))
                .withOutputs(mapOf("uugqk", new JobOutput().withDescription("wslmiiiovgqcg")))
                .withResources(
                    new JobResourceConfiguration()
                        .withInstanceCount(1254395806)
                        .withInstanceType("wdtgukranblw")
                        .withProperties(mapOf())
                        .withDockerArgs("tiowlx")
                        .withShmSize("qd"))
                .withTaskDetails(
                    new AutoMLVertical()
                        .withLogVerbosity(LogVerbosity.CRITICAL)
                        .withTargetColumnName("c")
                        .withTrainingData(
                            new MLTableJobInput()
                                .withDescription("gniiprglvaw")
                                .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                                .withUri("ygqwahoiu")));
        model = BinaryData.fromObject(model).toObject(AutoMLJob.class);
        Assertions.assertEquals("wremjel", model.description());
        Assertions.assertEquals("cigeleohdbvqvw", model.properties().get("kjopwbeon"));
        Assertions.assertEquals("azisgyk", model.tags().get("uem"));
        Assertions.assertEquals("z", model.componentId());
        Assertions.assertEquals("fypiv", model.computeId());
        Assertions.assertEquals("bbjpmcubkmif", model.displayName());
        Assertions.assertEquals("xkubvphavpmhbrbq", model.experimentName());
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals("bttefjoknss", model.services().get("oaedsxjwuivedwcg").endpoint());
        Assertions.assertEquals("rjgeih", model.services().get("oaedsxjwuivedwcg").jobServiceType());
        Assertions.assertEquals(448495041, model.services().get("oaedsxjwuivedwcg").port());
        Assertions.assertEquals("wfiwzcxmj", model.services().get("oaedsxjwuivedwcg").properties().get("byephmgt"));
        Assertions.assertEquals("phkixkykxdssjpe", model.environmentId());
        Assertions.assertEquals("cfxhikkflrmy", model.environmentVariables().get("yincql"));
        Assertions.assertEquals("wslmiiiovgqcg", model.outputs().get("uugqk").description());
        Assertions.assertEquals(1254395806, model.resources().instanceCount());
        Assertions.assertEquals("wdtgukranblw", model.resources().instanceType());
        Assertions.assertEquals("tiowlx", model.resources().dockerArgs());
        Assertions.assertEquals("qd", model.resources().shmSize());
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.taskDetails().logVerbosity());
        Assertions.assertEquals("c", model.taskDetails().targetColumnName());
        Assertions.assertEquals("gniiprglvaw", model.taskDetails().trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.taskDetails().trainingData().mode());
        Assertions.assertEquals("ygqwahoiu", model.taskDetails().trainingData().uri());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
