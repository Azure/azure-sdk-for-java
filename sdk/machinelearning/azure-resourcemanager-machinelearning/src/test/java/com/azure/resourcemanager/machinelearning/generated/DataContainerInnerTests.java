// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.DataContainerInner;
import com.azure.resourcemanager.machinelearning.models.DataContainerProperties;
import com.azure.resourcemanager.machinelearning.models.DataType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DataContainerInnerTests {
    @Test
    public void testDeserialize() {
        DataContainerInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"dataType\":\"mltable\",\"isArchived\":true,\"latestVersion\":\"wvtylbfpncurdo\",\"nextVersion\":\"iithtywu\",\"description\":\"cbihwqk\",\"properties\":{\"dgoihxumwctondzj\":\"ntwjch\",\"fdlwg\":\"uu\",\"gseinq\":\"ytsbwtovv\"},\"tags\":{\"qmsniffcdmqnro\":\"fxqknpirgneptt\",\"hcrat\":\"lpijnkrxfrd\",\"ft\":\"zzronasx\",\"zh\":\"zq\"}},\"id\":\"wesgogczh\",\"name\":\"nnxk\",\"type\":\"lgnyhmo\"}")
                .toObject(DataContainerInner.class);
        Assertions.assertEquals("cbihwqk", model.properties().description());
        Assertions.assertEquals("ntwjch", model.properties().properties().get("dgoihxumwctondzj"));
        Assertions.assertEquals("fxqknpirgneptt", model.properties().tags().get("qmsniffcdmqnro"));
        Assertions.assertEquals(true, model.properties().isArchived());
        Assertions.assertEquals(DataType.MLTABLE, model.properties().dataType());
    }

    @Test
    public void testSerialize() {
        DataContainerInner model =
            new DataContainerInner()
                .withProperties(
                    new DataContainerProperties()
                        .withDescription("cbihwqk")
                        .withProperties(mapOf("dgoihxumwctondzj", "ntwjch", "fdlwg", "uu", "gseinq", "ytsbwtovv"))
                        .withTags(
                            mapOf(
                                "qmsniffcdmqnro",
                                "fxqknpirgneptt",
                                "hcrat",
                                "lpijnkrxfrd",
                                "ft",
                                "zzronasx",
                                "zh",
                                "zq"))
                        .withIsArchived(true)
                        .withDataType(DataType.MLTABLE));
        model = BinaryData.fromObject(model).toObject(DataContainerInner.class);
        Assertions.assertEquals("cbihwqk", model.properties().description());
        Assertions.assertEquals("ntwjch", model.properties().properties().get("dgoihxumwctondzj"));
        Assertions.assertEquals("fxqknpirgneptt", model.properties().tags().get("qmsniffcdmqnro"));
        Assertions.assertEquals(true, model.properties().isArchived());
        Assertions.assertEquals(DataType.MLTABLE, model.properties().dataType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
