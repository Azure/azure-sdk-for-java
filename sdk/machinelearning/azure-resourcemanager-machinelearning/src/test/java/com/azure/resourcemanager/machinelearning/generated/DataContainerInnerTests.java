// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.DataContainerInner;
import com.azure.resourcemanager.machinelearning.models.DataContainerProperties;
import com.azure.resourcemanager.machinelearning.models.DataType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataContainerInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"dataType\":\"uri_folder\",\"isArchived\":true,\"latestVersion\":\"ycnunvjsrtk\",\"nextVersion\":\"wnopqgikyzirtx\",\"description\":\"uxzejntpsew\",\"properties\":{\"rydxtqm\":\"ilqu\"},\"tags\":{\"f\":\"xorgg\"}},\"id\":\"aomtbghhavgrvkff\",\"name\":\"vjzhpjbib\",\"type\":\"jmfxumvf\"}")
                .toObject(DataContainerInner.class);
        Assertions.assertEquals("uxzejntpsew", model.properties().description());
        Assertions.assertEquals("ilqu", model.properties().properties().get("rydxtqm"));
        Assertions.assertEquals("xorgg", model.properties().tags().get("f"));
        Assertions.assertEquals(true, model.properties().isArchived());
        Assertions.assertEquals(DataType.URI_FOLDER, model.properties().dataType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataContainerInner model =
            new DataContainerInner()
                .withProperties(
                    new DataContainerProperties()
                        .withDescription("uxzejntpsew")
                        .withProperties(mapOf("rydxtqm", "ilqu"))
                        .withTags(mapOf("f", "xorgg"))
                        .withIsArchived(true)
                        .withDataType(DataType.URI_FOLDER));
        model = BinaryData.fromObject(model).toObject(DataContainerInner.class);
        Assertions.assertEquals("uxzejntpsew", model.properties().description());
        Assertions.assertEquals("ilqu", model.properties().properties().get("rydxtqm"));
        Assertions.assertEquals("xorgg", model.properties().tags().get("f"));
        Assertions.assertEquals(true, model.properties().isArchived());
        Assertions.assertEquals(DataType.URI_FOLDER, model.properties().dataType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
