// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.DataContainerInner;
import com.azure.resourcemanager.machinelearning.models.DataContainerProperties;
import com.azure.resourcemanager.machinelearning.models.DataType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataContainerInner model = BinaryData.fromString(
            "{\"properties\":{\"dataType\":\"uri_folder\",\"isArchived\":false,\"latestVersion\":\"fa\",\"nextVersion\":\"vnqqybaryeua\",\"description\":\"kq\",\"tags\":{\"w\":\"gzslesjcbhernnti\",\"uwrbehwagoh\":\"jcvb\"},\"properties\":{\"emvvhm\":\"fkmr\"}},\"id\":\"drjf\",\"name\":\"tac\",\"type\":\"ebjvewzcjzn\"}")
            .toObject(DataContainerInner.class);
        Assertions.assertEquals("kq", model.properties().description());
        Assertions.assertEquals("gzslesjcbhernnti", model.properties().tags().get("w"));
        Assertions.assertEquals("fkmr", model.properties().properties().get("emvvhm"));
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals(DataType.URI_FOLDER, model.properties().dataType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataContainerInner model
            = new DataContainerInner().withProperties(new DataContainerProperties().withDescription("kq")
                .withTags(mapOf("w", "gzslesjcbhernnti", "uwrbehwagoh", "jcvb"))
                .withProperties(mapOf("emvvhm", "fkmr"))
                .withIsArchived(false)
                .withDataType(DataType.URI_FOLDER));
        model = BinaryData.fromObject(model).toObject(DataContainerInner.class);
        Assertions.assertEquals("kq", model.properties().description());
        Assertions.assertEquals("gzslesjcbhernnti", model.properties().tags().get("w"));
        Assertions.assertEquals("fkmr", model.properties().properties().get("emvvhm"));
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals(DataType.URI_FOLDER, model.properties().dataType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
