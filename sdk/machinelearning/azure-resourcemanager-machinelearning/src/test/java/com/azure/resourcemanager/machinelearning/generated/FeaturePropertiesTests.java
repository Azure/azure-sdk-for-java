// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.FeatureDataType;
import com.azure.resourcemanager.machinelearning.models.FeatureProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeatureProperties model = BinaryData.fromString(
            "{\"featureName\":\"anarfdlpukhpyrne\",\"dataType\":\"Binary\",\"description\":\"pe\",\"tags\":{\"dbhfhp\":\"hnmgbroux\",\"zoyw\":\"paz\",\"htuevrhrljy\":\"xhpdulontacnpqwt\"},\"properties\":{\"duugwbsre\":\"wxhn\",\"nlvhhtklnvnafvv\":\"rfqkfuar\",\"lcqxypokk\":\"yfedevjbo\",\"zng\":\"minqcym\"}}")
            .toObject(FeatureProperties.class);
        Assertions.assertEquals("pe", model.description());
        Assertions.assertEquals("hnmgbroux", model.tags().get("dbhfhp"));
        Assertions.assertEquals("wxhn", model.properties().get("duugwbsre"));
        Assertions.assertEquals("anarfdlpukhpyrne", model.featureName());
        Assertions.assertEquals(FeatureDataType.BINARY, model.dataType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeatureProperties model = new FeatureProperties().withDescription("pe")
            .withTags(mapOf("dbhfhp", "hnmgbroux", "zoyw", "paz", "htuevrhrljy", "xhpdulontacnpqwt"))
            .withProperties(
                mapOf("duugwbsre", "wxhn", "nlvhhtklnvnafvv", "rfqkfuar", "lcqxypokk", "yfedevjbo", "zng", "minqcym"))
            .withFeatureName("anarfdlpukhpyrne")
            .withDataType(FeatureDataType.BINARY);
        model = BinaryData.fromObject(model).toObject(FeatureProperties.class);
        Assertions.assertEquals("pe", model.description());
        Assertions.assertEquals("hnmgbroux", model.tags().get("dbhfhp"));
        Assertions.assertEquals("wxhn", model.properties().get("duugwbsre"));
        Assertions.assertEquals("anarfdlpukhpyrne", model.featureName());
        Assertions.assertEquals(FeatureDataType.BINARY, model.dataType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
