// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.JobBaseInner;
import com.azure.resourcemanager.machinelearning.models.IdentityConfiguration;
import com.azure.resourcemanager.machinelearning.models.JobBaseProperties;
import com.azure.resourcemanager.machinelearning.models.JobService;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobBaseInnerTests {
    @Test
    public void testDeserialize() {
        JobBaseInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"jobType\":\"JobBaseProperties\",\"componentId\":\"rr\",\"computeId\":\"pglydz\",\"displayName\":\"rvqeevtoepryutn\",\"experimentName\":\"tpzdmovzvfvaawzq\",\"identity\":{\"identityType\":\"IdentityConfiguration\"},\"isArchived\":false,\"services\":{\"iykhy\":{\"endpoint\":\"riglaec\",\"errorMessage\":\"dticokpvzml\",\"jobServiceType\":\"mldgxobfirc\",\"port\":563418466,\"properties\":{},\"status\":\"iayz\"}},\"status\":\"Finalizing\",\"description\":\"jlb\",\"properties\":{\"ynhdwdigum\":\"vkjlmxhom\",\"tj\":\"nraauzz\",\"zwwva\":\"zysdzh\"},\"tags\":{\"hqyikvy\":\"uvvfonkp\",\"vluwmncsttij\":\"auy\",\"vpo\":\"y\"}},\"id\":\"rsg\",\"name\":\"gbdhuzqgnjdg\",\"type\":\"ynscl\"}")
                .toObject(JobBaseInner.class);
        Assertions.assertEquals("jlb", model.properties().description());
        Assertions.assertEquals("vkjlmxhom", model.properties().properties().get("ynhdwdigum"));
        Assertions.assertEquals("uvvfonkp", model.properties().tags().get("hqyikvy"));
        Assertions.assertEquals("rr", model.properties().componentId());
        Assertions.assertEquals("pglydz", model.properties().computeId());
        Assertions.assertEquals("rvqeevtoepryutn", model.properties().displayName());
        Assertions.assertEquals("tpzdmovzvfvaawzq", model.properties().experimentName());
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals("riglaec", model.properties().services().get("iykhy").endpoint());
        Assertions.assertEquals("mldgxobfirc", model.properties().services().get("iykhy").jobServiceType());
        Assertions.assertEquals(563418466, model.properties().services().get("iykhy").port());
    }

    @Test
    public void testSerialize() {
        JobBaseInner model =
            new JobBaseInner()
                .withProperties(
                    new JobBaseProperties()
                        .withDescription("jlb")
                        .withProperties(mapOf("ynhdwdigum", "vkjlmxhom", "tj", "nraauzz", "zwwva", "zysdzh"))
                        .withTags(mapOf("hqyikvy", "uvvfonkp", "vluwmncsttij", "auy", "vpo", "y"))
                        .withComponentId("rr")
                        .withComputeId("pglydz")
                        .withDisplayName("rvqeevtoepryutn")
                        .withExperimentName("tpzdmovzvfvaawzq")
                        .withIdentity(new IdentityConfiguration())
                        .withIsArchived(false)
                        .withServices(
                            mapOf(
                                "iykhy",
                                new JobService()
                                    .withEndpoint("riglaec")
                                    .withJobServiceType("mldgxobfirc")
                                    .withPort(563418466)
                                    .withProperties(mapOf()))));
        model = BinaryData.fromObject(model).toObject(JobBaseInner.class);
        Assertions.assertEquals("jlb", model.properties().description());
        Assertions.assertEquals("vkjlmxhom", model.properties().properties().get("ynhdwdigum"));
        Assertions.assertEquals("uvvfonkp", model.properties().tags().get("hqyikvy"));
        Assertions.assertEquals("rr", model.properties().componentId());
        Assertions.assertEquals("pglydz", model.properties().computeId());
        Assertions.assertEquals("rvqeevtoepryutn", model.properties().displayName());
        Assertions.assertEquals("tpzdmovzvfvaawzq", model.properties().experimentName());
        Assertions.assertEquals(false, model.properties().isArchived());
        Assertions.assertEquals("riglaec", model.properties().services().get("iykhy").endpoint());
        Assertions.assertEquals("mldgxobfirc", model.properties().services().get("iykhy").jobServiceType());
        Assertions.assertEquals(563418466, model.properties().services().get("iykhy").port());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
