// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ClassificationPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageClassification;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsClassification;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettingsClassification;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageClassificationTests {
    @Test
    public void testDeserialize() {
        ImageClassification model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"ImageClassification\",\"primaryMetric\":\"NormMacroRecall\",\"modelSettings\":{\"trainingCropSize\":1469942363,\"validationCropSize\":1011058205,\"validationResizeSize\":1075915310,\"weightedLoss\":124820924,\"advancedSettings\":\"pkxkdtxfk\",\"amsGradient\":false,\"augmentations\":\"vtwknvgmmbugt\",\"beta1\":61.775284,\"beta2\":81.872955,\"checkpointFrequency\":1101828345,\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"mode\":\"Download\",\"uri\":\"eatgroeshoy\",\"description\":\"cbyfqxkf\"},\"checkpointRunId\":\"ytehqpuvjmvqmt\",\"distributed\":true,\"earlyStopping\":false,\"earlyStoppingDelay\":1887432105,\"earlyStoppingPatience\":467665748,\"enableOnnxNormalization\":false,\"evaluationFrequency\":3349790,\"gradientAccumulationStep\":1535933955,\"layersToFreeze\":732502558,\"learningRate\":66.81651,\"learningRateScheduler\":\"None\",\"modelName\":\"req\",\"momentum\":79.494675,\"nesterov\":true,\"numberOfEpochs\":1038421069,\"numberOfWorkers\":443763123,\"optimizer\":\"Sgd\",\"randomSeed\":530847681,\"stepLRGamma\":43.5296,\"stepLRStepSize\":624014126,\"trainingBatchSize\":716161641,\"validationBatchSize\":378186609,\"warmupCosineLRCycles\":12.769455,\"warmupCosineLRWarmupEpochs\":2090071454,\"weightDecay\":19.593626},\"searchSpace\":[{\"trainingCropSize\":\"sybwptdaca\",\"validationCropSize\":\"vlf\",\"validationResizeSize\":\"ymtpo\",\"weightedLoss\":\"enazerohzrsqals\",\"amsGradient\":\"dnwqapfg\",\"augmentations\":\"pcvessm\",\"beta1\":\"h\",\"beta2\":\"uipldqq\",\"distributed\":\"ekvalblhtjq\",\"earlyStopping\":\"yvwehtaemxh\",\"earlyStoppingDelay\":\"ysev\",\"earlyStoppingPatience\":\"xivzrrry\",\"enableOnnxNormalization\":\"imipskdyzatvfuz\",\"evaluationFrequency\":\"ftjvvruxwigsye\",\"gradientAccumulationStep\":\"qdsmjtg\",\"layersToFreeze\":\"gdgkki\",\"learningRate\":\"plkcsm\",\"learningRateScheduler\":\"hwtbbaedorvvm\",\"modelName\":\"loyg\",\"momentum\":\"gwumgxdgdhpa\",\"nesterov\":\"dexjddvjs\",\"numberOfEpochs\":\"wotmmwllcolsrsxa\",\"numberOfWorkers\":\"efh\",\"optimizer\":\"cgjokjljnhvlq\",\"randomSeed\":\"ek\",\"stepLRGamma\":\"eksnbksdqhjvyk\",\"stepLRStepSize\":\"eslk\",\"trainingBatchSize\":\"ustcpoq\",\"validationBatchSize\":\"vnwqjwgo\",\"warmupCosineLRCycles\":\"lejjjkxy\",\"warmupCosineLRWarmupEpochs\":\"fdb\",\"weightDecay\":\"bztensvkzykjtj\"},{\"trainingCropSize\":\"sxfwushcdp\",\"validationCropSize\":\"pn\",\"validationResizeSize\":\"mgjfbpkuwxeoio\",\"weightedLoss\":\"izfavkjzwf\",\"amsGradient\":\"yay\",\"augmentations\":\"mfzsbf\",\"beta1\":\"rzx\",\"beta2\":\"ewsrsxkrplbjaze\",\"distributed\":\"w\",\"earlyStopping\":\"yoyp\",\"earlyStoppingDelay\":\"hbrnnhjx\",\"earlyStoppingPatience\":\"wjh\",\"enableOnnxNormalization\":\"biwetpo\",\"evaluationFrequency\":\"c\",\"gradientAccumulationStep\":\"iqyhgfse\",\"layersToFreeze\":\"lexbsf\",\"learningRate\":\"dynojpziuwfb\",\"learningRateScheduler\":\"kdtnhqsyclj\",\"modelName\":\"lpkpbafvafhl\",\"momentum\":\"lc\",\"nesterov\":\"evxrhyz\",\"numberOfEpochs\":\"wrso\",\"numberOfWorkers\":\"ltdb\",\"optimizer\":\"irrhv\",\"randomSeed\":\"nracw\",\"stepLRGamma\":\"qigtuujwouhdaws\",\"stepLRStepSize\":\"rb\",\"trainingBatchSize\":\"xsjybvitvqk\",\"validationBatchSize\":\"az\",\"warmupCosineLRCycles\":\"mtggmu\",\"warmupCosineLRWarmupEpochs\":\"ch\",\"weightDecay\":\"fnkf\"},{\"trainingCropSize\":\"lv\",\"validationCropSize\":\"oakizvoai\",\"validationResizeSize\":\"a\",\"weightedLoss\":\"nuwiguyxlykwph\",\"amsGradient\":\"zc\",\"augmentations\":\"hmpejtlkexaonw\",\"beta1\":\"kcq\",\"beta2\":\"xhxknlc\",\"distributed\":\"mmkyu\",\"earlyStopping\":\"jubyqjfkakfq\",\"earlyStoppingDelay\":\"kemyil\",\"earlyStoppingPatience\":\"dxjascowvfdj\",\"enableOnnxNormalization\":\"dxphlk\",\"evaluationFrequency\":\"nmgzvyfijdkzuqnw\",\"gradientAccumulationStep\":\"thuqolyahluq\",\"layersToFreeze\":\"ulsutrjbhxy\",\"learningRate\":\"hyqezvqq\",\"learningRateScheduler\":\"drftbcvexreuquo\",\"modelName\":\"ljvfwhreagk\",\"momentum\":\"xv\",\"nesterov\":\"tvbczsulm\",\"numberOfEpochs\":\"glmep\",\"numberOfWorkers\":\"fs\",\"optimizer\":\"kgsangpszng\",\"randomSeed\":\"p\",\"stepLRGamma\":\"lkvec\",\"stepLRStepSize\":\"jcngoadyed\",\"trainingBatchSize\":\"rgjfoknubnoi\",\"validationBatchSize\":\"kpztrgd\",\"warmupCosineLRCycles\":\"vcoqraswugyxpqi\",\"warmupCosineLRWarmupEpochs\":\"eialwvskb\",\"weightDecay\":\"z\"}],\"limitSettings\":{\"maxConcurrentTrials\":449026973,\"maxTrials\":386534389,\"timeout\":\"PT57H25M54S\"},\"sweepSettings\":{\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"delayEvaluation\":1409246256,\"evaluationInterval\":37097925},\"samplingAlgorithm\":\"Bayesian\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"EvalDownload\",\"uri\":\"xzak\",\"description\":\"jkmvbi\"},\"validationDataSize\":81.70537185552443,\"logVerbosity\":\"Critical\",\"targetColumnName\":\"vovjufycsjmlbe\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"Download\",\"uri\":\"jiriuxeg\",\"description\":\"ortudawlpjfel\"}}")
                .toObject(ImageClassification.class);
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.logVerbosity());
        Assertions.assertEquals("vovjufycsjmlbe", model.targetColumnName());
        Assertions.assertEquals("ortudawlpjfel", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("jiriuxeg", model.trainingData().uri());
        Assertions.assertEquals(ClassificationPrimaryMetrics.NORM_MACRO_RECALL, model.primaryMetric());
        Assertions.assertEquals("pkxkdtxfk", model.modelSettings().advancedSettings());
        Assertions.assertEquals(false, model.modelSettings().amsGradient());
        Assertions.assertEquals("vtwknvgmmbugt", model.modelSettings().augmentations());
        Assertions.assertEquals(61.775284F, model.modelSettings().beta1());
        Assertions.assertEquals(81.872955F, model.modelSettings().beta2());
        Assertions.assertEquals(1101828345, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("cbyfqxkf", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("eatgroeshoy", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("ytehqpuvjmvqmt", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(false, model.modelSettings().earlyStopping());
        Assertions.assertEquals(1887432105, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(467665748, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(false, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(3349790, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(1535933955, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(732502558, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(66.81651F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.NONE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("req", model.modelSettings().modelName());
        Assertions.assertEquals(79.494675F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(1038421069, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(443763123, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.SGD, model.modelSettings().optimizer());
        Assertions.assertEquals(530847681, model.modelSettings().randomSeed());
        Assertions.assertEquals(43.5296F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(624014126, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(716161641, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(378186609, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(12.769455F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(2090071454, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(19.593626F, model.modelSettings().weightDecay());
        Assertions.assertEquals(1469942363, model.modelSettings().trainingCropSize());
        Assertions.assertEquals(1011058205, model.modelSettings().validationCropSize());
        Assertions.assertEquals(1075915310, model.modelSettings().validationResizeSize());
        Assertions.assertEquals(124820924, model.modelSettings().weightedLoss());
        Assertions.assertEquals("dnwqapfg", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("pcvessm", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("h", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("uipldqq", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("ekvalblhtjq", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("yvwehtaemxh", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("ysev", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("xivzrrry", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("imipskdyzatvfuz", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("ftjvvruxwigsye", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("qdsmjtg", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("gdgkki", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("plkcsm", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("hwtbbaedorvvm", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("loyg", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("gwumgxdgdhpa", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("dexjddvjs", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("wotmmwllcolsrsxa", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("efh", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("cgjokjljnhvlq", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("ek", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("eksnbksdqhjvyk", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("eslk", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("ustcpoq", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("vnwqjwgo", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("lejjjkxy", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("fdb", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("bztensvkzykjtj", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("sybwptdaca", model.searchSpace().get(0).trainingCropSize());
        Assertions.assertEquals("vlf", model.searchSpace().get(0).validationCropSize());
        Assertions.assertEquals("ymtpo", model.searchSpace().get(0).validationResizeSize());
        Assertions.assertEquals("enazerohzrsqals", model.searchSpace().get(0).weightedLoss());
        Assertions.assertEquals(449026973, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(386534389, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT57H25M54S"), model.limitSettings().timeout());
        Assertions.assertEquals(1409246256, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(37097925, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("jkmvbi", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.validationData().mode());
        Assertions.assertEquals("xzak", model.validationData().uri());
        Assertions.assertEquals(81.70537185552443D, model.validationDataSize());
    }

    @Test
    public void testSerialize() {
        ImageClassification model =
            new ImageClassification()
                .withLogVerbosity(LogVerbosity.CRITICAL)
                .withTargetColumnName("vovjufycsjmlbe")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("ortudawlpjfel")
                        .withMode(InputDeliveryMode.DOWNLOAD)
                        .withUri("jiriuxeg"))
                .withPrimaryMetric(ClassificationPrimaryMetrics.NORM_MACRO_RECALL)
                .withModelSettings(
                    new ImageModelSettingsClassification()
                        .withAdvancedSettings("pkxkdtxfk")
                        .withAmsGradient(false)
                        .withAugmentations("vtwknvgmmbugt")
                        .withBeta1(61.775284F)
                        .withBeta2(81.872955F)
                        .withCheckpointFrequency(1101828345)
                        .withCheckpointModel(
                            new MLFlowModelJobInput()
                                .withDescription("cbyfqxkf")
                                .withMode(InputDeliveryMode.DOWNLOAD)
                                .withUri("eatgroeshoy"))
                        .withCheckpointRunId("ytehqpuvjmvqmt")
                        .withDistributed(true)
                        .withEarlyStopping(false)
                        .withEarlyStoppingDelay(1887432105)
                        .withEarlyStoppingPatience(467665748)
                        .withEnableOnnxNormalization(false)
                        .withEvaluationFrequency(3349790)
                        .withGradientAccumulationStep(1535933955)
                        .withLayersToFreeze(732502558)
                        .withLearningRate(66.81651F)
                        .withLearningRateScheduler(LearningRateScheduler.NONE)
                        .withModelName("req")
                        .withMomentum(79.494675F)
                        .withNesterov(true)
                        .withNumberOfEpochs(1038421069)
                        .withNumberOfWorkers(443763123)
                        .withOptimizer(StochasticOptimizer.SGD)
                        .withRandomSeed(530847681)
                        .withStepLRGamma(43.5296F)
                        .withStepLRStepSize(624014126)
                        .withTrainingBatchSize(716161641)
                        .withValidationBatchSize(378186609)
                        .withWarmupCosineLRCycles(12.769455F)
                        .withWarmupCosineLRWarmupEpochs(2090071454)
                        .withWeightDecay(19.593626F)
                        .withTrainingCropSize(1469942363)
                        .withValidationCropSize(1011058205)
                        .withValidationResizeSize(1075915310)
                        .withWeightedLoss(124820924))
                .withSearchSpace(
                    Arrays
                        .asList(
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("dnwqapfg")
                                .withAugmentations("pcvessm")
                                .withBeta1("h")
                                .withBeta2("uipldqq")
                                .withDistributed("ekvalblhtjq")
                                .withEarlyStopping("yvwehtaemxh")
                                .withEarlyStoppingDelay("ysev")
                                .withEarlyStoppingPatience("xivzrrry")
                                .withEnableOnnxNormalization("imipskdyzatvfuz")
                                .withEvaluationFrequency("ftjvvruxwigsye")
                                .withGradientAccumulationStep("qdsmjtg")
                                .withLayersToFreeze("gdgkki")
                                .withLearningRate("plkcsm")
                                .withLearningRateScheduler("hwtbbaedorvvm")
                                .withModelName("loyg")
                                .withMomentum("gwumgxdgdhpa")
                                .withNesterov("dexjddvjs")
                                .withNumberOfEpochs("wotmmwllcolsrsxa")
                                .withNumberOfWorkers("efh")
                                .withOptimizer("cgjokjljnhvlq")
                                .withRandomSeed("ek")
                                .withStepLRGamma("eksnbksdqhjvyk")
                                .withStepLRStepSize("eslk")
                                .withTrainingBatchSize("ustcpoq")
                                .withValidationBatchSize("vnwqjwgo")
                                .withWarmupCosineLRCycles("lejjjkxy")
                                .withWarmupCosineLRWarmupEpochs("fdb")
                                .withWeightDecay("bztensvkzykjtj")
                                .withTrainingCropSize("sybwptdaca")
                                .withValidationCropSize("vlf")
                                .withValidationResizeSize("ymtpo")
                                .withWeightedLoss("enazerohzrsqals"),
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("yay")
                                .withAugmentations("mfzsbf")
                                .withBeta1("rzx")
                                .withBeta2("ewsrsxkrplbjaze")
                                .withDistributed("w")
                                .withEarlyStopping("yoyp")
                                .withEarlyStoppingDelay("hbrnnhjx")
                                .withEarlyStoppingPatience("wjh")
                                .withEnableOnnxNormalization("biwetpo")
                                .withEvaluationFrequency("c")
                                .withGradientAccumulationStep("iqyhgfse")
                                .withLayersToFreeze("lexbsf")
                                .withLearningRate("dynojpziuwfb")
                                .withLearningRateScheduler("kdtnhqsyclj")
                                .withModelName("lpkpbafvafhl")
                                .withMomentum("lc")
                                .withNesterov("evxrhyz")
                                .withNumberOfEpochs("wrso")
                                .withNumberOfWorkers("ltdb")
                                .withOptimizer("irrhv")
                                .withRandomSeed("nracw")
                                .withStepLRGamma("qigtuujwouhdaws")
                                .withStepLRStepSize("rb")
                                .withTrainingBatchSize("xsjybvitvqk")
                                .withValidationBatchSize("az")
                                .withWarmupCosineLRCycles("mtggmu")
                                .withWarmupCosineLRWarmupEpochs("ch")
                                .withWeightDecay("fnkf")
                                .withTrainingCropSize("sxfwushcdp")
                                .withValidationCropSize("pn")
                                .withValidationResizeSize("mgjfbpkuwxeoio")
                                .withWeightedLoss("izfavkjzwf"),
                            new ImageModelDistributionSettingsClassification()
                                .withAmsGradient("zc")
                                .withAugmentations("hmpejtlkexaonw")
                                .withBeta1("kcq")
                                .withBeta2("xhxknlc")
                                .withDistributed("mmkyu")
                                .withEarlyStopping("jubyqjfkakfq")
                                .withEarlyStoppingDelay("kemyil")
                                .withEarlyStoppingPatience("dxjascowvfdj")
                                .withEnableOnnxNormalization("dxphlk")
                                .withEvaluationFrequency("nmgzvyfijdkzuqnw")
                                .withGradientAccumulationStep("thuqolyahluq")
                                .withLayersToFreeze("ulsutrjbhxy")
                                .withLearningRate("hyqezvqq")
                                .withLearningRateScheduler("drftbcvexreuquo")
                                .withModelName("ljvfwhreagk")
                                .withMomentum("xv")
                                .withNesterov("tvbczsulm")
                                .withNumberOfEpochs("glmep")
                                .withNumberOfWorkers("fs")
                                .withOptimizer("kgsangpszng")
                                .withRandomSeed("p")
                                .withStepLRGamma("lkvec")
                                .withStepLRStepSize("jcngoadyed")
                                .withTrainingBatchSize("rgjfoknubnoi")
                                .withValidationBatchSize("kpztrgd")
                                .withWarmupCosineLRCycles("vcoqraswugyxpqi")
                                .withWarmupCosineLRWarmupEpochs("eialwvskb")
                                .withWeightDecay("z")
                                .withTrainingCropSize("lv")
                                .withValidationCropSize("oakizvoai")
                                .withValidationResizeSize("a")
                                .withWeightedLoss("nuwiguyxlykwph")))
                .withLimitSettings(
                    new ImageLimitSettings()
                        .withMaxConcurrentTrials(449026973)
                        .withMaxTrials(386534389)
                        .withTimeout(Duration.parse("PT57H25M54S")))
                .withSweepSettings(
                    new ImageSweepSettings()
                        .withEarlyTermination(
                            new EarlyTerminationPolicy()
                                .withDelayEvaluation(1409246256)
                                .withEvaluationInterval(37097925))
                        .withSamplingAlgorithm(SamplingAlgorithmType.BAYESIAN))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("jkmvbi")
                        .withMode(InputDeliveryMode.EVAL_DOWNLOAD)
                        .withUri("xzak"))
                .withValidationDataSize(81.70537185552443D);
        model = BinaryData.fromObject(model).toObject(ImageClassification.class);
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.logVerbosity());
        Assertions.assertEquals("vovjufycsjmlbe", model.targetColumnName());
        Assertions.assertEquals("ortudawlpjfel", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("jiriuxeg", model.trainingData().uri());
        Assertions.assertEquals(ClassificationPrimaryMetrics.NORM_MACRO_RECALL, model.primaryMetric());
        Assertions.assertEquals("pkxkdtxfk", model.modelSettings().advancedSettings());
        Assertions.assertEquals(false, model.modelSettings().amsGradient());
        Assertions.assertEquals("vtwknvgmmbugt", model.modelSettings().augmentations());
        Assertions.assertEquals(61.775284F, model.modelSettings().beta1());
        Assertions.assertEquals(81.872955F, model.modelSettings().beta2());
        Assertions.assertEquals(1101828345, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("cbyfqxkf", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("eatgroeshoy", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("ytehqpuvjmvqmt", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(true, model.modelSettings().distributed());
        Assertions.assertEquals(false, model.modelSettings().earlyStopping());
        Assertions.assertEquals(1887432105, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(467665748, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(false, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(3349790, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(1535933955, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(732502558, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(66.81651F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.NONE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("req", model.modelSettings().modelName());
        Assertions.assertEquals(79.494675F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(1038421069, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(443763123, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.SGD, model.modelSettings().optimizer());
        Assertions.assertEquals(530847681, model.modelSettings().randomSeed());
        Assertions.assertEquals(43.5296F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(624014126, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(716161641, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(378186609, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(12.769455F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(2090071454, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(19.593626F, model.modelSettings().weightDecay());
        Assertions.assertEquals(1469942363, model.modelSettings().trainingCropSize());
        Assertions.assertEquals(1011058205, model.modelSettings().validationCropSize());
        Assertions.assertEquals(1075915310, model.modelSettings().validationResizeSize());
        Assertions.assertEquals(124820924, model.modelSettings().weightedLoss());
        Assertions.assertEquals("dnwqapfg", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("pcvessm", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("h", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("uipldqq", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("ekvalblhtjq", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("yvwehtaemxh", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("ysev", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("xivzrrry", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("imipskdyzatvfuz", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("ftjvvruxwigsye", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("qdsmjtg", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("gdgkki", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("plkcsm", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("hwtbbaedorvvm", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("loyg", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("gwumgxdgdhpa", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("dexjddvjs", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("wotmmwllcolsrsxa", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("efh", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("cgjokjljnhvlq", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("ek", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("eksnbksdqhjvyk", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("eslk", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("ustcpoq", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("vnwqjwgo", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("lejjjkxy", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("fdb", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("bztensvkzykjtj", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("sybwptdaca", model.searchSpace().get(0).trainingCropSize());
        Assertions.assertEquals("vlf", model.searchSpace().get(0).validationCropSize());
        Assertions.assertEquals("ymtpo", model.searchSpace().get(0).validationResizeSize());
        Assertions.assertEquals("enazerohzrsqals", model.searchSpace().get(0).weightedLoss());
        Assertions.assertEquals(449026973, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(386534389, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT57H25M54S"), model.limitSettings().timeout());
        Assertions.assertEquals(1409246256, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(37097925, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("jkmvbi", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.validationData().mode());
        Assertions.assertEquals("xzak", model.validationData().uri());
        Assertions.assertEquals(81.70537185552443D, model.validationDataSize());
    }
}
