// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.BuildContext;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersionProperties;
import com.azure.resourcemanager.machinelearning.models.InferenceContainerProperties;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import com.azure.resourcemanager.machinelearning.models.Route;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class EnvironmentVersionPropertiesTests {
    @Test
    public void testDeserialize() {
        EnvironmentVersionProperties model =
            BinaryData
                .fromString(
                    "{\"autoRebuild\":\"Disabled\",\"build\":{\"contextUri\":\"cybvpayakkudzpxg\",\"dockerfilePath\":\"plmag\"},\"condaFile\":\"cyohpfkyrkdbd\",\"environmentType\":\"UserCreated\",\"image\":\"sjkmnwqj\",\"inferenceConfig\":{\"livenessRoute\":{\"path\":\"aiy\",\"port\":2013793902},\"readinessRoute\":{\"path\":\"viacegfnmntfpmv\",\"port\":1245666604},\"scoringRoute\":{\"path\":\"fnczdwvvbalx\",\"port\":234603951}},\"osType\":\"Linux\",\"isAnonymous\":true,\"isArchived\":false,\"description\":\"zevwrdnhfukuv\",\"properties\":{\"uluqypfc\":\"swsmys\",\"mfpjbabw\":\"lerchpq\",\"sspuunnoxyhkx\":\"dfc\"},\"tags\":{\"mdjvlpj\":\"drihpfhoqcaaewda\",\"msgeivsiykzk\":\"xkzb\"}}")
                .toObject(EnvironmentVersionProperties.class);
        Assertions.assertEquals("zevwrdnhfukuv", model.description());
        Assertions.assertEquals("swsmys", model.properties().get("uluqypfc"));
        Assertions.assertEquals("drihpfhoqcaaewda", model.tags().get("mdjvlpj"));
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals(AutoRebuildSetting.DISABLED, model.autoRebuild());
        Assertions.assertEquals("cybvpayakkudzpxg", model.build().contextUri());
        Assertions.assertEquals("plmag", model.build().dockerfilePath());
        Assertions.assertEquals("cyohpfkyrkdbd", model.condaFile());
        Assertions.assertEquals("sjkmnwqj", model.image());
        Assertions.assertEquals("aiy", model.inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(2013793902, model.inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("viacegfnmntfpmv", model.inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(1245666604, model.inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("fnczdwvvbalx", model.inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(234603951, model.inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(OperatingSystemType.LINUX, model.osType());
    }

    @Test
    public void testSerialize() {
        EnvironmentVersionProperties model =
            new EnvironmentVersionProperties()
                .withDescription("zevwrdnhfukuv")
                .withProperties(mapOf("uluqypfc", "swsmys", "mfpjbabw", "lerchpq", "sspuunnoxyhkx", "dfc"))
                .withTags(mapOf("mdjvlpj", "drihpfhoqcaaewda", "msgeivsiykzk", "xkzb"))
                .withIsAnonymous(true)
                .withIsArchived(false)
                .withAutoRebuild(AutoRebuildSetting.DISABLED)
                .withBuild(new BuildContext().withContextUri("cybvpayakkudzpxg").withDockerfilePath("plmag"))
                .withCondaFile("cyohpfkyrkdbd")
                .withImage("sjkmnwqj")
                .withInferenceConfig(
                    new InferenceContainerProperties()
                        .withLivenessRoute(new Route().withPath("aiy").withPort(2013793902))
                        .withReadinessRoute(new Route().withPath("viacegfnmntfpmv").withPort(1245666604))
                        .withScoringRoute(new Route().withPath("fnczdwvvbalx").withPort(234603951)))
                .withOsType(OperatingSystemType.LINUX);
        model = BinaryData.fromObject(model).toObject(EnvironmentVersionProperties.class);
        Assertions.assertEquals("zevwrdnhfukuv", model.description());
        Assertions.assertEquals("swsmys", model.properties().get("uluqypfc"));
        Assertions.assertEquals("drihpfhoqcaaewda", model.tags().get("mdjvlpj"));
        Assertions.assertEquals(true, model.isAnonymous());
        Assertions.assertEquals(false, model.isArchived());
        Assertions.assertEquals(AutoRebuildSetting.DISABLED, model.autoRebuild());
        Assertions.assertEquals("cybvpayakkudzpxg", model.build().contextUri());
        Assertions.assertEquals("plmag", model.build().dockerfilePath());
        Assertions.assertEquals("cyohpfkyrkdbd", model.condaFile());
        Assertions.assertEquals("sjkmnwqj", model.image());
        Assertions.assertEquals("aiy", model.inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(2013793902, model.inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("viacegfnmntfpmv", model.inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(1245666604, model.inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("fnczdwvvbalx", model.inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(234603951, model.inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(OperatingSystemType.LINUX, model.osType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
