// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.BuildContext;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersionProperties;
import com.azure.resourcemanager.machinelearning.models.InferenceContainerProperties;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import com.azure.resourcemanager.machinelearning.models.Route;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnvironmentVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnvironmentVersionProperties model = BinaryData.fromString(
            "{\"environmentType\":\"UserCreated\",\"image\":\"jbnkpp\",\"condaFile\":\"nenlsvxeizzg\",\"build\":{\"contextUri\":\"lnsrmffe\",\"dockerfilePath\":\"xcktpiymerteeamm\"},\"osType\":\"Windows\",\"inferenceConfig\":{\"livenessRoute\":{\"path\":\"kkzddrtkgdojbmx\",\"port\":37780018},\"readinessRoute\":{\"path\":\"refdee\",\"port\":2124341165},\"scoringRoute\":{\"path\":\"cuijpxt\",\"port\":214563643}},\"autoRebuild\":\"Disabled\",\"provisioningState\":\"Creating\",\"stage\":\"ujwsawddjibabxvi\",\"isArchived\":true,\"isAnonymous\":false,\"description\":\"eexavo\",\"tags\":{\"gsfjac\":\"glecdmdqbwpypq\",\"d\":\"slhhxudbxv\",\"ud\":\"tnsi\"},\"properties\":{\"kdlpa\":\"mes\"}}")
            .toObject(EnvironmentVersionProperties.class);
        Assertions.assertEquals("eexavo", model.description());
        Assertions.assertEquals("glecdmdqbwpypq", model.tags().get("gsfjac"));
        Assertions.assertEquals("mes", model.properties().get("kdlpa"));
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals("jbnkpp", model.image());
        Assertions.assertEquals("nenlsvxeizzg", model.condaFile());
        Assertions.assertEquals("lnsrmffe", model.build().contextUri());
        Assertions.assertEquals("xcktpiymerteeamm", model.build().dockerfilePath());
        Assertions.assertEquals(OperatingSystemType.WINDOWS, model.osType());
        Assertions.assertEquals("kkzddrtkgdojbmx", model.inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(37780018, model.inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("refdee", model.inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(2124341165, model.inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("cuijpxt", model.inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(214563643, model.inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(AutoRebuildSetting.DISABLED, model.autoRebuild());
        Assertions.assertEquals("ujwsawddjibabxvi", model.stage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnvironmentVersionProperties model = new EnvironmentVersionProperties().withDescription("eexavo")
            .withTags(mapOf("gsfjac", "glecdmdqbwpypq", "d", "slhhxudbxv", "ud", "tnsi"))
            .withProperties(mapOf("kdlpa", "mes"))
            .withIsArchived(true)
            .withIsAnonymous(false)
            .withImage("jbnkpp")
            .withCondaFile("nenlsvxeizzg")
            .withBuild(new BuildContext().withContextUri("lnsrmffe").withDockerfilePath("xcktpiymerteeamm"))
            .withOsType(OperatingSystemType.WINDOWS)
            .withInferenceConfig(new InferenceContainerProperties()
                .withLivenessRoute(new Route().withPath("kkzddrtkgdojbmx").withPort(37780018))
                .withReadinessRoute(new Route().withPath("refdee").withPort(2124341165))
                .withScoringRoute(new Route().withPath("cuijpxt").withPort(214563643)))
            .withAutoRebuild(AutoRebuildSetting.DISABLED)
            .withStage("ujwsawddjibabxvi");
        model = BinaryData.fromObject(model).toObject(EnvironmentVersionProperties.class);
        Assertions.assertEquals("eexavo", model.description());
        Assertions.assertEquals("glecdmdqbwpypq", model.tags().get("gsfjac"));
        Assertions.assertEquals("mes", model.properties().get("kdlpa"));
        Assertions.assertEquals(true, model.isArchived());
        Assertions.assertEquals(false, model.isAnonymous());
        Assertions.assertEquals("jbnkpp", model.image());
        Assertions.assertEquals("nenlsvxeizzg", model.condaFile());
        Assertions.assertEquals("lnsrmffe", model.build().contextUri());
        Assertions.assertEquals("xcktpiymerteeamm", model.build().dockerfilePath());
        Assertions.assertEquals(OperatingSystemType.WINDOWS, model.osType());
        Assertions.assertEquals("kkzddrtkgdojbmx", model.inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(37780018, model.inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("refdee", model.inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(2124341165, model.inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("cuijpxt", model.inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(214563643, model.inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(AutoRebuildSetting.DISABLED, model.autoRebuild());
        Assertions.assertEquals("ujwsawddjibabxvi", model.stage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
