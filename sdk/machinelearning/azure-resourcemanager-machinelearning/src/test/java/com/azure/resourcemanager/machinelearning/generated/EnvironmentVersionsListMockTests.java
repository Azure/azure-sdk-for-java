// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.AutoRebuildSetting;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVersion;
import com.azure.resourcemanager.machinelearning.models.ListViewType;
import com.azure.resourcemanager.machinelearning.models.OperatingSystemType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EnvironmentVersionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"environmentType\":\"UserCreated\",\"image\":\"aljomgzorprrap\",\"condaFile\":\"bjenylgebrsnvof\",\"build\":{\"contextUri\":\"zvbploazc\",\"dockerfilePath\":\"hgermm\"},\"osType\":\"Linux\",\"inferenceConfig\":{\"livenessRoute\":{\"path\":\"uipsoawxugpu\",\"port\":1995117934},\"readinessRoute\":{\"path\":\"kwxzmuzg\",\"port\":1007623800},\"scoringRoute\":{\"path\":\"ygpbhauhej\",\"port\":803038260}},\"autoRebuild\":\"Disabled\",\"provisioningState\":\"Deleting\",\"stage\":\"xxzxwrnqwdjvlw\",\"isArchived\":false,\"isAnonymous\":false,\"description\":\"wsfxqc\",\"tags\":{\"cbciu\":\"ez\",\"jguzsyfwamhmeo\":\"gakmxgwwmavllp\",\"nzcufysalbjfkje\":\"xbzagwnompvyis\"},\"properties\":{\"ridipw\":\"zmh\",\"jqhjenbdupfp\":\"zjnnmpi\",\"rsfghyye\":\"losadjffl\"}},\"id\":\"adzu\",\"name\":\"dcccls\",\"type\":\"flcxxp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<EnvironmentVersion> response = manager.environmentVersions()
            .list("iyapifcjl", "ugnrzowc", "r", "afqsozawqxnhlv", 633579364, "ugwxdwtfmfjk", ListViewType.ACTIVE_ONLY,
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wsfxqc", response.iterator().next().properties().description());
        Assertions.assertEquals("ez", response.iterator().next().properties().tags().get("cbciu"));
        Assertions.assertEquals("zmh", response.iterator().next().properties().properties().get("ridipw"));
        Assertions.assertEquals(false, response.iterator().next().properties().isArchived());
        Assertions.assertEquals(false, response.iterator().next().properties().isAnonymous());
        Assertions.assertEquals("aljomgzorprrap", response.iterator().next().properties().image());
        Assertions.assertEquals("bjenylgebrsnvof", response.iterator().next().properties().condaFile());
        Assertions.assertEquals("zvbploazc", response.iterator().next().properties().build().contextUri());
        Assertions.assertEquals("hgermm", response.iterator().next().properties().build().dockerfilePath());
        Assertions.assertEquals(OperatingSystemType.LINUX, response.iterator().next().properties().osType());
        Assertions.assertEquals("uipsoawxugpu",
            response.iterator().next().properties().inferenceConfig().livenessRoute().path());
        Assertions.assertEquals(1995117934,
            response.iterator().next().properties().inferenceConfig().livenessRoute().port());
        Assertions.assertEquals("kwxzmuzg",
            response.iterator().next().properties().inferenceConfig().readinessRoute().path());
        Assertions.assertEquals(1007623800,
            response.iterator().next().properties().inferenceConfig().readinessRoute().port());
        Assertions.assertEquals("ygpbhauhej",
            response.iterator().next().properties().inferenceConfig().scoringRoute().path());
        Assertions.assertEquals(803038260,
            response.iterator().next().properties().inferenceConfig().scoringRoute().port());
        Assertions.assertEquals(AutoRebuildSetting.DISABLED, response.iterator().next().properties().autoRebuild());
        Assertions.assertEquals("xxzxwrnqwdjvlw", response.iterator().next().properties().stage());
    }
}
