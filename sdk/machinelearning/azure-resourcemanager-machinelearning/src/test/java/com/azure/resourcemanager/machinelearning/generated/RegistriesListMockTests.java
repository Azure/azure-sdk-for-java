// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.Registry;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistriesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"f06ba3fd-f0de-45c0-8127-65e48e1658c3\",\"tenantId\":\"4ae98fa0-e0a9-4ed1-bf62-923f3adc4c2a\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ht\":{\"principalId\":\"60bcf70a-aad0-4e87-bf1e-e7b10ba23821\",\"clientId\":\"3dd83c91-7ea5-498e-bd86-6d06a498d8b3\"},\"rztbyulkoepssoq\":{\"principalId\":\"aeaed0af-fa36-4dee-aa18-57ca22f72197\",\"clientId\":\"8ff443e8-d2d4-44fd-806e-d103ac316b91\"}}},\"kind\":\"bygrqcidiwkxi\",\"properties\":{\"discoveryUrl\":\"iqxlxoksyypftrdi\",\"intellectualPropertyPublisher\":\"trbq\",\"managedResourceGroup\":{\"resourceId\":\"kliop\"},\"mlFlowRegistryUri\":\"pkatccetyyvx\",\"registryPrivateEndpointConnections\":[{\"id\":\"bwnsd\",\"location\":\"irt\",\"properties\":{\"groupIds\":[\"pjeegz\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"aqclepck\"}}],\"publicNetworkAccess\":\"wuthfwp\",\"regionDetails\":[{\"acrDetails\":[{},{}],\"location\":\"ljeh\",\"storageAccountDetails\":[{},{},{}]},{\"acrDetails\":[{}],\"location\":\"fn\",\"storageAccountDetails\":[{}]},{\"acrDetails\":[{},{}],\"location\":\"kvnapxhtqwsdd\",\"storageAccountDetails\":[{},{},{}]}]},\"sku\":{\"name\":\"ubfllfkeubziibua\",\"tier\":\"Basic\",\"size\":\"whvnj\",\"family\":\"uzudkqoeouk\",\"capacity\":571833852},\"location\":\"gbkzqbomfh\",\"tags\":{\"wljatvfddqs\":\"sklmyfhclxwedet\",\"cwbxxvcvekqjdrum\":\"duttqjtszqexc\"},\"id\":\"vkdwwqhhlfvmw\",\"name\":\"yarswsvtzotmwxqd\",\"type\":\"bdanfexlawkeqjhz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Registry> response = manager.registries().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gbkzqbomfh", response.iterator().next().location());
        Assertions.assertEquals("sklmyfhclxwedet", response.iterator().next().tags().get("wljatvfddqs"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("bygrqcidiwkxi", response.iterator().next().kind());
        Assertions.assertEquals("ubfllfkeubziibua", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.iterator().next().sku().tier());
        Assertions.assertEquals("whvnj", response.iterator().next().sku().size());
        Assertions.assertEquals("uzudkqoeouk", response.iterator().next().sku().family());
        Assertions.assertEquals(571833852, response.iterator().next().sku().capacity());
        Assertions.assertEquals("iqxlxoksyypftrdi", response.iterator().next().discoveryUrl());
        Assertions.assertEquals("trbq", response.iterator().next().intellectualPropertyPublisher());
        Assertions.assertEquals("kliop", response.iterator().next().managedResourceGroup().resourceId());
        Assertions.assertEquals("pkatccetyyvx", response.iterator().next().mlFlowRegistryUri());
        Assertions.assertEquals("bwnsd", response.iterator().next().registryPrivateEndpointConnections().get(0).id());
        Assertions.assertEquals("irt",
            response.iterator().next().registryPrivateEndpointConnections().get(0).location());
        Assertions.assertEquals("pjeegz",
            response.iterator().next().registryPrivateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("aqclepck",
            response.iterator().next().registryPrivateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("wuthfwp", response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("ljeh", response.iterator().next().regionDetails().get(0).location());
    }
}
