// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.Registry;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistriesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"9434c079-d0ae-4331-9b62-bec292ff8172\",\"tenantId\":\"1e7e30fe-64f3-4a09-bd77-1caf731760aa\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"trbq\":{\"principalId\":\"99cfc218-6b07-4dc8-940b-3bd958de9722\",\"clientId\":\"164a1e67-fb20-4e86-8758-81b0629b5065\"},\"kliop\":{\"principalId\":\"843da938-0b4a-45f1-acb0-d3ffba09fff6\",\"clientId\":\"4590e8db-037f-49bc-821c-c48784efef99\"},\"katccetyyv\":{\"principalId\":\"f6ac3e80-e019-4680-8cac-f0bfb771a1cc\",\"clientId\":\"5bf7e090-b85b-4155-814b-45e160d3eed0\"}}},\"kind\":\"wobbwns\",\"properties\":{\"discoveryUrl\":\"yirt\",\"intellectualPropertyPublisher\":\"zkpjeegzhhfn\",\"managedResourceGroup\":{\"resourceId\":\"lepcklowuthf\"},\"mlFlowRegistryUri\":\"hnmllbljehwhxxu\",\"registryPrivateEndpointConnections\":[{\"id\":\"a\",\"location\":\"hzkvna\",\"properties\":{\"groupIds\":[\"qwsddxaov\",\"bfllfkeub\",\"iibuab\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"hvnjcbuzu\"}},{\"id\":\"qoeoukvinkgb\",\"location\":\"q\",\"properties\":{\"groupIds\":[\"hdyasklmyfh\",\"lxwedetawl\",\"atvfddqspd\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"jtszqexcqcwbxx\"}},{\"id\":\"vekqjdrumlvk\",\"location\":\"wq\",\"properties\":{\"groupIds\":[\"vmw\",\"yarswsvtzotmwxqd\",\"bdanfexlawkeqjhz\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"mjsk\"}},{\"id\":\"enjnady\",\"location\":\"vounbyv\",\"properties\":{\"groupIds\":[\"rrgxqbknoxj\"],\"privateEndpoint\":{},\"registryPrivateLinkServiceConnectionState\":{},\"provisioningState\":\"hmmwbvr\"}}],\"publicNetworkAccess\":\"jbiigxxr\",\"regionDetails\":[{\"acrDetails\":[{}],\"location\":\"wigif\",\"storageAccountDetails\":[{}]},{\"acrDetails\":[{},{},{},{}],\"location\":\"tlpshxjhanskooal\",\"storageAccountDetails\":[{},{},{}]},{\"acrDetails\":[{},{},{}],\"location\":\"qvfyoksstalji\",\"storageAccountDetails\":[{},{}]}]},\"sku\":{\"name\":\"j\",\"tier\":\"Basic\",\"size\":\"mnaaqhscaanddlv\",\"family\":\"uv\",\"capacity\":1190877470},\"location\":\"lsb\",\"tags\":{\"teklgs\":\"djvyclasdprknup\",\"oaol\":\"pvqczpk\",\"wcs\":\"h\",\"euimtxmd\":\"ebtjg\"},\"id\":\"exar\",\"name\":\"ukoir\",\"type\":\"ivftl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Registry> response = manager.registries().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lsb", response.iterator().next().location());
        Assertions.assertEquals("djvyclasdprknup", response.iterator().next().tags().get("teklgs"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("wobbwns", response.iterator().next().kind());
        Assertions.assertEquals("j", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.iterator().next().sku().tier());
        Assertions.assertEquals("mnaaqhscaanddlv", response.iterator().next().sku().size());
        Assertions.assertEquals("uv", response.iterator().next().sku().family());
        Assertions.assertEquals(1190877470, response.iterator().next().sku().capacity());
        Assertions.assertEquals("yirt", response.iterator().next().discoveryUrl());
        Assertions.assertEquals("zkpjeegzhhfn", response.iterator().next().intellectualPropertyPublisher());
        Assertions.assertEquals("lepcklowuthf", response.iterator().next().managedResourceGroup().resourceId());
        Assertions.assertEquals("hnmllbljehwhxxu", response.iterator().next().mlFlowRegistryUri());
        Assertions.assertEquals("a", response.iterator().next().registryPrivateEndpointConnections().get(0).id());
        Assertions.assertEquals("hzkvna",
            response.iterator().next().registryPrivateEndpointConnections().get(0).location());
        Assertions.assertEquals("qwsddxaov",
            response.iterator().next().registryPrivateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("hvnjcbuzu",
            response.iterator().next().registryPrivateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("jbiigxxr", response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("wigif", response.iterator().next().regionDetails().get(0).location());
    }
}
