// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import com.azure.resourcemanager.machinelearning.models.TrainingSettings;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class TrainingSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrainingSettings model = BinaryData.fromString(
            "{\"enableOnnxCompatibleModels\":true,\"stackEnsembleSettings\":{\"stackMetaLearnerType\":\"LinearRegression\",\"stackMetaLearnerTrainPercentage\":20.375480617497665,\"stackMetaLearnerKWargs\":\"datauhktq\"},\"enableStackEnsemble\":true,\"enableVoteEnsemble\":true,\"ensembleModelDownloadTimeout\":\"PT238H33M9S\",\"enableModelExplainability\":false,\"enableDnnTraining\":true}")
            .toObject(TrainingSettings.class);
        Assertions.assertEquals(true, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.LINEAR_REGRESSION,
            model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(20.375480617497665D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(true, model.enableStackEnsemble());
        Assertions.assertEquals(true, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT238H33M9S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(false, model.enableModelExplainability());
        Assertions.assertEquals(true, model.enableDnnTraining());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrainingSettings model = new TrainingSettings().withEnableOnnxCompatibleModels(true)
            .withStackEnsembleSettings(
                new StackEnsembleSettings().withStackMetaLearnerType(StackMetaLearnerType.LINEAR_REGRESSION)
                    .withStackMetaLearnerTrainPercentage(20.375480617497665D)
                    .withStackMetaLearnerKWargs("datauhktq"))
            .withEnableStackEnsemble(true)
            .withEnableVoteEnsemble(true)
            .withEnsembleModelDownloadTimeout(Duration.parse("PT238H33M9S"))
            .withEnableModelExplainability(false)
            .withEnableDnnTraining(true);
        model = BinaryData.fromObject(model).toObject(TrainingSettings.class);
        Assertions.assertEquals(true, model.enableOnnxCompatibleModels());
        Assertions.assertEquals(StackMetaLearnerType.LINEAR_REGRESSION,
            model.stackEnsembleSettings().stackMetaLearnerType());
        Assertions.assertEquals(20.375480617497665D, model.stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions.assertEquals(true, model.enableStackEnsemble());
        Assertions.assertEquals(true, model.enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT238H33M9S"), model.ensembleModelDownloadTimeout());
        Assertions.assertEquals(false, model.enableModelExplainability());
        Assertions.assertEquals(true, model.enableDnnTraining());
    }
}
