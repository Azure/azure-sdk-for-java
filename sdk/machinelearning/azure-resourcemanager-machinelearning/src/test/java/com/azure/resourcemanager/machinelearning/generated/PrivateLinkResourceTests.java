// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateLinkResource;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PrivateLinkResourceTests {
    @Test
    public void testDeserialize() {
        PrivateLinkResource model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"groupId\":\"yngudivk\",\"requiredMembers\":[\"wbxqzvszjfau\",\"j\"],\"requiredZoneNames\":[\"xivetvt\",\"qaqtdoqmcbxvwvxy\"]},\"identity\":{\"principalId\":\"ba6b7b9e-ebe4-44d3-9cc7-76bfd9641ea6\",\"tenantId\":\"572dd516-94fe-4049-be70-6921b1dab258\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"blytk\":{\"principalId\":\"8445a282-d175-4734-8ea1-bdc87ac9544a\",\"clientId\":\"93f4d8cb-d156-4fa7-9d1a-9166cddff085\"},\"pe\":{\"principalId\":\"9a758545-58c6-4ec8-88a1-29be8ca299a6\",\"clientId\":\"f37a5810-b1f8-4201-9cf0-fc97c2b2a2cd\"},\"fbkrvrnsvs\":{\"principalId\":\"2c838990-4823-43a3-95a4-a529a9c5ee74\",\"clientId\":\"6884b304-7d2b-46bf-a24b-f61da9aabbfe\"}}},\"location\":\"johxcrsb\",\"tags\":{\"wbhsqfsub\":\"asrru\",\"rxbpyb\":\"gjb\",\"twss\":\"rfbjf\"},\"sku\":{\"name\":\"ftpvjzbexil\",\"tier\":\"Basic\",\"size\":\"qqnvwpmq\",\"family\":\"ruoujmk\",\"capacity\":1426920839},\"id\":\"qytjrybnwjewgd\",\"name\":\"jervnaenqpehi\",\"type\":\"doy\"}")
                .toObject(PrivateLinkResource.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("johxcrsb", model.location());
        Assertions.assertEquals("asrru", model.tags().get("wbhsqfsub"));
        Assertions.assertEquals("ftpvjzbexil", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("qqnvwpmq", model.sku().size());
        Assertions.assertEquals("ruoujmk", model.sku().family());
        Assertions.assertEquals(1426920839, model.sku().capacity());
        Assertions.assertEquals("xivetvt", model.requiredZoneNames().get(0));
    }

    @Test
    public void testSerialize() {
        PrivateLinkResource model =
            new PrivateLinkResource()
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "blytk",
                                new UserAssignedIdentity(),
                                "pe",
                                new UserAssignedIdentity(),
                                "fbkrvrnsvs",
                                new UserAssignedIdentity())))
                .withLocation("johxcrsb")
                .withTags(mapOf("wbhsqfsub", "asrru", "rxbpyb", "gjb", "twss", "rfbjf"))
                .withSku(
                    new Sku()
                        .withName("ftpvjzbexil")
                        .withTier(SkuTier.BASIC)
                        .withSize("qqnvwpmq")
                        .withFamily("ruoujmk")
                        .withCapacity(1426920839))
                .withRequiredZoneNames(Arrays.asList("xivetvt", "qaqtdoqmcbxvwvxy"));
        model = BinaryData.fromObject(model).toObject(PrivateLinkResource.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("johxcrsb", model.location());
        Assertions.assertEquals("asrru", model.tags().get("wbhsqfsub"));
        Assertions.assertEquals("ftpvjzbexil", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("qqnvwpmq", model.sku().size());
        Assertions.assertEquals("ruoujmk", model.sku().family());
        Assertions.assertEquals(1426920839, model.sku().capacity());
        Assertions.assertEquals("xivetvt", model.requiredZoneNames().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
