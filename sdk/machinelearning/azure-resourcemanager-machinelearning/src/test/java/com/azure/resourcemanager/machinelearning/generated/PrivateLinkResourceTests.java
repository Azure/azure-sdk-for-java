// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateLinkResource;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PrivateLinkResourceTests {
    @Test
    public void testDeserialize() {
        PrivateLinkResource model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"groupId\":\"yngudivk\",\"requiredMembers\":[\"wbxqzvszjfau\",\"j\"],\"requiredZoneNames\":[\"xivetvt\",\"qaqtdoqmcbxvwvxy\"]},\"identity\":{\"principalId\":\"2d335aa0-b851-4652-a962-2d934394680b\",\"tenantId\":\"1a1193c9-e9fd-4c95-b566-4c345e9d4e82\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"blytk\":{\"principalId\":\"0fdcce68-d476-4226-83af-8cb88470970d\",\"clientId\":\"c30fcf97-31c8-4c8b-980a-ec1e9562518d\"},\"pe\":{\"principalId\":\"a5b8b4c5-f1d8-4e13-a3c8-334fe915784f\",\"clientId\":\"0677eaeb-dcd1-41ec-a0cc-5e24fa39f1a3\"},\"fbkrvrnsvs\":{\"principalId\":\"3903b825-01c9-4714-95d3-765a33fcae8a\",\"clientId\":\"92ceaac4-d21f-4106-9044-b6ce56b771e9\"}}},\"location\":\"johxcrsb\",\"tags\":{\"wbhsqfsub\":\"asrru\",\"rxbpyb\":\"gjb\",\"twss\":\"rfbjf\"},\"sku\":{\"name\":\"ftpvjzbexil\",\"tier\":\"Basic\",\"size\":\"qqnvwpmq\",\"family\":\"ruoujmk\",\"capacity\":1426920839},\"id\":\"qytjrybnwjewgd\",\"name\":\"jervnaenqpehi\",\"type\":\"doy\"}")
                .toObject(PrivateLinkResource.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("johxcrsb", model.location());
        Assertions.assertEquals("asrru", model.tags().get("wbhsqfsub"));
        Assertions.assertEquals("ftpvjzbexil", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("qqnvwpmq", model.sku().size());
        Assertions.assertEquals("ruoujmk", model.sku().family());
        Assertions.assertEquals(1426920839, model.sku().capacity());
        Assertions.assertEquals("xivetvt", model.requiredZoneNames().get(0));
    }

    @Test
    public void testSerialize() {
        PrivateLinkResource model =
            new PrivateLinkResource()
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "blytk",
                                new UserAssignedIdentity(),
                                "pe",
                                new UserAssignedIdentity(),
                                "fbkrvrnsvs",
                                new UserAssignedIdentity())))
                .withLocation("johxcrsb")
                .withTags(mapOf("wbhsqfsub", "asrru", "rxbpyb", "gjb", "twss", "rfbjf"))
                .withSku(
                    new Sku()
                        .withName("ftpvjzbexil")
                        .withTier(SkuTier.BASIC)
                        .withSize("qqnvwpmq")
                        .withFamily("ruoujmk")
                        .withCapacity(1426920839))
                .withRequiredZoneNames(Arrays.asList("xivetvt", "qaqtdoqmcbxvwvxy"));
        model = BinaryData.fromObject(model).toObject(PrivateLinkResource.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("johxcrsb", model.location());
        Assertions.assertEquals("asrru", model.tags().get("wbhsqfsub"));
        Assertions.assertEquals("ftpvjzbexil", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("qqnvwpmq", model.sku().size());
        Assertions.assertEquals("ruoujmk", model.sku().family());
        Assertions.assertEquals(1426920839, model.sku().capacity());
        Assertions.assertEquals("xivetvt", model.requiredZoneNames().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
