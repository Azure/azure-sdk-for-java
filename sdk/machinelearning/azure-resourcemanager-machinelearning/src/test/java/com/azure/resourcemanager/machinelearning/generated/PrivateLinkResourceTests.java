// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PrivateLinkResource;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkResource model = BinaryData.fromString(
            "{\"properties\":{\"groupId\":\"wwtppj\",\"requiredMembers\":[\"xogaokonzmnsikv\",\"kqze\",\"qkdltfz\"],\"requiredZoneNames\":[\"hvhgureod\"]},\"identity\":{\"principalId\":\"174786d8-53cf-4b26-9408-87ec3d88a23b\",\"tenantId\":\"a1244d3e-f1b3-47d3-93ea-f0f5c85396e0\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ibqdxbxwakbogqx\":{\"principalId\":\"423ad672-c25a-4318-b136-9299a6d1f52b\",\"clientId\":\"22280508-41ec-4335-abb0-fe8f51b842ec\"},\"kzgxhurip\":{\"principalId\":\"724df376-cbe2-490f-800f-80ca33c7eb47\",\"clientId\":\"249f5a14-7573-43ae-aa24-07995d561aba\"},\"odxun\":{\"principalId\":\"f05a65d3-bc92-4535-95a9-9bcc3345618c\",\"clientId\":\"93dc6136-437f-4c15-b3af-2a23f977a3dc\"}}},\"location\":\"ebxmubyynt\",\"tags\":{\"ltmuwlauwzizx\":\"bqtkoievseotgqr\",\"d\":\"mpgcjefuzmuvpbt\"},\"sku\":{\"name\":\"orppxebmnzbtb\",\"tier\":\"Basic\",\"size\":\"lkfg\",\"family\":\"dneu\",\"capacity\":2052379315},\"id\":\"hsd\",\"name\":\"htozfikdow\",\"type\":\"quuvxzxcl\"}")
            .toObject(PrivateLinkResource.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ebxmubyynt", model.location());
        Assertions.assertEquals("bqtkoievseotgqr", model.tags().get("ltmuwlauwzizx"));
        Assertions.assertEquals("orppxebmnzbtb", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("lkfg", model.sku().size());
        Assertions.assertEquals("dneu", model.sku().family());
        Assertions.assertEquals(2052379315, model.sku().capacity());
        Assertions.assertEquals("hvhgureod", model.requiredZoneNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkResource model = new PrivateLinkResource()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("ibqdxbxwakbogqx", new UserAssignedIdentity(), "kzgxhurip",
                    new UserAssignedIdentity(), "odxun", new UserAssignedIdentity())))
            .withLocation("ebxmubyynt")
            .withTags(mapOf("ltmuwlauwzizx", "bqtkoievseotgqr", "d", "mpgcjefuzmuvpbt"))
            .withSku(new Sku().withName("orppxebmnzbtb")
                .withTier(SkuTier.BASIC)
                .withSize("lkfg")
                .withFamily("dneu")
                .withCapacity(2052379315))
            .withRequiredZoneNames(Arrays.asList("hvhgureod"));
        model = BinaryData.fromObject(model).toObject(PrivateLinkResource.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ebxmubyynt", model.location());
        Assertions.assertEquals("bqtkoievseotgqr", model.tags().get("ltmuwlauwzizx"));
        Assertions.assertEquals("orppxebmnzbtb", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("lkfg", model.sku().size());
        Assertions.assertEquals("dneu", model.sku().family());
        Assertions.assertEquals(2052379315, model.sku().capacity());
        Assertions.assertEquals("hvhgureod", model.requiredZoneNames().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
