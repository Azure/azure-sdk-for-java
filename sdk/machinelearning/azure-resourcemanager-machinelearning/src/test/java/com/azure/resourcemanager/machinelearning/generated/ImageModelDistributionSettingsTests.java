// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettings;
import org.junit.jupiter.api.Assertions;

public final class ImageModelDistributionSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageModelDistributionSettings model = BinaryData.fromString(
            "{\"amsGradient\":\"kbsvbwy\",\"augmentations\":\"ygnbknhjgclxaxwc\",\"beta1\":\"asp\",\"beta2\":\"zkucszghdoaqipmn\",\"distributed\":\"lfrsbzrnmuv\",\"earlyStopping\":\"pu\",\"earlyStoppingDelay\":\"ddtbfmekjcnginxd\",\"earlyStoppingPatience\":\"aoy\",\"evaluationFrequency\":\"fvgyxzmxynofxl\",\"enableOnnxNormalization\":\"xoqxtdnzujsj\",\"gradientAccumulationStep\":\"krpskcjhmm\",\"layersToFreeze\":\"bnivdqtkykp\",\"learningRate\":\"nlsfgnyscac\",\"learningRateScheduler\":\"tbzetxyg\",\"modelName\":\"iceecvjwy\",\"momentum\":\"eoxmpzzw\",\"nesterov\":\"drdvha\",\"numberOfEpochs\":\"kx\",\"numberOfWorkers\":\"vz\",\"optimizer\":\"xmbrygmwibiosiq\",\"randomSeed\":\"kqfdqwdrtx\",\"stepLRGamma\":\"daglmrcok\",\"stepLRStepSize\":\"ert\",\"trainingBatchSize\":\"unzsiywhubym\",\"validationBatchSize\":\"opikzebqnnfywtkq\",\"warmupCosineLRCycles\":\"sdlkhcz\",\"warmupCosineLRWarmupEpochs\":\"pmgfjculojhhylx\",\"weightDecay\":\"vfiyymot\"}")
            .toObject(ImageModelDistributionSettings.class);
        Assertions.assertEquals("kbsvbwy", model.amsGradient());
        Assertions.assertEquals("ygnbknhjgclxaxwc", model.augmentations());
        Assertions.assertEquals("asp", model.beta1());
        Assertions.assertEquals("zkucszghdoaqipmn", model.beta2());
        Assertions.assertEquals("lfrsbzrnmuv", model.distributed());
        Assertions.assertEquals("pu", model.earlyStopping());
        Assertions.assertEquals("ddtbfmekjcnginxd", model.earlyStoppingDelay());
        Assertions.assertEquals("aoy", model.earlyStoppingPatience());
        Assertions.assertEquals("fvgyxzmxynofxl", model.evaluationFrequency());
        Assertions.assertEquals("xoqxtdnzujsj", model.enableOnnxNormalization());
        Assertions.assertEquals("krpskcjhmm", model.gradientAccumulationStep());
        Assertions.assertEquals("bnivdqtkykp", model.layersToFreeze());
        Assertions.assertEquals("nlsfgnyscac", model.learningRate());
        Assertions.assertEquals("tbzetxyg", model.learningRateScheduler());
        Assertions.assertEquals("iceecvjwy", model.modelName());
        Assertions.assertEquals("eoxmpzzw", model.momentum());
        Assertions.assertEquals("drdvha", model.nesterov());
        Assertions.assertEquals("kx", model.numberOfEpochs());
        Assertions.assertEquals("vz", model.numberOfWorkers());
        Assertions.assertEquals("xmbrygmwibiosiq", model.optimizer());
        Assertions.assertEquals("kqfdqwdrtx", model.randomSeed());
        Assertions.assertEquals("daglmrcok", model.stepLRGamma());
        Assertions.assertEquals("ert", model.stepLRStepSize());
        Assertions.assertEquals("unzsiywhubym", model.trainingBatchSize());
        Assertions.assertEquals("opikzebqnnfywtkq", model.validationBatchSize());
        Assertions.assertEquals("sdlkhcz", model.warmupCosineLRCycles());
        Assertions.assertEquals("pmgfjculojhhylx", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("vfiyymot", model.weightDecay());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageModelDistributionSettings model = new ImageModelDistributionSettings().withAmsGradient("kbsvbwy")
            .withAugmentations("ygnbknhjgclxaxwc")
            .withBeta1("asp")
            .withBeta2("zkucszghdoaqipmn")
            .withDistributed("lfrsbzrnmuv")
            .withEarlyStopping("pu")
            .withEarlyStoppingDelay("ddtbfmekjcnginxd")
            .withEarlyStoppingPatience("aoy")
            .withEvaluationFrequency("fvgyxzmxynofxl")
            .withEnableOnnxNormalization("xoqxtdnzujsj")
            .withGradientAccumulationStep("krpskcjhmm")
            .withLayersToFreeze("bnivdqtkykp")
            .withLearningRate("nlsfgnyscac")
            .withLearningRateScheduler("tbzetxyg")
            .withModelName("iceecvjwy")
            .withMomentum("eoxmpzzw")
            .withNesterov("drdvha")
            .withNumberOfEpochs("kx")
            .withNumberOfWorkers("vz")
            .withOptimizer("xmbrygmwibiosiq")
            .withRandomSeed("kqfdqwdrtx")
            .withStepLRGamma("daglmrcok")
            .withStepLRStepSize("ert")
            .withTrainingBatchSize("unzsiywhubym")
            .withValidationBatchSize("opikzebqnnfywtkq")
            .withWarmupCosineLRCycles("sdlkhcz")
            .withWarmupCosineLRWarmupEpochs("pmgfjculojhhylx")
            .withWeightDecay("vfiyymot");
        model = BinaryData.fromObject(model).toObject(ImageModelDistributionSettings.class);
        Assertions.assertEquals("kbsvbwy", model.amsGradient());
        Assertions.assertEquals("ygnbknhjgclxaxwc", model.augmentations());
        Assertions.assertEquals("asp", model.beta1());
        Assertions.assertEquals("zkucszghdoaqipmn", model.beta2());
        Assertions.assertEquals("lfrsbzrnmuv", model.distributed());
        Assertions.assertEquals("pu", model.earlyStopping());
        Assertions.assertEquals("ddtbfmekjcnginxd", model.earlyStoppingDelay());
        Assertions.assertEquals("aoy", model.earlyStoppingPatience());
        Assertions.assertEquals("fvgyxzmxynofxl", model.evaluationFrequency());
        Assertions.assertEquals("xoqxtdnzujsj", model.enableOnnxNormalization());
        Assertions.assertEquals("krpskcjhmm", model.gradientAccumulationStep());
        Assertions.assertEquals("bnivdqtkykp", model.layersToFreeze());
        Assertions.assertEquals("nlsfgnyscac", model.learningRate());
        Assertions.assertEquals("tbzetxyg", model.learningRateScheduler());
        Assertions.assertEquals("iceecvjwy", model.modelName());
        Assertions.assertEquals("eoxmpzzw", model.momentum());
        Assertions.assertEquals("drdvha", model.nesterov());
        Assertions.assertEquals("kx", model.numberOfEpochs());
        Assertions.assertEquals("vz", model.numberOfWorkers());
        Assertions.assertEquals("xmbrygmwibiosiq", model.optimizer());
        Assertions.assertEquals("kqfdqwdrtx", model.randomSeed());
        Assertions.assertEquals("daglmrcok", model.stepLRGamma());
        Assertions.assertEquals("ert", model.stepLRStepSize());
        Assertions.assertEquals("unzsiywhubym", model.trainingBatchSize());
        Assertions.assertEquals("opikzebqnnfywtkq", model.validationBatchSize());
        Assertions.assertEquals("sdlkhcz", model.warmupCosineLRCycles());
        Assertions.assertEquals("pmgfjculojhhylx", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("vfiyymot", model.weightDecay());
    }
}
