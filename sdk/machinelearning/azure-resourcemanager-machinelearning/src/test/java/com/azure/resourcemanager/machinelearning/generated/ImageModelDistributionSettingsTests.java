// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettings;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageModelDistributionSettingsTests {
    @Test
    public void testDeserialize() {
        ImageModelDistributionSettings model =
            BinaryData
                .fromString(
                    "{\"amsGradient\":\"cmj\",\"augmentations\":\"gxnoqrxtdis\",\"beta1\":\"evhdlmydid\",\"beta2\":\"epfwwt\",\"distributed\":\"doesxxhmwcdb\",\"earlyStopping\":\"yo\",\"earlyStoppingDelay\":\"xkxhnegknjzrbhtm\",\"earlyStoppingPatience\":\"lvukaobrlb\",\"enableOnnxNormalization\":\"snbagnchjhg\",\"evaluationFrequency\":\"uowakyw\",\"gradientAccumulationStep\":\"hjym\",\"layersToFreeze\":\"gqtagd\",\"learningRate\":\"lss\",\"learningRateScheduler\":\"jomevtfycnlb\",\"modelName\":\"jcodkkgjiiytssi\",\"momentum\":\"z\",\"nesterov\":\"ufqbvntnr\",\"numberOfEpochs\":\"qsorh\",\"numberOfWorkers\":\"kxgnlykmxcpwzvmd\",\"optimizer\":\"sqdtiwlwxlbon\",\"randomSeed\":\"bazqicqchygtvxby\",\"stepLRGamma\":\"nepubdpkxyqvgx\",\"stepLRStepSize\":\"od\",\"trainingBatchSize\":\"vohkxdxuws\",\"validationBatchSize\":\"fmcwnosb\",\"warmupCosineLRCycles\":\"ehgcvkbcknjo\",\"warmupCosineLRWarmupEpochs\":\"jy\",\"weightDecay\":\"pvelszerqze\"}")
                .toObject(ImageModelDistributionSettings.class);
        Assertions.assertEquals("cmj", model.amsGradient());
        Assertions.assertEquals("gxnoqrxtdis", model.augmentations());
        Assertions.assertEquals("evhdlmydid", model.beta1());
        Assertions.assertEquals("epfwwt", model.beta2());
        Assertions.assertEquals("doesxxhmwcdb", model.distributed());
        Assertions.assertEquals("yo", model.earlyStopping());
        Assertions.assertEquals("xkxhnegknjzrbhtm", model.earlyStoppingDelay());
        Assertions.assertEquals("lvukaobrlb", model.earlyStoppingPatience());
        Assertions.assertEquals("snbagnchjhg", model.enableOnnxNormalization());
        Assertions.assertEquals("uowakyw", model.evaluationFrequency());
        Assertions.assertEquals("hjym", model.gradientAccumulationStep());
        Assertions.assertEquals("gqtagd", model.layersToFreeze());
        Assertions.assertEquals("lss", model.learningRate());
        Assertions.assertEquals("jomevtfycnlb", model.learningRateScheduler());
        Assertions.assertEquals("jcodkkgjiiytssi", model.modelName());
        Assertions.assertEquals("z", model.momentum());
        Assertions.assertEquals("ufqbvntnr", model.nesterov());
        Assertions.assertEquals("qsorh", model.numberOfEpochs());
        Assertions.assertEquals("kxgnlykmxcpwzvmd", model.numberOfWorkers());
        Assertions.assertEquals("sqdtiwlwxlbon", model.optimizer());
        Assertions.assertEquals("bazqicqchygtvxby", model.randomSeed());
        Assertions.assertEquals("nepubdpkxyqvgx", model.stepLRGamma());
        Assertions.assertEquals("od", model.stepLRStepSize());
        Assertions.assertEquals("vohkxdxuws", model.trainingBatchSize());
        Assertions.assertEquals("fmcwnosb", model.validationBatchSize());
        Assertions.assertEquals("ehgcvkbcknjo", model.warmupCosineLRCycles());
        Assertions.assertEquals("jy", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("pvelszerqze", model.weightDecay());
    }

    @Test
    public void testSerialize() {
        ImageModelDistributionSettings model =
            new ImageModelDistributionSettings()
                .withAmsGradient("cmj")
                .withAugmentations("gxnoqrxtdis")
                .withBeta1("evhdlmydid")
                .withBeta2("epfwwt")
                .withDistributed("doesxxhmwcdb")
                .withEarlyStopping("yo")
                .withEarlyStoppingDelay("xkxhnegknjzrbhtm")
                .withEarlyStoppingPatience("lvukaobrlb")
                .withEnableOnnxNormalization("snbagnchjhg")
                .withEvaluationFrequency("uowakyw")
                .withGradientAccumulationStep("hjym")
                .withLayersToFreeze("gqtagd")
                .withLearningRate("lss")
                .withLearningRateScheduler("jomevtfycnlb")
                .withModelName("jcodkkgjiiytssi")
                .withMomentum("z")
                .withNesterov("ufqbvntnr")
                .withNumberOfEpochs("qsorh")
                .withNumberOfWorkers("kxgnlykmxcpwzvmd")
                .withOptimizer("sqdtiwlwxlbon")
                .withRandomSeed("bazqicqchygtvxby")
                .withStepLRGamma("nepubdpkxyqvgx")
                .withStepLRStepSize("od")
                .withTrainingBatchSize("vohkxdxuws")
                .withValidationBatchSize("fmcwnosb")
                .withWarmupCosineLRCycles("ehgcvkbcknjo")
                .withWarmupCosineLRWarmupEpochs("jy")
                .withWeightDecay("pvelszerqze");
        model = BinaryData.fromObject(model).toObject(ImageModelDistributionSettings.class);
        Assertions.assertEquals("cmj", model.amsGradient());
        Assertions.assertEquals("gxnoqrxtdis", model.augmentations());
        Assertions.assertEquals("evhdlmydid", model.beta1());
        Assertions.assertEquals("epfwwt", model.beta2());
        Assertions.assertEquals("doesxxhmwcdb", model.distributed());
        Assertions.assertEquals("yo", model.earlyStopping());
        Assertions.assertEquals("xkxhnegknjzrbhtm", model.earlyStoppingDelay());
        Assertions.assertEquals("lvukaobrlb", model.earlyStoppingPatience());
        Assertions.assertEquals("snbagnchjhg", model.enableOnnxNormalization());
        Assertions.assertEquals("uowakyw", model.evaluationFrequency());
        Assertions.assertEquals("hjym", model.gradientAccumulationStep());
        Assertions.assertEquals("gqtagd", model.layersToFreeze());
        Assertions.assertEquals("lss", model.learningRate());
        Assertions.assertEquals("jomevtfycnlb", model.learningRateScheduler());
        Assertions.assertEquals("jcodkkgjiiytssi", model.modelName());
        Assertions.assertEquals("z", model.momentum());
        Assertions.assertEquals("ufqbvntnr", model.nesterov());
        Assertions.assertEquals("qsorh", model.numberOfEpochs());
        Assertions.assertEquals("kxgnlykmxcpwzvmd", model.numberOfWorkers());
        Assertions.assertEquals("sqdtiwlwxlbon", model.optimizer());
        Assertions.assertEquals("bazqicqchygtvxby", model.randomSeed());
        Assertions.assertEquals("nepubdpkxyqvgx", model.stepLRGamma());
        Assertions.assertEquals("od", model.stepLRStepSize());
        Assertions.assertEquals("vohkxdxuws", model.trainingBatchSize());
        Assertions.assertEquals("fmcwnosb", model.validationBatchSize());
        Assertions.assertEquals("ehgcvkbcknjo", model.warmupCosineLRCycles());
        Assertions.assertEquals("jy", model.warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("pvelszerqze", model.weightDecay());
    }
}
