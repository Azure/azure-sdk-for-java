// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchema;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchemaResources;
import com.azure.resourcemanager.machinelearning.models.KubernetesProperties;
import com.azure.resourcemanager.machinelearning.models.KubernetesSchema;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesSchemaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesSchema model = BinaryData.fromString(
            "{\"properties\":{\"relayConnectionString\":\"hjgczetyb\",\"serviceBusConnectionString\":\"gztlcgc\",\"extensionPrincipalId\":\"chfjvmywjzebe\",\"extensionInstanceReleaseTrain\":\"vlbefvwclj\",\"vcName\":\"pylrwoxzgwpsy\",\"namespace\":\"ijeypdvrbkerdkdk\",\"defaultInstanceType\":\"wqwjxil\",\"instanceTypes\":{\"eajbkajlcyizyddc\":{\"nodeSelector\":{\"oisfmnaybdjn\":\"feygzqp\"},\"resources\":{\"requests\":{\"ymulwivqtowl\":\"ntqontwhym\"},\"limits\":{\"j\":\"ycoybajasqubf\",\"htfxcpupuki\":\"ywhjqwmchq\",\"sa\":\"mjzpwdlvwtiwsm\",\"ltassaekewna\":\"nhqnampp\"}}}}}}")
            .toObject(KubernetesSchema.class);
        Assertions.assertEquals("hjgczetyb", model.properties().relayConnectionString());
        Assertions.assertEquals("gztlcgc", model.properties().serviceBusConnectionString());
        Assertions.assertEquals("chfjvmywjzebe", model.properties().extensionPrincipalId());
        Assertions.assertEquals("vlbefvwclj", model.properties().extensionInstanceReleaseTrain());
        Assertions.assertEquals("pylrwoxzgwpsy", model.properties().vcName());
        Assertions.assertEquals("ijeypdvrbkerdkdk", model.properties().namespace());
        Assertions.assertEquals("wqwjxil", model.properties().defaultInstanceType());
        Assertions.assertEquals("feygzqp",
            model.properties().instanceTypes().get("eajbkajlcyizyddc").nodeSelector().get("oisfmnaybdjn"));
        Assertions.assertEquals("ntqontwhym",
            model.properties().instanceTypes().get("eajbkajlcyizyddc").resources().requests().get("ymulwivqtowl"));
        Assertions.assertEquals("ycoybajasqubf",
            model.properties().instanceTypes().get("eajbkajlcyizyddc").resources().limits().get("j"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesSchema model = new KubernetesSchema().withProperties(new KubernetesProperties()
            .withRelayConnectionString("hjgczetyb")
            .withServiceBusConnectionString("gztlcgc")
            .withExtensionPrincipalId("chfjvmywjzebe")
            .withExtensionInstanceReleaseTrain("vlbefvwclj")
            .withVcName("pylrwoxzgwpsy")
            .withNamespace("ijeypdvrbkerdkdk")
            .withDefaultInstanceType("wqwjxil")
            .withInstanceTypes(mapOf("eajbkajlcyizyddc",
                new InstanceTypeSchema().withNodeSelector(mapOf("oisfmnaybdjn", "feygzqp"))
                    .withResources(new InstanceTypeSchemaResources().withRequests(mapOf("ymulwivqtowl", "ntqontwhym"))
                        .withLimits(mapOf("j", "ycoybajasqubf", "htfxcpupuki", "ywhjqwmchq", "sa", "mjzpwdlvwtiwsm",
                            "ltassaekewna", "nhqnampp"))))));
        model = BinaryData.fromObject(model).toObject(KubernetesSchema.class);
        Assertions.assertEquals("hjgczetyb", model.properties().relayConnectionString());
        Assertions.assertEquals("gztlcgc", model.properties().serviceBusConnectionString());
        Assertions.assertEquals("chfjvmywjzebe", model.properties().extensionPrincipalId());
        Assertions.assertEquals("vlbefvwclj", model.properties().extensionInstanceReleaseTrain());
        Assertions.assertEquals("pylrwoxzgwpsy", model.properties().vcName());
        Assertions.assertEquals("ijeypdvrbkerdkdk", model.properties().namespace());
        Assertions.assertEquals("wqwjxil", model.properties().defaultInstanceType());
        Assertions.assertEquals("feygzqp",
            model.properties().instanceTypes().get("eajbkajlcyizyddc").nodeSelector().get("oisfmnaybdjn"));
        Assertions.assertEquals("ntqontwhym",
            model.properties().instanceTypes().get("eajbkajlcyizyddc").resources().requests().get("ymulwivqtowl"));
        Assertions.assertEquals("ycoybajasqubf",
            model.properties().instanceTypes().get("eajbkajlcyizyddc").resources().limits().get("j"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
