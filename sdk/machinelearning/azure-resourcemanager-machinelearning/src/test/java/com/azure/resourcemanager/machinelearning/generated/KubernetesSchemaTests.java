// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchema;
import com.azure.resourcemanager.machinelearning.models.KubernetesProperties;
import com.azure.resourcemanager.machinelearning.models.KubernetesSchema;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesSchemaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesSchema model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"relayConnectionString\":\"j\",\"serviceBusConnectionString\":\"nuygbqeqqekewvnq\",\"extensionPrincipalId\":\"dlguaucmfdjwn\",\"extensionInstanceReleaseTrain\":\"xpunjqi\",\"vcName\":\"zvvitacgxmfcs\",\"namespace\":\"rxhtvso\",\"defaultInstanceType\":\"lwntsjgqrs\",\"instanceTypes\":{\"uuybnchrsz\":{\"nodeSelector\":{}}}}}")
                .toObject(KubernetesSchema.class);
        Assertions.assertEquals("j", model.properties().relayConnectionString());
        Assertions.assertEquals("nuygbqeqqekewvnq", model.properties().serviceBusConnectionString());
        Assertions.assertEquals("dlguaucmfdjwn", model.properties().extensionPrincipalId());
        Assertions.assertEquals("xpunjqi", model.properties().extensionInstanceReleaseTrain());
        Assertions.assertEquals("zvvitacgxmfcs", model.properties().vcName());
        Assertions.assertEquals("rxhtvso", model.properties().namespace());
        Assertions.assertEquals("lwntsjgqrs", model.properties().defaultInstanceType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesSchema model =
            new KubernetesSchema()
                .withProperties(
                    new KubernetesProperties()
                        .withRelayConnectionString("j")
                        .withServiceBusConnectionString("nuygbqeqqekewvnq")
                        .withExtensionPrincipalId("dlguaucmfdjwn")
                        .withExtensionInstanceReleaseTrain("xpunjqi")
                        .withVcName("zvvitacgxmfcs")
                        .withNamespace("rxhtvso")
                        .withDefaultInstanceType("lwntsjgqrs")
                        .withInstanceTypes(mapOf("uuybnchrsz", new InstanceTypeSchema().withNodeSelector(mapOf()))));
        model = BinaryData.fromObject(model).toObject(KubernetesSchema.class);
        Assertions.assertEquals("j", model.properties().relayConnectionString());
        Assertions.assertEquals("nuygbqeqqekewvnq", model.properties().serviceBusConnectionString());
        Assertions.assertEquals("dlguaucmfdjwn", model.properties().extensionPrincipalId());
        Assertions.assertEquals("xpunjqi", model.properties().extensionInstanceReleaseTrain());
        Assertions.assertEquals("zvvitacgxmfcs", model.properties().vcName());
        Assertions.assertEquals("rxhtvso", model.properties().namespace());
        Assertions.assertEquals("lwntsjgqrs", model.properties().defaultInstanceType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
