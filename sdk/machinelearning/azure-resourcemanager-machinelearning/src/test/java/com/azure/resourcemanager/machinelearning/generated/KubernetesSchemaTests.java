// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.InstanceTypeSchema;
import com.azure.resourcemanager.machinelearning.models.KubernetesProperties;
import com.azure.resourcemanager.machinelearning.models.KubernetesSchema;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class KubernetesSchemaTests {
    @Test
    public void testDeserialize() {
        KubernetesSchema model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"relayConnectionString\":\"gdhbe\",\"serviceBusConnectionString\":\"qkzszuwiwtglxxh\",\"extensionPrincipalId\":\"fpgpicrmnzhrgm\",\"extensionInstanceReleaseTrain\":\"j\",\"vcName\":\"vpqcb\",\"namespace\":\"mbodthsqqgvri\",\"defaultInstanceType\":\"a\",\"instanceTypes\":{\"jfrnxousxauzlwv\":{\"nodeSelector\":{}},\"wohqfzizvu\":{\"nodeSelector\":{}},\"kjsvthnwpzteko\":{\"nodeSelector\":{}}}}}")
                .toObject(KubernetesSchema.class);
        Assertions.assertEquals("gdhbe", model.properties().relayConnectionString());
        Assertions.assertEquals("qkzszuwiwtglxxh", model.properties().serviceBusConnectionString());
        Assertions.assertEquals("fpgpicrmnzhrgm", model.properties().extensionPrincipalId());
        Assertions.assertEquals("j", model.properties().extensionInstanceReleaseTrain());
        Assertions.assertEquals("vpqcb", model.properties().vcName());
        Assertions.assertEquals("mbodthsqqgvri", model.properties().namespace());
        Assertions.assertEquals("a", model.properties().defaultInstanceType());
    }

    @Test
    public void testSerialize() {
        KubernetesSchema model =
            new KubernetesSchema()
                .withProperties(
                    new KubernetesProperties()
                        .withRelayConnectionString("gdhbe")
                        .withServiceBusConnectionString("qkzszuwiwtglxxh")
                        .withExtensionPrincipalId("fpgpicrmnzhrgm")
                        .withExtensionInstanceReleaseTrain("j")
                        .withVcName("vpqcb")
                        .withNamespace("mbodthsqqgvri")
                        .withDefaultInstanceType("a")
                        .withInstanceTypes(
                            mapOf(
                                "jfrnxousxauzlwv",
                                new InstanceTypeSchema().withNodeSelector(mapOf()),
                                "wohqfzizvu",
                                new InstanceTypeSchema().withNodeSelector(mapOf()),
                                "kjsvthnwpzteko",
                                new InstanceTypeSchema().withNodeSelector(mapOf()))));
        model = BinaryData.fromObject(model).toObject(KubernetesSchema.class);
        Assertions.assertEquals("gdhbe", model.properties().relayConnectionString());
        Assertions.assertEquals("qkzszuwiwtglxxh", model.properties().serviceBusConnectionString());
        Assertions.assertEquals("fpgpicrmnzhrgm", model.properties().extensionPrincipalId());
        Assertions.assertEquals("j", model.properties().extensionInstanceReleaseTrain());
        Assertions.assertEquals("vpqcb", model.properties().vcName());
        Assertions.assertEquals("mbodthsqqgvri", model.properties().namespace());
        Assertions.assertEquals("a", model.properties().defaultInstanceType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
