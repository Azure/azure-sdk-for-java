// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.CodeContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CodeContainerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CodeContainerProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Deleting\",\"isArchived\":false,\"latestVersion\":\"r\",\"nextVersion\":\"dsnfdsdoakgtdl\",\"description\":\"kzevdlhewpusds\",\"tags\":{\"kufgmj\":\"vogvbbejdcngqqmo\",\"grtwae\":\"rwr\",\"zkopb\":\"u\"},\"properties\":{\"hziuiefozbhdms\":\"rfdwoyu\",\"zqhof\":\"l\"}}")
            .toObject(CodeContainerProperties.class);
        Assertions.assertEquals("kzevdlhewpusds", model.description());
        Assertions.assertEquals("vogvbbejdcngqqmo", model.tags().get("kufgmj"));
        Assertions.assertEquals("rfdwoyu", model.properties().get("hziuiefozbhdms"));
        Assertions.assertEquals(false, model.isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CodeContainerProperties model = new CodeContainerProperties().withDescription("kzevdlhewpusds")
            .withTags(mapOf("kufgmj", "vogvbbejdcngqqmo", "grtwae", "rwr", "zkopb", "u"))
            .withProperties(mapOf("hziuiefozbhdms", "rfdwoyu", "zqhof", "l"))
            .withIsArchived(false);
        model = BinaryData.fromObject(model).toObject(CodeContainerProperties.class);
        Assertions.assertEquals("kzevdlhewpusds", model.description());
        Assertions.assertEquals("vogvbbejdcngqqmo", model.tags().get("kufgmj"));
        Assertions.assertEquals("rfdwoyu", model.properties().get("hziuiefozbhdms"));
        Assertions.assertEquals(false, model.isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
