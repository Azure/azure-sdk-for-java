// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ClassificationPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.NlpVerticalLimitSettings;
import com.azure.resourcemanager.machinelearning.models.TextClassification;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TextClassificationTests {
    @Test
    public void testDeserialize() {
        TextClassification model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"TextClassification\",\"primaryMetric\":\"Accuracy\",\"featurizationSettings\":{\"datasetLanguage\":\"aderltfokyk\"},\"limitSettings\":{\"maxConcurrentTrials\":539950181,\"maxTrials\":944337652,\"timeout\":\"PT113H49M32S\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"Direct\",\"uri\":\"cxzznnuife\",\"description\":\"ejeg\"},\"logVerbosity\":\"Warning\",\"targetColumnName\":\"guwrjm\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"EvalDownload\",\"uri\":\"btuqkxx\",\"description\":\"wgxql\"}}")
                .toObject(TextClassification.class);
        Assertions.assertEquals(LogVerbosity.WARNING, model.logVerbosity());
        Assertions.assertEquals("guwrjm", model.targetColumnName());
        Assertions.assertEquals("wgxql", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("btuqkxx", model.trainingData().uri());
        Assertions.assertEquals(ClassificationPrimaryMetrics.ACCURACY, model.primaryMetric());
        Assertions.assertEquals("aderltfokyk", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(539950181, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(944337652, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT113H49M32S"), model.limitSettings().timeout());
        Assertions.assertEquals("ejeg", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.validationData().mode());
        Assertions.assertEquals("cxzznnuife", model.validationData().uri());
    }

    @Test
    public void testSerialize() {
        TextClassification model =
            new TextClassification()
                .withLogVerbosity(LogVerbosity.WARNING)
                .withTargetColumnName("guwrjm")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("wgxql")
                        .withMode(InputDeliveryMode.EVAL_DOWNLOAD)
                        .withUri("btuqkxx"))
                .withPrimaryMetric(ClassificationPrimaryMetrics.ACCURACY)
                .withFeaturizationSettings(new NlpVerticalFeaturizationSettings().withDatasetLanguage("aderltfokyk"))
                .withLimitSettings(
                    new NlpVerticalLimitSettings()
                        .withMaxConcurrentTrials(539950181)
                        .withMaxTrials(944337652)
                        .withTimeout(Duration.parse("PT113H49M32S")))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("ejeg")
                        .withMode(InputDeliveryMode.DIRECT)
                        .withUri("cxzznnuife"));
        model = BinaryData.fromObject(model).toObject(TextClassification.class);
        Assertions.assertEquals(LogVerbosity.WARNING, model.logVerbosity());
        Assertions.assertEquals("guwrjm", model.targetColumnName());
        Assertions.assertEquals("wgxql", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("btuqkxx", model.trainingData().uri());
        Assertions.assertEquals(ClassificationPrimaryMetrics.ACCURACY, model.primaryMetric());
        Assertions.assertEquals("aderltfokyk", model.featurizationSettings().datasetLanguage());
        Assertions.assertEquals(539950181, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(944337652, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT113H49M32S"), model.limitSettings().timeout());
        Assertions.assertEquals("ejeg", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.validationData().mode());
        Assertions.assertEquals("cxzznnuife", model.validationData().uri());
    }
}
