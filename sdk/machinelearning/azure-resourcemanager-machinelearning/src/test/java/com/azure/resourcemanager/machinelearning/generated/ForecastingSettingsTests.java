// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.FeatureLags;
import com.azure.resourcemanager.machinelearning.models.ForecastHorizon;
import com.azure.resourcemanager.machinelearning.models.ForecastingSettings;
import com.azure.resourcemanager.machinelearning.models.Seasonality;
import com.azure.resourcemanager.machinelearning.models.ShortSeriesHandlingConfiguration;
import com.azure.resourcemanager.machinelearning.models.TargetAggregationFunction;
import com.azure.resourcemanager.machinelearning.models.TargetLags;
import com.azure.resourcemanager.machinelearning.models.TargetRollingWindowSize;
import com.azure.resourcemanager.machinelearning.models.UseStl;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ForecastingSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForecastingSettings model = BinaryData.fromString(
            "{\"countryOrRegionForHolidays\":\"tphuykuninttl\",\"timeColumnName\":\"jdszdbuzi\",\"targetLags\":{\"mode\":\"TargetLags\"},\"targetRollingWindowSize\":{\"mode\":\"TargetRollingWindowSize\"},\"forecastHorizon\":{\"mode\":\"ForecastHorizon\"},\"timeSeriesIdColumnNames\":[\"qvgpnewuh\",\"fwjnoxuoxtfn\",\"essfepgckncj\"],\"frequency\":\"vsnvbtqdxfmj\",\"featureLags\":\"None\",\"seasonality\":{\"mode\":\"Seasonality\"},\"shortSeriesHandlingConfig\":\"Pad\",\"useStl\":\"SeasonTrend\",\"targetAggregateFunction\":\"Max\",\"cvStepSize\":1226506395}")
            .toObject(ForecastingSettings.class);
        Assertions.assertEquals("tphuykuninttl", model.countryOrRegionForHolidays());
        Assertions.assertEquals("jdszdbuzi", model.timeColumnName());
        Assertions.assertEquals("qvgpnewuh", model.timeSeriesIdColumnNames().get(0));
        Assertions.assertEquals("vsnvbtqdxfmj", model.frequency());
        Assertions.assertEquals(FeatureLags.NONE, model.featureLags());
        Assertions.assertEquals(ShortSeriesHandlingConfiguration.PAD, model.shortSeriesHandlingConfig());
        Assertions.assertEquals(UseStl.SEASON_TREND, model.useStl());
        Assertions.assertEquals(TargetAggregationFunction.MAX, model.targetAggregateFunction());
        Assertions.assertEquals(1226506395, model.cvStepSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForecastingSettings model = new ForecastingSettings().withCountryOrRegionForHolidays("tphuykuninttl")
            .withTimeColumnName("jdszdbuzi")
            .withTargetLags(new TargetLags())
            .withTargetRollingWindowSize(new TargetRollingWindowSize())
            .withForecastHorizon(new ForecastHorizon())
            .withTimeSeriesIdColumnNames(Arrays.asList("qvgpnewuh", "fwjnoxuoxtfn", "essfepgckncj"))
            .withFrequency("vsnvbtqdxfmj")
            .withFeatureLags(FeatureLags.NONE)
            .withSeasonality(new Seasonality())
            .withShortSeriesHandlingConfig(ShortSeriesHandlingConfiguration.PAD)
            .withUseStl(UseStl.SEASON_TREND)
            .withTargetAggregateFunction(TargetAggregationFunction.MAX)
            .withCvStepSize(1226506395);
        model = BinaryData.fromObject(model).toObject(ForecastingSettings.class);
        Assertions.assertEquals("tphuykuninttl", model.countryOrRegionForHolidays());
        Assertions.assertEquals("jdszdbuzi", model.timeColumnName());
        Assertions.assertEquals("qvgpnewuh", model.timeSeriesIdColumnNames().get(0));
        Assertions.assertEquals("vsnvbtqdxfmj", model.frequency());
        Assertions.assertEquals(FeatureLags.NONE, model.featureLags());
        Assertions.assertEquals(ShortSeriesHandlingConfiguration.PAD, model.shortSeriesHandlingConfig());
        Assertions.assertEquals(UseStl.SEASON_TREND, model.useStl());
        Assertions.assertEquals(TargetAggregationFunction.MAX, model.targetAggregateFunction());
        Assertions.assertEquals(1226506395, model.cvStepSize());
    }
}
