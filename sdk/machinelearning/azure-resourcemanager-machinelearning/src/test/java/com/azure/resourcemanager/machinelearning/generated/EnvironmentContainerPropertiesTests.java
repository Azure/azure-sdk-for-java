// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EnvironmentContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class EnvironmentContainerPropertiesTests {
    @Test
    public void testDeserialize() {
        EnvironmentContainerProperties model =
            BinaryData
                .fromString(
                    "{\"isArchived\":true,\"latestVersion\":\"onfo\",\"nextVersion\":\"uors\",\"description\":\"okwbqplh\",\"properties\":{\"yuqdu\":\"uuepzlrphwzsoldw\",\"biorktal\":\"vmnnrw\",\"miloxggdufiqndie\":\"wjhhgdnhxmsivf\"},\"tags\":{\"dotcubiipuip\":\"ofjchvcyyysf\"}}")
                .toObject(EnvironmentContainerProperties.class);
        Assertions.assertEquals("okwbqplh", model.description());
        Assertions.assertEquals("uuepzlrphwzsoldw", model.properties().get("yuqdu"));
        Assertions.assertEquals("ofjchvcyyysf", model.tags().get("dotcubiipuip"));
        Assertions.assertEquals(true, model.isArchived());
    }

    @Test
    public void testSerialize() {
        EnvironmentContainerProperties model =
            new EnvironmentContainerProperties()
                .withDescription("okwbqplh")
                .withProperties(
                    mapOf("yuqdu", "uuepzlrphwzsoldw", "biorktal", "vmnnrw", "miloxggdufiqndie", "wjhhgdnhxmsivf"))
                .withTags(mapOf("dotcubiipuip", "ofjchvcyyysf"))
                .withIsArchived(true);
        model = BinaryData.fromObject(model).toObject(EnvironmentContainerProperties.class);
        Assertions.assertEquals("okwbqplh", model.description());
        Assertions.assertEquals("uuepzlrphwzsoldw", model.properties().get("yuqdu"));
        Assertions.assertEquals("ofjchvcyyysf", model.tags().get("dotcubiipuip"));
        Assertions.assertEquals(true, model.isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
