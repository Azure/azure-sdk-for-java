// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EnvironmentContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnvironmentContainerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnvironmentContainerProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Deleting\",\"isArchived\":true,\"latestVersion\":\"zjcjbtr\",\"nextVersion\":\"ehvvib\",\"description\":\"jj\",\"tags\":{\"lftidgfcwqmpim\":\"qbeitpkxztmoob\",\"yhohujswtwkozzwc\":\"qxzhem\",\"wpfaj\":\"lkb\"},\"properties\":{\"vkcdmxzr\":\"ltlwtjjguktalhs\",\"aaomylweazu\":\"oaimlnw\",\"hwwn\":\"cse\",\"ousnfepgfewe\":\"jhlfzswpchwahf\"}}")
            .toObject(EnvironmentContainerProperties.class);
        Assertions.assertEquals("jj", model.description());
        Assertions.assertEquals("qbeitpkxztmoob", model.tags().get("lftidgfcwqmpim"));
        Assertions.assertEquals("ltlwtjjguktalhs", model.properties().get("vkcdmxzr"));
        Assertions.assertEquals(true, model.isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnvironmentContainerProperties model = new EnvironmentContainerProperties().withDescription("jj")
            .withTags(mapOf("lftidgfcwqmpim", "qbeitpkxztmoob", "yhohujswtwkozzwc", "qxzhem", "wpfaj", "lkb"))
            .withProperties(mapOf("vkcdmxzr", "ltlwtjjguktalhs", "aaomylweazu", "oaimlnw", "hwwn", "cse",
                "ousnfepgfewe", "jhlfzswpchwahf"))
            .withIsArchived(true);
        model = BinaryData.fromObject(model).toObject(EnvironmentContainerProperties.class);
        Assertions.assertEquals("jj", model.description());
        Assertions.assertEquals("qbeitpkxztmoob", model.tags().get("lftidgfcwqmpim"));
        Assertions.assertEquals("ltlwtjjguktalhs", model.properties().get("vkcdmxzr"));
        Assertions.assertEquals(true, model.isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
