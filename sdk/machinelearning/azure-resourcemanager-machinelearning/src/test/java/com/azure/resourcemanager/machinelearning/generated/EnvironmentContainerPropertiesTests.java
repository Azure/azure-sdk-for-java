// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EnvironmentContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnvironmentContainerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnvironmentContainerProperties model =
            BinaryData
                .fromString(
                    "{\"isArchived\":false,\"latestVersion\":\"ivfomiloxgg\",\"nextVersion\":\"fi\",\"description\":\"dieuzaofj\",\"properties\":{\"ubiipuipwoqonma\":\"cyyysfgdot\"},\"tags\":{\"izsh\":\"k\"}}")
                .toObject(EnvironmentContainerProperties.class);
        Assertions.assertEquals("dieuzaofj", model.description());
        Assertions.assertEquals("cyyysfgdot", model.properties().get("ubiipuipwoqonma"));
        Assertions.assertEquals("k", model.tags().get("izsh"));
        Assertions.assertEquals(false, model.isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnvironmentContainerProperties model =
            new EnvironmentContainerProperties()
                .withDescription("dieuzaofj")
                .withProperties(mapOf("ubiipuipwoqonma", "cyyysfgdot"))
                .withTags(mapOf("izsh", "k"))
                .withIsArchived(false);
        model = BinaryData.fromObject(model).toObject(EnvironmentContainerProperties.class);
        Assertions.assertEquals("dieuzaofj", model.description());
        Assertions.assertEquals("cyyysfgdot", model.properties().get("ubiipuipwoqonma"));
        Assertions.assertEquals("k", model.tags().get("izsh"));
        Assertions.assertEquals(false, model.isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
