// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.DataContainerInner;
import com.azure.resourcemanager.machinelearning.models.DataContainer;
import com.azure.resourcemanager.machinelearning.models.DataContainerProperties;
import com.azure.resourcemanager.machinelearning.models.DataType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataContainersCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"dataType\":\"uri_file\",\"isArchived\":true,\"latestVersion\":\"d\",\"nextVersion\":\"ooelm\",\"description\":\"d\",\"tags\":{\"mwjwsmnwbmac\":\"ykgjjsmvsiyqm\",\"quesxplcsinbulo\":\"emmriyzy\",\"kwqqpwcids\":\"xxhcynnmvaiz\"},\"properties\":{\"kalbcyuwahwzagv\":\"qyzmrtfdlgpryyjl\",\"nuhgy\":\"idzcephn\",\"mrwpe\":\"zkhi\",\"rjbpertjpair\":\"i\"}},\"id\":\"jmcgiw\",\"name\":\"ywpejtvqopugrs\",\"type\":\"rgiuztqefzyp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataContainer response = manager.dataContainers()
            .createOrUpdateWithResponse("rxkulytivviyq", "nbxxyfozbgody", "xjikfrxvlusedpn",
                new DataContainerInner().withProperties(new DataContainerProperties().withDescription("rdvhbgtuhwh")
                    .withTags(mapOf("bphylnuzgz", "we", "dusebkcfetxp", "x", "uiqr", "nterma"))
                    .withProperties(mapOf("rbi", "ftubqwxvs", "itsxhvsgz", "zjlgrwjbsycukboc", "ttampqep",
                        "wqieyxjkctyq", "ub", "ft"))
                    .withIsArchived(true)
                    .withDataType(DataType.MLTABLE)),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("d", response.properties().description());
        Assertions.assertEquals("ykgjjsmvsiyqm", response.properties().tags().get("mwjwsmnwbmac"));
        Assertions.assertEquals("qyzmrtfdlgpryyjl", response.properties().properties().get("kalbcyuwahwzagv"));
        Assertions.assertEquals(true, response.properties().isArchived());
        Assertions.assertEquals(DataType.URI_FILE, response.properties().dataType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
