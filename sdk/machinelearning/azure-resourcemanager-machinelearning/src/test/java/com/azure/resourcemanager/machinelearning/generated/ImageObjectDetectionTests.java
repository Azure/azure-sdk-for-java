// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.ModelSize;
import com.azure.resourcemanager.machinelearning.models.ObjectDetectionPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import com.azure.resourcemanager.machinelearning.models.ValidationMetricType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ImageObjectDetectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageObjectDetection model = BinaryData.fromString(
            "{\"taskType\":\"ImageObjectDetection\",\"primaryMetric\":\"MeanAveragePrecision\",\"modelSettings\":{\"boxDetectionsPerImage\":710248775,\"boxScoreThreshold\":35.895603,\"imageSize\":422240348,\"maxSize\":1978252606,\"minSize\":623951562,\"modelSize\":\"ExtraLarge\",\"multiScale\":false,\"nmsIouThreshold\":78.472176,\"tileGridSize\":\"sfhshag\",\"tileOverlapRatio\":60.31503,\"tilePredictionsNmsThreshold\":40.6852,\"validationIouThreshold\":80.38389,\"validationMetricType\":\"Voc\",\"amsGradient\":true,\"advancedSettings\":\"ynpmggqgagen\",\"augmentations\":\"bugihcdvfo\",\"beta1\":78.53713,\"beta2\":79.4358,\"checkpointFrequency\":2145428842,\"checkpointRunId\":\"jzsaxzgkqwvde\",\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"uri\":\"jnaphifk\",\"mode\":\"EvalDownload\",\"description\":\"p\"},\"distributed\":false,\"earlyStopping\":true,\"earlyStoppingDelay\":567285474,\"earlyStoppingPatience\":2035748937,\"evaluationFrequency\":1219115371,\"enableOnnxNormalization\":false,\"gradientAccumulationStep\":1955623996,\"layersToFreeze\":38012767,\"learningRate\":98.00021,\"learningRateScheduler\":\"WarmupCosine\",\"modelName\":\"mskhnkkhbyk\",\"momentum\":82.803696,\"nesterov\":true,\"numberOfEpochs\":1727395180,\"numberOfWorkers\":625230069,\"optimizer\":\"Adam\",\"randomSeed\":870078306,\"stepLRGamma\":37.18851,\"stepLRStepSize\":386873853,\"trainingBatchSize\":1358303870,\"validationBatchSize\":312601450,\"warmupCosineLRCycles\":42.782837,\"warmupCosineLRWarmupEpochs\":1409319523,\"weightDecay\":78.56785},\"searchSpace\":[{\"boxDetectionsPerImage\":\"fuzzlapy\",\"boxScoreThreshold\":\"lvzcgulae\",\"imageSize\":\"iauqsuptessjlw\",\"maxSize\":\"atpvbl\",\"minSize\":\"xgxqayga\",\"modelSize\":\"kvc\",\"multiScale\":\"pvlcjbvyez\",\"nmsIouThreshold\":\"jkqonbw\",\"tileGridSize\":\"ieyozvrcwfpucwnb\",\"tileOverlapRatio\":\"qefgzjvbx\",\"tilePredictionsNmsThreshold\":\"bg\",\"validationIouThreshold\":\"rx\",\"validationMetricType\":\"uc\",\"amsGradient\":\"gvkdlhuduk\",\"augmentations\":\"joafm\",\"beta1\":\"exulvoepknarseia\",\"beta2\":\"sqoacb\",\"distributed\":\"dgsapleqfg\",\"earlyStopping\":\"env\",\"earlyStoppingDelay\":\"glvyakeszsuuvul\",\"earlyStoppingPatience\":\"cwgg\",\"evaluationFrequency\":\"xvlqgfbrve\",\"enableOnnxNormalization\":\"c\",\"gradientAccumulationStep\":\"vphirlzbip\",\"layersToFreeze\":\"nnepkwzzzku\",\"learningRate\":\"uwcjomip\",\"learningRateScheduler\":\"kaujttwykoxv\",\"modelName\":\"ofxxdplrelfk\",\"momentum\":\"ahcbtuxlbp\",\"nesterov\":\"hrfjenrazwefiktl\",\"numberOfEpochs\":\"ashtostjixyzseci\",\"numberOfWorkers\":\"zdwjtacfvvtdpcbp\",\"optimizer\":\"omcsaugbrhfiwltk\",\"randomSeed\":\"su\",\"stepLRGamma\":\"ethklxwhcv\",\"stepLRStepSize\":\"yyhgqokjbmsr\",\"trainingBatchSize\":\"xyxxhwr\",\"validationBatchSize\":\"omaqsyilpzzb\",\"warmupCosineLRCycles\":\"nrz\",\"warmupCosineLRWarmupEpochs\":\"sxagysokli\",\"weightDecay\":\"s\"}],\"limitSettings\":{\"maxTrials\":1698205031,\"timeout\":\"PT29H19M17S\",\"maxConcurrentTrials\":716194367},\"sweepSettings\":{\"samplingAlgorithm\":\"Random\",\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"evaluationInterval\":1409785,\"delayEvaluation\":962981411}},\"validationData\":{\"jobInputType\":\"mltable\",\"uri\":\"cydyllmxv\",\"mode\":\"Download\",\"description\":\"zsyqagqllcbrvaid\"},\"validationDataSize\":69.76448748367842,\"logVerbosity\":\"Critical\",\"trainingData\":{\"jobInputType\":\"mltable\",\"uri\":\"rrqwfyybpt\",\"mode\":\"EvalDownload\",\"description\":\"nogykugdla\"},\"targetColumnName\":\"avgthkslge\"}")
            .toObject(ImageObjectDetection.class);
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.logVerbosity());
        Assertions.assertEquals("nogykugdla", model.trainingData().description());
        Assertions.assertEquals("rrqwfyybpt", model.trainingData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("avgthkslge", model.targetColumnName());
        Assertions.assertEquals(ObjectDetectionPrimaryMetrics.MEAN_AVERAGE_PRECISION, model.primaryMetric());
        Assertions.assertEquals(true, model.modelSettings().amsGradient());
        Assertions.assertEquals("ynpmggqgagen", model.modelSettings().advancedSettings());
        Assertions.assertEquals("bugihcdvfo", model.modelSettings().augmentations());
        Assertions.assertEquals(78.53713F, model.modelSettings().beta1());
        Assertions.assertEquals(79.4358F, model.modelSettings().beta2());
        Assertions.assertEquals(2145428842, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("jzsaxzgkqwvde", model.modelSettings().checkpointRunId());
        Assertions.assertEquals("p", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals("jnaphifk", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals(false, model.modelSettings().distributed());
        Assertions.assertEquals(true, model.modelSettings().earlyStopping());
        Assertions.assertEquals(567285474, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(2035748937, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(1219115371, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(false, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1955623996, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(38012767, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(98.00021F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("mskhnkkhbyk", model.modelSettings().modelName());
        Assertions.assertEquals(82.803696F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(1727395180, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(625230069, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAM, model.modelSettings().optimizer());
        Assertions.assertEquals(870078306, model.modelSettings().randomSeed());
        Assertions.assertEquals(37.18851F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(386873853, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(1358303870, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(312601450, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(42.782837F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(1409319523, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(78.56785F, model.modelSettings().weightDecay());
        Assertions.assertEquals(710248775, model.modelSettings().boxDetectionsPerImage());
        Assertions.assertEquals(35.895603F, model.modelSettings().boxScoreThreshold());
        Assertions.assertEquals(422240348, model.modelSettings().imageSize());
        Assertions.assertEquals(1978252606, model.modelSettings().maxSize());
        Assertions.assertEquals(623951562, model.modelSettings().minSize());
        Assertions.assertEquals(ModelSize.EXTRA_LARGE, model.modelSettings().modelSize());
        Assertions.assertEquals(false, model.modelSettings().multiScale());
        Assertions.assertEquals(78.472176F, model.modelSettings().nmsIouThreshold());
        Assertions.assertEquals("sfhshag", model.modelSettings().tileGridSize());
        Assertions.assertEquals(60.31503F, model.modelSettings().tileOverlapRatio());
        Assertions.assertEquals(40.6852F, model.modelSettings().tilePredictionsNmsThreshold());
        Assertions.assertEquals(80.38389F, model.modelSettings().validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.VOC, model.modelSettings().validationMetricType());
        Assertions.assertEquals("gvkdlhuduk", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("joafm", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("exulvoepknarseia", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("sqoacb", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("dgsapleqfg", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("env", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("glvyakeszsuuvul", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("cwgg", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("xvlqgfbrve", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("c", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("vphirlzbip", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("nnepkwzzzku", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("uwcjomip", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("kaujttwykoxv", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("ofxxdplrelfk", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("ahcbtuxlbp", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("hrfjenrazwefiktl", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("ashtostjixyzseci", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("zdwjtacfvvtdpcbp", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("omcsaugbrhfiwltk", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("su", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("ethklxwhcv", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("yyhgqokjbmsr", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("xyxxhwr", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("omaqsyilpzzb", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("nrz", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("sxagysokli", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("s", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("fuzzlapy", model.searchSpace().get(0).boxDetectionsPerImage());
        Assertions.assertEquals("lvzcgulae", model.searchSpace().get(0).boxScoreThreshold());
        Assertions.assertEquals("iauqsuptessjlw", model.searchSpace().get(0).imageSize());
        Assertions.assertEquals("atpvbl", model.searchSpace().get(0).maxSize());
        Assertions.assertEquals("xgxqayga", model.searchSpace().get(0).minSize());
        Assertions.assertEquals("kvc", model.searchSpace().get(0).modelSize());
        Assertions.assertEquals("pvlcjbvyez", model.searchSpace().get(0).multiScale());
        Assertions.assertEquals("jkqonbw", model.searchSpace().get(0).nmsIouThreshold());
        Assertions.assertEquals("ieyozvrcwfpucwnb", model.searchSpace().get(0).tileGridSize());
        Assertions.assertEquals("qefgzjvbx", model.searchSpace().get(0).tileOverlapRatio());
        Assertions.assertEquals("bg", model.searchSpace().get(0).tilePredictionsNmsThreshold());
        Assertions.assertEquals("rx", model.searchSpace().get(0).validationIouThreshold());
        Assertions.assertEquals("uc", model.searchSpace().get(0).validationMetricType());
        Assertions.assertEquals(1698205031, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT29H19M17S"), model.limitSettings().timeout());
        Assertions.assertEquals(716194367, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(SamplingAlgorithmType.RANDOM, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals(1409785, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(962981411, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals("zsyqagqllcbrvaid", model.validationData().description());
        Assertions.assertEquals("cydyllmxv", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.validationData().mode());
        Assertions.assertEquals(69.76448748367842D, model.validationDataSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageObjectDetection model = new ImageObjectDetection().withLogVerbosity(LogVerbosity.CRITICAL)
            .withTrainingData(new MLTableJobInput().withDescription("nogykugdla")
                .withUri("rrqwfyybpt")
                .withMode(InputDeliveryMode.EVAL_DOWNLOAD))
            .withTargetColumnName("avgthkslge")
            .withPrimaryMetric(ObjectDetectionPrimaryMetrics.MEAN_AVERAGE_PRECISION)
            .withModelSettings(new ImageModelSettingsObjectDetection().withAmsGradient(true)
                .withAdvancedSettings("ynpmggqgagen")
                .withAugmentations("bugihcdvfo")
                .withBeta1(78.53713F)
                .withBeta2(79.4358F)
                .withCheckpointFrequency(2145428842)
                .withCheckpointRunId("jzsaxzgkqwvde")
                .withCheckpointModel(new MLFlowModelJobInput().withDescription("p")
                    .withUri("jnaphifk")
                    .withMode(InputDeliveryMode.EVAL_DOWNLOAD))
                .withDistributed(false)
                .withEarlyStopping(true)
                .withEarlyStoppingDelay(567285474)
                .withEarlyStoppingPatience(2035748937)
                .withEvaluationFrequency(1219115371)
                .withEnableOnnxNormalization(false)
                .withGradientAccumulationStep(1955623996)
                .withLayersToFreeze(38012767)
                .withLearningRate(98.00021F)
                .withLearningRateScheduler(LearningRateScheduler.WARMUP_COSINE)
                .withModelName("mskhnkkhbyk")
                .withMomentum(82.803696F)
                .withNesterov(true)
                .withNumberOfEpochs(1727395180)
                .withNumberOfWorkers(625230069)
                .withOptimizer(StochasticOptimizer.ADAM)
                .withRandomSeed(870078306)
                .withStepLRGamma(37.18851F)
                .withStepLRStepSize(386873853)
                .withTrainingBatchSize(1358303870)
                .withValidationBatchSize(312601450)
                .withWarmupCosineLRCycles(42.782837F)
                .withWarmupCosineLRWarmupEpochs(1409319523)
                .withWeightDecay(78.56785F)
                .withBoxDetectionsPerImage(710248775)
                .withBoxScoreThreshold(35.895603F)
                .withImageSize(422240348)
                .withMaxSize(1978252606)
                .withMinSize(623951562)
                .withModelSize(ModelSize.EXTRA_LARGE)
                .withMultiScale(false)
                .withNmsIouThreshold(78.472176F)
                .withTileGridSize("sfhshag")
                .withTileOverlapRatio(60.31503F)
                .withTilePredictionsNmsThreshold(40.6852F)
                .withValidationIouThreshold(80.38389F)
                .withValidationMetricType(ValidationMetricType.VOC))
            .withSearchSpace(
                Arrays.asList(new ImageModelDistributionSettingsObjectDetection().withAmsGradient("gvkdlhuduk")
                    .withAugmentations("joafm")
                    .withBeta1("exulvoepknarseia")
                    .withBeta2("sqoacb")
                    .withDistributed("dgsapleqfg")
                    .withEarlyStopping("env")
                    .withEarlyStoppingDelay("glvyakeszsuuvul")
                    .withEarlyStoppingPatience("cwgg")
                    .withEvaluationFrequency("xvlqgfbrve")
                    .withEnableOnnxNormalization("c")
                    .withGradientAccumulationStep("vphirlzbip")
                    .withLayersToFreeze("nnepkwzzzku")
                    .withLearningRate("uwcjomip")
                    .withLearningRateScheduler("kaujttwykoxv")
                    .withModelName("ofxxdplrelfk")
                    .withMomentum("ahcbtuxlbp")
                    .withNesterov("hrfjenrazwefiktl")
                    .withNumberOfEpochs("ashtostjixyzseci")
                    .withNumberOfWorkers("zdwjtacfvvtdpcbp")
                    .withOptimizer("omcsaugbrhfiwltk")
                    .withRandomSeed("su")
                    .withStepLRGamma("ethklxwhcv")
                    .withStepLRStepSize("yyhgqokjbmsr")
                    .withTrainingBatchSize("xyxxhwr")
                    .withValidationBatchSize("omaqsyilpzzb")
                    .withWarmupCosineLRCycles("nrz")
                    .withWarmupCosineLRWarmupEpochs("sxagysokli")
                    .withWeightDecay("s")
                    .withBoxDetectionsPerImage("fuzzlapy")
                    .withBoxScoreThreshold("lvzcgulae")
                    .withImageSize("iauqsuptessjlw")
                    .withMaxSize("atpvbl")
                    .withMinSize("xgxqayga")
                    .withModelSize("kvc")
                    .withMultiScale("pvlcjbvyez")
                    .withNmsIouThreshold("jkqonbw")
                    .withTileGridSize("ieyozvrcwfpucwnb")
                    .withTileOverlapRatio("qefgzjvbx")
                    .withTilePredictionsNmsThreshold("bg")
                    .withValidationIouThreshold("rx")
                    .withValidationMetricType("uc")))
            .withLimitSettings(new ImageLimitSettings().withMaxTrials(1698205031)
                .withTimeout(Duration.parse("PT29H19M17S"))
                .withMaxConcurrentTrials(716194367))
            .withSweepSettings(new ImageSweepSettings().withSamplingAlgorithm(SamplingAlgorithmType.RANDOM)
                .withEarlyTermination(
                    new EarlyTerminationPolicy().withEvaluationInterval(1409785).withDelayEvaluation(962981411)))
            .withValidationData(new MLTableJobInput().withDescription("zsyqagqllcbrvaid")
                .withUri("cydyllmxv")
                .withMode(InputDeliveryMode.DOWNLOAD))
            .withValidationDataSize(69.76448748367842D);
        model = BinaryData.fromObject(model).toObject(ImageObjectDetection.class);
        Assertions.assertEquals(LogVerbosity.CRITICAL, model.logVerbosity());
        Assertions.assertEquals("nogykugdla", model.trainingData().description());
        Assertions.assertEquals("rrqwfyybpt", model.trainingData().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.trainingData().mode());
        Assertions.assertEquals("avgthkslge", model.targetColumnName());
        Assertions.assertEquals(ObjectDetectionPrimaryMetrics.MEAN_AVERAGE_PRECISION, model.primaryMetric());
        Assertions.assertEquals(true, model.modelSettings().amsGradient());
        Assertions.assertEquals("ynpmggqgagen", model.modelSettings().advancedSettings());
        Assertions.assertEquals("bugihcdvfo", model.modelSettings().augmentations());
        Assertions.assertEquals(78.53713F, model.modelSettings().beta1());
        Assertions.assertEquals(79.4358F, model.modelSettings().beta2());
        Assertions.assertEquals(2145428842, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("jzsaxzgkqwvde", model.modelSettings().checkpointRunId());
        Assertions.assertEquals("p", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals("jnaphifk", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals(InputDeliveryMode.EVAL_DOWNLOAD, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals(false, model.modelSettings().distributed());
        Assertions.assertEquals(true, model.modelSettings().earlyStopping());
        Assertions.assertEquals(567285474, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(2035748937, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(1219115371, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(false, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(1955623996, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(38012767, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(98.00021F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.WARMUP_COSINE, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("mskhnkkhbyk", model.modelSettings().modelName());
        Assertions.assertEquals(82.803696F, model.modelSettings().momentum());
        Assertions.assertEquals(true, model.modelSettings().nesterov());
        Assertions.assertEquals(1727395180, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(625230069, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAM, model.modelSettings().optimizer());
        Assertions.assertEquals(870078306, model.modelSettings().randomSeed());
        Assertions.assertEquals(37.18851F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(386873853, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(1358303870, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(312601450, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(42.782837F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(1409319523, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(78.56785F, model.modelSettings().weightDecay());
        Assertions.assertEquals(710248775, model.modelSettings().boxDetectionsPerImage());
        Assertions.assertEquals(35.895603F, model.modelSettings().boxScoreThreshold());
        Assertions.assertEquals(422240348, model.modelSettings().imageSize());
        Assertions.assertEquals(1978252606, model.modelSettings().maxSize());
        Assertions.assertEquals(623951562, model.modelSettings().minSize());
        Assertions.assertEquals(ModelSize.EXTRA_LARGE, model.modelSettings().modelSize());
        Assertions.assertEquals(false, model.modelSettings().multiScale());
        Assertions.assertEquals(78.472176F, model.modelSettings().nmsIouThreshold());
        Assertions.assertEquals("sfhshag", model.modelSettings().tileGridSize());
        Assertions.assertEquals(60.31503F, model.modelSettings().tileOverlapRatio());
        Assertions.assertEquals(40.6852F, model.modelSettings().tilePredictionsNmsThreshold());
        Assertions.assertEquals(80.38389F, model.modelSettings().validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.VOC, model.modelSettings().validationMetricType());
        Assertions.assertEquals("gvkdlhuduk", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("joafm", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("exulvoepknarseia", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("sqoacb", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("dgsapleqfg", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("env", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("glvyakeszsuuvul", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("cwgg", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("xvlqgfbrve", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("c", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("vphirlzbip", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("nnepkwzzzku", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("uwcjomip", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("kaujttwykoxv", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("ofxxdplrelfk", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("ahcbtuxlbp", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("hrfjenrazwefiktl", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("ashtostjixyzseci", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("zdwjtacfvvtdpcbp", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("omcsaugbrhfiwltk", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("su", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("ethklxwhcv", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("yyhgqokjbmsr", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("xyxxhwr", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("omaqsyilpzzb", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("nrz", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("sxagysokli", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("s", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("fuzzlapy", model.searchSpace().get(0).boxDetectionsPerImage());
        Assertions.assertEquals("lvzcgulae", model.searchSpace().get(0).boxScoreThreshold());
        Assertions.assertEquals("iauqsuptessjlw", model.searchSpace().get(0).imageSize());
        Assertions.assertEquals("atpvbl", model.searchSpace().get(0).maxSize());
        Assertions.assertEquals("xgxqayga", model.searchSpace().get(0).minSize());
        Assertions.assertEquals("kvc", model.searchSpace().get(0).modelSize());
        Assertions.assertEquals("pvlcjbvyez", model.searchSpace().get(0).multiScale());
        Assertions.assertEquals("jkqonbw", model.searchSpace().get(0).nmsIouThreshold());
        Assertions.assertEquals("ieyozvrcwfpucwnb", model.searchSpace().get(0).tileGridSize());
        Assertions.assertEquals("qefgzjvbx", model.searchSpace().get(0).tileOverlapRatio());
        Assertions.assertEquals("bg", model.searchSpace().get(0).tilePredictionsNmsThreshold());
        Assertions.assertEquals("rx", model.searchSpace().get(0).validationIouThreshold());
        Assertions.assertEquals("uc", model.searchSpace().get(0).validationMetricType());
        Assertions.assertEquals(1698205031, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT29H19M17S"), model.limitSettings().timeout());
        Assertions.assertEquals(716194367, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(SamplingAlgorithmType.RANDOM, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals(1409785, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(962981411, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals("zsyqagqllcbrvaid", model.validationData().description());
        Assertions.assertEquals("cydyllmxv", model.validationData().uri());
        Assertions.assertEquals(InputDeliveryMode.DOWNLOAD, model.validationData().mode());
        Assertions.assertEquals(69.76448748367842D, model.validationDataSize());
    }
}
