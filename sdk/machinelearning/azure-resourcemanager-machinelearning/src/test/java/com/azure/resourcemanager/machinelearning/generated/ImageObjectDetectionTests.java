// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.EarlyTerminationPolicy;
import com.azure.resourcemanager.machinelearning.models.ImageLimitSettings;
import com.azure.resourcemanager.machinelearning.models.ImageModelDistributionSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageModelSettingsObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageObjectDetection;
import com.azure.resourcemanager.machinelearning.models.ImageSweepSettings;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LearningRateScheduler;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLFlowModelJobInput;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.ModelSize;
import com.azure.resourcemanager.machinelearning.models.ObjectDetectionPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.SamplingAlgorithmType;
import com.azure.resourcemanager.machinelearning.models.StochasticOptimizer;
import com.azure.resourcemanager.machinelearning.models.ValidationMetricType;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImageObjectDetectionTests {
    @Test
    public void testDeserialize() {
        ImageObjectDetection model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"ImageObjectDetection\",\"primaryMetric\":\"MeanAveragePrecision\",\"modelSettings\":{\"boxDetectionsPerImage\":830937506,\"boxScoreThreshold\":33.446144,\"imageSize\":1366619755,\"maxSize\":573797574,\"minSize\":2123932568,\"modelSize\":\"None\",\"multiScale\":false,\"nmsIouThreshold\":87.65949,\"tileGridSize\":\"gyshqrdgrtwmewj\",\"tileOverlapRatio\":12.454754,\"tilePredictionsNmsThreshold\":40.32904,\"validationIouThreshold\":7.5836124,\"validationMetricType\":\"CocoVoc\",\"advancedSettings\":\"wjcayerzrr\",\"amsGradient\":false,\"augmentations\":\"bylpolwzr\",\"beta1\":77.71428,\"beta2\":0.12291074,\"checkpointFrequency\":1626278637,\"checkpointModel\":{\"jobInputType\":\"mlflow_model\",\"mode\":\"EvalMount\",\"uri\":\"scjfncjwvuagf\",\"description\":\"tltng\"},\"checkpointRunId\":\"reuptrk\",\"distributed\":false,\"earlyStopping\":true,\"earlyStoppingDelay\":1968790697,\"earlyStoppingPatience\":1051364125,\"enableOnnxNormalization\":false,\"evaluationFrequency\":45395543,\"gradientAccumulationStep\":922297419,\"layersToFreeze\":202449168,\"learningRate\":99.375496,\"learningRateScheduler\":\"Step\",\"modelName\":\"lslrcigtzjc\",\"momentum\":33.693993,\"nesterov\":false,\"numberOfEpochs\":521744889,\"numberOfWorkers\":357206525,\"optimizer\":\"Adamw\",\"randomSeed\":477714281,\"stepLRGamma\":32.488316,\"stepLRStepSize\":1161952747,\"trainingBatchSize\":632493022,\"validationBatchSize\":1964087794,\"warmupCosineLRCycles\":10.143196,\"warmupCosineLRWarmupEpochs\":1914716275,\"weightDecay\":26.761473},\"searchSpace\":[{\"boxDetectionsPerImage\":\"yezslpu\",\"boxScoreThreshold\":\"cbdsvalpnptwtrk\",\"imageSize\":\"pazwug\",\"maxSize\":\"qvn\",\"minSize\":\"bfe\",\"modelSize\":\"ldiuhzzgqlm\",\"multiScale\":\"ewzgiud\",\"nmsIouThreshold\":\"xpqh\",\"tileGridSize\":\"qhnmhk\",\"tileOverlapRatio\":\"zsdsuxheqdgcrux\",\"tilePredictionsNmsThreshold\":\"inymmqgwokmikp\",\"validationIouThreshold\":\"fbmjxuvji\",\"validationMetricType\":\"dvhaxdvw\",\"amsGradient\":\"ehpphthdklmveta\",\"augmentations\":\"akfqoixwgiksb\",\"beta1\":\"tooxrpog\",\"beta2\":\"hchgjtnhtukf\",\"distributed\":\"ihmbfntume\",\"earlyStopping\":\"bxvqxbnuvw\",\"earlyStoppingDelay\":\"asgom\",\"earlyStoppingPatience\":\"jzwxuqgovsxpwwz\",\"enableOnnxNormalization\":\"fmkk\",\"evaluationFrequency\":\"gfredmlscg\",\"gradientAccumulationStep\":\"lccnaovjowaz\",\"layersToFreeze\":\"abacomlyotgkws\",\"learningRate\":\"srqorcgenmvceb\",\"learningRateScheduler\":\"etqujxcxxq\",\"modelName\":\"cqjkedwqu\",\"momentum\":\"gojmrvvxwjon\",\"nesterov\":\"se\",\"numberOfEpochs\":\"q\",\"numberOfWorkers\":\"ilcchskxxkansbvr\",\"optimizer\":\"qgvtojrulfu\",\"randomSeed\":\"ejrthcfjzhxlyub\",\"stepLRGamma\":\"rostvrjeqmtzz\",\"stepLRStepSize\":\"qrztrxal\",\"trainingBatchSize\":\"d\",\"validationBatchSize\":\"bsrwrsnrhpqat\",\"warmupCosineLRCycles\":\"kkvyanxk\",\"warmupCosineLRWarmupEpochs\":\"csemsvuvd\",\"weightDecay\":\"qxetqmmlivrjjx\"},{\"boxDetectionsPerImage\":\"xdchp\",\"boxScoreThreshold\":\"xlehzlxpgfquwzp\",\"imageSize\":\"ibelwcerwkw\",\"maxSize\":\"jxljtxbusq\",\"minSize\":\"xxniuisdzhgbd\",\"modelSize\":\"pagsecnad\",\"multiScale\":\"wqrgxfllmqi\",\"nmsIouThreshold\":\"ezoell\",\"tileGridSize\":\"kiiwvmtu\",\"tileOverlapRatio\":\"pymdjfuax\",\"tilePredictionsNmsThreshold\":\"qvqpilrg\",\"validationIouThreshold\":\"canlduwzorxs\",\"validationMetricType\":\"x\",\"amsGradient\":\"klxymxkqvfqepdxc\",\"augmentations\":\"uubwyvpjb\",\"beta1\":\"cpj\",\"beta2\":\"uqgixex\",\"distributed\":\"dfbwljav\",\"earlyStopping\":\"erkjddv\",\"earlyStoppingDelay\":\"liegftcvbi\",\"earlyStoppingPatience\":\"tksdwgdnkefgmw\",\"enableOnnxNormalization\":\"c\",\"evaluationFrequency\":\"uvczldbgl\",\"gradientAccumulationStep\":\"utbaaqgze\",\"layersToFreeze\":\"jclyzgsnor\",\"learningRate\":\"gmnzjotvmrx\",\"learningRateScheduler\":\"lobvv\",\"modelName\":\"hvhd\",\"momentum\":\"ayfluiyuosnu\",\"nesterov\":\"t\",\"numberOfEpochs\":\"vhyibdrqrsw\",\"numberOfWorkers\":\"uubpyrow\",\"optimizer\":\"oxztfwfqch\",\"randomSeed\":\"zevjnnctag\",\"stepLRGamma\":\"v\",\"stepLRStepSize\":\"pqpemhz\",\"trainingBatchSize\":\"krepdqhqyhwqwem\",\"validationBatchSize\":\"qabckmzeoxin\",\"warmupCosineLRCycles\":\"re\",\"warmupCosineLRWarmupEpochs\":\"twhlpuzjpce\",\"weightDecay\":\"nzangprbfaxy\"},{\"boxDetectionsPerImage\":\"lbciphmsexro\",\"boxScoreThreshold\":\"ndktxfv\",\"imageSize\":\"feeqgpkrietbgnix\",\"maxSize\":\"wwzkyf\",\"minSize\":\"wpiwxeiicrmpep\",\"modelSize\":\"dm\",\"multiScale\":\"xijvskwsdgkjgyac\",\"nmsIouThreshold\":\"asekwefcvoinw\",\"tileGridSize\":\"artwyxqic\",\"tileOverlapRatio\":\"dvatdavuqm\",\"tilePredictionsNmsThreshold\":\"ymsfobjlqu\",\"validationIouThreshold\":\"ezcjumvpsi\",\"validationMetricType\":\"oyoiglkmiqw\",\"amsGradient\":\"raclibbfqpspkla\",\"augmentations\":\"dgnhautw\",\"beta1\":\"exzgpmnmabedd\",\"beta2\":\"lwgdfpfqfpcvs\",\"distributed\":\"l\",\"earlyStopping\":\"rvwerfwxbsmtb\",\"earlyStoppingDelay\":\"jehhci\",\"earlyStoppingPatience\":\"wdv\",\"enableOnnxNormalization\":\"brekqhsqhtf\",\"evaluationFrequency\":\"pqbye\",\"gradientAccumulationStep\":\"wy\",\"layersToFreeze\":\"dqigmg\",\"learningRate\":\"inztxl\",\"learningRateScheduler\":\"khnjcmrnkfm\",\"modelName\":\"cqtwmlmhjnqtq\",\"momentum\":\"hj\",\"nesterov\":\"vragpokddx\",\"numberOfEpochs\":\"hhkvguavtptbk\",\"numberOfWorkers\":\"kqynspgbvo\",\"optimizer\":\"bkkwvdxae\",\"randomSeed\":\"okmyr\",\"stepLRGamma\":\"ialzbnobrqlp\",\"stepLRStepSize\":\"jtrpzuyud\",\"trainingBatchSize\":\"bxnhsqeaeo\",\"validationBatchSize\":\"elwg\",\"warmupCosineLRCycles\":\"uruzy\",\"warmupCosineLRWarmupEpochs\":\"arogatmolji\",\"weightDecay\":\"mpinmzvfkneerzzt\"}],\"limitSettings\":{\"maxConcurrentTrials\":805433405,\"maxTrials\":25900560,\"timeout\":\"PT31H30M2S\"},\"sweepSettings\":{\"earlyTermination\":{\"policyType\":\"EarlyTerminationPolicy\",\"delayEvaluation\":1137833874,\"evaluationInterval\":1778426886},\"samplingAlgorithm\":\"Bayesian\"},\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadWriteMount\",\"uri\":\"elf\",\"description\":\"k\"},\"validationDataSize\":1.5769918591204024,\"logVerbosity\":\"Debug\",\"targetColumnName\":\"tdmiwjekptyca\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadWriteMount\",\"uri\":\"jzcqymlcfnz\",\"description\":\"hsurlgw\"}}")
                .toObject(ImageObjectDetection.class);
        Assertions.assertEquals(LogVerbosity.DEBUG, model.logVerbosity());
        Assertions.assertEquals("tdmiwjekptyca", model.targetColumnName());
        Assertions.assertEquals("hsurlgw", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("jzcqymlcfnz", model.trainingData().uri());
        Assertions.assertEquals(ObjectDetectionPrimaryMetrics.MEAN_AVERAGE_PRECISION, model.primaryMetric());
        Assertions.assertEquals("wjcayerzrr", model.modelSettings().advancedSettings());
        Assertions.assertEquals(false, model.modelSettings().amsGradient());
        Assertions.assertEquals("bylpolwzr", model.modelSettings().augmentations());
        Assertions.assertEquals(77.71428F, model.modelSettings().beta1());
        Assertions.assertEquals(0.12291074F, model.modelSettings().beta2());
        Assertions.assertEquals(1626278637, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("tltng", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("scjfncjwvuagf", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("reuptrk", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(false, model.modelSettings().distributed());
        Assertions.assertEquals(true, model.modelSettings().earlyStopping());
        Assertions.assertEquals(1968790697, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(1051364125, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(false, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(45395543, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(922297419, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(202449168, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(99.375496F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.STEP, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("lslrcigtzjc", model.modelSettings().modelName());
        Assertions.assertEquals(33.693993F, model.modelSettings().momentum());
        Assertions.assertEquals(false, model.modelSettings().nesterov());
        Assertions.assertEquals(521744889, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(357206525, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAMW, model.modelSettings().optimizer());
        Assertions.assertEquals(477714281, model.modelSettings().randomSeed());
        Assertions.assertEquals(32.488316F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(1161952747, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(632493022, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(1964087794, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(10.143196F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(1914716275, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(26.761473F, model.modelSettings().weightDecay());
        Assertions.assertEquals(830937506, model.modelSettings().boxDetectionsPerImage());
        Assertions.assertEquals(33.446144F, model.modelSettings().boxScoreThreshold());
        Assertions.assertEquals(1366619755, model.modelSettings().imageSize());
        Assertions.assertEquals(573797574, model.modelSettings().maxSize());
        Assertions.assertEquals(2123932568, model.modelSettings().minSize());
        Assertions.assertEquals(ModelSize.NONE, model.modelSettings().modelSize());
        Assertions.assertEquals(false, model.modelSettings().multiScale());
        Assertions.assertEquals(87.65949F, model.modelSettings().nmsIouThreshold());
        Assertions.assertEquals("gyshqrdgrtwmewj", model.modelSettings().tileGridSize());
        Assertions.assertEquals(12.454754F, model.modelSettings().tileOverlapRatio());
        Assertions.assertEquals(40.32904F, model.modelSettings().tilePredictionsNmsThreshold());
        Assertions.assertEquals(7.5836124F, model.modelSettings().validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.COCO_VOC, model.modelSettings().validationMetricType());
        Assertions.assertEquals("ehpphthdklmveta", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("akfqoixwgiksb", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("tooxrpog", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("hchgjtnhtukf", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("ihmbfntume", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("bxvqxbnuvw", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("asgom", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("jzwxuqgovsxpwwz", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("fmkk", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("gfredmlscg", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("lccnaovjowaz", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("abacomlyotgkws", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("srqorcgenmvceb", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("etqujxcxxq", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("cqjkedwqu", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("gojmrvvxwjon", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("se", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("q", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("ilcchskxxkansbvr", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("qgvtojrulfu", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("ejrthcfjzhxlyub", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("rostvrjeqmtzz", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("qrztrxal", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("d", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("bsrwrsnrhpqat", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("kkvyanxk", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("csemsvuvd", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("qxetqmmlivrjjx", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("yezslpu", model.searchSpace().get(0).boxDetectionsPerImage());
        Assertions.assertEquals("cbdsvalpnptwtrk", model.searchSpace().get(0).boxScoreThreshold());
        Assertions.assertEquals("pazwug", model.searchSpace().get(0).imageSize());
        Assertions.assertEquals("qvn", model.searchSpace().get(0).maxSize());
        Assertions.assertEquals("bfe", model.searchSpace().get(0).minSize());
        Assertions.assertEquals("ldiuhzzgqlm", model.searchSpace().get(0).modelSize());
        Assertions.assertEquals("ewzgiud", model.searchSpace().get(0).multiScale());
        Assertions.assertEquals("xpqh", model.searchSpace().get(0).nmsIouThreshold());
        Assertions.assertEquals("qhnmhk", model.searchSpace().get(0).tileGridSize());
        Assertions.assertEquals("zsdsuxheqdgcrux", model.searchSpace().get(0).tileOverlapRatio());
        Assertions.assertEquals("inymmqgwokmikp", model.searchSpace().get(0).tilePredictionsNmsThreshold());
        Assertions.assertEquals("fbmjxuvji", model.searchSpace().get(0).validationIouThreshold());
        Assertions.assertEquals("dvhaxdvw", model.searchSpace().get(0).validationMetricType());
        Assertions.assertEquals(805433405, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(25900560, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT31H30M2S"), model.limitSettings().timeout());
        Assertions.assertEquals(1137833874, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(1778426886, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("k", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("elf", model.validationData().uri());
        Assertions.assertEquals(1.5769918591204024D, model.validationDataSize());
    }

    @Test
    public void testSerialize() {
        ImageObjectDetection model =
            new ImageObjectDetection()
                .withLogVerbosity(LogVerbosity.DEBUG)
                .withTargetColumnName("tdmiwjekptyca")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("hsurlgw")
                        .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                        .withUri("jzcqymlcfnz"))
                .withPrimaryMetric(ObjectDetectionPrimaryMetrics.MEAN_AVERAGE_PRECISION)
                .withModelSettings(
                    new ImageModelSettingsObjectDetection()
                        .withAdvancedSettings("wjcayerzrr")
                        .withAmsGradient(false)
                        .withAugmentations("bylpolwzr")
                        .withBeta1(77.71428F)
                        .withBeta2(0.12291074F)
                        .withCheckpointFrequency(1626278637)
                        .withCheckpointModel(
                            new MLFlowModelJobInput()
                                .withDescription("tltng")
                                .withMode(InputDeliveryMode.EVAL_MOUNT)
                                .withUri("scjfncjwvuagf"))
                        .withCheckpointRunId("reuptrk")
                        .withDistributed(false)
                        .withEarlyStopping(true)
                        .withEarlyStoppingDelay(1968790697)
                        .withEarlyStoppingPatience(1051364125)
                        .withEnableOnnxNormalization(false)
                        .withEvaluationFrequency(45395543)
                        .withGradientAccumulationStep(922297419)
                        .withLayersToFreeze(202449168)
                        .withLearningRate(99.375496F)
                        .withLearningRateScheduler(LearningRateScheduler.STEP)
                        .withModelName("lslrcigtzjc")
                        .withMomentum(33.693993F)
                        .withNesterov(false)
                        .withNumberOfEpochs(521744889)
                        .withNumberOfWorkers(357206525)
                        .withOptimizer(StochasticOptimizer.ADAMW)
                        .withRandomSeed(477714281)
                        .withStepLRGamma(32.488316F)
                        .withStepLRStepSize(1161952747)
                        .withTrainingBatchSize(632493022)
                        .withValidationBatchSize(1964087794)
                        .withWarmupCosineLRCycles(10.143196F)
                        .withWarmupCosineLRWarmupEpochs(1914716275)
                        .withWeightDecay(26.761473F)
                        .withBoxDetectionsPerImage(830937506)
                        .withBoxScoreThreshold(33.446144F)
                        .withImageSize(1366619755)
                        .withMaxSize(573797574)
                        .withMinSize(2123932568)
                        .withModelSize(ModelSize.NONE)
                        .withMultiScale(false)
                        .withNmsIouThreshold(87.65949F)
                        .withTileGridSize("gyshqrdgrtwmewj")
                        .withTileOverlapRatio(12.454754F)
                        .withTilePredictionsNmsThreshold(40.32904F)
                        .withValidationIouThreshold(7.5836124F)
                        .withValidationMetricType(ValidationMetricType.COCO_VOC))
                .withSearchSpace(
                    Arrays
                        .asList(
                            new ImageModelDistributionSettingsObjectDetection()
                                .withAmsGradient("ehpphthdklmveta")
                                .withAugmentations("akfqoixwgiksb")
                                .withBeta1("tooxrpog")
                                .withBeta2("hchgjtnhtukf")
                                .withDistributed("ihmbfntume")
                                .withEarlyStopping("bxvqxbnuvw")
                                .withEarlyStoppingDelay("asgom")
                                .withEarlyStoppingPatience("jzwxuqgovsxpwwz")
                                .withEnableOnnxNormalization("fmkk")
                                .withEvaluationFrequency("gfredmlscg")
                                .withGradientAccumulationStep("lccnaovjowaz")
                                .withLayersToFreeze("abacomlyotgkws")
                                .withLearningRate("srqorcgenmvceb")
                                .withLearningRateScheduler("etqujxcxxq")
                                .withModelName("cqjkedwqu")
                                .withMomentum("gojmrvvxwjon")
                                .withNesterov("se")
                                .withNumberOfEpochs("q")
                                .withNumberOfWorkers("ilcchskxxkansbvr")
                                .withOptimizer("qgvtojrulfu")
                                .withRandomSeed("ejrthcfjzhxlyub")
                                .withStepLRGamma("rostvrjeqmtzz")
                                .withStepLRStepSize("qrztrxal")
                                .withTrainingBatchSize("d")
                                .withValidationBatchSize("bsrwrsnrhpqat")
                                .withWarmupCosineLRCycles("kkvyanxk")
                                .withWarmupCosineLRWarmupEpochs("csemsvuvd")
                                .withWeightDecay("qxetqmmlivrjjx")
                                .withBoxDetectionsPerImage("yezslpu")
                                .withBoxScoreThreshold("cbdsvalpnptwtrk")
                                .withImageSize("pazwug")
                                .withMaxSize("qvn")
                                .withMinSize("bfe")
                                .withModelSize("ldiuhzzgqlm")
                                .withMultiScale("ewzgiud")
                                .withNmsIouThreshold("xpqh")
                                .withTileGridSize("qhnmhk")
                                .withTileOverlapRatio("zsdsuxheqdgcrux")
                                .withTilePredictionsNmsThreshold("inymmqgwokmikp")
                                .withValidationIouThreshold("fbmjxuvji")
                                .withValidationMetricType("dvhaxdvw"),
                            new ImageModelDistributionSettingsObjectDetection()
                                .withAmsGradient("klxymxkqvfqepdxc")
                                .withAugmentations("uubwyvpjb")
                                .withBeta1("cpj")
                                .withBeta2("uqgixex")
                                .withDistributed("dfbwljav")
                                .withEarlyStopping("erkjddv")
                                .withEarlyStoppingDelay("liegftcvbi")
                                .withEarlyStoppingPatience("tksdwgdnkefgmw")
                                .withEnableOnnxNormalization("c")
                                .withEvaluationFrequency("uvczldbgl")
                                .withGradientAccumulationStep("utbaaqgze")
                                .withLayersToFreeze("jclyzgsnor")
                                .withLearningRate("gmnzjotvmrx")
                                .withLearningRateScheduler("lobvv")
                                .withModelName("hvhd")
                                .withMomentum("ayfluiyuosnu")
                                .withNesterov("t")
                                .withNumberOfEpochs("vhyibdrqrsw")
                                .withNumberOfWorkers("uubpyrow")
                                .withOptimizer("oxztfwfqch")
                                .withRandomSeed("zevjnnctag")
                                .withStepLRGamma("v")
                                .withStepLRStepSize("pqpemhz")
                                .withTrainingBatchSize("krepdqhqyhwqwem")
                                .withValidationBatchSize("qabckmzeoxin")
                                .withWarmupCosineLRCycles("re")
                                .withWarmupCosineLRWarmupEpochs("twhlpuzjpce")
                                .withWeightDecay("nzangprbfaxy")
                                .withBoxDetectionsPerImage("xdchp")
                                .withBoxScoreThreshold("xlehzlxpgfquwzp")
                                .withImageSize("ibelwcerwkw")
                                .withMaxSize("jxljtxbusq")
                                .withMinSize("xxniuisdzhgbd")
                                .withModelSize("pagsecnad")
                                .withMultiScale("wqrgxfllmqi")
                                .withNmsIouThreshold("ezoell")
                                .withTileGridSize("kiiwvmtu")
                                .withTileOverlapRatio("pymdjfuax")
                                .withTilePredictionsNmsThreshold("qvqpilrg")
                                .withValidationIouThreshold("canlduwzorxs")
                                .withValidationMetricType("x"),
                            new ImageModelDistributionSettingsObjectDetection()
                                .withAmsGradient("raclibbfqpspkla")
                                .withAugmentations("dgnhautw")
                                .withBeta1("exzgpmnmabedd")
                                .withBeta2("lwgdfpfqfpcvs")
                                .withDistributed("l")
                                .withEarlyStopping("rvwerfwxbsmtb")
                                .withEarlyStoppingDelay("jehhci")
                                .withEarlyStoppingPatience("wdv")
                                .withEnableOnnxNormalization("brekqhsqhtf")
                                .withEvaluationFrequency("pqbye")
                                .withGradientAccumulationStep("wy")
                                .withLayersToFreeze("dqigmg")
                                .withLearningRate("inztxl")
                                .withLearningRateScheduler("khnjcmrnkfm")
                                .withModelName("cqtwmlmhjnqtq")
                                .withMomentum("hj")
                                .withNesterov("vragpokddx")
                                .withNumberOfEpochs("hhkvguavtptbk")
                                .withNumberOfWorkers("kqynspgbvo")
                                .withOptimizer("bkkwvdxae")
                                .withRandomSeed("okmyr")
                                .withStepLRGamma("ialzbnobrqlp")
                                .withStepLRStepSize("jtrpzuyud")
                                .withTrainingBatchSize("bxnhsqeaeo")
                                .withValidationBatchSize("elwg")
                                .withWarmupCosineLRCycles("uruzy")
                                .withWarmupCosineLRWarmupEpochs("arogatmolji")
                                .withWeightDecay("mpinmzvfkneerzzt")
                                .withBoxDetectionsPerImage("lbciphmsexro")
                                .withBoxScoreThreshold("ndktxfv")
                                .withImageSize("feeqgpkrietbgnix")
                                .withMaxSize("wwzkyf")
                                .withMinSize("wpiwxeiicrmpep")
                                .withModelSize("dm")
                                .withMultiScale("xijvskwsdgkjgyac")
                                .withNmsIouThreshold("asekwefcvoinw")
                                .withTileGridSize("artwyxqic")
                                .withTileOverlapRatio("dvatdavuqm")
                                .withTilePredictionsNmsThreshold("ymsfobjlqu")
                                .withValidationIouThreshold("ezcjumvpsi")
                                .withValidationMetricType("oyoiglkmiqw")))
                .withLimitSettings(
                    new ImageLimitSettings()
                        .withMaxConcurrentTrials(805433405)
                        .withMaxTrials(25900560)
                        .withTimeout(Duration.parse("PT31H30M2S")))
                .withSweepSettings(
                    new ImageSweepSettings()
                        .withEarlyTermination(
                            new EarlyTerminationPolicy()
                                .withDelayEvaluation(1137833874)
                                .withEvaluationInterval(1778426886))
                        .withSamplingAlgorithm(SamplingAlgorithmType.BAYESIAN))
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("k")
                        .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                        .withUri("elf"))
                .withValidationDataSize(1.5769918591204024D);
        model = BinaryData.fromObject(model).toObject(ImageObjectDetection.class);
        Assertions.assertEquals(LogVerbosity.DEBUG, model.logVerbosity());
        Assertions.assertEquals("tdmiwjekptyca", model.targetColumnName());
        Assertions.assertEquals("hsurlgw", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("jzcqymlcfnz", model.trainingData().uri());
        Assertions.assertEquals(ObjectDetectionPrimaryMetrics.MEAN_AVERAGE_PRECISION, model.primaryMetric());
        Assertions.assertEquals("wjcayerzrr", model.modelSettings().advancedSettings());
        Assertions.assertEquals(false, model.modelSettings().amsGradient());
        Assertions.assertEquals("bylpolwzr", model.modelSettings().augmentations());
        Assertions.assertEquals(77.71428F, model.modelSettings().beta1());
        Assertions.assertEquals(0.12291074F, model.modelSettings().beta2());
        Assertions.assertEquals(1626278637, model.modelSettings().checkpointFrequency());
        Assertions.assertEquals("tltng", model.modelSettings().checkpointModel().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.modelSettings().checkpointModel().mode());
        Assertions.assertEquals("scjfncjwvuagf", model.modelSettings().checkpointModel().uri());
        Assertions.assertEquals("reuptrk", model.modelSettings().checkpointRunId());
        Assertions.assertEquals(false, model.modelSettings().distributed());
        Assertions.assertEquals(true, model.modelSettings().earlyStopping());
        Assertions.assertEquals(1968790697, model.modelSettings().earlyStoppingDelay());
        Assertions.assertEquals(1051364125, model.modelSettings().earlyStoppingPatience());
        Assertions.assertEquals(false, model.modelSettings().enableOnnxNormalization());
        Assertions.assertEquals(45395543, model.modelSettings().evaluationFrequency());
        Assertions.assertEquals(922297419, model.modelSettings().gradientAccumulationStep());
        Assertions.assertEquals(202449168, model.modelSettings().layersToFreeze());
        Assertions.assertEquals(99.375496F, model.modelSettings().learningRate());
        Assertions.assertEquals(LearningRateScheduler.STEP, model.modelSettings().learningRateScheduler());
        Assertions.assertEquals("lslrcigtzjc", model.modelSettings().modelName());
        Assertions.assertEquals(33.693993F, model.modelSettings().momentum());
        Assertions.assertEquals(false, model.modelSettings().nesterov());
        Assertions.assertEquals(521744889, model.modelSettings().numberOfEpochs());
        Assertions.assertEquals(357206525, model.modelSettings().numberOfWorkers());
        Assertions.assertEquals(StochasticOptimizer.ADAMW, model.modelSettings().optimizer());
        Assertions.assertEquals(477714281, model.modelSettings().randomSeed());
        Assertions.assertEquals(32.488316F, model.modelSettings().stepLRGamma());
        Assertions.assertEquals(1161952747, model.modelSettings().stepLRStepSize());
        Assertions.assertEquals(632493022, model.modelSettings().trainingBatchSize());
        Assertions.assertEquals(1964087794, model.modelSettings().validationBatchSize());
        Assertions.assertEquals(10.143196F, model.modelSettings().warmupCosineLRCycles());
        Assertions.assertEquals(1914716275, model.modelSettings().warmupCosineLRWarmupEpochs());
        Assertions.assertEquals(26.761473F, model.modelSettings().weightDecay());
        Assertions.assertEquals(830937506, model.modelSettings().boxDetectionsPerImage());
        Assertions.assertEquals(33.446144F, model.modelSettings().boxScoreThreshold());
        Assertions.assertEquals(1366619755, model.modelSettings().imageSize());
        Assertions.assertEquals(573797574, model.modelSettings().maxSize());
        Assertions.assertEquals(2123932568, model.modelSettings().minSize());
        Assertions.assertEquals(ModelSize.NONE, model.modelSettings().modelSize());
        Assertions.assertEquals(false, model.modelSettings().multiScale());
        Assertions.assertEquals(87.65949F, model.modelSettings().nmsIouThreshold());
        Assertions.assertEquals("gyshqrdgrtwmewj", model.modelSettings().tileGridSize());
        Assertions.assertEquals(12.454754F, model.modelSettings().tileOverlapRatio());
        Assertions.assertEquals(40.32904F, model.modelSettings().tilePredictionsNmsThreshold());
        Assertions.assertEquals(7.5836124F, model.modelSettings().validationIouThreshold());
        Assertions.assertEquals(ValidationMetricType.COCO_VOC, model.modelSettings().validationMetricType());
        Assertions.assertEquals("ehpphthdklmveta", model.searchSpace().get(0).amsGradient());
        Assertions.assertEquals("akfqoixwgiksb", model.searchSpace().get(0).augmentations());
        Assertions.assertEquals("tooxrpog", model.searchSpace().get(0).beta1());
        Assertions.assertEquals("hchgjtnhtukf", model.searchSpace().get(0).beta2());
        Assertions.assertEquals("ihmbfntume", model.searchSpace().get(0).distributed());
        Assertions.assertEquals("bxvqxbnuvw", model.searchSpace().get(0).earlyStopping());
        Assertions.assertEquals("asgom", model.searchSpace().get(0).earlyStoppingDelay());
        Assertions.assertEquals("jzwxuqgovsxpwwz", model.searchSpace().get(0).earlyStoppingPatience());
        Assertions.assertEquals("fmkk", model.searchSpace().get(0).enableOnnxNormalization());
        Assertions.assertEquals("gfredmlscg", model.searchSpace().get(0).evaluationFrequency());
        Assertions.assertEquals("lccnaovjowaz", model.searchSpace().get(0).gradientAccumulationStep());
        Assertions.assertEquals("abacomlyotgkws", model.searchSpace().get(0).layersToFreeze());
        Assertions.assertEquals("srqorcgenmvceb", model.searchSpace().get(0).learningRate());
        Assertions.assertEquals("etqujxcxxq", model.searchSpace().get(0).learningRateScheduler());
        Assertions.assertEquals("cqjkedwqu", model.searchSpace().get(0).modelName());
        Assertions.assertEquals("gojmrvvxwjon", model.searchSpace().get(0).momentum());
        Assertions.assertEquals("se", model.searchSpace().get(0).nesterov());
        Assertions.assertEquals("q", model.searchSpace().get(0).numberOfEpochs());
        Assertions.assertEquals("ilcchskxxkansbvr", model.searchSpace().get(0).numberOfWorkers());
        Assertions.assertEquals("qgvtojrulfu", model.searchSpace().get(0).optimizer());
        Assertions.assertEquals("ejrthcfjzhxlyub", model.searchSpace().get(0).randomSeed());
        Assertions.assertEquals("rostvrjeqmtzz", model.searchSpace().get(0).stepLRGamma());
        Assertions.assertEquals("qrztrxal", model.searchSpace().get(0).stepLRStepSize());
        Assertions.assertEquals("d", model.searchSpace().get(0).trainingBatchSize());
        Assertions.assertEquals("bsrwrsnrhpqat", model.searchSpace().get(0).validationBatchSize());
        Assertions.assertEquals("kkvyanxk", model.searchSpace().get(0).warmupCosineLRCycles());
        Assertions.assertEquals("csemsvuvd", model.searchSpace().get(0).warmupCosineLRWarmupEpochs());
        Assertions.assertEquals("qxetqmmlivrjjx", model.searchSpace().get(0).weightDecay());
        Assertions.assertEquals("yezslpu", model.searchSpace().get(0).boxDetectionsPerImage());
        Assertions.assertEquals("cbdsvalpnptwtrk", model.searchSpace().get(0).boxScoreThreshold());
        Assertions.assertEquals("pazwug", model.searchSpace().get(0).imageSize());
        Assertions.assertEquals("qvn", model.searchSpace().get(0).maxSize());
        Assertions.assertEquals("bfe", model.searchSpace().get(0).minSize());
        Assertions.assertEquals("ldiuhzzgqlm", model.searchSpace().get(0).modelSize());
        Assertions.assertEquals("ewzgiud", model.searchSpace().get(0).multiScale());
        Assertions.assertEquals("xpqh", model.searchSpace().get(0).nmsIouThreshold());
        Assertions.assertEquals("qhnmhk", model.searchSpace().get(0).tileGridSize());
        Assertions.assertEquals("zsdsuxheqdgcrux", model.searchSpace().get(0).tileOverlapRatio());
        Assertions.assertEquals("inymmqgwokmikp", model.searchSpace().get(0).tilePredictionsNmsThreshold());
        Assertions.assertEquals("fbmjxuvji", model.searchSpace().get(0).validationIouThreshold());
        Assertions.assertEquals("dvhaxdvw", model.searchSpace().get(0).validationMetricType());
        Assertions.assertEquals(805433405, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(25900560, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT31H30M2S"), model.limitSettings().timeout());
        Assertions.assertEquals(1137833874, model.sweepSettings().earlyTermination().delayEvaluation());
        Assertions.assertEquals(1778426886, model.sweepSettings().earlyTermination().evaluationInterval());
        Assertions.assertEquals(SamplingAlgorithmType.BAYESIAN, model.sweepSettings().samplingAlgorithm());
        Assertions.assertEquals("k", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("elf", model.validationData().uri());
        Assertions.assertEquals(1.5769918591204024D, model.validationDataSize());
    }
}
