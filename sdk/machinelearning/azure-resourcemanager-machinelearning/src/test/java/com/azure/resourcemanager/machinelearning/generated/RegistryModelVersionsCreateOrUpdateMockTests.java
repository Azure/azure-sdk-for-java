// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.FlavorData;
import com.azure.resourcemanager.machinelearning.models.ModelVersion;
import com.azure.resourcemanager.machinelearning.models.ModelVersionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistryModelVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"flavors\":{\"fwfiikqcdnzsfi\":{\"data\":{\"ipvlxtywukhj\":\"zwloqrmgdhy\",\"yoy\":\"spllitxrrgkw\",\"woytcachhsizfuew\":\"qoivxcodw\"}},\"vufa\":{\"data\":{\"ah\":\"neoodmcrxlyz\"}},\"bxzjkpi\":{\"data\":{\"wtbrnlsy\":\"jjwnbrm\",\"c\":\"aanistcjha\",\"anapfaoiz\":\"pphcstmryc\",\"mzc\":\"inlpxngzzxqbgqn\"}}},\"modelType\":\"ucvbdoz\",\"modelUri\":\"sk\",\"jobName\":\"afzsq\",\"provisioningState\":\"Succeeded\",\"stage\":\"pxmiwtkqif\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"cdnzoxl\",\"tags\":{\"sugqcglma\":\"xtwgbawshram\",\"xvqlauu\":\"fzto\",\"fmcerfxfeiqba\":\"gwa\",\"ipssv\":\"thzw\"},\"properties\":{\"kug\":\"ijcqcjozz\"}},\"id\":\"qqbt\",\"name\":\"kvocu\",\"type\":\"xllbpwarhwett\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ModelVersion response = manager.registryModelVersions()
            .define("ifmyzb")
            .withExistingModel("obbaibcfbfy", "zaisfofg", "mrkm")
            .withProperties(new ModelVersionProperties().withDescription("cayvqbeqpu")
                .withTags(mapOf("ybfby", "snylfhicrjr", "lbofsnqo", "rlq", "hxgiknr", "yb"))
                .withProperties(mapOf("dgp", "seiqbroqjfeamzku", "qvcugusqlxlx", "sgotbunvnjqldr"))
                .withIsArchived(true)
                .withIsAnonymous(true)
                .withFlavors(mapOf("zyqokbgum",
                    new FlavorData().withData(mapOf("lptbdponhblqi", "hcmt", "bpcwtwtrchkcmru", "cnuqfpzjz", "qchf",
                        "wqesqsqmiekxip", "cu", "tykkvjjlba")),
                    "mzuicsggsxznbp",
                    new FlavorData()
                        .withData(mapOf("buzginrkjkn", "xxpxxizch", "ybhozlsbufnhb", "zfsul", "poeeytrslj", "cn"))))
                .withModelType("kqbylb")
                .withModelUri("jldicqomanefw")
                .withJobName("nitvkyahfoyfzo")
                .withStage("eprevcjukfal"))
            .create();

        Assertions.assertEquals("cdnzoxl", response.properties().description());
        Assertions.assertEquals("xtwgbawshram", response.properties().tags().get("sugqcglma"));
        Assertions.assertEquals("ijcqcjozz", response.properties().properties().get("kug"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals("zwloqrmgdhy",
            response.properties().flavors().get("fwfiikqcdnzsfi").data().get("ipvlxtywukhj"));
        Assertions.assertEquals("ucvbdoz", response.properties().modelType());
        Assertions.assertEquals("sk", response.properties().modelUri());
        Assertions.assertEquals("afzsq", response.properties().jobName());
        Assertions.assertEquals("pxmiwtkqif", response.properties().stage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
