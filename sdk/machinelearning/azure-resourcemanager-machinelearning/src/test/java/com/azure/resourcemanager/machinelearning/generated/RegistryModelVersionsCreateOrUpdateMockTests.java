// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.fluent.models.ModelVersionInner;
import com.azure.resourcemanager.machinelearning.models.FlavorData;
import com.azure.resourcemanager.machinelearning.models.ModelVersion;
import com.azure.resourcemanager.machinelearning.models.ModelVersionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegistryModelVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"flavors\":{\"rnlsyiaanistc\":{\"data\":{\"ivxcodwkwoytcach\":\"txrrgkwiyoyhq\",\"fiikqcdnzsfiu\":\"sizfuewlf\",\"o\":\"gne\",\"ufakrxjjwnbrmdwt\":\"mcrxlyzoaho\"}}},\"modelType\":\"atclpphcs\",\"modelUri\":\"rycpanapfa\",\"jobName\":\"zrinlpxngzzx\",\"provisioningState\":\"Succeeded\",\"stage\":\"nzmzct\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"ifpucv\",\"tags\":{\"e\":\"zwbsk\",\"qmbinpxmiwt\":\"fz\"},\"properties\":{\"abux\":\"fpvrdukcdnzox\",\"wshramqsugqcgl\":\"wgb\",\"xvqlauu\":\"adfzto\",\"fmcerfxfeiqba\":\"gwa\"}},\"id\":\"hzwj\",\"name\":\"pssvnonij\",\"type\":\"qcj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ModelVersion response = manager.registryModelVersions()
            .createOrUpdate("susfdyw", "rqcowk", "ndgrciff", "xqqnugt",
                new ModelVersionInner().withProperties(new ModelVersionProperties().withDescription("lqllbofsn")
                    .withTags(mapOf("hxgiknr", "yb", "feamz", "ugseiqbroq", "pksgo", "uxd"))
                    .withProperties(mapOf("ldrqqv", "nvnj", "xedthfwlnvqac", "ugusqlx", "blnlmpuyypaggpai", "yfi"))
                    .withIsArchived(true)
                    .withIsAnonymous(false)
                    .withFlavors(mapOf("ifmyzb",
                        new FlavorData().withData(mapOf("yjdiujticwmlfz", "g", "bktuajkufpvvd", "hibfmco",
                            "fyqzaisfofgvmrkm", "nmeiomnobbaibcf")),
                        "bpcwtwtrchkcmru", new FlavorData().withData(mapOf("cmtslptb", "nh", "cnuqfpzjz", "ponhblqi")),
                        "zgi",
                        new FlavorData()
                            .withData(mapOf("xipwqchfpt", "esqsqmie", "ajcur", "kkvjjl", "izchmb", "yqokbgumuejxxpx")),
                        "yahfoyfz",
                        new FlavorData().withData(mapOf("laybhozlsb", "jkngzfs", "ytrsljzmzui", "fnhbvcntpoe",
                            "mkqbylbbnjldicq", "sggsxznbp", "efwlenitv", "ma"))))
                    .withModelType("dyaepre")
                    .withModelUri("jukfalwceechcayv")
                    .withJobName("eqpucnus")
                    .withStage("hicrjriy")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ifpucv", response.properties().description());
        Assertions.assertEquals("zwbsk", response.properties().tags().get("e"));
        Assertions.assertEquals("fpvrdukcdnzox", response.properties().properties().get("abux"));
        Assertions.assertEquals(false, response.properties().isArchived());
        Assertions.assertEquals(true, response.properties().isAnonymous());
        Assertions.assertEquals("txrrgkwiyoyhq",
            response.properties().flavors().get("rnlsyiaanistc").data().get("ivxcodwkwoytcach"));
        Assertions.assertEquals("atclpphcs", response.properties().modelType());
        Assertions.assertEquals("rycpanapfa", response.properties().modelUri());
        Assertions.assertEquals("zrinlpxngzzx", response.properties().jobName());
        Assertions.assertEquals("nzmzct", response.properties().stage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
