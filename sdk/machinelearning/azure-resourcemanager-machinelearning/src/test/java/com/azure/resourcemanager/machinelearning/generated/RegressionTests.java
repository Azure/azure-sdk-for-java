// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.BlockedTransformers;
import com.azure.resourcemanager.machinelearning.models.FeaturizationMode;
import com.azure.resourcemanager.machinelearning.models.InputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.LogVerbosity;
import com.azure.resourcemanager.machinelearning.models.MLTableJobInput;
import com.azure.resourcemanager.machinelearning.models.NCrossValidations;
import com.azure.resourcemanager.machinelearning.models.Regression;
import com.azure.resourcemanager.machinelearning.models.RegressionModels;
import com.azure.resourcemanager.machinelearning.models.RegressionPrimaryMetrics;
import com.azure.resourcemanager.machinelearning.models.RegressionTrainingSettings;
import com.azure.resourcemanager.machinelearning.models.StackEnsembleSettings;
import com.azure.resourcemanager.machinelearning.models.StackMetaLearnerType;
import com.azure.resourcemanager.machinelearning.models.TableVerticalFeaturizationSettings;
import com.azure.resourcemanager.machinelearning.models.TableVerticalLimitSettings;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RegressionTests {
    @Test
    public void testDeserialize() {
        Regression model =
            BinaryData
                .fromString(
                    "{\"taskType\":\"Regression\",\"primaryMetric\":\"NormalizedRootMeanSquaredError\",\"trainingSettings\":{\"allowedTrainingAlgorithms\":[\"LightGBM\",\"XGBoostRegressor\"],\"blockedTrainingAlgorithms\":[\"LassoLars\",\"RandomForest\",\"LassoLars\"],\"enableDnnTraining\":true,\"enableModelExplainability\":false,\"enableOnnxCompatibleModels\":true,\"enableStackEnsemble\":false,\"enableVoteEnsemble\":true,\"ensembleModelDownloadTimeout\":\"PT172H1M25S\",\"stackEnsembleSettings\":{\"stackMetaLearnerTrainPercentage\":12.614529739091418,\"stackMetaLearnerType\":\"LightGBMClassifier\"}},\"cvSplitColumnNames\":[\"ctgkppgkqzkcyzmf\",\"ngdyfcixrhlcq\"],\"featurizationSettings\":{\"blockedTransformers\":[\"WoETargetEncoder\",\"LabelEncoder\",\"WoETargetEncoder\",\"CountVectorizer\"],\"columnNameAndTypes\":{\"rmk\":\"g\",\"ogmipnmliqmvl\":\"hpqhazyntacihn\",\"grvgpomxp\":\"hikea\"},\"enableDnnFeaturization\":false,\"mode\":\"Off\",\"transformerParams\":{\"yies\":[]},\"datasetLanguage\":\"wiqbuoutm\"},\"limitSettings\":{\"enableEarlyTermination\":true,\"exitScore\":30.50453189891008,\"maxConcurrentTrials\":743582591,\"maxCoresPerTrial\":1594055876,\"maxTrials\":191812960,\"timeout\":\"PT53H42M12S\",\"trialTimeout\":\"PT188H19M59S\"},\"nCrossValidations\":{\"mode\":\"NCrossValidations\"},\"testData\":{\"jobInputType\":\"mltable\",\"mode\":\"Direct\",\"uri\":\"wnncfmaciqg\",\"description\":\"rlhiqlwixvtbo\"},\"testDataSize\":94.60979839467682,\"validationData\":{\"jobInputType\":\"mltable\",\"mode\":\"ReadWriteMount\",\"uri\":\"opgjttba\",\"description\":\"alapdlndbe\"},\"validationDataSize\":60.72143686552066,\"weightColumnName\":\"xvvlwyn\",\"logVerbosity\":\"Debug\",\"targetColumnName\":\"qvzfj\",\"trainingData\":{\"jobInputType\":\"mltable\",\"mode\":\"EvalMount\",\"uri\":\"ugzfeuzjl\",\"description\":\"phfky\"}}")
                .toObject(Regression.class);
        Assertions.assertEquals(LogVerbosity.DEBUG, model.logVerbosity());
        Assertions.assertEquals("qvzfj", model.targetColumnName());
        Assertions.assertEquals("phfky", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("ugzfeuzjl", model.trainingData().uri());
        Assertions.assertEquals(RegressionPrimaryMetrics.NORMALIZED_ROOT_MEAN_SQUARED_ERROR, model.primaryMetric());
        Assertions.assertEquals(true, model.trainingSettings().enableDnnTraining());
        Assertions.assertEquals(false, model.trainingSettings().enableModelExplainability());
        Assertions.assertEquals(true, model.trainingSettings().enableOnnxCompatibleModels());
        Assertions.assertEquals(false, model.trainingSettings().enableStackEnsemble());
        Assertions.assertEquals(true, model.trainingSettings().enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT172H1M25S"), model.trainingSettings().ensembleModelDownloadTimeout());
        Assertions
            .assertEquals(
                12.614529739091418D,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions
            .assertEquals(
                StackMetaLearnerType.LIGHT_GBMCLASSIFIER,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerType());
        Assertions
            .assertEquals(RegressionModels.LIGHT_GBM, model.trainingSettings().allowedTrainingAlgorithms().get(0));
        Assertions
            .assertEquals(RegressionModels.LASSO_LARS, model.trainingSettings().blockedTrainingAlgorithms().get(0));
        Assertions.assertEquals("ctgkppgkqzkcyzmf", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("wiqbuoutm", model.featurizationSettings().datasetLanguage());
        Assertions
            .assertEquals(
                BlockedTransformers.WO_ETARGET_ENCODER, model.featurizationSettings().blockedTransformers().get(0));
        Assertions.assertEquals("g", model.featurizationSettings().columnNameAndTypes().get("rmk"));
        Assertions.assertEquals(false, model.featurizationSettings().enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.OFF, model.featurizationSettings().mode());
        Assertions.assertEquals(true, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals(30.50453189891008D, model.limitSettings().exitScore());
        Assertions.assertEquals(743582591, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1594055876, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(191812960, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT53H42M12S"), model.limitSettings().timeout());
        Assertions.assertEquals(Duration.parse("PT188H19M59S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals("rlhiqlwixvtbo", model.testData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.testData().mode());
        Assertions.assertEquals("wnncfmaciqg", model.testData().uri());
        Assertions.assertEquals(94.60979839467682D, model.testDataSize());
        Assertions.assertEquals("alapdlndbe", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("opgjttba", model.validationData().uri());
        Assertions.assertEquals(60.72143686552066D, model.validationDataSize());
        Assertions.assertEquals("xvvlwyn", model.weightColumnName());
    }

    @Test
    public void testSerialize() {
        Regression model =
            new Regression()
                .withLogVerbosity(LogVerbosity.DEBUG)
                .withTargetColumnName("qvzfj")
                .withTrainingData(
                    new MLTableJobInput()
                        .withDescription("phfky")
                        .withMode(InputDeliveryMode.EVAL_MOUNT)
                        .withUri("ugzfeuzjl"))
                .withPrimaryMetric(RegressionPrimaryMetrics.NORMALIZED_ROOT_MEAN_SQUARED_ERROR)
                .withTrainingSettings(
                    new RegressionTrainingSettings()
                        .withEnableDnnTraining(true)
                        .withEnableModelExplainability(false)
                        .withEnableOnnxCompatibleModels(true)
                        .withEnableStackEnsemble(false)
                        .withEnableVoteEnsemble(true)
                        .withEnsembleModelDownloadTimeout(Duration.parse("PT172H1M25S"))
                        .withStackEnsembleSettings(
                            new StackEnsembleSettings()
                                .withStackMetaLearnerTrainPercentage(12.614529739091418D)
                                .withStackMetaLearnerType(StackMetaLearnerType.LIGHT_GBMCLASSIFIER))
                        .withAllowedTrainingAlgorithms(
                            Arrays.asList(RegressionModels.LIGHT_GBM, RegressionModels.XGBOOST_REGRESSOR))
                        .withBlockedTrainingAlgorithms(
                            Arrays
                                .asList(
                                    RegressionModels.LASSO_LARS,
                                    RegressionModels.RANDOM_FOREST,
                                    RegressionModels.LASSO_LARS)))
                .withCvSplitColumnNames(Arrays.asList("ctgkppgkqzkcyzmf", "ngdyfcixrhlcq"))
                .withFeaturizationSettings(
                    new TableVerticalFeaturizationSettings()
                        .withDatasetLanguage("wiqbuoutm")
                        .withBlockedTransformers(
                            Arrays
                                .asList(
                                    BlockedTransformers.WO_ETARGET_ENCODER,
                                    BlockedTransformers.LABEL_ENCODER,
                                    BlockedTransformers.WO_ETARGET_ENCODER,
                                    BlockedTransformers.COUNT_VECTORIZER))
                        .withColumnNameAndTypes(
                            mapOf("rmk", "g", "ogmipnmliqmvl", "hpqhazyntacihn", "grvgpomxp", "hikea"))
                        .withEnableDnnFeaturization(false)
                        .withMode(FeaturizationMode.OFF)
                        .withTransformerParams(mapOf("yies", Arrays.asList())))
                .withLimitSettings(
                    new TableVerticalLimitSettings()
                        .withEnableEarlyTermination(true)
                        .withExitScore(30.50453189891008D)
                        .withMaxConcurrentTrials(743582591)
                        .withMaxCoresPerTrial(1594055876)
                        .withMaxTrials(191812960)
                        .withTimeout(Duration.parse("PT53H42M12S"))
                        .withTrialTimeout(Duration.parse("PT188H19M59S")))
                .withNCrossValidations(new NCrossValidations())
                .withTestData(
                    new MLTableJobInput()
                        .withDescription("rlhiqlwixvtbo")
                        .withMode(InputDeliveryMode.DIRECT)
                        .withUri("wnncfmaciqg"))
                .withTestDataSize(94.60979839467682D)
                .withValidationData(
                    new MLTableJobInput()
                        .withDescription("alapdlndbe")
                        .withMode(InputDeliveryMode.READ_WRITE_MOUNT)
                        .withUri("opgjttba"))
                .withValidationDataSize(60.72143686552066D)
                .withWeightColumnName("xvvlwyn");
        model = BinaryData.fromObject(model).toObject(Regression.class);
        Assertions.assertEquals(LogVerbosity.DEBUG, model.logVerbosity());
        Assertions.assertEquals("qvzfj", model.targetColumnName());
        Assertions.assertEquals("phfky", model.trainingData().description());
        Assertions.assertEquals(InputDeliveryMode.EVAL_MOUNT, model.trainingData().mode());
        Assertions.assertEquals("ugzfeuzjl", model.trainingData().uri());
        Assertions.assertEquals(RegressionPrimaryMetrics.NORMALIZED_ROOT_MEAN_SQUARED_ERROR, model.primaryMetric());
        Assertions.assertEquals(true, model.trainingSettings().enableDnnTraining());
        Assertions.assertEquals(false, model.trainingSettings().enableModelExplainability());
        Assertions.assertEquals(true, model.trainingSettings().enableOnnxCompatibleModels());
        Assertions.assertEquals(false, model.trainingSettings().enableStackEnsemble());
        Assertions.assertEquals(true, model.trainingSettings().enableVoteEnsemble());
        Assertions.assertEquals(Duration.parse("PT172H1M25S"), model.trainingSettings().ensembleModelDownloadTimeout());
        Assertions
            .assertEquals(
                12.614529739091418D,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerTrainPercentage());
        Assertions
            .assertEquals(
                StackMetaLearnerType.LIGHT_GBMCLASSIFIER,
                model.trainingSettings().stackEnsembleSettings().stackMetaLearnerType());
        Assertions
            .assertEquals(RegressionModels.LIGHT_GBM, model.trainingSettings().allowedTrainingAlgorithms().get(0));
        Assertions
            .assertEquals(RegressionModels.LASSO_LARS, model.trainingSettings().blockedTrainingAlgorithms().get(0));
        Assertions.assertEquals("ctgkppgkqzkcyzmf", model.cvSplitColumnNames().get(0));
        Assertions.assertEquals("wiqbuoutm", model.featurizationSettings().datasetLanguage());
        Assertions
            .assertEquals(
                BlockedTransformers.WO_ETARGET_ENCODER, model.featurizationSettings().blockedTransformers().get(0));
        Assertions.assertEquals("g", model.featurizationSettings().columnNameAndTypes().get("rmk"));
        Assertions.assertEquals(false, model.featurizationSettings().enableDnnFeaturization());
        Assertions.assertEquals(FeaturizationMode.OFF, model.featurizationSettings().mode());
        Assertions.assertEquals(true, model.limitSettings().enableEarlyTermination());
        Assertions.assertEquals(30.50453189891008D, model.limitSettings().exitScore());
        Assertions.assertEquals(743582591, model.limitSettings().maxConcurrentTrials());
        Assertions.assertEquals(1594055876, model.limitSettings().maxCoresPerTrial());
        Assertions.assertEquals(191812960, model.limitSettings().maxTrials());
        Assertions.assertEquals(Duration.parse("PT53H42M12S"), model.limitSettings().timeout());
        Assertions.assertEquals(Duration.parse("PT188H19M59S"), model.limitSettings().trialTimeout());
        Assertions.assertEquals("rlhiqlwixvtbo", model.testData().description());
        Assertions.assertEquals(InputDeliveryMode.DIRECT, model.testData().mode());
        Assertions.assertEquals("wnncfmaciqg", model.testData().uri());
        Assertions.assertEquals(94.60979839467682D, model.testDataSize());
        Assertions.assertEquals("alapdlndbe", model.validationData().description());
        Assertions.assertEquals(InputDeliveryMode.READ_WRITE_MOUNT, model.validationData().mode());
        Assertions.assertEquals("opgjttba", model.validationData().uri());
        Assertions.assertEquals(60.72143686552066D, model.validationDataSize());
        Assertions.assertEquals("xvvlwyn", model.weightColumnName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
