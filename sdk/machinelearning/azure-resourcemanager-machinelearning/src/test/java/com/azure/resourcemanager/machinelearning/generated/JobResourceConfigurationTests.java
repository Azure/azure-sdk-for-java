// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.JobResourceConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobResourceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobResourceConfiguration model =
            BinaryData
                .fromString(
                    "{\"dockerArgs\":\"atbnxwbj\",\"shmSize\":\"dbirkfpksokdgo\",\"instanceCount\":1548314621,\"instanceType\":\"jymrhbg\",\"properties\":{\"nfnzhhh\":\"datazkye\",\"mffjkutycyarn\":\"datao\",\"pyc\":\"dataoohguabzoghkt\"}}")
                .toObject(JobResourceConfiguration.class);
        Assertions.assertEquals(1548314621, model.instanceCount());
        Assertions.assertEquals("jymrhbg", model.instanceType());
        Assertions.assertEquals("atbnxwbj", model.dockerArgs());
        Assertions.assertEquals("dbirkfpksokdgo", model.shmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobResourceConfiguration model =
            new JobResourceConfiguration()
                .withInstanceCount(1548314621)
                .withInstanceType("jymrhbg")
                .withProperties(mapOf("nfnzhhh", "datazkye", "mffjkutycyarn", "datao", "pyc", "dataoohguabzoghkt"))
                .withDockerArgs("atbnxwbj")
                .withShmSize("dbirkfpksokdgo");
        model = BinaryData.fromObject(model).toObject(JobResourceConfiguration.class);
        Assertions.assertEquals(1548314621, model.instanceCount());
        Assertions.assertEquals("jymrhbg", model.instanceType());
        Assertions.assertEquals("atbnxwbj", model.dockerArgs());
        Assertions.assertEquals("dbirkfpksokdgo", model.shmSize());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
