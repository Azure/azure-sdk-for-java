// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.JobResourceConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobResourceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobResourceConfiguration model = BinaryData.fromString(
            "{\"shmSize\":\"ocfkumcfjxoky\",\"dockerArgs\":\"syasvfnkwmygjjek\",\"instanceCount\":713077193,\"instanceType\":\"drugjqyc\",\"properties\":{\"r\":\"dataxkrdtul\",\"tcsubmzoo\":\"datajdkl\",\"hdyslbklglm\":\"datasvobchkxfp\",\"yqshwyqxridtt\":\"datankkw\"}}")
            .toObject(JobResourceConfiguration.class);
        Assertions.assertEquals(713077193, model.instanceCount());
        Assertions.assertEquals("drugjqyc", model.instanceType());
        Assertions.assertEquals("ocfkumcfjxoky", model.shmSize());
        Assertions.assertEquals("syasvfnkwmygjjek", model.dockerArgs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobResourceConfiguration model = new JobResourceConfiguration().withInstanceCount(713077193)
            .withInstanceType("drugjqyc")
            .withProperties(mapOf("r", "dataxkrdtul", "tcsubmzoo", "datajdkl", "hdyslbklglm", "datasvobchkxfp",
                "yqshwyqxridtt", "datankkw"))
            .withShmSize("ocfkumcfjxoky")
            .withDockerArgs("syasvfnkwmygjjek");
        model = BinaryData.fromObject(model).toObject(JobResourceConfiguration.class);
        Assertions.assertEquals(713077193, model.instanceCount());
        Assertions.assertEquals("drugjqyc", model.instanceType());
        Assertions.assertEquals("ocfkumcfjxoky", model.shmSize());
        Assertions.assertEquals("syasvfnkwmygjjek", model.dockerArgs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
