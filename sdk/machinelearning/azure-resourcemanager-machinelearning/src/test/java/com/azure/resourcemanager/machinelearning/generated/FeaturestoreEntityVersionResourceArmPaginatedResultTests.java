// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.FeaturestoreEntityVersionInner;
import com.azure.resourcemanager.machinelearning.models.FeatureDataType;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityVersionProperties;
import com.azure.resourcemanager.machinelearning.models.FeaturestoreEntityVersionResourceArmPaginatedResult;
import com.azure.resourcemanager.machinelearning.models.IndexColumn;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FeaturestoreEntityVersionResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FeaturestoreEntityVersionResourceArmPaginatedResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"indexColumns\":[{\"dataType\":\"Boolean\",\"columnName\":\"ycyarnroohg\"},{\"dataType\":\"Integer\",\"columnName\":\"oghktdpycz\"},{\"dataType\":\"Binary\",\"columnName\":\"ocnhzqrottjzcfyj\"}],\"stage\":\"twrlohapqin\",\"provisioningState\":\"Updating\",\"isArchived\":true,\"isAnonymous\":true,\"description\":\"d\",\"tags\":{\"pjby\":\"jzralc\",\"hf\":\"psjoqcjenk\"},\"properties\":{\"jhhhqxu\":\"sqxfxjelgcmpz\",\"oyvivbsiz\":\"yvca\",\"bscm\":\"sjsz\",\"v\":\"lzijiufehgmvflnw\"}},\"id\":\"xrerlniylylyf\",\"name\":\"xzutgqztwhghmupg\",\"type\":\"yjtcdxabbujftab\"},{\"properties\":{\"indexColumns\":[{\"dataType\":\"Long\",\"columnName\":\"qpxzucafeddwwn\"},{\"dataType\":\"String\",\"columnName\":\"wxudgn\"},{\"dataType\":\"Binary\",\"columnName\":\"krtalvn\"}],\"stage\":\"gpbemeluclvdjju\",\"provisioningState\":\"Succeeded\",\"isArchived\":true,\"isAnonymous\":true,\"description\":\"xahhxhqfaqnvzo\",\"tags\":{\"ejdtxptl\":\"ipemchgavscz\",\"zhomewjjstliu\":\"h\",\"nvodrrs\":\"qawmoaianc\",\"vvbxiwkgfbqljnq\":\"blxydkxr\"},\"properties\":{\"lrqff\":\"chocokulehur\",\"ravjuq\":\"weyurkphyjd\",\"apx\":\"brxmrgch\"}},\"id\":\"y\",\"name\":\"jjk\",\"type\":\"ajb\"},{\"properties\":{\"indexColumns\":[{\"dataType\":\"Boolean\",\"columnName\":\"u\"},{\"dataType\":\"Double\",\"columnName\":\"cblevpmc\"}],\"stage\":\"jy\",\"provisioningState\":\"Updating\",\"isArchived\":true,\"isAnonymous\":true,\"description\":\"jgkz\",\"tags\":{\"ovwmbjlzqsczpgvd\":\"afhbzf\"},\"properties\":{\"jtks\":\"pfdqwowftptnu\"}},\"id\":\"gcgqyhleseyqrhvy\",\"name\":\"ldotjvdkwisws\",\"type\":\"ukjtasbvwispkxk\"},{\"properties\":{\"indexColumns\":[{\"dataType\":\"Binary\",\"columnName\":\"dlqvtwknvg\"},{\"dataType\":\"Binary\",\"columnName\":\"gtywatmqaqkue\"},{\"dataType\":\"Double\",\"columnName\":\"oeshoygzcbyfq\"},{\"dataType\":\"Binary\",\"columnName\":\"oytehqpuvjm\"}],\"stage\":\"mtdwcky\",\"provisioningState\":\"Deleting\",\"isArchived\":false,\"isAnonymous\":true,\"description\":\"ljdjuskbrreqy\",\"tags\":{\"ysh\":\"eysfaqegplw\",\"ybwptda\":\"ddkvbxgkqu\",\"mt\":\"arvvlfnt\"},\"properties\":{\"r\":\"wenaz\",\"qalsxkd\":\"hzr\",\"vessm\":\"wqapfgsdp\"}},\"id\":\"h\",\"name\":\"uuipldq\",\"type\":\"ctekval\"}],\"nextLink\":\"htjqvqyvw\"}")
            .toObject(FeaturestoreEntityVersionResourceArmPaginatedResult.class);
        Assertions.assertEquals("d", model.value().get(0).properties().description());
        Assertions.assertEquals("jzralc", model.value().get(0).properties().tags().get("pjby"));
        Assertions.assertEquals("sqxfxjelgcmpz", model.value().get(0).properties().properties().get("jhhhqxu"));
        Assertions.assertEquals(true, model.value().get(0).properties().isArchived());
        Assertions.assertEquals(true, model.value().get(0).properties().isAnonymous());
        Assertions.assertEquals(FeatureDataType.BOOLEAN,
            model.value().get(0).properties().indexColumns().get(0).dataType());
        Assertions.assertEquals("ycyarnroohg", model.value().get(0).properties().indexColumns().get(0).columnName());
        Assertions.assertEquals("twrlohapqin", model.value().get(0).properties().stage());
        Assertions.assertEquals("htjqvqyvw", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FeaturestoreEntityVersionResourceArmPaginatedResult model
            = new FeaturestoreEntityVersionResourceArmPaginatedResult()
                .withValue(Arrays.asList(
                    new FeaturestoreEntityVersionInner().withProperties(new FeaturestoreEntityVersionProperties()
                        .withDescription("d")
                        .withTags(mapOf("pjby", "jzralc", "hf", "psjoqcjenk"))
                        .withProperties(mapOf("jhhhqxu", "sqxfxjelgcmpz", "oyvivbsiz", "yvca", "bscm", "sjsz", "v",
                            "lzijiufehgmvflnw"))
                        .withIsArchived(true)
                        .withIsAnonymous(true)
                        .withIndexColumns(Arrays.asList(
                            new IndexColumn().withDataType(FeatureDataType.BOOLEAN).withColumnName("ycyarnroohg"),
                            new IndexColumn().withDataType(FeatureDataType.INTEGER).withColumnName("oghktdpycz"),
                            new IndexColumn().withDataType(FeatureDataType.BINARY).withColumnName("ocnhzqrottjzcfyj")))
                        .withStage("twrlohapqin")),
                    new FeaturestoreEntityVersionInner()
                        .withProperties(new FeaturestoreEntityVersionProperties().withDescription("xahhxhqfaqnvzo")
                            .withTags(mapOf("ejdtxptl", "ipemchgavscz", "zhomewjjstliu", "h", "nvodrrs", "qawmoaianc",
                                "vvbxiwkgfbqljnq", "blxydkxr"))
                            .withProperties(mapOf("lrqff", "chocokulehur", "ravjuq", "weyurkphyjd", "apx", "brxmrgch"))
                            .withIsArchived(true)
                            .withIsAnonymous(true)
                            .withIndexColumns(Arrays.asList(
                                new IndexColumn().withDataType(FeatureDataType.LONG).withColumnName("qpxzucafeddwwn"),
                                new IndexColumn().withDataType(FeatureDataType.STRING).withColumnName("wxudgn"),
                                new IndexColumn().withDataType(FeatureDataType.BINARY).withColumnName("krtalvn")))
                            .withStage("gpbemeluclvdjju")),
                    new FeaturestoreEntityVersionInner()
                        .withProperties(new FeaturestoreEntityVersionProperties().withDescription("jgkz")
                            .withTags(mapOf("ovwmbjlzqsczpgvd", "afhbzf"))
                            .withProperties(mapOf("jtks", "pfdqwowftptnu"))
                            .withIsArchived(true)
                            .withIsAnonymous(true)
                            .withIndexColumns(Arrays.asList(
                                new IndexColumn().withDataType(FeatureDataType.BOOLEAN).withColumnName("u"),
                                new IndexColumn().withDataType(FeatureDataType.DOUBLE).withColumnName("cblevpmc")))
                            .withStage("jy")),
                    new FeaturestoreEntityVersionInner()
                        .withProperties(new FeaturestoreEntityVersionProperties().withDescription("ljdjuskbrreqy")
                            .withTags(mapOf("ysh", "eysfaqegplw", "ybwptda", "ddkvbxgkqu", "mt", "arvvlfnt"))
                            .withProperties(mapOf("r", "wenaz", "qalsxkd", "hzr", "vessm", "wqapfgsdp"))
                            .withIsArchived(false)
                            .withIsAnonymous(true)
                            .withIndexColumns(Arrays.asList(
                                new IndexColumn().withDataType(FeatureDataType.BINARY).withColumnName("dlqvtwknvg"),
                                new IndexColumn().withDataType(FeatureDataType.BINARY).withColumnName("gtywatmqaqkue"),
                                new IndexColumn().withDataType(FeatureDataType.DOUBLE).withColumnName("oeshoygzcbyfq"),
                                new IndexColumn().withDataType(FeatureDataType.BINARY).withColumnName("oytehqpuvjm")))
                            .withStage("mtdwcky"))))
                .withNextLink("htjqvqyvw");
        model = BinaryData.fromObject(model).toObject(FeaturestoreEntityVersionResourceArmPaginatedResult.class);
        Assertions.assertEquals("d", model.value().get(0).properties().description());
        Assertions.assertEquals("jzralc", model.value().get(0).properties().tags().get("pjby"));
        Assertions.assertEquals("sqxfxjelgcmpz", model.value().get(0).properties().properties().get("jhhhqxu"));
        Assertions.assertEquals(true, model.value().get(0).properties().isArchived());
        Assertions.assertEquals(true, model.value().get(0).properties().isAnonymous());
        Assertions.assertEquals(FeatureDataType.BOOLEAN,
            model.value().get(0).properties().indexColumns().get(0).dataType());
        Assertions.assertEquals("ycyarnroohg", model.value().get(0).properties().indexColumns().get(0).columnName());
        Assertions.assertEquals("twrlohapqin", model.value().get(0).properties().stage());
        Assertions.assertEquals("htjqvqyvw", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
