// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.BatchDeploymentInner;
import com.azure.resourcemanager.machinelearning.models.BatchDeploymentProperties;
import com.azure.resourcemanager.machinelearning.models.BatchDeploymentTrackedResourceArmPaginatedResult;
import com.azure.resourcemanager.machinelearning.models.BatchLoggingLevel;
import com.azure.resourcemanager.machinelearning.models.BatchOutputAction;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class BatchDeploymentTrackedResourceArmPaginatedResultTests {
    @Test
    public void testDeserialize() {
        BatchDeploymentTrackedResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"torzih\",\"value\":[{\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{}},\"kind\":\"mslyzrpzbchckqqz\",\"properties\":{\"compute\":\"ox\",\"errorThreshold\":1168629825,\"loggingLevel\":\"Warning\",\"maxConcurrencyPerInstance\":1896138936,\"miniBatchSize\":7826671487758053614,\"outputAction\":\"SummaryOnly\",\"outputFileName\":\"trwyhqmib\",\"provisioningState\":\"Deleting\",\"description\":\"mypyynpcdpu\",\"environmentId\":\"zgmwznmabikns\",\"environmentVariables\":{},\"properties\":{}},\"sku\":{\"name\":\"hxbld\",\"tier\":\"Standard\",\"size\":\"rlkdmtncvokotl\",\"family\":\"d\",\"capacity\":2005759666},\"location\":\"y\",\"tags\":{\"crkvcikhnv\":\"gjltdtbnnhado\",\"gxk\":\"amqgxqquezikyw\",\"melwuipiccjz\":\"lla\",\"v\":\"z\"},\"id\":\"vvcnayr\",\"name\":\"yrnxxmueedn\",\"type\":\"rdvstkwqqtch\"},{\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"kind\":\"d\",\"properties\":{\"compute\":\"ygdvwv\",\"errorThreshold\":772691250,\"loggingLevel\":\"Info\",\"maxConcurrencyPerInstance\":976430532,\"miniBatchSize\":1866729278749116751,\"outputAction\":\"SummaryOnly\",\"outputFileName\":\"epxgyqagvr\",\"provisioningState\":\"Updating\",\"description\":\"ghimdblx\",\"environmentId\":\"imfnjhfjx\",\"environmentVariables\":{},\"properties\":{}},\"sku\":{\"name\":\"kkfoqr\",\"tier\":\"Basic\",\"size\":\"zi\",\"family\":\"jawneaiv\",\"capacity\":322973840},\"location\":\"elpcirelsfeaenwa\",\"tags\":{\"dxbjhwuaanozj\":\"tkl\",\"l\":\"sphyoulpjrvxa\",\"tx\":\"vimjwos\",\"fcktqumiekke\":\"tcs\"},\"id\":\"zikhl\",\"name\":\"fjhdg\",\"type\":\"gge\"}]}")
                .toObject(BatchDeploymentTrackedResourceArmPaginatedResult.class);
        Assertions.assertEquals("torzih", model.nextLink());
        Assertions.assertEquals("y", model.value().get(0).location());
        Assertions.assertEquals("gjltdtbnnhado", model.value().get(0).tags().get("crkvcikhnv"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("mslyzrpzbchckqqz", model.value().get(0).kind());
        Assertions.assertEquals("mypyynpcdpu", model.value().get(0).properties().description());
        Assertions.assertEquals("zgmwznmabikns", model.value().get(0).properties().environmentId());
        Assertions.assertEquals("ox", model.value().get(0).properties().compute());
        Assertions.assertEquals(1168629825, model.value().get(0).properties().errorThreshold());
        Assertions.assertEquals(BatchLoggingLevel.WARNING, model.value().get(0).properties().loggingLevel());
        Assertions.assertEquals(1896138936, model.value().get(0).properties().maxConcurrencyPerInstance());
        Assertions.assertEquals(7826671487758053614L, model.value().get(0).properties().miniBatchSize());
        Assertions.assertEquals(BatchOutputAction.SUMMARY_ONLY, model.value().get(0).properties().outputAction());
        Assertions.assertEquals("trwyhqmib", model.value().get(0).properties().outputFileName());
        Assertions.assertEquals("hxbld", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.value().get(0).sku().tier());
        Assertions.assertEquals("rlkdmtncvokotl", model.value().get(0).sku().size());
        Assertions.assertEquals("d", model.value().get(0).sku().family());
        Assertions.assertEquals(2005759666, model.value().get(0).sku().capacity());
    }

    @Test
    public void testSerialize() {
        BatchDeploymentTrackedResourceArmPaginatedResult model =
            new BatchDeploymentTrackedResourceArmPaginatedResult()
                .withNextLink("torzih")
                .withValue(
                    Arrays
                        .asList(
                            new BatchDeploymentInner()
                                .withLocation("y")
                                .withTags(
                                    mapOf(
                                        "crkvcikhnv",
                                        "gjltdtbnnhado",
                                        "gxk",
                                        "amqgxqquezikyw",
                                        "melwuipiccjz",
                                        "lla",
                                        "v",
                                        "z"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf()))
                                .withKind("mslyzrpzbchckqqz")
                                .withProperties(
                                    new BatchDeploymentProperties()
                                        .withDescription("mypyynpcdpu")
                                        .withEnvironmentId("zgmwznmabikns")
                                        .withEnvironmentVariables(mapOf())
                                        .withProperties(mapOf())
                                        .withCompute("ox")
                                        .withErrorThreshold(1168629825)
                                        .withLoggingLevel(BatchLoggingLevel.WARNING)
                                        .withMaxConcurrencyPerInstance(1896138936)
                                        .withMiniBatchSize(7826671487758053614L)
                                        .withOutputAction(BatchOutputAction.SUMMARY_ONLY)
                                        .withOutputFileName("trwyhqmib"))
                                .withSku(
                                    new Sku()
                                        .withName("hxbld")
                                        .withTier(SkuTier.STANDARD)
                                        .withSize("rlkdmtncvokotl")
                                        .withFamily("d")
                                        .withCapacity(2005759666)),
                            new BatchDeploymentInner()
                                .withLocation("elpcirelsfeaenwa")
                                .withTags(
                                    mapOf(
                                        "dxbjhwuaanozj",
                                        "tkl",
                                        "l",
                                        "sphyoulpjrvxa",
                                        "tx",
                                        "vimjwos",
                                        "fcktqumiekke",
                                        "tcs"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withKind("d")
                                .withProperties(
                                    new BatchDeploymentProperties()
                                        .withDescription("ghimdblx")
                                        .withEnvironmentId("imfnjhfjx")
                                        .withEnvironmentVariables(mapOf())
                                        .withProperties(mapOf())
                                        .withCompute("ygdvwv")
                                        .withErrorThreshold(772691250)
                                        .withLoggingLevel(BatchLoggingLevel.INFO)
                                        .withMaxConcurrencyPerInstance(976430532)
                                        .withMiniBatchSize(1866729278749116751L)
                                        .withOutputAction(BatchOutputAction.SUMMARY_ONLY)
                                        .withOutputFileName("epxgyqagvr"))
                                .withSku(
                                    new Sku()
                                        .withName("kkfoqr")
                                        .withTier(SkuTier.BASIC)
                                        .withSize("zi")
                                        .withFamily("jawneaiv")
                                        .withCapacity(322973840))));
        model = BinaryData.fromObject(model).toObject(BatchDeploymentTrackedResourceArmPaginatedResult.class);
        Assertions.assertEquals("torzih", model.nextLink());
        Assertions.assertEquals("y", model.value().get(0).location());
        Assertions.assertEquals("gjltdtbnnhado", model.value().get(0).tags().get("crkvcikhnv"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("mslyzrpzbchckqqz", model.value().get(0).kind());
        Assertions.assertEquals("mypyynpcdpu", model.value().get(0).properties().description());
        Assertions.assertEquals("zgmwznmabikns", model.value().get(0).properties().environmentId());
        Assertions.assertEquals("ox", model.value().get(0).properties().compute());
        Assertions.assertEquals(1168629825, model.value().get(0).properties().errorThreshold());
        Assertions.assertEquals(BatchLoggingLevel.WARNING, model.value().get(0).properties().loggingLevel());
        Assertions.assertEquals(1896138936, model.value().get(0).properties().maxConcurrencyPerInstance());
        Assertions.assertEquals(7826671487758053614L, model.value().get(0).properties().miniBatchSize());
        Assertions.assertEquals(BatchOutputAction.SUMMARY_ONLY, model.value().get(0).properties().outputAction());
        Assertions.assertEquals("trwyhqmib", model.value().get(0).properties().outputFileName());
        Assertions.assertEquals("hxbld", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.value().get(0).sku().tier());
        Assertions.assertEquals("rlkdmtncvokotl", model.value().get(0).sku().size());
        Assertions.assertEquals("d", model.value().get(0).sku().family());
        Assertions.assertEquals(2005759666, model.value().get(0).sku().capacity());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
