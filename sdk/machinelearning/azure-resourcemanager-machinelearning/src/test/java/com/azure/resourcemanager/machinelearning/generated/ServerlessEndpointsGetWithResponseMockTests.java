// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ContentSafetyStatus;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpoint;
import com.azure.resourcemanager.machinelearning.models.ServerlessInferenceEndpointAuthMode;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServerlessEndpointsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"modelSettings\":{\"modelId\":\"brvrhwq\"},\"authMode\":\"Key\",\"inferenceEndpoint\":{\"uri\":\"fvgbkle\",\"headers\":{\"kmtljzilkyvyblj\":\"bwhesbeb\"}},\"provisioningState\":\"Updating\",\"endpointState\":\"Unknown\",\"marketplaceSubscriptionId\":\"tzqrm\",\"contentSafety\":{\"contentSafetyStatus\":\"Enabled\"}},\"kind\":\"urkggqxqanrkh\",\"identity\":{\"principalId\":\"b488f679-4345-4c70-99bd-42bc94ad7d9b\",\"tenantId\":\"2783b33a-e7ee-4719-8d89-03bed3065258\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"cnadwrbrnt\":{\"principalId\":\"44857e84-ebd2-458e-abcc-114227837c0f\",\"clientId\":\"b08901c0-8b84-4ac2-9d28-de7bad889a23\"},\"pykrlzualsvxpol\":{\"principalId\":\"068211d5-d4d5-4c2e-abd2-175fb0f0f8d4\",\"clientId\":\"92b62b95-7e41-4f79-a8e9-79b3c6c2083a\"},\"rjmsabnmu\":{\"principalId\":\"8beb7e8f-e328-41dd-806f-e27c85a05d4a\",\"clientId\":\"55cc2c73-5cf7-43b3-ae31-45d8a531d743\"},\"hyxryvwnzhsigddg\":{\"principalId\":\"3b0ddca6-7e9c-4f83-8f7a-c7547ffc6bc8\",\"clientId\":\"58291a9e-fcf7-4633-93e8-bb3271824c25\"}}},\"sku\":{\"name\":\"nqvbnybffcvtij\",\"tier\":\"Standard\",\"size\":\"zrwpgvgogczg\",\"family\":\"o\",\"capacity\":1118835977},\"location\":\"ddgyqen\",\"tags\":{\"amlrtcbvif\":\"z\",\"xstowvgwvfv\":\"r\"},\"id\":\"qlyahlao\",\"name\":\"kcitnbuzvaxltr\",\"type\":\"nwhictsauv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ServerlessEndpoint response = manager.serverlessEndpoints()
            .getWithResponse("ysrreebj", "slbxfkiiarlldygf", "dtykhsafrfv", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ddgyqen", response.location());
        Assertions.assertEquals("z", response.tags().get("amlrtcbvif"));
        Assertions.assertEquals("brvrhwq", response.properties().modelSettings().modelId());
        Assertions.assertEquals(ServerlessInferenceEndpointAuthMode.KEY, response.properties().authMode());
        Assertions.assertEquals(ContentSafetyStatus.ENABLED,
            response.properties().contentSafety().contentSafetyStatus());
        Assertions.assertEquals("urkggqxqanrkh", response.kind());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("nqvbnybffcvtij", response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("zrwpgvgogczg", response.sku().size());
        Assertions.assertEquals("o", response.sku().family());
        Assertions.assertEquals(1118835977, response.sku().capacity());
    }
}
