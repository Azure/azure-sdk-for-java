// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.models.ComputeRecurrenceFrequency;
import com.azure.resourcemanager.machinelearning.models.ComputeRecurrenceSchedule;
import com.azure.resourcemanager.machinelearning.models.ComputeWeekDay;
import com.azure.resourcemanager.machinelearning.models.Recurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Recurrence model = BinaryData.fromString(
            "{\"frequency\":\"Minute\",\"interval\":782951006,\"startTime\":\"ecf\",\"timeZone\":\"hagxsure\",\"schedule\":{\"hours\":[906252863,1130901316,1113850599,58048223],\"minutes\":[164034055,953722289],\"monthDays\":[1328602727,1389187624,813655099],\"weekDays\":[\"Tuesday\"]}}")
            .toObject(Recurrence.class);
        Assertions.assertEquals(ComputeRecurrenceFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(782951006, model.interval());
        Assertions.assertEquals("ecf", model.startTime());
        Assertions.assertEquals("hagxsure", model.timeZone());
        Assertions.assertEquals(906252863, model.schedule().hours().get(0));
        Assertions.assertEquals(164034055, model.schedule().minutes().get(0));
        Assertions.assertEquals(1328602727, model.schedule().monthDays().get(0));
        Assertions.assertEquals(ComputeWeekDay.TUESDAY, model.schedule().weekDays().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Recurrence model
            = new Recurrence().withFrequency(ComputeRecurrenceFrequency.MINUTE)
                .withInterval(782951006)
                .withStartTime("ecf")
                .withTimeZone("hagxsure")
                .withSchedule(new ComputeRecurrenceSchedule()
                    .withHours(Arrays.asList(906252863, 1130901316, 1113850599, 58048223))
                    .withMinutes(Arrays.asList(164034055, 953722289))
                    .withMonthDays(Arrays.asList(1328602727, 1389187624, 813655099))
                    .withWeekDays(Arrays.asList(ComputeWeekDay.TUESDAY)));
        model = BinaryData.fromObject(model).toObject(Recurrence.class);
        Assertions.assertEquals(ComputeRecurrenceFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(782951006, model.interval());
        Assertions.assertEquals("ecf", model.startTime());
        Assertions.assertEquals("hagxsure", model.timeZone());
        Assertions.assertEquals(906252863, model.schedule().hours().get(0));
        Assertions.assertEquals(164034055, model.schedule().minutes().get(0));
        Assertions.assertEquals(1328602727, model.schedule().monthDays().get(0));
        Assertions.assertEquals(ComputeWeekDay.TUESDAY, model.schedule().weekDays().get(0));
    }
}
