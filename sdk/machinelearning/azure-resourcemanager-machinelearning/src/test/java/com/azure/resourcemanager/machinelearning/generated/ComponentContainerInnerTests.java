// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentContainerInner;
import com.azure.resourcemanager.machinelearning.models.ComponentContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ComponentContainerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ComponentContainerInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"isArchived\":true,\"latestVersion\":\"phqamvdkfwynwcvt\",\"nextVersion\":\"kayh\",\"description\":\"nvyq\",\"tags\":{\"cjaesgvvs\":\"kzwpcnpw\",\"wygzlvdnkfxusem\":\"cyajguqf\",\"pfcqdp\":\"wzrmuh\"},\"properties\":{\"celve\":\"qvpsvuoymg\"}},\"id\":\"ypql\",\"name\":\"feo\",\"type\":\"erqwkyhkobopg\"}")
            .toObject(ComponentContainerInner.class);
        Assertions.assertEquals("nvyq", model.properties().description());
        Assertions.assertEquals("kzwpcnpw", model.properties().tags().get("cjaesgvvs"));
        Assertions.assertEquals("qvpsvuoymg", model.properties().properties().get("celve"));
        Assertions.assertEquals(true, model.properties().isArchived());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ComponentContainerInner model
            = new ComponentContainerInner().withProperties(new ComponentContainerProperties().withDescription("nvyq")
                .withTags(mapOf("cjaesgvvs", "kzwpcnpw", "wygzlvdnkfxusem", "cyajguqf", "pfcqdp", "wzrmuh"))
                .withProperties(mapOf("celve", "qvpsvuoymg"))
                .withIsArchived(true));
        model = BinaryData.fromObject(model).toObject(ComponentContainerInner.class);
        Assertions.assertEquals("nvyq", model.properties().description());
        Assertions.assertEquals("kzwpcnpw", model.properties().tags().get("cjaesgvvs"));
        Assertions.assertEquals("qvpsvuoymg", model.properties().properties().get("celve"));
        Assertions.assertEquals(true, model.properties().isArchived());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
