// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentContainerInner;
import com.azure.resourcemanager.machinelearning.models.ComponentContainerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ComponentContainerInnerTests {
    @Test
    public void testDeserialize() {
        ComponentContainerInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"isArchived\":false,\"latestVersion\":\"zpfrla\",\"nextVersion\":\"zrnw\",\"description\":\"indfpwpjyl\",\"properties\":{\"gofel\":\"lhflsjcdhszfjvf\",\"rqmq\":\"a\",\"tvsexsowuel\":\"ldvriiiojnalghfk\",\"wws\":\"qhhahhxvrhmzkwpj\"},\"tags\":{\"xdigrjg\":\"hftqsxhqxujxukn\",\"fi\":\"ufzdmsyq\",\"phoszqz\":\"whbotzingamv\",\"kfwynw\":\"dphqamv\"}},\"id\":\"tbvkayhmtnvyq\",\"name\":\"atkzwpcnpw\",\"type\":\"cjaesgvvs\"}")
                .toObject(ComponentContainerInner.class);
        Assertions.assertEquals("indfpwpjyl", model.properties().description());
        Assertions.assertEquals("lhflsjcdhszfjvf", model.properties().properties().get("gofel"));
        Assertions.assertEquals("hftqsxhqxujxukn", model.properties().tags().get("xdigrjg"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @Test
    public void testSerialize() {
        ComponentContainerInner model =
            new ComponentContainerInner()
                .withProperties(
                    new ComponentContainerProperties()
                        .withDescription("indfpwpjyl")
                        .withProperties(
                            mapOf(
                                "gofel",
                                "lhflsjcdhszfjvf",
                                "rqmq",
                                "a",
                                "tvsexsowuel",
                                "ldvriiiojnalghfk",
                                "wws",
                                "qhhahhxvrhmzkwpj"))
                        .withTags(
                            mapOf(
                                "xdigrjg",
                                "hftqsxhqxujxukn",
                                "fi",
                                "ufzdmsyq",
                                "phoszqz",
                                "whbotzingamv",
                                "kfwynw",
                                "dphqamv"))
                        .withIsArchived(false));
        model = BinaryData.fromObject(model).toObject(ComponentContainerInner.class);
        Assertions.assertEquals("indfpwpjyl", model.properties().description());
        Assertions.assertEquals("lhflsjcdhszfjvf", model.properties().properties().get("gofel"));
        Assertions.assertEquals("hftqsxhqxujxukn", model.properties().tags().get("xdigrjg"));
        Assertions.assertEquals(false, model.properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
