// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ComputeResource;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ComputesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{}},\"location\":\"vgjbfio\",\"tags\":{\"cbjqqwmtqsm\":\"jod\",\"cywnfyszza\":\"xsazuxejgw\",\"ozsyvrm\":\"zsinqbdnddb\",\"eeih\":\"jmyitrchwudl\"},\"sku\":{\"name\":\"mnoejhqlfmsib\",\"tier\":\"Basic\",\"size\":\"fgxkydpmypgf\",\"family\":\"mtywhla\",\"capacity\":201079679},\"properties\":{\"computeType\":\"Compute\",\"computeLocation\":\"ewp\",\"provisioningState\":\"Failed\",\"description\":\"xampqcr\",\"createdOn\":\"2021-06-25T20:26:26Z\",\"modifiedOn\":\"2021-01-20T04:39:30Z\",\"resourceId\":\"b\",\"provisioningErrors\":[],\"isAttachedCompute\":false,\"disableLocalAuth\":true},\"id\":\"ujegqdtadra\",\"name\":\"gddhjkrukizyhgs\",\"type\":\"tnqsktx\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MachineLearningManager manager =
            MachineLearningManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ComputeResource> response =
            manager.computes().list("oilunwemhdee", "jslkyozdsfzjue", "rhrhtsl", Context.NONE);

        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("vgjbfio", response.iterator().next().location());
        Assertions.assertEquals("jod", response.iterator().next().tags().get("cbjqqwmtqsm"));
        Assertions.assertEquals("mnoejhqlfmsib", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.iterator().next().sku().tier());
        Assertions.assertEquals("fgxkydpmypgf", response.iterator().next().sku().size());
        Assertions.assertEquals("mtywhla", response.iterator().next().sku().family());
        Assertions.assertEquals(201079679, response.iterator().next().sku().capacity());
        Assertions.assertEquals("ewp", response.iterator().next().properties().computeLocation());
        Assertions.assertEquals("xampqcr", response.iterator().next().properties().description());
        Assertions.assertEquals("b", response.iterator().next().properties().resourceId());
        Assertions.assertEquals(true, response.iterator().next().properties().disableLocalAuth());
    }
}
