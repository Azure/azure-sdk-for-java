// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.ContentSafetyStatus;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.ServerlessEndpoint;
import com.azure.resourcemanager.machinelearning.models.ServerlessInferenceEndpointAuthMode;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServerlessEndpointsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"modelSettings\":{\"modelId\":\"swl\"},\"authMode\":\"Key\",\"inferenceEndpoint\":{\"uri\":\"b\",\"headers\":{\"hpn\":\"gs\",\"sbubzfayy\":\"tltjekqzfwlkyrnm\",\"snfgmohhc\":\"qecwrtreder\",\"ymqnvv\":\"hvsmvvfp\"}},\"provisioningState\":\"Canceled\",\"endpointState\":\"Deleting\",\"marketplaceSubscriptionId\":\"lboawzplwghfg\",\"contentSafety\":{\"contentSafetyStatus\":\"Disabled\"}},\"kind\":\"mtupr\",\"identity\":{\"principalId\":\"9f66a669-df85-44ed-902a-7718673bfc91\",\"tenantId\":\"38268f4e-6ed4-4b6f-bbfa-6b2494363dae\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"pya\":{\"principalId\":\"92933377-0f89-448e-b167-509cb27ac183\",\"clientId\":\"86b6524c-6a8e-4399-8d51-861e439ac048\"},\"ejpar\":{\"principalId\":\"a7e72fb5-88eb-4c90-a676-d11ce99437aa\",\"clientId\":\"d1ebdb12-acbf-48c2-8690-8ffa96181f6f\"},\"bozfjb\":{\"principalId\":\"776c42f5-752c-43bd-969b-414dd8c8288d\",\"clientId\":\"6cb8267f-ab99-4534-8c1d-9fc8de79bfb3\"},\"xh\":{\"principalId\":\"73228ec7-8e28-464b-9f42-a9acedcea064\",\"clientId\":\"b8acea72-3c99-4c86-8b98-524ac4c37871\"}}},\"sku\":{\"name\":\"zjbwmrdlnb\",\"tier\":\"Free\",\"size\":\"rikruljb\",\"family\":\"zffemry\",\"capacity\":271862933},\"location\":\"bbzcd\",\"tags\":{\"bhbliibx\":\"qum\"},\"id\":\"lzinxxjfixruk\",\"name\":\"xcaagzlqosgzgsgz\",\"type\":\"bunmjhacfiyryw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ServerlessEndpoint> response
            = manager.serverlessEndpoints().list("ycntaov", "yykx", "fpkdsldyw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bbzcd", response.iterator().next().location());
        Assertions.assertEquals("qum", response.iterator().next().tags().get("bhbliibx"));
        Assertions.assertEquals("swl", response.iterator().next().properties().modelSettings().modelId());
        Assertions.assertEquals(ServerlessInferenceEndpointAuthMode.KEY,
            response.iterator().next().properties().authMode());
        Assertions.assertEquals(ContentSafetyStatus.DISABLED,
            response.iterator().next().properties().contentSafety().contentSafetyStatus());
        Assertions.assertEquals("mtupr", response.iterator().next().kind());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("zjbwmrdlnb", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.FREE, response.iterator().next().sku().tier());
        Assertions.assertEquals("rikruljb", response.iterator().next().sku().size());
        Assertions.assertEquals("zffemry", response.iterator().next().sku().family());
        Assertions.assertEquals(271862933, response.iterator().next().sku().capacity());
    }
}
