// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.machinelearning.MachineLearningManager;
import com.azure.resourcemanager.machinelearning.models.BillingCurrency;
import com.azure.resourcemanager.machinelearning.models.UnitOfMeasure;
import com.azure.resourcemanager.machinelearning.models.VirtualMachineSizeListResult;
import com.azure.resourcemanager.machinelearning.models.VMPriceOSType;
import com.azure.resourcemanager.machinelearning.models.VMTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VirtualMachineSizesListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"bvjh\",\"family\":\"pmqququxl\",\"vCPUs\":241242158,\"gpus\":1242468021,\"osVhdSizeMB\":650458247,\"maxResourceVolumeMB\":132435040,\"memoryGB\":31.054010870691286,\"lowPriorityCapable\":true,\"premiumIO\":true,\"estimatedVMPrices\":{\"billingCurrency\":\"USD\",\"unitOfMeasure\":\"OneHour\",\"values\":[{\"retailPrice\":9.524913939318969,\"osType\":\"Linux\",\"vmTier\":\"Standard\"}]},\"supportedComputeTypes\":[\"qpfy\",\"vhtvijvwmrg\"]},{\"name\":\"zhrplcxfmbzqu\",\"family\":\"tqmh\",\"vCPUs\":1980172415,\"gpus\":1049452948,\"osVhdSizeMB\":939315181,\"maxResourceVolumeMB\":823035085,\"memoryGB\":7.69921960533233,\"lowPriorityCapable\":false,\"premiumIO\":true,\"estimatedVMPrices\":{\"billingCurrency\":\"USD\",\"unitOfMeasure\":\"OneHour\",\"values\":[{\"retailPrice\":69.40534502928313,\"osType\":\"Linux\",\"vmTier\":\"Standard\"},{\"retailPrice\":80.17743221655657,\"osType\":\"Windows\",\"vmTier\":\"Spot\"}]},\"supportedComputeTypes\":[\"fufkekzfk\",\"cxhsevmnkgghvsr\",\"jokvlwvbjsa\",\"xsv\"]}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MachineLearningManager manager = MachineLearningManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        VirtualMachineSizeListResult response = manager.virtualMachineSizes()
            .listWithResponse("ksutacuctiha", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(BillingCurrency.USD, response.value().get(0).estimatedVMPrices().billingCurrency());
        Assertions.assertEquals(UnitOfMeasure.ONE_HOUR, response.value().get(0).estimatedVMPrices().unitOfMeasure());
        Assertions.assertEquals(9.524913939318969,
            response.value().get(0).estimatedVMPrices().values().get(0).retailPrice());
        Assertions.assertEquals(VMPriceOSType.LINUX,
            response.value().get(0).estimatedVMPrices().values().get(0).osType());
        Assertions.assertEquals(VMTier.STANDARD, response.value().get(0).estimatedVMPrices().values().get(0).vmTier());
        Assertions.assertEquals("qpfy", response.value().get(0).supportedComputeTypes().get(0));
    }
}
