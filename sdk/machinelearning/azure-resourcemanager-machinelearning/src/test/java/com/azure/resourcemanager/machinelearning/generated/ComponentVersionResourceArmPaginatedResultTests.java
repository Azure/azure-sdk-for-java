// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.machinelearning.fluent.models.ComponentVersionInner;
import com.azure.resourcemanager.machinelearning.models.ComponentVersionProperties;
import com.azure.resourcemanager.machinelearning.models.ComponentVersionResourceArmPaginatedResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ComponentVersionResourceArmPaginatedResultTests {
    @Test
    public void testDeserialize() {
        ComponentVersionResourceArmPaginatedResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"rv\",\"value\":[{\"properties\":{\"isAnonymous\":true,\"isArchived\":false,\"description\":\"fggjioolvr\",\"properties\":{},\"tags\":{}},\"id\":\"tkkgllqwjy\",\"name\":\"vjayvblmhvkzu\",\"type\":\"bxvvyhg\"},{\"properties\":{\"isAnonymous\":false,\"isArchived\":true,\"description\":\"u\",\"properties\":{},\"tags\":{}},\"id\":\"uvwzfbnh\",\"name\":\"mctlpdngitv\",\"type\":\"bmhrixkwmyijejv\"},{\"properties\":{\"isAnonymous\":true,\"isArchived\":false,\"description\":\"aixexccbdreaxh\",\"properties\":{},\"tags\":{}},\"id\":\"rrvqa\",\"name\":\"qkghtpwijnhy\",\"type\":\"svfycxzbfv\"}]}")
                .toObject(ComponentVersionResourceArmPaginatedResult.class);
        Assertions.assertEquals("rv", model.nextLink());
        Assertions.assertEquals("fggjioolvr", model.value().get(0).properties().description());
        Assertions.assertEquals(true, model.value().get(0).properties().isAnonymous());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @Test
    public void testSerialize() {
        ComponentVersionResourceArmPaginatedResult model =
            new ComponentVersionResourceArmPaginatedResult()
                .withNextLink("rv")
                .withValue(
                    Arrays
                        .asList(
                            new ComponentVersionInner()
                                .withProperties(
                                    new ComponentVersionProperties()
                                        .withDescription("fggjioolvr")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsAnonymous(true)
                                        .withIsArchived(false)),
                            new ComponentVersionInner()
                                .withProperties(
                                    new ComponentVersionProperties()
                                        .withDescription("u")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsAnonymous(false)
                                        .withIsArchived(true)),
                            new ComponentVersionInner()
                                .withProperties(
                                    new ComponentVersionProperties()
                                        .withDescription("aixexccbdreaxh")
                                        .withProperties(mapOf())
                                        .withTags(mapOf())
                                        .withIsAnonymous(true)
                                        .withIsArchived(false))));
        model = BinaryData.fromObject(model).toObject(ComponentVersionResourceArmPaginatedResult.class);
        Assertions.assertEquals("rv", model.nextLink());
        Assertions.assertEquals("fggjioolvr", model.value().get(0).properties().description());
        Assertions.assertEquals(true, model.value().get(0).properties().isAnonymous());
        Assertions.assertEquals(false, model.value().get(0).properties().isArchived());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
