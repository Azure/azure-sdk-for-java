// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol;

import com.azure.ai.chatprotocol.implementation.ChatProtocolClientImpl;
import com.azure.ai.chatprotocol.models.ChatCompletion;
import com.azure.ai.chatprotocol.models.ChatCompletionChunk;
import com.azure.ai.chatprotocol.models.ChatCompletionOptions;
import com.azure.ai.chatprotocol.models.StreamingChatCompletionOptions;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous ChatProtocolClient type. */
@ServiceClient(builder = ChatProtocolClientBuilder.class)
public final class ChatProtocolClient {
    @Generated private final ChatProtocolClientImpl serviceClient;

    /**
     * Initializes an instance of ChatProtocolClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    ChatProtocolClient(ChatProtocolClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new streaming chat completion.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             delta (Required): {
     *                 role: String(user/system/assistant) (Optional)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Optional)
     *             }
     *             finishReason: String(stop/length) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param streamingChatCompletionOptions The configuration for a streaming chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single response to a streaming completion request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createStreamingWithResponse(
            String operationRoute, BinaryData streamingChatCompletionOptions, RequestOptions requestOptions) {
        return this.serviceClient.createStreamingWithResponse(
                operationRoute, streamingChatCompletionOptions, requestOptions);
    }

    /**
     * Creates a new chat completion.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             message (Required): {
     *                 role: String(user/system/assistant) (Required)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Optional)
     *             }
     *             finishReason: String(stop/length) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param chatCompletionOptions The configuration for a chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return representation of the response to a chat completion request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(
            String operationRoute, BinaryData chatCompletionOptions, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(operationRoute, chatCompletionOptions, requestOptions);
    }

    /**
     * Creates a new streaming chat completion.
     *
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param streamingChatCompletionOptions The configuration for a streaming chat completion request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single response to a streaming completion request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatCompletionChunk createStreaming(
            String operationRoute, StreamingChatCompletionOptions streamingChatCompletionOptions) {
        // Generated convenience method for createStreamingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createStreamingWithResponse(
                        operationRoute, BinaryData.fromObject(streamingChatCompletionOptions), requestOptions)
                .getValue()
                .toObject(ChatCompletionChunk.class);
    }

    /**
     * Creates a new chat completion.
     *
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param chatCompletionOptions The configuration for a chat completion request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return representation of the response to a chat completion request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatCompletion create(String operationRoute, ChatCompletionOptions chatCompletionOptions) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(operationRoute, BinaryData.fromObject(chatCompletionOptions), requestOptions)
                .getValue()
                .toObject(ChatCompletion.class);
    }
}
