// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The configuration for a chat completion request. */
@Fluent
public final class ChatCompletionOptions {
    /*
     * The collection of context messages associated with this completion request.
     */
    @Generated
    @JsonProperty(value = "messages")
    private List<ChatMessage> messages;

    /*
     * Indicates whether the completion is a streaming or non-streaming completion.
     */
    @Generated
    @JsonProperty(value = "stream")
    private boolean stream = false;

    /*
     * Field that allows the chat app to store and retrieve data, the structure of such data is dependant on the
     * backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat
     * app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     */
    @Generated
    @JsonProperty(value = "sessionState")
    private Object sessionState;

    /*
     * Context allows the chat app to receive extra parameters from the client, such as temperature, functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     */
    @Generated
    @JsonProperty(value = "context")
    private Map<String, Object> context;

    /**
     * Creates an instance of ChatCompletionOptions class.
     *
     * @param messages the messages value to set.
     */
    @Generated
    @JsonCreator
    public ChatCompletionOptions(@JsonProperty(value = "messages") List<ChatMessage> messages) {
        stream = false;
        this.messages = messages;
    }

    /**
     * Get the messages property: The collection of context messages associated with this completion request.
     *
     * @return the messages value.
     */
    @Generated
    public List<ChatMessage> getMessages() {
        return this.messages;
    }

    /**
     * Get the stream property: Indicates whether the completion is a streaming or non-streaming completion.
     *
     * @return the stream value.
     */
    @Generated
    public boolean isStream() {
        return this.stream;
    }

    /**
     * Get the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend being used. The client must send back the data in this field unchanged in
     * subsequent requests, until the chat app sends a new one. The data in this field can be used to implement stateful
     * services, such as remembering previous conversations or user preferences.
     *
     * @return the sessionState value.
     */
    @Generated
    public Object getSessionState() {
        return this.sessionState;
    }

    /**
     * Set the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend being used. The client must send back the data in this field unchanged in
     * subsequent requests, until the chat app sends a new one. The data in this field can be used to implement stateful
     * services, such as remembering previous conversations or user preferences.
     *
     * @param sessionState the sessionState value to set.
     * @return the ChatCompletionOptions object itself.
     */
    @Generated
    public ChatCompletionOptions setSessionState(Object sessionState) {
        this.sessionState = sessionState;
        return this;
    }

    /**
     * Get the context property: Context allows the chat app to receive extra parameters from the client, such as
     * temperature, functions, or customer_info. These parameters are specific to the chat app and not understood by the
     * generic clients.
     *
     * @return the context value.
     */
    @Generated
    public Map<String, Object> getContext() {
        return this.context;
    }

    /**
     * Set the context property: Context allows the chat app to receive extra parameters from the client, such as
     * temperature, functions, or customer_info. These parameters are specific to the chat app and not understood by the
     * generic clients.
     *
     * @param context the context value to set.
     * @return the ChatCompletionOptions object itself.
     */
    @Generated
    public ChatCompletionOptions setContext(Map<String, Object> context) {
        this.context = context;
        return this;
    }
}
