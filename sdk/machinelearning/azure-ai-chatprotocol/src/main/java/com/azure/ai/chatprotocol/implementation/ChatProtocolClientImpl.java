// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the ChatProtocolClient type. */
public final class ChatProtocolClientImpl {
    /** The proxy service used to perform REST calls. */
    private final ChatProtocolClientService service;

    /** */
    private final String endpoint;

    /**
     * Gets.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of ChatProtocolClient client.
     *
     * @param endpoint
     */
    public ChatProtocolClientImpl(String endpoint) {
        this(
                new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint);
    }

    /**
     * Initializes an instance of ChatProtocolClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint
     */
    public ChatProtocolClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of ChatProtocolClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint
     */
    public ChatProtocolClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.service =
                RestProxy.create(ChatProtocolClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for ChatProtocolClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ChatProtocolClient")
    public interface ChatProtocolClientService {
        @Post("/{operationRoute}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createStreaming(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationRoute") String operationRoute,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData streamingChatCompletionOptions,
                RequestOptions requestOptions,
                Context context);

        @Post("/{operationRoute}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createStreamingSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationRoute") String operationRoute,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData streamingChatCompletionOptions,
                RequestOptions requestOptions,
                Context context);

        @Post("/{operationRoute}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationRoute") String operationRoute,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData chatCompletionOptions,
                RequestOptions requestOptions,
                Context context);

        @Post("/{operationRoute}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationRoute") String operationRoute,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData chatCompletionOptions,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Creates a new streaming chat completion.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             delta (Required): {
     *                 role: String(user/system/assistant) (Optional)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Optional)
     *             }
     *             finishReason: String(stop/length) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param streamingChatCompletionOptions The configuration for a streaming chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single response to a streaming completion request along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createStreamingWithResponseAsync(
            String operationRoute, BinaryData streamingChatCompletionOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createStreaming(
                                this.getEndpoint(),
                                operationRoute,
                                accept,
                                streamingChatCompletionOptions,
                                requestOptions,
                                context));
    }

    /**
     * Creates a new streaming chat completion.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             delta (Required): {
     *                 role: String(user/system/assistant) (Optional)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Optional)
     *             }
     *             finishReason: String(stop/length) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param streamingChatCompletionOptions The configuration for a streaming chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single response to a streaming completion request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createStreamingWithResponse(
            String operationRoute, BinaryData streamingChatCompletionOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createStreamingSync(
                this.getEndpoint(),
                operationRoute,
                accept,
                streamingChatCompletionOptions,
                requestOptions,
                Context.NONE);
    }

    /**
     * Creates a new chat completion.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             message (Required): {
     *                 role: String(user/system/assistant) (Required)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Optional)
     *             }
     *             finishReason: String(stop/length) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param chatCompletionOptions The configuration for a chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return representation of the response to a chat completion request along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(
            String operationRoute, BinaryData chatCompletionOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.create(
                                this.getEndpoint(),
                                operationRoute,
                                accept,
                                chatCompletionOptions,
                                requestOptions,
                                context));
    }

    /**
     * Creates a new chat completion.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             message (Required): {
     *                 role: String(user/system/assistant) (Required)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Optional)
     *             }
     *             finishReason: String(stop/length) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param chatCompletionOptions The configuration for a chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return representation of the response to a chat completion request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(
            String operationRoute, BinaryData chatCompletionOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createSync(
                this.getEndpoint(), operationRoute, accept, chatCompletionOptions, requestOptions, Context.NONE);
    }
}
