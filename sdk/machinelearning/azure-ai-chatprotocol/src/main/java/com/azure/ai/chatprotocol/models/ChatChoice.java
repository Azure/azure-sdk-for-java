// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The representation of a single generated completion. */
@Immutable
public final class ChatChoice {
    /*
     * The index of the of the chat choice, relative to the other choices in the same completion.
     */
    @Generated
    @JsonProperty(value = "index")
    private long index;

    /*
     * The chat message for a given chat completion.
     */
    @Generated
    @JsonProperty(value = "message")
    private ChatMessage message;

    /*
     * Field that allows the chat app to store and retrieve data, the structure of such data is dependant on the
     * backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat
     * app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     */
    @Generated
    @JsonProperty(value = "sessionState")
    private Object sessionState;

    /*
     * Context allows the chat app to receive extra parameters from the client, such as temperature, functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     */
    @Generated
    @JsonProperty(value = "context")
    private Map<String, Object> context;

    /*
     * The reason this chat completion completed its generation.
     */
    @Generated
    @JsonProperty(value = "finishReason")
    private FinishReason finishReason;

    /**
     * Creates an instance of ChatChoice class.
     *
     * @param index the index value to set.
     * @param message the message value to set.
     * @param finishReason the finishReason value to set.
     */
    @Generated
    @JsonCreator
    private ChatChoice(
            @JsonProperty(value = "index") long index,
            @JsonProperty(value = "message") ChatMessage message,
            @JsonProperty(value = "finishReason") FinishReason finishReason) {
        this.index = index;
        this.message = message;
        this.finishReason = finishReason;
    }

    /**
     * Get the index property: The index of the of the chat choice, relative to the other choices in the same
     * completion.
     *
     * @return the index value.
     */
    @Generated
    public long getIndex() {
        return this.index;
    }

    /**
     * Get the message property: The chat message for a given chat completion.
     *
     * @return the message value.
     */
    @Generated
    public ChatMessage getMessage() {
        return this.message;
    }

    /**
     * Get the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend being used. The client must send back the data in this field unchanged in
     * subsequent requests, until the chat app sends a new one. The data in this field can be used to implement stateful
     * services, such as remembering previous conversations or user preferences.
     *
     * @return the sessionState value.
     */
    @Generated
    public Object getSessionState() {
        return this.sessionState;
    }

    /**
     * Get the context property: Context allows the chat app to receive extra parameters from the client, such as
     * temperature, functions, or customer_info. These parameters are specific to the chat app and not understood by the
     * generic clients.
     *
     * @return the context value.
     */
    @Generated
    public Map<String, Object> getContext() {
        return this.context;
    }

    /**
     * Get the finishReason property: The reason this chat completion completed its generation.
     *
     * @return the finishReason value.
     */
    @Generated
    public FinishReason getFinishReason() {
        return this.finishReason;
    }
}
