// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Spring Cloud Gateway properties.
 */
@Fluent
public final class SpringCloudGatewayComponent extends JavaComponentProperties {
    /*
     * Type of the Java Component.
     */
    private JavaComponentType componentType = JavaComponentType.SPRING_CLOUD_GATEWAY;

    /*
     * Java Component Ingress configurations.
     */
    private JavaComponentIngress ingress;

    /*
     * Gateway route definition
     */
    private List<ScgRoute> springCloudGatewayRoutes;

    /*
     * Provisioning state of the Java Component.
     */
    private JavaComponentProvisioningState provisioningState;

    /**
     * Creates an instance of SpringCloudGatewayComponent class.
     */
    public SpringCloudGatewayComponent() {
    }

    /**
     * Get the componentType property: Type of the Java Component.
     * 
     * @return the componentType value.
     */
    @Override
    public JavaComponentType componentType() {
        return this.componentType;
    }

    /**
     * Get the ingress property: Java Component Ingress configurations.
     * 
     * @return the ingress value.
     */
    public JavaComponentIngress ingress() {
        return this.ingress;
    }

    /**
     * Set the ingress property: Java Component Ingress configurations.
     * 
     * @param ingress the ingress value to set.
     * @return the SpringCloudGatewayComponent object itself.
     */
    public SpringCloudGatewayComponent withIngress(JavaComponentIngress ingress) {
        this.ingress = ingress;
        return this;
    }

    /**
     * Get the springCloudGatewayRoutes property: Gateway route definition.
     * 
     * @return the springCloudGatewayRoutes value.
     */
    public List<ScgRoute> springCloudGatewayRoutes() {
        return this.springCloudGatewayRoutes;
    }

    /**
     * Set the springCloudGatewayRoutes property: Gateway route definition.
     * 
     * @param springCloudGatewayRoutes the springCloudGatewayRoutes value to set.
     * @return the SpringCloudGatewayComponent object itself.
     */
    public SpringCloudGatewayComponent withSpringCloudGatewayRoutes(List<ScgRoute> springCloudGatewayRoutes) {
        this.springCloudGatewayRoutes = springCloudGatewayRoutes;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Java Component.
     * 
     * @return the provisioningState value.
     */
    @Override
    public JavaComponentProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpringCloudGatewayComponent withConfigurations(List<JavaComponentConfigurationProperty> configurations) {
        super.withConfigurations(configurations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpringCloudGatewayComponent withScale(JavaComponentPropertiesScale scale) {
        super.withScale(scale);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpringCloudGatewayComponent withServiceBinds(List<JavaComponentServiceBind> serviceBinds) {
        super.withServiceBinds(serviceBinds);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (ingress() != null) {
            ingress().validate();
        }
        if (springCloudGatewayRoutes() != null) {
            springCloudGatewayRoutes().forEach(e -> e.validate());
        }
        if (configurations() != null) {
            configurations().forEach(e -> e.validate());
        }
        if (scale() != null) {
            scale().validate();
        }
        if (serviceBinds() != null) {
            serviceBinds().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("configurations", configurations(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("scale", scale());
        jsonWriter.writeArrayField("serviceBinds", serviceBinds(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("componentType", this.componentType == null ? null : this.componentType.toString());
        jsonWriter.writeJsonField("ingress", this.ingress);
        jsonWriter.writeArrayField("springCloudGatewayRoutes", this.springCloudGatewayRoutes,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SpringCloudGatewayComponent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SpringCloudGatewayComponent if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SpringCloudGatewayComponent.
     */
    public static SpringCloudGatewayComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SpringCloudGatewayComponent deserializedSpringCloudGatewayComponent = new SpringCloudGatewayComponent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedSpringCloudGatewayComponent.provisioningState
                        = JavaComponentProvisioningState.fromString(reader.getString());
                } else if ("configurations".equals(fieldName)) {
                    List<JavaComponentConfigurationProperty> configurations
                        = reader.readArray(reader1 -> JavaComponentConfigurationProperty.fromJson(reader1));
                    deserializedSpringCloudGatewayComponent.withConfigurations(configurations);
                } else if ("scale".equals(fieldName)) {
                    deserializedSpringCloudGatewayComponent.withScale(JavaComponentPropertiesScale.fromJson(reader));
                } else if ("serviceBinds".equals(fieldName)) {
                    List<JavaComponentServiceBind> serviceBinds
                        = reader.readArray(reader1 -> JavaComponentServiceBind.fromJson(reader1));
                    deserializedSpringCloudGatewayComponent.withServiceBinds(serviceBinds);
                } else if ("componentType".equals(fieldName)) {
                    deserializedSpringCloudGatewayComponent.componentType
                        = JavaComponentType.fromString(reader.getString());
                } else if ("ingress".equals(fieldName)) {
                    deserializedSpringCloudGatewayComponent.ingress = JavaComponentIngress.fromJson(reader);
                } else if ("springCloudGatewayRoutes".equals(fieldName)) {
                    List<ScgRoute> springCloudGatewayRoutes = reader.readArray(reader1 -> ScgRoute.fromJson(reader1));
                    deserializedSpringCloudGatewayComponent.springCloudGatewayRoutes = springCloudGatewayRoutes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSpringCloudGatewayComponent;
        });
    }
}
