// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Container App Label History resource specific properties.
 */
@Immutable
public final class LabelHistoryProperties implements JsonSerializable<LabelHistoryProperties> {
    /*
     * List of label history records.
     */
    private List<LabelHistoryRecordItem> records;

    /**
     * Creates an instance of LabelHistoryProperties class.
     */
    public LabelHistoryProperties() {
    }

    /**
     * Get the records property: List of label history records.
     * 
     * @return the records value.
     */
    public List<LabelHistoryRecordItem> records() {
        return this.records;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (records() != null) {
            records().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabelHistoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabelHistoryProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabelHistoryProperties.
     */
    public static LabelHistoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabelHistoryProperties deserializedLabelHistoryProperties = new LabelHistoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("records".equals(fieldName)) {
                    List<LabelHistoryRecordItem> records
                        = reader.readArray(reader1 -> LabelHistoryRecordItem.fromJson(reader1));
                    deserializedLabelHistoryProperties.records = records;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabelHistoryProperties;
        });
    }
}
