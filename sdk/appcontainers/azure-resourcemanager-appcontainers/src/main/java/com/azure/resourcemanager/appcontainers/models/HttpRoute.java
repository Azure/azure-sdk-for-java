// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Http Routes configuration, including paths to match on and whether or not rewrites are to be done.
 */
@Fluent
public final class HttpRoute implements JsonSerializable<HttpRoute> {
    /*
     * Conditions route will match on
     */
    private HttpRouteMatch match;

    /*
     * Once route is matched, what is the desired action
     */
    private HttpRouteAction action;

    /**
     * Creates an instance of HttpRoute class.
     */
    public HttpRoute() {
    }

    /**
     * Get the match property: Conditions route will match on.
     * 
     * @return the match value.
     */
    public HttpRouteMatch match() {
        return this.match;
    }

    /**
     * Set the match property: Conditions route will match on.
     * 
     * @param match the match value to set.
     * @return the HttpRoute object itself.
     */
    public HttpRoute withMatch(HttpRouteMatch match) {
        this.match = match;
        return this;
    }

    /**
     * Get the action property: Once route is matched, what is the desired action.
     * 
     * @return the action value.
     */
    public HttpRouteAction action() {
        return this.action;
    }

    /**
     * Set the action property: Once route is matched, what is the desired action.
     * 
     * @param action the action value to set.
     * @return the HttpRoute object itself.
     */
    public HttpRoute withAction(HttpRouteAction action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (match() != null) {
            match().validate();
        }
        if (action() != null) {
            action().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("match", this.match);
        jsonWriter.writeJsonField("action", this.action);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HttpRoute from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HttpRoute if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the HttpRoute.
     */
    public static HttpRoute fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HttpRoute deserializedHttpRoute = new HttpRoute();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("match".equals(fieldName)) {
                    deserializedHttpRoute.match = HttpRouteMatch.fromJson(reader);
                } else if ("action".equals(fieldName)) {
                    deserializedHttpRoute.action = HttpRouteAction.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHttpRoute;
        });
    }
}
