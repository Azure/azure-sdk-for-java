// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration properties for disk encryption.
 */
@Fluent
public final class DiskEncryptionConfiguration implements JsonSerializable<DiskEncryptionConfiguration> {
    /*
     * The Key Vault that contains your key to use for disk encryption. The Key Vault must be in the same region as the
     * Managed Environment.
     */
    private DiskEncryptionConfigurationKeyVaultConfiguration keyVaultConfiguration;

    /**
     * Creates an instance of DiskEncryptionConfiguration class.
     */
    public DiskEncryptionConfiguration() {
    }

    /**
     * Get the keyVaultConfiguration property: The Key Vault that contains your key to use for disk encryption. The Key
     * Vault must be in the same region as the Managed Environment.
     * 
     * @return the keyVaultConfiguration value.
     */
    public DiskEncryptionConfigurationKeyVaultConfiguration keyVaultConfiguration() {
        return this.keyVaultConfiguration;
    }

    /**
     * Set the keyVaultConfiguration property: The Key Vault that contains your key to use for disk encryption. The Key
     * Vault must be in the same region as the Managed Environment.
     * 
     * @param keyVaultConfiguration the keyVaultConfiguration value to set.
     * @return the DiskEncryptionConfiguration object itself.
     */
    public DiskEncryptionConfiguration
        withKeyVaultConfiguration(DiskEncryptionConfigurationKeyVaultConfiguration keyVaultConfiguration) {
        this.keyVaultConfiguration = keyVaultConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultConfiguration() != null) {
            keyVaultConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("keyVaultConfiguration", this.keyVaultConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskEncryptionConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskEncryptionConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskEncryptionConfiguration.
     */
    public static DiskEncryptionConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskEncryptionConfiguration deserializedDiskEncryptionConfiguration = new DiskEncryptionConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultConfiguration".equals(fieldName)) {
                    deserializedDiskEncryptionConfiguration.keyVaultConfiguration
                        = DiskEncryptionConfigurationKeyVaultConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskEncryptionConfiguration;
        });
    }
}
