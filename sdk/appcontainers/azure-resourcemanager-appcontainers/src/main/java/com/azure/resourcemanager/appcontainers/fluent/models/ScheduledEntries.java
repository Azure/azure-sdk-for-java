// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appcontainers.models.ScheduledEntry;
import java.io.IOException;
import java.util.List;

/**
 * List of maintenance schedules for a managed environment.
 */
@Fluent
public final class ScheduledEntries implements JsonSerializable<ScheduledEntries> {
    /*
     * List of maintenance schedules for a managed environment.
     */
    private List<ScheduledEntry> scheduledEntries;

    /**
     * Creates an instance of ScheduledEntries class.
     */
    public ScheduledEntries() {
    }

    /**
     * Get the scheduledEntries property: List of maintenance schedules for a managed environment.
     * 
     * @return the scheduledEntries value.
     */
    public List<ScheduledEntry> scheduledEntries() {
        return this.scheduledEntries;
    }

    /**
     * Set the scheduledEntries property: List of maintenance schedules for a managed environment.
     * 
     * @param scheduledEntries the scheduledEntries value to set.
     * @return the ScheduledEntries object itself.
     */
    public ScheduledEntries withScheduledEntries(List<ScheduledEntry> scheduledEntries) {
        this.scheduledEntries = scheduledEntries;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scheduledEntries() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scheduledEntries in model ScheduledEntries"));
        } else {
            scheduledEntries().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduledEntries.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("scheduledEntries", this.scheduledEntries,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduledEntries from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduledEntries if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduledEntries.
     */
    public static ScheduledEntries fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduledEntries deserializedScheduledEntries = new ScheduledEntries();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduledEntries".equals(fieldName)) {
                    List<ScheduledEntry> scheduledEntries
                        = reader.readArray(reader1 -> ScheduledEntry.fromJson(reader1));
                    deserializedScheduledEntries.scheduledEntries = scheduledEntries;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduledEntries;
        });
    }
}
