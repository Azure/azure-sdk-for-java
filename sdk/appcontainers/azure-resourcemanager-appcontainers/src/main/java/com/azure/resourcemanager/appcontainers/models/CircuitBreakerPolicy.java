// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Policy that defines circuit breaker conditions.
 */
@Fluent
public final class CircuitBreakerPolicy {
    /*
     * Number of consecutive errors before the circuit breaker opens
     */
    @JsonProperty(value = "consecutiveErrors")
    private Integer consecutiveErrors;

    /*
     * The time interval, in seconds, between endpoint checks. This can result in opening the circuit breaker if the
     * check fails as well as closing the circuit breaker if the check succeeds. Defaults to 10s.
     */
    @JsonProperty(value = "intervalInSeconds")
    private Integer intervalInSeconds;

    /*
     * Maximum percentage of hosts that will be ejected after failure threshold has been met
     */
    @JsonProperty(value = "maxEjectionPercent")
    private Integer maxEjectionPercent;

    /**
     * Creates an instance of CircuitBreakerPolicy class.
     */
    public CircuitBreakerPolicy() {
    }

    /**
     * Get the consecutiveErrors property: Number of consecutive errors before the circuit breaker opens.
     * 
     * @return the consecutiveErrors value.
     */
    public Integer consecutiveErrors() {
        return this.consecutiveErrors;
    }

    /**
     * Set the consecutiveErrors property: Number of consecutive errors before the circuit breaker opens.
     * 
     * @param consecutiveErrors the consecutiveErrors value to set.
     * @return the CircuitBreakerPolicy object itself.
     */
    public CircuitBreakerPolicy withConsecutiveErrors(Integer consecutiveErrors) {
        this.consecutiveErrors = consecutiveErrors;
        return this;
    }

    /**
     * Get the intervalInSeconds property: The time interval, in seconds, between endpoint checks. This can result in
     * opening the circuit breaker if the check fails as well as closing the circuit breaker if the check succeeds.
     * Defaults to 10s.
     * 
     * @return the intervalInSeconds value.
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }

    /**
     * Set the intervalInSeconds property: The time interval, in seconds, between endpoint checks. This can result in
     * opening the circuit breaker if the check fails as well as closing the circuit breaker if the check succeeds.
     * Defaults to 10s.
     * 
     * @param intervalInSeconds the intervalInSeconds value to set.
     * @return the CircuitBreakerPolicy object itself.
     */
    public CircuitBreakerPolicy withIntervalInSeconds(Integer intervalInSeconds) {
        this.intervalInSeconds = intervalInSeconds;
        return this;
    }

    /**
     * Get the maxEjectionPercent property: Maximum percentage of hosts that will be ejected after failure threshold
     * has been met.
     * 
     * @return the maxEjectionPercent value.
     */
    public Integer maxEjectionPercent() {
        return this.maxEjectionPercent;
    }

    /**
     * Set the maxEjectionPercent property: Maximum percentage of hosts that will be ejected after failure threshold
     * has been met.
     * 
     * @param maxEjectionPercent the maxEjectionPercent value to set.
     * @return the CircuitBreakerPolicy object itself.
     */
    public CircuitBreakerPolicy withMaxEjectionPercent(Integer maxEjectionPercent) {
        this.maxEjectionPercent = maxEjectionPercent;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
