// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dynamic pool configuration.
 */
@Fluent
public final class DynamicPoolConfiguration implements JsonSerializable<DynamicPoolConfiguration> {
    /*
     * The lifecycle configuration of a session in the dynamic session pool
     */
    private LifecycleConfiguration lifecycleConfiguration;

    /**
     * Creates an instance of DynamicPoolConfiguration class.
     */
    public DynamicPoolConfiguration() {
    }

    /**
     * Get the lifecycleConfiguration property: The lifecycle configuration of a session in the dynamic session pool.
     * 
     * @return the lifecycleConfiguration value.
     */
    public LifecycleConfiguration lifecycleConfiguration() {
        return this.lifecycleConfiguration;
    }

    /**
     * Set the lifecycleConfiguration property: The lifecycle configuration of a session in the dynamic session pool.
     * 
     * @param lifecycleConfiguration the lifecycleConfiguration value to set.
     * @return the DynamicPoolConfiguration object itself.
     */
    public DynamicPoolConfiguration withLifecycleConfiguration(LifecycleConfiguration lifecycleConfiguration) {
        this.lifecycleConfiguration = lifecycleConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lifecycleConfiguration() != null) {
            lifecycleConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("lifecycleConfiguration", this.lifecycleConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DynamicPoolConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DynamicPoolConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DynamicPoolConfiguration.
     */
    public static DynamicPoolConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DynamicPoolConfiguration deserializedDynamicPoolConfiguration = new DynamicPoolConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lifecycleConfiguration".equals(fieldName)) {
                    deserializedDynamicPoolConfiguration.lifecycleConfiguration
                        = LifecycleConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDynamicPoolConfiguration;
        });
    }
}
