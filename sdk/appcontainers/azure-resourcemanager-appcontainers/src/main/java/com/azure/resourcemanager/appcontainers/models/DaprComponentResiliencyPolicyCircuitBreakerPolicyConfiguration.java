// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Dapr Component Resiliency Policy Circuit Breaker Policy Configuration.
 */
@Fluent
public final class DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration {
    /*
     * The number of consecutive errors before the circuit is opened.
     */
    @JsonProperty(value = "consecutiveErrors")
    private Integer consecutiveErrors;

    /*
     * The interval in seconds until a retry attempt is made after the circuit is opened.
     */
    @JsonProperty(value = "timeoutInSeconds")
    private Integer timeoutInSeconds;

    /*
     * The optional interval in seconds after which the error count resets to 0. An interval of 0 will never reset. If
     * not specified, the timeoutInSeconds value will be used.
     */
    @JsonProperty(value = "intervalInSeconds")
    private Integer intervalInSeconds;

    /**
     * Creates an instance of DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration class.
     */
    public DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration() {
    }

    /**
     * Get the consecutiveErrors property: The number of consecutive errors before the circuit is opened.
     * 
     * @return the consecutiveErrors value.
     */
    public Integer consecutiveErrors() {
        return this.consecutiveErrors;
    }

    /**
     * Set the consecutiveErrors property: The number of consecutive errors before the circuit is opened.
     * 
     * @param consecutiveErrors the consecutiveErrors value to set.
     * @return the DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration object itself.
     */
    public DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration
        withConsecutiveErrors(Integer consecutiveErrors) {
        this.consecutiveErrors = consecutiveErrors;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: The interval in seconds until a retry attempt is made after the circuit is
     * opened.
     * 
     * @return the timeoutInSeconds value.
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: The interval in seconds until a retry attempt is made after the circuit is
     * opened.
     * 
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration object itself.
     */
    public DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration
        withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Get the intervalInSeconds property: The optional interval in seconds after which the error count resets to 0. An
     * interval of 0 will never reset. If not specified, the timeoutInSeconds value will be used.
     * 
     * @return the intervalInSeconds value.
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }

    /**
     * Set the intervalInSeconds property: The optional interval in seconds after which the error count resets to 0. An
     * interval of 0 will never reset. If not specified, the timeoutInSeconds value will be used.
     * 
     * @param intervalInSeconds the intervalInSeconds value to set.
     * @return the DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration object itself.
     */
    public DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration
        withIntervalInSeconds(Integer intervalInSeconds) {
        this.intervalInSeconds = intervalInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
