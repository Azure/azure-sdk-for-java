// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcontainers.fluent.MaintenanceConfigurationsClient;
import com.azure.resourcemanager.appcontainers.fluent.models.MaintenanceConfigurationResourceInner;
import com.azure.resourcemanager.appcontainers.models.MaintenanceConfigurationResource;
import com.azure.resourcemanager.appcontainers.models.MaintenanceConfigurations;

public final class MaintenanceConfigurationsImpl implements MaintenanceConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(MaintenanceConfigurationsImpl.class);

    private final MaintenanceConfigurationsClient innerClient;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public MaintenanceConfigurationsImpl(MaintenanceConfigurationsClient innerClient,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MaintenanceConfigurationResource> list(String resourceGroupName, String environmentName) {
        PagedIterable<MaintenanceConfigurationResourceInner> inner
            = this.serviceClient().list(resourceGroupName, environmentName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new MaintenanceConfigurationResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<MaintenanceConfigurationResource> list(String resourceGroupName, String environmentName,
        Context context) {
        PagedIterable<MaintenanceConfigurationResourceInner> inner
            = this.serviceClient().list(resourceGroupName, environmentName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new MaintenanceConfigurationResourceImpl(inner1, this.manager()));
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String environmentName, String configName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, environmentName, configName, context);
    }

    public void delete(String resourceGroupName, String environmentName, String configName) {
        this.serviceClient().delete(resourceGroupName, environmentName, configName);
    }

    public Response<MaintenanceConfigurationResource> getWithResponse(String resourceGroupName, String environmentName,
        String configName, Context context) {
        Response<MaintenanceConfigurationResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, environmentName, configName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MaintenanceConfigurationResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MaintenanceConfigurationResource get(String resourceGroupName, String environmentName, String configName) {
        MaintenanceConfigurationResourceInner inner
            = this.serviceClient().get(resourceGroupName, environmentName, configName);
        if (inner != null) {
            return new MaintenanceConfigurationResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MaintenanceConfigurationResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "managedEnvironments");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedEnvironments'.", id)));
        }
        String configName = ResourceManagerUtils.getValueFromIdByName(id, "maintenanceConfigurations");
        if (configName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'maintenanceConfigurations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, environmentName, configName, Context.NONE).getValue();
    }

    public Response<MaintenanceConfigurationResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "managedEnvironments");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedEnvironments'.", id)));
        }
        String configName = ResourceManagerUtils.getValueFromIdByName(id, "maintenanceConfigurations");
        if (configName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'maintenanceConfigurations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, environmentName, configName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "managedEnvironments");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedEnvironments'.", id)));
        }
        String configName = ResourceManagerUtils.getValueFromIdByName(id, "maintenanceConfigurations");
        if (configName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'maintenanceConfigurations'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, environmentName, configName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "managedEnvironments");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedEnvironments'.", id)));
        }
        String configName = ResourceManagerUtils.getValueFromIdByName(id, "maintenanceConfigurations");
        if (configName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'maintenanceConfigurations'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, environmentName, configName, context);
    }

    private MaintenanceConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    public MaintenanceConfigurationResourceImpl define(String name) {
        return new MaintenanceConfigurationResourceImpl(name, this.manager());
    }
}
