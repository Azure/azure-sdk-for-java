// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Container App Label History Item resource specific properties.
 */
@Immutable
public final class LabelHistoryRecordItem implements JsonSerializable<LabelHistoryRecordItem> {
    /*
     * Container App revision name that label was applied to.
     */
    private String revision;

    /*
     * Timestamp describing when the label was applied to the revision.
     */
    private OffsetDateTime start;

    /*
     * Timestamp describing when the label was removed from the revision. Only meaningful when the label is currently
     * applied to the revision.
     */
    private OffsetDateTime stop;

    /*
     * Status of the label history record.
     */
    private Status status;

    /**
     * Creates an instance of LabelHistoryRecordItem class.
     */
    public LabelHistoryRecordItem() {
    }

    /**
     * Get the revision property: Container App revision name that label was applied to.
     * 
     * @return the revision value.
     */
    public String revision() {
        return this.revision;
    }

    /**
     * Get the start property: Timestamp describing when the label was applied to the revision.
     * 
     * @return the start value.
     */
    public OffsetDateTime start() {
        return this.start;
    }

    /**
     * Get the stop property: Timestamp describing when the label was removed from the revision. Only meaningful when
     * the label is currently applied to the revision.
     * 
     * @return the stop value.
     */
    public OffsetDateTime stop() {
        return this.stop;
    }

    /**
     * Get the status property: Status of the label history record.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabelHistoryRecordItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabelHistoryRecordItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabelHistoryRecordItem.
     */
    public static LabelHistoryRecordItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabelHistoryRecordItem deserializedLabelHistoryRecordItem = new LabelHistoryRecordItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("revision".equals(fieldName)) {
                    deserializedLabelHistoryRecordItem.revision = reader.getString();
                } else if ("start".equals(fieldName)) {
                    deserializedLabelHistoryRecordItem.start = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("stop".equals(fieldName)) {
                    deserializedLabelHistoryRecordItem.stop = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedLabelHistoryRecordItem.status = Status.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabelHistoryRecordItem;
        });
    }
}
