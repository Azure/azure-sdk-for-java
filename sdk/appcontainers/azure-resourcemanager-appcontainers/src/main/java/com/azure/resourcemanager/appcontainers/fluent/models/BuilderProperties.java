// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcontainers.models.BuilderProvisioningState;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistry;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The builder properties.
 */
@Fluent
public final class BuilderProperties {
    /*
     * Provisioning state of a builder resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private BuilderProvisioningState provisioningState;

    /*
     * Resource ID of the container apps environment that the builder is associated with.
     */
    @JsonProperty(value = "environmentId", required = true)
    private String environmentId;

    /*
     * List of mappings of container registries and the managed identity used to connect to it.
     */
    @JsonProperty(value = "containerRegistries")
    private List<ContainerRegistry> containerRegistries;

    /**
     * Creates an instance of BuilderProperties class.
     */
    public BuilderProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of a builder resource.
     * 
     * @return the provisioningState value.
     */
    public BuilderProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the environmentId property: Resource ID of the container apps environment that the builder is associated
     * with.
     * 
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: Resource ID of the container apps environment that the builder is associated
     * with.
     * 
     * @param environmentId the environmentId value to set.
     * @return the BuilderProperties object itself.
     */
    public BuilderProperties withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the containerRegistries property: List of mappings of container registries and the managed identity used to
     * connect to it.
     * 
     * @return the containerRegistries value.
     */
    public List<ContainerRegistry> containerRegistries() {
        return this.containerRegistries;
    }

    /**
     * Set the containerRegistries property: List of mappings of container registries and the managed identity used to
     * connect to it.
     * 
     * @param containerRegistries the containerRegistries value to set.
     * @return the BuilderProperties object itself.
     */
    public BuilderProperties withContainerRegistries(List<ContainerRegistry> containerRegistries) {
        this.containerRegistries = containerRegistries;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (environmentId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property environmentId in model BuilderProperties"));
        }
        if (containerRegistries() != null) {
            containerRegistries().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BuilderProperties.class);
}
