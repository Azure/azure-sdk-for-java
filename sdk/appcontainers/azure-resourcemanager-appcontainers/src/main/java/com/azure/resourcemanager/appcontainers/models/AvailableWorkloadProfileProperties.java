// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Revision resource specific properties. */
@Fluent
public final class AvailableWorkloadProfileProperties {
    /*
     * Used to categorize workload profiles.
     */
    @JsonProperty(value = "category")
    private String category;

    /*
     * indicates whether the profile is default for the location.
     */
    @JsonProperty(value = "applicability")
    private Applicability applicability;

    /*
     * Number of cores in CPU.
     */
    @JsonProperty(value = "cores")
    private Integer cores;

    /*
     * Memory in GiB.
     */
    @JsonProperty(value = "memoryGiB")
    private Integer memoryGiB;

    /*
     * The everyday name of the workload profile.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /** Creates an instance of AvailableWorkloadProfileProperties class. */
    public AvailableWorkloadProfileProperties() {
    }

    /**
     * Get the category property: Used to categorize workload profiles.
     *
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Set the category property: Used to categorize workload profiles.
     *
     * @param category the category value to set.
     * @return the AvailableWorkloadProfileProperties object itself.
     */
    public AvailableWorkloadProfileProperties withCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Get the applicability property: indicates whether the profile is default for the location.
     *
     * @return the applicability value.
     */
    public Applicability applicability() {
        return this.applicability;
    }

    /**
     * Set the applicability property: indicates whether the profile is default for the location.
     *
     * @param applicability the applicability value to set.
     * @return the AvailableWorkloadProfileProperties object itself.
     */
    public AvailableWorkloadProfileProperties withApplicability(Applicability applicability) {
        this.applicability = applicability;
        return this;
    }

    /**
     * Get the cores property: Number of cores in CPU.
     *
     * @return the cores value.
     */
    public Integer cores() {
        return this.cores;
    }

    /**
     * Set the cores property: Number of cores in CPU.
     *
     * @param cores the cores value to set.
     * @return the AvailableWorkloadProfileProperties object itself.
     */
    public AvailableWorkloadProfileProperties withCores(Integer cores) {
        this.cores = cores;
        return this;
    }

    /**
     * Get the memoryGiB property: Memory in GiB.
     *
     * @return the memoryGiB value.
     */
    public Integer memoryGiB() {
        return this.memoryGiB;
    }

    /**
     * Set the memoryGiB property: Memory in GiB.
     *
     * @param memoryGiB the memoryGiB value to set.
     * @return the AvailableWorkloadProfileProperties object itself.
     */
    public AvailableWorkloadProfileProperties withMemoryGiB(Integer memoryGiB) {
        this.memoryGiB = memoryGiB;
        return this;
    }

    /**
     * Get the displayName property: The everyday name of the workload profile.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The everyday name of the workload profile.
     *
     * @param displayName the displayName value to set.
     * @return the AvailableWorkloadProfileProperties object itself.
     */
    public AvailableWorkloadProfileProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
