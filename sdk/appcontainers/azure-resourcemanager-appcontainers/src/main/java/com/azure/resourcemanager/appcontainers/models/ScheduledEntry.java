// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Maintenance schedule entry for a managed environment.
 */
@Fluent
public final class ScheduledEntry implements JsonSerializable<ScheduledEntry> {
    /*
     * Day of the week when a managed environment can be patched.
     */
    private WeekDay weekDay;

    /*
     * Start hour after which managed environment maintenance can start from 0 to 23 hour.
     */
    private int startHourUtc;

    /*
     * Length of maintenance window range from 8 to 24 hours.
     */
    private int durationHours;

    /**
     * Creates an instance of ScheduledEntry class.
     */
    public ScheduledEntry() {
    }

    /**
     * Get the weekDay property: Day of the week when a managed environment can be patched.
     * 
     * @return the weekDay value.
     */
    public WeekDay weekDay() {
        return this.weekDay;
    }

    /**
     * Set the weekDay property: Day of the week when a managed environment can be patched.
     * 
     * @param weekDay the weekDay value to set.
     * @return the ScheduledEntry object itself.
     */
    public ScheduledEntry withWeekDay(WeekDay weekDay) {
        this.weekDay = weekDay;
        return this;
    }

    /**
     * Get the startHourUtc property: Start hour after which managed environment maintenance can start from 0 to 23
     * hour.
     * 
     * @return the startHourUtc value.
     */
    public int startHourUtc() {
        return this.startHourUtc;
    }

    /**
     * Set the startHourUtc property: Start hour after which managed environment maintenance can start from 0 to 23
     * hour.
     * 
     * @param startHourUtc the startHourUtc value to set.
     * @return the ScheduledEntry object itself.
     */
    public ScheduledEntry withStartHourUtc(int startHourUtc) {
        this.startHourUtc = startHourUtc;
        return this;
    }

    /**
     * Get the durationHours property: Length of maintenance window range from 8 to 24 hours.
     * 
     * @return the durationHours value.
     */
    public int durationHours() {
        return this.durationHours;
    }

    /**
     * Set the durationHours property: Length of maintenance window range from 8 to 24 hours.
     * 
     * @param durationHours the durationHours value to set.
     * @return the ScheduledEntry object itself.
     */
    public ScheduledEntry withDurationHours(int durationHours) {
        this.durationHours = durationHours;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (weekDay() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property weekDay in model ScheduledEntry"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduledEntry.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("weekDay", this.weekDay == null ? null : this.weekDay.toString());
        jsonWriter.writeIntField("startHourUtc", this.startHourUtc);
        jsonWriter.writeIntField("durationHours", this.durationHours);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduledEntry from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduledEntry if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduledEntry.
     */
    public static ScheduledEntry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduledEntry deserializedScheduledEntry = new ScheduledEntry();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("weekDay".equals(fieldName)) {
                    deserializedScheduledEntry.weekDay = WeekDay.fromString(reader.getString());
                } else if ("startHourUtc".equals(fieldName)) {
                    deserializedScheduledEntry.startHourUtc = reader.getInt();
                } else if ("durationHours".equals(fieldName)) {
                    deserializedScheduledEntry.durationHours = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduledEntry;
        });
    }
}
