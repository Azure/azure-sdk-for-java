// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Container App base container definition.
 */
@Fluent
public class BaseContainer implements JsonSerializable<BaseContainer> {
    /*
     * Container image tag.
     */
    private String image;

    /*
     * Custom container name.
     */
    private String name;

    /*
     * Container start command.
     */
    private List<String> command;

    /*
     * Container start command arguments.
     */
    private List<String> args;

    /*
     * Container environment variables.
     */
    private List<EnvironmentVar> env;

    /*
     * Container resource requirements.
     */
    private ContainerResources resources;

    /*
     * Container volume mounts.
     */
    private List<VolumeMount> volumeMounts;

    /**
     * Creates an instance of BaseContainer class.
     */
    public BaseContainer() {
    }

    /**
     * Get the image property: Container image tag.
     * 
     * @return the image value.
     */
    public String image() {
        return this.image;
    }

    /**
     * Set the image property: Container image tag.
     * 
     * @param image the image value to set.
     * @return the BaseContainer object itself.
     */
    public BaseContainer withImage(String image) {
        this.image = image;
        return this;
    }

    /**
     * Get the name property: Custom container name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Custom container name.
     * 
     * @param name the name value to set.
     * @return the BaseContainer object itself.
     */
    public BaseContainer withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the command property: Container start command.
     * 
     * @return the command value.
     */
    public List<String> command() {
        return this.command;
    }

    /**
     * Set the command property: Container start command.
     * 
     * @param command the command value to set.
     * @return the BaseContainer object itself.
     */
    public BaseContainer withCommand(List<String> command) {
        this.command = command;
        return this;
    }

    /**
     * Get the args property: Container start command arguments.
     * 
     * @return the args value.
     */
    public List<String> args() {
        return this.args;
    }

    /**
     * Set the args property: Container start command arguments.
     * 
     * @param args the args value to set.
     * @return the BaseContainer object itself.
     */
    public BaseContainer withArgs(List<String> args) {
        this.args = args;
        return this;
    }

    /**
     * Get the env property: Container environment variables.
     * 
     * @return the env value.
     */
    public List<EnvironmentVar> env() {
        return this.env;
    }

    /**
     * Set the env property: Container environment variables.
     * 
     * @param env the env value to set.
     * @return the BaseContainer object itself.
     */
    public BaseContainer withEnv(List<EnvironmentVar> env) {
        this.env = env;
        return this;
    }

    /**
     * Get the resources property: Container resource requirements.
     * 
     * @return the resources value.
     */
    public ContainerResources resources() {
        return this.resources;
    }

    /**
     * Set the resources property: Container resource requirements.
     * 
     * @param resources the resources value to set.
     * @return the BaseContainer object itself.
     */
    public BaseContainer withResources(ContainerResources resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Get the volumeMounts property: Container volume mounts.
     * 
     * @return the volumeMounts value.
     */
    public List<VolumeMount> volumeMounts() {
        return this.volumeMounts;
    }

    /**
     * Set the volumeMounts property: Container volume mounts.
     * 
     * @param volumeMounts the volumeMounts value to set.
     * @return the BaseContainer object itself.
     */
    public BaseContainer withVolumeMounts(List<VolumeMount> volumeMounts) {
        this.volumeMounts = volumeMounts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (env() != null) {
            env().forEach(e -> e.validate());
        }
        if (resources() != null) {
            resources().validate();
        }
        if (volumeMounts() != null) {
            volumeMounts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("image", this.image);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("command", this.command, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("args", this.args, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("env", this.env, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("resources", this.resources);
        jsonWriter.writeArrayField("volumeMounts", this.volumeMounts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BaseContainer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BaseContainer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BaseContainer.
     */
    public static BaseContainer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BaseContainer deserializedBaseContainer = new BaseContainer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("image".equals(fieldName)) {
                    deserializedBaseContainer.image = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedBaseContainer.name = reader.getString();
                } else if ("command".equals(fieldName)) {
                    List<String> command = reader.readArray(reader1 -> reader1.getString());
                    deserializedBaseContainer.command = command;
                } else if ("args".equals(fieldName)) {
                    List<String> args = reader.readArray(reader1 -> reader1.getString());
                    deserializedBaseContainer.args = args;
                } else if ("env".equals(fieldName)) {
                    List<EnvironmentVar> env = reader.readArray(reader1 -> EnvironmentVar.fromJson(reader1));
                    deserializedBaseContainer.env = env;
                } else if ("resources".equals(fieldName)) {
                    deserializedBaseContainer.resources = ContainerResources.fromJson(reader);
                } else if ("volumeMounts".equals(fieldName)) {
                    List<VolumeMount> volumeMounts = reader.readArray(reader1 -> VolumeMount.fromJson(reader1));
                    deserializedBaseContainer.volumeMounts = volumeMounts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBaseContainer;
        });
    }
}
