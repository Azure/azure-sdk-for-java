// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.appcontainers.models.CircuitBreakerPolicy;
import com.azure.resourcemanager.appcontainers.models.HttpConnectionPool;
import com.azure.resourcemanager.appcontainers.models.HttpRetryPolicy;
import com.azure.resourcemanager.appcontainers.models.TcpConnectionPool;
import com.azure.resourcemanager.appcontainers.models.TcpRetryPolicy;
import com.azure.resourcemanager.appcontainers.models.TimeoutPolicy;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Configuration to setup App Resiliency.
 */
@Fluent
public final class AppResiliencyInner extends ProxyResource {
    /*
     * App Resiliency resource specific properties
     */
    @JsonProperty(value = "properties")
    private AppResiliencyProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of AppResiliencyInner class.
     */
    public AppResiliencyInner() {
    }

    /**
     * Get the innerProperties property: App Resiliency resource specific properties.
     * 
     * @return the innerProperties value.
     */
    private AppResiliencyProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the timeoutPolicy property: Policy to set request timeouts.
     * 
     * @return the timeoutPolicy value.
     */
    public TimeoutPolicy timeoutPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().timeoutPolicy();
    }

    /**
     * Set the timeoutPolicy property: Policy to set request timeouts.
     * 
     * @param timeoutPolicy the timeoutPolicy value to set.
     * @return the AppResiliencyInner object itself.
     */
    public AppResiliencyInner withTimeoutPolicy(TimeoutPolicy timeoutPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppResiliencyProperties();
        }
        this.innerProperties().withTimeoutPolicy(timeoutPolicy);
        return this;
    }

    /**
     * Get the httpRetryPolicy property: Policy that defines http request retry conditions.
     * 
     * @return the httpRetryPolicy value.
     */
    public HttpRetryPolicy httpRetryPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().httpRetryPolicy();
    }

    /**
     * Set the httpRetryPolicy property: Policy that defines http request retry conditions.
     * 
     * @param httpRetryPolicy the httpRetryPolicy value to set.
     * @return the AppResiliencyInner object itself.
     */
    public AppResiliencyInner withHttpRetryPolicy(HttpRetryPolicy httpRetryPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppResiliencyProperties();
        }
        this.innerProperties().withHttpRetryPolicy(httpRetryPolicy);
        return this;
    }

    /**
     * Get the tcpRetryPolicy property: Policy that defines tcp request retry conditions.
     * 
     * @return the tcpRetryPolicy value.
     */
    public TcpRetryPolicy tcpRetryPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().tcpRetryPolicy();
    }

    /**
     * Set the tcpRetryPolicy property: Policy that defines tcp request retry conditions.
     * 
     * @param tcpRetryPolicy the tcpRetryPolicy value to set.
     * @return the AppResiliencyInner object itself.
     */
    public AppResiliencyInner withTcpRetryPolicy(TcpRetryPolicy tcpRetryPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppResiliencyProperties();
        }
        this.innerProperties().withTcpRetryPolicy(tcpRetryPolicy);
        return this;
    }

    /**
     * Get the circuitBreakerPolicy property: Policy that defines circuit breaker conditions.
     * 
     * @return the circuitBreakerPolicy value.
     */
    public CircuitBreakerPolicy circuitBreakerPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().circuitBreakerPolicy();
    }

    /**
     * Set the circuitBreakerPolicy property: Policy that defines circuit breaker conditions.
     * 
     * @param circuitBreakerPolicy the circuitBreakerPolicy value to set.
     * @return the AppResiliencyInner object itself.
     */
    public AppResiliencyInner withCircuitBreakerPolicy(CircuitBreakerPolicy circuitBreakerPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppResiliencyProperties();
        }
        this.innerProperties().withCircuitBreakerPolicy(circuitBreakerPolicy);
        return this;
    }

    /**
     * Get the httpConnectionPool property: Defines parameters for http connection pooling.
     * 
     * @return the httpConnectionPool value.
     */
    public HttpConnectionPool httpConnectionPool() {
        return this.innerProperties() == null ? null : this.innerProperties().httpConnectionPool();
    }

    /**
     * Set the httpConnectionPool property: Defines parameters for http connection pooling.
     * 
     * @param httpConnectionPool the httpConnectionPool value to set.
     * @return the AppResiliencyInner object itself.
     */
    public AppResiliencyInner withHttpConnectionPool(HttpConnectionPool httpConnectionPool) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppResiliencyProperties();
        }
        this.innerProperties().withHttpConnectionPool(httpConnectionPool);
        return this;
    }

    /**
     * Get the tcpConnectionPool property: Defines parameters for tcp connection pooling.
     * 
     * @return the tcpConnectionPool value.
     */
    public TcpConnectionPool tcpConnectionPool() {
        return this.innerProperties() == null ? null : this.innerProperties().tcpConnectionPool();
    }

    /**
     * Set the tcpConnectionPool property: Defines parameters for tcp connection pooling.
     * 
     * @param tcpConnectionPool the tcpConnectionPool value to set.
     * @return the AppResiliencyInner object itself.
     */
    public AppResiliencyInner withTcpConnectionPool(TcpConnectionPool tcpConnectionPool) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppResiliencyProperties();
        }
        this.innerProperties().withTcpConnectionPool(tcpConnectionPool);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
