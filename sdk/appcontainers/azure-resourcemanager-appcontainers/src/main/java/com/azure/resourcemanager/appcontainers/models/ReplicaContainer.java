// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Container object under Container App Revision Replica. */
@Fluent
public final class ReplicaContainer {
    /*
     * The Name of the Container
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The Id of the Container
     */
    @JsonProperty(value = "containerId")
    private String containerId;

    /*
     * The container ready status
     */
    @JsonProperty(value = "ready")
    private Boolean ready;

    /*
     * The container start status
     */
    @JsonProperty(value = "started")
    private Boolean started;

    /*
     * The container restart count
     */
    @JsonProperty(value = "restartCount")
    private Integer restartCount;

    /*
     * Log Stream endpoint
     */
    @JsonProperty(value = "logStreamEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String logStreamEndpoint;

    /*
     * Container exec endpoint
     */
    @JsonProperty(value = "execEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String execEndpoint;

    /** Creates an instance of ReplicaContainer class. */
    public ReplicaContainer() {
    }

    /**
     * Get the name property: The Name of the Container.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The Name of the Container.
     *
     * @param name the name value to set.
     * @return the ReplicaContainer object itself.
     */
    public ReplicaContainer withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the containerId property: The Id of the Container.
     *
     * @return the containerId value.
     */
    public String containerId() {
        return this.containerId;
    }

    /**
     * Set the containerId property: The Id of the Container.
     *
     * @param containerId the containerId value to set.
     * @return the ReplicaContainer object itself.
     */
    public ReplicaContainer withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }

    /**
     * Get the ready property: The container ready status.
     *
     * @return the ready value.
     */
    public Boolean ready() {
        return this.ready;
    }

    /**
     * Set the ready property: The container ready status.
     *
     * @param ready the ready value to set.
     * @return the ReplicaContainer object itself.
     */
    public ReplicaContainer withReady(Boolean ready) {
        this.ready = ready;
        return this;
    }

    /**
     * Get the started property: The container start status.
     *
     * @return the started value.
     */
    public Boolean started() {
        return this.started;
    }

    /**
     * Set the started property: The container start status.
     *
     * @param started the started value to set.
     * @return the ReplicaContainer object itself.
     */
    public ReplicaContainer withStarted(Boolean started) {
        this.started = started;
        return this;
    }

    /**
     * Get the restartCount property: The container restart count.
     *
     * @return the restartCount value.
     */
    public Integer restartCount() {
        return this.restartCount;
    }

    /**
     * Set the restartCount property: The container restart count.
     *
     * @param restartCount the restartCount value to set.
     * @return the ReplicaContainer object itself.
     */
    public ReplicaContainer withRestartCount(Integer restartCount) {
        this.restartCount = restartCount;
        return this;
    }

    /**
     * Get the logStreamEndpoint property: Log Stream endpoint.
     *
     * @return the logStreamEndpoint value.
     */
    public String logStreamEndpoint() {
        return this.logStreamEndpoint;
    }

    /**
     * Get the execEndpoint property: Container exec endpoint.
     *
     * @return the execEndpoint value.
     */
    public String execEndpoint() {
        return this.execEndpoint;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
