// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appcontainers.models.ConnectedEnvironmentDaprComponentProvisioningState;
import com.azure.resourcemanager.appcontainers.models.DaprComponentServiceBinding;
import com.azure.resourcemanager.appcontainers.models.DaprMetadata;
import com.azure.resourcemanager.appcontainers.models.Secret;
import java.io.IOException;
import java.util.List;

/**
 * Dapr component properties.
 */
@Fluent
public final class ConnectedEnvironmentDaprComponentProperties extends DaprComponentProperties {
    /*
     * Provisioning state of the Connected Environment Dapr Component.
     */
    private ConnectedEnvironmentDaprComponentProvisioningState provisioningState;

    /*
     * Any errors that occurred during deployment or deployment validation
     */
    private String deploymentErrors;

    /**
     * Creates an instance of ConnectedEnvironmentDaprComponentProperties class.
     */
    public ConnectedEnvironmentDaprComponentProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the Connected Environment Dapr Component.
     * 
     * @return the provisioningState value.
     */
    public ConnectedEnvironmentDaprComponentProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the deploymentErrors property: Any errors that occurred during deployment or deployment validation.
     * 
     * @return the deploymentErrors value.
     */
    public String deploymentErrors() {
        return this.deploymentErrors;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties withComponentType(String componentType) {
        super.withComponentType(componentType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties withVersion(String version) {
        super.withVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties withIgnoreErrors(Boolean ignoreErrors) {
        super.withIgnoreErrors(ignoreErrors);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties withInitTimeout(String initTimeout) {
        super.withInitTimeout(initTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties withSecrets(List<Secret> secrets) {
        super.withSecrets(secrets);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties withSecretStoreComponent(String secretStoreComponent) {
        super.withSecretStoreComponent(secretStoreComponent);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties withMetadata(List<DaprMetadata> metadata) {
        super.withMetadata(metadata);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties withScopes(List<String> scopes) {
        super.withScopes(scopes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedEnvironmentDaprComponentProperties
        withServiceComponentBind(List<DaprComponentServiceBinding> serviceComponentBind) {
        super.withServiceComponentBind(serviceComponentBind);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
        if (metadata() != null) {
            metadata().forEach(e -> e.validate());
        }
        if (serviceComponentBind() != null) {
            serviceComponentBind().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("componentType", componentType());
        jsonWriter.writeStringField("version", version());
        jsonWriter.writeBooleanField("ignoreErrors", ignoreErrors());
        jsonWriter.writeStringField("initTimeout", initTimeout());
        jsonWriter.writeArrayField("secrets", secrets(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("secretStoreComponent", secretStoreComponent());
        jsonWriter.writeArrayField("metadata", metadata(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("scopes", scopes(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("serviceComponentBind", serviceComponentBind(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectedEnvironmentDaprComponentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectedEnvironmentDaprComponentProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectedEnvironmentDaprComponentProperties.
     */
    public static ConnectedEnvironmentDaprComponentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectedEnvironmentDaprComponentProperties deserializedConnectedEnvironmentDaprComponentProperties
                = new ConnectedEnvironmentDaprComponentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("componentType".equals(fieldName)) {
                    deserializedConnectedEnvironmentDaprComponentProperties.withComponentType(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedConnectedEnvironmentDaprComponentProperties.withVersion(reader.getString());
                } else if ("ignoreErrors".equals(fieldName)) {
                    deserializedConnectedEnvironmentDaprComponentProperties
                        .withIgnoreErrors(reader.getNullable(JsonReader::getBoolean));
                } else if ("initTimeout".equals(fieldName)) {
                    deserializedConnectedEnvironmentDaprComponentProperties.withInitTimeout(reader.getString());
                } else if ("secrets".equals(fieldName)) {
                    List<Secret> secrets = reader.readArray(reader1 -> Secret.fromJson(reader1));
                    deserializedConnectedEnvironmentDaprComponentProperties.withSecrets(secrets);
                } else if ("secretStoreComponent".equals(fieldName)) {
                    deserializedConnectedEnvironmentDaprComponentProperties
                        .withSecretStoreComponent(reader.getString());
                } else if ("metadata".equals(fieldName)) {
                    List<DaprMetadata> metadata = reader.readArray(reader1 -> DaprMetadata.fromJson(reader1));
                    deserializedConnectedEnvironmentDaprComponentProperties.withMetadata(metadata);
                } else if ("scopes".equals(fieldName)) {
                    List<String> scopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectedEnvironmentDaprComponentProperties.withScopes(scopes);
                } else if ("serviceComponentBind".equals(fieldName)) {
                    List<DaprComponentServiceBinding> serviceComponentBind
                        = reader.readArray(reader1 -> DaprComponentServiceBinding.fromJson(reader1));
                    deserializedConnectedEnvironmentDaprComponentProperties
                        .withServiceComponentBind(serviceComponentBind);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedConnectedEnvironmentDaprComponentProperties.provisioningState
                        = ConnectedEnvironmentDaprComponentProvisioningState.fromString(reader.getString());
                } else if ("deploymentErrors".equals(fieldName)) {
                    deserializedConnectedEnvironmentDaprComponentProperties.deploymentErrors = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectedEnvironmentDaprComponentProperties;
        });
    }
}
