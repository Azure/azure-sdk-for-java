// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Criteria to match on.
 */
@Fluent
public final class HttpRouteMatch implements JsonSerializable<HttpRouteMatch> {
    /*
     * match on all prefix's. Not exact
     */
    private String prefix;

    /*
     * match on exact path
     */
    private String path;

    /*
     * match on all prefix's. Not exact
     */
    private String pathSeparatedPrefix;

    /*
     * path case sensitive, default is true
     */
    private Boolean caseSensitive;

    /**
     * Creates an instance of HttpRouteMatch class.
     */
    public HttpRouteMatch() {
    }

    /**
     * Get the prefix property: match on all prefix's. Not exact.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: match on all prefix's. Not exact.
     * 
     * @param prefix the prefix value to set.
     * @return the HttpRouteMatch object itself.
     */
    public HttpRouteMatch withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the path property: match on exact path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: match on exact path.
     * 
     * @param path the path value to set.
     * @return the HttpRouteMatch object itself.
     */
    public HttpRouteMatch withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the pathSeparatedPrefix property: match on all prefix's. Not exact.
     * 
     * @return the pathSeparatedPrefix value.
     */
    public String pathSeparatedPrefix() {
        return this.pathSeparatedPrefix;
    }

    /**
     * Set the pathSeparatedPrefix property: match on all prefix's. Not exact.
     * 
     * @param pathSeparatedPrefix the pathSeparatedPrefix value to set.
     * @return the HttpRouteMatch object itself.
     */
    public HttpRouteMatch withPathSeparatedPrefix(String pathSeparatedPrefix) {
        this.pathSeparatedPrefix = pathSeparatedPrefix;
        return this;
    }

    /**
     * Get the caseSensitive property: path case sensitive, default is true.
     * 
     * @return the caseSensitive value.
     */
    public Boolean caseSensitive() {
        return this.caseSensitive;
    }

    /**
     * Set the caseSensitive property: path case sensitive, default is true.
     * 
     * @param caseSensitive the caseSensitive value to set.
     * @return the HttpRouteMatch object itself.
     */
    public HttpRouteMatch withCaseSensitive(Boolean caseSensitive) {
        this.caseSensitive = caseSensitive;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("pathSeparatedPrefix", this.pathSeparatedPrefix);
        jsonWriter.writeBooleanField("caseSensitive", this.caseSensitive);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HttpRouteMatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HttpRouteMatch if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HttpRouteMatch.
     */
    public static HttpRouteMatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HttpRouteMatch deserializedHttpRouteMatch = new HttpRouteMatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prefix".equals(fieldName)) {
                    deserializedHttpRouteMatch.prefix = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedHttpRouteMatch.path = reader.getString();
                } else if ("pathSeparatedPrefix".equals(fieldName)) {
                    deserializedHttpRouteMatch.pathSeparatedPrefix = reader.getString();
                } else if ("caseSensitive".equals(fieldName)) {
                    deserializedHttpRouteMatch.caseSensitive = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHttpRouteMatch;
        });
    }
}
