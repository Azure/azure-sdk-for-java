// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration properties for the authentication to the Key Vault.
 */
@Fluent
public final class DiskEncryptionConfigurationKeyVaultConfigurationAuth
    implements JsonSerializable<DiskEncryptionConfigurationKeyVaultConfigurationAuth> {
    /*
     * Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned
     * to the managed environment, in the same tenant as the Key Vault, and it must have the following key permissions
     * on the Key Vault: wrapkey, unwrapkey, get.
     */
    private String identity;

    /**
     * Creates an instance of DiskEncryptionConfigurationKeyVaultConfigurationAuth class.
     */
    public DiskEncryptionConfigurationKeyVaultConfigurationAuth() {
    }

    /**
     * Get the identity property: Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The
     * identity must be assigned to the managed environment, in the same tenant as the Key Vault, and it must have the
     * following key permissions on the Key Vault: wrapkey, unwrapkey, get.
     * 
     * @return the identity value.
     */
    public String identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The
     * identity must be assigned to the managed environment, in the same tenant as the Key Vault, and it must have the
     * following key permissions on the Key Vault: wrapkey, unwrapkey, get.
     * 
     * @param identity the identity value to set.
     * @return the DiskEncryptionConfigurationKeyVaultConfigurationAuth object itself.
     */
    public DiskEncryptionConfigurationKeyVaultConfigurationAuth withIdentity(String identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskEncryptionConfigurationKeyVaultConfigurationAuth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskEncryptionConfigurationKeyVaultConfigurationAuth if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskEncryptionConfigurationKeyVaultConfigurationAuth.
     */
    public static DiskEncryptionConfigurationKeyVaultConfigurationAuth fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            DiskEncryptionConfigurationKeyVaultConfigurationAuth deserializedDiskEncryptionConfigurationKeyVaultConfigurationAuth
                = new DiskEncryptionConfigurationKeyVaultConfigurationAuth();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identity".equals(fieldName)) {
                    deserializedDiskEncryptionConfigurationKeyVaultConfigurationAuth.identity = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskEncryptionConfigurationKeyVaultConfigurationAuth;
        });
    }
}
