// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Configuration of Open Telemetry.
 */
@Fluent
public final class OpenTelemetryConfiguration {
    /*
     * Open telemetry destinations configuration
     */
    @JsonProperty(value = "destinationsConfiguration")
    private DestinationsConfiguration destinationsConfiguration;

    /*
     * Open telemetry trace configuration
     */
    @JsonProperty(value = "tracesConfiguration")
    private TracesConfiguration tracesConfiguration;

    /*
     * Open telemetry logs configuration
     */
    @JsonProperty(value = "logsConfiguration")
    private LogsConfiguration logsConfiguration;

    /*
     * Open telemetry metrics configuration
     */
    @JsonProperty(value = "metricsConfiguration")
    private MetricsConfiguration metricsConfiguration;

    /**
     * Creates an instance of OpenTelemetryConfiguration class.
     */
    public OpenTelemetryConfiguration() {
    }

    /**
     * Get the destinationsConfiguration property: Open telemetry destinations configuration.
     * 
     * @return the destinationsConfiguration value.
     */
    public DestinationsConfiguration destinationsConfiguration() {
        return this.destinationsConfiguration;
    }

    /**
     * Set the destinationsConfiguration property: Open telemetry destinations configuration.
     * 
     * @param destinationsConfiguration the destinationsConfiguration value to set.
     * @return the OpenTelemetryConfiguration object itself.
     */
    public OpenTelemetryConfiguration
        withDestinationsConfiguration(DestinationsConfiguration destinationsConfiguration) {
        this.destinationsConfiguration = destinationsConfiguration;
        return this;
    }

    /**
     * Get the tracesConfiguration property: Open telemetry trace configuration.
     * 
     * @return the tracesConfiguration value.
     */
    public TracesConfiguration tracesConfiguration() {
        return this.tracesConfiguration;
    }

    /**
     * Set the tracesConfiguration property: Open telemetry trace configuration.
     * 
     * @param tracesConfiguration the tracesConfiguration value to set.
     * @return the OpenTelemetryConfiguration object itself.
     */
    public OpenTelemetryConfiguration withTracesConfiguration(TracesConfiguration tracesConfiguration) {
        this.tracesConfiguration = tracesConfiguration;
        return this;
    }

    /**
     * Get the logsConfiguration property: Open telemetry logs configuration.
     * 
     * @return the logsConfiguration value.
     */
    public LogsConfiguration logsConfiguration() {
        return this.logsConfiguration;
    }

    /**
     * Set the logsConfiguration property: Open telemetry logs configuration.
     * 
     * @param logsConfiguration the logsConfiguration value to set.
     * @return the OpenTelemetryConfiguration object itself.
     */
    public OpenTelemetryConfiguration withLogsConfiguration(LogsConfiguration logsConfiguration) {
        this.logsConfiguration = logsConfiguration;
        return this;
    }

    /**
     * Get the metricsConfiguration property: Open telemetry metrics configuration.
     * 
     * @return the metricsConfiguration value.
     */
    public MetricsConfiguration metricsConfiguration() {
        return this.metricsConfiguration;
    }

    /**
     * Set the metricsConfiguration property: Open telemetry metrics configuration.
     * 
     * @param metricsConfiguration the metricsConfiguration value to set.
     * @return the OpenTelemetryConfiguration object itself.
     */
    public OpenTelemetryConfiguration withMetricsConfiguration(MetricsConfiguration metricsConfiguration) {
        this.metricsConfiguration = metricsConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (destinationsConfiguration() != null) {
            destinationsConfiguration().validate();
        }
        if (tracesConfiguration() != null) {
            tracesConfiguration().validate();
        }
        if (logsConfiguration() != null) {
            logsConfiguration().validate();
        }
        if (metricsConfiguration() != null) {
            metricsConfiguration().validate();
        }
    }
}
