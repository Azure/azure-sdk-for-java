// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Http Route rule.
 */
@Fluent
public final class HttpRouteRule implements JsonSerializable<HttpRouteRule> {
    /*
     * Targets- container apps, revisions, labels
     */
    private List<HttpRouteTarget> targets;

    /*
     * Routing configuration that will allow matches on specific paths/headers.
     */
    private List<HttpRoute> routes;

    /*
     * Description of rule. Optional.
     */
    private String description;

    /**
     * Creates an instance of HttpRouteRule class.
     */
    public HttpRouteRule() {
    }

    /**
     * Get the targets property: Targets- container apps, revisions, labels.
     * 
     * @return the targets value.
     */
    public List<HttpRouteTarget> targets() {
        return this.targets;
    }

    /**
     * Set the targets property: Targets- container apps, revisions, labels.
     * 
     * @param targets the targets value to set.
     * @return the HttpRouteRule object itself.
     */
    public HttpRouteRule withTargets(List<HttpRouteTarget> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * Get the routes property: Routing configuration that will allow matches on specific paths/headers.
     * 
     * @return the routes value.
     */
    public List<HttpRoute> routes() {
        return this.routes;
    }

    /**
     * Set the routes property: Routing configuration that will allow matches on specific paths/headers.
     * 
     * @param routes the routes value to set.
     * @return the HttpRouteRule object itself.
     */
    public HttpRouteRule withRoutes(List<HttpRoute> routes) {
        this.routes = routes;
        return this;
    }

    /**
     * Get the description property: Description of rule. Optional.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of rule. Optional.
     * 
     * @param description the description value to set.
     * @return the HttpRouteRule object itself.
     */
    public HttpRouteRule withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targets() != null) {
            targets().forEach(e -> e.validate());
        }
        if (routes() != null) {
            routes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("targets", this.targets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("routes", this.routes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HttpRouteRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HttpRouteRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HttpRouteRule.
     */
    public static HttpRouteRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HttpRouteRule deserializedHttpRouteRule = new HttpRouteRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targets".equals(fieldName)) {
                    List<HttpRouteTarget> targets = reader.readArray(reader1 -> HttpRouteTarget.fromJson(reader1));
                    deserializedHttpRouteRule.targets = targets;
                } else if ("routes".equals(fieldName)) {
                    List<HttpRoute> routes = reader.readArray(reader1 -> HttpRoute.fromJson(reader1));
                    deserializedHttpRouteRule.routes = routes;
                } else if ("description".equals(fieldName)) {
                    deserializedHttpRouteRule.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHttpRouteRule;
        });
    }
}
