// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Targets - Container App Names, Revision Names, Labels.
 */
@Fluent
public final class HttpRouteTarget implements JsonSerializable<HttpRouteTarget> {
    /*
     * Container App Name to route requests to
     */
    private String containerApp;

    /*
     * Revision to route requests to
     */
    private String revision;

    /*
     * Label/Revision to route requests to
     */
    private String label;

    /*
     * Weighted routing
     */
    private Integer weight;

    /**
     * Creates an instance of HttpRouteTarget class.
     */
    public HttpRouteTarget() {
    }

    /**
     * Get the containerApp property: Container App Name to route requests to.
     * 
     * @return the containerApp value.
     */
    public String containerApp() {
        return this.containerApp;
    }

    /**
     * Set the containerApp property: Container App Name to route requests to.
     * 
     * @param containerApp the containerApp value to set.
     * @return the HttpRouteTarget object itself.
     */
    public HttpRouteTarget withContainerApp(String containerApp) {
        this.containerApp = containerApp;
        return this;
    }

    /**
     * Get the revision property: Revision to route requests to.
     * 
     * @return the revision value.
     */
    public String revision() {
        return this.revision;
    }

    /**
     * Set the revision property: Revision to route requests to.
     * 
     * @param revision the revision value to set.
     * @return the HttpRouteTarget object itself.
     */
    public HttpRouteTarget withRevision(String revision) {
        this.revision = revision;
        return this;
    }

    /**
     * Get the label property: Label/Revision to route requests to.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Set the label property: Label/Revision to route requests to.
     * 
     * @param label the label value to set.
     * @return the HttpRouteTarget object itself.
     */
    public HttpRouteTarget withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get the weight property: Weighted routing.
     * 
     * @return the weight value.
     */
    public Integer weight() {
        return this.weight;
    }

    /**
     * Set the weight property: Weighted routing.
     * 
     * @param weight the weight value to set.
     * @return the HttpRouteTarget object itself.
     */
    public HttpRouteTarget withWeight(Integer weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerApp() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property containerApp in model HttpRouteTarget"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HttpRouteTarget.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerApp", this.containerApp);
        jsonWriter.writeStringField("revision", this.revision);
        jsonWriter.writeStringField("label", this.label);
        jsonWriter.writeNumberField("weight", this.weight);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HttpRouteTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HttpRouteTarget if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HttpRouteTarget.
     */
    public static HttpRouteTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HttpRouteTarget deserializedHttpRouteTarget = new HttpRouteTarget();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerApp".equals(fieldName)) {
                    deserializedHttpRouteTarget.containerApp = reader.getString();
                } else if ("revision".equals(fieldName)) {
                    deserializedHttpRouteTarget.revision = reader.getString();
                } else if ("label".equals(fieldName)) {
                    deserializedHttpRouteTarget.label = reader.getString();
                } else if ("weight".equals(fieldName)) {
                    deserializedHttpRouteTarget.weight = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHttpRouteTarget;
        });
    }
}
