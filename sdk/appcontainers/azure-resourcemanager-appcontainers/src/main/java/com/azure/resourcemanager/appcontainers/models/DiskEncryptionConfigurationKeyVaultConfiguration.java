// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Key Vault that contains your key to use for disk encryption. The Key Vault must be in the same region as the
 * Managed Environment.
 */
@Fluent
public final class DiskEncryptionConfigurationKeyVaultConfiguration
    implements JsonSerializable<DiskEncryptionConfigurationKeyVaultConfiguration> {
    /*
     * Key URL pointing to a key in KeyVault. Version segment of the Url is required.
     */
    private String keyUrl;

    /*
     * Configuration properties for the authentication to the Key Vault
     */
    private DiskEncryptionConfigurationKeyVaultConfigurationAuth auth;

    /**
     * Creates an instance of DiskEncryptionConfigurationKeyVaultConfiguration class.
     */
    public DiskEncryptionConfigurationKeyVaultConfiguration() {
    }

    /**
     * Get the keyUrl property: Key URL pointing to a key in KeyVault. Version segment of the Url is required.
     * 
     * @return the keyUrl value.
     */
    public String keyUrl() {
        return this.keyUrl;
    }

    /**
     * Set the keyUrl property: Key URL pointing to a key in KeyVault. Version segment of the Url is required.
     * 
     * @param keyUrl the keyUrl value to set.
     * @return the DiskEncryptionConfigurationKeyVaultConfiguration object itself.
     */
    public DiskEncryptionConfigurationKeyVaultConfiguration withKeyUrl(String keyUrl) {
        this.keyUrl = keyUrl;
        return this;
    }

    /**
     * Get the auth property: Configuration properties for the authentication to the Key Vault.
     * 
     * @return the auth value.
     */
    public DiskEncryptionConfigurationKeyVaultConfigurationAuth auth() {
        return this.auth;
    }

    /**
     * Set the auth property: Configuration properties for the authentication to the Key Vault.
     * 
     * @param auth the auth value to set.
     * @return the DiskEncryptionConfigurationKeyVaultConfiguration object itself.
     */
    public DiskEncryptionConfigurationKeyVaultConfiguration
        withAuth(DiskEncryptionConfigurationKeyVaultConfigurationAuth auth) {
        this.auth = auth;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (auth() != null) {
            auth().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyUrl", this.keyUrl);
        jsonWriter.writeJsonField("auth", this.auth);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskEncryptionConfigurationKeyVaultConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskEncryptionConfigurationKeyVaultConfiguration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskEncryptionConfigurationKeyVaultConfiguration.
     */
    public static DiskEncryptionConfigurationKeyVaultConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskEncryptionConfigurationKeyVaultConfiguration deserializedDiskEncryptionConfigurationKeyVaultConfiguration
                = new DiskEncryptionConfigurationKeyVaultConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyUrl".equals(fieldName)) {
                    deserializedDiskEncryptionConfigurationKeyVaultConfiguration.keyUrl = reader.getString();
                } else if ("auth".equals(fieldName)) {
                    deserializedDiskEncryptionConfigurationKeyVaultConfiguration.auth
                        = DiskEncryptionConfigurationKeyVaultConfigurationAuth.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskEncryptionConfigurationKeyVaultConfiguration;
        });
    }
}
