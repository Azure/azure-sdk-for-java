// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseError;
import com.azure.resourcemanager.appcontainers.models.DnsVerificationTestResult;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Custom domain analysis. */
@Fluent
public final class CustomHostnameAnalysisResultInner extends ProxyResource {
    /*
     * CustomHostnameAnalysisResult resource specific properties
     */
    @JsonProperty(value = "properties")
    private CustomHostnameAnalysisResultProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy
     * information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the innerProperties property: CustomHostnameAnalysisResult resource specific properties.
     *
     * @return the innerProperties value.
     */
    private CustomHostnameAnalysisResultProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the hostname property: Host name that was analyzed.
     *
     * @return the hostname value.
     */
    public String hostname() {
        return this.innerProperties() == null ? null : this.innerProperties().hostname();
    }

    /**
     * Get the isHostnameAlreadyVerified property: &lt;code&gt;true&lt;/code&gt; if hostname is already verified;
     * otherwise, &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the isHostnameAlreadyVerified value.
     */
    public Boolean isHostnameAlreadyVerified() {
        return this.innerProperties() == null ? null : this.innerProperties().isHostnameAlreadyVerified();
    }

    /**
     * Get the customDomainVerificationTest property: DNS verification test result.
     *
     * @return the customDomainVerificationTest value.
     */
    public DnsVerificationTestResult customDomainVerificationTest() {
        return this.innerProperties() == null ? null : this.innerProperties().customDomainVerificationTest();
    }

    /**
     * Get the customDomainVerificationFailureInfo property: Raw failure information if DNS verification fails.
     *
     * @return the customDomainVerificationFailureInfo value.
     */
    public DefaultErrorResponseError customDomainVerificationFailureInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().customDomainVerificationFailureInfo();
    }

    /**
     * Get the hasConflictOnManagedEnvironment property: &lt;code&gt;true&lt;/code&gt; if there is a conflict on the
     * Container App's managed environment; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the hasConflictOnManagedEnvironment value.
     */
    public Boolean hasConflictOnManagedEnvironment() {
        return this.innerProperties() == null ? null : this.innerProperties().hasConflictOnManagedEnvironment();
    }

    /**
     * Get the conflictingContainerAppResourceId property: Name of the conflicting Container App on the Managed
     * Environment if it's within the same subscription.
     *
     * @return the conflictingContainerAppResourceId value.
     */
    public String conflictingContainerAppResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().conflictingContainerAppResourceId();
    }

    /**
     * Get the cNameRecords property: CName records visible for this hostname.
     *
     * @return the cNameRecords value.
     */
    public List<String> cNameRecords() {
        return this.innerProperties() == null ? null : this.innerProperties().cNameRecords();
    }

    /**
     * Set the cNameRecords property: CName records visible for this hostname.
     *
     * @param cNameRecords the cNameRecords value to set.
     * @return the CustomHostnameAnalysisResultInner object itself.
     */
    public CustomHostnameAnalysisResultInner withCNameRecords(List<String> cNameRecords) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomHostnameAnalysisResultProperties();
        }
        this.innerProperties().withCNameRecords(cNameRecords);
        return this;
    }

    /**
     * Get the txtRecords property: TXT records visible for this hostname.
     *
     * @return the txtRecords value.
     */
    public List<String> txtRecords() {
        return this.innerProperties() == null ? null : this.innerProperties().txtRecords();
    }

    /**
     * Set the txtRecords property: TXT records visible for this hostname.
     *
     * @param txtRecords the txtRecords value to set.
     * @return the CustomHostnameAnalysisResultInner object itself.
     */
    public CustomHostnameAnalysisResultInner withTxtRecords(List<String> txtRecords) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomHostnameAnalysisResultProperties();
        }
        this.innerProperties().withTxtRecords(txtRecords);
        return this;
    }

    /**
     * Get the aRecords property: A records visible for this hostname.
     *
     * @return the aRecords value.
     */
    public List<String> aRecords() {
        return this.innerProperties() == null ? null : this.innerProperties().aRecords();
    }

    /**
     * Set the aRecords property: A records visible for this hostname.
     *
     * @param aRecords the aRecords value to set.
     * @return the CustomHostnameAnalysisResultInner object itself.
     */
    public CustomHostnameAnalysisResultInner withARecords(List<String> aRecords) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomHostnameAnalysisResultProperties();
        }
        this.innerProperties().withARecords(aRecords);
        return this;
    }

    /**
     * Get the alternateCNameRecords property: Alternate CName records visible for this hostname.
     *
     * @return the alternateCNameRecords value.
     */
    public List<String> alternateCNameRecords() {
        return this.innerProperties() == null ? null : this.innerProperties().alternateCNameRecords();
    }

    /**
     * Set the alternateCNameRecords property: Alternate CName records visible for this hostname.
     *
     * @param alternateCNameRecords the alternateCNameRecords value to set.
     * @return the CustomHostnameAnalysisResultInner object itself.
     */
    public CustomHostnameAnalysisResultInner withAlternateCNameRecords(List<String> alternateCNameRecords) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomHostnameAnalysisResultProperties();
        }
        this.innerProperties().withAlternateCNameRecords(alternateCNameRecords);
        return this;
    }

    /**
     * Get the alternateTxtRecords property: Alternate TXT records visible for this hostname.
     *
     * @return the alternateTxtRecords value.
     */
    public List<String> alternateTxtRecords() {
        return this.innerProperties() == null ? null : this.innerProperties().alternateTxtRecords();
    }

    /**
     * Set the alternateTxtRecords property: Alternate TXT records visible for this hostname.
     *
     * @param alternateTxtRecords the alternateTxtRecords value to set.
     * @return the CustomHostnameAnalysisResultInner object itself.
     */
    public CustomHostnameAnalysisResultInner withAlternateTxtRecords(List<String> alternateTxtRecords) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomHostnameAnalysisResultProperties();
        }
        this.innerProperties().withAlternateTxtRecords(alternateTxtRecords);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
