// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Http Route Config properties.
 */
@Fluent
public final class HttpRouteConfigProperties implements JsonSerializable<HttpRouteConfigProperties> {
    /*
     * The provisioning state of the Http Route Config in cluster
     */
    private HttpRouteProvisioningState provisioningState;

    /*
     * List of errors when trying to reconcile http routes
     */
    private List<HttpRouteProvisioningErrors> provisioningErrors;

    /*
     * FQDN of the route resource.
     */
    private String fqdn;

    /*
     * Custom domain bindings for http Routes' hostnames.
     */
    private List<CustomDomain> customDomains;

    /*
     * Routing Rules for http route resource.
     */
    private List<HttpRouteRule> rules;

    /**
     * Creates an instance of HttpRouteConfigProperties class.
     */
    public HttpRouteConfigProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the Http Route Config in cluster.
     * 
     * @return the provisioningState value.
     */
    public HttpRouteProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the provisioningErrors property: List of errors when trying to reconcile http routes.
     * 
     * @return the provisioningErrors value.
     */
    public List<HttpRouteProvisioningErrors> provisioningErrors() {
        return this.provisioningErrors;
    }

    /**
     * Get the fqdn property: FQDN of the route resource.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Get the customDomains property: Custom domain bindings for http Routes' hostnames.
     * 
     * @return the customDomains value.
     */
    public List<CustomDomain> customDomains() {
        return this.customDomains;
    }

    /**
     * Set the customDomains property: Custom domain bindings for http Routes' hostnames.
     * 
     * @param customDomains the customDomains value to set.
     * @return the HttpRouteConfigProperties object itself.
     */
    public HttpRouteConfigProperties withCustomDomains(List<CustomDomain> customDomains) {
        this.customDomains = customDomains;
        return this;
    }

    /**
     * Get the rules property: Routing Rules for http route resource.
     * 
     * @return the rules value.
     */
    public List<HttpRouteRule> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: Routing Rules for http route resource.
     * 
     * @param rules the rules value to set.
     * @return the HttpRouteConfigProperties object itself.
     */
    public HttpRouteConfigProperties withRules(List<HttpRouteRule> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provisioningErrors() != null) {
            provisioningErrors().forEach(e -> e.validate());
        }
        if (customDomains() != null) {
            customDomains().forEach(e -> e.validate());
        }
        if (rules() != null) {
            rules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("customDomains", this.customDomains, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("rules", this.rules, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HttpRouteConfigProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HttpRouteConfigProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HttpRouteConfigProperties.
     */
    public static HttpRouteConfigProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HttpRouteConfigProperties deserializedHttpRouteConfigProperties = new HttpRouteConfigProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedHttpRouteConfigProperties.provisioningState
                        = HttpRouteProvisioningState.fromString(reader.getString());
                } else if ("provisioningErrors".equals(fieldName)) {
                    List<HttpRouteProvisioningErrors> provisioningErrors
                        = reader.readArray(reader1 -> HttpRouteProvisioningErrors.fromJson(reader1));
                    deserializedHttpRouteConfigProperties.provisioningErrors = provisioningErrors;
                } else if ("fqdn".equals(fieldName)) {
                    deserializedHttpRouteConfigProperties.fqdn = reader.getString();
                } else if ("customDomains".equals(fieldName)) {
                    List<CustomDomain> customDomains = reader.readArray(reader1 -> CustomDomain.fromJson(reader1));
                    deserializedHttpRouteConfigProperties.customDomains = customDomains;
                } else if ("rules".equals(fieldName)) {
                    List<HttpRouteRule> rules = reader.readArray(reader1 -> HttpRouteRule.fromJson(reader1));
                    deserializedHttpRouteConfigProperties.rules = rules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHttpRouteConfigProperties;
        });
    }
}
