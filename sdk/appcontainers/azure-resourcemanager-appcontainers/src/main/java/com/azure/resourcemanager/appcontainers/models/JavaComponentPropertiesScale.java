// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Java component scaling configurations.
 */
@Fluent
public final class JavaComponentPropertiesScale implements JsonSerializable<JavaComponentPropertiesScale> {
    /*
     * Optional. Minimum number of Java component replicas. Defaults to 1 if not set
     */
    private Integer minReplicas;

    /*
     * Optional. Maximum number of Java component replicas
     */
    private Integer maxReplicas;

    /**
     * Creates an instance of JavaComponentPropertiesScale class.
     */
    public JavaComponentPropertiesScale() {
    }

    /**
     * Get the minReplicas property: Optional. Minimum number of Java component replicas. Defaults to 1 if not set.
     * 
     * @return the minReplicas value.
     */
    public Integer minReplicas() {
        return this.minReplicas;
    }

    /**
     * Set the minReplicas property: Optional. Minimum number of Java component replicas. Defaults to 1 if not set.
     * 
     * @param minReplicas the minReplicas value to set.
     * @return the JavaComponentPropertiesScale object itself.
     */
    public JavaComponentPropertiesScale withMinReplicas(Integer minReplicas) {
        this.minReplicas = minReplicas;
        return this;
    }

    /**
     * Get the maxReplicas property: Optional. Maximum number of Java component replicas.
     * 
     * @return the maxReplicas value.
     */
    public Integer maxReplicas() {
        return this.maxReplicas;
    }

    /**
     * Set the maxReplicas property: Optional. Maximum number of Java component replicas.
     * 
     * @param maxReplicas the maxReplicas value to set.
     * @return the JavaComponentPropertiesScale object itself.
     */
    public JavaComponentPropertiesScale withMaxReplicas(Integer maxReplicas) {
        this.maxReplicas = maxReplicas;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("minReplicas", this.minReplicas);
        jsonWriter.writeNumberField("maxReplicas", this.maxReplicas);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JavaComponentPropertiesScale from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JavaComponentPropertiesScale if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JavaComponentPropertiesScale.
     */
    public static JavaComponentPropertiesScale fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JavaComponentPropertiesScale deserializedJavaComponentPropertiesScale = new JavaComponentPropertiesScale();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minReplicas".equals(fieldName)) {
                    deserializedJavaComponentPropertiesScale.minReplicas = reader.getNullable(JsonReader::getInt);
                } else if ("maxReplicas".equals(fieldName)) {
                    deserializedJavaComponentPropertiesScale.maxReplicas = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJavaComponentPropertiesScale;
        });
    }
}
