// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.ContainerAppInner;
import com.azure.resourcemanager.appcontainers.models.ActiveRevisionsMode;
import com.azure.resourcemanager.appcontainers.models.Configuration;
import com.azure.resourcemanager.appcontainers.models.ExtendedLocation;
import com.azure.resourcemanager.appcontainers.models.ExtendedLocationTypes;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.Template;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ContainerAppInnerTests {
    @Test
    public void testDeserialize() {
        ContainerAppInner model =
            BinaryData
                .fromString(
                    "{\"extendedLocation\":{\"name\":\"gukgjnpiucgygevq\",\"type\":\"CustomLocation\"},\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"c\":{}}},\"properties\":{\"provisioningState\":\"Failed\",\"managedEnvironmentId\":\"dpydn\",\"environmentId\":\"hxdeoejz\",\"workloadProfileType\":\"w\",\"latestRevisionName\":\"sjttgzfbish\",\"latestRevisionFqdn\":\"khaj\",\"customDomainVerificationId\":\"yeamdphagalpb\",\"configuration\":{\"secrets\":[],\"activeRevisionsMode\":\"Single\",\"registries\":[],\"maxInactiveRevisions\":1833977837},\"template\":{\"revisionSuffix\":\"shwankixzbinje\",\"initContainers\":[],\"containers\":[],\"volumes\":[]},\"outboundIpAddresses\":[\"zoqftiyqzrnkcqvy\",\"lwh\"],\"eventStreamEndpoint\":\"sicohoqqnwvlry\"},\"location\":\"w\",\"tags\":{\"gyxzk\":\"unmmq\"},\"id\":\"noc\",\"name\":\"koklya\",\"type\":\"uconuqszfkbey\"}")
                .toObject(ContainerAppInner.class);
        Assertions.assertEquals("w", model.location());
        Assertions.assertEquals("unmmq", model.tags().get("gyxzk"));
        Assertions.assertEquals("gukgjnpiucgygevq", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("dpydn", model.managedEnvironmentId());
        Assertions.assertEquals("hxdeoejz", model.environmentId());
        Assertions.assertEquals("w", model.workloadProfileType());
        Assertions.assertEquals(ActiveRevisionsMode.SINGLE, model.configuration().activeRevisionsMode());
        Assertions.assertEquals(1833977837, model.configuration().maxInactiveRevisions());
        Assertions.assertEquals("shwankixzbinje", model.template().revisionSuffix());
    }

    @Test
    public void testSerialize() {
        ContainerAppInner model =
            new ContainerAppInner()
                .withLocation("w")
                .withTags(mapOf("gyxzk", "unmmq"))
                .withExtendedLocation(
                    new ExtendedLocation().withName("gukgjnpiucgygevq").withType(ExtendedLocationTypes.CUSTOM_LOCATION))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("c", new UserAssignedIdentity())))
                .withManagedEnvironmentId("dpydn")
                .withEnvironmentId("hxdeoejz")
                .withWorkloadProfileType("w")
                .withConfiguration(
                    new Configuration()
                        .withSecrets(Arrays.asList())
                        .withActiveRevisionsMode(ActiveRevisionsMode.SINGLE)
                        .withRegistries(Arrays.asList())
                        .withMaxInactiveRevisions(1833977837))
                .withTemplate(
                    new Template()
                        .withRevisionSuffix("shwankixzbinje")
                        .withInitContainers(Arrays.asList())
                        .withContainers(Arrays.asList())
                        .withVolumes(Arrays.asList()));
        model = BinaryData.fromObject(model).toObject(ContainerAppInner.class);
        Assertions.assertEquals("w", model.location());
        Assertions.assertEquals("unmmq", model.tags().get("gyxzk"));
        Assertions.assertEquals("gukgjnpiucgygevq", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("dpydn", model.managedEnvironmentId());
        Assertions.assertEquals("hxdeoejz", model.environmentId());
        Assertions.assertEquals("w", model.workloadProfileType());
        Assertions.assertEquals(ActiveRevisionsMode.SINGLE, model.configuration().activeRevisionsMode());
        Assertions.assertEquals(1833977837, model.configuration().maxInactiveRevisions());
        Assertions.assertEquals("shwankixzbinje", model.template().revisionSuffix());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
