// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"6d1f0362-b4e3-4feb-979c-7053580d2fb1\",\"tenantId\":\"7b2c3890-62ba-4c7f-a3a9-f6c1384307f2\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"jbhckfrlhr\":{\"principalId\":\"e993f11c-547c-487d-a816-c2302fac2109\",\"clientId\":\"b928d768-15c1-4ba8-83dc-6a9a1f00a612\"},\"kyv\":{\"principalId\":\"837c4096-690b-464e-b5aa-e56a2c0d17ca\",\"clientId\":\"0ee55091-9b27-4014-af52-7df61e83eeff\"},\"anuzbpzkafkuw\":{\"principalId\":\"f42cb857-cbb7-4070-9e59-4f92cb4437f4\",\"clientId\":\"e279432b-8f2e-48ad-813f-44640e674ca3\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
            .withUserAssignedIdentities(mapOf("jbhckfrlhr", new UserAssignedIdentity(), "kyv",
                new UserAssignedIdentity(), "anuzbpzkafkuw", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
