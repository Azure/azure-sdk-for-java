// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.models.ManagedEnvironmentOutBoundType;
import com.azure.resourcemanager.appcontainers.models.ManagedEnvironmentOutboundSettings;
import com.azure.resourcemanager.appcontainers.models.VnetConfiguration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class VnetConfigurationTests {
    @Test
    public void testDeserialize() {
        VnetConfiguration model =
            BinaryData
                .fromString(
                    "{\"internal\":true,\"infrastructureSubnetId\":\"er\",\"runtimeSubnetId\":\"pqbmfpjbab\",\"dockerBridgeCidr\":\"dfc\",\"platformReservedCidr\":\"spuunnoxyhkxgq\",\"platformReservedDnsIP\":\"rihpfhoq\",\"outboundSettings\":{\"outBoundType\":\"LoadBalancer\",\"virtualNetworkApplianceIp\":\"dao\"}}")
                .toObject(VnetConfiguration.class);
        Assertions.assertEquals(true, model.internal());
        Assertions.assertEquals("er", model.infrastructureSubnetId());
        Assertions.assertEquals("pqbmfpjbab", model.runtimeSubnetId());
        Assertions.assertEquals("dfc", model.dockerBridgeCidr());
        Assertions.assertEquals("spuunnoxyhkxgq", model.platformReservedCidr());
        Assertions.assertEquals("rihpfhoq", model.platformReservedDnsIp());
        Assertions.assertEquals(ManagedEnvironmentOutBoundType.LOAD_BALANCER, model.outboundSettings().outBoundType());
        Assertions.assertEquals("dao", model.outboundSettings().virtualNetworkApplianceIp());
    }

    @Test
    public void testSerialize() {
        VnetConfiguration model =
            new VnetConfiguration()
                .withInternal(true)
                .withInfrastructureSubnetId("er")
                .withRuntimeSubnetId("pqbmfpjbab")
                .withDockerBridgeCidr("dfc")
                .withPlatformReservedCidr("spuunnoxyhkxgq")
                .withPlatformReservedDnsIp("rihpfhoq")
                .withOutboundSettings(
                    new ManagedEnvironmentOutboundSettings()
                        .withOutBoundType(ManagedEnvironmentOutBoundType.LOAD_BALANCER)
                        .withVirtualNetworkApplianceIp("dao"));
        model = BinaryData.fromObject(model).toObject(VnetConfiguration.class);
        Assertions.assertEquals(true, model.internal());
        Assertions.assertEquals("er", model.infrastructureSubnetId());
        Assertions.assertEquals("pqbmfpjbab", model.runtimeSubnetId());
        Assertions.assertEquals("dfc", model.dockerBridgeCidr());
        Assertions.assertEquals("spuunnoxyhkxgq", model.platformReservedCidr());
        Assertions.assertEquals("rihpfhoq", model.platformReservedDnsIp());
        Assertions.assertEquals(ManagedEnvironmentOutBoundType.LOAD_BALANCER, model.outboundSettings().outBoundType());
        Assertions.assertEquals("dao", model.outboundSettings().virtualNetworkApplianceIp());
    }
}
