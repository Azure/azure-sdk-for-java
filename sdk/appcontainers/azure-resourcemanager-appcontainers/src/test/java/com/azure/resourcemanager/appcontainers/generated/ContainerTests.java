// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.models.Container;
import com.azure.resourcemanager.appcontainers.models.ContainerAppProbe;
import com.azure.resourcemanager.appcontainers.models.ContainerAppProbeHttpGet;
import com.azure.resourcemanager.appcontainers.models.ContainerAppProbeTcpSocket;
import com.azure.resourcemanager.appcontainers.models.ContainerResources;
import com.azure.resourcemanager.appcontainers.models.EnvironmentVar;
import com.azure.resourcemanager.appcontainers.models.Scheme;
import com.azure.resourcemanager.appcontainers.models.Type;
import com.azure.resourcemanager.appcontainers.models.VolumeMount;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ContainerTests {
    @Test
    public void testDeserialize() {
        Container model =
            BinaryData
                .fromString(
                    "{\"probes\":[{\"failureThreshold\":1847154217,\"httpGet\":{\"host\":\"dyh\",\"httpHeaders\":[],\"path\":\"kpw\",\"port\":722591670,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":1405054510,\"periodSeconds\":436930302,\"successThreshold\":217402337,\"tcpSocket\":{\"host\":\"ljxywsu\",\"port\":2009471016},\"terminationGracePeriodSeconds\":6037040030407661019,\"timeoutSeconds\":371488938,\"type\":\"Readiness\"}],\"image\":\"g\",\"name\":\"gvraeaen\",\"command\":[\"zar\"],\"args\":[\"q\",\"uijfqk\",\"cewiipfpub\",\"ibwwiftohqkv\"],\"env\":[{\"name\":\"sgplsakn\",\"value\":\"fsynljphuop\",\"secretRef\":\"dlqiyntorzih\"},{\"name\":\"osjswsr\",\"value\":\"lyzrpzbchckqqzqi\",\"secretRef\":\"iysui\"},{\"name\":\"ynkedyatrwyhqmib\",\"value\":\"hwit\",\"secretRef\":\"ypyynpcdpumnzg\"},{\"name\":\"z\",\"value\":\"abikns\",\"secretRef\":\"gj\"}],\"resources\":{\"cpu\":40.86477682375702,\"memory\":\"lwwrl\",\"ephemeralStorage\":\"m\"},\"volumeMounts\":[{\"volumeName\":\"ok\",\"mountPath\":\"llxdyhgs\"},{\"volumeName\":\"cogjltdtbn\",\"mountPath\":\"adoocrkvc\"},{\"volumeName\":\"hnvpamqgxq\",\"mountPath\":\"ezikywggxkal\"},{\"volumeName\":\"tmelw\",\"mountPath\":\"piccjzkzivgv\"}]}")
                .toObject(Container.class);
        Assertions.assertEquals("g", model.image());
        Assertions.assertEquals("gvraeaen", model.name());
        Assertions.assertEquals("zar", model.command().get(0));
        Assertions.assertEquals("q", model.args().get(0));
        Assertions.assertEquals("sgplsakn", model.env().get(0).name());
        Assertions.assertEquals("fsynljphuop", model.env().get(0).value());
        Assertions.assertEquals("dlqiyntorzih", model.env().get(0).secretRef());
        Assertions.assertEquals(40.86477682375702D, model.resources().cpu());
        Assertions.assertEquals("lwwrl", model.resources().memory());
        Assertions.assertEquals("ok", model.volumeMounts().get(0).volumeName());
        Assertions.assertEquals("llxdyhgs", model.volumeMounts().get(0).mountPath());
        Assertions.assertEquals(1847154217, model.probes().get(0).failureThreshold());
        Assertions.assertEquals("dyh", model.probes().get(0).httpGet().host());
        Assertions.assertEquals("kpw", model.probes().get(0).httpGet().path());
        Assertions.assertEquals(722591670, model.probes().get(0).httpGet().port());
        Assertions.assertEquals(Scheme.HTTP, model.probes().get(0).httpGet().scheme());
        Assertions.assertEquals(1405054510, model.probes().get(0).initialDelaySeconds());
        Assertions.assertEquals(436930302, model.probes().get(0).periodSeconds());
        Assertions.assertEquals(217402337, model.probes().get(0).successThreshold());
        Assertions.assertEquals("ljxywsu", model.probes().get(0).tcpSocket().host());
        Assertions.assertEquals(2009471016, model.probes().get(0).tcpSocket().port());
        Assertions.assertEquals(6037040030407661019L, model.probes().get(0).terminationGracePeriodSeconds());
        Assertions.assertEquals(371488938, model.probes().get(0).timeoutSeconds());
        Assertions.assertEquals(Type.READINESS, model.probes().get(0).type());
    }

    @Test
    public void testSerialize() {
        Container model =
            new Container()
                .withImage("g")
                .withName("gvraeaen")
                .withCommand(Arrays.asList("zar"))
                .withArgs(Arrays.asList("q", "uijfqk", "cewiipfpub", "ibwwiftohqkv"))
                .withEnv(
                    Arrays
                        .asList(
                            new EnvironmentVar()
                                .withName("sgplsakn")
                                .withValue("fsynljphuop")
                                .withSecretRef("dlqiyntorzih"),
                            new EnvironmentVar()
                                .withName("osjswsr")
                                .withValue("lyzrpzbchckqqzqi")
                                .withSecretRef("iysui"),
                            new EnvironmentVar()
                                .withName("ynkedyatrwyhqmib")
                                .withValue("hwit")
                                .withSecretRef("ypyynpcdpumnzg"),
                            new EnvironmentVar().withName("z").withValue("abikns").withSecretRef("gj")))
                .withResources(new ContainerResources().withCpu(40.86477682375702D).withMemory("lwwrl"))
                .withVolumeMounts(
                    Arrays
                        .asList(
                            new VolumeMount().withVolumeName("ok").withMountPath("llxdyhgs"),
                            new VolumeMount().withVolumeName("cogjltdtbn").withMountPath("adoocrkvc"),
                            new VolumeMount().withVolumeName("hnvpamqgxq").withMountPath("ezikywggxkal"),
                            new VolumeMount().withVolumeName("tmelw").withMountPath("piccjzkzivgv")))
                .withProbes(
                    Arrays
                        .asList(
                            new ContainerAppProbe()
                                .withFailureThreshold(1847154217)
                                .withHttpGet(
                                    new ContainerAppProbeHttpGet()
                                        .withHost("dyh")
                                        .withHttpHeaders(Arrays.asList())
                                        .withPath("kpw")
                                        .withPort(722591670)
                                        .withScheme(Scheme.HTTP))
                                .withInitialDelaySeconds(1405054510)
                                .withPeriodSeconds(436930302)
                                .withSuccessThreshold(217402337)
                                .withTcpSocket(
                                    new ContainerAppProbeTcpSocket().withHost("ljxywsu").withPort(2009471016))
                                .withTerminationGracePeriodSeconds(6037040030407661019L)
                                .withTimeoutSeconds(371488938)
                                .withType(Type.READINESS)));
        model = BinaryData.fromObject(model).toObject(Container.class);
        Assertions.assertEquals("g", model.image());
        Assertions.assertEquals("gvraeaen", model.name());
        Assertions.assertEquals("zar", model.command().get(0));
        Assertions.assertEquals("q", model.args().get(0));
        Assertions.assertEquals("sgplsakn", model.env().get(0).name());
        Assertions.assertEquals("fsynljphuop", model.env().get(0).value());
        Assertions.assertEquals("dlqiyntorzih", model.env().get(0).secretRef());
        Assertions.assertEquals(40.86477682375702D, model.resources().cpu());
        Assertions.assertEquals("lwwrl", model.resources().memory());
        Assertions.assertEquals("ok", model.volumeMounts().get(0).volumeName());
        Assertions.assertEquals("llxdyhgs", model.volumeMounts().get(0).mountPath());
        Assertions.assertEquals(1847154217, model.probes().get(0).failureThreshold());
        Assertions.assertEquals("dyh", model.probes().get(0).httpGet().host());
        Assertions.assertEquals("kpw", model.probes().get(0).httpGet().path());
        Assertions.assertEquals(722591670, model.probes().get(0).httpGet().port());
        Assertions.assertEquals(Scheme.HTTP, model.probes().get(0).httpGet().scheme());
        Assertions.assertEquals(1405054510, model.probes().get(0).initialDelaySeconds());
        Assertions.assertEquals(436930302, model.probes().get(0).periodSeconds());
        Assertions.assertEquals(217402337, model.probes().get(0).successThreshold());
        Assertions.assertEquals("ljxywsu", model.probes().get(0).tcpSocket().host());
        Assertions.assertEquals(2009471016, model.probes().get(0).tcpSocket().port());
        Assertions.assertEquals(6037040030407661019L, model.probes().get(0).terminationGracePeriodSeconds());
        Assertions.assertEquals(371488938, model.probes().get(0).timeoutSeconds());
        Assertions.assertEquals(Type.READINESS, model.probes().get(0).type());
    }
}
