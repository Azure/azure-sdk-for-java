// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.Diagnostics;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JobsListDetectorsMockTests {
    @Test
    public void testListDetectors() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"iii\",\"name\":\"pfoh\",\"description\":\"fkx\",\"author\":\"cbrwjiutgnjizbe\",\"category\":\"oiymrvzbjuyrsrzi\",\"supportTopicList\":[{\"id\":\"xgbdsuifrevka\",\"pesId\":\"ezkiswqjmdghsypa\"},{\"id\":\"bjufptbjczjnciu\",\"pesId\":\"qvldaswvppisqqzl\"}],\"analysisTypes\":[\"dhzxrrfcfsrh\",\"hgsnxuwwkpph\"],\"type\":\"sbzxl\",\"score\":83.39866},\"dataset\":[{\"table\":{\"tableName\":\"k\",\"columns\":[{},{}],\"rows\":[\"dataacnmwpfsuqtaaz\"]},\"renderingProperties\":{\"type\":1674351827,\"title\":\"xoyf\",\"description\":\"qqi\",\"isVisible\":true}},{\"table\":{\"tableName\":\"hdjzqdcadwvpsoz\",\"columns\":[{}],\"rows\":[\"datariybmrz\",\"dataepnxwd\"]},\"renderingProperties\":{\"type\":1032969367,\"title\":\"gv\",\"description\":\"mxaursqftibtyi\",\"isVisible\":false}}],\"status\":{\"message\":\"irfqjpnqnoow\",\"statusId\":1074790994},\"dataProviderMetadata\":{\"providerName\":\"nrexkxbhxv\",\"propertyBag\":[{\"name\":\"lgmnhjevdyzn\",\"value\":\"jsvkskmqozzkivy\"}]}},\"id\":\"rl\",\"name\":\"izjixlq\",\"type\":\"hefkwabsolronqq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Diagnostics> response
            = manager.jobs().listDetectors("kadjf", "n", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dhzxrrfcfsrh",
            response.iterator().next().properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("k", response.iterator().next().properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(1674351827,
            response.iterator().next().properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("xoyf",
            response.iterator().next().properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("qqi",
            response.iterator().next().properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(true,
            response.iterator().next().properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("irfqjpnqnoow", response.iterator().next().properties().status().message());
        Assertions.assertEquals(1074790994, response.iterator().next().properties().status().statusId());
        Assertions.assertEquals("nrexkxbhxv",
            response.iterator().next().properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("lgmnhjevdyzn",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("jsvkskmqozzkivy",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
