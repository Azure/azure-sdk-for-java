// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.Diagnostics;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JobsListDetectorsMockTests {
    @Test
    public void testListDetectors() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"eeksnbksdqhjvyk\",\"name\":\"eslk\",\"description\":\"ustcpoq\",\"author\":\"vnwqjwgo\",\"category\":\"lejjjkxy\",\"supportTopicList\":[{\"id\":\"bkjbz\",\"pesId\":\"nsvk\"}],\"analysisTypes\":[\"jtjknsxf\",\"us\"],\"type\":\"dpkupnqrmgjf\",\"score\":95.03275},\"dataset\":[{\"table\":{\"tableName\":\"oiojfizfavkjzwfb\",\"columns\":[{},{}],\"rows\":[\"datammfz\",\"databfw\"]},\"renderingProperties\":{\"type\":1740416627,\"title\":\"dew\",\"description\":\"sxkrpl\",\"isVisible\":false}},{\"table\":{\"tableName\":\"jwwviy\",\"columns\":[{}],\"rows\":[\"datahbrnnhjx\",\"dataqwjhqkbiwetpozyc\",\"dataqiqyhgfsetzlexbs\"]},\"renderingProperties\":{\"type\":805982929,\"title\":\"no\",\"description\":\"ziu\",\"isVisible\":false}},{\"table\":{\"tableName\":\"kdtnhqsyclj\",\"columns\":[{},{},{}],\"rows\":[\"datapbafvafhlbylc\",\"databevxrhyzd\",\"datawrso\"]},\"renderingProperties\":{\"type\":417832295,\"title\":\"bmairrhvhfnracwn\",\"description\":\"igtuu\",\"isVisible\":true}},{\"table\":{\"tableName\":\"dawsigrbjb\",\"columns\":[{},{}],\"rows\":[\"datavitvqkjyaz\",\"dataumtggmuwdchozfn\",\"datafexl\"]},\"renderingProperties\":{\"type\":133463775,\"title\":\"kizvoa\",\"description\":\"naqln\",\"isVisible\":true}}],\"status\":{\"message\":\"yxl\",\"statusId\":1391539520},\"dataProviderMetadata\":{\"providerName\":\"vx\",\"propertyBag\":[{\"name\":\"hmpejtlkexaonw\",\"value\":\"kcq\"}]}},\"id\":\"xhxknlc\",\"name\":\"rmmkyupiju\",\"type\":\"yqjf\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Diagnostics> response
            = manager.jobs().listDetectors("xaptefhexcgjok", "ljnhvlqj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jtjknsxf", response.iterator().next().properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("oiojfizfavkjzwfb",
            response.iterator().next().properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(1740416627,
            response.iterator().next().properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("dew",
            response.iterator().next().properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("sxkrpl",
            response.iterator().next().properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(false,
            response.iterator().next().properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("yxl", response.iterator().next().properties().status().message());
        Assertions.assertEquals(1391539520, response.iterator().next().properties().status().statusId());
        Assertions.assertEquals("vx", response.iterator().next().properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("hmpejtlkexaonw",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("kcq",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
