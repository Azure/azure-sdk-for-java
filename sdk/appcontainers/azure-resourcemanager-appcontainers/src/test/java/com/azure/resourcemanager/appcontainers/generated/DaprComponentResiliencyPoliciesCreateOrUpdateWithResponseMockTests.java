// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicy;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyTimeoutPolicyConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DaprComponentResiliencyPoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"inboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":1062947969,\"retryBackOff\":{\"initialDelayInMilliseconds\":1741549588,\"maxIntervalInMilliseconds\":388548265}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":187147266},\"circuitBreakerPolicy\":{\"consecutiveErrors\":353257456,\"timeoutInSeconds\":1049484711,\"intervalInSeconds\":572509915}},\"outboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":574784093,\"retryBackOff\":{\"initialDelayInMilliseconds\":2107089199,\"maxIntervalInMilliseconds\":1429921070}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":551736527},\"circuitBreakerPolicy\":{\"consecutiveErrors\":1021845458,\"timeoutInSeconds\":1456105852,\"intervalInSeconds\":853007583}}},\"id\":\"vzp\",\"name\":\"reszyaqgom\",\"type\":\"bmfggeokfekcjjlw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DaprComponentResiliencyPolicy response = manager.daprComponentResiliencyPolicies()
            .define("galgxnwfm")
            .withExistingDaprComponent("annvwx", "hpjhubohxvzga", "bvrhh")
            .withInboundPolicy(new DaprComponentResiliencyPolicyConfiguration()
                .withHttpRetryPolicy(
                    new DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration().withMaxRetries(1661124713)
                        .withRetryBackOff(new DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration()
                            .withInitialDelayInMilliseconds(1403106618)
                            .withMaxIntervalInMilliseconds(1444513148)))
                .withTimeoutPolicy(new DaprComponentResiliencyPolicyTimeoutPolicyConfiguration()
                    .withResponseTimeoutInSeconds(1350836418))
                .withCircuitBreakerPolicy(new DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration()
                    .withConsecutiveErrors(1880326825)
                    .withTimeoutInSeconds(1280643157)
                    .withIntervalInSeconds(359747881)))
            .withOutboundPolicy(new DaprComponentResiliencyPolicyConfiguration()
                .withHttpRetryPolicy(
                    new DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration().withMaxRetries(1293229301)
                        .withRetryBackOff(new DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration()
                            .withInitialDelayInMilliseconds(449921583)
                            .withMaxIntervalInMilliseconds(1998052273)))
                .withTimeoutPolicy(new DaprComponentResiliencyPolicyTimeoutPolicyConfiguration()
                    .withResponseTimeoutInSeconds(72612929))
                .withCircuitBreakerPolicy(new DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration()
                    .withConsecutiveErrors(240660282)
                    .withTimeoutInSeconds(295561610)
                    .withIntervalInSeconds(875468202)))
            .create();

        Assertions.assertEquals(1062947969, response.inboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(1741549588,
            response.inboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(388548265,
            response.inboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(187147266, response.inboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(353257456, response.inboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(1049484711, response.inboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(572509915, response.inboundPolicy().circuitBreakerPolicy().intervalInSeconds());
        Assertions.assertEquals(574784093, response.outboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(2107089199,
            response.outboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(1429921070,
            response.outboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(551736527, response.outboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(1021845458, response.outboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(1456105852, response.outboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(853007583, response.outboundPolicy().circuitBreakerPolicy().intervalInSeconds());
    }
}
