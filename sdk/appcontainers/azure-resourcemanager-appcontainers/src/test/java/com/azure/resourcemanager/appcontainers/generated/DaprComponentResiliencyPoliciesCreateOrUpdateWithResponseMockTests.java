// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicy;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyTimeoutPolicyConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DaprComponentResiliencyPoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"inboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":684721295,\"retryBackOff\":{\"initialDelayInMilliseconds\":1832222772,\"maxIntervalInMilliseconds\":538650932}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":1207678234},\"circuitBreakerPolicy\":{\"consecutiveErrors\":215386567,\"timeoutInSeconds\":894709124,\"intervalInSeconds\":1742124939}},\"outboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":1791009241,\"retryBackOff\":{\"initialDelayInMilliseconds\":1119823688,\"maxIntervalInMilliseconds\":1336622134}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":1434985054},\"circuitBreakerPolicy\":{\"consecutiveErrors\":1032393727,\"timeoutInSeconds\":1873317873,\"intervalInSeconds\":1609822926}}},\"id\":\"vbbvaqdljnpetl\",\"name\":\"n\",\"type\":\"detawevxehue\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DaprComponentResiliencyPolicy response = manager.daprComponentResiliencyPolicies()
            .define("dror")
            .withExistingDaprComponent("qvcml", "exbzbqufpnezsjza", "m")
            .withInboundPolicy(new DaprComponentResiliencyPolicyConfiguration()
                .withHttpRetryPolicy(
                    new DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration().withMaxRetries(1314918046)
                        .withRetryBackOff(new DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration()
                            .withInitialDelayInMilliseconds(34461405)
                            .withMaxIntervalInMilliseconds(1687575900)))
                .withTimeoutPolicy(new DaprComponentResiliencyPolicyTimeoutPolicyConfiguration()
                    .withResponseTimeoutInSeconds(1621039893))
                .withCircuitBreakerPolicy(new DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration()
                    .withConsecutiveErrors(1756639996)
                    .withTimeoutInSeconds(71262559)
                    .withIntervalInSeconds(1457823620)))
            .withOutboundPolicy(new DaprComponentResiliencyPolicyConfiguration()
                .withHttpRetryPolicy(
                    new DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration().withMaxRetries(703393978)
                        .withRetryBackOff(new DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration()
                            .withInitialDelayInMilliseconds(155050896)
                            .withMaxIntervalInMilliseconds(1642847010)))
                .withTimeoutPolicy(new DaprComponentResiliencyPolicyTimeoutPolicyConfiguration()
                    .withResponseTimeoutInSeconds(363464701))
                .withCircuitBreakerPolicy(new DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration()
                    .withConsecutiveErrors(1653660645)
                    .withTimeoutInSeconds(1501466100)
                    .withIntervalInSeconds(196695741)))
            .create();

        Assertions.assertEquals(684721295, response.inboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(1832222772,
            response.inboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(538650932,
            response.inboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(1207678234, response.inboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(215386567, response.inboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(894709124, response.inboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(1742124939, response.inboundPolicy().circuitBreakerPolicy().intervalInSeconds());
        Assertions.assertEquals(1791009241, response.outboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(1119823688,
            response.outboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(1336622134,
            response.outboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(1434985054, response.outboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(1032393727, response.outboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(1873317873, response.outboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(1609822926, response.outboundPolicy().circuitBreakerPolicy().intervalInSeconds());
    }
}
