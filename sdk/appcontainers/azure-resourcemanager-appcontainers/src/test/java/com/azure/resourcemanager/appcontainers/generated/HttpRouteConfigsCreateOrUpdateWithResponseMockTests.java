// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.BindingType;
import com.azure.resourcemanager.appcontainers.models.CustomDomain;
import com.azure.resourcemanager.appcontainers.models.HttpRoute;
import com.azure.resourcemanager.appcontainers.models.HttpRouteConfig;
import com.azure.resourcemanager.appcontainers.models.HttpRouteConfigProperties;
import com.azure.resourcemanager.appcontainers.models.HttpRouteRule;
import com.azure.resourcemanager.appcontainers.models.HttpRouteTarget;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class HttpRouteConfigsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"provisioningErrors\":[{\"timestamp\":\"2021-11-08T00:33:35Z\",\"message\":\"ahhhsaaxxsritr\"},{\"timestamp\":\"2021-04-11T15:20:30Z\",\"message\":\"aesyyefm\"},{\"timestamp\":\"2021-08-19T00:07:20Z\",\"message\":\"otii\"},{\"timestamp\":\"2021-07-14T11:01:53Z\",\"message\":\"asrvrmtist\"}],\"fqdn\":\"kjhorlxkpy\",\"customDomains\":[{\"name\":\"nnycntrqxxwtd\",\"bindingType\":\"Auto\",\"certificateId\":\"tsuhqhtoxtd\"},{\"name\":\"qavfxbqmzxs\",\"bindingType\":\"Auto\",\"certificateId\":\"inpaamihwbgh\"}],\"rules\":[{\"targets\":[{\"containerApp\":\"bgchcgsfzhbjkiy\"},{\"containerApp\":\"qbjsdjpgxeysgw\"},{\"containerApp\":\"cfferznzc\"}],\"routes\":[{},{},{},{}],\"description\":\"veomkhfeqc\"},{\"targets\":[{\"containerApp\":\"lfpohimgckycj\"},{\"containerApp\":\"eebznbznxs\"},{\"containerApp\":\"loutnp\"},{\"containerApp\":\"mxooqohgpncdm\"}],\"routes\":[{},{},{},{}],\"description\":\"pfhsldqdza\"}]},\"id\":\"unye\",\"name\":\"dyzdsy\",\"type\":\"cikswhcamwu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        HttpRouteConfig response = manager.httpRouteConfigs()
            .define("p")
            .withExistingManagedEnvironment("owewjskr", "eedddrftfquu")
            .withProperties(new HttpRouteConfigProperties().withCustomDomains(Arrays.asList(
                new CustomDomain().withName("bqajejir")
                    .withBindingType(BindingType.SNI_ENABLED)
                    .withCertificateId("vkgpogplbjuvlnhx"),
                new CustomDomain().withName("rnjhinaeges").withBindingType(BindingType.AUTO).withCertificateId("pqm"),
                new CustomDomain().withName("moplukfykkfhsov")
                    .withBindingType(BindingType.SNI_ENABLED)
                    .withCertificateId("mjxmwqpdk")))
                .withRules(Arrays.asList(
                    new HttpRouteRule()
                        .withTargets(Arrays.asList(new HttpRouteTarget().withContainerApp("zkqmx"),
                            new HttpRouteTarget().withContainerApp("poriwbwggijtspzj")))
                        .withRoutes(Arrays.asList(new HttpRoute(), new HttpRoute(), new HttpRoute(), new HttpRoute()))
                        .withDescription("ikwsbzrhdugq"),
                    new HttpRouteRule()
                        .withTargets(Arrays.asList(new HttpRouteTarget().withContainerApp("rgzfrunjfhrjhi"),
                            new HttpRouteTarget().withContainerApp("cbaus")))
                        .withRoutes(Arrays.asList(new HttpRoute()))
                        .withDescription("zkvihvtu"),
                    new HttpRouteRule()
                        .withTargets(Arrays.asList(new HttpRouteTarget().withContainerApp("sqwzszoszjgzu"),
                            new HttpRouteTarget().withContainerApp("kfnyskwwunqhc"),
                            new HttpRouteTarget().withContainerApp("avoj"),
                            new HttpRouteTarget().withContainerApp("slhip")))
                        .withRoutes(Arrays.asList(new HttpRoute(), new HttpRoute(), new HttpRoute()))
                        .withDescription("bljp"))))
            .create();

        Assertions.assertEquals("nnycntrqxxwtd", response.properties().customDomains().get(0).name());
        Assertions.assertEquals(BindingType.AUTO, response.properties().customDomains().get(0).bindingType());
        Assertions.assertEquals("tsuhqhtoxtd", response.properties().customDomains().get(0).certificateId());
        Assertions.assertEquals("bgchcgsfzhbjkiy",
            response.properties().rules().get(0).targets().get(0).containerApp());
        Assertions.assertEquals("veomkhfeqc", response.properties().rules().get(0).description());
    }
}
