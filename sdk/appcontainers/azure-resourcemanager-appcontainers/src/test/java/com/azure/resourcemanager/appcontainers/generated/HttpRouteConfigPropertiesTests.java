// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.models.BindingType;
import com.azure.resourcemanager.appcontainers.models.CustomDomain;
import com.azure.resourcemanager.appcontainers.models.HttpRoute;
import com.azure.resourcemanager.appcontainers.models.HttpRouteAction;
import com.azure.resourcemanager.appcontainers.models.HttpRouteConfigProperties;
import com.azure.resourcemanager.appcontainers.models.HttpRouteMatch;
import com.azure.resourcemanager.appcontainers.models.HttpRouteRule;
import com.azure.resourcemanager.appcontainers.models.HttpRouteTarget;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class HttpRouteConfigPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HttpRouteConfigProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"provisioningErrors\":[{\"timestamp\":\"2021-04-03T18:07:22Z\",\"message\":\"lrmcaykg\"}],\"fqdn\":\"oxuztrksx\",\"customDomains\":[{\"name\":\"d\",\"bindingType\":\"Disabled\",\"certificateId\":\"nznthjtw\"},{\"name\":\"jaosrxuzv\",\"bindingType\":\"SniEnabled\",\"certificateId\":\"tcqiosmg\"}],\"rules\":[{\"targets\":[{\"containerApp\":\"xqdlyrtltlapr\",\"revision\":\"zkatb\",\"label\":\"mznnbsoqeqalarvl\"}],\"routes\":[{\"match\":{\"prefix\":\"tgfebwln\",\"path\":\"hyreeu\",\"pathSeparatedPrefix\":\"qavbpdqmj\",\"caseSensitive\":true},\"action\":{\"prefixRewrite\":\"glgou\"}}],\"description\":\"lmjjyuo\"}]}")
            .toObject(HttpRouteConfigProperties.class);
        Assertions.assertEquals("d", model.customDomains().get(0).name());
        Assertions.assertEquals(BindingType.DISABLED, model.customDomains().get(0).bindingType());
        Assertions.assertEquals("nznthjtw", model.customDomains().get(0).certificateId());
        Assertions.assertEquals("xqdlyrtltlapr", model.rules().get(0).targets().get(0).containerApp());
        Assertions.assertEquals("zkatb", model.rules().get(0).targets().get(0).revision());
        Assertions.assertEquals("mznnbsoqeqalarvl", model.rules().get(0).targets().get(0).label());
        Assertions.assertEquals("tgfebwln", model.rules().get(0).routes().get(0).match().prefix());
        Assertions.assertEquals("hyreeu", model.rules().get(0).routes().get(0).match().path());
        Assertions.assertEquals("qavbpdqmj", model.rules().get(0).routes().get(0).match().pathSeparatedPrefix());
        Assertions.assertTrue(model.rules().get(0).routes().get(0).match().caseSensitive());
        Assertions.assertEquals("glgou", model.rules().get(0).routes().get(0).action().prefixRewrite());
        Assertions.assertEquals("lmjjyuo", model.rules().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HttpRouteConfigProperties model = new HttpRouteConfigProperties()
            .withCustomDomains(Arrays.asList(
                new CustomDomain().withName("d").withBindingType(BindingType.DISABLED).withCertificateId("nznthjtw"),
                new CustomDomain().withName("jaosrxuzv")
                    .withBindingType(BindingType.SNI_ENABLED)
                    .withCertificateId("tcqiosmg")))
            .withRules(
                Arrays
                    .asList(
                        new HttpRouteRule()
                            .withTargets(Arrays.asList(new HttpRouteTarget().withContainerApp("xqdlyrtltlapr")
                                .withRevision("zkatb")
                                .withLabel("mznnbsoqeqalarvl")))
                            .withRoutes(Arrays.asList(new HttpRoute()
                                .withMatch(new HttpRouteMatch().withPrefix("tgfebwln")
                                    .withPath("hyreeu")
                                    .withPathSeparatedPrefix("qavbpdqmj")
                                    .withCaseSensitive(true))
                                .withAction(new HttpRouteAction().withPrefixRewrite("glgou"))))
                            .withDescription("lmjjyuo")));
        model = BinaryData.fromObject(model).toObject(HttpRouteConfigProperties.class);
        Assertions.assertEquals("d", model.customDomains().get(0).name());
        Assertions.assertEquals(BindingType.DISABLED, model.customDomains().get(0).bindingType());
        Assertions.assertEquals("nznthjtw", model.customDomains().get(0).certificateId());
        Assertions.assertEquals("xqdlyrtltlapr", model.rules().get(0).targets().get(0).containerApp());
        Assertions.assertEquals("zkatb", model.rules().get(0).targets().get(0).revision());
        Assertions.assertEquals("mznnbsoqeqalarvl", model.rules().get(0).targets().get(0).label());
        Assertions.assertEquals("tgfebwln", model.rules().get(0).routes().get(0).match().prefix());
        Assertions.assertEquals("hyreeu", model.rules().get(0).routes().get(0).match().path());
        Assertions.assertEquals("qavbpdqmj", model.rules().get(0).routes().get(0).match().pathSeparatedPrefix());
        Assertions.assertTrue(model.rules().get(0).routes().get(0).match().caseSensitive());
        Assertions.assertEquals("glgou", model.rules().get(0).routes().get(0).action().prefixRewrite());
        Assertions.assertEquals("lmjjyuo", model.rules().get(0).description());
    }
}
