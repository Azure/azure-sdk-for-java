// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.models.HttpScaleRule;
import com.azure.resourcemanager.appcontainers.models.ScaleRuleAuth;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HttpScaleRuleTests {
    @Test
    public void testDeserialize() {
        HttpScaleRule model =
            BinaryData
                .fromString(
                    "{\"metadata\":{\"x\":\"zuf\",\"khazxkhnzbonlwn\":\"iqopidoamciod\",\"szzcmrvexztv\":\"oegokdwbwh\",\"gsfraoyzkoow\":\"t\"},\"auth\":[{\"secretRef\":\"guxawqaldsyuuxi\",\"triggerParameter\":\"rqf\"},{\"secretRef\":\"wyznkbyku\",\"triggerParameter\":\"pfhpagmhrskdsnfd\"},{\"secretRef\":\"oakgtdlmkkzev\",\"triggerParameter\":\"hewpusdsttwv\"},{\"secretRef\":\"vbbejdcng\",\"triggerParameter\":\"m\"}]}")
                .toObject(HttpScaleRule.class);
        Assertions.assertEquals("zuf", model.metadata().get("x"));
        Assertions.assertEquals("guxawqaldsyuuxi", model.auth().get(0).secretRef());
        Assertions.assertEquals("rqf", model.auth().get(0).triggerParameter());
    }

    @Test
    public void testSerialize() {
        HttpScaleRule model =
            new HttpScaleRule()
                .withMetadata(
                    mapOf(
                        "x",
                        "zuf",
                        "khazxkhnzbonlwn",
                        "iqopidoamciod",
                        "szzcmrvexztv",
                        "oegokdwbwh",
                        "gsfraoyzkoow",
                        "t"))
                .withAuth(
                    Arrays
                        .asList(
                            new ScaleRuleAuth().withSecretRef("guxawqaldsyuuxi").withTriggerParameter("rqf"),
                            new ScaleRuleAuth().withSecretRef("wyznkbyku").withTriggerParameter("pfhpagmhrskdsnfd"),
                            new ScaleRuleAuth().withSecretRef("oakgtdlmkkzev").withTriggerParameter("hewpusdsttwv"),
                            new ScaleRuleAuth().withSecretRef("vbbejdcng").withTriggerParameter("m")));
        model = BinaryData.fromObject(model).toObject(HttpScaleRule.class);
        Assertions.assertEquals("zuf", model.metadata().get("x"));
        Assertions.assertEquals("guxawqaldsyuuxi", model.auth().get(0).secretRef());
        Assertions.assertEquals("rqf", model.auth().get(0).triggerParameter());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
