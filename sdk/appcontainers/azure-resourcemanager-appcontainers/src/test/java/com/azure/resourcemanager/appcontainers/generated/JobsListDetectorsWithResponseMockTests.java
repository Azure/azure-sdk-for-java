// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsCollection;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class JobsListDetectorsWithResponseMockTests {
    @Test
    public void testListDetectorsWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"hdklmvetatl\",\"name\":\"fqoixwgiksbbvt\",\"description\":\"xrpo\",\"author\":\"phchgjtnhtukfaci\",\"category\":\"bfntumeezbxvq\",\"supportTopicList\":[{},{},{},{}],\"analysisTypes\":[\"wcgasgom\",\"mjzwx\"],\"type\":\"govsxpwwzt\",\"score\":71.73476},\"dataset\":[{},{},{},{}],\"status\":{\"message\":\"gfredmlscg\",\"statusId\":836747859},\"dataProviderMetadata\":{\"providerName\":\"na\",\"propertyBag\":[{},{},{}]}},\"id\":\"wazhpabaco\",\"name\":\"lyotg\",\"type\":\"wsxnsrqor\"},{\"properties\":{\"metadata\":{\"id\":\"mv\",\"name\":\"bxeetqujxcxxqn\",\"description\":\"qjkedwqurc\",\"author\":\"jmrvvxwjongz\",\"category\":\"hqqrsilcch\",\"supportTopicList\":[{},{}],\"analysisTypes\":[\"ansbvriaqg\",\"tojrulfucte\",\"rthcfjzh\",\"lyubqjrostvrjeq\"],\"type\":\"z\",\"score\":80.793976},\"dataset\":[{},{},{},{}],\"status\":{\"message\":\"rxalxrdha\",\"statusId\":1408690933},\"dataProviderMetadata\":{\"providerName\":\"sn\",\"propertyBag\":[{},{},{},{}]}},\"id\":\"a\",\"name\":\"iwkkvya\",\"type\":\"xkvvcs\"},{\"properties\":{\"metadata\":{\"id\":\"uvdjkqxetqm\",\"name\":\"ivrjjxnwxdc\",\"description\":\"ojxl\",\"author\":\"z\",\"category\":\"pgfquwzpwiibelwc\",\"supportTopicList\":[{},{}],\"analysisTypes\":[\"bpjxljtxbusqtb\"],\"type\":\"niuisdz\",\"score\":80.91173},\"dataset\":[{},{}],\"status\":{\"message\":\"agsecnadbuw\",\"statusId\":1642935539},\"dataProviderMetadata\":{\"providerName\":\"llmqiyne\",\"propertyBag\":[{},{}]}},\"id\":\"lnkkiiwvmtumxpym\",\"name\":\"jfuaxroqvqpilrgu\",\"type\":\"canlduwzorxs\"},{\"properties\":{\"metadata\":{\"id\":\"qk\",\"name\":\"ymxkqvfqepdx\",\"description\":\"tuubwyvpjb\",\"author\":\"cpj\",\"category\":\"uqgixex\",\"supportTopicList\":[{},{}],\"analysisTypes\":[\"wljavhuerkjddvrg\",\"iegftc\",\"biiftksdwgdnk\"],\"type\":\"gmwdh\",\"score\":87.856026},\"dataset\":[{},{}],\"status\":{\"message\":\"ldbglzout\",\"statusId\":1388435389},\"dataProviderMetadata\":{\"providerName\":\"zeka\",\"propertyBag\":[{},{}]}},\"id\":\"zg\",\"name\":\"norbjgmnzjot\",\"type\":\"mrxkhlobvv\"}],\"nextLink\":\"hvhd\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ContainerAppsApiManager manager = ContainerAppsApiManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        DiagnosticsCollection response
            = manager.jobs().listDetectorsWithResponse("w", "ae", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("wcgasgom", response.value().get(0).properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("gfredmlscg", response.value().get(0).properties().status().message());
        Assertions.assertEquals(836747859, response.value().get(0).properties().status().statusId());
        Assertions.assertEquals("na", response.value().get(0).properties().dataProviderMetadata().providerName());
    }
}
