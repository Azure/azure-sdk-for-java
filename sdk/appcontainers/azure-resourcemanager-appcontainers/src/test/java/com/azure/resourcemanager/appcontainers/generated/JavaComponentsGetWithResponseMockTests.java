// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.JavaComponent;
import com.azure.resourcemanager.appcontainers.models.JavaComponentType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class JavaComponentsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"componentType\":\"SpringCloudEureka\",\"provisioningState\":\"Canceled\",\"configurations\":[{\"propertyName\":\"sc\",\"value\":\"ydzjemexm\"},{\"propertyName\":\"kvmuwrxlniwmcp\",\"value\":\"rdlhvdvmiphbe\"},{\"propertyName\":\"qjzmhkdcl\",\"value\":\"roczfmuner\"}],\"serviceBinds\":[{\"name\":\"xzs\",\"serviceId\":\"zezbzu\"},{\"name\":\"dlevzskejcgw\",\"serviceId\":\"gqkstyecupyu\"},{\"name\":\"p\",\"serviceId\":\"davsjcfmazpz\"},{\"name\":\"wuzvcmcokxize\",\"serviceId\":\"vfrjwu\"}]},\"id\":\"o\",\"name\":\"zvajbvbnkrdem\",\"type\":\"idackzidgzwdyd\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ContainerAppsApiManager manager = ContainerAppsApiManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        JavaComponent response = manager.javaComponents()
            .getWithResponse("zqazvb", "arkptgongruatsyi", "sjqhenigbeqngu", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(JavaComponentType.SPRING_CLOUD_EUREKA, response.componentType());
        Assertions.assertEquals("sc", response.configurations().get(0).propertyName());
        Assertions.assertEquals("ydzjemexm", response.configurations().get(0).value());
        Assertions.assertEquals("xzs", response.serviceBinds().get(0).name());
        Assertions.assertEquals("zezbzu", response.serviceBinds().get(0).serviceId());
    }
}
