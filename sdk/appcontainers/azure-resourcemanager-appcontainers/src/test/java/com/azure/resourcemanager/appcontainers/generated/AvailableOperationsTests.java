// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.OperationDetailInner;
import com.azure.resourcemanager.appcontainers.models.AvailableOperations;
import com.azure.resourcemanager.appcontainers.models.OperationDisplay;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AvailableOperationsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvailableOperations model = BinaryData.fromString(
            "{\"value\":[{\"name\":\"hujswtwkozzwcul\",\"isDataAction\":true,\"display\":{\"provider\":\"fajnjwltlwtjjguk\",\"resource\":\"lhsnvkcdmx\",\"operation\":\"poaimlnwiaaomyl\",\"description\":\"azul\"},\"origin\":\"ethwwnpjhlfz\"}],\"nextLink\":\"pchwa\"}")
            .toObject(AvailableOperations.class);
        Assertions.assertEquals("hujswtwkozzwcul", model.value().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).isDataAction());
        Assertions.assertEquals("fajnjwltlwtjjguk", model.value().get(0).display().provider());
        Assertions.assertEquals("lhsnvkcdmx", model.value().get(0).display().resource());
        Assertions.assertEquals("poaimlnwiaaomyl", model.value().get(0).display().operation());
        Assertions.assertEquals("azul", model.value().get(0).display().description());
        Assertions.assertEquals("ethwwnpjhlfz", model.value().get(0).origin());
        Assertions.assertEquals("pchwa", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvailableOperations model
            = new AvailableOperations().withValue(Arrays.asList(new OperationDetailInner().withName("hujswtwkozzwcul")
                .withIsDataAction(true)
                .withDisplay(new OperationDisplay().withProvider("fajnjwltlwtjjguk")
                    .withResource("lhsnvkcdmx")
                    .withOperation("poaimlnwiaaomyl")
                    .withDescription("azul"))
                .withOrigin("ethwwnpjhlfz"))).withNextLink("pchwa");
        model = BinaryData.fromObject(model).toObject(AvailableOperations.class);
        Assertions.assertEquals("hujswtwkozzwcul", model.value().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).isDataAction());
        Assertions.assertEquals("fajnjwltlwtjjguk", model.value().get(0).display().provider());
        Assertions.assertEquals("lhsnvkcdmx", model.value().get(0).display().resource());
        Assertions.assertEquals("poaimlnwiaaomyl", model.value().get(0).display().operation());
        Assertions.assertEquals("azul", model.value().get(0).display().description());
        Assertions.assertEquals("ethwwnpjhlfz", model.value().get(0).origin());
        Assertions.assertEquals("pchwa", model.nextLink());
    }
}
