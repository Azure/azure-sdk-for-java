// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.BuilderResourceInner;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistry;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BuilderResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BuilderResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"environmentId\":\"pabgyeps\",\"containerRegistries\":[{\"containerRegistryServer\":\"azqugxywpmueefj\",\"identityResourceId\":\"wfqkquj\"},{\"containerRegistryServer\":\"dsuyonobgla\",\"identityResourceId\":\"cq\"},{\"containerRegistryServer\":\"tcc\",\"identityResourceId\":\"g\"},{\"containerRegistryServer\":\"udxytlmoyrx\",\"identityResourceId\":\"wfudwpzntxhdzhl\"}]},\"identity\":{\"principalId\":\"bd41f6f4-8b7d-4714-9b62-b69e27ce3d83\",\"tenantId\":\"2e5bc8e1-ade5-4925-ab3f-24c3223febff\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"lhrxsbkyvpyc\":{\"principalId\":\"e6aeffea-192a-4432-8f6c-bedb93b4b924\",\"clientId\":\"fd05ece6-e853-4664-a454-56b6b0da432c\"},\"z\":{\"principalId\":\"52994e43-356a-465c-961d-a09b4abe67b7\",\"clientId\":\"46f68667-a06b-41ed-b50d-dad559c5f181\"},\"kafkuwbcrnwbm\":{\"principalId\":\"a4a025eb-a119-40e0-82c1-1806f0ba7530\",\"clientId\":\"d9ce622b-3ec9-48f1-a456-af90ad8397d0\"}}},\"location\":\"hseyvju\",\"tags\":{\"kdeemaofmxagkvtm\":\"slhs\",\"ahaquh\":\"lmqkrhahvlj\",\"aex\":\"dhmdua\"},\"id\":\"pvfadmwsrcr\",\"name\":\"vxpvgomz\",\"type\":\"fmisg\"}")
            .toObject(BuilderResourceInner.class);
        Assertions.assertEquals("hseyvju", model.location());
        Assertions.assertEquals("slhs", model.tags().get("kdeemaofmxagkvtm"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("pabgyeps", model.environmentId());
        Assertions.assertEquals("azqugxywpmueefj", model.containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("wfqkquj", model.containerRegistries().get(0).identityResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BuilderResourceInner model = new BuilderResourceInner().withLocation("hseyvju")
            .withTags(mapOf("kdeemaofmxagkvtm", "slhs", "ahaquh", "lmqkrhahvlj", "aex", "dhmdua"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("lhrxsbkyvpyc", new UserAssignedIdentity(), "z",
                    new UserAssignedIdentity(), "kafkuwbcrnwbm", new UserAssignedIdentity())))
            .withEnvironmentId("pabgyeps")
            .withContainerRegistries(Arrays.asList(
                new ContainerRegistry().withContainerRegistryServer("azqugxywpmueefj")
                    .withIdentityResourceId("wfqkquj"),
                new ContainerRegistry().withContainerRegistryServer("dsuyonobgla").withIdentityResourceId("cq"),
                new ContainerRegistry().withContainerRegistryServer("tcc").withIdentityResourceId("g"),
                new ContainerRegistry().withContainerRegistryServer("udxytlmoyrx")
                    .withIdentityResourceId("wfudwpzntxhdzhl")));
        model = BinaryData.fromObject(model).toObject(BuilderResourceInner.class);
        Assertions.assertEquals("hseyvju", model.location());
        Assertions.assertEquals("slhs", model.tags().get("kdeemaofmxagkvtm"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("pabgyeps", model.environmentId());
        Assertions.assertEquals("azqugxywpmueefj", model.containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("wfqkquj", model.containerRegistries().get(0).identityResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
