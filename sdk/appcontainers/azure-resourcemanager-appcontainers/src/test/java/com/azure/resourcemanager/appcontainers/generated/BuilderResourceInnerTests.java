// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.BuilderResourceInner;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistry;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BuilderResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BuilderResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleting\",\"environmentId\":\"kzywbiex\",\"containerRegistries\":[{\"containerRegistryServer\":\"yueaxibxujwb\",\"identityResourceId\":\"qwalmuzyoxaepd\"},{\"containerRegistryServer\":\"zjancuxr\",\"identityResourceId\":\"d\"},{\"containerRegistryServer\":\"bavxbniwdjswzt\",\"identityResourceId\":\"dbpgnxytxhp\"},{\"containerRegistryServer\":\"xbzpfzab\",\"identityResourceId\":\"lcuhxwtctyqiklb\"}]},\"identity\":{\"principalId\":\"11ce5dd3-3355-4e01-85d7-15a3c0b48a12\",\"tenantId\":\"1e44fa63-3b4a-4982-a729-ace3958efcd9\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"vgyuguos\":{\"principalId\":\"0839b9ff-81ac-4ede-8dee-f067587ffa69\",\"clientId\":\"fc6edf30-08b3-46ab-8b85-bd6c0c615cd2\"},\"fssxqukkfplg\":{\"principalId\":\"eac29657-46e0-4b6a-a431-86ef2bea7454\",\"clientId\":\"622149a9-aab8-48a8-b91c-2a89f293d4fb\"},\"xnkjzkdesl\":{\"principalId\":\"7d34e1be-1f20-4fee-b691-c14f4c4bfeff\",\"clientId\":\"381584d8-2454-49e3-849e-8ed084a14f8d\"}}},\"location\":\"lopwiyig\",\"tags\":{\"upedeojnabckhs\":\"kdwzbaiuebbaumny\",\"ie\":\"txp\"},\"id\":\"tfhvpesapskrdqmh\",\"name\":\"jdhtldwkyzxu\",\"type\":\"tkncwsc\"}")
            .toObject(BuilderResourceInner.class);
        Assertions.assertEquals("lopwiyig", model.location());
        Assertions.assertEquals("kdwzbaiuebbaumny", model.tags().get("upedeojnabckhs"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("kzywbiex", model.environmentId());
        Assertions.assertEquals("yueaxibxujwb", model.containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("qwalmuzyoxaepd", model.containerRegistries().get(0).identityResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BuilderResourceInner model = new BuilderResourceInner().withLocation("lopwiyig")
            .withTags(mapOf("upedeojnabckhs", "kdwzbaiuebbaumny", "ie", "txp"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("vgyuguos", new UserAssignedIdentity(), "fssxqukkfplg",
                    new UserAssignedIdentity(), "xnkjzkdesl", new UserAssignedIdentity())))
            .withEnvironmentId("kzywbiex")
            .withContainerRegistries(Arrays.asList(
                new ContainerRegistry().withContainerRegistryServer("yueaxibxujwb")
                    .withIdentityResourceId("qwalmuzyoxaepd"),
                new ContainerRegistry().withContainerRegistryServer("zjancuxr").withIdentityResourceId("d"),
                new ContainerRegistry().withContainerRegistryServer("bavxbniwdjswzt")
                    .withIdentityResourceId("dbpgnxytxhp"),
                new ContainerRegistry().withContainerRegistryServer("xbzpfzab")
                    .withIdentityResourceId("lcuhxwtctyqiklb")));
        model = BinaryData.fromObject(model).toObject(BuilderResourceInner.class);
        Assertions.assertEquals("lopwiyig", model.location());
        Assertions.assertEquals("kdwzbaiuebbaumny", model.tags().get("upedeojnabckhs"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("kzywbiex", model.environmentId());
        Assertions.assertEquals("yueaxibxujwb", model.containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("qwalmuzyoxaepd", model.containerRegistries().get(0).identityResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
