// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.BuilderResourceInner;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistry;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BuilderResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BuilderResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"environmentId\":\"faxkffeii\",\"containerRegistries\":[{\"containerRegistryServer\":\"vmezy\",\"identityResourceId\":\"shxmzsbbzoggigrx\"},{\"containerRegistryServer\":\"burvjxxjnspy\",\"identityResourceId\":\"ptkoenkoukn\"},{\"containerRegistryServer\":\"udwtiukbl\",\"identityResourceId\":\"ngkpocipazy\"},{\"containerRegistryServer\":\"o\",\"identityResourceId\":\"gukgjnpiucgygevq\"}]},\"identity\":{\"principalId\":\"7f17d9d6-cba9-4d4f-acb8-d018ff01c2c5\",\"tenantId\":\"afeda434-dbeb-4428-92f8-c2a1a73daa86\",\"type\":\"None\",\"userAssignedIdentities\":{\"izcdrqjsd\":{\"principalId\":\"61764210-7622-45bb-99c6-53c3d86a9840\",\"clientId\":\"68c589dd-b08c-4194-abba-519a8d32be8d\"},\"nfyhx\":{\"principalId\":\"da34ddc1-ca37-4841-b0ab-c048ab8e92d9\",\"clientId\":\"8d4991ee-e4d5-41c2-ad4c-1d71b25f1da7\"}}},\"location\":\"oejzi\",\"tags\":{\"tgzfbishcbkh\":\"fsj\",\"alpbuxwgipwhon\":\"jdeyeamdpha\",\"kix\":\"wkgshwa\",\"eputtmrywnuzoqf\":\"bin\"},\"id\":\"iyqzrnk\",\"name\":\"qvyxlwhzlsicoho\",\"type\":\"qnwvlrya\"}")
            .toObject(BuilderResourceInner.class);
        Assertions.assertEquals("oejzi", model.location());
        Assertions.assertEquals("fsj", model.tags().get("tgzfbishcbkh"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("faxkffeii", model.environmentId());
        Assertions.assertEquals("vmezy", model.containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("shxmzsbbzoggigrx", model.containerRegistries().get(0).identityResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BuilderResourceInner model = new BuilderResourceInner().withLocation("oejzi")
            .withTags(mapOf("tgzfbishcbkh", "fsj", "alpbuxwgipwhon", "jdeyeamdpha", "kix", "wkgshwa", "eputtmrywnuzoqf",
                "bin"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("izcdrqjsd", new UserAssignedIdentity(), "nfyhx", new UserAssignedIdentity())))
            .withEnvironmentId("faxkffeii")
            .withContainerRegistries(Arrays.asList(
                new ContainerRegistry().withContainerRegistryServer("vmezy").withIdentityResourceId("shxmzsbbzoggigrx"),
                new ContainerRegistry().withContainerRegistryServer("burvjxxjnspy")
                    .withIdentityResourceId("ptkoenkoukn"),
                new ContainerRegistry().withContainerRegistryServer("udwtiukbl").withIdentityResourceId("ngkpocipazy"),
                new ContainerRegistry().withContainerRegistryServer("o").withIdentityResourceId("gukgjnpiucgygevq")));
        model = BinaryData.fromObject(model).toObject(BuilderResourceInner.class);
        Assertions.assertEquals("oejzi", model.location());
        Assertions.assertEquals("fsj", model.tags().get("tgzfbishcbkh"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("faxkffeii", model.environmentId());
        Assertions.assertEquals("vmezy", model.containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("shxmzsbbzoggigrx", model.containerRegistries().get(0).identityResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
