// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DaprComponentResiliencyPoliciesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"inboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":2076453309,\"retryBackOff\":{\"initialDelayInMilliseconds\":1657174871,\"maxIntervalInMilliseconds\":794720158}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":1967704414},\"circuitBreakerPolicy\":{\"consecutiveErrors\":1389517305,\"timeoutInSeconds\":863455979,\"intervalInSeconds\":566530184}},\"outboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":976670893,\"retryBackOff\":{\"initialDelayInMilliseconds\":1193866140,\"maxIntervalInMilliseconds\":1607656457}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":94736197},\"circuitBreakerPolicy\":{\"consecutiveErrors\":1623309241,\"timeoutInSeconds\":2078820680,\"intervalInSeconds\":1996610285}}},\"id\":\"nsffetp\",\"name\":\"mi\",\"type\":\"wewzlscgsme\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DaprComponentResiliencyPolicy response = manager.daprComponentResiliencyPolicies()
            .getWithResponse("yqsokknpugzjwdiz", "rjixiujzkcsexg", "rswksykk", "xk", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(2076453309, response.inboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(1657174871,
            response.inboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(794720158,
            response.inboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(1967704414, response.inboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(1389517305, response.inboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(863455979, response.inboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(566530184, response.inboundPolicy().circuitBreakerPolicy().intervalInSeconds());
        Assertions.assertEquals(976670893, response.outboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(1193866140,
            response.outboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(1607656457,
            response.outboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(94736197, response.outboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(1623309241, response.outboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(2078820680, response.outboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(1996610285, response.outboundPolicy().circuitBreakerPolicy().intervalInSeconds());
    }
}
