// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprComponentResiliencyPolicyInner;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPoliciesCollection;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicyTimeoutPolicyConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DaprComponentResiliencyPoliciesCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprComponentResiliencyPoliciesCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"inboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":524957188,\"retryBackOff\":{}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":1668703834},\"circuitBreakerPolicy\":{\"consecutiveErrors\":2091511430,\"timeoutInSeconds\":653682799,\"intervalInSeconds\":1265921223}},\"outboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":236199125,\"retryBackOff\":{}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":570901557},\"circuitBreakerPolicy\":{\"consecutiveErrors\":991430794,\"timeoutInSeconds\":1327259513,\"intervalInSeconds\":989850966}}},\"id\":\"rem\",\"name\":\"hllizhceumoq\",\"type\":\"dkadppyibn\"}],\"nextLink\":\"ladywrxwhyd\"}")
            .toObject(DaprComponentResiliencyPoliciesCollection.class);
        Assertions.assertEquals(524957188, model.value().get(0).inboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(1668703834,
            model.value().get(0).inboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(2091511430,
            model.value().get(0).inboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(653682799,
            model.value().get(0).inboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(1265921223,
            model.value().get(0).inboundPolicy().circuitBreakerPolicy().intervalInSeconds());
        Assertions.assertEquals(236199125, model.value().get(0).outboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(570901557,
            model.value().get(0).outboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(991430794,
            model.value().get(0).outboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(1327259513,
            model.value().get(0).outboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(989850966,
            model.value().get(0).outboundPolicy().circuitBreakerPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprComponentResiliencyPoliciesCollection model = new DaprComponentResiliencyPoliciesCollection()
            .withValue(Arrays.asList(new DaprComponentResiliencyPolicyInner()
                .withInboundPolicy(new DaprComponentResiliencyPolicyConfiguration()
                    .withHttpRetryPolicy(
                        new DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration().withMaxRetries(524957188)
                            .withRetryBackOff(new DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration()))
                    .withTimeoutPolicy(new DaprComponentResiliencyPolicyTimeoutPolicyConfiguration()
                        .withResponseTimeoutInSeconds(1668703834))
                    .withCircuitBreakerPolicy(new DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration()
                        .withConsecutiveErrors(2091511430)
                        .withTimeoutInSeconds(653682799)
                        .withIntervalInSeconds(1265921223)))
                .withOutboundPolicy(new DaprComponentResiliencyPolicyConfiguration()
                    .withHttpRetryPolicy(
                        new DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration().withMaxRetries(236199125)
                            .withRetryBackOff(new DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration()))
                    .withTimeoutPolicy(new DaprComponentResiliencyPolicyTimeoutPolicyConfiguration()
                        .withResponseTimeoutInSeconds(570901557))
                    .withCircuitBreakerPolicy(new DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration()
                        .withConsecutiveErrors(991430794)
                        .withTimeoutInSeconds(1327259513)
                        .withIntervalInSeconds(989850966)))));
        model = BinaryData.fromObject(model).toObject(DaprComponentResiliencyPoliciesCollection.class);
        Assertions.assertEquals(524957188, model.value().get(0).inboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(1668703834,
            model.value().get(0).inboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(2091511430,
            model.value().get(0).inboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(653682799,
            model.value().get(0).inboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(1265921223,
            model.value().get(0).inboundPolicy().circuitBreakerPolicy().intervalInSeconds());
        Assertions.assertEquals(236199125, model.value().get(0).outboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(570901557,
            model.value().get(0).outboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(991430794,
            model.value().get(0).outboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(1327259513,
            model.value().get(0).outboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(989850966,
            model.value().get(0).outboundPolicy().circuitBreakerPolicy().intervalInSeconds());
    }
}
