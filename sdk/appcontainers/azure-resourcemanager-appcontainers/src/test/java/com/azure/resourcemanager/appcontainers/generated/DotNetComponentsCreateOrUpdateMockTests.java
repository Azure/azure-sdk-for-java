// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DotNetComponent;
import com.azure.resourcemanager.appcontainers.models.DotNetComponentConfigurationProperty;
import com.azure.resourcemanager.appcontainers.models.DotNetComponentServiceBind;
import com.azure.resourcemanager.appcontainers.models.DotNetComponentType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DotNetComponentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"componentType\":\"AspireDashboard\",\"provisioningState\":\"Succeeded\",\"configurations\":[{\"propertyName\":\"qbbewfcuqfpyyxm\",\"value\":\"mtmvwituwey\"}],\"serviceBinds\":[{\"name\":\"cybwfuppoxprcm\",\"serviceId\":\"uujxdii\"},{\"name\":\"oxrezsvavlrxik\",\"serviceId\":\"oywlunpipcwyb\"},{\"name\":\"fncn\",\"serviceId\":\"tpf\"}]},\"id\":\"aebwfwhxorpwa\",\"name\":\"tzwugexojfccy\",\"type\":\"h\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ContainerAppsApiManager manager = ContainerAppsApiManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        DotNetComponent response = manager.dotNetComponents().define("bibiwks")
            .withExistingManagedEnvironment("ajqzj", "alec").withComponentType(DotNetComponentType.ASPIRE_DASHBOARD)
            .withConfigurations(Arrays.asList(
                new DotNetComponentConfigurationProperty().withPropertyName("zvoikvntwczf").withValue("ushlcxpblalh"),
                new DotNetComponentConfigurationProperty().withPropertyName("zpfkis").withValue("idqzsaaoqdsgpto"),
                new DotNetComponentConfigurationProperty().withPropertyName("jq").withValue("afcnlrtb"),
                new DotNetComponentConfigurationProperty().withPropertyName("jzzca").withValue("jolb")))
            .withServiceBinds(
                Arrays.asList(new DotNetComponentServiceBind().withName("twieopexelxqdwr").withServiceId("yil"),
                    new DotNetComponentServiceBind().withName("ibkgxyxyau").withServiceId("eddobmcnltm"),
                    new DotNetComponentServiceBind().withName("tkujsqycm").withServiceId("xfabl"),
                    new DotNetComponentServiceBind().withName("pwbmwhria").withServiceId("wrycgnwpl")))
            .create();

        Assertions.assertEquals(DotNetComponentType.ASPIRE_DASHBOARD, response.componentType());
        Assertions.assertEquals("qbbewfcuqfpyyxm", response.configurations().get(0).propertyName());
        Assertions.assertEquals("mtmvwituwey", response.configurations().get(0).value());
        Assertions.assertEquals("cybwfuppoxprcm", response.serviceBinds().get(0).name());
        Assertions.assertEquals("uujxdii", response.serviceBinds().get(0).serviceId());
    }
}
