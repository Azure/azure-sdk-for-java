// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DotNetComponent;
import com.azure.resourcemanager.appcontainers.models.DotNetComponentConfigurationProperty;
import com.azure.resourcemanager.appcontainers.models.DotNetComponentServiceBind;
import com.azure.resourcemanager.appcontainers.models.DotNetComponentType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DotNetComponentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"componentType\":\"AspireDashboard\",\"provisioningState\":\"Succeeded\",\"configurations\":[{\"propertyName\":\"wgzygbaduvecovsd\",\"value\":\"zrtdbakr\"}],\"serviceBinds\":[{\"name\":\"fvppkeqsifj\",\"serviceId\":\"lng\"}]},\"id\":\"nhr\",\"name\":\"ombcdtajdopggo\",\"type\":\"wj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DotNetComponent response = manager.dotNetComponents()
            .define("zcntogffjwajnrtw")
            .withExistingManagedEnvironment("fvezefk", "kqtwqlepjjzkcasf")
            .withComponentType(DotNetComponentType.ASPIRE_DASHBOARD)
            .withConfigurations(Arrays.asList(
                new DotNetComponentConfigurationProperty().withPropertyName("awostfzknhr").withValue("jqncfvdscnh"),
                new DotNetComponentConfigurationProperty().withPropertyName("vwfnqqwypvn").withValue("wbgodtggrssg"),
                new DotNetComponentConfigurationProperty().withPropertyName("fk").withValue("njm")))
            .withServiceBinds(Arrays.asList(new DotNetComponentServiceBind().withName("ecvztsc").withServiceId("mu"),
                new DotNetComponentServiceBind().withName("ictdscnkzzo").withServiceId("rddclzeqozrehlb"),
                new DotNetComponentServiceBind().withName("ixbnj").withServiceId("vzyue"),
                new DotNetComponentServiceBind().withName("z").withServiceId("ynp")))
            .create();

        Assertions.assertEquals(DotNetComponentType.ASPIRE_DASHBOARD, response.componentType());
        Assertions.assertEquals("wgzygbaduvecovsd", response.configurations().get(0).propertyName());
        Assertions.assertEquals("zrtdbakr", response.configurations().get(0).value());
        Assertions.assertEquals("fvppkeqsifj", response.serviceBinds().get(0).name());
        Assertions.assertEquals("lng", response.serviceBinds().get(0).serviceId());
    }
}
