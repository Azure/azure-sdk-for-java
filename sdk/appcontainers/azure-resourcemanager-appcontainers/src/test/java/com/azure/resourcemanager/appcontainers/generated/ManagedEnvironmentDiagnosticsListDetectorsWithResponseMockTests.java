// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsCollection;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ManagedEnvironmentDiagnosticsListDetectorsWithResponseMockTests {
    @Test
    public void testListDetectorsWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"qpmbhyqg\",\"name\":\"rmmttjxop\",\"description\":\"erhsmvgohtw\",\"author\":\"qilrixysfn\",\"category\":\"sqywwwmhkru\",\"supportTopicList\":[{},{},{}],\"analysisTypes\":[\"ympmlqoin\",\"zduewihapfjii\"],\"type\":\"jdiq\",\"score\":12.614834},\"dataset\":[{}],\"status\":{\"message\":\"cl\",\"statusId\":1765036901},\"dataProviderMetadata\":{\"providerName\":\"sbw\",\"propertyBag\":[{},{}]}},\"id\":\"bv\",\"name\":\"ipbwxgooo\",\"type\":\"zp\"},{\"properties\":{\"metadata\":{\"id\":\"s\",\"name\":\"knpdgzigjsu\",\"description\":\"whgsaodkww\",\"author\":\"afoctohz\",\"category\":\"quvwsxbgn\",\"supportTopicList\":[{},{},{},{}],\"analysisTypes\":[\"qchoadhrsxqv\",\"vspabdsrgfajgl\",\"rsubklrxhjnl\"],\"type\":\"etjdvqydieqqkwa\",\"score\":70.96507},\"dataset\":[{}],\"status\":{\"message\":\"zxoebwgjxb\",\"statusId\":315596375},\"dataProviderMetadata\":{\"providerName\":\"aupwtzvpaklo\",\"propertyBag\":[{},{},{},{}]}},\"id\":\"zrpejpl\",\"name\":\"s\",\"type\":\"nbtttkgsuxu\"},{\"properties\":{\"metadata\":{\"id\":\"gkp\",\"name\":\"boy\",\"description\":\"ebhuhkslgwlokhu\",\"author\":\"ijyzcqypzqzufgsy\",\"category\":\"jyvdwtfxptpqayam\",\"supportTopicList\":[{}],\"analysisTypes\":[\"ybmx\"],\"type\":\"xocuullojkpoyhgw\",\"score\":2.738905},\"dataset\":[{},{},{},{}],\"status\":{\"message\":\"dljzgdyrc\",\"statusId\":1586962716},\"dataProviderMetadata\":{\"providerName\":\"gzlrqhbj\",\"propertyBag\":[{},{},{},{}]}},\"id\":\"dxwbsfpyxxtj\",\"name\":\"flecominxojjl\",\"type\":\"xxdhilzzdzzqjm\"},{\"properties\":{\"metadata\":{\"id\":\"y\",\"name\":\"ribqlotokh\",\"description\":\"wtaznkcqw\",\"author\":\"wjyofgwhnkbtl\",\"category\":\"jssmctsnldkpwo\",\"supportTopicList\":[{},{},{}],\"analysisTypes\":[\"bxbteogfgfiijry\",\"wlefksxqceazfpxg\",\"m\",\"vzvluyq\"],\"type\":\"ios\",\"score\":85.90183},\"dataset\":[{},{},{}],\"status\":{\"message\":\"fppuacvfye\",\"statusId\":970206060},\"dataProviderMetadata\":{\"providerName\":\"x\",\"propertyBag\":[{},{},{}]}},\"id\":\"soy\",\"name\":\"hpvtyqftteh\",\"type\":\"pboujs\"}],\"nextLink\":\"fvvdshxcdedsue\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ContainerAppsApiManager manager = ContainerAppsApiManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        DiagnosticsCollection response = manager.managedEnvironmentDiagnostics()
            .listDetectorsWithResponse("sqwudohzilfmnli", "psimsf", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("ympmlqoin", response.value().get(0).properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("cl", response.value().get(0).properties().status().message());
        Assertions.assertEquals(1765036901, response.value().get(0).properties().status().statusId());
        Assertions.assertEquals("sbw", response.value().get(0).properties().dataProviderMetadata().providerName());
    }
}
