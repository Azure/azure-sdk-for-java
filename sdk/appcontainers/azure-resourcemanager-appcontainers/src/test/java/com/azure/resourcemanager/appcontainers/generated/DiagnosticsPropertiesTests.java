// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataProviderMetadata;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataProviderMetadataPropertyBagItem;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataTableResponseColumn;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataTableResponseObject;
import com.azure.resourcemanager.appcontainers.models.DiagnosticRendering;
import com.azure.resourcemanager.appcontainers.models.DiagnosticSupportTopic;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsDataApiResponse;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsDefinition;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsProperties;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticsPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticsProperties model =
            BinaryData
                .fromString(
                    "{\"metadata\":{\"id\":\"v\",\"name\":\"zgemjdftuljlt\",\"description\":\"ceamtm\",\"author\":\"u\",\"category\":\"ejwcwwqiok\",\"supportTopicList\":[{\"id\":\"mojmsvpkjprvkw\",\"pesId\":\"zqljyxgtczh\"}],\"analysisTypes\":[\"bsdshmkxmaehvbbx\",\"ripltf\"],\"type\":\"tbaxk\",\"score\":35.67025},\"dataset\":[{\"table\":{\"tableName\":\"pyklyhpluodpvru\",\"columns\":[{\"columnName\":\"zibt\",\"dataType\":\"stgktst\",\"columnType\":\"xeclzedqbcvhzlhp\"}],\"rows\":[\"dataqkdlw\",\"dataqfbumlkxtrqjf\",\"datamlmbtxhwgfwsrta\"]},\"renderingProperties\":{\"type\":337783528,\"title\":\"brhu\",\"description\":\"kh\",\"isVisible\":false}}],\"status\":{\"message\":\"ookk\",\"statusId\":870237510},\"dataProviderMetadata\":{\"providerName\":\"vleo\",\"propertyBag\":[{\"name\":\"uiqtqzfavy\",\"value\":\"qqybarye\"}]}}")
                .toObject(DiagnosticsProperties.class);
        Assertions.assertEquals("bsdshmkxmaehvbbx", model.metadata().analysisTypes().get(0));
        Assertions.assertEquals("pyklyhpluodpvru", model.dataset().get(0).table().tableName());
        Assertions.assertEquals("zibt", model.dataset().get(0).table().columns().get(0).columnName());
        Assertions.assertEquals("stgktst", model.dataset().get(0).table().columns().get(0).dataType());
        Assertions.assertEquals("xeclzedqbcvhzlhp", model.dataset().get(0).table().columns().get(0).columnType());
        Assertions.assertEquals(337783528, model.dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("brhu", model.dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("kh", model.dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(false, model.dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("ookk", model.status().message());
        Assertions.assertEquals(870237510, model.status().statusId());
        Assertions.assertEquals("vleo", model.dataProviderMetadata().providerName());
        Assertions.assertEquals("uiqtqzfavy", model.dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("qqybarye", model.dataProviderMetadata().propertyBag().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticsProperties model =
            new DiagnosticsProperties()
                .withMetadata(
                    new DiagnosticsDefinition()
                        .withSupportTopicList(Arrays.asList(new DiagnosticSupportTopic()))
                        .withAnalysisTypes(Arrays.asList("bsdshmkxmaehvbbx", "ripltf")))
                .withDataset(
                    Arrays
                        .asList(
                            new DiagnosticsDataApiResponse()
                                .withTable(
                                    new DiagnosticDataTableResponseObject()
                                        .withTableName("pyklyhpluodpvru")
                                        .withColumns(
                                            Arrays
                                                .asList(
                                                    new DiagnosticDataTableResponseColumn()
                                                        .withColumnName("zibt")
                                                        .withDataType("stgktst")
                                                        .withColumnType("xeclzedqbcvhzlhp")))
                                        .withRows(
                                            Arrays.asList("dataqkdlw", "dataqfbumlkxtrqjf", "datamlmbtxhwgfwsrta")))
                                .withRenderingProperties(
                                    new DiagnosticRendering()
                                        .withType(337783528)
                                        .withTitle("brhu")
                                        .withDescription("kh")
                                        .withIsVisible(false))))
                .withStatus(new DiagnosticsStatus().withMessage("ookk").withStatusId(870237510))
                .withDataProviderMetadata(
                    new DiagnosticDataProviderMetadata()
                        .withProviderName("vleo")
                        .withPropertyBag(
                            Arrays
                                .asList(
                                    new DiagnosticDataProviderMetadataPropertyBagItem()
                                        .withName("uiqtqzfavy")
                                        .withValue("qqybarye"))));
        model = BinaryData.fromObject(model).toObject(DiagnosticsProperties.class);
        Assertions.assertEquals("bsdshmkxmaehvbbx", model.metadata().analysisTypes().get(0));
        Assertions.assertEquals("pyklyhpluodpvru", model.dataset().get(0).table().tableName());
        Assertions.assertEquals("zibt", model.dataset().get(0).table().columns().get(0).columnName());
        Assertions.assertEquals("stgktst", model.dataset().get(0).table().columns().get(0).dataType());
        Assertions.assertEquals("xeclzedqbcvhzlhp", model.dataset().get(0).table().columns().get(0).columnType());
        Assertions.assertEquals(337783528, model.dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("brhu", model.dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("kh", model.dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(false, model.dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("ookk", model.status().message());
        Assertions.assertEquals(870237510, model.status().statusId());
        Assertions.assertEquals("vleo", model.dataProviderMetadata().providerName());
        Assertions.assertEquals("uiqtqzfavy", model.dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("qqybarye", model.dataProviderMetadata().propertyBag().get(0).value());
    }
}
