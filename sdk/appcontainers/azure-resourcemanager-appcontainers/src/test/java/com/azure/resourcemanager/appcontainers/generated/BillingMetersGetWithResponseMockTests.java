// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.BillingMeterCollection;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BillingMetersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"id\":\"be\",\"name\":\"gis\",\"type\":\"wnykdidjchlrmpw\",\"location\":\"fldseacdhz\",\"properties\":{\"category\":\"brfgdrwji\",\"meterType\":\"whfjsrwqrxe\",\"displayName\":\"gcwvrrmdqntycna\"}},{\"id\":\"hvmaxgnuyeamcmhu\",\"name\":\"jecehokwc\",\"type\":\"twloesqr\",\"location\":\"rbnyrukoilacidu\",\"properties\":{\"category\":\"e\",\"meterType\":\"jlhwyxpzruzyt\",\"displayName\":\"kkwhbgxvellvulnx\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingMeterCollection response
            = manager.billingMeters().getWithResponse("eboywhczzqrhm", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("fldseacdhz", response.value().get(0).location());
        Assertions.assertEquals("brfgdrwji", response.value().get(0).properties().category());
        Assertions.assertEquals("whfjsrwqrxe", response.value().get(0).properties().meterType());
        Assertions.assertEquals("gcwvrrmdqntycna", response.value().get(0).properties().displayName());
    }
}
