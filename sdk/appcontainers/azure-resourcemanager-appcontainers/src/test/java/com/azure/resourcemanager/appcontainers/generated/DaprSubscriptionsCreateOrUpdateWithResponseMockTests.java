// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DaprSubscription;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DaprSubscriptionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"pubsubName\":\"wmwqoguflte\",\"topic\":\"negefz\",\"deadLetterTopic\":\"njtqbg\",\"routes\":{\"rules\":[{\"match\":\"hnvxwtd\",\"path\":\"cbjdbtqy\"}],\"default\":\"xu\"},\"scopes\":[\"ujqgbbjvo\",\"oawh\",\"js\"],\"metadata\":{\"d\":\"sloygsa\",\"e\":\"d\",\"zvzuat\":\"onsdunr\"},\"bulkSubscribe\":{\"enabled\":true,\"maxMessagesCount\":640916032,\"maxAwaitDurationMs\":1675511910}},\"id\":\"vfdbqskgqjbvitpt\",\"name\":\"vs\",\"type\":\"favdhpiwrm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DaprSubscription response = manager.daprSubscriptions()
            .define("fjajvkyxmm")
            .withExistingManagedEnvironment("owbebsnbwut", "vuwmsumustihtgr")
            .withPubsubName("vogt")
            .withTopic("rjenn")
            .withDeadLetterTopic("vaeuwqdwxhh")
            .withRoutes(new DaprSubscriptionRoutes()
                .withRules(Arrays.asList(new DaprSubscriptionRouteRule().withMatch("hfxnrpdhewokyqs").withPath("xfsyw"),
                    new DaprSubscriptionRouteRule().withMatch("hqbtodjfyxbvkv").withPath("dmv"),
                    new DaprSubscriptionRouteRule().withMatch("qwcrugyo").withPath("za")))
                .withDefaultProperty("jdvvlrhocr"))
            .withScopes(Arrays.asList("xundqzbvbpsuvqhx", "ozf", "dkwbkurklpiig"))
            .withMetadata(mapOf("zqydewuw", "keutuipjclzjwaq", "vtzqw", "yllzzz"))
            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(true)
                .withMaxMessagesCount(1422292419)
                .withMaxAwaitDurationMs(1623414187))
            .create();

        Assertions.assertEquals("wmwqoguflte", response.pubsubName());
        Assertions.assertEquals("negefz", response.topic());
        Assertions.assertEquals("njtqbg", response.deadLetterTopic());
        Assertions.assertEquals("hnvxwtd", response.routes().rules().get(0).match());
        Assertions.assertEquals("cbjdbtqy", response.routes().rules().get(0).path());
        Assertions.assertEquals("xu", response.routes().defaultProperty());
        Assertions.assertEquals("ujqgbbjvo", response.scopes().get(0));
        Assertions.assertEquals("sloygsa", response.metadata().get("d"));
        Assertions.assertTrue(response.bulkSubscribe().enabled());
        Assertions.assertEquals(640916032, response.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1675511910, response.bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
