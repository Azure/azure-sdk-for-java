// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.BuilderResourceInner;
import com.azure.resourcemanager.appcontainers.models.BuilderCollection;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistry;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BuilderCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BuilderCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"environmentId\":\"f\",\"containerRegistries\":[{\"containerRegistryServer\":\"kpnpulexxbczwtr\",\"identityResourceId\":\"wiqzbqjvsovmyo\"}]},\"identity\":{\"principalId\":\"45893770-b081-42dc-9753-42244548f633\",\"tenantId\":\"27b455a5-3ef7-4608-8454-6c267a4c2693\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"zdobpxjmflbvvnch\":{\"principalId\":\"60eaa73d-ef98-45d4-a8ef-c378ed301dcb\",\"clientId\":\"437de5d9-e5cb-47ac-a0a9-c4c411b543ee\"}}},\"location\":\"cciw\",\"tags\":{\"foskghsauuimj\":\"uqkhrsajiwku\"},\"id\":\"vxieduugidyj\",\"name\":\"rfbyaosvexcso\",\"type\":\"pclhocohslk\"}],\"nextLink\":\"leggzfbu\"}")
            .toObject(BuilderCollection.class);
        Assertions.assertEquals("cciw", model.value().get(0).location());
        Assertions.assertEquals("uqkhrsajiwku", model.value().get(0).tags().get("foskghsauuimj"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("f", model.value().get(0).environmentId());
        Assertions.assertEquals("kpnpulexxbczwtr",
            model.value().get(0).containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("wiqzbqjvsovmyo",
            model.value().get(0).containerRegistries().get(0).identityResourceId());
        Assertions.assertEquals("leggzfbu", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BuilderCollection model
            = new BuilderCollection().withValue(Arrays.asList(new BuilderResourceInner().withLocation("cciw")
                .withTags(mapOf("foskghsauuimj", "uqkhrsajiwku"))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("zdobpxjmflbvvnch", new UserAssignedIdentity())))
                .withEnvironmentId("f")
                .withContainerRegistries(
                    Arrays.asList(new ContainerRegistry().withContainerRegistryServer("kpnpulexxbczwtr")
                        .withIdentityResourceId("wiqzbqjvsovmyo")))))
                .withNextLink("leggzfbu");
        model = BinaryData.fromObject(model).toObject(BuilderCollection.class);
        Assertions.assertEquals("cciw", model.value().get(0).location());
        Assertions.assertEquals("uqkhrsajiwku", model.value().get(0).tags().get("foskghsauuimj"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("f", model.value().get(0).environmentId());
        Assertions.assertEquals("kpnpulexxbczwtr",
            model.value().get(0).containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("wiqzbqjvsovmyo",
            model.value().get(0).containerRegistries().get(0).identityResourceId());
        Assertions.assertEquals("leggzfbu", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
