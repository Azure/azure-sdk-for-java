// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.BuilderResourceInner;
import com.azure.resourcemanager.appcontainers.models.BuilderCollection;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistry;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BuilderCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BuilderCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"environmentId\":\"cukoklyaxuconu\",\"containerRegistries\":[{\"containerRegistryServer\":\"fkbey\",\"identityResourceId\":\"ewrmjmwvvjektc\"}]},\"identity\":{\"principalId\":\"b502ae21-f589-4fa0-a7ba-00ae0449adc1\",\"tenantId\":\"f2a103f0-b442-484b-a6e3-d0b70eabeeea\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ffrzpwvlqdqgbiqy\":{\"principalId\":\"99322b52-b2f5-472e-b94e-7aba4c2b7596\",\"clientId\":\"64929267-ab5e-41c2-84a0-16f27737d69a\"}}},\"location\":\"hkaetcktvfc\",\"tags\":{\"jf\":\"snkymuctq\",\"fuwutttxf\":\"ebrjcxe\",\"hfnljkyq\":\"jrbirphxepcyv\"},\"id\":\"j\",\"name\":\"uujqgidokgjljyo\",\"type\":\"gvcl\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"environmentId\":\"ncghkje\",\"containerRegistries\":[{\"containerRegistryServer\":\"hbijhtxfvgxb\",\"identityResourceId\":\"smx\"},{\"containerRegistryServer\":\"eh\",\"identityResourceId\":\"pvecxgodeb\"},{\"containerRegistryServer\":\"qkkrb\",\"identityResourceId\":\"pukgriwflzlfb\"}]},\"identity\":{\"principalId\":\"f8d71d1d-c123-4c06-b5b0-4a2c6c063865\",\"tenantId\":\"dc9135c6-0982-4390-97db-74dbd091bc85\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"pnq\":{\"principalId\":\"d2909f3b-343a-4172-893e-8c6ceaaa9759\",\"clientId\":\"5d679b82-70fd-4f62-9b14-b6aede729213\"},\"mgkbrpyydhibn\":{\"principalId\":\"11873bb2-b0a4-40ec-9604-c0687d42610b\",\"clientId\":\"2171c563-d1fa-4ee8-9bed-4ec971ba4fbf\"},\"kpikadrgvt\":{\"principalId\":\"4ec29524-beca-4dad-9b3f-6ca45829aec8\",\"clientId\":\"22f5410d-e367-444b-865b-44e3344602d7\"},\"n\":{\"principalId\":\"89e804e7-9156-4621-bf2f-ea15b6df8bd5\",\"clientId\":\"681a5331-9f9e-4614-937e-4615869b14dd\"}}},\"location\":\"ynhijggme\",\"tags\":{\"zmhjrunmp\":\"iarbutrcvpna\",\"nkxmyskpbhenbtk\":\"ttdbhrbnl\",\"yxczfclh\":\"xywnytnrsynlqidy\"},\"id\":\"axdbabph\",\"name\":\"wrqlfktsthsuco\",\"type\":\"mnyyazt\"}],\"nextLink\":\"twwrqp\"}")
            .toObject(BuilderCollection.class);
        Assertions.assertEquals("hkaetcktvfc", model.value().get(0).location());
        Assertions.assertEquals("snkymuctq", model.value().get(0).tags().get("jf"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("cukoklyaxuconu", model.value().get(0).environmentId());
        Assertions.assertEquals("fkbey", model.value().get(0).containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("ewrmjmwvvjektc",
            model.value().get(0).containerRegistries().get(0).identityResourceId());
        Assertions.assertEquals("twwrqp", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BuilderCollection model
            = new BuilderCollection()
                .withValue(Arrays.asList(
                    new BuilderResourceInner().withLocation("hkaetcktvfc")
                        .withTags(mapOf("jf", "snkymuctq", "fuwutttxf", "ebrjcxe", "hfnljkyq", "jrbirphxepcyv"))
                        .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("ffrzpwvlqdqgbiqy", new UserAssignedIdentity())))
                        .withEnvironmentId("cukoklyaxuconu")
                        .withContainerRegistries(
                            Arrays.asList(new ContainerRegistry().withContainerRegistryServer("fkbey")
                                .withIdentityResourceId("ewrmjmwvvjektc"))),
                    new BuilderResourceInner().withLocation("ynhijggme")
                        .withTags(mapOf("zmhjrunmp", "iarbutrcvpna", "nkxmyskpbhenbtk", "ttdbhrbnl", "yxczfclh",
                            "xywnytnrsynlqidy"))
                        .withIdentity(
                            new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                                .withUserAssignedIdentities(mapOf("pnq", new UserAssignedIdentity(), "mgkbrpyydhibn",
                                    new UserAssignedIdentity(), "kpikadrgvt", new UserAssignedIdentity(), "n",
                                    new UserAssignedIdentity())))
                        .withEnvironmentId("ncghkje")
                        .withContainerRegistries(Arrays.asList(
                            new ContainerRegistry().withContainerRegistryServer("hbijhtxfvgxb")
                                .withIdentityResourceId("smx"),
                            new ContainerRegistry().withContainerRegistryServer("eh")
                                .withIdentityResourceId("pvecxgodeb"),
                            new ContainerRegistry().withContainerRegistryServer("qkkrb")
                                .withIdentityResourceId("pukgriwflzlfb")))))
                .withNextLink("twwrqp");
        model = BinaryData.fromObject(model).toObject(BuilderCollection.class);
        Assertions.assertEquals("hkaetcktvfc", model.value().get(0).location());
        Assertions.assertEquals("snkymuctq", model.value().get(0).tags().get("jf"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("cukoklyaxuconu", model.value().get(0).environmentId());
        Assertions.assertEquals("fkbey", model.value().get(0).containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("ewrmjmwvvjektc",
            model.value().get(0).containerRegistries().get(0).identityResourceId());
        Assertions.assertEquals("twwrqp", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
