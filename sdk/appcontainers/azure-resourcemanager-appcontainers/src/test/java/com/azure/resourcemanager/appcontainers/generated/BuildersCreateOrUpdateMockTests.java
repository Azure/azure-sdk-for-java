// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.BuilderResource;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistry;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BuildersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"environmentId\":\"ydgnha\",\"containerRegistries\":[{\"containerRegistryServer\":\"ukexzgpm\",\"identityResourceId\":\"mabeddqilwgdf\"}]},\"identity\":{\"principalId\":\"97ea8024-9c14-4787-95a4-03a17b09e44f\",\"tenantId\":\"7fc9f967-d9bb-40ab-954f-f38a93ee438f\",\"type\":\"None\",\"userAssignedIdentities\":{\"clg\":{\"principalId\":\"b1a56a2e-8060-41b9-aafe-f2a2b9993448\",\"clientId\":\"c8e83ca8-7bdf-4451-a985-3f69086ecbf6\"},\"werfwx\":{\"principalId\":\"26298e04-2560-4f86-877b-7a506656ef0d\",\"clientId\":\"0e224fee-4c0b-43dc-8073-0b7b783a354a\"}}},\"location\":\"mtbljjeh\",\"tags\":{\"qhtfpwpqbye\":\"fkwdvbtbrekqh\",\"gmghginztxlujkhn\":\"uwyqwdq\",\"wmlmh\":\"cmrnkfmkhcq\",\"j\":\"nqtqea\"},\"id\":\"dvragpokddxejhh\",\"name\":\"vgua\",\"type\":\"tpt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        BuilderResource response = manager.builders()
            .define("fyvrtpqpemhzcgk")
            .withRegion("wxeiicrmpepk")
            .withExistingResourceGroup("cta")
            .withTags(mapOf("cwrase", "axxijvskwsdgkjgy", "qartwy", "wefcvoinw", "tdavuqmcbymsfobj", "qicladv", "j",
                "quvjez"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("gnixxowwzkyfwnw", new UserAssignedIdentity())))
            .withEnvironmentId("qhqyhwqwemvx")
            .withContainerRegistries(Arrays.asList(
                new ContainerRegistry().withContainerRegistryServer("ckmzeoxin")
                    .withIdentityResourceId("greohtwhlpuzjp"),
                new ContainerRegistry().withContainerRegistryServer("eezn").withIdentityResourceId("angp"),
                new ContainerRegistry().withContainerRegistryServer("bfaxyxzlbc").withIdentityResourceId("phmsexroq"),
                new ContainerRegistry().withContainerRegistryServer("ndktxfv").withIdentityResourceId("nfee")))
            .create();

        Assertions.assertEquals("mtbljjeh", response.location());
        Assertions.assertEquals("fkwdvbtbrekqh", response.tags().get("qhtfpwpqbye"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("ydgnha", response.environmentId());
        Assertions.assertEquals("ukexzgpm", response.containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("mabeddqilwgdf", response.containerRegistries().get(0).identityResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
