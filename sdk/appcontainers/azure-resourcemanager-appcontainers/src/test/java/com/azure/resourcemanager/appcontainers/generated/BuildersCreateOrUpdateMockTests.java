// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.BuilderResource;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistry;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BuildersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"environmentId\":\"bffljfiimreoag\",\"containerRegistries\":[{\"containerRegistryServer\":\"aadusrexxfa\",\"identityResourceId\":\"sqwudohzilfmnli\"},{\"containerRegistryServer\":\"psimsf\",\"identityResourceId\":\"ypofqpmbhyqgs\"}]},\"identity\":{\"principalId\":\"dbeb826f-5966-47e8-a0ea-9ce1156e63cf\",\"tenantId\":\"afbc9f5c-7a57-43c7-aab5-b8a782238c6d\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"phgerhsmvgoh\":{\"principalId\":\"3bcc308f-00e3-40eb-8f8e-98e89cc157cf\",\"clientId\":\"5dd3f164-da66-46c2-bffc-e1c034fa15f8\"},\"mqilrixysfnimsqy\":{\"principalId\":\"8ede5bf3-3767-4ed2-a7a1-c4b20bc12dbb\",\"clientId\":\"ee130c3f-aa00-4094-abd1-4df2dc549960\"}}},\"location\":\"wmhkruwaedrympml\",\"tags\":{\"ewihapfji\":\"nhzd\"},\"id\":\"knjdiqfliejhp\",\"name\":\"lbiedfsbw\",\"type\":\"eivbvz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BuilderResource response = manager.builders()
            .define("llpquevhamfo")
            .withRegion("msfe")
            .withExistingResourceGroup("xlaj")
            .withTags(mapOf("dagrhrdicxdw", "ihpq", "vcxjsgbipcukdvek", "jfowxwy", "scrdp", "buhoduchv"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("sztekxby", new UserAssignedIdentity())))
            .withEnvironmentId("tmk")
            .withContainerRegistries(Arrays.asList(
                new ContainerRegistry().withContainerRegistryServer("pkzwa").withIdentityResourceId("xofqovchi")))
            .create();

        Assertions.assertEquals("wmhkruwaedrympml", response.location());
        Assertions.assertEquals("nhzd", response.tags().get("ewihapfji"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("bffljfiimreoag", response.environmentId());
        Assertions.assertEquals("aadusrexxfa", response.containerRegistries().get(0).containerRegistryServer());
        Assertions.assertEquals("sqwudohzilfmnli", response.containerRegistries().get(0).identityResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
