// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.ActiveRevisionsMode;
import com.azure.resourcemanager.appcontainers.models.Configuration;
import com.azure.resourcemanager.appcontainers.models.ContainerApp;
import com.azure.resourcemanager.appcontainers.models.ExtendedLocation;
import com.azure.resourcemanager.appcontainers.models.ExtendedLocationTypes;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.appcontainers.models.Template;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ContainerAppsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"extendedLocation\":{\"name\":\"kiwbuqnyoph\",\"type\":\"CustomLocation\"},\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"properties\":{\"provisioningState\":\"Succeeded\",\"managedEnvironmentId\":\"nezzcezelfwyfwlw\",\"environmentId\":\"wetnpsihc\",\"workloadProfileType\":\"fzvaylptr\",\"latestRevisionName\":\"qwztcmwqkc\",\"latestRevisionFqdn\":\"xwaxfewzjkj\",\"customDomainVerificationId\":\"fdeqvhpsyl\",\"configuration\":{\"secrets\":[],\"activeRevisionsMode\":\"Multiple\",\"registries\":[],\"maxInactiveRevisions\":919245965},\"template\":{\"revisionSuffix\":\"zjrgyww\",\"initContainers\":[],\"containers\":[],\"volumes\":[]},\"outboundIpAddresses\":[\"tf\",\"jgicgaao\",\"pttaqutd\",\"wemxswvruunzz\"],\"eventStreamEndpoint\":\"ehkfkimrtixok\"},\"location\":\"qyinl\",\"tags\":{\"hiyxgvelfclduc\":\"pqwhixmonst\"},\"id\":\"birdsvuwcobiegs\",\"name\":\"mninwjizcilng\",\"type\":\"gshejjtbxqmulux\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ContainerAppsApiManager manager =
            ContainerAppsApiManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ContainerApp response =
            manager
                .containerApps()
                .define("fgtayxonsup")
                .withRegion("rylniofrzg")
                .withExistingResourceGroup("mv")
                .withTags(mapOf("tkvnlvxbcuiiznkt", "edm"))
                .withExtendedLocation(
                    new ExtendedLocation().withName("lzqnhcvs").withType(ExtendedLocationTypes.CUSTOM_LOCATION))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf()))
                .withManagedEnvironmentId("xfyqonmpqoxwdo")
                .withEnvironmentId("bxiqxeiiqbimht")
                .withWorkloadProfileType("winhehfqpo")
                .withConfiguration(
                    new Configuration()
                        .withSecrets(Arrays.asList())
                        .withActiveRevisionsMode(ActiveRevisionsMode.MULTIPLE)
                        .withRegistries(Arrays.asList())
                        .withMaxInactiveRevisions(1610520770))
                .withTemplate(
                    new Template()
                        .withRevisionSuffix("zuwfmdur")
                        .withInitContainers(Arrays.asList())
                        .withContainers(Arrays.asList())
                        .withVolumes(Arrays.asList()))
                .create();

        Assertions.assertEquals("qyinl", response.location());
        Assertions.assertEquals("pqwhixmonst", response.tags().get("hiyxgvelfclduc"));
        Assertions.assertEquals("kiwbuqnyoph", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, response.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("nezzcezelfwyfwlw", response.managedEnvironmentId());
        Assertions.assertEquals("wetnpsihc", response.environmentId());
        Assertions.assertEquals("fzvaylptr", response.workloadProfileType());
        Assertions.assertEquals(ActiveRevisionsMode.MULTIPLE, response.configuration().activeRevisionsMode());
        Assertions.assertEquals(919245965, response.configuration().maxInactiveRevisions());
        Assertions.assertEquals("zjrgyww", response.template().revisionSuffix());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
