// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.fluent.models.JobExecutionBaseInner;
import com.azure.resourcemanager.appcontainers.models.ContainerAppJobExecutions;
import com.azure.resourcemanager.appcontainers.models.JobExecutionNamesCollection;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class JobsStopMultipleExecutionsMockTests {
    @Test
    public void testStopMultipleExecutions() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"name\":\"bbnz\",\"id\":\"yknapqofyuicdh\",\"type\":\"dyb\",\"status\":\"Succeeded\",\"startTime\":\"2021-11-26T17:52:15Z\",\"endTime\":\"2021-10-10T21:16:01Z\"},{\"name\":\"dmhm\",\"id\":\"f\",\"type\":\"fmuvapckccr\",\"status\":\"Failed\",\"startTime\":\"2021-07-13T09:03:52Z\",\"endTime\":\"2021-12-04T19:48:14Z\"},{\"name\":\"yukphaimmoiroq\",\"id\":\"shbraga\",\"type\":\"yrmfsvbpav\",\"status\":\"Degraded\",\"startTime\":\"2021-06-03T07:36:41Z\",\"endTime\":\"2021-09-22T17:44:07Z\"}],\"nextLink\":\"nupgahxku\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ContainerAppsApiManager manager =
            ContainerAppsApiManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ContainerAppJobExecutions response =
            manager
                .jobs()
                .stopMultipleExecutions(
                    "rxklobdxnazpmk",
                    "lmv",
                    new JobExecutionNamesCollection()
                        .withValue(
                            Arrays
                                .asList(
                                    new JobExecutionBaseInner().withName("xzopjhbzxl").withId("hrdd"),
                                    new JobExecutionBaseInner().withName("fg").withId("ba"))),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bbnz", response.value().get(0).name());
        Assertions.assertEquals("yknapqofyuicdh", response.value().get(0).id());
        Assertions.assertEquals("dyb", response.value().get(0).type());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T17:52:15Z"), response.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T21:16:01Z"), response.value().get(0).endTime());
    }
}
