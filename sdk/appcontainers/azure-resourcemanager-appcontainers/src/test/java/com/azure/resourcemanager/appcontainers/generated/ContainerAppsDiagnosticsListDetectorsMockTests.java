// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.Diagnostics;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ContainerAppsDiagnosticsListDetectorsMockTests {
    @Test
    public void testListDetectors() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"bhxykfhyqezvqqug\",\"name\":\"ftbcvexreuquow\",\"description\":\"jv\",\"author\":\"hreagk\",\"category\":\"xv\",\"supportTopicList\":[{\"id\":\"bczsulmdgglmepjp\",\"pesId\":\"eykgsangpszngaf\"},{\"id\":\"ylkvecjuj\",\"pesId\":\"goadyedmzr\"},{\"id\":\"foknubnoitp\",\"pesId\":\"ztrgdgxvcoq\"}],\"analysisTypes\":[\"wugyx\"],\"type\":\"itweialwvskbuh\",\"score\":22.763353},\"dataset\":[{\"table\":{\"tableName\":\"ltcoqc\",\"columns\":[{},{},{}],\"rows\":[\"dataxzak\",\"dataejkm\",\"databizt\"]},\"renderingProperties\":{\"type\":1094680402,\"title\":\"vovjufycsjmlbe\",\"description\":\"ej\",\"isVisible\":false}},{\"table\":{\"tableName\":\"egthortudawl\",\"columns\":[{},{},{}],\"rows\":[\"dataqerpptcbgqnzm\",\"datah\",\"datailialwcjgc\",\"databbcccgz\"]},\"renderingProperties\":{\"type\":543783060,\"title\":\"nyuffat\",\"description\":\"ftipwcxbyubhiq\",\"isVisible\":true}},{\"table\":{\"tableName\":\"npnuhzafccnuhi\",\"columns\":[{}],\"rows\":[\"databui\",\"datavxva\"]},\"renderingProperties\":{\"type\":1188527137,\"title\":\"dlbnbqxvhcsy\",\"description\":\"lwxaeaovurex\",\"isVisible\":false}}],\"status\":{\"message\":\"dwead\",\"statusId\":504538435},\"dataProviderMetadata\":{\"providerName\":\"ntopa\",\"propertyBag\":[{\"name\":\"v\",\"value\":\"agoaqylkjztji\"},{\"name\":\"zjcg\",\"value\":\"itpfinzcpdl\"},{\"name\":\"rlgjm\",\"value\":\"drvcqguef\"},{\"name\":\"ompheqdur\",\"value\":\"yujlfyoumpckyecl\"}]}},\"id\":\"igptajbrzmqxucyc\",\"name\":\"joclxiutgjcyzy\",\"type\":\"jdnrqjbt\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Diagnostics> response
            = manager.containerAppsDiagnostics().listDetectors("uqoly", "hluqwquls", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wugyx", response.iterator().next().properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("ltcoqc", response.iterator().next().properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(1094680402,
            response.iterator().next().properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("vovjufycsjmlbe",
            response.iterator().next().properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("ej",
            response.iterator().next().properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(false,
            response.iterator().next().properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("dwead", response.iterator().next().properties().status().message());
        Assertions.assertEquals(504538435, response.iterator().next().properties().status().statusId());
        Assertions.assertEquals("ntopa", response.iterator().next().properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("v",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("agoaqylkjztji",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
