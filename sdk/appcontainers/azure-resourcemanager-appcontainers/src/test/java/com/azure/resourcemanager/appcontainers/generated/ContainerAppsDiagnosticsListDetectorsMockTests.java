// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.Diagnostics;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ContainerAppsDiagnosticsListDetectorsMockTests {
    @Test
    public void testListDetectors() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"zarhzvqnsqktcmbj\",\"name\":\"zoslpkybtgl\",\"description\":\"zp\",\"author\":\"jsqjcemqbm\",\"category\":\"vqar\",\"supportTopicList\":[{\"id\":\"qreblui\",\"pesId\":\"bwxsfgtdm\"},{\"id\":\"xekr\",\"pesId\":\"k\"}],\"analysisTypes\":[\"ud\",\"twaokb\"],\"type\":\"lyttaaknwfr\",\"score\":69.09618},\"dataset\":[{\"table\":{\"tableName\":\"dujdigatoleksc\",\"columns\":[{},{},{}],\"rows\":[\"datanqimwbzxpdcldp\",\"dataawnsnlaimou\",\"dataw\",\"datasqmu\"]},\"renderingProperties\":{\"type\":2118230542,\"title\":\"ibicz\",\"description\":\"swswjrkbq\",\"isVisible\":true}},{\"table\":{\"tableName\":\"qqvyfscyrfw\",\"columns\":[{},{}],\"rows\":[\"dataogfuyzwvbhlim\",\"datayqe\",\"datar\"]},\"renderingProperties\":{\"type\":1779759130,\"title\":\"kcdrdaasaxxobsm\",\"description\":\"wiyjvzuko\",\"isVisible\":false}}],\"status\":{\"message\":\"nvzmlnkoywsx\",\"statusId\":1909708055},\"dataProviderMetadata\":{\"providerName\":\"qqax\",\"propertyBag\":[{\"name\":\"mc\",\"value\":\"dndoabhjxw\"}]}},\"id\":\"weuipmpvksmi\",\"name\":\"nsqxtltc\",\"type\":\"krdpqgfhyrfr\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ContainerAppsApiManager manager = ContainerAppsApiManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Diagnostics> response = manager.containerAppsDiagnostics().listDetectors("gmihzpimcqr",
            "nxtminklog", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ud", response.iterator().next().properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("dujdigatoleksc",
            response.iterator().next().properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(2118230542,
            response.iterator().next().properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("ibicz",
            response.iterator().next().properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("swswjrkbq",
            response.iterator().next().properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(true,
            response.iterator().next().properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("nvzmlnkoywsx", response.iterator().next().properties().status().message());
        Assertions.assertEquals(1909708055, response.iterator().next().properties().status().statusId());
        Assertions.assertEquals("qqax", response.iterator().next().properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("mc",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("dndoabhjxw",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
