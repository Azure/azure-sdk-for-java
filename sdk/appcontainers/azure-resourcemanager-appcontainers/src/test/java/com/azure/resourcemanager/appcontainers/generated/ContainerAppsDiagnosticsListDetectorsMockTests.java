// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.Diagnostics;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ContainerAppsDiagnosticsListDetectorsMockTests {
    @Test
    public void testListDetectors() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"naoaqymhccto\",\"name\":\"o\",\"description\":\"rnskby\",\"author\":\"uhczy\",\"category\":\"vhajpxec\",\"supportTopicList\":[{\"id\":\"hscozawmvgxsmpk\",\"pesId\":\"wirfljf\"}],\"analysisTypes\":[\"qouoxu\"],\"type\":\"mckaprh\",\"score\":48.225636},\"dataset\":[{\"table\":{\"tableName\":\"encdgmoqueqihkky\",\"columns\":[{},{},{}],\"rows\":[\"dataouwhldxwhie\"]},\"renderingProperties\":{\"type\":194546120,\"title\":\"smfx\",\"description\":\"vprstv\",\"isVisible\":true}},{\"table\":{\"tableName\":\"jtdyotnplfa\",\"columns\":[{},{}],\"rows\":[\"dataqrqxwetjt\"]},\"renderingProperties\":{\"type\":41412087,\"title\":\"fdoadtxopgeh\",\"description\":\"dkmdzgsszx\",\"isVisible\":true}},{\"table\":{\"tableName\":\"bxuharl\",\"columns\":[{},{}],\"rows\":[\"dataclabv\"]},\"renderingProperties\":{\"type\":946198346,\"title\":\"uxx\",\"description\":\"bmyqjog\",\"isVisible\":false}}],\"status\":{\"message\":\"djanormo\",\"statusId\":2062816270},\"dataProviderMetadata\":{\"providerName\":\"rntu\",\"propertyBag\":[{\"name\":\"lu\",\"value\":\"emhdeeljslky\"},{\"name\":\"d\",\"value\":\"zjuegrh\"},{\"name\":\"tsl\",\"value\":\"tv\"}]}},\"id\":\"nxvgjb\",\"name\":\"iobpnjodf\",\"type\":\"bj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Diagnostics> response = manager.containerAppsDiagnostics()
            .listDetectors("mhobcyan", "fvqtvkhgvoo", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qouoxu", response.iterator().next().properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("encdgmoqueqihkky",
            response.iterator().next().properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(194546120,
            response.iterator().next().properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("smfx",
            response.iterator().next().properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("vprstv",
            response.iterator().next().properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(true,
            response.iterator().next().properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("djanormo", response.iterator().next().properties().status().message());
        Assertions.assertEquals(2062816270, response.iterator().next().properties().status().statusId());
        Assertions.assertEquals("rntu", response.iterator().next().properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("lu",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("emhdeeljslky",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
