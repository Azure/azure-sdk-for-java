// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.Diagnostics;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ContainerAppsDiagnosticsListDetectorsMockTests {
    @Test
    public void testListDetectors() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"lrmymyincqlhri\",\"name\":\"sl\",\"description\":\"iiovgqcgxu\",\"author\":\"qkctotiowlxte\",\"category\":\"ptjgwdt\",\"supportTopicList\":[{\"id\":\"anblwphqlkccu\",\"pesId\":\"ygqwahoiu\"},{\"id\":\"gniiprglvaw\",\"pesId\":\"z\"},{\"id\":\"fypiv\",\"pesId\":\"bbjpmcubkmif\"},{\"id\":\"xkubvphavpmhbrbq\",\"pesId\":\"govpbbtte\"}],\"analysisTypes\":[\"knssqyzqed\",\"kdfrdbiqmrjgeihf\",\"lg\",\"wfiwzcxmj\"],\"type\":\"yephmgtvljvrcmyf\",\"score\":20.843273},\"dataset\":[{\"table\":{\"tableName\":\"pomyqwcabvnuile\",\"columns\":[{},{}],\"rows\":[\"datalpaugmrm\",\"datajlrxwtoaukhfk\",\"datacisiz\",\"dataoaedsxjwuivedwcg\"]},\"renderingProperties\":{\"type\":1195219828,\"title\":\"ei\",\"description\":\"psmgo\",\"isVisible\":false}},{\"table\":{\"tableName\":\"ljdlrgmspl\",\"columns\":[{}],\"rows\":[\"datacshhv\",\"dataewgnxkympqanxrj\"]},\"renderingProperties\":{\"type\":494382455,\"title\":\"bta\",\"description\":\"pnyghs\",\"isVisible\":false}}],\"status\":{\"message\":\"hkgmnsg\",\"statusId\":986820074},\"dataProviderMetadata\":{\"providerName\":\"phdrw\",\"propertyBag\":[{\"name\":\"vyom\",\"value\":\"luzvxnq\"}]}},\"id\":\"rpqpd\",\"name\":\"wmkoisq\",\"type\":\"ssffxuifmc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Diagnostics> response
            = manager.containerAppsDiagnostics().listDetectors("j", "emmucfxh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("knssqyzqed",
            response.iterator().next().properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("pomyqwcabvnuile",
            response.iterator().next().properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(1195219828,
            response.iterator().next().properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("ei",
            response.iterator().next().properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("psmgo",
            response.iterator().next().properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(false,
            response.iterator().next().properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("hkgmnsg", response.iterator().next().properties().status().message());
        Assertions.assertEquals(986820074, response.iterator().next().properties().status().statusId());
        Assertions.assertEquals("phdrw", response.iterator().next().properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("vyom",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("luzvxnq",
            response.iterator().next().properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
