// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.JobExecution;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JobsExecutionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"nyttzgix\",\"id\":\"rihl\",\"type\":\"gbehlqtxnr\",\"properties\":{\"status\":\"Stopped\",\"startTime\":\"2021-09-25T09:53:37Z\",\"endTime\":\"2021-03-19T08:09:23Z\",\"template\":{\"containers\":[{\"image\":\"dhdaqotwfhipx\",\"name\":\"sabvcip\",\"command\":[\"afcz\",\"umljcirvpef\",\"cdveititj\"],\"args\":[\"zaj\",\"nsjhwjuyxxb\",\"qvmvuaytuadxkxe\",\"bwpntghy\"],\"env\":[{}],\"resources\":{}},{\"image\":\"drnxsluvlzla\",\"name\":\"t\",\"command\":[\"bqhvfdqqjwkr\",\"wzdanojisgglmvo\",\"atuztjct\",\"bpvbkaehxsmzygd\"],\"args\":[\"kwseivmakxhyso\"],\"env\":[{},{},{},{}],\"resources\":{}},{\"image\":\"lkbectvtfjmskd\",\"name\":\"maiubavlzwp\",\"command\":[\"falkzazm\",\"oke\",\"gjqafkmkrokzr\"],\"args\":[\"etw\",\"qrtvaoznqni\",\"iezeagm\",\"eituugedhfpjs\"],\"env\":[{},{},{}],\"resources\":{}},{\"image\":\"lsyj\",\"name\":\"olctae\",\"command\":[\"yrle\",\"jcustbvtq\"],\"args\":[\"xzvsgeafgf\"],\"env\":[{},{},{}],\"resources\":{}}],\"initContainers\":[{\"image\":\"sxezppkkwaa\",\"name\":\"k\",\"command\":[\"lp\",\"eqtoyrpl\",\"xlaj\"],\"args\":[\"pq\",\"evhamfowg\",\"btmkekxpkzwaq\"],\"env\":[{},{}],\"resources\":{}},{\"image\":\"vchiqbpl\",\"name\":\"idu\",\"command\":[\"ekxbyjg\",\"sfepxyihpq\",\"dagrhrdicxdw\"],\"args\":[\"owxwyovcxjsgbip\",\"ukdveksbuhoduc\",\"v\",\"scrdp\"],\"env\":[{},{}],\"resources\":{}},{\"image\":\"jdusspyszekb\",\"name\":\"lkaaggkr\",\"command\":[\"frnuybffljfi\",\"mreoagsqtaad\",\"srexxfavs\",\"wudohzilfm\"],\"args\":[\"kpsimsfeypofqp\",\"bh\",\"qgsdr\",\"mttjxophgerh\"],\"env\":[{},{}],\"resources\":{}}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<JobExecution> response
            = manager.jobsExecutions().list("zgczeu", "tgxdncaqt", "iekoif", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nyttzgix", response.iterator().next().name());
        Assertions.assertEquals("rihl", response.iterator().next().id());
        Assertions.assertEquals("gbehlqtxnr", response.iterator().next().type());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-25T09:53:37Z"), response.iterator().next().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-19T08:09:23Z"), response.iterator().next().endTime());
        Assertions.assertEquals("dhdaqotwfhipx", response.iterator().next().template().containers().get(0).image());
        Assertions.assertEquals("sabvcip", response.iterator().next().template().containers().get(0).name());
        Assertions.assertEquals("afcz", response.iterator().next().template().containers().get(0).command().get(0));
        Assertions.assertEquals("zaj", response.iterator().next().template().containers().get(0).args().get(0));
        Assertions.assertEquals("sxezppkkwaa", response.iterator().next().template().initContainers().get(0).image());
        Assertions.assertEquals("k", response.iterator().next().template().initContainers().get(0).name());
        Assertions.assertEquals("lp", response.iterator().next().template().initContainers().get(0).command().get(0));
        Assertions.assertEquals("pq", response.iterator().next().template().initContainers().get(0).args().get(0));
    }
}
