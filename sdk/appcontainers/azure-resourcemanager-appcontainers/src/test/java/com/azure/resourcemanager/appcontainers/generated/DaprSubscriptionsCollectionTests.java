// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionInner;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionsCollection;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionsCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionsCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"pubsubName\":\"kjztjiuazjcgmxi\",\"topic\":\"f\",\"deadLetterTopic\":\"zc\",\"routes\":{\"rules\":[{},{},{}],\"default\":\"rlgjm\"},\"scopes\":[\"rvcqguefzhomphe\",\"durelyujl\",\"youmpc\"],\"metadata\":{\"ucycijo\":\"clcdigptajbrzmq\",\"jb\":\"lxiutgjcyzyzjdnr\",\"w\":\"xjeaoqaqbzgyh\",\"atbwbqam\":\"v\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":235713184,\"maxAwaitDurationMs\":1350146316}},\"id\":\"kcvmwfauxxepmy\",\"name\":\"bormcqmiciijqpkz\",\"type\":\"bojxjmcsmy\"},{\"properties\":{\"pubsubName\":\"xv\",\"topic\":\"wnkwywzwo\",\"deadLetterTopic\":\"lickduoi\",\"routes\":{\"rules\":[{}],\"default\":\"yvsk\"},\"scopes\":[\"wzawnvsbcfhzagxn\",\"hycvdimwrzre\"],\"metadata\":{\"eryekzkdhmeottaw\":\"yufutrwp\"},\"bulkSubscribe\":{\"enabled\":true,\"maxMessagesCount\":543459562,\"maxAwaitDurationMs\":1246274609}},\"id\":\"h\",\"name\":\"tfvpndpmiljpn\",\"type\":\"ynudqllzsa\"},{\"properties\":{\"pubsubName\":\"jlxeehuxiqhz\",\"topic\":\"aymezx\",\"deadLetterTopic\":\"kihmxrfdsajredn\",\"routes\":{\"rules\":[{},{}],\"default\":\"t\"},\"scopes\":[\"mevuafpwzy\",\"frkgwltxeq\",\"pxgzdyimsfayor\"],\"metadata\":{\"oge\":\"vk\",\"aekqsykvwj\":\"labnsmjkwynq\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":717793996,\"maxAwaitDurationMs\":838644872}},\"id\":\"tjcrspxklurccl\",\"name\":\"gxannnoytzposewx\",\"type\":\"gpxvkqmaupxvpi\"}],\"nextLink\":\"f\"}")
            .toObject(DaprSubscriptionsCollection.class);
        Assertions.assertEquals("kjztjiuazjcgmxi", model.value().get(0).pubsubName());
        Assertions.assertEquals("f", model.value().get(0).topic());
        Assertions.assertEquals("zc", model.value().get(0).deadLetterTopic());
        Assertions.assertEquals("rlgjm", model.value().get(0).routes().defaultProperty());
        Assertions.assertEquals("rvcqguefzhomphe", model.value().get(0).scopes().get(0));
        Assertions.assertEquals("clcdigptajbrzmq", model.value().get(0).metadata().get("ucycijo"));
        Assertions.assertEquals(false, model.value().get(0).bulkSubscribe().enabled());
        Assertions.assertEquals(235713184, model.value().get(0).bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1350146316, model.value().get(0).bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionsCollection model = new DaprSubscriptionsCollection().withValue(Arrays.asList(
            new DaprSubscriptionInner().withPubsubName("kjztjiuazjcgmxi")
                .withTopic("f")
                .withDeadLetterTopic("zc")
                .withRoutes(new DaprSubscriptionRoutes().withRules(Arrays.asList(new DaprSubscriptionRouteRule(),
                    new DaprSubscriptionRouteRule(), new DaprSubscriptionRouteRule())).withDefaultProperty("rlgjm"))
                .withScopes(Arrays.asList("rvcqguefzhomphe", "durelyujl", "youmpc"))
                .withMetadata(mapOf("ucycijo", "clcdigptajbrzmq", "jb", "lxiutgjcyzyzjdnr", "w", "xjeaoqaqbzgyh",
                    "atbwbqam", "v"))
                .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                    .withMaxMessagesCount(235713184)
                    .withMaxAwaitDurationMs(1350146316)),
            new DaprSubscriptionInner().withPubsubName("xv")
                .withTopic("wnkwywzwo")
                .withDeadLetterTopic("lickduoi")
                .withRoutes(new DaprSubscriptionRoutes().withRules(Arrays.asList(new DaprSubscriptionRouteRule()))
                    .withDefaultProperty("yvsk"))
                .withScopes(Arrays.asList("wzawnvsbcfhzagxn", "hycvdimwrzre"))
                .withMetadata(mapOf("eryekzkdhmeottaw", "yufutrwp"))
                .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(true)
                    .withMaxMessagesCount(543459562)
                    .withMaxAwaitDurationMs(1246274609)),
            new DaprSubscriptionInner().withPubsubName("jlxeehuxiqhz")
                .withTopic("aymezx")
                .withDeadLetterTopic("kihmxrfdsajredn")
                .withRoutes(new DaprSubscriptionRoutes()
                    .withRules(Arrays.asList(new DaprSubscriptionRouteRule(), new DaprSubscriptionRouteRule()))
                    .withDefaultProperty("t"))
                .withScopes(Arrays.asList("mevuafpwzy", "frkgwltxeq", "pxgzdyimsfayor"))
                .withMetadata(mapOf("oge", "vk", "aekqsykvwj", "labnsmjkwynq"))
                .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                    .withMaxMessagesCount(717793996)
                    .withMaxAwaitDurationMs(838644872))));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionsCollection.class);
        Assertions.assertEquals("kjztjiuazjcgmxi", model.value().get(0).pubsubName());
        Assertions.assertEquals("f", model.value().get(0).topic());
        Assertions.assertEquals("zc", model.value().get(0).deadLetterTopic());
        Assertions.assertEquals("rlgjm", model.value().get(0).routes().defaultProperty());
        Assertions.assertEquals("rvcqguefzhomphe", model.value().get(0).scopes().get(0));
        Assertions.assertEquals("clcdigptajbrzmq", model.value().get(0).metadata().get("ucycijo"));
        Assertions.assertEquals(false, model.value().get(0).bulkSubscribe().enabled());
        Assertions.assertEquals(235713184, model.value().get(0).bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1350146316, model.value().get(0).bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
