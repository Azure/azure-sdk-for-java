// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionInner;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionsCollection;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionsCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionsCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"pubsubName\":\"d\",\"topic\":\"llgryfqiuasigr\",\"deadLetterTopic\":\"socnequygdjboq\",\"routes\":{\"rules\":[{},{},{}],\"default\":\"jkqev\"},\"scopes\":[\"mmwiuawvcmjz\",\"xiid\",\"scz\"],\"metadata\":{\"oqiqazugamx\":\"s\",\"cekuz\":\"krrcoiisbamnpp\",\"zxuizhyhnepkpe\":\"dsbezaxyfu\",\"xdazv\":\"iarxqiubxdukec\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":118970540,\"maxAwaitDurationMs\":439594345}},\"id\":\"zudblnsntrpcaq\",\"name\":\"iofkbtfmh\",\"type\":\"lbnld\"},{\"properties\":{\"pubsubName\":\"bh\",\"topic\":\"zyqu\",\"deadLetterTopic\":\"sqxutr\",\"routes\":{\"rules\":[{}],\"default\":\"yuuatvlmbjwcolbm\"},\"scopes\":[\"nwtpcpahprz\"],\"metadata\":{\"nxzcm\":\"hmtfho\",\"sn\":\"hngxnoqrxtd\",\"hepfwwtjfdoes\":\"evhdlmydid\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":1541394704,\"maxAwaitDurationMs\":78837183}},\"id\":\"ky\",\"name\":\"ikxkxhneg\",\"type\":\"njzrbhtmeplvu\"}],\"nextLink\":\"obrl\"}")
            .toObject(DaprSubscriptionsCollection.class);
        Assertions.assertEquals("d", model.value().get(0).pubsubName());
        Assertions.assertEquals("llgryfqiuasigr", model.value().get(0).topic());
        Assertions.assertEquals("socnequygdjboq", model.value().get(0).deadLetterTopic());
        Assertions.assertEquals("jkqev", model.value().get(0).routes().defaultProperty());
        Assertions.assertEquals("mmwiuawvcmjz", model.value().get(0).scopes().get(0));
        Assertions.assertEquals("s", model.value().get(0).metadata().get("oqiqazugamx"));
        Assertions.assertEquals(false, model.value().get(0).bulkSubscribe().enabled());
        Assertions.assertEquals(118970540, model.value().get(0).bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(439594345, model.value().get(0).bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionsCollection model = new DaprSubscriptionsCollection().withValue(Arrays.asList(
            new DaprSubscriptionInner().withPubsubName("d")
                .withTopic("llgryfqiuasigr")
                .withDeadLetterTopic("socnequygdjboq")
                .withRoutes(new DaprSubscriptionRoutes().withRules(Arrays.asList(new DaprSubscriptionRouteRule(),
                    new DaprSubscriptionRouteRule(), new DaprSubscriptionRouteRule())).withDefaultProperty("jkqev"))
                .withScopes(Arrays.asList("mmwiuawvcmjz", "xiid", "scz"))
                .withMetadata(mapOf("oqiqazugamx", "s", "cekuz", "krrcoiisbamnpp", "zxuizhyhnepkpe", "dsbezaxyfu",
                    "xdazv", "iarxqiubxdukec"))
                .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                    .withMaxMessagesCount(118970540)
                    .withMaxAwaitDurationMs(439594345)),
            new DaprSubscriptionInner().withPubsubName("bh")
                .withTopic("zyqu")
                .withDeadLetterTopic("sqxutr")
                .withRoutes(new DaprSubscriptionRoutes().withRules(Arrays.asList(new DaprSubscriptionRouteRule()))
                    .withDefaultProperty("yuuatvlmbjwcolbm"))
                .withScopes(Arrays.asList("nwtpcpahprz"))
                .withMetadata(mapOf("nxzcm", "hmtfho", "sn", "hngxnoqrxtd", "hepfwwtjfdoes", "evhdlmydid"))
                .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                    .withMaxMessagesCount(1541394704)
                    .withMaxAwaitDurationMs(78837183))));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionsCollection.class);
        Assertions.assertEquals("d", model.value().get(0).pubsubName());
        Assertions.assertEquals("llgryfqiuasigr", model.value().get(0).topic());
        Assertions.assertEquals("socnequygdjboq", model.value().get(0).deadLetterTopic());
        Assertions.assertEquals("jkqev", model.value().get(0).routes().defaultProperty());
        Assertions.assertEquals("mmwiuawvcmjz", model.value().get(0).scopes().get(0));
        Assertions.assertEquals("s", model.value().get(0).metadata().get("oqiqazugamx"));
        Assertions.assertEquals(false, model.value().get(0).bulkSubscribe().enabled());
        Assertions.assertEquals(118970540, model.value().get(0).bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(439594345, model.value().get(0).bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
