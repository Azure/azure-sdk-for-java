// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionInner;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionsCollection;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionsCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionsCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"pubsubName\":\"sqhzvbrzcdbanfz\",\"topic\":\"scxmxeat\",\"deadLetterTopic\":\"bmwnrdjyibqb\",\"routes\":{\"rules\":[{},{}],\"default\":\"jrmkuhmaxljalf\"},\"scopes\":[\"jmobca\",\"cd\",\"xxqcwgaxf\"],\"metadata\":{\"jzrltixldzy\":\"knokzw\",\"yqlkju\":\"fytpqsixymmpuji\",\"vwzdbpqvyb\":\"smbmslzoy\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":106148612,\"maxAwaitDurationMs\":783627315}},\"id\":\"cvtlubseskvc\",\"name\":\"artr\",\"type\":\"unlpirykycndz\"},{\"properties\":{\"pubsubName\":\"vjreuykbbmnw\",\"topic\":\"ltbxoeeonqlnfw\",\"deadLetterTopic\":\"ymvqdbpbhfckdvez\",\"routes\":{\"rules\":[{},{},{},{}],\"default\":\"bzhdd\"},\"scopes\":[\"nqfblhkalehpava\",\"ugiqjtiogqg\"],\"metadata\":{\"iygspnbonhpczyk\":\"nictteajo\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":1958815578,\"maxAwaitDurationMs\":665766342}},\"id\":\"sehch\",\"name\":\"hufmpq\",\"type\":\"mqyjgy\"}],\"nextLink\":\"ulodsaeuzanhsfnh\"}")
            .toObject(DaprSubscriptionsCollection.class);
        Assertions.assertEquals("sqhzvbrzcdbanfz", model.value().get(0).pubsubName());
        Assertions.assertEquals("scxmxeat", model.value().get(0).topic());
        Assertions.assertEquals("bmwnrdjyibqb", model.value().get(0).deadLetterTopic());
        Assertions.assertEquals("jrmkuhmaxljalf", model.value().get(0).routes().defaultProperty());
        Assertions.assertEquals("jmobca", model.value().get(0).scopes().get(0));
        Assertions.assertEquals("knokzw", model.value().get(0).metadata().get("jzrltixldzy"));
        Assertions.assertFalse(model.value().get(0).bulkSubscribe().enabled());
        Assertions.assertEquals(106148612, model.value().get(0).bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(783627315, model.value().get(0).bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionsCollection model
            = new DaprSubscriptionsCollection()
                .withValue(
                    Arrays.asList(
                        new DaprSubscriptionInner().withPubsubName("sqhzvbrzcdbanfz")
                            .withTopic("scxmxeat")
                            .withDeadLetterTopic("bmwnrdjyibqb")
                            .withRoutes(new DaprSubscriptionRoutes()
                                .withRules(
                                    Arrays.asList(new DaprSubscriptionRouteRule(), new DaprSubscriptionRouteRule()))
                                .withDefaultProperty("jrmkuhmaxljalf"))
                            .withScopes(Arrays.asList("jmobca", "cd", "xxqcwgaxf"))
                            .withMetadata(
                                mapOf("jzrltixldzy", "knokzw", "yqlkju", "fytpqsixymmpuji", "vwzdbpqvyb", "smbmslzoy"))
                            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions()
                                .withEnabled(false)
                                .withMaxMessagesCount(106148612)
                                .withMaxAwaitDurationMs(783627315)),
                        new DaprSubscriptionInner().withPubsubName("vjreuykbbmnw")
                            .withTopic("ltbxoeeonqlnfw")
                            .withDeadLetterTopic("ymvqdbpbhfckdvez")
                            .withRoutes(new DaprSubscriptionRoutes()
                                .withRules(
                                    Arrays.asList(new DaprSubscriptionRouteRule(), new DaprSubscriptionRouteRule(),
                                        new DaprSubscriptionRouteRule(), new DaprSubscriptionRouteRule()))
                                .withDefaultProperty("bzhdd"))
                            .withScopes(Arrays.asList("nqfblhkalehpava", "ugiqjtiogqg"))
                            .withMetadata(mapOf("iygspnbonhpczyk", "nictteajo"))
                            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                                .withMaxMessagesCount(1958815578)
                                .withMaxAwaitDurationMs(665766342))));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionsCollection.class);
        Assertions.assertEquals("sqhzvbrzcdbanfz", model.value().get(0).pubsubName());
        Assertions.assertEquals("scxmxeat", model.value().get(0).topic());
        Assertions.assertEquals("bmwnrdjyibqb", model.value().get(0).deadLetterTopic());
        Assertions.assertEquals("jrmkuhmaxljalf", model.value().get(0).routes().defaultProperty());
        Assertions.assertEquals("jmobca", model.value().get(0).scopes().get(0));
        Assertions.assertEquals("knokzw", model.value().get(0).metadata().get("jzrltixldzy"));
        Assertions.assertFalse(model.value().get(0).bulkSubscribe().enabled());
        Assertions.assertEquals(106148612, model.value().get(0).bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(783627315, model.value().get(0).bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
