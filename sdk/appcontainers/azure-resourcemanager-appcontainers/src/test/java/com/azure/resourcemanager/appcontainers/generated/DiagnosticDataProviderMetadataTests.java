// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataProviderMetadata;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataProviderMetadataPropertyBagItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticDataProviderMetadataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticDataProviderMetadata model =
            BinaryData
                .fromString(
                    "{\"providerName\":\"vazivjlfr\",\"propertyBag\":[{\"name\":\"ajlkatnw\",\"value\":\"iopid\"},{\"name\":\"qfkuvscxkdmli\",\"value\":\"vibrxkpmloazuruo\"},{\"name\":\"goorbteo\",\"value\":\"fhjxakvvjgs\"}]}")
                .toObject(DiagnosticDataProviderMetadata.class);
        Assertions.assertEquals("vazivjlfr", model.providerName());
        Assertions.assertEquals("ajlkatnw", model.propertyBag().get(0).name());
        Assertions.assertEquals("iopid", model.propertyBag().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticDataProviderMetadata model =
            new DiagnosticDataProviderMetadata()
                .withProviderName("vazivjlfr")
                .withPropertyBag(
                    Arrays
                        .asList(
                            new DiagnosticDataProviderMetadataPropertyBagItem().withName("ajlkatnw").withValue("iopid"),
                            new DiagnosticDataProviderMetadataPropertyBagItem()
                                .withName("qfkuvscxkdmli")
                                .withValue("vibrxkpmloazuruo"),
                            new DiagnosticDataProviderMetadataPropertyBagItem()
                                .withName("goorbteo")
                                .withValue("fhjxakvvjgs")));
        model = BinaryData.fromObject(model).toObject(DiagnosticDataProviderMetadata.class);
        Assertions.assertEquals("vazivjlfr", model.providerName());
        Assertions.assertEquals("ajlkatnw", model.propertyBag().get(0).name());
        Assertions.assertEquals("iopid", model.propertyBag().get(0).value());
    }
}
