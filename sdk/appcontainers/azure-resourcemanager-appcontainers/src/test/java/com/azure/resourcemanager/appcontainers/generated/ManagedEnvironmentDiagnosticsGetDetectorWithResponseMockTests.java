// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.Diagnostics;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ManagedEnvironmentDiagnosticsGetDetectorWithResponseMockTests {
    @Test
    public void testGetDetectorWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"metadata\":{\"id\":\"gvyieztkutnjil\",\"name\":\"kkreh\",\"description\":\"tmjoduifvu\",\"author\":\"faryrvjlg\",\"category\":\"zvj\",\"supportTopicList\":[{\"id\":\"oyiyaxqv\",\"pesId\":\"eiwtczkdd\"},{\"id\":\"ovbooqbmdqrxy\",\"pesId\":\"ae\"},{\"id\":\"cflwtjdtlr\",\"pesId\":\"fooy\"}],\"analysisTypes\":[\"xdtzcqipsdudgco\",\"zomehxlantolam\"],\"type\":\"i\",\"score\":88.08132},\"dataset\":[{\"table\":{\"tableName\":\"czipvwdtgck\",\"columns\":[{},{},{},{}],\"rows\":[\"datadlrat\",\"datakwx\",\"dataauwxsuykznhrfgsl\"]},\"renderingProperties\":{\"type\":2060252494,\"title\":\"yjfzi\",\"description\":\"io\",\"isVisible\":false}},{\"table\":{\"tableName\":\"ajtfey\",\"columns\":[{},{}],\"rows\":[\"datadd\"]},\"renderingProperties\":{\"type\":521289798,\"title\":\"cxbeuuqutkzwtjww\",\"description\":\"zytijcx\",\"isVisible\":true}},{\"table\":{\"tableName\":\"egjdydhqkk\",\"columns\":[{}],\"rows\":[\"datakcat\",\"dataqbhpowcnx\",\"datapzdlyseidtoak\"]},\"renderingProperties\":{\"type\":2053903494,\"title\":\"tgrhz\",\"description\":\"fdpfawrptvcsht\",\"isVisible\":false}},{\"table\":{\"tableName\":\"ttbqgd\",\"columns\":[{}],\"rows\":[\"datam\",\"datazjgcfjfx\"]},\"renderingProperties\":{\"type\":920272152,\"title\":\"irmu\",\"description\":\"gftt\",\"isVisible\":false}}],\"status\":{\"message\":\"eoag\",\"statusId\":376615373},\"dataProviderMetadata\":{\"providerName\":\"nxodwxmdajwiyg\",\"propertyBag\":[{\"name\":\"vmdmzenlr\",\"value\":\"gfc\"},{\"name\":\"j\",\"value\":\"cidt\"},{\"name\":\"amyyznmrgcdogcv\",\"value\":\"gytoxuwhtt\"},{\"name\":\"qsaqmebgszplu\",\"value\":\"ekpdzzmssg\"}]}},\"id\":\"vokyejidbdqzsqun\",\"name\":\"cwztlvvws\",\"type\":\"mrkkyjtr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Diagnostics response = manager.managedEnvironmentDiagnostics()
            .getDetectorWithResponse("ibplnupoyryefqm", "ovyzt", "lnomfpb", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("xdtzcqipsdudgco", response.properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("czipvwdtgck", response.properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(2060252494, response.properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("yjfzi", response.properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("io", response.properties().dataset().get(0).renderingProperties().description());
        Assertions.assertFalse(response.properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("eoag", response.properties().status().message());
        Assertions.assertEquals(376615373, response.properties().status().statusId());
        Assertions.assertEquals("nxodwxmdajwiyg", response.properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("vmdmzenlr", response.properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("gfc", response.properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
