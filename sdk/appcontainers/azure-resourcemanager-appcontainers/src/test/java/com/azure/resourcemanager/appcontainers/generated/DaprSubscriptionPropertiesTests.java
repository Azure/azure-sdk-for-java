// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionProperties;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionProperties model = BinaryData.fromString(
            "{\"pubsubName\":\"umoqodkad\",\"topic\":\"yibngqladywrxwh\",\"deadLetterTopic\":\"tlu\",\"routes\":{\"rules\":[{\"match\":\"wzsnuy\",\"path\":\"lowuowhlxlnwyr\"}],\"default\":\"uvblg\"},\"scopes\":[\"zkltrfowtdvrfmv\",\"ih\",\"vjdrqcrjidhftuk\"],\"metadata\":{\"fqz\":\"xlwyoj\",\"xmbjroum\":\"kfnjyixhafrat\",\"l\":\"znv\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":991089961,\"maxAwaitDurationMs\":1555130292}}")
            .toObject(DaprSubscriptionProperties.class);
        Assertions.assertEquals("umoqodkad", model.pubsubName());
        Assertions.assertEquals("yibngqladywrxwh", model.topic());
        Assertions.assertEquals("tlu", model.deadLetterTopic());
        Assertions.assertEquals("wzsnuy", model.routes().rules().get(0).match());
        Assertions.assertEquals("lowuowhlxlnwyr", model.routes().rules().get(0).path());
        Assertions.assertEquals("uvblg", model.routes().defaultProperty());
        Assertions.assertEquals("zkltrfowtdvrfmv", model.scopes().get(0));
        Assertions.assertEquals("xlwyoj", model.metadata().get("fqz"));
        Assertions.assertFalse(model.bulkSubscribe().enabled());
        Assertions.assertEquals(991089961, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1555130292, model.bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionProperties model = new DaprSubscriptionProperties().withPubsubName("umoqodkad")
            .withTopic("yibngqladywrxwh")
            .withDeadLetterTopic("tlu")
            .withRoutes(new DaprSubscriptionRoutes()
                .withRules(
                    Arrays.asList(new DaprSubscriptionRouteRule().withMatch("wzsnuy").withPath("lowuowhlxlnwyr")))
                .withDefaultProperty("uvblg"))
            .withScopes(Arrays.asList("zkltrfowtdvrfmv", "ih", "vjdrqcrjidhftuk"))
            .withMetadata(mapOf("fqz", "xlwyoj", "xmbjroum", "kfnjyixhafrat", "l", "znv"))
            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                .withMaxMessagesCount(991089961)
                .withMaxAwaitDurationMs(1555130292));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionProperties.class);
        Assertions.assertEquals("umoqodkad", model.pubsubName());
        Assertions.assertEquals("yibngqladywrxwh", model.topic());
        Assertions.assertEquals("tlu", model.deadLetterTopic());
        Assertions.assertEquals("wzsnuy", model.routes().rules().get(0).match());
        Assertions.assertEquals("lowuowhlxlnwyr", model.routes().rules().get(0).path());
        Assertions.assertEquals("uvblg", model.routes().defaultProperty());
        Assertions.assertEquals("zkltrfowtdvrfmv", model.scopes().get(0));
        Assertions.assertEquals("xlwyoj", model.metadata().get("fqz"));
        Assertions.assertFalse(model.bulkSubscribe().enabled());
        Assertions.assertEquals(991089961, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1555130292, model.bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
