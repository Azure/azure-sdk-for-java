// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionProperties;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionProperties model = BinaryData.fromString(
            "{\"pubsubName\":\"r\",\"topic\":\"ixldzyyfy\",\"deadLetterTopic\":\"qsix\",\"routes\":{\"rules\":[{\"match\":\"jivyqlkjuv\",\"path\":\"bmslzoyov\"}],\"default\":\"dbpqvybefgvm\"},\"scopes\":[\"kcvtl\",\"bse\",\"kvcuartrhunl\"],\"metadata\":{\"jreuykbbmn\":\"ykycndzfqi\",\"xoe\":\"aglt\",\"fwmyymv\":\"onql\",\"fckdvez\":\"dbpb\"},\"bulkSubscribe\":{\"enabled\":true,\"maxMessagesCount\":1245592437,\"maxAwaitDurationMs\":701964979}}")
            .toObject(DaprSubscriptionProperties.class);
        Assertions.assertEquals("r", model.pubsubName());
        Assertions.assertEquals("ixldzyyfy", model.topic());
        Assertions.assertEquals("qsix", model.deadLetterTopic());
        Assertions.assertEquals("jivyqlkjuv", model.routes().rules().get(0).match());
        Assertions.assertEquals("bmslzoyov", model.routes().rules().get(0).path());
        Assertions.assertEquals("dbpqvybefgvm", model.routes().defaultProperty());
        Assertions.assertEquals("kcvtl", model.scopes().get(0));
        Assertions.assertEquals("ykycndzfqi", model.metadata().get("jreuykbbmn"));
        Assertions.assertEquals(true, model.bulkSubscribe().enabled());
        Assertions.assertEquals(1245592437, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(701964979, model.bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionProperties model = new DaprSubscriptionProperties().withPubsubName("r")
            .withTopic("ixldzyyfy")
            .withDeadLetterTopic("qsix")
            .withRoutes(new DaprSubscriptionRoutes()
                .withRules(Arrays.asList(new DaprSubscriptionRouteRule().withMatch("jivyqlkjuv").withPath("bmslzoyov")))
                .withDefaultProperty("dbpqvybefgvm"))
            .withScopes(Arrays.asList("kcvtl", "bse", "kvcuartrhunl"))
            .withMetadata(mapOf("jreuykbbmn", "ykycndzfqi", "xoe", "aglt", "fwmyymv", "onql", "fckdvez", "dbpb"))
            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(true)
                .withMaxMessagesCount(1245592437)
                .withMaxAwaitDurationMs(701964979));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionProperties.class);
        Assertions.assertEquals("r", model.pubsubName());
        Assertions.assertEquals("ixldzyyfy", model.topic());
        Assertions.assertEquals("qsix", model.deadLetterTopic());
        Assertions.assertEquals("jivyqlkjuv", model.routes().rules().get(0).match());
        Assertions.assertEquals("bmslzoyov", model.routes().rules().get(0).path());
        Assertions.assertEquals("dbpqvybefgvm", model.routes().defaultProperty());
        Assertions.assertEquals("kcvtl", model.scopes().get(0));
        Assertions.assertEquals("ykycndzfqi", model.metadata().get("jreuykbbmn"));
        Assertions.assertEquals(true, model.bulkSubscribe().enabled());
        Assertions.assertEquals(1245592437, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(701964979, model.bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
