// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionProperties;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionProperties model = BinaryData.fromString(
            "{\"pubsubName\":\"osbz\",\"topic\":\"hg\",\"deadLetterTopic\":\"kb\",\"routes\":{\"rules\":[{\"match\":\"lgjyyxpvels\",\"path\":\"rqz\"},{\"match\":\"xoqeintxwalj\",\"path\":\"zoblq\"},{\"match\":\"afrqulhm\",\"path\":\"qb\"},{\"match\":\"vafjrqpjiyrqj\",\"path\":\"gaxwmzwdfkbnrzo\"}],\"default\":\"dltb\"},\"scopes\":[\"qjf\",\"xxsaetgz\",\"gvpyigdaqqilzdc\"],\"metadata\":{\"gucaif\":\"joedx\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":505810781,\"maxAwaitDurationMs\":558514412}}")
            .toObject(DaprSubscriptionProperties.class);
        Assertions.assertEquals("osbz", model.pubsubName());
        Assertions.assertEquals("hg", model.topic());
        Assertions.assertEquals("kb", model.deadLetterTopic());
        Assertions.assertEquals("lgjyyxpvels", model.routes().rules().get(0).match());
        Assertions.assertEquals("rqz", model.routes().rules().get(0).path());
        Assertions.assertEquals("dltb", model.routes().defaultProperty());
        Assertions.assertEquals("qjf", model.scopes().get(0));
        Assertions.assertEquals("joedx", model.metadata().get("gucaif"));
        Assertions.assertEquals(false, model.bulkSubscribe().enabled());
        Assertions.assertEquals(505810781, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(558514412, model.bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionProperties model = new DaprSubscriptionProperties().withPubsubName("osbz")
            .withTopic("hg")
            .withDeadLetterTopic("kb")
            .withRoutes(new DaprSubscriptionRoutes()
                .withRules(Arrays.asList(new DaprSubscriptionRouteRule().withMatch("lgjyyxpvels").withPath("rqz"),
                    new DaprSubscriptionRouteRule().withMatch("xoqeintxwalj").withPath("zoblq"),
                    new DaprSubscriptionRouteRule().withMatch("afrqulhm").withPath("qb"),
                    new DaprSubscriptionRouteRule().withMatch("vafjrqpjiyrqj").withPath("gaxwmzwdfkbnrzo")))
                .withDefaultProperty("dltb"))
            .withScopes(Arrays.asList("qjf", "xxsaetgz", "gvpyigdaqqilzdc"))
            .withMetadata(mapOf("gucaif", "joedx"))
            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                .withMaxMessagesCount(505810781)
                .withMaxAwaitDurationMs(558514412));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionProperties.class);
        Assertions.assertEquals("osbz", model.pubsubName());
        Assertions.assertEquals("hg", model.topic());
        Assertions.assertEquals("kb", model.deadLetterTopic());
        Assertions.assertEquals("lgjyyxpvels", model.routes().rules().get(0).match());
        Assertions.assertEquals("rqz", model.routes().rules().get(0).path());
        Assertions.assertEquals("dltb", model.routes().defaultProperty());
        Assertions.assertEquals("qjf", model.scopes().get(0));
        Assertions.assertEquals("joedx", model.metadata().get("gucaif"));
        Assertions.assertEquals(false, model.bulkSubscribe().enabled());
        Assertions.assertEquals(505810781, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(558514412, model.bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
