// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DaprComponentResiliencyPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"inboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":819002494,\"retryBackOff\":{\"initialDelayInMilliseconds\":1597472821,\"maxIntervalInMilliseconds\":827089869}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":367407489},\"circuitBreakerPolicy\":{\"consecutiveErrors\":109368134,\"timeoutInSeconds\":741553028,\"intervalInSeconds\":1740599756}},\"outboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":2113825334,\"retryBackOff\":{\"initialDelayInMilliseconds\":144155538,\"maxIntervalInMilliseconds\":138062217}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":245192690},\"circuitBreakerPolicy\":{\"consecutiveErrors\":1746342457,\"timeoutInSeconds\":616144264,\"intervalInSeconds\":1535836834}}},\"id\":\"dxposcsl\",\"name\":\"wuusiecktybh\",\"type\":\"uxidhhxomilddxj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DaprComponentResiliencyPolicy> response = manager.daprComponentResiliencyPolicies()
            .list("ohcwhpyv", "kgdet", "z", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(819002494, response.iterator().next().inboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(1597472821,
            response.iterator().next().inboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(827089869,
            response.iterator().next().inboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(367407489,
            response.iterator().next().inboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(109368134,
            response.iterator().next().inboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(741553028,
            response.iterator().next().inboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(1740599756,
            response.iterator().next().inboundPolicy().circuitBreakerPolicy().intervalInSeconds());
        Assertions.assertEquals(2113825334, response.iterator().next().outboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(144155538,
            response.iterator().next().outboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(138062217,
            response.iterator().next().outboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(245192690,
            response.iterator().next().outboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(1746342457,
            response.iterator().next().outboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(616144264,
            response.iterator().next().outboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(1535836834,
            response.iterator().next().outboundPolicy().circuitBreakerPolicy().intervalInSeconds());
    }
}
