// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.DaprComponentResiliencyPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DaprComponentResiliencyPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"inboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":210409056,\"retryBackOff\":{\"initialDelayInMilliseconds\":115677310,\"maxIntervalInMilliseconds\":316898126}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":716267367},\"circuitBreakerPolicy\":{\"consecutiveErrors\":1116306565,\"timeoutInSeconds\":1807295181,\"intervalInSeconds\":1622954760}},\"outboundPolicy\":{\"httpRetryPolicy\":{\"maxRetries\":353529228,\"retryBackOff\":{\"initialDelayInMilliseconds\":603734439,\"maxIntervalInMilliseconds\":203578881}},\"timeoutPolicy\":{\"responseTimeoutInSeconds\":2050591523},\"circuitBreakerPolicy\":{\"consecutiveErrors\":380185510,\"timeoutInSeconds\":490867132,\"intervalInSeconds\":787891741}}},\"id\":\"kvhyejth\",\"name\":\"eecbpergwlc\",\"type\":\"ihba\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<DaprComponentResiliencyPolicy> response = manager.daprComponentResiliencyPolicies()
            .list("iib", "kcj", "tqdcizeqqfop", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(210409056, response.iterator().next().inboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(115677310,
            response.iterator().next().inboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(316898126,
            response.iterator().next().inboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(716267367,
            response.iterator().next().inboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(1116306565,
            response.iterator().next().inboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(1807295181,
            response.iterator().next().inboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(1622954760,
            response.iterator().next().inboundPolicy().circuitBreakerPolicy().intervalInSeconds());
        Assertions.assertEquals(353529228, response.iterator().next().outboundPolicy().httpRetryPolicy().maxRetries());
        Assertions.assertEquals(603734439,
            response.iterator().next().outboundPolicy().httpRetryPolicy().retryBackOff().initialDelayInMilliseconds());
        Assertions.assertEquals(203578881,
            response.iterator().next().outboundPolicy().httpRetryPolicy().retryBackOff().maxIntervalInMilliseconds());
        Assertions.assertEquals(2050591523,
            response.iterator().next().outboundPolicy().timeoutPolicy().responseTimeoutInSeconds());
        Assertions.assertEquals(380185510,
            response.iterator().next().outboundPolicy().circuitBreakerPolicy().consecutiveErrors());
        Assertions.assertEquals(490867132,
            response.iterator().next().outboundPolicy().circuitBreakerPolicy().timeoutInSeconds());
        Assertions.assertEquals(787891741,
            response.iterator().next().outboundPolicy().circuitBreakerPolicy().intervalInSeconds());
    }
}
