// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionInner;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionInner model = BinaryData.fromString(
            "{\"properties\":{\"pubsubName\":\"wphpzfngqj\",\"topic\":\"idftujwjjufwbe\",\"deadLetterTopic\":\"k\",\"routes\":{\"rules\":[{\"match\":\"ssruqnmdvhazcvj\",\"path\":\"iqswbqer\"},{\"match\":\"xiytxtdgukvl\",\"path\":\"ktg\"},{\"match\":\"tyouambewreswmow\",\"path\":\"mmuteyxeyguq\"},{\"match\":\"ijiitns\",\"path\":\"lz\"}],\"default\":\"sygrijwa\"},\"scopes\":[\"anra\",\"bfu\",\"qfrojsydgrhyd\"],\"metadata\":{\"m\":\"ywezskiecafyg\",\"a\":\"ieqvds\",\"hxalybxawo\":\"lixqcah\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":2091511430,\"maxAwaitDurationMs\":653682799}},\"id\":\"pkkwj\",\"name\":\"jodqhykincn\",\"type\":\"emehllizh\"}")
            .toObject(DaprSubscriptionInner.class);
        Assertions.assertEquals("wphpzfngqj", model.pubsubName());
        Assertions.assertEquals("idftujwjjufwbe", model.topic());
        Assertions.assertEquals("k", model.deadLetterTopic());
        Assertions.assertEquals("ssruqnmdvhazcvj", model.routes().rules().get(0).match());
        Assertions.assertEquals("iqswbqer", model.routes().rules().get(0).path());
        Assertions.assertEquals("sygrijwa", model.routes().defaultProperty());
        Assertions.assertEquals("anra", model.scopes().get(0));
        Assertions.assertEquals("ywezskiecafyg", model.metadata().get("m"));
        Assertions.assertFalse(model.bulkSubscribe().enabled());
        Assertions.assertEquals(2091511430, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(653682799, model.bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionInner model = new DaprSubscriptionInner().withPubsubName("wphpzfngqj")
            .withTopic("idftujwjjufwbe")
            .withDeadLetterTopic("k")
            .withRoutes(new DaprSubscriptionRoutes()
                .withRules(
                    Arrays.asList(new DaprSubscriptionRouteRule().withMatch("ssruqnmdvhazcvj").withPath("iqswbqer"),
                        new DaprSubscriptionRouteRule().withMatch("xiytxtdgukvl").withPath("ktg"),
                        new DaprSubscriptionRouteRule().withMatch("tyouambewreswmow").withPath("mmuteyxeyguq"),
                        new DaprSubscriptionRouteRule().withMatch("ijiitns").withPath("lz")))
                .withDefaultProperty("sygrijwa"))
            .withScopes(Arrays.asList("anra", "bfu", "qfrojsydgrhyd"))
            .withMetadata(mapOf("m", "ywezskiecafyg", "a", "ieqvds", "hxalybxawo", "lixqcah"))
            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                .withMaxMessagesCount(2091511430)
                .withMaxAwaitDurationMs(653682799));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionInner.class);
        Assertions.assertEquals("wphpzfngqj", model.pubsubName());
        Assertions.assertEquals("idftujwjjufwbe", model.topic());
        Assertions.assertEquals("k", model.deadLetterTopic());
        Assertions.assertEquals("ssruqnmdvhazcvj", model.routes().rules().get(0).match());
        Assertions.assertEquals("iqswbqer", model.routes().rules().get(0).path());
        Assertions.assertEquals("sygrijwa", model.routes().defaultProperty());
        Assertions.assertEquals("anra", model.scopes().get(0));
        Assertions.assertEquals("ywezskiecafyg", model.metadata().get("m"));
        Assertions.assertFalse(model.bulkSubscribe().enabled());
        Assertions.assertEquals(2091511430, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(653682799, model.bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
