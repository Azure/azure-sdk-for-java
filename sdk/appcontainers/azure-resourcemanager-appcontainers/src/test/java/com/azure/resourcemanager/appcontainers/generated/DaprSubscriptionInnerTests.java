// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionInner;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionInner model = BinaryData.fromString(
            "{\"properties\":{\"pubsubName\":\"zvlnsnnjz\",\"topic\":\"afolpymwamxqzrag\",\"deadLetterTopic\":\"dphtv\",\"routes\":{\"rules\":[{\"match\":\"vl\",\"path\":\"c\"}],\"default\":\"srlzknmzlan\"},\"scopes\":[\"dwv\",\"phcnzqtpj\",\"mqrhvthl\"],\"metadata\":{\"hzdtxetlgydlh\":\"dcxsmlz\",\"b\":\"vlnnpx\",\"gjekglklby\":\"fiqgeaar\"},\"bulkSubscribe\":{\"enabled\":false,\"maxMessagesCount\":2131258889,\"maxAwaitDurationMs\":1571149104}},\"id\":\"zegjonfhjirwgdn\",\"name\":\"z\",\"type\":\"rfkspzhz\"}")
            .toObject(DaprSubscriptionInner.class);
        Assertions.assertEquals("zvlnsnnjz", model.pubsubName());
        Assertions.assertEquals("afolpymwamxqzrag", model.topic());
        Assertions.assertEquals("dphtv", model.deadLetterTopic());
        Assertions.assertEquals("vl", model.routes().rules().get(0).match());
        Assertions.assertEquals("c", model.routes().rules().get(0).path());
        Assertions.assertEquals("srlzknmzlan", model.routes().defaultProperty());
        Assertions.assertEquals("dwv", model.scopes().get(0));
        Assertions.assertEquals("dcxsmlz", model.metadata().get("hzdtxetlgydlh"));
        Assertions.assertEquals(false, model.bulkSubscribe().enabled());
        Assertions.assertEquals(2131258889, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1571149104, model.bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionInner model = new DaprSubscriptionInner().withPubsubName("zvlnsnnjz")
            .withTopic("afolpymwamxqzrag").withDeadLetterTopic("dphtv")
            .withRoutes(new DaprSubscriptionRoutes()
                .withRules(Arrays.asList(new DaprSubscriptionRouteRule().withMatch("vl").withPath("c")))
                .withDefaultProperty("srlzknmzlan"))
            .withScopes(Arrays.asList("dwv", "phcnzqtpj", "mqrhvthl"))
            .withMetadata(mapOf("hzdtxetlgydlh", "dcxsmlz", "b", "vlnnpx", "gjekglklby", "fiqgeaar"))
            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(false)
                .withMaxMessagesCount(2131258889).withMaxAwaitDurationMs(1571149104));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionInner.class);
        Assertions.assertEquals("zvlnsnnjz", model.pubsubName());
        Assertions.assertEquals("afolpymwamxqzrag", model.topic());
        Assertions.assertEquals("dphtv", model.deadLetterTopic());
        Assertions.assertEquals("vl", model.routes().rules().get(0).match());
        Assertions.assertEquals("c", model.routes().rules().get(0).path());
        Assertions.assertEquals("srlzknmzlan", model.routes().defaultProperty());
        Assertions.assertEquals("dwv", model.scopes().get(0));
        Assertions.assertEquals("dcxsmlz", model.metadata().get("hzdtxetlgydlh"));
        Assertions.assertEquals(false, model.bulkSubscribe().enabled());
        Assertions.assertEquals(2131258889, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1571149104, model.bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
