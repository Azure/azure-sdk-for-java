// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprSubscriptionInner;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionBulkSubscribeOptions;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRouteRule;
import com.azure.resourcemanager.appcontainers.models.DaprSubscriptionRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DaprSubscriptionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DaprSubscriptionInner model = BinaryData.fromString(
            "{\"properties\":{\"pubsubName\":\"snbagnchjhg\",\"topic\":\"uowakyw\",\"deadLetterTopic\":\"hjym\",\"routes\":{\"rules\":[{\"match\":\"agdrcls\",\"path\":\"ljomevt\"}],\"default\":\"cnlbv\"},\"scopes\":[\"odk\",\"gjiiytssiki\"],\"metadata\":{\"mqso\":\"ufqbvntnr\",\"cpwzv\":\"hcekxgnlykm\",\"qba\":\"doksqdtiwlwxlbon\",\"xbyja\":\"qicqchygt\"},\"bulkSubscribe\":{\"enabled\":true,\"maxMessagesCount\":2100861051,\"maxAwaitDurationMs\":1434725351}},\"id\":\"yqvgxia\",\"name\":\"detv\",\"type\":\"hkxdxuwsaifmc\"}")
            .toObject(DaprSubscriptionInner.class);
        Assertions.assertEquals("snbagnchjhg", model.pubsubName());
        Assertions.assertEquals("uowakyw", model.topic());
        Assertions.assertEquals("hjym", model.deadLetterTopic());
        Assertions.assertEquals("agdrcls", model.routes().rules().get(0).match());
        Assertions.assertEquals("ljomevt", model.routes().rules().get(0).path());
        Assertions.assertEquals("cnlbv", model.routes().defaultProperty());
        Assertions.assertEquals("odk", model.scopes().get(0));
        Assertions.assertEquals("ufqbvntnr", model.metadata().get("mqso"));
        Assertions.assertEquals(true, model.bulkSubscribe().enabled());
        Assertions.assertEquals(2100861051, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1434725351, model.bulkSubscribe().maxAwaitDurationMs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DaprSubscriptionInner model = new DaprSubscriptionInner().withPubsubName("snbagnchjhg")
            .withTopic("uowakyw")
            .withDeadLetterTopic("hjym")
            .withRoutes(new DaprSubscriptionRoutes()
                .withRules(Arrays.asList(new DaprSubscriptionRouteRule().withMatch("agdrcls").withPath("ljomevt")))
                .withDefaultProperty("cnlbv"))
            .withScopes(Arrays.asList("odk", "gjiiytssiki"))
            .withMetadata(
                mapOf("mqso", "ufqbvntnr", "cpwzv", "hcekxgnlykm", "qba", "doksqdtiwlwxlbon", "xbyja", "qicqchygt"))
            .withBulkSubscribe(new DaprSubscriptionBulkSubscribeOptions().withEnabled(true)
                .withMaxMessagesCount(2100861051)
                .withMaxAwaitDurationMs(1434725351));
        model = BinaryData.fromObject(model).toObject(DaprSubscriptionInner.class);
        Assertions.assertEquals("snbagnchjhg", model.pubsubName());
        Assertions.assertEquals("uowakyw", model.topic());
        Assertions.assertEquals("hjym", model.deadLetterTopic());
        Assertions.assertEquals("agdrcls", model.routes().rules().get(0).match());
        Assertions.assertEquals("ljomevt", model.routes().rules().get(0).path());
        Assertions.assertEquals("cnlbv", model.routes().defaultProperty());
        Assertions.assertEquals("odk", model.scopes().get(0));
        Assertions.assertEquals("ufqbvntnr", model.metadata().get("mqso"));
        Assertions.assertEquals(true, model.bulkSubscribe().enabled());
        Assertions.assertEquals(2100861051, model.bulkSubscribe().maxMessagesCount());
        Assertions.assertEquals(1434725351, model.bulkSubscribe().maxAwaitDurationMs());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
