// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.models.AzureActiveDirectory;
import com.azure.resourcemanager.appcontainers.models.AzureActiveDirectoryLogin;
import com.azure.resourcemanager.appcontainers.models.AzureActiveDirectoryRegistration;
import com.azure.resourcemanager.appcontainers.models.AzureActiveDirectoryValidation;
import com.azure.resourcemanager.appcontainers.models.DefaultAuthorizationPolicy;
import com.azure.resourcemanager.appcontainers.models.JwtClaimChecks;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureActiveDirectoryTests {
    @Test
    public void testDeserialize() {
        AzureActiveDirectory model =
            BinaryData
                .fromString(
                    "{\"enabled\":false,\"registration\":{\"openIdIssuer\":\"pdappds\",\"clientId\":\"kvwrwjfeu\",\"clientSecretSettingName\":\"hutje\",\"clientSecretCertificateThumbprint\":\"mrldhu\",\"clientSecretCertificateSubjectAlternativeName\":\"zzd\",\"clientSecretCertificateIssuer\":\"qxhocdgeablgphut\"},\"login\":{\"loginParameters\":[\"vkaozwyiftyhxhur\",\"k\"],\"disableWWWAuthenticate\":false},\"validation\":{\"jwtClaimChecks\":{\"allowedGroups\":[\"iwpwcuk\",\"fkgiawxk\",\"ryplwckbasyypn\"],\"allowedClientApplications\":[\"sgcbac\",\"hejkotynqgou\",\"zndlikwy\",\"kgfg\"]},\"allowedAudiences\":[\"adgakeqsrxybz\",\"qedqytbciqfoufl\",\"mnkzsmod\",\"glougpbk\"],\"defaultAuthorizationPolicy\":{\"allowedApplications\":[\"duqkt\",\"pspwgcuertu\",\"kdosvqw\",\"bmdg\"]}},\"isAutoProvisioned\":true}")
                .toObject(AzureActiveDirectory.class);
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("pdappds", model.registration().openIdIssuer());
        Assertions.assertEquals("kvwrwjfeu", model.registration().clientId());
        Assertions.assertEquals("hutje", model.registration().clientSecretSettingName());
        Assertions.assertEquals("mrldhu", model.registration().clientSecretCertificateThumbprint());
        Assertions.assertEquals("zzd", model.registration().clientSecretCertificateSubjectAlternativeName());
        Assertions.assertEquals("qxhocdgeablgphut", model.registration().clientSecretCertificateIssuer());
        Assertions.assertEquals("vkaozwyiftyhxhur", model.login().loginParameters().get(0));
        Assertions.assertEquals(false, model.login().disableWwwAuthenticate());
        Assertions.assertEquals("iwpwcuk", model.validation().jwtClaimChecks().allowedGroups().get(0));
        Assertions.assertEquals("sgcbac", model.validation().jwtClaimChecks().allowedClientApplications().get(0));
        Assertions.assertEquals("adgakeqsrxybz", model.validation().allowedAudiences().get(0));
        Assertions.assertEquals("duqkt", model.validation().defaultAuthorizationPolicy().allowedApplications().get(0));
        Assertions.assertEquals(true, model.isAutoProvisioned());
    }

    @Test
    public void testSerialize() {
        AzureActiveDirectory model =
            new AzureActiveDirectory()
                .withEnabled(false)
                .withRegistration(
                    new AzureActiveDirectoryRegistration()
                        .withOpenIdIssuer("pdappds")
                        .withClientId("kvwrwjfeu")
                        .withClientSecretSettingName("hutje")
                        .withClientSecretCertificateThumbprint("mrldhu")
                        .withClientSecretCertificateSubjectAlternativeName("zzd")
                        .withClientSecretCertificateIssuer("qxhocdgeablgphut"))
                .withLogin(
                    new AzureActiveDirectoryLogin()
                        .withLoginParameters(Arrays.asList("vkaozwyiftyhxhur", "k"))
                        .withDisableWwwAuthenticate(false))
                .withValidation(
                    new AzureActiveDirectoryValidation()
                        .withJwtClaimChecks(
                            new JwtClaimChecks()
                                .withAllowedGroups(Arrays.asList("iwpwcuk", "fkgiawxk", "ryplwckbasyypn"))
                                .withAllowedClientApplications(
                                    Arrays.asList("sgcbac", "hejkotynqgou", "zndlikwy", "kgfg")))
                        .withAllowedAudiences(Arrays.asList("adgakeqsrxybz", "qedqytbciqfoufl", "mnkzsmod", "glougpbk"))
                        .withDefaultAuthorizationPolicy(
                            new DefaultAuthorizationPolicy()
                                .withAllowedApplications(Arrays.asList("duqkt", "pspwgcuertu", "kdosvqw", "bmdg"))))
                .withIsAutoProvisioned(true);
        model = BinaryData.fromObject(model).toObject(AzureActiveDirectory.class);
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("pdappds", model.registration().openIdIssuer());
        Assertions.assertEquals("kvwrwjfeu", model.registration().clientId());
        Assertions.assertEquals("hutje", model.registration().clientSecretSettingName());
        Assertions.assertEquals("mrldhu", model.registration().clientSecretCertificateThumbprint());
        Assertions.assertEquals("zzd", model.registration().clientSecretCertificateSubjectAlternativeName());
        Assertions.assertEquals("qxhocdgeablgphut", model.registration().clientSecretCertificateIssuer());
        Assertions.assertEquals("vkaozwyiftyhxhur", model.login().loginParameters().get(0));
        Assertions.assertEquals(false, model.login().disableWwwAuthenticate());
        Assertions.assertEquals("iwpwcuk", model.validation().jwtClaimChecks().allowedGroups().get(0));
        Assertions.assertEquals("sgcbac", model.validation().jwtClaimChecks().allowedClientApplications().get(0));
        Assertions.assertEquals("adgakeqsrxybz", model.validation().allowedAudiences().get(0));
        Assertions.assertEquals("duqkt", model.validation().defaultAuthorizationPolicy().allowedApplications().get(0));
        Assertions.assertEquals(true, model.isAutoProvisioned());
    }
}
