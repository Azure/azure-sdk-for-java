// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DiagnosticsInner;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataProviderMetadata;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataProviderMetadataPropertyBagItem;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataTableResponseColumn;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataTableResponseObject;
import com.azure.resourcemanager.appcontainers.models.DiagnosticRendering;
import com.azure.resourcemanager.appcontainers.models.DiagnosticSupportTopic;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsDataApiResponse;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsDefinition;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsProperties;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticsInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticsInner model = BinaryData.fromString(
            "{\"properties\":{\"metadata\":{\"id\":\"oorb\",\"name\":\"oybfhjxakvvj\",\"description\":\"lordilmywwtkgkxn\",\"author\":\"dabg\",\"category\":\"udtjuewbc\",\"supportTopicList\":[{\"id\":\"uwhcjyxccybv\",\"pesId\":\"yakk\"},{\"id\":\"zp\",\"pesId\":\"wjplma\"}],\"analysisTypes\":[\"cyohpfkyrkdbd\",\"iogsjkmnwq\",\"nobaiyhddviacegf\"],\"type\":\"ntfpmvmemfnc\",\"score\":20.505016},\"dataset\":[{\"table\":{\"tableName\":\"lxlllchpo\",\"columns\":[{},{},{},{}],\"rows\":[\"datawrd\",\"datahfuk\",\"datavsjcswsmystuluqy\",\"datafcvlerch\"]},\"renderingProperties\":{\"type\":2097713750,\"title\":\"pjbabwidfc\",\"description\":\"spuunnoxyhkxgq\",\"isVisible\":false}},{\"table\":{\"tableName\":\"pfhoqcaaewdao\",\"columns\":[{},{},{}],\"rows\":[\"datapjxxkzb\"]},\"renderingProperties\":{\"type\":1373073585,\"title\":\"ivsiy\",\"description\":\"kdncj\",\"isVisible\":true}},{\"table\":{\"tableName\":\"zoggculapz\",\"columns\":[{},{},{}],\"rows\":[\"dataogtqxepnylbf\",\"dataajlyjtlvofqzhv\",\"datacib\",\"datafmo\"]},\"renderingProperties\":{\"type\":1105067830,\"title\":\"jpvd\",\"description\":\"fzwiivwzjbhyz\",\"isVisible\":true}}],\"status\":{\"message\":\"ambtrnegvm\",\"statusId\":1133584859},\"dataProviderMetadata\":{\"providerName\":\"qvldspastjbkkd\",\"propertyBag\":[{\"name\":\"est\",\"value\":\"lx\"}]}},\"id\":\"ilozapeewchpxlk\",\"name\":\"wk\",\"type\":\"ziycslevufuztck\"}")
            .toObject(DiagnosticsInner.class);
        Assertions.assertEquals("cyohpfkyrkdbd", model.properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("lxlllchpo", model.properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(2097713750, model.properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("pjbabwidfc", model.properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("spuunnoxyhkxgq",
            model.properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(false, model.properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("ambtrnegvm", model.properties().status().message());
        Assertions.assertEquals(1133584859, model.properties().status().statusId());
        Assertions.assertEquals("qvldspastjbkkd", model.properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("est", model.properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("lx", model.properties().dataProviderMetadata().propertyBag().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticsInner model = new DiagnosticsInner().withProperties(new DiagnosticsProperties()
            .withMetadata(new DiagnosticsDefinition()
                .withSupportTopicList(Arrays.asList(new DiagnosticSupportTopic(), new DiagnosticSupportTopic()))
                .withAnalysisTypes(Arrays.asList("cyohpfkyrkdbd", "iogsjkmnwq", "nobaiyhddviacegf")))
            .withDataset(Arrays.asList(
                new DiagnosticsDataApiResponse()
                    .withTable(new DiagnosticDataTableResponseObject().withTableName("lxlllchpo")
                        .withColumns(Arrays.asList(new DiagnosticDataTableResponseColumn(),
                            new DiagnosticDataTableResponseColumn(), new DiagnosticDataTableResponseColumn(),
                            new DiagnosticDataTableResponseColumn()))
                        .withRows(Arrays.asList("datawrd", "datahfuk", "datavsjcswsmystuluqy", "datafcvlerch")))
                    .withRenderingProperties(new DiagnosticRendering().withType(2097713750)
                        .withTitle("pjbabwidfc")
                        .withDescription("spuunnoxyhkxgq")
                        .withIsVisible(false)),
                new DiagnosticsDataApiResponse()
                    .withTable(new DiagnosticDataTableResponseObject().withTableName("pfhoqcaaewdao")
                        .withColumns(Arrays.asList(new DiagnosticDataTableResponseColumn(),
                            new DiagnosticDataTableResponseColumn(), new DiagnosticDataTableResponseColumn()))
                        .withRows(Arrays.asList("datapjxxkzb")))
                    .withRenderingProperties(new DiagnosticRendering().withType(1373073585)
                        .withTitle("ivsiy")
                        .withDescription("kdncj")
                        .withIsVisible(true)),
                new DiagnosticsDataApiResponse()
                    .withTable(new DiagnosticDataTableResponseObject().withTableName("zoggculapz")
                        .withColumns(Arrays.asList(new DiagnosticDataTableResponseColumn(),
                            new DiagnosticDataTableResponseColumn(), new DiagnosticDataTableResponseColumn()))
                        .withRows(Arrays.asList("dataogtqxepnylbf", "dataajlyjtlvofqzhv", "datacib", "datafmo")))
                    .withRenderingProperties(new DiagnosticRendering().withType(1105067830)
                        .withTitle("jpvd")
                        .withDescription("fzwiivwzjbhyz")
                        .withIsVisible(true))))
            .withStatus(new DiagnosticsStatus().withMessage("ambtrnegvm").withStatusId(1133584859))
            .withDataProviderMetadata(new DiagnosticDataProviderMetadata().withProviderName("qvldspastjbkkd")
                .withPropertyBag(Arrays
                    .asList(new DiagnosticDataProviderMetadataPropertyBagItem().withName("est").withValue("lx")))));
        model = BinaryData.fromObject(model).toObject(DiagnosticsInner.class);
        Assertions.assertEquals("cyohpfkyrkdbd", model.properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("lxlllchpo", model.properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(2097713750, model.properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("pjbabwidfc", model.properties().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("spuunnoxyhkxgq",
            model.properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(false, model.properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("ambtrnegvm", model.properties().status().message());
        Assertions.assertEquals(1133584859, model.properties().status().statusId());
        Assertions.assertEquals("qvldspastjbkkd", model.properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("est", model.properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("lx", model.properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
