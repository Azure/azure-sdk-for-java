// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appcontainers.fluent.models.DiagnosticsInner;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataProviderMetadata;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataProviderMetadataPropertyBagItem;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataTableResponseColumn;
import com.azure.resourcemanager.appcontainers.models.DiagnosticDataTableResponseObject;
import com.azure.resourcemanager.appcontainers.models.DiagnosticRendering;
import com.azure.resourcemanager.appcontainers.models.DiagnosticSupportTopic;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsDataApiResponse;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsDefinition;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsProperties;
import com.azure.resourcemanager.appcontainers.models.DiagnosticsStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticsInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticsInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"metadata\":{\"id\":\"gh\",\"name\":\"bdhqxvcxgf\",\"description\":\"dsofbshrns\",\"author\":\"uswdv\",\"category\":\"ybycnunvj\",\"supportTopicList\":[{\"id\":\"f\",\"pesId\":\"nopqgikyzirtx\"}],\"analysisTypes\":[\"x\",\"ejnt\",\"sewgioilqukr\"],\"type\":\"xtqmieoxor\",\"score\":64.62172},\"dataset\":[{\"table\":{\"tableName\":\"omtbghhavgrvkff\",\"columns\":[{},{},{},{}],\"rows\":[\"datapjbi\",\"datagjmfxumvfcl\"]},\"renderingProperties\":{\"type\":2107633088,\"title\":\"xnbkfezzxscyhwzd\",\"description\":\"rujbzbomvzzbtdc\",\"isVisible\":true}},{\"table\":{\"tableName\":\"yujviylwdshfssn\",\"columns\":[{}],\"rows\":[\"datafrymsgaojfmwnc\"]},\"renderingProperties\":{\"type\":700953056,\"title\":\"hirctymoxoftpipi\",\"description\":\"czuhxacpqjlihh\",\"isVisible\":true}},{\"table\":{\"tableName\":\"kasdvlm\",\"columns\":[{},{},{},{}],\"rows\":[\"datax\",\"datalucvpam\",\"datasreuzvxurisjnh\",\"dataytxifqjzgxmrh\"]},\"renderingProperties\":{\"type\":403382899,\"title\":\"cesutrgjupauut\",\"description\":\"oqh\",\"isVisible\":false}},{\"table\":{\"tableName\":\"g\",\"columns\":[{},{},{}],\"rows\":[\"dataqntcypsxjvfoimwk\",\"datalirc\"]},\"renderingProperties\":{\"type\":1956254866,\"title\":\"ydfce\",\"description\":\"vlhv\",\"isVisible\":true}}],\"status\":{\"message\":\"t\",\"statusId\":642737212},\"dataProviderMetadata\":{\"providerName\":\"nawjslbiwkojgcy\",\"propertyBag\":[{\"name\":\"mznbaeqphch\",\"value\":\"rn\"},{\"name\":\"x\",\"value\":\"uwrykqgaifmvikl\"},{\"name\":\"dvk\",\"value\":\"ejd\"}]}},\"id\":\"nxcvds\",\"name\":\"hnjivo\",\"type\":\"v\"}")
                .toObject(DiagnosticsInner.class);
        Assertions.assertEquals("x", model.properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("omtbghhavgrvkff", model.properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(2107633088, model.properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("xnbkfezzxscyhwzd", model.properties().dataset().get(0).renderingProperties().title());
        Assertions
            .assertEquals("rujbzbomvzzbtdc", model.properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(true, model.properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("t", model.properties().status().message());
        Assertions.assertEquals(642737212, model.properties().status().statusId());
        Assertions.assertEquals("nawjslbiwkojgcy", model.properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("mznbaeqphch", model.properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("rn", model.properties().dataProviderMetadata().propertyBag().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticsInner model =
            new DiagnosticsInner()
                .withProperties(
                    new DiagnosticsProperties()
                        .withMetadata(
                            new DiagnosticsDefinition()
                                .withSupportTopicList(Arrays.asList(new DiagnosticSupportTopic()))
                                .withAnalysisTypes(Arrays.asList("x", "ejnt", "sewgioilqukr")))
                        .withDataset(
                            Arrays
                                .asList(
                                    new DiagnosticsDataApiResponse()
                                        .withTable(
                                            new DiagnosticDataTableResponseObject()
                                                .withTableName("omtbghhavgrvkff")
                                                .withColumns(
                                                    Arrays
                                                        .asList(
                                                            new DiagnosticDataTableResponseColumn(),
                                                            new DiagnosticDataTableResponseColumn(),
                                                            new DiagnosticDataTableResponseColumn(),
                                                            new DiagnosticDataTableResponseColumn()))
                                                .withRows(Arrays.asList("datapjbi", "datagjmfxumvfcl")))
                                        .withRenderingProperties(
                                            new DiagnosticRendering()
                                                .withType(2107633088)
                                                .withTitle("xnbkfezzxscyhwzd")
                                                .withDescription("rujbzbomvzzbtdc")
                                                .withIsVisible(true)),
                                    new DiagnosticsDataApiResponse()
                                        .withTable(
                                            new DiagnosticDataTableResponseObject()
                                                .withTableName("yujviylwdshfssn")
                                                .withColumns(Arrays.asList(new DiagnosticDataTableResponseColumn()))
                                                .withRows(Arrays.asList("datafrymsgaojfmwnc")))
                                        .withRenderingProperties(
                                            new DiagnosticRendering()
                                                .withType(700953056)
                                                .withTitle("hirctymoxoftpipi")
                                                .withDescription("czuhxacpqjlihh")
                                                .withIsVisible(true)),
                                    new DiagnosticsDataApiResponse()
                                        .withTable(
                                            new DiagnosticDataTableResponseObject()
                                                .withTableName("kasdvlm")
                                                .withColumns(
                                                    Arrays
                                                        .asList(
                                                            new DiagnosticDataTableResponseColumn(),
                                                            new DiagnosticDataTableResponseColumn(),
                                                            new DiagnosticDataTableResponseColumn(),
                                                            new DiagnosticDataTableResponseColumn()))
                                                .withRows(
                                                    Arrays
                                                        .asList(
                                                            "datax",
                                                            "datalucvpam",
                                                            "datasreuzvxurisjnh",
                                                            "dataytxifqjzgxmrh")))
                                        .withRenderingProperties(
                                            new DiagnosticRendering()
                                                .withType(403382899)
                                                .withTitle("cesutrgjupauut")
                                                .withDescription("oqh")
                                                .withIsVisible(false)),
                                    new DiagnosticsDataApiResponse()
                                        .withTable(
                                            new DiagnosticDataTableResponseObject()
                                                .withTableName("g")
                                                .withColumns(
                                                    Arrays
                                                        .asList(
                                                            new DiagnosticDataTableResponseColumn(),
                                                            new DiagnosticDataTableResponseColumn(),
                                                            new DiagnosticDataTableResponseColumn()))
                                                .withRows(Arrays.asList("dataqntcypsxjvfoimwk", "datalirc")))
                                        .withRenderingProperties(
                                            new DiagnosticRendering()
                                                .withType(1956254866)
                                                .withTitle("ydfce")
                                                .withDescription("vlhv")
                                                .withIsVisible(true))))
                        .withStatus(new DiagnosticsStatus().withMessage("t").withStatusId(642737212))
                        .withDataProviderMetadata(
                            new DiagnosticDataProviderMetadata()
                                .withProviderName("nawjslbiwkojgcy")
                                .withPropertyBag(
                                    Arrays
                                        .asList(
                                            new DiagnosticDataProviderMetadataPropertyBagItem()
                                                .withName("mznbaeqphch")
                                                .withValue("rn"),
                                            new DiagnosticDataProviderMetadataPropertyBagItem()
                                                .withName("x")
                                                .withValue("uwrykqgaifmvikl"),
                                            new DiagnosticDataProviderMetadataPropertyBagItem()
                                                .withName("dvk")
                                                .withValue("ejd")))));
        model = BinaryData.fromObject(model).toObject(DiagnosticsInner.class);
        Assertions.assertEquals("x", model.properties().metadata().analysisTypes().get(0));
        Assertions.assertEquals("omtbghhavgrvkff", model.properties().dataset().get(0).table().tableName());
        Assertions.assertEquals(2107633088, model.properties().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("xnbkfezzxscyhwzd", model.properties().dataset().get(0).renderingProperties().title());
        Assertions
            .assertEquals("rujbzbomvzzbtdc", model.properties().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals(true, model.properties().dataset().get(0).renderingProperties().isVisible());
        Assertions.assertEquals("t", model.properties().status().message());
        Assertions.assertEquals(642737212, model.properties().status().statusId());
        Assertions.assertEquals("nawjslbiwkojgcy", model.properties().dataProviderMetadata().providerName());
        Assertions.assertEquals("mznbaeqphch", model.properties().dataProviderMetadata().propertyBag().get(0).name());
        Assertions.assertEquals("rn", model.properties().dataProviderMetadata().propertyBag().get(0).value());
    }
}
