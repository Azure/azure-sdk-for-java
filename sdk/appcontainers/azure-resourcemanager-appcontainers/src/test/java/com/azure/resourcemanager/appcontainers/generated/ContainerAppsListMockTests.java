// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcontainers.ContainerAppsApiManager;
import com.azure.resourcemanager.appcontainers.models.ActiveRevisionsMode;
import com.azure.resourcemanager.appcontainers.models.ContainerApp;
import com.azure.resourcemanager.appcontainers.models.ExtendedLocationTypes;
import com.azure.resourcemanager.appcontainers.models.ManagedServiceIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ContainerAppsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"extendedLocation\":{\"name\":\"snmokayzej\",\"type\":\"CustomLocation\"},\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"properties\":{\"provisioningState\":\"InProgress\",\"managedEnvironmentId\":\"jh\",\"environmentId\":\"zv\",\"workloadProfileType\":\"h\",\"latestRevisionName\":\"bnwieholew\",\"latestRevisionFqdn\":\"iuubwefqsf\",\"customDomainVerificationId\":\"aqtferr\",\"configuration\":{\"secrets\":[],\"activeRevisionsMode\":\"Single\",\"registries\":[],\"maxInactiveRevisions\":2076529802},\"template\":{\"revisionSuffix\":\"wogqqnobpudcdab\",\"initContainers\":[],\"containers\":[],\"volumes\":[]},\"outboundIpAddresses\":[\"wbzasqbuclj\",\"kyexaoguyaipi\"],\"eventStreamEndpoint\":\"daultxijjumfq\"},\"location\":\"z\",\"tags\":{\"jng\":\"nm\",\"bjwgnyfus\":\"qdqx\",\"fh\":\"zsvtuikzhajqgl\"},\"id\":\"l\",\"name\":\"qryxyn\",\"type\":\"nzrdpsovwxz\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ContainerAppsApiManager manager =
            ContainerAppsApiManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ContainerApp> response = manager.containerApps().list(Context.NONE);

        Assertions.assertEquals("z", response.iterator().next().location());
        Assertions.assertEquals("nm", response.iterator().next().tags().get("jng"));
        Assertions.assertEquals("snmokayzej", response.iterator().next().extendedLocation().name());
        Assertions
            .assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, response.iterator().next().extendedLocation().type());
        Assertions
            .assertEquals(
                ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("jh", response.iterator().next().managedEnvironmentId());
        Assertions.assertEquals("zv", response.iterator().next().environmentId());
        Assertions.assertEquals("h", response.iterator().next().workloadProfileType());
        Assertions
            .assertEquals(ActiveRevisionsMode.SINGLE, response.iterator().next().configuration().activeRevisionsMode());
        Assertions.assertEquals(2076529802, response.iterator().next().configuration().maxInactiveRevisions());
        Assertions.assertEquals("wogqqnobpudcdab", response.iterator().next().template().revisionSuffix());
    }
}
