// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionWithUpdateTypeInner;
import com.azure.resourcemanager.workloadorchestration.models.OrchestratorType;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersionProperties;
import com.azure.resourcemanager.workloadorchestration.models.UpdateType;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SolutionTemplates CreateVersion.
 */
public final class SolutionTemplatesCreateVersionSamples {
    /*
     * x-ms-original-file: 2025-06-01/SolutionTemplates_CreateVersion_MaximumSet_Gen.json
     */
    /**
     * Sample code: SolutionTemplates_CreateVersion_MaximumSet.
     * 
     * @param manager Entry point to WorkloadOrchestrationManager.
     */
    public static void solutionTemplatesCreateVersionMaximumSet(
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager) {
        manager.solutionTemplates()
            .createVersion("rgconfigurationmanager", "testname",
                new SolutionTemplateVersionWithUpdateTypeInner().withUpdateType(UpdateType.MAJOR)
                    .withVersion("1.0.0")
                    .withSolutionTemplateVersion(new SolutionTemplateVersionInner().withProperties(
                        new SolutionTemplateVersionProperties().withConfigurations("ofqcsavwmeuwmvtjnqpoybtjvkmrlh")
                            .withSpecification(mapOf())
                            .withOrchestratorType(OrchestratorType.TO))),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
