// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.Target;
import com.azure.resourcemanager.workloadorchestration.models.TargetProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Targets Update.
 */
public final class TargetsUpdateSamples {
    /*
     * x-ms-original-file: 2025-06-01/Targets_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: Targets_Update_MaximumSet.
     * 
     * @param manager Entry point to WorkloadOrchestrationManager.
     */
    public static void
        targetsUpdateMaximumSet(com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager) {
        Target resource = manager.targets()
            .getByResourceGroupWithResponse("rgconfigurationmanager", "testname", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key8026", "fakeTokenPlaceholder"))
            .withProperties(new TargetProperties().withDescription("yhnhdpznncdvncmnvoeohqjx")
                .withDisplayName("pguujtzjjvixgjitugybrefp")
                .withContextId(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}")
                .withTargetSpecification(mapOf())
                .withCapabilities(Arrays.asList("dasqhyxfakivfzqb"))
                .withHierarchyLevel("hfyntwxetgsmnucbjvvphtyxu")
                .withSolutionScope("testname")
                .withState(ResourceState.ACTIVE))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
