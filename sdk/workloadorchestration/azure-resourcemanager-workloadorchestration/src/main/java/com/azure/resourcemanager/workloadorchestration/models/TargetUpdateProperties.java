// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The updatable properties of the Target.
 */
@Fluent
public final class TargetUpdateProperties implements JsonSerializable<TargetUpdateProperties> {
    /*
     * Description of target
     */
    private String description;

    /*
     * Display name of target
     */
    private String displayName;

    /*
     * ArmId of Context
     */
    private String contextId;

    /*
     * target spec
     */
    private Map<String, BinaryData> targetSpecification;

    /*
     * List of capabilities
     */
    private List<String> capabilities;

    /*
     * Hierarchy Level
     */
    private String hierarchyLevel;

    /*
     * Scope of the target resource
     */
    private String solutionScope;

    /*
     * State of resource
     */
    private ResourceState state;

    /**
     * Creates an instance of TargetUpdateProperties class.
     */
    public TargetUpdateProperties() {
    }

    /**
     * Get the description property: Description of target.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of target.
     * 
     * @param description the description value to set.
     * @return the TargetUpdateProperties object itself.
     */
    public TargetUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: Display name of target.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of target.
     * 
     * @param displayName the displayName value to set.
     * @return the TargetUpdateProperties object itself.
     */
    public TargetUpdateProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the contextId property: ArmId of Context.
     * 
     * @return the contextId value.
     */
    public String contextId() {
        return this.contextId;
    }

    /**
     * Set the contextId property: ArmId of Context.
     * 
     * @param contextId the contextId value to set.
     * @return the TargetUpdateProperties object itself.
     */
    public TargetUpdateProperties withContextId(String contextId) {
        this.contextId = contextId;
        return this;
    }

    /**
     * Get the targetSpecification property: target spec.
     * 
     * @return the targetSpecification value.
     */
    public Map<String, BinaryData> targetSpecification() {
        return this.targetSpecification;
    }

    /**
     * Set the targetSpecification property: target spec.
     * 
     * @param targetSpecification the targetSpecification value to set.
     * @return the TargetUpdateProperties object itself.
     */
    public TargetUpdateProperties withTargetSpecification(Map<String, BinaryData> targetSpecification) {
        this.targetSpecification = targetSpecification;
        return this;
    }

    /**
     * Get the capabilities property: List of capabilities.
     * 
     * @return the capabilities value.
     */
    public List<String> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: List of capabilities.
     * 
     * @param capabilities the capabilities value to set.
     * @return the TargetUpdateProperties object itself.
     */
    public TargetUpdateProperties withCapabilities(List<String> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the hierarchyLevel property: Hierarchy Level.
     * 
     * @return the hierarchyLevel value.
     */
    public String hierarchyLevel() {
        return this.hierarchyLevel;
    }

    /**
     * Set the hierarchyLevel property: Hierarchy Level.
     * 
     * @param hierarchyLevel the hierarchyLevel value to set.
     * @return the TargetUpdateProperties object itself.
     */
    public TargetUpdateProperties withHierarchyLevel(String hierarchyLevel) {
        this.hierarchyLevel = hierarchyLevel;
        return this;
    }

    /**
     * Get the solutionScope property: Scope of the target resource.
     * 
     * @return the solutionScope value.
     */
    public String solutionScope() {
        return this.solutionScope;
    }

    /**
     * Set the solutionScope property: Scope of the target resource.
     * 
     * @param solutionScope the solutionScope value to set.
     * @return the TargetUpdateProperties object itself.
     */
    public TargetUpdateProperties withSolutionScope(String solutionScope) {
        this.solutionScope = solutionScope;
        return this;
    }

    /**
     * Get the state property: State of resource.
     * 
     * @return the state value.
     */
    public ResourceState state() {
        return this.state;
    }

    /**
     * Set the state property: State of resource.
     * 
     * @param state the state value to set.
     * @return the TargetUpdateProperties object itself.
     */
    public TargetUpdateProperties withState(ResourceState state) {
        this.state = state;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("contextId", this.contextId);
        jsonWriter.writeMapField("targetSpecification", this.targetSpecification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("hierarchyLevel", this.hierarchyLevel);
        jsonWriter.writeStringField("solutionScope", this.solutionScope);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetUpdateProperties.
     */
    public static TargetUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetUpdateProperties deserializedTargetUpdateProperties = new TargetUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedTargetUpdateProperties.description = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedTargetUpdateProperties.displayName = reader.getString();
                } else if ("contextId".equals(fieldName)) {
                    deserializedTargetUpdateProperties.contextId = reader.getString();
                } else if ("targetSpecification".equals(fieldName)) {
                    Map<String, BinaryData> targetSpecification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedTargetUpdateProperties.targetSpecification = targetSpecification;
                } else if ("capabilities".equals(fieldName)) {
                    List<String> capabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedTargetUpdateProperties.capabilities = capabilities;
                } else if ("hierarchyLevel".equals(fieldName)) {
                    deserializedTargetUpdateProperties.hierarchyLevel = reader.getString();
                } else if ("solutionScope".equals(fieldName)) {
                    deserializedTargetUpdateProperties.solutionScope = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedTargetUpdateProperties.state = ResourceState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetUpdateProperties;
        });
    }
}
