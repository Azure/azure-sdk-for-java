// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Bulk publish solution parameter.
 */
@Fluent
public final class BulkPublishSolutionParameter implements JsonSerializable<BulkPublishSolutionParameter> {
    /*
     * Targets to which solution needs to be published
     */
    private List<BulkPublishTargetDetails> targets;

    /*
     * Name of the solution instance
     */
    private String solutionInstanceName;

    /*
     * Solution dependencies
     */
    private List<SolutionDependencyParameter> solutionDependencies;

    /**
     * Creates an instance of BulkPublishSolutionParameter class.
     */
    public BulkPublishSolutionParameter() {
    }

    /**
     * Get the targets property: Targets to which solution needs to be published.
     * 
     * @return the targets value.
     */
    public List<BulkPublishTargetDetails> targets() {
        return this.targets;
    }

    /**
     * Set the targets property: Targets to which solution needs to be published.
     * 
     * @param targets the targets value to set.
     * @return the BulkPublishSolutionParameter object itself.
     */
    public BulkPublishSolutionParameter withTargets(List<BulkPublishTargetDetails> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * Get the solutionInstanceName property: Name of the solution instance.
     * 
     * @return the solutionInstanceName value.
     */
    public String solutionInstanceName() {
        return this.solutionInstanceName;
    }

    /**
     * Set the solutionInstanceName property: Name of the solution instance.
     * 
     * @param solutionInstanceName the solutionInstanceName value to set.
     * @return the BulkPublishSolutionParameter object itself.
     */
    public BulkPublishSolutionParameter withSolutionInstanceName(String solutionInstanceName) {
        this.solutionInstanceName = solutionInstanceName;
        return this;
    }

    /**
     * Get the solutionDependencies property: Solution dependencies.
     * 
     * @return the solutionDependencies value.
     */
    public List<SolutionDependencyParameter> solutionDependencies() {
        return this.solutionDependencies;
    }

    /**
     * Set the solutionDependencies property: Solution dependencies.
     * 
     * @param solutionDependencies the solutionDependencies value to set.
     * @return the BulkPublishSolutionParameter object itself.
     */
    public BulkPublishSolutionParameter
        withSolutionDependencies(List<SolutionDependencyParameter> solutionDependencies) {
        this.solutionDependencies = solutionDependencies;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targets() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targets in model BulkPublishSolutionParameter"));
        } else {
            targets().forEach(e -> e.validate());
        }
        if (solutionDependencies() != null) {
            solutionDependencies().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BulkPublishSolutionParameter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("targets", this.targets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("solutionInstanceName", this.solutionInstanceName);
        jsonWriter.writeArrayField("solutionDependencies", this.solutionDependencies,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BulkPublishSolutionParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BulkPublishSolutionParameter if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BulkPublishSolutionParameter.
     */
    public static BulkPublishSolutionParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BulkPublishSolutionParameter deserializedBulkPublishSolutionParameter = new BulkPublishSolutionParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targets".equals(fieldName)) {
                    List<BulkPublishTargetDetails> targets
                        = reader.readArray(reader1 -> BulkPublishTargetDetails.fromJson(reader1));
                    deserializedBulkPublishSolutionParameter.targets = targets;
                } else if ("solutionInstanceName".equals(fieldName)) {
                    deserializedBulkPublishSolutionParameter.solutionInstanceName = reader.getString();
                } else if ("solutionDependencies".equals(fieldName)) {
                    List<SolutionDependencyParameter> solutionDependencies
                        = reader.readArray(reader1 -> SolutionDependencyParameter.fromJson(reader1));
                    deserializedBulkPublishSolutionParameter.solutionDependencies = solutionDependencies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBulkPublishSolutionParameter;
        });
    }
}
