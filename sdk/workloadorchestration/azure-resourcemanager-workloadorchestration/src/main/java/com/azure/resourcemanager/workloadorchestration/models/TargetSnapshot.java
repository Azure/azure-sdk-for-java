// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Target Snapshot.
 */
@Immutable
public final class TargetSnapshot implements JsonSerializable<TargetSnapshot> {
    /*
     * Target of instance
     */
    private String targetId;

    /*
     * target spec
     */
    private Map<String, BinaryData> targetSpecification;

    /*
     * Scope of the target resource
     */
    private String solutionScope;

    /**
     * Creates an instance of TargetSnapshot class.
     */
    private TargetSnapshot() {
    }

    /**
     * Get the targetId property: Target of instance.
     * 
     * @return the targetId value.
     */
    public String targetId() {
        return this.targetId;
    }

    /**
     * Get the targetSpecification property: target spec.
     * 
     * @return the targetSpecification value.
     */
    public Map<String, BinaryData> targetSpecification() {
        return this.targetSpecification;
    }

    /**
     * Get the solutionScope property: Scope of the target resource.
     * 
     * @return the solutionScope value.
     */
    public String solutionScope() {
        return this.solutionScope;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetId", this.targetId);
        jsonWriter.writeMapField("targetSpecification", this.targetSpecification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("solutionScope", this.solutionScope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetSnapshot from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetSnapshot if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetSnapshot.
     */
    public static TargetSnapshot fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetSnapshot deserializedTargetSnapshot = new TargetSnapshot();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetId".equals(fieldName)) {
                    deserializedTargetSnapshot.targetId = reader.getString();
                } else if ("targetSpecification".equals(fieldName)) {
                    Map<String, BinaryData> targetSpecification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedTargetSnapshot.targetSpecification = targetSpecification;
                } else if ("solutionScope".equals(fieldName)) {
                    deserializedTargetSnapshot.solutionScope = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetSnapshot;
        });
    }
}
