// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadorchestration.fluent.models.InstanceInner;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.Instance;
import com.azure.resourcemanager.workloadorchestration.models.InstanceProperties;

public final class InstanceImpl implements Instance, Instance.Definition, Instance.Update {
    private InstanceInner innerObject;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public InstanceProperties properties() {
        return this.innerModel().properties();
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public String eTag() {
        return this.innerModel().eTag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public InstanceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String targetName;

    private String solutionName;

    private String instanceName;

    public InstanceImpl withExistingSolution(String resourceGroupName, String targetName, String solutionName) {
        this.resourceGroupName = resourceGroupName;
        this.targetName = targetName;
        this.solutionName = solutionName;
        return this;
    }

    public Instance create() {
        this.innerObject = serviceManager.serviceClient()
            .getInstances()
            .createOrUpdate(resourceGroupName, targetName, solutionName, instanceName, this.innerModel(), Context.NONE);
        return this;
    }

    public Instance create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getInstances()
            .createOrUpdate(resourceGroupName, targetName, solutionName, instanceName, this.innerModel(), context);
        return this;
    }

    InstanceImpl(String name,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = new InstanceInner();
        this.serviceManager = serviceManager;
        this.instanceName = name;
    }

    public InstanceImpl update() {
        return this;
    }

    public Instance apply() {
        this.innerObject = serviceManager.serviceClient()
            .getInstances()
            .update(resourceGroupName, targetName, solutionName, instanceName, this.innerModel(), Context.NONE);
        return this;
    }

    public Instance apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getInstances()
            .update(resourceGroupName, targetName, solutionName, instanceName, this.innerModel(), context);
        return this;
    }

    InstanceImpl(InstanceInner innerObject,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.targetName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "targets");
        this.solutionName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "solutions");
        this.instanceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "instances");
    }

    public Instance refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getInstances()
            .getWithResponse(resourceGroupName, targetName, solutionName, instanceName, Context.NONE)
            .getValue();
        return this;
    }

    public Instance refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getInstances()
            .getWithResponse(resourceGroupName, targetName, solutionName, instanceName, context)
            .getValue();
        return this;
    }

    public InstanceImpl withProperties(InstanceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public InstanceImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }
}
