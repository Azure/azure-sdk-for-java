// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Workflow Version Properties.
 */
@Fluent
public final class WorkflowVersionProperties implements JsonSerializable<WorkflowVersionProperties> {
    /*
     * Revision number of resolved config for this workflow version
     */
    private Integer revision;

    /*
     * Resolved configuration values
     */
    private String configuration;

    /*
     * A list of stage specs
     */
    private List<StageSpec> stageSpec;

    /*
     * Review id of resolved config for this workflow version
     */
    private String reviewId;

    /*
     * State of workflow version
     */
    private State state;

    /*
     * Execution specification
     */
    private Map<String, BinaryData> specification;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of WorkflowVersionProperties class.
     */
    public WorkflowVersionProperties() {
    }

    /**
     * Get the revision property: Revision number of resolved config for this workflow version.
     * 
     * @return the revision value.
     */
    public Integer revision() {
        return this.revision;
    }

    /**
     * Get the configuration property: Resolved configuration values.
     * 
     * @return the configuration value.
     */
    public String configuration() {
        return this.configuration;
    }

    /**
     * Get the stageSpec property: A list of stage specs.
     * 
     * @return the stageSpec value.
     */
    public List<StageSpec> stageSpec() {
        return this.stageSpec;
    }

    /**
     * Set the stageSpec property: A list of stage specs.
     * 
     * @param stageSpec the stageSpec value to set.
     * @return the WorkflowVersionProperties object itself.
     */
    public WorkflowVersionProperties withStageSpec(List<StageSpec> stageSpec) {
        this.stageSpec = stageSpec;
        return this;
    }

    /**
     * Get the reviewId property: Review id of resolved config for this workflow version.
     * 
     * @return the reviewId value.
     */
    public String reviewId() {
        return this.reviewId;
    }

    /**
     * Get the state property: State of workflow version.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Get the specification property: Execution specification.
     * 
     * @return the specification value.
     */
    public Map<String, BinaryData> specification() {
        return this.specification;
    }

    /**
     * Set the specification property: Execution specification.
     * 
     * @param specification the specification value to set.
     * @return the WorkflowVersionProperties object itself.
     */
    public WorkflowVersionProperties withSpecification(Map<String, BinaryData> specification) {
        this.specification = specification;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (stageSpec() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property stageSpec in model WorkflowVersionProperties"));
        } else {
            stageSpec().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkflowVersionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("stageSpec", this.stageSpec, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("specification", this.specification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkflowVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkflowVersionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkflowVersionProperties.
     */
    public static WorkflowVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkflowVersionProperties deserializedWorkflowVersionProperties = new WorkflowVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stageSpec".equals(fieldName)) {
                    List<StageSpec> stageSpec = reader.readArray(reader1 -> StageSpec.fromJson(reader1));
                    deserializedWorkflowVersionProperties.stageSpec = stageSpec;
                } else if ("revision".equals(fieldName)) {
                    deserializedWorkflowVersionProperties.revision = reader.getNullable(JsonReader::getInt);
                } else if ("configuration".equals(fieldName)) {
                    deserializedWorkflowVersionProperties.configuration = reader.getString();
                } else if ("reviewId".equals(fieldName)) {
                    deserializedWorkflowVersionProperties.reviewId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedWorkflowVersionProperties.state = State.fromString(reader.getString());
                } else if ("specification".equals(fieldName)) {
                    Map<String, BinaryData> specification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedWorkflowVersionProperties.specification = specification;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWorkflowVersionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkflowVersionProperties;
        });
    }
}
