// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Available Solution template Version along with latest revision.
 */
@Immutable
public final class AvailableSolutionTemplateVersion implements JsonSerializable<AvailableSolutionTemplateVersion> {
    /*
     * Solution template Version
     */
    private String solutionTemplateVersion;

    /*
     * Latest Configuration Revision
     */
    private String latestConfigRevision;

    /*
     * Has this solution template version been configured
     */
    private boolean isConfigured;

    /**
     * Creates an instance of AvailableSolutionTemplateVersion class.
     */
    private AvailableSolutionTemplateVersion() {
    }

    /**
     * Get the solutionTemplateVersion property: Solution template Version.
     * 
     * @return the solutionTemplateVersion value.
     */
    public String solutionTemplateVersion() {
        return this.solutionTemplateVersion;
    }

    /**
     * Get the latestConfigRevision property: Latest Configuration Revision.
     * 
     * @return the latestConfigRevision value.
     */
    public String latestConfigRevision() {
        return this.latestConfigRevision;
    }

    /**
     * Get the isConfigured property: Has this solution template version been configured.
     * 
     * @return the isConfigured value.
     */
    public boolean isConfigured() {
        return this.isConfigured;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionTemplateVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionTemplateVersion in model AvailableSolutionTemplateVersion"));
        }
        if (latestConfigRevision() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property latestConfigRevision in model AvailableSolutionTemplateVersion"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AvailableSolutionTemplateVersion.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionTemplateVersion", this.solutionTemplateVersion);
        jsonWriter.writeStringField("latestConfigRevision", this.latestConfigRevision);
        jsonWriter.writeBooleanField("isConfigured", this.isConfigured);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableSolutionTemplateVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableSolutionTemplateVersion if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvailableSolutionTemplateVersion.
     */
    public static AvailableSolutionTemplateVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableSolutionTemplateVersion deserializedAvailableSolutionTemplateVersion
                = new AvailableSolutionTemplateVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionTemplateVersion".equals(fieldName)) {
                    deserializedAvailableSolutionTemplateVersion.solutionTemplateVersion = reader.getString();
                } else if ("latestConfigRevision".equals(fieldName)) {
                    deserializedAvailableSolutionTemplateVersion.latestConfigRevision = reader.getString();
                } else if ("isConfigured".equals(fieldName)) {
                    deserializedAvailableSolutionTemplateVersion.isConfigured = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableSolutionTemplateVersion;
        });
    }
}
