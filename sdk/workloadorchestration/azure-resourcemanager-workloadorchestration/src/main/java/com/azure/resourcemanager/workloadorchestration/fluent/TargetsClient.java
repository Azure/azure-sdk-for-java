// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadorchestration.fluent.models.ResolvedConfigurationInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionVersionInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.TargetInner;
import com.azure.resourcemanager.workloadorchestration.models.InstallSolutionParameter;
import com.azure.resourcemanager.workloadorchestration.models.RemoveRevisionParameter;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateParameter;
import com.azure.resourcemanager.workloadorchestration.models.SolutionVersionParameter;
import com.azure.resourcemanager.workloadorchestration.models.UninstallSolutionParameter;
import com.azure.resourcemanager.workloadorchestration.models.UpdateExternalValidationStatusParameter;

/**
 * An instance of this class provides access to all the operations defined in TargetsClient.
 */
public interface TargetsClient {
    /**
     * Get a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Target Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TargetInner> getByResourceGroupWithResponse(String resourceGroupName, String targetName, Context context);

    /**
     * Get a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Target Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner getByResourceGroup(String resourceGroupName, String targetName);

    /**
     * Create or update a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of target Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TargetInner>, TargetInner> beginCreateOrUpdate(String resourceGroupName, String targetName,
        TargetInner resource);

    /**
     * Create or update a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of target Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TargetInner>, TargetInner> beginCreateOrUpdate(String resourceGroupName, String targetName,
        TargetInner resource, Context context);

    /**
     * Create or update a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return target Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner createOrUpdate(String resourceGroupName, String targetName, TargetInner resource);

    /**
     * Create or update a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return target Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner createOrUpdate(String resourceGroupName, String targetName, TargetInner resource, Context context);

    /**
     * update a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of target Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TargetInner>, TargetInner> beginUpdate(String resourceGroupName, String targetName,
        TargetInner properties);

    /**
     * update a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of target Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TargetInner>, TargetInner> beginUpdate(String resourceGroupName, String targetName,
        TargetInner properties, Context context);

    /**
     * update a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return target Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner update(String resourceGroupName, String targetName, TargetInner properties);

    /**
     * update a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return target Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner update(String resourceGroupName, String targetName, TargetInner properties, Context context);

    /**
     * Delete a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetName);

    /**
     * Delete a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param forceDelete Force delete.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetName, Boolean forceDelete,
        Context context);

    /**
     * Delete a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String targetName);

    /**
     * Delete a Target Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param forceDelete Force delete.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String targetName, Boolean forceDelete, Context context);

    /**
     * List by specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Target list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TargetInner> listByResourceGroup(String resourceGroupName);

    /**
     * List by specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Target list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TargetInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List by subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Target list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TargetInner> list();

    /**
     * List by subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Target list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TargetInner> list(Context context);

    /**
     * Post request to deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginInstallSolution(String resourceGroupName, String targetName,
        InstallSolutionParameter body);

    /**
     * Post request to deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginInstallSolution(String resourceGroupName, String targetName,
        InstallSolutionParameter body, Context context);

    /**
     * Post request to deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void installSolution(String resourceGroupName, String targetName, InstallSolutionParameter body);

    /**
     * Post request to deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void installSolution(String resourceGroupName, String targetName, InstallSolutionParameter body, Context context);

    /**
     * Post request to uninstall.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginUninstallSolution(String resourceGroupName, String targetName,
        UninstallSolutionParameter body);

    /**
     * Post request to uninstall.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginUninstallSolution(String resourceGroupName, String targetName,
        UninstallSolutionParameter body, Context context);

    /**
     * Post request to uninstall.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void uninstallSolution(String resourceGroupName, String targetName, UninstallSolutionParameter body);

    /**
     * Post request to uninstall.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void uninstallSolution(String resourceGroupName, String targetName, UninstallSolutionParameter body,
        Context context);

    /**
     * Post request to remove solution version revision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRemoveRevision(String resourceGroupName, String targetName,
        RemoveRevisionParameter body);

    /**
     * Post request to remove solution version revision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRemoveRevision(String resourceGroupName, String targetName,
        RemoveRevisionParameter body, Context context);

    /**
     * Post request to remove solution version revision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void removeRevision(String resourceGroupName, String targetName, RemoveRevisionParameter body);

    /**
     * Post request to remove solution version revision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void removeRevision(String resourceGroupName, String targetName, RemoveRevisionParameter body, Context context);

    /**
     * Post request to resolve configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ResolvedConfigurationInner>, ResolvedConfigurationInner>
        beginResolveConfiguration(String resourceGroupName, String targetName, SolutionTemplateParameter body);

    /**
     * Post request to resolve configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ResolvedConfigurationInner>, ResolvedConfigurationInner> beginResolveConfiguration(
        String resourceGroupName, String targetName, SolutionTemplateParameter body, Context context);

    /**
     * Post request to resolve configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ResolvedConfigurationInner resolveConfiguration(String resourceGroupName, String targetName,
        SolutionTemplateParameter body);

    /**
     * Post request to resolve configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ResolvedConfigurationInner resolveConfiguration(String resourceGroupName, String targetName,
        SolutionTemplateParameter body, Context context);

    /**
     * Post request to review configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionVersionInner>, SolutionVersionInner>
        beginReviewSolutionVersion(String resourceGroupName, String targetName, SolutionTemplateParameter body);

    /**
     * Post request to review configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionVersionInner>, SolutionVersionInner> beginReviewSolutionVersion(
        String resourceGroupName, String targetName, SolutionTemplateParameter body, Context context);

    /**
     * Post request to review configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionVersionInner reviewSolutionVersion(String resourceGroupName, String targetName,
        SolutionTemplateParameter body);

    /**
     * Post request to review configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionVersionInner reviewSolutionVersion(String resourceGroupName, String targetName,
        SolutionTemplateParameter body, Context context);

    /**
     * Post request to publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionVersionInner>, SolutionVersionInner>
        beginPublishSolutionVersion(String resourceGroupName, String targetName, SolutionVersionParameter body);

    /**
     * Post request to publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionVersionInner>, SolutionVersionInner> beginPublishSolutionVersion(
        String resourceGroupName, String targetName, SolutionVersionParameter body, Context context);

    /**
     * Post request to publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionVersionInner publishSolutionVersion(String resourceGroupName, String targetName,
        SolutionVersionParameter body);

    /**
     * Post request to publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionVersionInner publishSolutionVersion(String resourceGroupName, String targetName,
        SolutionVersionParameter body, Context context);

    /**
     * Post request to update external validation status.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionVersionInner>, SolutionVersionInner> beginUpdateExternalValidationStatus(
        String resourceGroupName, String targetName, UpdateExternalValidationStatusParameter body);

    /**
     * Post request to update external validation status.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionVersionInner>, SolutionVersionInner> beginUpdateExternalValidationStatus(
        String resourceGroupName, String targetName, UpdateExternalValidationStatusParameter body, Context context);

    /**
     * Post request to update external validation status.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionVersionInner updateExternalValidationStatus(String resourceGroupName, String targetName,
        UpdateExternalValidationStatusParameter body);

    /**
     * Post request to update external validation status.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionVersionInner updateExternalValidationStatus(String resourceGroupName, String targetName,
        UpdateExternalValidationStatusParameter body, Context context);
}
