// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Task Option Properties.
 */
@Fluent
public final class TaskOption implements JsonSerializable<TaskOption> {
    /*
     * Parallel worker numbers of the tasks
     */
    private Integer concurrency;

    /*
     * Error action for the tasks
     */
    private ErrorAction errorAction;

    /**
     * Creates an instance of TaskOption class.
     */
    public TaskOption() {
    }

    /**
     * Get the concurrency property: Parallel worker numbers of the tasks.
     * 
     * @return the concurrency value.
     */
    public Integer concurrency() {
        return this.concurrency;
    }

    /**
     * Set the concurrency property: Parallel worker numbers of the tasks.
     * 
     * @param concurrency the concurrency value to set.
     * @return the TaskOption object itself.
     */
    public TaskOption withConcurrency(Integer concurrency) {
        this.concurrency = concurrency;
        return this;
    }

    /**
     * Get the errorAction property: Error action for the tasks.
     * 
     * @return the errorAction value.
     */
    public ErrorAction errorAction() {
        return this.errorAction;
    }

    /**
     * Set the errorAction property: Error action for the tasks.
     * 
     * @param errorAction the errorAction value to set.
     * @return the TaskOption object itself.
     */
    public TaskOption withErrorAction(ErrorAction errorAction) {
        this.errorAction = errorAction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errorAction() != null) {
            errorAction().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("concurrency", this.concurrency);
        jsonWriter.writeJsonField("errorAction", this.errorAction);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TaskOption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TaskOption if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the TaskOption.
     */
    public static TaskOption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TaskOption deserializedTaskOption = new TaskOption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("concurrency".equals(fieldName)) {
                    deserializedTaskOption.concurrency = reader.getNullable(JsonReader::getInt);
                } else if ("errorAction".equals(fieldName)) {
                    deserializedTaskOption.errorAction = ErrorAction.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTaskOption;
        });
    }
}
