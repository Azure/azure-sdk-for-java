// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadorchestration.fluent.WorkloadOrchestrationManagementClient;
import com.azure.resourcemanager.workloadorchestration.implementation.ConfigTemplateVersionsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.ConfigTemplatesImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.ContextsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.DiagnosticsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.DynamicSchemaVersionsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.DynamicSchemasImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.ExecutionsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.InstanceHistoriesImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.InstancesImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.JobsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.SchemaReferencesImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.SchemaVersionsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.SchemasImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.SiteReferencesImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.SolutionTemplateVersionsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.SolutionTemplatesImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.SolutionVersionsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.SolutionsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.TargetsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.WorkflowVersionsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.WorkflowsImpl;
import com.azure.resourcemanager.workloadorchestration.implementation.WorkloadOrchestrationManagementClientBuilder;
import com.azure.resourcemanager.workloadorchestration.models.ConfigTemplateVersions;
import com.azure.resourcemanager.workloadorchestration.models.ConfigTemplates;
import com.azure.resourcemanager.workloadorchestration.models.Contexts;
import com.azure.resourcemanager.workloadorchestration.models.Diagnostics;
import com.azure.resourcemanager.workloadorchestration.models.DynamicSchemaVersions;
import com.azure.resourcemanager.workloadorchestration.models.DynamicSchemas;
import com.azure.resourcemanager.workloadorchestration.models.Executions;
import com.azure.resourcemanager.workloadorchestration.models.InstanceHistories;
import com.azure.resourcemanager.workloadorchestration.models.Instances;
import com.azure.resourcemanager.workloadorchestration.models.Jobs;
import com.azure.resourcemanager.workloadorchestration.models.SchemaReferences;
import com.azure.resourcemanager.workloadorchestration.models.SchemaVersions;
import com.azure.resourcemanager.workloadorchestration.models.Schemas;
import com.azure.resourcemanager.workloadorchestration.models.SiteReferences;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersions;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplates;
import com.azure.resourcemanager.workloadorchestration.models.SolutionVersions;
import com.azure.resourcemanager.workloadorchestration.models.Solutions;
import com.azure.resourcemanager.workloadorchestration.models.Targets;
import com.azure.resourcemanager.workloadorchestration.models.WorkflowVersions;
import com.azure.resourcemanager.workloadorchestration.models.Workflows;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to WorkloadOrchestrationManager.
 * Microsoft.Edge Resource Provider management API.
 */
public final class WorkloadOrchestrationManager {
    private DynamicSchemas dynamicSchemas;

    private Schemas schemas;

    private SchemaVersions schemaVersions;

    private SolutionVersions solutionVersions;

    private Jobs jobs;

    private Targets targets;

    private DynamicSchemaVersions dynamicSchemaVersions;

    private SchemaReferences schemaReferences;

    private Solutions solutions;

    private SolutionTemplateVersions solutionTemplateVersions;

    private SolutionTemplates solutionTemplates;

    private Instances instances;

    private InstanceHistories instanceHistories;

    private ConfigTemplates configTemplates;

    private ConfigTemplateVersions configTemplateVersions;

    private Workflows workflows;

    private WorkflowVersions workflowVersions;

    private Executions executions;

    private Diagnostics diagnostics;

    private Contexts contexts;

    private SiteReferences siteReferences;

    private final WorkloadOrchestrationManagementClient clientObject;

    private WorkloadOrchestrationManager(HttpPipeline httpPipeline, AzureProfile profile,
        Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new WorkloadOrchestrationManagementClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Workload Orchestration service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Workload Orchestration service API instance.
     */
    public static WorkloadOrchestrationManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Workload Orchestration service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Workload Orchestration service API instance.
     */
    public static WorkloadOrchestrationManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new WorkloadOrchestrationManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create WorkloadOrchestrationManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new WorkloadOrchestrationManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);
        private static final String SDK_VERSION = "version";
        private static final Map<String, String> PROPERTIES
            = CoreUtils.getProperties("azure-resourcemanager-workloadorchestration.properties");

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Workload Orchestration service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Workload Orchestration service API instance.
         */
        public WorkloadOrchestrationManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.workloadorchestration")
                .append("/")
                .append(clientVersion);
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .build();
            return new WorkloadOrchestrationManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of DynamicSchemas. It manages DynamicSchema.
     * 
     * @return Resource collection API of DynamicSchemas.
     */
    public DynamicSchemas dynamicSchemas() {
        if (this.dynamicSchemas == null) {
            this.dynamicSchemas = new DynamicSchemasImpl(clientObject.getDynamicSchemas(), this);
        }
        return dynamicSchemas;
    }

    /**
     * Gets the resource collection API of Schemas. It manages Schema.
     * 
     * @return Resource collection API of Schemas.
     */
    public Schemas schemas() {
        if (this.schemas == null) {
            this.schemas = new SchemasImpl(clientObject.getSchemas(), this);
        }
        return schemas;
    }

    /**
     * Gets the resource collection API of SchemaVersions. It manages SchemaVersion.
     * 
     * @return Resource collection API of SchemaVersions.
     */
    public SchemaVersions schemaVersions() {
        if (this.schemaVersions == null) {
            this.schemaVersions = new SchemaVersionsImpl(clientObject.getSchemaVersions(), this);
        }
        return schemaVersions;
    }

    /**
     * Gets the resource collection API of SolutionVersions. It manages SolutionVersion.
     * 
     * @return Resource collection API of SolutionVersions.
     */
    public SolutionVersions solutionVersions() {
        if (this.solutionVersions == null) {
            this.solutionVersions = new SolutionVersionsImpl(clientObject.getSolutionVersions(), this);
        }
        return solutionVersions;
    }

    /**
     * Gets the resource collection API of Jobs.
     * 
     * @return Resource collection API of Jobs.
     */
    public Jobs jobs() {
        if (this.jobs == null) {
            this.jobs = new JobsImpl(clientObject.getJobs(), this);
        }
        return jobs;
    }

    /**
     * Gets the resource collection API of Targets. It manages Target.
     * 
     * @return Resource collection API of Targets.
     */
    public Targets targets() {
        if (this.targets == null) {
            this.targets = new TargetsImpl(clientObject.getTargets(), this);
        }
        return targets;
    }

    /**
     * Gets the resource collection API of DynamicSchemaVersions. It manages DynamicSchemaVersion.
     * 
     * @return Resource collection API of DynamicSchemaVersions.
     */
    public DynamicSchemaVersions dynamicSchemaVersions() {
        if (this.dynamicSchemaVersions == null) {
            this.dynamicSchemaVersions = new DynamicSchemaVersionsImpl(clientObject.getDynamicSchemaVersions(), this);
        }
        return dynamicSchemaVersions;
    }

    /**
     * Gets the resource collection API of SchemaReferences.
     * 
     * @return Resource collection API of SchemaReferences.
     */
    public SchemaReferences schemaReferences() {
        if (this.schemaReferences == null) {
            this.schemaReferences = new SchemaReferencesImpl(clientObject.getSchemaReferences(), this);
        }
        return schemaReferences;
    }

    /**
     * Gets the resource collection API of Solutions. It manages Solution.
     * 
     * @return Resource collection API of Solutions.
     */
    public Solutions solutions() {
        if (this.solutions == null) {
            this.solutions = new SolutionsImpl(clientObject.getSolutions(), this);
        }
        return solutions;
    }

    /**
     * Gets the resource collection API of SolutionTemplateVersions.
     * 
     * @return Resource collection API of SolutionTemplateVersions.
     */
    public SolutionTemplateVersions solutionTemplateVersions() {
        if (this.solutionTemplateVersions == null) {
            this.solutionTemplateVersions
                = new SolutionTemplateVersionsImpl(clientObject.getSolutionTemplateVersions(), this);
        }
        return solutionTemplateVersions;
    }

    /**
     * Gets the resource collection API of SolutionTemplates. It manages SolutionTemplate.
     * 
     * @return Resource collection API of SolutionTemplates.
     */
    public SolutionTemplates solutionTemplates() {
        if (this.solutionTemplates == null) {
            this.solutionTemplates = new SolutionTemplatesImpl(clientObject.getSolutionTemplates(), this);
        }
        return solutionTemplates;
    }

    /**
     * Gets the resource collection API of Instances. It manages Instance.
     * 
     * @return Resource collection API of Instances.
     */
    public Instances instances() {
        if (this.instances == null) {
            this.instances = new InstancesImpl(clientObject.getInstances(), this);
        }
        return instances;
    }

    /**
     * Gets the resource collection API of InstanceHistories.
     * 
     * @return Resource collection API of InstanceHistories.
     */
    public InstanceHistories instanceHistories() {
        if (this.instanceHistories == null) {
            this.instanceHistories = new InstanceHistoriesImpl(clientObject.getInstanceHistories(), this);
        }
        return instanceHistories;
    }

    /**
     * Gets the resource collection API of ConfigTemplates. It manages ConfigTemplate.
     * 
     * @return Resource collection API of ConfigTemplates.
     */
    public ConfigTemplates configTemplates() {
        if (this.configTemplates == null) {
            this.configTemplates = new ConfigTemplatesImpl(clientObject.getConfigTemplates(), this);
        }
        return configTemplates;
    }

    /**
     * Gets the resource collection API of ConfigTemplateVersions.
     * 
     * @return Resource collection API of ConfigTemplateVersions.
     */
    public ConfigTemplateVersions configTemplateVersions() {
        if (this.configTemplateVersions == null) {
            this.configTemplateVersions
                = new ConfigTemplateVersionsImpl(clientObject.getConfigTemplateVersions(), this);
        }
        return configTemplateVersions;
    }

    /**
     * Gets the resource collection API of Workflows. It manages Workflow.
     * 
     * @return Resource collection API of Workflows.
     */
    public Workflows workflows() {
        if (this.workflows == null) {
            this.workflows = new WorkflowsImpl(clientObject.getWorkflows(), this);
        }
        return workflows;
    }

    /**
     * Gets the resource collection API of WorkflowVersions. It manages WorkflowVersion.
     * 
     * @return Resource collection API of WorkflowVersions.
     */
    public WorkflowVersions workflowVersions() {
        if (this.workflowVersions == null) {
            this.workflowVersions = new WorkflowVersionsImpl(clientObject.getWorkflowVersions(), this);
        }
        return workflowVersions;
    }

    /**
     * Gets the resource collection API of Executions. It manages Execution.
     * 
     * @return Resource collection API of Executions.
     */
    public Executions executions() {
        if (this.executions == null) {
            this.executions = new ExecutionsImpl(clientObject.getExecutions(), this);
        }
        return executions;
    }

    /**
     * Gets the resource collection API of Diagnostics. It manages Diagnostic.
     * 
     * @return Resource collection API of Diagnostics.
     */
    public Diagnostics diagnostics() {
        if (this.diagnostics == null) {
            this.diagnostics = new DiagnosticsImpl(clientObject.getDiagnostics(), this);
        }
        return diagnostics;
    }

    /**
     * Gets the resource collection API of Contexts. It manages ContextModel.
     * 
     * @return Resource collection API of Contexts.
     */
    public Contexts contexts() {
        if (this.contexts == null) {
            this.contexts = new ContextsImpl(clientObject.getContexts(), this);
        }
        return contexts;
    }

    /**
     * Gets the resource collection API of SiteReferences. It manages SiteReference.
     * 
     * @return Resource collection API of SiteReferences.
     */
    public SiteReferences siteReferences() {
        if (this.siteReferences == null) {
            this.siteReferences = new SiteReferencesImpl(clientObject.getSiteReferences(), this);
        }
        return siteReferences;
    }

    /**
     * Gets wrapped service client WorkloadOrchestrationManagementClient providing direct access to the underlying
     * auto-generated API implementation, based on Azure REST API.
     * 
     * @return Wrapped service client WorkloadOrchestrationManagementClient.
     */
    public WorkloadOrchestrationManagementClient serviceClient() {
        return this.clientObject;
    }
}
