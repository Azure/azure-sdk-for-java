// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Solution Version Snapshot.
 */
@Immutable
public final class SolutionVersionSnapshot implements JsonSerializable<SolutionVersionSnapshot> {
    /*
     * Solution version of instance
     */
    private String solutionVersionId;

    /*
     * App components spec
     */
    private Map<String, BinaryData> specification;

    /**
     * Creates an instance of SolutionVersionSnapshot class.
     */
    private SolutionVersionSnapshot() {
    }

    /**
     * Get the solutionVersionId property: Solution version of instance.
     * 
     * @return the solutionVersionId value.
     */
    public String solutionVersionId() {
        return this.solutionVersionId;
    }

    /**
     * Get the specification property: App components spec.
     * 
     * @return the specification value.
     */
    public Map<String, BinaryData> specification() {
        return this.specification;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionVersionId", this.solutionVersionId);
        jsonWriter.writeMapField("specification", this.specification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionVersionSnapshot from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionVersionSnapshot if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionVersionSnapshot.
     */
    public static SolutionVersionSnapshot fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionVersionSnapshot deserializedSolutionVersionSnapshot = new SolutionVersionSnapshot();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionVersionId".equals(fieldName)) {
                    deserializedSolutionVersionSnapshot.solutionVersionId = reader.getString();
                } else if ("specification".equals(fieldName)) {
                    Map<String, BinaryData> specification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedSolutionVersionSnapshot.specification = specification;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionVersionSnapshot;
        });
    }
}
