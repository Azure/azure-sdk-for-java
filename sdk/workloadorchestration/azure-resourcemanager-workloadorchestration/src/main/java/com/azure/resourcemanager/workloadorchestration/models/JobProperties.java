// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Properties of a Job resource, including type, status, parameters, steps, and error details.
 */
@Immutable
public final class JobProperties implements JsonSerializable<JobProperties> {
    /*
     * The type of job.
     */
    private JobType jobType;

    /*
     * Start time of the job (ISO8601).
     */
    private OffsetDateTime startTime;

    /*
     * End time of the job (ISO8601).
     */
    private OffsetDateTime endTime;

    /*
     * Status of the job.
     */
    private JobStatus status;

    /*
     * Parameters for the job.
     */
    private JobParameterBase jobParameter;

    /*
     * Correlation ID for tracking.
     */
    private String correlationId;

    /*
     * Steps and substatuses for the job.
     */
    private List<JobStep> steps;

    /*
     * The OID or identity that triggered the job.
     */
    private String triggeredBy;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Error Details if any failure is there
     */
    private ManagementError errorDetails;

    /**
     * Creates an instance of JobProperties class.
     */
    private JobProperties() {
    }

    /**
     * Get the jobType property: The type of job.
     * 
     * @return the jobType value.
     */
    public JobType jobType() {
        return this.jobType;
    }

    /**
     * Get the startTime property: Start time of the job (ISO8601).
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time of the job (ISO8601).
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the status property: Status of the job.
     * 
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Get the jobParameter property: Parameters for the job.
     * 
     * @return the jobParameter value.
     */
    public JobParameterBase jobParameter() {
        return this.jobParameter;
    }

    /**
     * Get the correlationId property: Correlation ID for tracking.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Get the steps property: Steps and substatuses for the job.
     * 
     * @return the steps value.
     */
    public List<JobStep> steps() {
        return this.steps;
    }

    /**
     * Get the triggeredBy property: The OID or identity that triggered the job.
     * 
     * @return the triggeredBy value.
     */
    public String triggeredBy() {
        return this.triggeredBy;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errorDetails property: Error Details if any failure is there.
     * 
     * @return the errorDetails value.
     */
    public ManagementError errorDetails() {
        return this.errorDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (jobType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property jobType in model JobProperties"));
        }
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property status in model JobProperties"));
        }
        if (jobParameter() != null) {
            jobParameter().validate();
        }
        if (steps() != null) {
            steps().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeJsonField("jobParameter", this.jobParameter);
        jsonWriter.writeStringField("correlationId", this.correlationId);
        jsonWriter.writeArrayField("steps", this.steps, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("triggeredBy", this.triggeredBy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobProperties.
     */
    public static JobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobProperties deserializedJobProperties = new JobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobType".equals(fieldName)) {
                    deserializedJobProperties.jobType = JobType.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedJobProperties.status = JobStatus.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedJobProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedJobProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobParameter".equals(fieldName)) {
                    deserializedJobProperties.jobParameter = JobParameterBase.fromJson(reader);
                } else if ("correlationId".equals(fieldName)) {
                    deserializedJobProperties.correlationId = reader.getString();
                } else if ("steps".equals(fieldName)) {
                    List<JobStep> steps = reader.readArray(reader1 -> JobStep.fromJson(reader1));
                    deserializedJobProperties.steps = steps;
                } else if ("triggeredBy".equals(fieldName)) {
                    deserializedJobProperties.triggeredBy = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedJobProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedJobProperties.errorDetails = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobProperties;
        });
    }
}
