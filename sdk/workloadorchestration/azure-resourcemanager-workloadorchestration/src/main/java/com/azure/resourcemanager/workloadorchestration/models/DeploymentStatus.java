// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Deployment Status.
 */
@Immutable
public final class DeploymentStatus implements JsonSerializable<DeploymentStatus> {
    /*
     * The lastModified of the Status
     */
    private OffsetDateTime lastModified;

    /*
     * Indicates if Instance is deployed
     */
    private Integer deployed;

    /*
     * The expected running job id
     */
    private Integer expectedRunningJobId;

    /*
     * The running job id
     */
    private Integer runningJobId;

    /*
     * Deployment status
     */
    private String status;

    /*
     * Status details
     */
    private String statusDetails;

    /*
     * Deployment Generation
     */
    private Integer generation;

    /*
     * Target resource statuses
     */
    private List<TargetStatus> targetStatuses;

    /**
     * Creates an instance of DeploymentStatus class.
     */
    private DeploymentStatus() {
    }

    /**
     * Get the lastModified property: The lastModified of the Status.
     * 
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Get the deployed property: Indicates if Instance is deployed.
     * 
     * @return the deployed value.
     */
    public Integer deployed() {
        return this.deployed;
    }

    /**
     * Get the expectedRunningJobId property: The expected running job id.
     * 
     * @return the expectedRunningJobId value.
     */
    public Integer expectedRunningJobId() {
        return this.expectedRunningJobId;
    }

    /**
     * Get the runningJobId property: The running job id.
     * 
     * @return the runningJobId value.
     */
    public Integer runningJobId() {
        return this.runningJobId;
    }

    /**
     * Get the status property: Deployment status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the statusDetails property: Status details.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the generation property: Deployment Generation.
     * 
     * @return the generation value.
     */
    public Integer generation() {
        return this.generation;
    }

    /**
     * Get the targetStatuses property: Target resource statuses.
     * 
     * @return the targetStatuses value.
     */
    public List<TargetStatus> targetStatuses() {
        return this.targetStatuses;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetStatuses() != null) {
            targetStatuses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastModified",
            this.lastModified == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModified));
        jsonWriter.writeNumberField("deployed", this.deployed);
        jsonWriter.writeNumberField("expectedRunningJobId", this.expectedRunningJobId);
        jsonWriter.writeNumberField("runningJobId", this.runningJobId);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("statusDetails", this.statusDetails);
        jsonWriter.writeNumberField("generation", this.generation);
        jsonWriter.writeArrayField("targetStatuses", this.targetStatuses,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentStatus.
     */
    public static DeploymentStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentStatus deserializedDeploymentStatus = new DeploymentStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastModified".equals(fieldName)) {
                    deserializedDeploymentStatus.lastModified = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("deployed".equals(fieldName)) {
                    deserializedDeploymentStatus.deployed = reader.getNullable(JsonReader::getInt);
                } else if ("expectedRunningJobId".equals(fieldName)) {
                    deserializedDeploymentStatus.expectedRunningJobId = reader.getNullable(JsonReader::getInt);
                } else if ("runningJobId".equals(fieldName)) {
                    deserializedDeploymentStatus.runningJobId = reader.getNullable(JsonReader::getInt);
                } else if ("status".equals(fieldName)) {
                    deserializedDeploymentStatus.status = reader.getString();
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedDeploymentStatus.statusDetails = reader.getString();
                } else if ("generation".equals(fieldName)) {
                    deserializedDeploymentStatus.generation = reader.getNullable(JsonReader::getInt);
                } else if ("targetStatuses".equals(fieldName)) {
                    List<TargetStatus> targetStatuses = reader.readArray(reader1 -> TargetStatus.fromJson(reader1));
                    deserializedDeploymentStatus.targetStatuses = targetStatuses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentStatus;
        });
    }
}
