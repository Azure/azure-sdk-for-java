// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Config Template Version Properties.
 */
@Fluent
public final class ConfigTemplateVersionProperties implements JsonSerializable<ConfigTemplateVersionProperties> {
    /*
     * Configuration values
     */
    private String configurations;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ConfigTemplateVersionProperties class.
     */
    public ConfigTemplateVersionProperties() {
    }

    /**
     * Get the configurations property: Configuration values.
     * 
     * @return the configurations value.
     */
    public String configurations() {
        return this.configurations;
    }

    /**
     * Set the configurations property: Configuration values.
     * 
     * @param configurations the configurations value to set.
     * @return the ConfigTemplateVersionProperties object itself.
     */
    public ConfigTemplateVersionProperties withConfigurations(String configurations) {
        this.configurations = configurations;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configurations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property configurations in model ConfigTemplateVersionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConfigTemplateVersionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configurations", this.configurations);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigTemplateVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigTemplateVersionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConfigTemplateVersionProperties.
     */
    public static ConfigTemplateVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigTemplateVersionProperties deserializedConfigTemplateVersionProperties
                = new ConfigTemplateVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurations".equals(fieldName)) {
                    deserializedConfigTemplateVersionProperties.configurations = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedConfigTemplateVersionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigTemplateVersionProperties;
        });
    }
}
