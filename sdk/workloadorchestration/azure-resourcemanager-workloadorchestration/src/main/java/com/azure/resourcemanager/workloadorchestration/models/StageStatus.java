// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Result of Stage execution.
 */
@Immutable
public final class StageStatus implements JsonSerializable<StageStatus> {
    /*
     * Deployment status
     */
    private Integer status;

    /*
     * Status message
     */
    private String statusMessage;

    /*
     * Current stage
     */
    private String stage;

    /*
     * Next stage
     */
    private String nextstage;

    /*
     * Error message
     */
    private String errorMessage;

    /*
     * whether this stage is active or inactive
     */
    private ActiveState isActive;

    /*
     * The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage
     */
    private Map<String, BinaryData> inputs;

    /*
     * The outputs of the StageHistory, it is different as the different input stages.
     */
    private Map<String, BinaryData> outputs;

    /**
     * Creates an instance of StageStatus class.
     */
    private StageStatus() {
    }

    /**
     * Get the status property: Deployment status.
     * 
     * @return the status value.
     */
    public Integer status() {
        return this.status;
    }

    /**
     * Get the statusMessage property: Status message.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the stage property: Current stage.
     * 
     * @return the stage value.
     */
    public String stage() {
        return this.stage;
    }

    /**
     * Get the nextstage property: Next stage.
     * 
     * @return the nextstage value.
     */
    public String nextstage() {
        return this.nextstage;
    }

    /**
     * Get the errorMessage property: Error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the isActive property: whether this stage is active or inactive.
     * 
     * @return the isActive value.
     */
    public ActiveState isActive() {
        return this.isActive;
    }

    /**
     * Get the inputs property: The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters
     * for the initial stage.
     * 
     * @return the inputs value.
     */
    public Map<String, BinaryData> inputs() {
        return this.inputs;
    }

    /**
     * Get the outputs property: The outputs of the StageHistory, it is different as the different input stages.
     * 
     * @return the outputs value.
     */
    public Map<String, BinaryData> outputs() {
        return this.outputs;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("status", this.status);
        jsonWriter.writeStringField("statusMessage", this.statusMessage);
        jsonWriter.writeStringField("stage", this.stage);
        jsonWriter.writeStringField("nextstage", this.nextstage);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeStringField("isActive", this.isActive == null ? null : this.isActive.toString());
        jsonWriter.writeMapField("inputs", this.inputs,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeMapField("outputs", this.outputs,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StageStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StageStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StageStatus.
     */
    public static StageStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StageStatus deserializedStageStatus = new StageStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedStageStatus.status = reader.getNullable(JsonReader::getInt);
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedStageStatus.statusMessage = reader.getString();
                } else if ("stage".equals(fieldName)) {
                    deserializedStageStatus.stage = reader.getString();
                } else if ("nextstage".equals(fieldName)) {
                    deserializedStageStatus.nextstage = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedStageStatus.errorMessage = reader.getString();
                } else if ("isActive".equals(fieldName)) {
                    deserializedStageStatus.isActive = ActiveState.fromString(reader.getString());
                } else if ("inputs".equals(fieldName)) {
                    Map<String, BinaryData> inputs = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedStageStatus.inputs = inputs;
                } else if ("outputs".equals(fieldName)) {
                    Map<String, BinaryData> outputs = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedStageStatus.outputs = outputs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStageStatus;
        });
    }
}
