// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Solution Template Parameter.
 */
@Fluent
public final class SolutionTemplateParameter implements JsonSerializable<SolutionTemplateParameter> {
    /*
     * Solution Template Version ARM Id
     */
    private String solutionTemplateVersionId;

    /*
     * Solution Instance Name
     */
    private String solutionInstanceName;

    /*
     * Solution Dependencies
     */
    private List<SolutionDependencyParameter> solutionDependencies;

    /**
     * Creates an instance of SolutionTemplateParameter class.
     */
    public SolutionTemplateParameter() {
    }

    /**
     * Get the solutionTemplateVersionId property: Solution Template Version ARM Id.
     * 
     * @return the solutionTemplateVersionId value.
     */
    public String solutionTemplateVersionId() {
        return this.solutionTemplateVersionId;
    }

    /**
     * Set the solutionTemplateVersionId property: Solution Template Version ARM Id.
     * 
     * @param solutionTemplateVersionId the solutionTemplateVersionId value to set.
     * @return the SolutionTemplateParameter object itself.
     */
    public SolutionTemplateParameter withSolutionTemplateVersionId(String solutionTemplateVersionId) {
        this.solutionTemplateVersionId = solutionTemplateVersionId;
        return this;
    }

    /**
     * Get the solutionInstanceName property: Solution Instance Name.
     * 
     * @return the solutionInstanceName value.
     */
    public String solutionInstanceName() {
        return this.solutionInstanceName;
    }

    /**
     * Set the solutionInstanceName property: Solution Instance Name.
     * 
     * @param solutionInstanceName the solutionInstanceName value to set.
     * @return the SolutionTemplateParameter object itself.
     */
    public SolutionTemplateParameter withSolutionInstanceName(String solutionInstanceName) {
        this.solutionInstanceName = solutionInstanceName;
        return this;
    }

    /**
     * Get the solutionDependencies property: Solution Dependencies.
     * 
     * @return the solutionDependencies value.
     */
    public List<SolutionDependencyParameter> solutionDependencies() {
        return this.solutionDependencies;
    }

    /**
     * Set the solutionDependencies property: Solution Dependencies.
     * 
     * @param solutionDependencies the solutionDependencies value to set.
     * @return the SolutionTemplateParameter object itself.
     */
    public SolutionTemplateParameter withSolutionDependencies(List<SolutionDependencyParameter> solutionDependencies) {
        this.solutionDependencies = solutionDependencies;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionTemplateVersionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionTemplateVersionId in model SolutionTemplateParameter"));
        }
        if (solutionDependencies() != null) {
            solutionDependencies().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionTemplateParameter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionTemplateVersionId", this.solutionTemplateVersionId);
        jsonWriter.writeStringField("solutionInstanceName", this.solutionInstanceName);
        jsonWriter.writeArrayField("solutionDependencies", this.solutionDependencies,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionTemplateParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionTemplateParameter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionTemplateParameter.
     */
    public static SolutionTemplateParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionTemplateParameter deserializedSolutionTemplateParameter = new SolutionTemplateParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionTemplateVersionId".equals(fieldName)) {
                    deserializedSolutionTemplateParameter.solutionTemplateVersionId = reader.getString();
                } else if ("solutionInstanceName".equals(fieldName)) {
                    deserializedSolutionTemplateParameter.solutionInstanceName = reader.getString();
                } else if ("solutionDependencies".equals(fieldName)) {
                    List<SolutionDependencyParameter> solutionDependencies
                        = reader.readArray(reader1 -> SolutionDependencyParameter.fromJson(reader1));
                    deserializedSolutionTemplateParameter.solutionDependencies = solutionDependencies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionTemplateParameter;
        });
    }
}
