// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Solution Version Properties.
 */
@Fluent
public final class SolutionVersionProperties implements JsonSerializable<SolutionVersionProperties> {
    /*
     * Solution Template Version Id
     */
    private String solutionTemplateVersionId;

    /*
     * Revision number of resolved config for this solution version
     */
    private Integer revision;

    /*
     * Name of applicable target's display name
     */
    private String targetDisplayName;

    /*
     * Resolved configuration values
     */
    private String configuration;

    /*
     * Configuration on the line level across all solution template versions
     */
    private String targetLevelConfiguration;

    /*
     * App components spec
     */
    private Map<String, BinaryData> specification;

    /*
     * Review id of resolved config for this solution version
     */
    private String reviewId;

    /*
     * External validation id
     */
    private String externalValidationId;

    /*
     * State of solution instance
     */
    private State state;

    /*
     * Solution instance name
     */
    private String solutionInstanceName;

    /*
     * Solution Dependency Context
     */
    private List<SolutionDependency> solutionDependencies;

    /*
     * Error Details if any failure is there
     */
    private ManagementError errorDetails;

    /*
     * The URI for tracking the latest action performed on this solution version.
     */
    private String latestActionTrackingUri;

    /*
     * The type of the latest action performed on this solution version.
     */
    private JobType actionType;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SolutionVersionProperties class.
     */
    public SolutionVersionProperties() {
    }

    /**
     * Get the solutionTemplateVersionId property: Solution Template Version Id.
     * 
     * @return the solutionTemplateVersionId value.
     */
    public String solutionTemplateVersionId() {
        return this.solutionTemplateVersionId;
    }

    /**
     * Get the revision property: Revision number of resolved config for this solution version.
     * 
     * @return the revision value.
     */
    public Integer revision() {
        return this.revision;
    }

    /**
     * Get the targetDisplayName property: Name of applicable target's display name.
     * 
     * @return the targetDisplayName value.
     */
    public String targetDisplayName() {
        return this.targetDisplayName;
    }

    /**
     * Get the configuration property: Resolved configuration values.
     * 
     * @return the configuration value.
     */
    public String configuration() {
        return this.configuration;
    }

    /**
     * Get the targetLevelConfiguration property: Configuration on the line level across all solution template versions.
     * 
     * @return the targetLevelConfiguration value.
     */
    public String targetLevelConfiguration() {
        return this.targetLevelConfiguration;
    }

    /**
     * Get the specification property: App components spec.
     * 
     * @return the specification value.
     */
    public Map<String, BinaryData> specification() {
        return this.specification;
    }

    /**
     * Set the specification property: App components spec.
     * 
     * @param specification the specification value to set.
     * @return the SolutionVersionProperties object itself.
     */
    public SolutionVersionProperties withSpecification(Map<String, BinaryData> specification) {
        this.specification = specification;
        return this;
    }

    /**
     * Get the reviewId property: Review id of resolved config for this solution version.
     * 
     * @return the reviewId value.
     */
    public String reviewId() {
        return this.reviewId;
    }

    /**
     * Get the externalValidationId property: External validation id.
     * 
     * @return the externalValidationId value.
     */
    public String externalValidationId() {
        return this.externalValidationId;
    }

    /**
     * Get the state property: State of solution instance.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Get the solutionInstanceName property: Solution instance name.
     * 
     * @return the solutionInstanceName value.
     */
    public String solutionInstanceName() {
        return this.solutionInstanceName;
    }

    /**
     * Get the solutionDependencies property: Solution Dependency Context.
     * 
     * @return the solutionDependencies value.
     */
    public List<SolutionDependency> solutionDependencies() {
        return this.solutionDependencies;
    }

    /**
     * Get the errorDetails property: Error Details if any failure is there.
     * 
     * @return the errorDetails value.
     */
    public ManagementError errorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the latestActionTrackingUri property: The URI for tracking the latest action performed on this solution
     * version.
     * 
     * @return the latestActionTrackingUri value.
     */
    public String latestActionTrackingUri() {
        return this.latestActionTrackingUri;
    }

    /**
     * Get the actionType property: The type of the latest action performed on this solution version.
     * 
     * @return the actionType value.
     */
    public JobType actionType() {
        return this.actionType;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (specification() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property specification in model SolutionVersionProperties"));
        }
        if (solutionDependencies() != null) {
            solutionDependencies().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionVersionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("specification", this.specification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionVersionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionVersionProperties.
     */
    public static SolutionVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionVersionProperties deserializedSolutionVersionProperties = new SolutionVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("specification".equals(fieldName)) {
                    Map<String, BinaryData> specification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedSolutionVersionProperties.specification = specification;
                } else if ("solutionTemplateVersionId".equals(fieldName)) {
                    deserializedSolutionVersionProperties.solutionTemplateVersionId = reader.getString();
                } else if ("revision".equals(fieldName)) {
                    deserializedSolutionVersionProperties.revision = reader.getNullable(JsonReader::getInt);
                } else if ("targetDisplayName".equals(fieldName)) {
                    deserializedSolutionVersionProperties.targetDisplayName = reader.getString();
                } else if ("configuration".equals(fieldName)) {
                    deserializedSolutionVersionProperties.configuration = reader.getString();
                } else if ("targetLevelConfiguration".equals(fieldName)) {
                    deserializedSolutionVersionProperties.targetLevelConfiguration = reader.getString();
                } else if ("reviewId".equals(fieldName)) {
                    deserializedSolutionVersionProperties.reviewId = reader.getString();
                } else if ("externalValidationId".equals(fieldName)) {
                    deserializedSolutionVersionProperties.externalValidationId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedSolutionVersionProperties.state = State.fromString(reader.getString());
                } else if ("solutionInstanceName".equals(fieldName)) {
                    deserializedSolutionVersionProperties.solutionInstanceName = reader.getString();
                } else if ("solutionDependencies".equals(fieldName)) {
                    List<SolutionDependency> solutionDependencies
                        = reader.readArray(reader1 -> SolutionDependency.fromJson(reader1));
                    deserializedSolutionVersionProperties.solutionDependencies = solutionDependencies;
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedSolutionVersionProperties.errorDetails = ManagementError.fromJson(reader);
                } else if ("latestActionTrackingUri".equals(fieldName)) {
                    deserializedSolutionVersionProperties.latestActionTrackingUri = reader.getString();
                } else if ("actionType".equals(fieldName)) {
                    deserializedSolutionVersionProperties.actionType = JobType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSolutionVersionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionVersionProperties;
        });
    }
}
