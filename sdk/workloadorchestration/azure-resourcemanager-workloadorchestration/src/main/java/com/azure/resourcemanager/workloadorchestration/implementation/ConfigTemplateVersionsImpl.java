// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadorchestration.fluent.ConfigTemplateVersionsClient;
import com.azure.resourcemanager.workloadorchestration.fluent.models.ConfigTemplateVersionInner;
import com.azure.resourcemanager.workloadorchestration.models.ConfigTemplateVersion;
import com.azure.resourcemanager.workloadorchestration.models.ConfigTemplateVersions;

public final class ConfigTemplateVersionsImpl implements ConfigTemplateVersions {
    private static final ClientLogger LOGGER = new ClientLogger(ConfigTemplateVersionsImpl.class);

    private final ConfigTemplateVersionsClient innerClient;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public ConfigTemplateVersionsImpl(ConfigTemplateVersionsClient innerClient,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ConfigTemplateVersion> getWithResponse(String resourceGroupName, String configTemplateName,
        String configTemplateVersionName, Context context) {
        Response<ConfigTemplateVersionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, configTemplateName, configTemplateVersionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConfigTemplateVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConfigTemplateVersion get(String resourceGroupName, String configTemplateName,
        String configTemplateVersionName) {
        ConfigTemplateVersionInner inner
            = this.serviceClient().get(resourceGroupName, configTemplateName, configTemplateVersionName);
        if (inner != null) {
            return new ConfigTemplateVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ConfigTemplateVersion> listByConfigTemplate(String resourceGroupName,
        String configTemplateName) {
        PagedIterable<ConfigTemplateVersionInner> inner
            = this.serviceClient().listByConfigTemplate(resourceGroupName, configTemplateName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConfigTemplateVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfigTemplateVersion> listByConfigTemplate(String resourceGroupName,
        String configTemplateName, Context context) {
        PagedIterable<ConfigTemplateVersionInner> inner
            = this.serviceClient().listByConfigTemplate(resourceGroupName, configTemplateName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConfigTemplateVersionImpl(inner1, this.manager()));
    }

    private ConfigTemplateVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }
}
