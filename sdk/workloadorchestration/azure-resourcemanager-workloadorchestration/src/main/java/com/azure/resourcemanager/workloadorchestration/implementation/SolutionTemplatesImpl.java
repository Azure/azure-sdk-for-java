// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadorchestration.fluent.SolutionTemplatesClient;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionWithUpdateTypeInner;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplate;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersion;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplates;
import com.azure.resourcemanager.workloadorchestration.models.VersionParameter;

public final class SolutionTemplatesImpl implements SolutionTemplates {
    private static final ClientLogger LOGGER = new ClientLogger(SolutionTemplatesImpl.class);

    private final SolutionTemplatesClient innerClient;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public SolutionTemplatesImpl(SolutionTemplatesClient innerClient,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SolutionTemplate> getByResourceGroupWithResponse(String resourceGroupName,
        String solutionTemplateName, Context context) {
        Response<SolutionTemplateInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, solutionTemplateName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SolutionTemplateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SolutionTemplate getByResourceGroup(String resourceGroupName, String solutionTemplateName) {
        SolutionTemplateInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, solutionTemplateName);
        if (inner != null) {
            return new SolutionTemplateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SolutionTemplateVersion createVersion(String resourceGroupName, String solutionTemplateName,
        SolutionTemplateVersionWithUpdateTypeInner body) {
        SolutionTemplateVersionInner inner
            = this.serviceClient().createVersion(resourceGroupName, solutionTemplateName, body);
        if (inner != null) {
            return new SolutionTemplateVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SolutionTemplateVersion createVersion(String resourceGroupName, String solutionTemplateName,
        SolutionTemplateVersionWithUpdateTypeInner body, Context context) {
        SolutionTemplateVersionInner inner
            = this.serviceClient().createVersion(resourceGroupName, solutionTemplateName, body, context);
        if (inner != null) {
            return new SolutionTemplateVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void removeVersion(String resourceGroupName, String solutionTemplateName, VersionParameter body) {
        this.serviceClient().removeVersion(resourceGroupName, solutionTemplateName, body);
    }

    public void removeVersion(String resourceGroupName, String solutionTemplateName, VersionParameter body,
        Context context) {
        this.serviceClient().removeVersion(resourceGroupName, solutionTemplateName, body, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String solutionTemplateName) {
        this.serviceClient().delete(resourceGroupName, solutionTemplateName);
    }

    public void delete(String resourceGroupName, String solutionTemplateName, Context context) {
        this.serviceClient().delete(resourceGroupName, solutionTemplateName, context);
    }

    public PagedIterable<SolutionTemplate> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SolutionTemplateInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionTemplate> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SolutionTemplateInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionTemplate> list() {
        PagedIterable<SolutionTemplateInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionTemplate> list(Context context) {
        PagedIterable<SolutionTemplateInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTemplateImpl(inner1, this.manager()));
    }

    public SolutionTemplate getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String solutionTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "solutionTemplates");
        if (solutionTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'solutionTemplates'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, solutionTemplateName, Context.NONE).getValue();
    }

    public Response<SolutionTemplate> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String solutionTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "solutionTemplates");
        if (solutionTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'solutionTemplates'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, solutionTemplateName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String solutionTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "solutionTemplates");
        if (solutionTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'solutionTemplates'.", id)));
        }
        this.delete(resourceGroupName, solutionTemplateName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String solutionTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "solutionTemplates");
        if (solutionTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'solutionTemplates'.", id)));
        }
        this.delete(resourceGroupName, solutionTemplateName, context);
    }

    private SolutionTemplatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    public SolutionTemplateImpl define(String name) {
        return new SolutionTemplateImpl(name, this.manager());
    }
}
