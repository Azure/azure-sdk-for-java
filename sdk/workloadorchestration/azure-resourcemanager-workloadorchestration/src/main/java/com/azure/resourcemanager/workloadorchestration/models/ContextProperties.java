// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Context Properties.
 */
@Fluent
public final class ContextProperties implements JsonSerializable<ContextProperties> {
    /*
     * List of Capabilities
     */
    private List<Capability> capabilities;

    /*
     * List of Hierarchies
     */
    private List<Hierarchy> hierarchies;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ContextProperties class.
     */
    public ContextProperties() {
    }

    /**
     * Get the capabilities property: List of Capabilities.
     * 
     * @return the capabilities value.
     */
    public List<Capability> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: List of Capabilities.
     * 
     * @param capabilities the capabilities value to set.
     * @return the ContextProperties object itself.
     */
    public ContextProperties withCapabilities(List<Capability> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the hierarchies property: List of Hierarchies.
     * 
     * @return the hierarchies value.
     */
    public List<Hierarchy> hierarchies() {
        return this.hierarchies;
    }

    /**
     * Set the hierarchies property: List of Hierarchies.
     * 
     * @param hierarchies the hierarchies value to set.
     * @return the ContextProperties object itself.
     */
    public ContextProperties withHierarchies(List<Hierarchy> hierarchies) {
        this.hierarchies = hierarchies;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capabilities() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property capabilities in model ContextProperties"));
        } else {
            capabilities().forEach(e -> e.validate());
        }
        if (hierarchies() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property hierarchies in model ContextProperties"));
        } else {
            hierarchies().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContextProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("hierarchies", this.hierarchies, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContextProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContextProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContextProperties.
     */
    public static ContextProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContextProperties deserializedContextProperties = new ContextProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("capabilities".equals(fieldName)) {
                    List<Capability> capabilities = reader.readArray(reader1 -> Capability.fromJson(reader1));
                    deserializedContextProperties.capabilities = capabilities;
                } else if ("hierarchies".equals(fieldName)) {
                    List<Hierarchy> hierarchies = reader.readArray(reader1 -> Hierarchy.fromJson(reader1));
                    deserializedContextProperties.hierarchies = hierarchies;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedContextProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContextProperties;
        });
    }
}
