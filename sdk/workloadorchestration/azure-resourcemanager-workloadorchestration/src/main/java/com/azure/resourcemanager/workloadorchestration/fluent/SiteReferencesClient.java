// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SiteReferenceInner;

/**
 * An instance of this class provides access to all the operations defined in SiteReferencesClient.
 */
public interface SiteReferencesClient {
    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site Reference Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SiteReferenceInner> getWithResponse(String resourceGroupName, String contextName, String siteReferenceName,
        Context context);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteReferenceInner get(String resourceGroupName, String contextName, String siteReferenceName);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SiteReferenceInner>, SiteReferenceInner> beginCreateOrUpdate(String resourceGroupName,
        String contextName, String siteReferenceName, SiteReferenceInner resource);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SiteReferenceInner>, SiteReferenceInner> beginCreateOrUpdate(String resourceGroupName,
        String contextName, String siteReferenceName, SiteReferenceInner resource, Context context);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteReferenceInner createOrUpdate(String resourceGroupName, String contextName, String siteReferenceName,
        SiteReferenceInner resource);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteReferenceInner createOrUpdate(String resourceGroupName, String contextName, String siteReferenceName,
        SiteReferenceInner resource, Context context);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SiteReferenceInner>, SiteReferenceInner> beginUpdate(String resourceGroupName,
        String contextName, String siteReferenceName, SiteReferenceInner properties);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SiteReferenceInner>, SiteReferenceInner> beginUpdate(String resourceGroupName,
        String contextName, String siteReferenceName, SiteReferenceInner properties, Context context);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteReferenceInner update(String resourceGroupName, String contextName, String siteReferenceName,
        SiteReferenceInner properties);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteReferenceInner update(String resourceGroupName, String contextName, String siteReferenceName,
        SiteReferenceInner properties, Context context);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String contextName,
        String siteReferenceName);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site Reference Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String contextName,
        String siteReferenceName, Context context);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String contextName, String siteReferenceName);

    /**
     * Get Site Reference Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param siteReferenceName The name of the SiteReference.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String contextName, String siteReferenceName, Context context);

    /**
     * List Site Reference Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SiteReference list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SiteReferenceInner> listByContext(String resourceGroupName, String contextName);

    /**
     * List Site Reference Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contextName The name of the Context.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SiteReference list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SiteReferenceInner> listByContext(String resourceGroupName, String contextName, Context context);
}
