// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Stage Properties.
 */
@Fluent
public final class StageSpec implements JsonSerializable<StageSpec> {
    /*
     * Name of Stage
     */
    private String name;

    /*
     * Stage specification
     */
    private Map<String, BinaryData> specification;

    /*
     * List of tasks in the stage
     */
    private List<TaskSpec> tasks;

    /*
     * Task option for the stage
     */
    private TaskOption taskOption;

    /**
     * Creates an instance of StageSpec class.
     */
    public StageSpec() {
    }

    /**
     * Get the name property: Name of Stage.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of Stage.
     * 
     * @param name the name value to set.
     * @return the StageSpec object itself.
     */
    public StageSpec withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the specification property: Stage specification.
     * 
     * @return the specification value.
     */
    public Map<String, BinaryData> specification() {
        return this.specification;
    }

    /**
     * Set the specification property: Stage specification.
     * 
     * @param specification the specification value to set.
     * @return the StageSpec object itself.
     */
    public StageSpec withSpecification(Map<String, BinaryData> specification) {
        this.specification = specification;
        return this;
    }

    /**
     * Get the tasks property: List of tasks in the stage.
     * 
     * @return the tasks value.
     */
    public List<TaskSpec> tasks() {
        return this.tasks;
    }

    /**
     * Set the tasks property: List of tasks in the stage.
     * 
     * @param tasks the tasks value to set.
     * @return the StageSpec object itself.
     */
    public StageSpec withTasks(List<TaskSpec> tasks) {
        this.tasks = tasks;
        return this;
    }

    /**
     * Get the taskOption property: Task option for the stage.
     * 
     * @return the taskOption value.
     */
    public TaskOption taskOption() {
        return this.taskOption;
    }

    /**
     * Set the taskOption property: Task option for the stage.
     * 
     * @param taskOption the taskOption value to set.
     * @return the StageSpec object itself.
     */
    public StageSpec withTaskOption(TaskOption taskOption) {
        this.taskOption = taskOption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model StageSpec"));
        }
        if (tasks() != null) {
            tasks().forEach(e -> e.validate());
        }
        if (taskOption() != null) {
            taskOption().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StageSpec.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("specification", this.specification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("tasks", this.tasks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("taskOption", this.taskOption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StageSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StageSpec if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StageSpec.
     */
    public static StageSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StageSpec deserializedStageSpec = new StageSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStageSpec.name = reader.getString();
                } else if ("specification".equals(fieldName)) {
                    Map<String, BinaryData> specification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedStageSpec.specification = specification;
                } else if ("tasks".equals(fieldName)) {
                    List<TaskSpec> tasks = reader.readArray(reader1 -> TaskSpec.fromJson(reader1));
                    deserializedStageSpec.tasks = tasks;
                } else if ("taskOption".equals(fieldName)) {
                    deserializedStageSpec.taskOption = TaskOption.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStageSpec;
        });
    }
}
