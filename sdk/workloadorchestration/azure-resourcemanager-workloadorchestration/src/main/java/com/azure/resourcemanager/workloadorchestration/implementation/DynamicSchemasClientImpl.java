// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadorchestration.fluent.DynamicSchemasClient;
import com.azure.resourcemanager.workloadorchestration.fluent.models.DynamicSchemaInner;
import com.azure.resourcemanager.workloadorchestration.implementation.models.DynamicSchemaListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DynamicSchemasClient.
 */
public final class DynamicSchemasClientImpl implements DynamicSchemasClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DynamicSchemasService service;

    /**
     * The service client containing this operation class.
     */
    private final WorkloadOrchestrationManagementClientImpl client;

    /**
     * Initializes an instance of DynamicSchemasClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DynamicSchemasClientImpl(WorkloadOrchestrationManagementClientImpl client) {
        this.service
            = RestProxy.create(DynamicSchemasService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadOrchestrationManagementClientDynamicSchemas to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "WorkloadOrchestrationManagementClientDynamicSchemas")
    public interface DynamicSchemasService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DynamicSchemaInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @PathParam("dynamicSchemaName") String dynamicSchemaName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DynamicSchemaInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @PathParam("dynamicSchemaName") String dynamicSchemaName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @PathParam("dynamicSchemaName") String dynamicSchemaName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DynamicSchemaInner resource,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @PathParam("dynamicSchemaName") String dynamicSchemaName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DynamicSchemaInner resource,
            Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DynamicSchemaInner>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @PathParam("dynamicSchemaName") String dynamicSchemaName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DynamicSchemaInner properties,
            Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DynamicSchemaInner> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @PathParam("dynamicSchemaName") String dynamicSchemaName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DynamicSchemaInner properties,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @PathParam("dynamicSchemaName") String dynamicSchemaName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @PathParam("dynamicSchemaName") String dynamicSchemaName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DynamicSchemaListResult>> listBySchema(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DynamicSchemaListResult> listBySchemaSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("schemaName") String schemaName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DynamicSchemaListResult>> listBySchemaNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DynamicSchemaListResult> listBySchemaNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DynamicSchema Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DynamicSchemaInner>> getWithResponseAsync(String resourceGroupName, String schemaName,
        String dynamicSchemaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DynamicSchema Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DynamicSchemaInner> getAsync(String resourceGroupName, String schemaName, String dynamicSchemaName) {
        return getWithResponseAsync(resourceGroupName, schemaName, dynamicSchemaName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DynamicSchema Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DynamicSchemaInner> getWithResponse(String resourceGroupName, String schemaName,
        String dynamicSchemaName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, schemaName, dynamicSchemaName, accept, context);
    }

    /**
     * Get a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DynamicSchema Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicSchemaInner get(String resourceGroupName, String schemaName, String dynamicSchemaName) {
        return getWithResponse(resourceGroupName, schemaName, dynamicSchemaName, Context.NONE).getValue();
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String schemaName, String dynamicSchemaName, DynamicSchemaInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, contentType, accept,
                resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String schemaName,
        String dynamicSchemaName, DynamicSchemaInner resource) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, contentType, accept,
            resource, Context.NONE);
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String schemaName,
        String dynamicSchemaName, DynamicSchemaInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, contentType, accept,
            resource, context);
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of dynamicSchema Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DynamicSchemaInner>, DynamicSchemaInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String schemaName, String dynamicSchemaName, DynamicSchemaInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, schemaName, dynamicSchemaName, resource);
        return this.client.<DynamicSchemaInner, DynamicSchemaInner>getLroResult(mono, this.client.getHttpPipeline(),
            DynamicSchemaInner.class, DynamicSchemaInner.class, this.client.getContext());
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of dynamicSchema Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DynamicSchemaInner>, DynamicSchemaInner> beginCreateOrUpdate(String resourceGroupName,
        String schemaName, String dynamicSchemaName, DynamicSchemaInner resource) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, schemaName, dynamicSchemaName, resource);
        return this.client.<DynamicSchemaInner, DynamicSchemaInner>getLroResult(response, DynamicSchemaInner.class,
            DynamicSchemaInner.class, Context.NONE);
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of dynamicSchema Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DynamicSchemaInner>, DynamicSchemaInner> beginCreateOrUpdate(String resourceGroupName,
        String schemaName, String dynamicSchemaName, DynamicSchemaInner resource, Context context) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, schemaName, dynamicSchemaName, resource, context);
        return this.client.<DynamicSchemaInner, DynamicSchemaInner>getLroResult(response, DynamicSchemaInner.class,
            DynamicSchemaInner.class, context);
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DynamicSchemaInner> createOrUpdateAsync(String resourceGroupName, String schemaName,
        String dynamicSchemaName, DynamicSchemaInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, schemaName, dynamicSchemaName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicSchemaInner createOrUpdate(String resourceGroupName, String schemaName, String dynamicSchemaName,
        DynamicSchemaInner resource) {
        return beginCreateOrUpdate(resourceGroupName, schemaName, dynamicSchemaName, resource).getFinalResult();
    }

    /**
     * Create or update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicSchemaInner createOrUpdate(String resourceGroupName, String schemaName, String dynamicSchemaName,
        DynamicSchemaInner resource, Context context) {
        return beginCreateOrUpdate(resourceGroupName, schemaName, dynamicSchemaName, resource, context)
            .getFinalResult();
    }

    /**
     * update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DynamicSchemaInner>> updateWithResponseAsync(String resourceGroupName, String schemaName,
        String dynamicSchemaName, DynamicSchemaInner properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, contentType, accept,
                properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DynamicSchemaInner> updateAsync(String resourceGroupName, String schemaName, String dynamicSchemaName,
        DynamicSchemaInner properties) {
        return updateWithResponseAsync(resourceGroupName, schemaName, dynamicSchemaName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DynamicSchemaInner> updateWithResponse(String resourceGroupName, String schemaName,
        String dynamicSchemaName, DynamicSchemaInner properties, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        if (properties == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, contentType, accept,
            properties, context);
    }

    /**
     * update a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dynamicSchema Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicSchemaInner update(String resourceGroupName, String schemaName, String dynamicSchemaName,
        DynamicSchemaInner properties) {
        return updateWithResponse(resourceGroupName, schemaName, dynamicSchemaName, properties, Context.NONE)
            .getValue();
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String schemaName,
        String dynamicSchemaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String schemaName,
        String dynamicSchemaName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, Context.NONE);
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String schemaName,
        String dynamicSchemaName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        if (dynamicSchemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dynamicSchemaName is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, schemaName, dynamicSchemaName, context);
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String schemaName,
        String dynamicSchemaName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, schemaName, dynamicSchemaName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String schemaName,
        String dynamicSchemaName) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, schemaName, dynamicSchemaName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String schemaName,
        String dynamicSchemaName, Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, schemaName, dynamicSchemaName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String schemaName, String dynamicSchemaName) {
        return beginDeleteAsync(resourceGroupName, schemaName, dynamicSchemaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String schemaName, String dynamicSchemaName) {
        beginDelete(resourceGroupName, schemaName, dynamicSchemaName).getFinalResult();
    }

    /**
     * Delete a DynamicSchema Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param dynamicSchemaName The name of the DynamicSchema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String schemaName, String dynamicSchemaName, Context context) {
        beginDelete(resourceGroupName, schemaName, dynamicSchemaName, context).getFinalResult();
    }

    /**
     * List by Schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DynamicSchemaInner>> listBySchemaSinglePageAsync(String resourceGroupName,
        String schemaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySchema(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, schemaName, accept, context))
            .<PagedResponse<DynamicSchemaInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List by Schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DynamicSchemaInner> listBySchemaAsync(String resourceGroupName, String schemaName) {
        return new PagedFlux<>(() -> listBySchemaSinglePageAsync(resourceGroupName, schemaName),
            nextLink -> listBySchemaNextSinglePageAsync(nextLink));
    }

    /**
     * List by Schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DynamicSchemaInner> listBySchemaSinglePage(String resourceGroupName, String schemaName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DynamicSchemaListResult> res
            = service.listBySchemaSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, schemaName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List by Schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DynamicSchemaInner> listBySchemaSinglePage(String resourceGroupName, String schemaName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (schemaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter schemaName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DynamicSchemaListResult> res
            = service.listBySchemaSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, schemaName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List by Schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DynamicSchemaInner> listBySchema(String resourceGroupName, String schemaName) {
        return new PagedIterable<>(() -> listBySchemaSinglePage(resourceGroupName, schemaName),
            nextLink -> listBySchemaNextSinglePage(nextLink));
    }

    /**
     * List by Schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schemaName The name of the Schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DynamicSchemaInner> listBySchema(String resourceGroupName, String schemaName,
        Context context) {
        return new PagedIterable<>(() -> listBySchemaSinglePage(resourceGroupName, schemaName, context),
            nextLink -> listBySchemaNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DynamicSchemaInner>> listBySchemaNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySchemaNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DynamicSchemaInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DynamicSchemaInner> listBySchemaNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DynamicSchemaListResult> res
            = service.listBySchemaNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DynamicSchema list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DynamicSchemaInner> listBySchemaNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DynamicSchemaListResult> res
            = service.listBySchemaNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(DynamicSchemasClientImpl.class);
}
