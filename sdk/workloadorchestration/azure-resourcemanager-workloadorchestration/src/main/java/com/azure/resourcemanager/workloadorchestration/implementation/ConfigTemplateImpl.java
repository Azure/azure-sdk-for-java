// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadorchestration.fluent.models.ConfigTemplateInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.ConfigTemplateVersionWithUpdateTypeInner;
import com.azure.resourcemanager.workloadorchestration.models.ConfigTemplate;
import com.azure.resourcemanager.workloadorchestration.models.ConfigTemplateProperties;
import com.azure.resourcemanager.workloadorchestration.models.ConfigTemplateVersion;
import com.azure.resourcemanager.workloadorchestration.models.RemoveVersionResponse;
import com.azure.resourcemanager.workloadorchestration.models.VersionParameter;
import java.util.Collections;
import java.util.Map;

public final class ConfigTemplateImpl implements ConfigTemplate, ConfigTemplate.Definition, ConfigTemplate.Update {
    private ConfigTemplateInner innerObject;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ConfigTemplateProperties properties() {
        return this.innerModel().properties();
    }

    public String eTag() {
        return this.innerModel().eTag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ConfigTemplateInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String configTemplateName;

    public ConfigTemplateImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ConfigTemplate create() {
        this.innerObject = serviceManager.serviceClient()
            .getConfigTemplates()
            .createOrUpdate(resourceGroupName, configTemplateName, this.innerModel(), Context.NONE);
        return this;
    }

    public ConfigTemplate create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConfigTemplates()
            .createOrUpdate(resourceGroupName, configTemplateName, this.innerModel(), context);
        return this;
    }

    ConfigTemplateImpl(String name,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = new ConfigTemplateInner();
        this.serviceManager = serviceManager;
        this.configTemplateName = name;
    }

    public ConfigTemplateImpl update() {
        return this;
    }

    public ConfigTemplate apply() {
        this.innerObject = serviceManager.serviceClient()
            .getConfigTemplates()
            .updateWithResponse(resourceGroupName, configTemplateName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public ConfigTemplate apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConfigTemplates()
            .updateWithResponse(resourceGroupName, configTemplateName, this.innerModel(), context)
            .getValue();
        return this;
    }

    ConfigTemplateImpl(ConfigTemplateInner innerObject,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.configTemplateName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "configTemplates");
    }

    public ConfigTemplate refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getConfigTemplates()
            .getByResourceGroupWithResponse(resourceGroupName, configTemplateName, Context.NONE)
            .getValue();
        return this;
    }

    public ConfigTemplate refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConfigTemplates()
            .getByResourceGroupWithResponse(resourceGroupName, configTemplateName, context)
            .getValue();
        return this;
    }

    public ConfigTemplateVersion createVersion(ConfigTemplateVersionWithUpdateTypeInner body) {
        return serviceManager.configTemplates().createVersion(resourceGroupName, configTemplateName, body);
    }

    public ConfigTemplateVersion createVersion(ConfigTemplateVersionWithUpdateTypeInner body, Context context) {
        return serviceManager.configTemplates().createVersion(resourceGroupName, configTemplateName, body, context);
    }

    public Response<RemoveVersionResponse> removeVersionWithResponse(VersionParameter body, Context context) {
        return serviceManager.configTemplates()
            .removeVersionWithResponse(resourceGroupName, configTemplateName, body, context);
    }

    public RemoveVersionResponse removeVersion(VersionParameter body) {
        return serviceManager.configTemplates().removeVersion(resourceGroupName, configTemplateName, body);
    }

    public ConfigTemplateImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ConfigTemplateImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ConfigTemplateImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ConfigTemplateImpl withProperties(ConfigTemplateProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
