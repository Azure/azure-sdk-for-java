// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Error Action Properties.
 */
@Fluent
public final class ErrorAction implements JsonSerializable<ErrorAction> {
    /*
     * Error action mode
     */
    private ErrorActionMode mode;

    /*
     * Max tolerated failures
     */
    private Integer maxToleratedFailures;

    /**
     * Creates an instance of ErrorAction class.
     */
    public ErrorAction() {
    }

    /**
     * Get the mode property: Error action mode.
     * 
     * @return the mode value.
     */
    public ErrorActionMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Error action mode.
     * 
     * @param mode the mode value to set.
     * @return the ErrorAction object itself.
     */
    public ErrorAction withMode(ErrorActionMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the maxToleratedFailures property: Max tolerated failures.
     * 
     * @return the maxToleratedFailures value.
     */
    public Integer maxToleratedFailures() {
        return this.maxToleratedFailures;
    }

    /**
     * Set the maxToleratedFailures property: Max tolerated failures.
     * 
     * @param maxToleratedFailures the maxToleratedFailures value to set.
     * @return the ErrorAction object itself.
     */
    public ErrorAction withMaxToleratedFailures(Integer maxToleratedFailures) {
        this.maxToleratedFailures = maxToleratedFailures;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeNumberField("maxToleratedFailures", this.maxToleratedFailures);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorAction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ErrorAction.
     */
    public static ErrorAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ErrorAction deserializedErrorAction = new ErrorAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedErrorAction.mode = ErrorActionMode.fromString(reader.getString());
                } else if ("maxToleratedFailures".equals(fieldName)) {
                    deserializedErrorAction.maxToleratedFailures = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedErrorAction;
        });
    }
}
