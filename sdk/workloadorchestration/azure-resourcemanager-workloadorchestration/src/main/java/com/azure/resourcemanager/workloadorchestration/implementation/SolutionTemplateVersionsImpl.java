// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadorchestration.fluent.SolutionTemplateVersionsClient;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionInner;
import com.azure.resourcemanager.workloadorchestration.models.BulkDeploySolutionParameter;
import com.azure.resourcemanager.workloadorchestration.models.BulkPublishSolutionParameter;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersion;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersions;

public final class SolutionTemplateVersionsImpl implements SolutionTemplateVersions {
    private static final ClientLogger LOGGER = new ClientLogger(SolutionTemplateVersionsImpl.class);

    private final SolutionTemplateVersionsClient innerClient;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public SolutionTemplateVersionsImpl(SolutionTemplateVersionsClient innerClient,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SolutionTemplateVersion> getWithResponse(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, Context context) {
        Response<SolutionTemplateVersionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SolutionTemplateVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SolutionTemplateVersion get(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName) {
        SolutionTemplateVersionInner inner
            = this.serviceClient().get(resourceGroupName, solutionTemplateName, solutionTemplateVersionName);
        if (inner != null) {
            return new SolutionTemplateVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SolutionTemplateVersion> listBySolutionTemplate(String resourceGroupName,
        String solutionTemplateName) {
        PagedIterable<SolutionTemplateVersionInner> inner
            = this.serviceClient().listBySolutionTemplate(resourceGroupName, solutionTemplateName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTemplateVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionTemplateVersion> listBySolutionTemplate(String resourceGroupName,
        String solutionTemplateName, Context context) {
        PagedIterable<SolutionTemplateVersionInner> inner
            = this.serviceClient().listBySolutionTemplate(resourceGroupName, solutionTemplateName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTemplateVersionImpl(inner1, this.manager()));
    }

    public void bulkDeploySolution(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkDeploySolutionParameter body) {
        this.serviceClient()
            .bulkDeploySolution(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body);
    }

    public void bulkDeploySolution(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkDeploySolutionParameter body, Context context) {
        this.serviceClient()
            .bulkDeploySolution(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, context);
    }

    public void bulkPublishSolution(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkPublishSolutionParameter body) {
        this.serviceClient()
            .bulkPublishSolution(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body);
    }

    public void bulkPublishSolution(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkPublishSolutionParameter body, Context context) {
        this.serviceClient()
            .bulkPublishSolution(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, context);
    }

    private SolutionTemplateVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }
}
