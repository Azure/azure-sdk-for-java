// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Solution Dependency Context.
 */
@Fluent
public final class SolutionDependencyParameter implements JsonSerializable<SolutionDependencyParameter> {
    /*
     * Solution Version Id
     */
    private String solutionVersionId;

    /*
     * Solution Template Id
     */
    private String solutionTemplateId;

    /*
     * Solution Template Version
     */
    private String solutionTemplateVersion;

    /*
     * Solution Instance Name
     */
    private String solutionInstanceName;

    /*
     * Target Id
     */
    private String targetId;

    /*
     * Solution dependencies
     */
    private List<SolutionDependencyParameter> dependencies;

    /**
     * Creates an instance of SolutionDependencyParameter class.
     */
    public SolutionDependencyParameter() {
    }

    /**
     * Get the solutionVersionId property: Solution Version Id.
     * 
     * @return the solutionVersionId value.
     */
    public String solutionVersionId() {
        return this.solutionVersionId;
    }

    /**
     * Set the solutionVersionId property: Solution Version Id.
     * 
     * @param solutionVersionId the solutionVersionId value to set.
     * @return the SolutionDependencyParameter object itself.
     */
    public SolutionDependencyParameter withSolutionVersionId(String solutionVersionId) {
        this.solutionVersionId = solutionVersionId;
        return this;
    }

    /**
     * Get the solutionTemplateId property: Solution Template Id.
     * 
     * @return the solutionTemplateId value.
     */
    public String solutionTemplateId() {
        return this.solutionTemplateId;
    }

    /**
     * Set the solutionTemplateId property: Solution Template Id.
     * 
     * @param solutionTemplateId the solutionTemplateId value to set.
     * @return the SolutionDependencyParameter object itself.
     */
    public SolutionDependencyParameter withSolutionTemplateId(String solutionTemplateId) {
        this.solutionTemplateId = solutionTemplateId;
        return this;
    }

    /**
     * Get the solutionTemplateVersion property: Solution Template Version.
     * 
     * @return the solutionTemplateVersion value.
     */
    public String solutionTemplateVersion() {
        return this.solutionTemplateVersion;
    }

    /**
     * Set the solutionTemplateVersion property: Solution Template Version.
     * 
     * @param solutionTemplateVersion the solutionTemplateVersion value to set.
     * @return the SolutionDependencyParameter object itself.
     */
    public SolutionDependencyParameter withSolutionTemplateVersion(String solutionTemplateVersion) {
        this.solutionTemplateVersion = solutionTemplateVersion;
        return this;
    }

    /**
     * Get the solutionInstanceName property: Solution Instance Name.
     * 
     * @return the solutionInstanceName value.
     */
    public String solutionInstanceName() {
        return this.solutionInstanceName;
    }

    /**
     * Set the solutionInstanceName property: Solution Instance Name.
     * 
     * @param solutionInstanceName the solutionInstanceName value to set.
     * @return the SolutionDependencyParameter object itself.
     */
    public SolutionDependencyParameter withSolutionInstanceName(String solutionInstanceName) {
        this.solutionInstanceName = solutionInstanceName;
        return this;
    }

    /**
     * Get the targetId property: Target Id.
     * 
     * @return the targetId value.
     */
    public String targetId() {
        return this.targetId;
    }

    /**
     * Set the targetId property: Target Id.
     * 
     * @param targetId the targetId value to set.
     * @return the SolutionDependencyParameter object itself.
     */
    public SolutionDependencyParameter withTargetId(String targetId) {
        this.targetId = targetId;
        return this;
    }

    /**
     * Get the dependencies property: Solution dependencies.
     * 
     * @return the dependencies value.
     */
    public List<SolutionDependencyParameter> dependencies() {
        return this.dependencies;
    }

    /**
     * Set the dependencies property: Solution dependencies.
     * 
     * @param dependencies the dependencies value to set.
     * @return the SolutionDependencyParameter object itself.
     */
    public SolutionDependencyParameter withDependencies(List<SolutionDependencyParameter> dependencies) {
        this.dependencies = dependencies;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dependencies() != null) {
            dependencies().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionVersionId", this.solutionVersionId);
        jsonWriter.writeStringField("solutionTemplateId", this.solutionTemplateId);
        jsonWriter.writeStringField("solutionTemplateVersion", this.solutionTemplateVersion);
        jsonWriter.writeStringField("solutionInstanceName", this.solutionInstanceName);
        jsonWriter.writeStringField("targetId", this.targetId);
        jsonWriter.writeArrayField("dependencies", this.dependencies, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionDependencyParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionDependencyParameter if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionDependencyParameter.
     */
    public static SolutionDependencyParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionDependencyParameter deserializedSolutionDependencyParameter = new SolutionDependencyParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionVersionId".equals(fieldName)) {
                    deserializedSolutionDependencyParameter.solutionVersionId = reader.getString();
                } else if ("solutionTemplateId".equals(fieldName)) {
                    deserializedSolutionDependencyParameter.solutionTemplateId = reader.getString();
                } else if ("solutionTemplateVersion".equals(fieldName)) {
                    deserializedSolutionDependencyParameter.solutionTemplateVersion = reader.getString();
                } else if ("solutionInstanceName".equals(fieldName)) {
                    deserializedSolutionDependencyParameter.solutionInstanceName = reader.getString();
                } else if ("targetId".equals(fieldName)) {
                    deserializedSolutionDependencyParameter.targetId = reader.getString();
                } else if ("dependencies".equals(fieldName)) {
                    List<SolutionDependencyParameter> dependencies
                        = reader.readArray(reader1 -> SolutionDependencyParameter.fromJson(reader1));
                    deserializedSolutionDependencyParameter.dependencies = dependencies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionDependencyParameter;
        });
    }
}
