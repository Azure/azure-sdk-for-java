// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Instance History Properties.
 */
@Immutable
public final class InstanceHistoryProperties implements JsonSerializable<InstanceHistoryProperties> {
    /*
     * Solution version of instance
     */
    private SolutionVersionSnapshot solutionVersion;

    /*
     * Target of instance
     */
    private TargetSnapshot target;

    /*
     * Scope of instance
     */
    private String solutionScope;

    /*
     * State of instance
     */
    private ActiveState activeState;

    /*
     * Reconciliation policy of instance
     */
    private ReconciliationPolicyProperties reconciliationPolicy;

    /*
     * Deployment Status of instance
     */
    private DeploymentStatus status;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of InstanceHistoryProperties class.
     */
    private InstanceHistoryProperties() {
    }

    /**
     * Get the solutionVersion property: Solution version of instance.
     * 
     * @return the solutionVersion value.
     */
    public SolutionVersionSnapshot solutionVersion() {
        return this.solutionVersion;
    }

    /**
     * Get the target property: Target of instance.
     * 
     * @return the target value.
     */
    public TargetSnapshot target() {
        return this.target;
    }

    /**
     * Get the solutionScope property: Scope of instance.
     * 
     * @return the solutionScope value.
     */
    public String solutionScope() {
        return this.solutionScope;
    }

    /**
     * Get the activeState property: State of instance.
     * 
     * @return the activeState value.
     */
    public ActiveState activeState() {
        return this.activeState;
    }

    /**
     * Get the reconciliationPolicy property: Reconciliation policy of instance.
     * 
     * @return the reconciliationPolicy value.
     */
    public ReconciliationPolicyProperties reconciliationPolicy() {
        return this.reconciliationPolicy;
    }

    /**
     * Get the status property: Deployment Status of instance.
     * 
     * @return the status value.
     */
    public DeploymentStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionVersion() != null) {
            solutionVersion().validate();
        }
        if (target() != null) {
            target().validate();
        }
        if (reconciliationPolicy() != null) {
            reconciliationPolicy().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activeState", this.activeState == null ? null : this.activeState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceHistoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceHistoryProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InstanceHistoryProperties.
     */
    public static InstanceHistoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceHistoryProperties deserializedInstanceHistoryProperties = new InstanceHistoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionVersion".equals(fieldName)) {
                    deserializedInstanceHistoryProperties.solutionVersion = SolutionVersionSnapshot.fromJson(reader);
                } else if ("target".equals(fieldName)) {
                    deserializedInstanceHistoryProperties.target = TargetSnapshot.fromJson(reader);
                } else if ("solutionScope".equals(fieldName)) {
                    deserializedInstanceHistoryProperties.solutionScope = reader.getString();
                } else if ("activeState".equals(fieldName)) {
                    deserializedInstanceHistoryProperties.activeState = ActiveState.fromString(reader.getString());
                } else if ("reconciliationPolicy".equals(fieldName)) {
                    deserializedInstanceHistoryProperties.reconciliationPolicy
                        = ReconciliationPolicyProperties.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedInstanceHistoryProperties.status = DeploymentStatus.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInstanceHistoryProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceHistoryProperties;
        });
    }
}
