// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionInner;

/**
 * An instance of this class provides access to all the operations defined in SolutionsClient.
 */
public interface SolutionsClient {
    /**
     * Get a Solution resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Solution resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SolutionInner> getWithResponse(String resourceGroupName, String targetName, String solutionName,
        Context context);

    /**
     * Get a Solution resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Solution resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionInner get(String resourceGroupName, String targetName, String solutionName);

    /**
     * Create or update a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution Resource attached to a Target.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionInner>, SolutionInner> beginCreateOrUpdate(String resourceGroupName,
        String targetName, String solutionName, SolutionInner resource);

    /**
     * Create or update a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution Resource attached to a Target.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionInner>, SolutionInner> beginCreateOrUpdate(String resourceGroupName,
        String targetName, String solutionName, SolutionInner resource, Context context);

    /**
     * Create or update a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Resource attached to a Target.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionInner createOrUpdate(String resourceGroupName, String targetName, String solutionName,
        SolutionInner resource);

    /**
     * Create or update a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Resource attached to a Target.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionInner createOrUpdate(String resourceGroupName, String targetName, String solutionName,
        SolutionInner resource, Context context);

    /**
     * Update a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution Resource attached to a Target.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionInner>, SolutionInner> beginUpdate(String resourceGroupName, String targetName,
        String solutionName, SolutionInner properties);

    /**
     * Update a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution Resource attached to a Target.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionInner>, SolutionInner> beginUpdate(String resourceGroupName, String targetName,
        String solutionName, SolutionInner properties, Context context);

    /**
     * Update a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Resource attached to a Target.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionInner update(String resourceGroupName, String targetName, String solutionName, SolutionInner properties);

    /**
     * Update a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Resource attached to a Target.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionInner update(String resourceGroupName, String targetName, String solutionName, SolutionInner properties,
        Context context);

    /**
     * Delete a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetName, String solutionName);

    /**
     * Delete a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetName, String solutionName,
        Context context);

    /**
     * Delete a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String targetName, String solutionName);

    /**
     * Delete a Solution Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String targetName, String solutionName, Context context);

    /**
     * List Solution resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Solution list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SolutionInner> listByTarget(String resourceGroupName, String targetName);

    /**
     * List Solution resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Solution list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SolutionInner> listByTarget(String resourceGroupName, String targetName, Context context);
}
