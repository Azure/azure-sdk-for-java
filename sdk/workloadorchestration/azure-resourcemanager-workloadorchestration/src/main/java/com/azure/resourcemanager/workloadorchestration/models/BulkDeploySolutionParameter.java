// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Bulk deploy solution parameter.
 */
@Fluent
public final class BulkDeploySolutionParameter implements JsonSerializable<BulkDeploySolutionParameter> {
    /*
     * Targets to which solution needs to be deployed
     */
    private List<BulkDeployTargetDetails> targets;

    /**
     * Creates an instance of BulkDeploySolutionParameter class.
     */
    public BulkDeploySolutionParameter() {
    }

    /**
     * Get the targets property: Targets to which solution needs to be deployed.
     * 
     * @return the targets value.
     */
    public List<BulkDeployTargetDetails> targets() {
        return this.targets;
    }

    /**
     * Set the targets property: Targets to which solution needs to be deployed.
     * 
     * @param targets the targets value to set.
     * @return the BulkDeploySolutionParameter object itself.
     */
    public BulkDeploySolutionParameter withTargets(List<BulkDeployTargetDetails> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targets() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targets in model BulkDeploySolutionParameter"));
        } else {
            targets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BulkDeploySolutionParameter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("targets", this.targets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BulkDeploySolutionParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BulkDeploySolutionParameter if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BulkDeploySolutionParameter.
     */
    public static BulkDeploySolutionParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BulkDeploySolutionParameter deserializedBulkDeploySolutionParameter = new BulkDeploySolutionParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targets".equals(fieldName)) {
                    List<BulkDeployTargetDetails> targets
                        = reader.readArray(reader1 -> BulkDeployTargetDetails.fromJson(reader1));
                    deserializedBulkDeploySolutionParameter.targets = targets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBulkDeploySolutionParameter;
        });
    }
}
