// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadorchestration.fluent.InstancesClient;
import com.azure.resourcemanager.workloadorchestration.fluent.models.InstanceInner;
import com.azure.resourcemanager.workloadorchestration.implementation.models.InstanceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in InstancesClient.
 */
public final class InstancesClientImpl implements InstancesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final InstancesService service;

    /**
     * The service client containing this operation class.
     */
    private final WorkloadOrchestrationManagementClientImpl client;

    /**
     * Initializes an instance of InstancesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    InstancesClientImpl(WorkloadOrchestrationManagementClientImpl client) {
        this.service
            = RestProxy.create(InstancesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadOrchestrationManagementClientInstances to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "WorkloadOrchestrationManagementClientInstances")
    public interface InstancesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InstanceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @PathParam("instanceName") String instanceName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<InstanceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @PathParam("instanceName") String instanceName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @PathParam("instanceName") String instanceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") InstanceInner resource, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @PathParam("instanceName") String instanceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") InstanceInner resource, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @PathParam("instanceName") String instanceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") InstanceInner properties, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @PathParam("instanceName") String instanceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") InstanceInner properties, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @PathParam("instanceName") String instanceName,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @PathParam("instanceName") String instanceName,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InstanceListResult>> listBySolution(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<InstanceListResult> listBySolutionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("targetName") String targetName,
            @PathParam("solutionName") String solutionName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InstanceListResult>> listBySolutionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<InstanceListResult> listBySolutionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InstanceInner>> getWithResponseAsync(String resourceGroupName, String targetName,
        String solutionName, String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InstanceInner> getAsync(String resourceGroupName, String targetName, String solutionName,
        String instanceName) {
        return getWithResponseAsync(resourceGroupName, targetName, solutionName, instanceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InstanceInner> getWithResponse(String resourceGroupName, String targetName, String solutionName,
        String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, targetName, solutionName, instanceName, accept, context);
    }

    /**
     * Get Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InstanceInner get(String resourceGroupName, String targetName, String solutionName, String instanceName) {
        return getWithResponse(resourceGroupName, targetName, solutionName, instanceName, Context.NONE).getValue();
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String targetName, String solutionName, String instanceName, InstanceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, contentType,
                accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String targetName,
        String solutionName, String instanceName, InstanceInner resource) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, contentType,
            accept, resource, Context.NONE);
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String targetName,
        String solutionName, String instanceName, InstanceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, contentType,
            accept, resource, context);
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of instance Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InstanceInner>, InstanceInner> beginCreateOrUpdateAsync(String resourceGroupName,
        String targetName, String solutionName, String instanceName, InstanceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, targetName, solutionName, instanceName, resource);
        return this.client.<InstanceInner, InstanceInner>getLroResult(mono, this.client.getHttpPipeline(),
            InstanceInner.class, InstanceInner.class, this.client.getContext());
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of instance Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InstanceInner>, InstanceInner> beginCreateOrUpdate(String resourceGroupName,
        String targetName, String solutionName, String instanceName, InstanceInner resource) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, targetName, solutionName, instanceName, resource);
        return this.client.<InstanceInner, InstanceInner>getLroResult(response, InstanceInner.class,
            InstanceInner.class, Context.NONE);
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of instance Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InstanceInner>, InstanceInner> beginCreateOrUpdate(String resourceGroupName,
        String targetName, String solutionName, String instanceName, InstanceInner resource, Context context) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, targetName, solutionName, instanceName, resource, context);
        return this.client.<InstanceInner, InstanceInner>getLroResult(response, InstanceInner.class,
            InstanceInner.class, context);
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InstanceInner> createOrUpdateAsync(String resourceGroupName, String targetName, String solutionName,
        String instanceName, InstanceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, targetName, solutionName, instanceName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InstanceInner createOrUpdate(String resourceGroupName, String targetName, String solutionName,
        String instanceName, InstanceInner resource) {
        return beginCreateOrUpdate(resourceGroupName, targetName, solutionName, instanceName, resource)
            .getFinalResult();
    }

    /**
     * Create or update Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InstanceInner createOrUpdate(String resourceGroupName, String targetName, String solutionName,
        String instanceName, InstanceInner resource, Context context) {
        return beginCreateOrUpdate(resourceGroupName, targetName, solutionName, instanceName, resource, context)
            .getFinalResult();
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String targetName,
        String solutionName, String instanceName, InstanceInner properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, contentType,
                accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String targetName, String solutionName,
        String instanceName, InstanceInner properties) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (properties == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, contentType,
            accept, properties, Context.NONE);
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String targetName, String solutionName,
        String instanceName, InstanceInner properties, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (properties == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, contentType,
            accept, properties, context);
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of instance Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InstanceInner>, InstanceInner> beginUpdateAsync(String resourceGroupName,
        String targetName, String solutionName, String instanceName, InstanceInner properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, targetName, solutionName, instanceName, properties);
        return this.client.<InstanceInner, InstanceInner>getLroResult(mono, this.client.getHttpPipeline(),
            InstanceInner.class, InstanceInner.class, this.client.getContext());
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of instance Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InstanceInner>, InstanceInner> beginUpdate(String resourceGroupName, String targetName,
        String solutionName, String instanceName, InstanceInner properties) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, targetName, solutionName, instanceName, properties);
        return this.client.<InstanceInner, InstanceInner>getLroResult(response, InstanceInner.class,
            InstanceInner.class, Context.NONE);
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of instance Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InstanceInner>, InstanceInner> beginUpdate(String resourceGroupName, String targetName,
        String solutionName, String instanceName, InstanceInner properties, Context context) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, targetName, solutionName, instanceName, properties, context);
        return this.client.<InstanceInner, InstanceInner>getLroResult(response, InstanceInner.class,
            InstanceInner.class, context);
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InstanceInner> updateAsync(String resourceGroupName, String targetName, String solutionName,
        String instanceName, InstanceInner properties) {
        return beginUpdateAsync(resourceGroupName, targetName, solutionName, instanceName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InstanceInner update(String resourceGroupName, String targetName, String solutionName, String instanceName,
        InstanceInner properties) {
        return beginUpdate(resourceGroupName, targetName, solutionName, instanceName, properties).getFinalResult();
    }

    /**
     * Update an Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InstanceInner update(String resourceGroupName, String targetName, String solutionName, String instanceName,
        InstanceInner properties, Context context) {
        return beginUpdate(resourceGroupName, targetName, solutionName, instanceName, properties, context)
            .getFinalResult();
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String targetName,
        String solutionName, String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String targetName, String solutionName,
        String instanceName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, Context.NONE);
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String targetName, String solutionName,
        String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, instanceName, context);
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String targetName,
        String solutionName, String instanceName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, targetName, solutionName, instanceName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetName,
        String solutionName, String instanceName) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, targetName, solutionName, instanceName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetName,
        String solutionName, String instanceName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, targetName, solutionName, instanceName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String targetName, String solutionName,
        String instanceName) {
        return beginDeleteAsync(resourceGroupName, targetName, solutionName, instanceName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String targetName, String solutionName, String instanceName) {
        beginDelete(resourceGroupName, targetName, solutionName, instanceName).getFinalResult();
    }

    /**
     * Delete Instance Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param instanceName Name of the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String targetName, String solutionName, String instanceName,
        Context context) {
        beginDelete(resourceGroupName, targetName, solutionName, instanceName, context).getFinalResult();
    }

    /**
     * List Instance Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InstanceInner>> listBySolutionSinglePageAsync(String resourceGroupName,
        String targetName, String solutionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySolution(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, accept, context))
            .<PagedResponse<InstanceInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List Instance Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InstanceInner> listBySolutionAsync(String resourceGroupName, String targetName,
        String solutionName) {
        return new PagedFlux<>(() -> listBySolutionSinglePageAsync(resourceGroupName, targetName, solutionName),
            nextLink -> listBySolutionNextSinglePageAsync(nextLink));
    }

    /**
     * List Instance Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<InstanceInner> listBySolutionSinglePage(String resourceGroupName, String targetName,
        String solutionName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<InstanceListResult> res
            = service.listBySolutionSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List Instance Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<InstanceInner> listBySolutionSinglePage(String resourceGroupName, String targetName,
        String solutionName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (targetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (solutionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<InstanceListResult> res
            = service.listBySolutionSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, targetName, solutionName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List Instance Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InstanceInner> listBySolution(String resourceGroupName, String targetName,
        String solutionName) {
        return new PagedIterable<>(() -> listBySolutionSinglePage(resourceGroupName, targetName, solutionName),
            nextLink -> listBySolutionNextSinglePage(nextLink));
    }

    /**
     * List Instance Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of the target.
     * @param solutionName Name of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InstanceInner> listBySolution(String resourceGroupName, String targetName, String solutionName,
        Context context) {
        return new PagedIterable<>(() -> listBySolutionSinglePage(resourceGroupName, targetName, solutionName, context),
            nextLink -> listBySolutionNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InstanceInner>> listBySolutionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySolutionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<InstanceInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<InstanceInner> listBySolutionNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<InstanceListResult> res
            = service.listBySolutionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Instance list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<InstanceInner> listBySolutionNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<InstanceListResult> res
            = service.listBySolutionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(InstancesClientImpl.class);
}
