// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionWithUpdateTypeInner;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplate;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateProperties;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersion;
import com.azure.resourcemanager.workloadorchestration.models.VersionParameter;
import java.util.Collections;
import java.util.Map;

public final class SolutionTemplateImpl
    implements SolutionTemplate, SolutionTemplate.Definition, SolutionTemplate.Update {
    private SolutionTemplateInner innerObject;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SolutionTemplateProperties properties() {
        return this.innerModel().properties();
    }

    public String eTag() {
        return this.innerModel().eTag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SolutionTemplateInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String solutionTemplateName;

    public SolutionTemplateImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public SolutionTemplate create() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionTemplates()
            .createOrUpdate(resourceGroupName, solutionTemplateName, this.innerModel(), Context.NONE);
        return this;
    }

    public SolutionTemplate create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionTemplates()
            .createOrUpdate(resourceGroupName, solutionTemplateName, this.innerModel(), context);
        return this;
    }

    SolutionTemplateImpl(String name,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = new SolutionTemplateInner();
        this.serviceManager = serviceManager;
        this.solutionTemplateName = name;
    }

    public SolutionTemplateImpl update() {
        return this;
    }

    public SolutionTemplate apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionTemplates()
            .updateWithResponse(resourceGroupName, solutionTemplateName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public SolutionTemplate apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionTemplates()
            .updateWithResponse(resourceGroupName, solutionTemplateName, this.innerModel(), context)
            .getValue();
        return this;
    }

    SolutionTemplateImpl(SolutionTemplateInner innerObject,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.solutionTemplateName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "solutionTemplates");
    }

    public SolutionTemplate refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionTemplates()
            .getByResourceGroupWithResponse(resourceGroupName, solutionTemplateName, Context.NONE)
            .getValue();
        return this;
    }

    public SolutionTemplate refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionTemplates()
            .getByResourceGroupWithResponse(resourceGroupName, solutionTemplateName, context)
            .getValue();
        return this;
    }

    public SolutionTemplateVersion createVersion(SolutionTemplateVersionWithUpdateTypeInner body) {
        return serviceManager.solutionTemplates().createVersion(resourceGroupName, solutionTemplateName, body);
    }

    public SolutionTemplateVersion createVersion(SolutionTemplateVersionWithUpdateTypeInner body, Context context) {
        return serviceManager.solutionTemplates().createVersion(resourceGroupName, solutionTemplateName, body, context);
    }

    public void removeVersion(VersionParameter body) {
        serviceManager.solutionTemplates().removeVersion(resourceGroupName, solutionTemplateName, body);
    }

    public void removeVersion(VersionParameter body, Context context) {
        serviceManager.solutionTemplates().removeVersion(resourceGroupName, solutionTemplateName, body, context);
    }

    public SolutionTemplateImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SolutionTemplateImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SolutionTemplateImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public SolutionTemplateImpl withProperties(SolutionTemplateProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
