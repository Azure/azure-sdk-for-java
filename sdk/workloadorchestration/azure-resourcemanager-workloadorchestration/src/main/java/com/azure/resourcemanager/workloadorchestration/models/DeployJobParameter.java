// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters for a deployment job.
 */
@Immutable
public final class DeployJobParameter extends JobParameterBase {
    /*
     * Job type discriminator value
     */
    private JobType jobType = JobType.DEPLOY;

    /*
     * The parameter property.
     */
    private InstallSolutionParameter parameter;

    /**
     * Creates an instance of DeployJobParameter class.
     */
    private DeployJobParameter() {
    }

    /**
     * Get the jobType property: Job type discriminator value.
     * 
     * @return the jobType value.
     */
    @Override
    public JobType jobType() {
        return this.jobType;
    }

    /**
     * Get the parameter property: The parameter property.
     * 
     * @return the parameter value.
     */
    public InstallSolutionParameter parameter() {
        return this.parameter;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (parameter() != null) {
            parameter().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        jsonWriter.writeJsonField("parameter", this.parameter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeployJobParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeployJobParameter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeployJobParameter.
     */
    public static DeployJobParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeployJobParameter deserializedDeployJobParameter = new DeployJobParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobType".equals(fieldName)) {
                    deserializedDeployJobParameter.jobType = JobType.fromString(reader.getString());
                } else if ("parameter".equals(fieldName)) {
                    deserializedDeployJobParameter.parameter = InstallSolutionParameter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeployJobParameter;
        });
    }
}
