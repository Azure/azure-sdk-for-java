// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The updatable properties of the SolutionTemplate.
 */
@Fluent
public final class SolutionTemplateUpdateProperties implements JsonSerializable<SolutionTemplateUpdateProperties> {
    /*
     * Description of Solution template
     */
    private String description;

    /*
     * List of capabilities
     */
    private List<String> capabilities;

    /*
     * State of resource
     */
    private ResourceState state;

    /*
     * Flag to enable external validation
     */
    private Boolean enableExternalValidation;

    /**
     * Creates an instance of SolutionTemplateUpdateProperties class.
     */
    public SolutionTemplateUpdateProperties() {
    }

    /**
     * Get the description property: Description of Solution template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of Solution template.
     * 
     * @param description the description value to set.
     * @return the SolutionTemplateUpdateProperties object itself.
     */
    public SolutionTemplateUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the capabilities property: List of capabilities.
     * 
     * @return the capabilities value.
     */
    public List<String> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: List of capabilities.
     * 
     * @param capabilities the capabilities value to set.
     * @return the SolutionTemplateUpdateProperties object itself.
     */
    public SolutionTemplateUpdateProperties withCapabilities(List<String> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the state property: State of resource.
     * 
     * @return the state value.
     */
    public ResourceState state() {
        return this.state;
    }

    /**
     * Set the state property: State of resource.
     * 
     * @param state the state value to set.
     * @return the SolutionTemplateUpdateProperties object itself.
     */
    public SolutionTemplateUpdateProperties withState(ResourceState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the enableExternalValidation property: Flag to enable external validation.
     * 
     * @return the enableExternalValidation value.
     */
    public Boolean enableExternalValidation() {
        return this.enableExternalValidation;
    }

    /**
     * Set the enableExternalValidation property: Flag to enable external validation.
     * 
     * @param enableExternalValidation the enableExternalValidation value to set.
     * @return the SolutionTemplateUpdateProperties object itself.
     */
    public SolutionTemplateUpdateProperties withEnableExternalValidation(Boolean enableExternalValidation) {
        this.enableExternalValidation = enableExternalValidation;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeBooleanField("enableExternalValidation", this.enableExternalValidation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionTemplateUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionTemplateUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionTemplateUpdateProperties.
     */
    public static SolutionTemplateUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionTemplateUpdateProperties deserializedSolutionTemplateUpdateProperties
                = new SolutionTemplateUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedSolutionTemplateUpdateProperties.description = reader.getString();
                } else if ("capabilities".equals(fieldName)) {
                    List<String> capabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedSolutionTemplateUpdateProperties.capabilities = capabilities;
                } else if ("state".equals(fieldName)) {
                    deserializedSolutionTemplateUpdateProperties.state = ResourceState.fromString(reader.getString());
                } else if ("enableExternalValidation".equals(fieldName)) {
                    deserializedSolutionTemplateUpdateProperties.enableExternalValidation
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionTemplateUpdateProperties;
        });
    }
}
