// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadorchestration.fluent.models.WorkflowInner;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.Workflow;
import com.azure.resourcemanager.workloadorchestration.models.WorkflowProperties;

public final class WorkflowImpl implements Workflow, Workflow.Definition, Workflow.Update {
    private WorkflowInner innerObject;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public WorkflowProperties properties() {
        return this.innerModel().properties();
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public String eTag() {
        return this.innerModel().eTag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public WorkflowInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String contextName;

    private String workflowName;

    public WorkflowImpl withExistingContext(String resourceGroupName, String contextName) {
        this.resourceGroupName = resourceGroupName;
        this.contextName = contextName;
        return this;
    }

    public Workflow create() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkflows()
            .createOrUpdate(resourceGroupName, contextName, workflowName, this.innerModel(), Context.NONE);
        return this;
    }

    public Workflow create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkflows()
            .createOrUpdate(resourceGroupName, contextName, workflowName, this.innerModel(), context);
        return this;
    }

    WorkflowImpl(String name,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = new WorkflowInner();
        this.serviceManager = serviceManager;
        this.workflowName = name;
    }

    public WorkflowImpl update() {
        return this;
    }

    public Workflow apply() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkflows()
            .update(resourceGroupName, contextName, workflowName, this.innerModel(), Context.NONE);
        return this;
    }

    public Workflow apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkflows()
            .update(resourceGroupName, contextName, workflowName, this.innerModel(), context);
        return this;
    }

    WorkflowImpl(WorkflowInner innerObject,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.contextName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "contexts");
        this.workflowName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workflows");
    }

    public Workflow refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkflows()
            .getWithResponse(resourceGroupName, contextName, workflowName, Context.NONE)
            .getValue();
        return this;
    }

    public Workflow refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkflows()
            .getWithResponse(resourceGroupName, contextName, workflowName, context)
            .getValue();
        return this;
    }

    public WorkflowImpl withProperties(WorkflowProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public WorkflowImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }
}
