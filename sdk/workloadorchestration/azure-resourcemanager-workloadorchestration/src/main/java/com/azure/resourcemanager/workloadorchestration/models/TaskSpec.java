// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Task Spec.
 */
@Fluent
public final class TaskSpec implements JsonSerializable<TaskSpec> {
    /*
     * Name of Task
     */
    private String name;

    /*
     * Target ARM id
     */
    private String targetId;

    /*
     * Task specification
     */
    private Map<String, BinaryData> specification;

    /**
     * Creates an instance of TaskSpec class.
     */
    public TaskSpec() {
    }

    /**
     * Get the name property: Name of Task.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of Task.
     * 
     * @param name the name value to set.
     * @return the TaskSpec object itself.
     */
    public TaskSpec withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the targetId property: Target ARM id.
     * 
     * @return the targetId value.
     */
    public String targetId() {
        return this.targetId;
    }

    /**
     * Set the targetId property: Target ARM id.
     * 
     * @param targetId the targetId value to set.
     * @return the TaskSpec object itself.
     */
    public TaskSpec withTargetId(String targetId) {
        this.targetId = targetId;
        return this;
    }

    /**
     * Get the specification property: Task specification.
     * 
     * @return the specification value.
     */
    public Map<String, BinaryData> specification() {
        return this.specification;
    }

    /**
     * Set the specification property: Task specification.
     * 
     * @param specification the specification value to set.
     * @return the TaskSpec object itself.
     */
    public TaskSpec withSpecification(Map<String, BinaryData> specification) {
        this.specification = specification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model TaskSpec"));
        }
        if (specification() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property specification in model TaskSpec"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TaskSpec.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("specification", this.specification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("targetId", this.targetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TaskSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TaskSpec if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TaskSpec.
     */
    public static TaskSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TaskSpec deserializedTaskSpec = new TaskSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedTaskSpec.name = reader.getString();
                } else if ("specification".equals(fieldName)) {
                    Map<String, BinaryData> specification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedTaskSpec.specification = specification;
                } else if ("targetId".equals(fieldName)) {
                    deserializedTaskSpec.targetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTaskSpec;
        });
    }
}
