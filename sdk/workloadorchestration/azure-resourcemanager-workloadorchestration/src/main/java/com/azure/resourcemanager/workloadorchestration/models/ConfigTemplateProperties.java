// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Config Template Properties.
 */
@Fluent
public final class ConfigTemplateProperties implements JsonSerializable<ConfigTemplateProperties> {
    /*
     * Description of config template
     */
    private String description;

    /*
     * Latest config template version
     */
    private String latestVersion;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ConfigTemplateProperties class.
     */
    public ConfigTemplateProperties() {
    }

    /**
     * Get the description property: Description of config template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of config template.
     * 
     * @param description the description value to set.
     * @return the ConfigTemplateProperties object itself.
     */
    public ConfigTemplateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the latestVersion property: Latest config template version.
     * 
     * @return the latestVersion value.
     */
    public String latestVersion() {
        return this.latestVersion;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigTemplateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConfigTemplateProperties.
     */
    public static ConfigTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigTemplateProperties deserializedConfigTemplateProperties = new ConfigTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedConfigTemplateProperties.description = reader.getString();
                } else if ("latestVersion".equals(fieldName)) {
                    deserializedConfigTemplateProperties.latestVersion = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedConfigTemplateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigTemplateProperties;
        });
    }
}
