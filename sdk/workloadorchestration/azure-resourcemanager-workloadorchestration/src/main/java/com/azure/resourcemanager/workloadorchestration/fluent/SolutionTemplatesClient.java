// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionWithUpdateTypeInner;
import com.azure.resourcemanager.workloadorchestration.models.VersionParameter;

/**
 * An instance of this class provides access to all the operations defined in SolutionTemplatesClient.
 */
public interface SolutionTemplatesClient {
    /**
     * Get a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Solution Template Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SolutionTemplateInner> getByResourceGroupWithResponse(String resourceGroupName,
        String solutionTemplateName, Context context);

    /**
     * Get a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Solution Template Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionTemplateInner getByResourceGroup(String resourceGroupName, String solutionTemplateName);

    /**
     * Create or update a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution Template Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionTemplateInner>, SolutionTemplateInner> beginCreateOrUpdate(String resourceGroupName,
        String solutionTemplateName, SolutionTemplateInner resource);

    /**
     * Create or update a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution Template Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionTemplateInner>, SolutionTemplateInner> beginCreateOrUpdate(String resourceGroupName,
        String solutionTemplateName, SolutionTemplateInner resource, Context context);

    /**
     * Create or update a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Template Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionTemplateInner createOrUpdate(String resourceGroupName, String solutionTemplateName,
        SolutionTemplateInner resource);

    /**
     * Create or update a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Template Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionTemplateInner createOrUpdate(String resourceGroupName, String solutionTemplateName,
        SolutionTemplateInner resource, Context context);

    /**
     * update a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Template Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SolutionTemplateInner> updateWithResponse(String resourceGroupName, String solutionTemplateName,
        SolutionTemplateInner properties, Context context);

    /**
     * update a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Template Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionTemplateInner update(String resourceGroupName, String solutionTemplateName,
        SolutionTemplateInner properties);

    /**
     * Create a Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionTemplateVersionInner>, SolutionTemplateVersionInner> beginCreateVersion(
        String resourceGroupName, String solutionTemplateName, SolutionTemplateVersionWithUpdateTypeInner body);

    /**
     * Create a Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionTemplateVersionInner>, SolutionTemplateVersionInner> beginCreateVersion(
        String resourceGroupName, String solutionTemplateName, SolutionTemplateVersionWithUpdateTypeInner body,
        Context context);

    /**
     * Create a Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionTemplateVersionInner createVersion(String resourceGroupName, String solutionTemplateName,
        SolutionTemplateVersionWithUpdateTypeInner body);

    /**
     * Create a Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionTemplateVersionInner createVersion(String resourceGroupName, String solutionTemplateName,
        SolutionTemplateVersionWithUpdateTypeInner body, Context context);

    /**
     * Remove Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRemoveVersion(String resourceGroupName, String solutionTemplateName,
        VersionParameter body);

    /**
     * Remove Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRemoveVersion(String resourceGroupName, String solutionTemplateName,
        VersionParameter body, Context context);

    /**
     * Remove Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void removeVersion(String resourceGroupName, String solutionTemplateName, VersionParameter body);

    /**
     * Remove Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void removeVersion(String resourceGroupName, String solutionTemplateName, VersionParameter body, Context context);

    /**
     * Delete a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String solutionTemplateName);

    /**
     * Delete a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String solutionTemplateName,
        Context context);

    /**
     * Delete a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String solutionTemplateName);

    /**
     * Delete a Solution Template Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String solutionTemplateName, Context context);

    /**
     * List by specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplate list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SolutionTemplateInner> listByResourceGroup(String resourceGroupName);

    /**
     * List by specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplate list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SolutionTemplateInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List by subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplate list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SolutionTemplateInner> list();

    /**
     * List by subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplate list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SolutionTemplateInner> list(Context context);
}
