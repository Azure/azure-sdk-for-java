// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Hierarchy, to tag Sites / Hierarchy Provider nodes with what they represent.
 */
@Fluent
public final class Hierarchy implements JsonSerializable<Hierarchy> {
    /*
     * Name of Hierarchy
     */
    private String name;

    /*
     * Description of Hierarchy
     */
    private String description;

    /**
     * Creates an instance of Hierarchy class.
     */
    public Hierarchy() {
    }

    /**
     * Get the name property: Name of Hierarchy.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of Hierarchy.
     * 
     * @param name the name value to set.
     * @return the Hierarchy object itself.
     */
    public Hierarchy withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: Description of Hierarchy.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of Hierarchy.
     * 
     * @param description the description value to set.
     * @return the Hierarchy object itself.
     */
    public Hierarchy withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Hierarchy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Hierarchy if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Hierarchy.
     */
    public static Hierarchy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Hierarchy deserializedHierarchy = new Hierarchy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedHierarchy.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedHierarchy.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHierarchy;
        });
    }
}
