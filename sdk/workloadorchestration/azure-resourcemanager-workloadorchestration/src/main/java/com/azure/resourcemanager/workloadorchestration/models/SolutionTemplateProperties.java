// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Solution Template Properties.
 */
@Fluent
public final class SolutionTemplateProperties implements JsonSerializable<SolutionTemplateProperties> {
    /*
     * Description of Solution template
     */
    private String description;

    /*
     * List of capabilities
     */
    private List<String> capabilities;

    /*
     * Latest solution template version
     */
    private String latestVersion;

    /*
     * State of resource
     */
    private ResourceState state;

    /*
     * Flag to enable external validation
     */
    private Boolean enableExternalValidation;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SolutionTemplateProperties class.
     */
    public SolutionTemplateProperties() {
    }

    /**
     * Get the description property: Description of Solution template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of Solution template.
     * 
     * @param description the description value to set.
     * @return the SolutionTemplateProperties object itself.
     */
    public SolutionTemplateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the capabilities property: List of capabilities.
     * 
     * @return the capabilities value.
     */
    public List<String> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: List of capabilities.
     * 
     * @param capabilities the capabilities value to set.
     * @return the SolutionTemplateProperties object itself.
     */
    public SolutionTemplateProperties withCapabilities(List<String> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the latestVersion property: Latest solution template version.
     * 
     * @return the latestVersion value.
     */
    public String latestVersion() {
        return this.latestVersion;
    }

    /**
     * Get the state property: State of resource.
     * 
     * @return the state value.
     */
    public ResourceState state() {
        return this.state;
    }

    /**
     * Set the state property: State of resource.
     * 
     * @param state the state value to set.
     * @return the SolutionTemplateProperties object itself.
     */
    public SolutionTemplateProperties withState(ResourceState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the enableExternalValidation property: Flag to enable external validation.
     * 
     * @return the enableExternalValidation value.
     */
    public Boolean enableExternalValidation() {
        return this.enableExternalValidation;
    }

    /**
     * Set the enableExternalValidation property: Flag to enable external validation.
     * 
     * @param enableExternalValidation the enableExternalValidation value to set.
     * @return the SolutionTemplateProperties object itself.
     */
    public SolutionTemplateProperties withEnableExternalValidation(Boolean enableExternalValidation) {
        this.enableExternalValidation = enableExternalValidation;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property description in model SolutionTemplateProperties"));
        }
        if (capabilities() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property capabilities in model SolutionTemplateProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionTemplateProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeBooleanField("enableExternalValidation", this.enableExternalValidation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionTemplateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionTemplateProperties.
     */
    public static SolutionTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionTemplateProperties deserializedSolutionTemplateProperties = new SolutionTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedSolutionTemplateProperties.description = reader.getString();
                } else if ("capabilities".equals(fieldName)) {
                    List<String> capabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedSolutionTemplateProperties.capabilities = capabilities;
                } else if ("latestVersion".equals(fieldName)) {
                    deserializedSolutionTemplateProperties.latestVersion = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedSolutionTemplateProperties.state = ResourceState.fromString(reader.getString());
                } else if ("enableExternalValidation".equals(fieldName)) {
                    deserializedSolutionTemplateProperties.enableExternalValidation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSolutionTemplateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionTemplateProperties;
        });
    }
}
