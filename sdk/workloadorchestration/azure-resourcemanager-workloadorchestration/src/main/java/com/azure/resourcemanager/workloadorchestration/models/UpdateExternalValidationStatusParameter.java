// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Update External Validation Status Parameter.
 */
@Fluent
public final class UpdateExternalValidationStatusParameter
    implements JsonSerializable<UpdateExternalValidationStatusParameter> {
    /*
     * Solution Version Id
     */
    private String solutionVersionId;

    /*
     * Error Details if any failure is there
     */
    private ManagementError errorDetails;

    /*
     * External validation id
     */
    private String externalValidationId;

    /*
     * Validation Status of external validation
     */
    private ValidationStatus validationStatus;

    /**
     * Creates an instance of UpdateExternalValidationStatusParameter class.
     */
    public UpdateExternalValidationStatusParameter() {
    }

    /**
     * Get the solutionVersionId property: Solution Version Id.
     * 
     * @return the solutionVersionId value.
     */
    public String solutionVersionId() {
        return this.solutionVersionId;
    }

    /**
     * Set the solutionVersionId property: Solution Version Id.
     * 
     * @param solutionVersionId the solutionVersionId value to set.
     * @return the UpdateExternalValidationStatusParameter object itself.
     */
    public UpdateExternalValidationStatusParameter withSolutionVersionId(String solutionVersionId) {
        this.solutionVersionId = solutionVersionId;
        return this;
    }

    /**
     * Get the errorDetails property: Error Details if any failure is there.
     * 
     * @return the errorDetails value.
     */
    public ManagementError errorDetails() {
        return this.errorDetails;
    }

    /**
     * Set the errorDetails property: Error Details if any failure is there.
     * 
     * @param errorDetails the errorDetails value to set.
     * @return the UpdateExternalValidationStatusParameter object itself.
     */
    public UpdateExternalValidationStatusParameter withErrorDetails(ManagementError errorDetails) {
        this.errorDetails = errorDetails;
        return this;
    }

    /**
     * Get the externalValidationId property: External validation id.
     * 
     * @return the externalValidationId value.
     */
    public String externalValidationId() {
        return this.externalValidationId;
    }

    /**
     * Set the externalValidationId property: External validation id.
     * 
     * @param externalValidationId the externalValidationId value to set.
     * @return the UpdateExternalValidationStatusParameter object itself.
     */
    public UpdateExternalValidationStatusParameter withExternalValidationId(String externalValidationId) {
        this.externalValidationId = externalValidationId;
        return this;
    }

    /**
     * Get the validationStatus property: Validation Status of external validation.
     * 
     * @return the validationStatus value.
     */
    public ValidationStatus validationStatus() {
        return this.validationStatus;
    }

    /**
     * Set the validationStatus property: Validation Status of external validation.
     * 
     * @param validationStatus the validationStatus value to set.
     * @return the UpdateExternalValidationStatusParameter object itself.
     */
    public UpdateExternalValidationStatusParameter withValidationStatus(ValidationStatus validationStatus) {
        this.validationStatus = validationStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionVersionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionVersionId in model UpdateExternalValidationStatusParameter"));
        }
        if (externalValidationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property externalValidationId in model UpdateExternalValidationStatusParameter"));
        }
        if (validationStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property validationStatus in model UpdateExternalValidationStatusParameter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateExternalValidationStatusParameter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionVersionId", this.solutionVersionId);
        jsonWriter.writeStringField("externalValidationId", this.externalValidationId);
        jsonWriter.writeStringField("validationStatus",
            this.validationStatus == null ? null : this.validationStatus.toString());
        jsonWriter.writeJsonField("errorDetails", this.errorDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateExternalValidationStatusParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateExternalValidationStatusParameter if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateExternalValidationStatusParameter.
     */
    public static UpdateExternalValidationStatusParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateExternalValidationStatusParameter deserializedUpdateExternalValidationStatusParameter
                = new UpdateExternalValidationStatusParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionVersionId".equals(fieldName)) {
                    deserializedUpdateExternalValidationStatusParameter.solutionVersionId = reader.getString();
                } else if ("externalValidationId".equals(fieldName)) {
                    deserializedUpdateExternalValidationStatusParameter.externalValidationId = reader.getString();
                } else if ("validationStatus".equals(fieldName)) {
                    deserializedUpdateExternalValidationStatusParameter.validationStatus
                        = ValidationStatus.fromString(reader.getString());
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedUpdateExternalValidationStatusParameter.errorDetails = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateExternalValidationStatusParameter;
        });
    }
}
