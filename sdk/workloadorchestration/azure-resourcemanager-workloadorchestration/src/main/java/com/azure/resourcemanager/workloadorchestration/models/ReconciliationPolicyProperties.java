// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a ReconciliationPolicy.
 */
@Fluent
public final class ReconciliationPolicyProperties implements JsonSerializable<ReconciliationPolicyProperties> {
    /*
     * The state of the ReconciliationPolicy
     */
    private ReconciliationState state;

    /*
     * Policy interval
     */
    private String interval;

    /**
     * Creates an instance of ReconciliationPolicyProperties class.
     */
    public ReconciliationPolicyProperties() {
    }

    /**
     * Get the state property: The state of the ReconciliationPolicy.
     * 
     * @return the state value.
     */
    public ReconciliationState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the ReconciliationPolicy.
     * 
     * @param state the state value to set.
     * @return the ReconciliationPolicyProperties object itself.
     */
    public ReconciliationPolicyProperties withState(ReconciliationState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the interval property: Policy interval.
     * 
     * @return the interval value.
     */
    public String interval() {
        return this.interval;
    }

    /**
     * Set the interval property: Policy interval.
     * 
     * @param interval the interval value to set.
     * @return the ReconciliationPolicyProperties object itself.
     */
    public ReconciliationPolicyProperties withInterval(String interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property state in model ReconciliationPolicyProperties"));
        }
        if (interval() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property interval in model ReconciliationPolicyProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ReconciliationPolicyProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("interval", this.interval);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReconciliationPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReconciliationPolicyProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReconciliationPolicyProperties.
     */
    public static ReconciliationPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReconciliationPolicyProperties deserializedReconciliationPolicyProperties
                = new ReconciliationPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedReconciliationPolicyProperties.state
                        = ReconciliationState.fromString(reader.getString());
                } else if ("interval".equals(fieldName)) {
                    deserializedReconciliationPolicyProperties.interval = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReconciliationPolicyProperties;
        });
    }
}
