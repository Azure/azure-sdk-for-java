// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloadorchestration.models.UpdateType;
import java.io.IOException;

/**
 * Solution Template Version With Update Type.
 */
@Fluent
public final class SolutionTemplateVersionWithUpdateTypeInner
    implements JsonSerializable<SolutionTemplateVersionWithUpdateTypeInner> {
    /*
     * Update type
     */
    private UpdateType updateType;

    /*
     * Version to create
     */
    private String version;

    /*
     * Solution Template Version
     */
    private SolutionTemplateVersionInner solutionTemplateVersion;

    /**
     * Creates an instance of SolutionTemplateVersionWithUpdateTypeInner class.
     */
    public SolutionTemplateVersionWithUpdateTypeInner() {
    }

    /**
     * Get the updateType property: Update type.
     * 
     * @return the updateType value.
     */
    public UpdateType updateType() {
        return this.updateType;
    }

    /**
     * Set the updateType property: Update type.
     * 
     * @param updateType the updateType value to set.
     * @return the SolutionTemplateVersionWithUpdateTypeInner object itself.
     */
    public SolutionTemplateVersionWithUpdateTypeInner withUpdateType(UpdateType updateType) {
        this.updateType = updateType;
        return this;
    }

    /**
     * Get the version property: Version to create.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version to create.
     * 
     * @param version the version value to set.
     * @return the SolutionTemplateVersionWithUpdateTypeInner object itself.
     */
    public SolutionTemplateVersionWithUpdateTypeInner withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the solutionTemplateVersion property: Solution Template Version.
     * 
     * @return the solutionTemplateVersion value.
     */
    public SolutionTemplateVersionInner solutionTemplateVersion() {
        return this.solutionTemplateVersion;
    }

    /**
     * Set the solutionTemplateVersion property: Solution Template Version.
     * 
     * @param solutionTemplateVersion the solutionTemplateVersion value to set.
     * @return the SolutionTemplateVersionWithUpdateTypeInner object itself.
     */
    public SolutionTemplateVersionWithUpdateTypeInner
        withSolutionTemplateVersion(SolutionTemplateVersionInner solutionTemplateVersion) {
        this.solutionTemplateVersion = solutionTemplateVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionTemplateVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionTemplateVersion in model SolutionTemplateVersionWithUpdateTypeInner"));
        } else {
            solutionTemplateVersion().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionTemplateVersionWithUpdateTypeInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("solutionTemplateVersion", this.solutionTemplateVersion);
        jsonWriter.writeStringField("updateType", this.updateType == null ? null : this.updateType.toString());
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionTemplateVersionWithUpdateTypeInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionTemplateVersionWithUpdateTypeInner if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionTemplateVersionWithUpdateTypeInner.
     */
    public static SolutionTemplateVersionWithUpdateTypeInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionTemplateVersionWithUpdateTypeInner deserializedSolutionTemplateVersionWithUpdateTypeInner
                = new SolutionTemplateVersionWithUpdateTypeInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionTemplateVersion".equals(fieldName)) {
                    deserializedSolutionTemplateVersionWithUpdateTypeInner.solutionTemplateVersion
                        = SolutionTemplateVersionInner.fromJson(reader);
                } else if ("updateType".equals(fieldName)) {
                    deserializedSolutionTemplateVersionWithUpdateTypeInner.updateType
                        = UpdateType.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedSolutionTemplateVersionWithUpdateTypeInner.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionTemplateVersionWithUpdateTypeInner;
        });
    }
}
