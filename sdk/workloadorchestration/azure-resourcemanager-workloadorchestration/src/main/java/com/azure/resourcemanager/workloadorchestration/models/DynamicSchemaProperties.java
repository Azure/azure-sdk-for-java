// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DynamicSchema Properties.
 */
@Immutable
public final class DynamicSchemaProperties implements JsonSerializable<DynamicSchemaProperties> {
    /*
     * Type of configuration
     */
    private ConfigurationType configurationType;

    /*
     * Type of configuration model
     */
    private ConfigurationModel configurationModel;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DynamicSchemaProperties class.
     */
    public DynamicSchemaProperties() {
    }

    /**
     * Get the configurationType property: Type of configuration.
     * 
     * @return the configurationType value.
     */
    public ConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Get the configurationModel property: Type of configuration model.
     * 
     * @return the configurationModel value.
     */
    public ConfigurationModel configurationModel() {
        return this.configurationModel;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DynamicSchemaProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DynamicSchemaProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DynamicSchemaProperties.
     */
    public static DynamicSchemaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DynamicSchemaProperties deserializedDynamicSchemaProperties = new DynamicSchemaProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurationType".equals(fieldName)) {
                    deserializedDynamicSchemaProperties.configurationType
                        = ConfigurationType.fromString(reader.getString());
                } else if ("configurationModel".equals(fieldName)) {
                    deserializedDynamicSchemaProperties.configurationModel
                        = ConfigurationModel.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDynamicSchemaProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDynamicSchemaProperties;
        });
    }
}
