// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Target Properties.
 */
@Fluent
public final class TargetProperties implements JsonSerializable<TargetProperties> {
    /*
     * Description of target
     */
    private String description;

    /*
     * Display name of target
     */
    private String displayName;

    /*
     * ArmId of Context
     */
    private String contextId;

    /*
     * target spec
     */
    private Map<String, BinaryData> targetSpecification;

    /*
     * List of capabilities
     */
    private List<String> capabilities;

    /*
     * Hierarchy Level
     */
    private String hierarchyLevel;

    /*
     * Status of target
     */
    private DeploymentStatus status;

    /*
     * Scope of the target resource
     */
    private String solutionScope;

    /*
     * State of resource
     */
    private ResourceState state;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of TargetProperties class.
     */
    public TargetProperties() {
    }

    /**
     * Get the description property: Description of target.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of target.
     * 
     * @param description the description value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: Display name of target.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of target.
     * 
     * @param displayName the displayName value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the contextId property: ArmId of Context.
     * 
     * @return the contextId value.
     */
    public String contextId() {
        return this.contextId;
    }

    /**
     * Set the contextId property: ArmId of Context.
     * 
     * @param contextId the contextId value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withContextId(String contextId) {
        this.contextId = contextId;
        return this;
    }

    /**
     * Get the targetSpecification property: target spec.
     * 
     * @return the targetSpecification value.
     */
    public Map<String, BinaryData> targetSpecification() {
        return this.targetSpecification;
    }

    /**
     * Set the targetSpecification property: target spec.
     * 
     * @param targetSpecification the targetSpecification value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withTargetSpecification(Map<String, BinaryData> targetSpecification) {
        this.targetSpecification = targetSpecification;
        return this;
    }

    /**
     * Get the capabilities property: List of capabilities.
     * 
     * @return the capabilities value.
     */
    public List<String> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: List of capabilities.
     * 
     * @param capabilities the capabilities value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withCapabilities(List<String> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the hierarchyLevel property: Hierarchy Level.
     * 
     * @return the hierarchyLevel value.
     */
    public String hierarchyLevel() {
        return this.hierarchyLevel;
    }

    /**
     * Set the hierarchyLevel property: Hierarchy Level.
     * 
     * @param hierarchyLevel the hierarchyLevel value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withHierarchyLevel(String hierarchyLevel) {
        this.hierarchyLevel = hierarchyLevel;
        return this;
    }

    /**
     * Get the status property: Status of target.
     * 
     * @return the status value.
     */
    public DeploymentStatus status() {
        return this.status;
    }

    /**
     * Get the solutionScope property: Scope of the target resource.
     * 
     * @return the solutionScope value.
     */
    public String solutionScope() {
        return this.solutionScope;
    }

    /**
     * Set the solutionScope property: Scope of the target resource.
     * 
     * @param solutionScope the solutionScope value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withSolutionScope(String solutionScope) {
        this.solutionScope = solutionScope;
        return this;
    }

    /**
     * Get the state property: State of resource.
     * 
     * @return the state value.
     */
    public ResourceState state() {
        return this.state;
    }

    /**
     * Set the state property: State of resource.
     * 
     * @param state the state value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withState(ResourceState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property description in model TargetProperties"));
        }
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property displayName in model TargetProperties"));
        }
        if (contextId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property contextId in model TargetProperties"));
        }
        if (targetSpecification() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetSpecification in model TargetProperties"));
        }
        if (capabilities() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property capabilities in model TargetProperties"));
        }
        if (hierarchyLevel() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property hierarchyLevel in model TargetProperties"));
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TargetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("contextId", this.contextId);
        jsonWriter.writeMapField("targetSpecification", this.targetSpecification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("hierarchyLevel", this.hierarchyLevel);
        jsonWriter.writeStringField("solutionScope", this.solutionScope);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TargetProperties.
     */
    public static TargetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetProperties deserializedTargetProperties = new TargetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedTargetProperties.description = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedTargetProperties.displayName = reader.getString();
                } else if ("contextId".equals(fieldName)) {
                    deserializedTargetProperties.contextId = reader.getString();
                } else if ("targetSpecification".equals(fieldName)) {
                    Map<String, BinaryData> targetSpecification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedTargetProperties.targetSpecification = targetSpecification;
                } else if ("capabilities".equals(fieldName)) {
                    List<String> capabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedTargetProperties.capabilities = capabilities;
                } else if ("hierarchyLevel".equals(fieldName)) {
                    deserializedTargetProperties.hierarchyLevel = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedTargetProperties.status = DeploymentStatus.fromJson(reader);
                } else if ("solutionScope".equals(fieldName)) {
                    deserializedTargetProperties.solutionScope = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedTargetProperties.state = ResourceState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedTargetProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetProperties;
        });
    }
}
