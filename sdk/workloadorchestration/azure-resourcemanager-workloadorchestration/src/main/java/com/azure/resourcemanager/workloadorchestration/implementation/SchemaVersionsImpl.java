// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadorchestration.fluent.SchemaVersionsClient;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SchemaVersionInner;
import com.azure.resourcemanager.workloadorchestration.models.SchemaVersion;
import com.azure.resourcemanager.workloadorchestration.models.SchemaVersions;

public final class SchemaVersionsImpl implements SchemaVersions {
    private static final ClientLogger LOGGER = new ClientLogger(SchemaVersionsImpl.class);

    private final SchemaVersionsClient innerClient;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public SchemaVersionsImpl(SchemaVersionsClient innerClient,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SchemaVersion> getWithResponse(String resourceGroupName, String schemaName,
        String schemaVersionName, Context context) {
        Response<SchemaVersionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, schemaName, schemaVersionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SchemaVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SchemaVersion get(String resourceGroupName, String schemaName, String schemaVersionName) {
        SchemaVersionInner inner = this.serviceClient().get(resourceGroupName, schemaName, schemaVersionName);
        if (inner != null) {
            return new SchemaVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String schemaName, String schemaVersionName) {
        this.serviceClient().delete(resourceGroupName, schemaName, schemaVersionName);
    }

    public void delete(String resourceGroupName, String schemaName, String schemaVersionName, Context context) {
        this.serviceClient().delete(resourceGroupName, schemaName, schemaVersionName, context);
    }

    public PagedIterable<SchemaVersion> listBySchema(String resourceGroupName, String schemaName) {
        PagedIterable<SchemaVersionInner> inner = this.serviceClient().listBySchema(resourceGroupName, schemaName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchemaVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<SchemaVersion> listBySchema(String resourceGroupName, String schemaName, Context context) {
        PagedIterable<SchemaVersionInner> inner
            = this.serviceClient().listBySchema(resourceGroupName, schemaName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchemaVersionImpl(inner1, this.manager()));
    }

    public SchemaVersion getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaName = ResourceManagerUtils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        String schemaVersionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (schemaVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, schemaName, schemaVersionName, Context.NONE).getValue();
    }

    public Response<SchemaVersion> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaName = ResourceManagerUtils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        String schemaVersionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (schemaVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, schemaName, schemaVersionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaName = ResourceManagerUtils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        String schemaVersionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (schemaVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        this.delete(resourceGroupName, schemaName, schemaVersionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaName = ResourceManagerUtils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        String schemaVersionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (schemaVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        this.delete(resourceGroupName, schemaName, schemaVersionName, context);
    }

    private SchemaVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    public SchemaVersionImpl define(String name) {
        return new SchemaVersionImpl(name, this.manager());
    }
}
