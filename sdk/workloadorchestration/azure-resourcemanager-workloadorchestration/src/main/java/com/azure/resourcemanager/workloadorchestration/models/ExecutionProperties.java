// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Execution Properties.
 */
@Fluent
public final class ExecutionProperties implements JsonSerializable<ExecutionProperties> {
    /*
     * Workflow version of execution
     */
    private String workflowVersionId;

    /*
     * Execution specification
     */
    private Map<String, BinaryData> specification;

    /*
     * Status of Execution
     */
    private ExecutionStatus status;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ExecutionProperties class.
     */
    public ExecutionProperties() {
    }

    /**
     * Get the workflowVersionId property: Workflow version of execution.
     * 
     * @return the workflowVersionId value.
     */
    public String workflowVersionId() {
        return this.workflowVersionId;
    }

    /**
     * Set the workflowVersionId property: Workflow version of execution.
     * 
     * @param workflowVersionId the workflowVersionId value to set.
     * @return the ExecutionProperties object itself.
     */
    public ExecutionProperties withWorkflowVersionId(String workflowVersionId) {
        this.workflowVersionId = workflowVersionId;
        return this;
    }

    /**
     * Get the specification property: Execution specification.
     * 
     * @return the specification value.
     */
    public Map<String, BinaryData> specification() {
        return this.specification;
    }

    /**
     * Set the specification property: Execution specification.
     * 
     * @param specification the specification value to set.
     * @return the ExecutionProperties object itself.
     */
    public ExecutionProperties withSpecification(Map<String, BinaryData> specification) {
        this.specification = specification;
        return this;
    }

    /**
     * Get the status property: Status of Execution.
     * 
     * @return the status value.
     */
    public ExecutionStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (workflowVersionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property workflowVersionId in model ExecutionProperties"));
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExecutionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("workflowVersionId", this.workflowVersionId);
        jsonWriter.writeMapField("specification", this.specification,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExecutionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExecutionProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExecutionProperties.
     */
    public static ExecutionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExecutionProperties deserializedExecutionProperties = new ExecutionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workflowVersionId".equals(fieldName)) {
                    deserializedExecutionProperties.workflowVersionId = reader.getString();
                } else if ("specification".equals(fieldName)) {
                    Map<String, BinaryData> specification = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedExecutionProperties.specification = specification;
                } else if ("status".equals(fieldName)) {
                    deserializedExecutionProperties.status = ExecutionStatus.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedExecutionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExecutionProperties;
        });
    }
}
