// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Instance Properties.
 */
@Fluent
public final class InstanceProperties implements JsonSerializable<InstanceProperties> {
    /*
     * Solution version of instance
     */
    private String solutionVersionId;

    /*
     * Target of instance
     */
    private String targetId;

    /*
     * State of instance
     */
    private ActiveState activeState;

    /*
     * Reconciliation policy of instance
     */
    private ReconciliationPolicyProperties reconciliationPolicy;

    /*
     * Scope of instance
     */
    private String solutionScope;

    /*
     * Status of instance
     */
    private DeploymentStatus status;

    /*
     * Deployment timestamp of instance
     */
    private Long deploymentTimestampEpoch;

    /*
     * Provisioning state of resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of InstanceProperties class.
     */
    public InstanceProperties() {
    }

    /**
     * Get the solutionVersionId property: Solution version of instance.
     * 
     * @return the solutionVersionId value.
     */
    public String solutionVersionId() {
        return this.solutionVersionId;
    }

    /**
     * Set the solutionVersionId property: Solution version of instance.
     * 
     * @param solutionVersionId the solutionVersionId value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withSolutionVersionId(String solutionVersionId) {
        this.solutionVersionId = solutionVersionId;
        return this;
    }

    /**
     * Get the targetId property: Target of instance.
     * 
     * @return the targetId value.
     */
    public String targetId() {
        return this.targetId;
    }

    /**
     * Set the targetId property: Target of instance.
     * 
     * @param targetId the targetId value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withTargetId(String targetId) {
        this.targetId = targetId;
        return this;
    }

    /**
     * Get the activeState property: State of instance.
     * 
     * @return the activeState value.
     */
    public ActiveState activeState() {
        return this.activeState;
    }

    /**
     * Set the activeState property: State of instance.
     * 
     * @param activeState the activeState value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withActiveState(ActiveState activeState) {
        this.activeState = activeState;
        return this;
    }

    /**
     * Get the reconciliationPolicy property: Reconciliation policy of instance.
     * 
     * @return the reconciliationPolicy value.
     */
    public ReconciliationPolicyProperties reconciliationPolicy() {
        return this.reconciliationPolicy;
    }

    /**
     * Set the reconciliationPolicy property: Reconciliation policy of instance.
     * 
     * @param reconciliationPolicy the reconciliationPolicy value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withReconciliationPolicy(ReconciliationPolicyProperties reconciliationPolicy) {
        this.reconciliationPolicy = reconciliationPolicy;
        return this;
    }

    /**
     * Get the solutionScope property: Scope of instance.
     * 
     * @return the solutionScope value.
     */
    public String solutionScope() {
        return this.solutionScope;
    }

    /**
     * Set the solutionScope property: Scope of instance.
     * 
     * @param solutionScope the solutionScope value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withSolutionScope(String solutionScope) {
        this.solutionScope = solutionScope;
        return this;
    }

    /**
     * Get the status property: Status of instance.
     * 
     * @return the status value.
     */
    public DeploymentStatus status() {
        return this.status;
    }

    /**
     * Get the deploymentTimestampEpoch property: Deployment timestamp of instance.
     * 
     * @return the deploymentTimestampEpoch value.
     */
    public Long deploymentTimestampEpoch() {
        return this.deploymentTimestampEpoch;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionVersionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionVersionId in model InstanceProperties"));
        }
        if (targetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property targetId in model InstanceProperties"));
        }
        if (reconciliationPolicy() != null) {
            reconciliationPolicy().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InstanceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionVersionId", this.solutionVersionId);
        jsonWriter.writeStringField("targetId", this.targetId);
        jsonWriter.writeStringField("activeState", this.activeState == null ? null : this.activeState.toString());
        jsonWriter.writeJsonField("reconciliationPolicy", this.reconciliationPolicy);
        jsonWriter.writeStringField("solutionScope", this.solutionScope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InstanceProperties.
     */
    public static InstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceProperties deserializedInstanceProperties = new InstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionVersionId".equals(fieldName)) {
                    deserializedInstanceProperties.solutionVersionId = reader.getString();
                } else if ("targetId".equals(fieldName)) {
                    deserializedInstanceProperties.targetId = reader.getString();
                } else if ("activeState".equals(fieldName)) {
                    deserializedInstanceProperties.activeState = ActiveState.fromString(reader.getString());
                } else if ("reconciliationPolicy".equals(fieldName)) {
                    deserializedInstanceProperties.reconciliationPolicy
                        = ReconciliationPolicyProperties.fromJson(reader);
                } else if ("solutionScope".equals(fieldName)) {
                    deserializedInstanceProperties.solutionScope = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedInstanceProperties.status = DeploymentStatus.fromJson(reader);
                } else if ("deploymentTimestampEpoch".equals(fieldName)) {
                    deserializedInstanceProperties.deploymentTimestampEpoch = reader.getNullable(JsonReader::getLong);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInstanceProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceProperties;
        });
    }
}
