// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadorchestration.fluent.models.TargetInner;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.InstallSolutionParameter;
import com.azure.resourcemanager.workloadorchestration.models.RemoveRevisionParameter;
import com.azure.resourcemanager.workloadorchestration.models.ResolvedConfiguration;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateParameter;
import com.azure.resourcemanager.workloadorchestration.models.SolutionVersion;
import com.azure.resourcemanager.workloadorchestration.models.SolutionVersionParameter;
import com.azure.resourcemanager.workloadorchestration.models.Target;
import com.azure.resourcemanager.workloadorchestration.models.TargetProperties;
import com.azure.resourcemanager.workloadorchestration.models.UninstallSolutionParameter;
import com.azure.resourcemanager.workloadorchestration.models.UpdateExternalValidationStatusParameter;
import java.util.Collections;
import java.util.Map;

public final class TargetImpl implements Target, Target.Definition, Target.Update {
    private TargetInner innerObject;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public TargetProperties properties() {
        return this.innerModel().properties();
    }

    public String eTag() {
        return this.innerModel().eTag();
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public TargetInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String targetName;

    public TargetImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Target create() {
        this.innerObject = serviceManager.serviceClient()
            .getTargets()
            .createOrUpdate(resourceGroupName, targetName, this.innerModel(), Context.NONE);
        return this;
    }

    public Target create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getTargets()
            .createOrUpdate(resourceGroupName, targetName, this.innerModel(), context);
        return this;
    }

    TargetImpl(String name,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = new TargetInner();
        this.serviceManager = serviceManager;
        this.targetName = name;
    }

    public TargetImpl update() {
        return this;
    }

    public Target apply() {
        this.innerObject = serviceManager.serviceClient()
            .getTargets()
            .update(resourceGroupName, targetName, this.innerModel(), Context.NONE);
        return this;
    }

    public Target apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getTargets()
            .update(resourceGroupName, targetName, this.innerModel(), context);
        return this;
    }

    TargetImpl(TargetInner innerObject,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.targetName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "targets");
    }

    public Target refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getTargets()
            .getByResourceGroupWithResponse(resourceGroupName, targetName, Context.NONE)
            .getValue();
        return this;
    }

    public Target refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getTargets()
            .getByResourceGroupWithResponse(resourceGroupName, targetName, context)
            .getValue();
        return this;
    }

    public void installSolution(InstallSolutionParameter body) {
        serviceManager.targets().installSolution(resourceGroupName, targetName, body);
    }

    public void installSolution(InstallSolutionParameter body, Context context) {
        serviceManager.targets().installSolution(resourceGroupName, targetName, body, context);
    }

    public void uninstallSolution(UninstallSolutionParameter body) {
        serviceManager.targets().uninstallSolution(resourceGroupName, targetName, body);
    }

    public void uninstallSolution(UninstallSolutionParameter body, Context context) {
        serviceManager.targets().uninstallSolution(resourceGroupName, targetName, body, context);
    }

    public void removeRevision(RemoveRevisionParameter body) {
        serviceManager.targets().removeRevision(resourceGroupName, targetName, body);
    }

    public void removeRevision(RemoveRevisionParameter body, Context context) {
        serviceManager.targets().removeRevision(resourceGroupName, targetName, body, context);
    }

    public ResolvedConfiguration resolveConfiguration(SolutionTemplateParameter body) {
        return serviceManager.targets().resolveConfiguration(resourceGroupName, targetName, body);
    }

    public ResolvedConfiguration resolveConfiguration(SolutionTemplateParameter body, Context context) {
        return serviceManager.targets().resolveConfiguration(resourceGroupName, targetName, body, context);
    }

    public SolutionVersion reviewSolutionVersion(SolutionTemplateParameter body) {
        return serviceManager.targets().reviewSolutionVersion(resourceGroupName, targetName, body);
    }

    public SolutionVersion reviewSolutionVersion(SolutionTemplateParameter body, Context context) {
        return serviceManager.targets().reviewSolutionVersion(resourceGroupName, targetName, body, context);
    }

    public SolutionVersion publishSolutionVersion(SolutionVersionParameter body) {
        return serviceManager.targets().publishSolutionVersion(resourceGroupName, targetName, body);
    }

    public SolutionVersion publishSolutionVersion(SolutionVersionParameter body, Context context) {
        return serviceManager.targets().publishSolutionVersion(resourceGroupName, targetName, body, context);
    }

    public SolutionVersion updateExternalValidationStatus(UpdateExternalValidationStatusParameter body) {
        return serviceManager.targets().updateExternalValidationStatus(resourceGroupName, targetName, body);
    }

    public SolutionVersion updateExternalValidationStatus(UpdateExternalValidationStatusParameter body,
        Context context) {
        return serviceManager.targets().updateExternalValidationStatus(resourceGroupName, targetName, body, context);
    }

    public TargetImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public TargetImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public TargetImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public TargetImpl withProperties(TargetProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public TargetImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }
}
