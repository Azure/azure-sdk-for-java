// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Uninstall Solution Parameter.
 */
@Fluent
public final class UninstallSolutionParameter implements JsonSerializable<UninstallSolutionParameter> {
    /*
     * Solution Template ARM Id
     */
    private String solutionTemplateId;

    /*
     * Solution Instance Name
     */
    private String solutionInstanceName;

    /**
     * Creates an instance of UninstallSolutionParameter class.
     */
    public UninstallSolutionParameter() {
    }

    /**
     * Get the solutionTemplateId property: Solution Template ARM Id.
     * 
     * @return the solutionTemplateId value.
     */
    public String solutionTemplateId() {
        return this.solutionTemplateId;
    }

    /**
     * Set the solutionTemplateId property: Solution Template ARM Id.
     * 
     * @param solutionTemplateId the solutionTemplateId value to set.
     * @return the UninstallSolutionParameter object itself.
     */
    public UninstallSolutionParameter withSolutionTemplateId(String solutionTemplateId) {
        this.solutionTemplateId = solutionTemplateId;
        return this;
    }

    /**
     * Get the solutionInstanceName property: Solution Instance Name.
     * 
     * @return the solutionInstanceName value.
     */
    public String solutionInstanceName() {
        return this.solutionInstanceName;
    }

    /**
     * Set the solutionInstanceName property: Solution Instance Name.
     * 
     * @param solutionInstanceName the solutionInstanceName value to set.
     * @return the UninstallSolutionParameter object itself.
     */
    public UninstallSolutionParameter withSolutionInstanceName(String solutionInstanceName) {
        this.solutionInstanceName = solutionInstanceName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionTemplateId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionTemplateId in model UninstallSolutionParameter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UninstallSolutionParameter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionTemplateId", this.solutionTemplateId);
        jsonWriter.writeStringField("solutionInstanceName", this.solutionInstanceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UninstallSolutionParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UninstallSolutionParameter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UninstallSolutionParameter.
     */
    public static UninstallSolutionParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UninstallSolutionParameter deserializedUninstallSolutionParameter = new UninstallSolutionParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionTemplateId".equals(fieldName)) {
                    deserializedUninstallSolutionParameter.solutionTemplateId = reader.getString();
                } else if ("solutionInstanceName".equals(fieldName)) {
                    deserializedUninstallSolutionParameter.solutionInstanceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUninstallSolutionParameter;
        });
    }
}
