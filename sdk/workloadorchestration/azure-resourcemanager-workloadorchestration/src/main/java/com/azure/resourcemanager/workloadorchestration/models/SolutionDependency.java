// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Solution Dependency Context.
 */
@Immutable
public final class SolutionDependency implements JsonSerializable<SolutionDependency> {
    /*
     * Solution Version Id
     */
    private String solutionVersionId;

    /*
     * Solution Instance Name
     */
    private String solutionInstanceName;

    /*
     * Solution Template Version Id
     */
    private String solutionTemplateVersionId;

    /*
     * Target Id
     */
    private String targetId;

    /*
     * Solution dependencies
     */
    private List<SolutionDependency> dependencies;

    /**
     * Creates an instance of SolutionDependency class.
     */
    private SolutionDependency() {
    }

    /**
     * Get the solutionVersionId property: Solution Version Id.
     * 
     * @return the solutionVersionId value.
     */
    public String solutionVersionId() {
        return this.solutionVersionId;
    }

    /**
     * Get the solutionInstanceName property: Solution Instance Name.
     * 
     * @return the solutionInstanceName value.
     */
    public String solutionInstanceName() {
        return this.solutionInstanceName;
    }

    /**
     * Get the solutionTemplateVersionId property: Solution Template Version Id.
     * 
     * @return the solutionTemplateVersionId value.
     */
    public String solutionTemplateVersionId() {
        return this.solutionTemplateVersionId;
    }

    /**
     * Get the targetId property: Target Id.
     * 
     * @return the targetId value.
     */
    public String targetId() {
        return this.targetId;
    }

    /**
     * Get the dependencies property: Solution dependencies.
     * 
     * @return the dependencies value.
     */
    public List<SolutionDependency> dependencies() {
        return this.dependencies;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionVersionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionVersionId in model SolutionDependency"));
        }
        if (solutionTemplateVersionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionTemplateVersionId in model SolutionDependency"));
        }
        if (targetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property targetId in model SolutionDependency"));
        }
        if (dependencies() != null) {
            dependencies().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionDependency.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionVersionId", this.solutionVersionId);
        jsonWriter.writeStringField("solutionTemplateVersionId", this.solutionTemplateVersionId);
        jsonWriter.writeStringField("targetId", this.targetId);
        jsonWriter.writeStringField("solutionInstanceName", this.solutionInstanceName);
        jsonWriter.writeArrayField("dependencies", this.dependencies, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionDependency from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionDependency if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionDependency.
     */
    public static SolutionDependency fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionDependency deserializedSolutionDependency = new SolutionDependency();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionVersionId".equals(fieldName)) {
                    deserializedSolutionDependency.solutionVersionId = reader.getString();
                } else if ("solutionTemplateVersionId".equals(fieldName)) {
                    deserializedSolutionDependency.solutionTemplateVersionId = reader.getString();
                } else if ("targetId".equals(fieldName)) {
                    deserializedSolutionDependency.targetId = reader.getString();
                } else if ("solutionInstanceName".equals(fieldName)) {
                    deserializedSolutionDependency.solutionInstanceName = reader.getString();
                } else if ("dependencies".equals(fieldName)) {
                    List<SolutionDependency> dependencies
                        = reader.readArray(reader1 -> SolutionDependency.fromJson(reader1));
                    deserializedSolutionDependency.dependencies = dependencies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionDependency;
        });
    }
}
