// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SchemaVersionInner;
import com.azure.resourcemanager.workloadorchestration.models.SchemaVersion;
import com.azure.resourcemanager.workloadorchestration.models.SchemaVersionProperties;

public final class SchemaVersionImpl implements SchemaVersion, SchemaVersion.Definition, SchemaVersion.Update {
    private SchemaVersionInner innerObject;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SchemaVersionProperties properties() {
        return this.innerModel().properties();
    }

    public String eTag() {
        return this.innerModel().eTag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SchemaVersionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String schemaName;

    private String schemaVersionName;

    public SchemaVersionImpl withExistingSchema(String resourceGroupName, String schemaName) {
        this.resourceGroupName = resourceGroupName;
        this.schemaName = schemaName;
        return this;
    }

    public SchemaVersion create() {
        this.innerObject = serviceManager.serviceClient()
            .getSchemaVersions()
            .createOrUpdate(resourceGroupName, schemaName, schemaVersionName, this.innerModel(), Context.NONE);
        return this;
    }

    public SchemaVersion create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSchemaVersions()
            .createOrUpdate(resourceGroupName, schemaName, schemaVersionName, this.innerModel(), context);
        return this;
    }

    SchemaVersionImpl(String name,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = new SchemaVersionInner();
        this.serviceManager = serviceManager;
        this.schemaVersionName = name;
    }

    public SchemaVersionImpl update() {
        return this;
    }

    public SchemaVersion apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSchemaVersions()
            .updateWithResponse(resourceGroupName, schemaName, schemaVersionName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public SchemaVersion apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSchemaVersions()
            .updateWithResponse(resourceGroupName, schemaName, schemaVersionName, this.innerModel(), context)
            .getValue();
        return this;
    }

    SchemaVersionImpl(SchemaVersionInner innerObject,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.schemaName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "schemas");
        this.schemaVersionName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "versions");
    }

    public SchemaVersion refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSchemaVersions()
            .getWithResponse(resourceGroupName, schemaName, schemaVersionName, Context.NONE)
            .getValue();
        return this;
    }

    public SchemaVersion refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSchemaVersions()
            .getWithResponse(resourceGroupName, schemaName, schemaVersionName, context)
            .getValue();
        return this;
    }

    public SchemaVersionImpl withProperties(SchemaVersionProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
