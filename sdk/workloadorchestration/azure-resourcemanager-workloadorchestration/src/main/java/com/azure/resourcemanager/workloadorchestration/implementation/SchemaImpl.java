// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SchemaInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SchemaVersionWithUpdateTypeInner;
import com.azure.resourcemanager.workloadorchestration.models.RemoveVersionResponse;
import com.azure.resourcemanager.workloadorchestration.models.Schema;
import com.azure.resourcemanager.workloadorchestration.models.SchemaProperties;
import com.azure.resourcemanager.workloadorchestration.models.SchemaVersion;
import com.azure.resourcemanager.workloadorchestration.models.VersionParameter;
import java.util.Collections;
import java.util.Map;

public final class SchemaImpl implements Schema, Schema.Definition, Schema.Update {
    private SchemaInner innerObject;

    private final com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SchemaProperties properties() {
        return this.innerModel().properties();
    }

    public String eTag() {
        return this.innerModel().eTag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SchemaInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String schemaName;

    public SchemaImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Schema create() {
        this.innerObject = serviceManager.serviceClient()
            .getSchemas()
            .createOrUpdate(resourceGroupName, schemaName, this.innerModel(), Context.NONE);
        return this;
    }

    public Schema create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSchemas()
            .createOrUpdate(resourceGroupName, schemaName, this.innerModel(), context);
        return this;
    }

    SchemaImpl(String name,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = new SchemaInner();
        this.serviceManager = serviceManager;
        this.schemaName = name;
    }

    public SchemaImpl update() {
        return this;
    }

    public Schema apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSchemas()
            .updateWithResponse(resourceGroupName, schemaName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public Schema apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSchemas()
            .updateWithResponse(resourceGroupName, schemaName, this.innerModel(), context)
            .getValue();
        return this;
    }

    SchemaImpl(SchemaInner innerObject,
        com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.schemaName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "schemas");
    }

    public Schema refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSchemas()
            .getByResourceGroupWithResponse(resourceGroupName, schemaName, Context.NONE)
            .getValue();
        return this;
    }

    public Schema refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSchemas()
            .getByResourceGroupWithResponse(resourceGroupName, schemaName, context)
            .getValue();
        return this;
    }

    public SchemaVersion createVersion(SchemaVersionWithUpdateTypeInner body) {
        return serviceManager.schemas().createVersion(resourceGroupName, schemaName, body);
    }

    public SchemaVersion createVersion(SchemaVersionWithUpdateTypeInner body, Context context) {
        return serviceManager.schemas().createVersion(resourceGroupName, schemaName, body, context);
    }

    public Response<RemoveVersionResponse> removeVersionWithResponse(VersionParameter body, Context context) {
        return serviceManager.schemas().removeVersionWithResponse(resourceGroupName, schemaName, body, context);
    }

    public RemoveVersionResponse removeVersion(VersionParameter body) {
        return serviceManager.schemas().removeVersion(resourceGroupName, schemaName, body);
    }

    public SchemaImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SchemaImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SchemaImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public SchemaImpl withProperties(SchemaProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
