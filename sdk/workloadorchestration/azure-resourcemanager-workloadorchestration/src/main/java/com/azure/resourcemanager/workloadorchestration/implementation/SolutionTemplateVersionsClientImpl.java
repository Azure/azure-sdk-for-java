// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadorchestration.fluent.SolutionTemplateVersionsClient;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionInner;
import com.azure.resourcemanager.workloadorchestration.implementation.models.SolutionTemplateVersionListResult;
import com.azure.resourcemanager.workloadorchestration.models.BulkDeploySolutionParameter;
import com.azure.resourcemanager.workloadorchestration.models.BulkPublishSolutionParameter;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SolutionTemplateVersionsClient.
 */
public final class SolutionTemplateVersionsClientImpl implements SolutionTemplateVersionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SolutionTemplateVersionsService service;

    /**
     * The service client containing this operation class.
     */
    private final WorkloadOrchestrationManagementClientImpl client;

    /**
     * Initializes an instance of SolutionTemplateVersionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SolutionTemplateVersionsClientImpl(WorkloadOrchestrationManagementClientImpl client) {
        this.service = RestProxy.create(SolutionTemplateVersionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadOrchestrationManagementClientSolutionTemplateVersions to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "WorkloadOrchestrationManagementClientSolutionTemplateVersions")
    public interface SolutionTemplateVersionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionTemplateVersionInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("solutionTemplateName") String solutionTemplateName,
            @PathParam("solutionTemplateVersionName") String solutionTemplateVersionName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SolutionTemplateVersionInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("solutionTemplateName") String solutionTemplateName,
            @PathParam("solutionTemplateVersionName") String solutionTemplateVersionName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionTemplateVersionListResult>> listBySolutionTemplate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("solutionTemplateName") String solutionTemplateName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SolutionTemplateVersionListResult> listBySolutionTemplateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("solutionTemplateName") String solutionTemplateName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Accept: application/json;q=0.9" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> bulkDeploySolution(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("solutionTemplateName") String solutionTemplateName,
            @PathParam("solutionTemplateVersionName") String solutionTemplateVersionName,
            @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BulkDeploySolutionParameter body, Context context);

        @Headers({ "Accept: application/json;q=0.9" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> bulkDeploySolutionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("solutionTemplateName") String solutionTemplateName,
            @PathParam("solutionTemplateVersionName") String solutionTemplateVersionName,
            @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BulkDeploySolutionParameter body, Context context);

        @Headers({ "Accept: application/json;q=0.9" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> bulkPublishSolution(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("solutionTemplateName") String solutionTemplateName,
            @PathParam("solutionTemplateVersionName") String solutionTemplateVersionName,
            @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BulkPublishSolutionParameter body, Context context);

        @Headers({ "Accept: application/json;q=0.9" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> bulkPublishSolutionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("solutionTemplateName") String solutionTemplateName,
            @PathParam("solutionTemplateVersionName") String solutionTemplateVersionName,
            @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BulkPublishSolutionParameter body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionTemplateVersionListResult>> listBySolutionTemplateNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SolutionTemplateVersionListResult> listBySolutionTemplateNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Solution Template Version Resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionTemplateVersionInner>> getWithResponseAsync(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        if (solutionTemplateVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter solutionTemplateVersionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, solutionTemplateVersionName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Solution Template Version Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionTemplateVersionInner> getAsync(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName) {
        return getWithResponseAsync(resourceGroupName, solutionTemplateName, solutionTemplateVersionName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Solution Template Version Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SolutionTemplateVersionInner> getWithResponse(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        if (solutionTemplateVersionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter solutionTemplateVersionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, solutionTemplateName, solutionTemplateVersionName, accept, context);
    }

    /**
     * Get a Solution Template Version Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Solution Template Version Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionTemplateVersionInner get(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName) {
        return getWithResponse(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, Context.NONE)
            .getValue();
    }

    /**
     * List Solution Template Version Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SolutionTemplateVersionInner>>
        listBySolutionTemplateSinglePageAsync(String resourceGroupName, String solutionTemplateName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySolutionTemplate(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, accept, context))
            .<PagedResponse<SolutionTemplateVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List Solution Template Version Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SolutionTemplateVersionInner> listBySolutionTemplateAsync(String resourceGroupName,
        String solutionTemplateName) {
        return new PagedFlux<>(() -> listBySolutionTemplateSinglePageAsync(resourceGroupName, solutionTemplateName),
            nextLink -> listBySolutionTemplateNextSinglePageAsync(nextLink));
    }

    /**
     * List Solution Template Version Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SolutionTemplateVersionInner> listBySolutionTemplateSinglePage(String resourceGroupName,
        String solutionTemplateName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SolutionTemplateVersionListResult> res
            = service.listBySolutionTemplateSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List Solution Template Version Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SolutionTemplateVersionInner> listBySolutionTemplateSinglePage(String resourceGroupName,
        String solutionTemplateName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SolutionTemplateVersionListResult> res
            = service.listBySolutionTemplateSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List Solution Template Version Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SolutionTemplateVersionInner> listBySolutionTemplate(String resourceGroupName,
        String solutionTemplateName) {
        return new PagedIterable<>(() -> listBySolutionTemplateSinglePage(resourceGroupName, solutionTemplateName),
            nextLink -> listBySolutionTemplateNextSinglePage(nextLink));
    }

    /**
     * List Solution Template Version Resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SolutionTemplateVersionInner> listBySolutionTemplate(String resourceGroupName,
        String solutionTemplateName, Context context) {
        return new PagedIterable<>(
            () -> listBySolutionTemplateSinglePage(resourceGroupName, solutionTemplateName, context),
            nextLink -> listBySolutionTemplateNextSinglePage(nextLink, context));
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> bulkDeploySolutionWithResponseAsync(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName, BulkDeploySolutionParameter body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        if (solutionTemplateVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter solutionTemplateVersionName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        return FluxUtil
            .withContext(context -> service.bulkDeploySolution(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, solutionTemplateVersionName,
                contentType, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> bulkDeploySolutionWithResponse(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkDeploySolutionParameter body) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        if (solutionTemplateVersionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter solutionTemplateVersionName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        return service.bulkDeploySolutionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, solutionTemplateVersionName,
            contentType, body, Context.NONE);
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> bulkDeploySolutionWithResponse(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkDeploySolutionParameter body, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        if (solutionTemplateVersionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter solutionTemplateVersionName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        return service.bulkDeploySolutionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, solutionTemplateVersionName,
            contentType, body, context);
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginBulkDeploySolutionAsync(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName, BulkDeploySolutionParameter body) {
        Mono<Response<Flux<ByteBuffer>>> mono = bulkDeploySolutionWithResponseAsync(resourceGroupName,
            solutionTemplateName, solutionTemplateVersionName, body);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginBulkDeploySolution(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName, BulkDeploySolutionParameter body) {
        Response<BinaryData> response = bulkDeploySolutionWithResponse(resourceGroupName, solutionTemplateName,
            solutionTemplateVersionName, body);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginBulkDeploySolution(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName, BulkDeploySolutionParameter body,
        Context context) {
        Response<BinaryData> response = bulkDeploySolutionWithResponse(resourceGroupName, solutionTemplateName,
            solutionTemplateVersionName, body, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> bulkDeploySolutionAsync(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkDeploySolutionParameter body) {
        return beginBulkDeploySolutionAsync(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void bulkDeploySolution(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkDeploySolutionParameter body) {
        beginBulkDeploySolution(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body)
            .getFinalResult();
    }

    /**
     * Post request for bulk deploy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void bulkDeploySolution(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkDeploySolutionParameter body, Context context) {
        beginBulkDeploySolution(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, context)
            .getFinalResult();
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> bulkPublishSolutionWithResponseAsync(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName, BulkPublishSolutionParameter body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        if (solutionTemplateVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter solutionTemplateVersionName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        return FluxUtil
            .withContext(context -> service.bulkPublishSolution(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, solutionTemplateVersionName,
                contentType, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> bulkPublishSolutionWithResponse(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkPublishSolutionParameter body) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        if (solutionTemplateVersionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter solutionTemplateVersionName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        return service.bulkPublishSolutionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, solutionTemplateVersionName,
            contentType, body, Context.NONE);
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> bulkPublishSolutionWithResponse(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkPublishSolutionParameter body, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (solutionTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionTemplateName is required and cannot be null."));
        }
        if (solutionTemplateVersionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter solutionTemplateVersionName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        return service.bulkPublishSolutionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, solutionTemplateName, solutionTemplateVersionName,
            contentType, body, context);
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginBulkPublishSolutionAsync(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName, BulkPublishSolutionParameter body) {
        Mono<Response<Flux<ByteBuffer>>> mono = bulkPublishSolutionWithResponseAsync(resourceGroupName,
            solutionTemplateName, solutionTemplateVersionName, body);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginBulkPublishSolution(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName, BulkPublishSolutionParameter body) {
        Response<BinaryData> response = bulkPublishSolutionWithResponse(resourceGroupName, solutionTemplateName,
            solutionTemplateVersionName, body);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginBulkPublishSolution(String resourceGroupName,
        String solutionTemplateName, String solutionTemplateVersionName, BulkPublishSolutionParameter body,
        Context context) {
        Response<BinaryData> response = bulkPublishSolutionWithResponse(resourceGroupName, solutionTemplateName,
            solutionTemplateVersionName, body, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> bulkPublishSolutionAsync(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkPublishSolutionParameter body) {
        return beginBulkPublishSolutionAsync(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void bulkPublishSolution(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkPublishSolutionParameter body) {
        beginBulkPublishSolution(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body)
            .getFinalResult();
    }

    /**
     * Post request for bulk publish.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param solutionTemplateName The name of the SolutionTemplate.
     * @param solutionTemplateVersionName The name of the SolutionTemplateVersion.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void bulkPublishSolution(String resourceGroupName, String solutionTemplateName,
        String solutionTemplateVersionName, BulkPublishSolutionParameter body, Context context) {
        beginBulkPublishSolution(resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, context)
            .getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SolutionTemplateVersionInner>>
        listBySolutionTemplateNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySolutionTemplateNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SolutionTemplateVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SolutionTemplateVersionInner> listBySolutionTemplateNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SolutionTemplateVersionListResult> res
            = service.listBySolutionTemplateNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionTemplateVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SolutionTemplateVersionInner> listBySolutionTemplateNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SolutionTemplateVersionListResult> res
            = service.listBySolutionTemplateNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionTemplateVersionsClientImpl.class);
}
