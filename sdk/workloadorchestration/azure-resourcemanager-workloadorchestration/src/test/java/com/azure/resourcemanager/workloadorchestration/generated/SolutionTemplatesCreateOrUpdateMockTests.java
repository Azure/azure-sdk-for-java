// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplate;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionTemplatesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"xlqfh\",\"capabilities\":[\"kwabsolronqq\"],\"latestVersion\":\"gn\",\"state\":\"inactive\",\"enableExternalValidation\":false,\"provisioningState\":\"Succeeded\"},\"eTag\":\"lexhv\",\"location\":\"b\",\"tags\":{\"zqocarku\":\"o\",\"nx\":\"lbcnndt\",\"llhdyzm\":\"wqy\",\"nxakckyw\":\"ckze\"},\"id\":\"mxgaabjkdtfohfao\",\"name\":\"zvkiwrsiwdy\",\"type\":\"quryk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SolutionTemplate response = manager.solutionTemplates()
            .define("azyqbxyxoyfp")
            .withRegion("yvp")
            .withExistingResourceGroup("t")
            .withTags(mapOf("nrexkxbhxv", "qjpnqnoowsbed", "nfa", "cnulgmnhjevdy"))
            .withProperties(new SolutionTemplateProperties().withDescription("qi")
                .withCapabilities(Arrays.asList("zxlhdjzqdcadwv", "sozjiihj", "iybmrzoep"))
                .withState(ResourceState.ACTIVE)
                .withEnableExternalValidation(false))
            .create();

        Assertions.assertEquals("b", response.location());
        Assertions.assertEquals("o", response.tags().get("zqocarku"));
        Assertions.assertEquals("xlqfh", response.properties().description());
        Assertions.assertEquals("kwabsolronqq", response.properties().capabilities().get(0));
        Assertions.assertEquals(ResourceState.INACTIVE, response.properties().state());
        Assertions.assertFalse(response.properties().enableExternalValidation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
