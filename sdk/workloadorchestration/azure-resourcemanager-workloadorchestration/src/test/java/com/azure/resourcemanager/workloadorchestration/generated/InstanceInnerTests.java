// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.InstanceInner;
import com.azure.resourcemanager.workloadorchestration.models.ActiveState;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.InstanceProperties;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationState;
import org.junit.jupiter.api.Assertions;

public final class InstanceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceInner model = BinaryData.fromString(
            "{\"properties\":{\"solutionVersionId\":\"wdsh\",\"targetId\":\"ssnrbgye\",\"activeState\":\"inactive\",\"reconciliationPolicy\":{\"state\":\"active\",\"interval\":\"gaojf\"},\"solutionScope\":\"nc\",\"status\":{\"lastModified\":\"2021-05-09T10:35:28Z\",\"deployed\":2043797639,\"expectedRunningJobId\":1147624677,\"runningJobId\":37194957,\"status\":\"moxoftpi\",\"statusDetails\":\"wycz\",\"generation\":1967043899,\"targetStatuses\":[{\"name\":\"qjlihhyuspska\",\"status\":\"vlmfwdgzxulucv\",\"componentStatuses\":[{},{},{},{}]},{\"name\":\"sreuzvxurisjnh\",\"status\":\"txifqj\",\"componentStatuses\":[{},{}]},{\"name\":\"rhublwpcesutrg\",\"status\":\"pauutpw\",\"componentStatuses\":[{},{},{},{}]}]},\"deploymentTimestampEpoch\":2623463508515246746,\"provisioningState\":\"Initialized\"},\"extendedLocation\":{\"name\":\"w\",\"type\":\"CustomLocation\"},\"eTag\":\"fqntcyp\",\"id\":\"jv\",\"name\":\"oimwkslirc\",\"type\":\"zjxvydfcea\"}")
            .toObject(InstanceInner.class);
        Assertions.assertEquals("wdsh", model.properties().solutionVersionId());
        Assertions.assertEquals("ssnrbgye", model.properties().targetId());
        Assertions.assertEquals(ActiveState.INACTIVE, model.properties().activeState());
        Assertions.assertEquals(ReconciliationState.ACTIVE, model.properties().reconciliationPolicy().state());
        Assertions.assertEquals("gaojf", model.properties().reconciliationPolicy().interval());
        Assertions.assertEquals("nc", model.properties().solutionScope());
        Assertions.assertEquals("w", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceInner model
            = new InstanceInner()
                .withProperties(new InstanceProperties().withSolutionVersionId("wdsh")
                    .withTargetId("ssnrbgye")
                    .withActiveState(ActiveState.INACTIVE)
                    .withReconciliationPolicy(new ReconciliationPolicyProperties().withState(ReconciliationState.ACTIVE)
                        .withInterval("gaojf"))
                    .withSolutionScope("nc"))
                .withExtendedLocation(
                    new ExtendedLocation().withName("w").withType(ExtendedLocationType.CUSTOM_LOCATION));
        model = BinaryData.fromObject(model).toObject(InstanceInner.class);
        Assertions.assertEquals("wdsh", model.properties().solutionVersionId());
        Assertions.assertEquals("ssnrbgye", model.properties().targetId());
        Assertions.assertEquals(ActiveState.INACTIVE, model.properties().activeState());
        Assertions.assertEquals(ReconciliationState.ACTIVE, model.properties().reconciliationPolicy().state());
        Assertions.assertEquals("gaojf", model.properties().reconciliationPolicy().interval());
        Assertions.assertEquals("nc", model.properties().solutionScope());
        Assertions.assertEquals("w", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }
}
