// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.models.ExecutionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutionProperties model = BinaryData.fromString(
            "{\"workflowVersionId\":\"mcmuapc\",\"specification\":{},\"status\":{\"updateTime\":\"2021-12-02T23:21:10Z\",\"status\":15684677,\"statusMessage\":\"xeyskonqzinkfkbg\",\"stageHistory\":[{\"status\":1881387928,\"statusMessage\":\"eqocljmygvk\",\"stage\":\"kjjeokbz\",\"nextstage\":\"ezrxcczurtleipqx\",\"errorMessage\":\"wvz\",\"isActive\":\"active\",\"inputs\":{},\"outputs\":{}},{\"status\":202407711,\"statusMessage\":\"xzmqpnodawop\",\"stage\":\"ewjptmcg\",\"nextstage\":\"ostzelndlatu\",\"errorMessage\":\"zlbiojlvfhrbbpn\",\"isActive\":\"inactive\",\"inputs\":{},\"outputs\":{}}]},\"provisioningState\":\"InProgress\"}")
            .toObject(ExecutionProperties.class);
        Assertions.assertEquals("mcmuapc", model.workflowVersionId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutionProperties model
            = new ExecutionProperties().withWorkflowVersionId("mcmuapc").withSpecification(mapOf());
        model = BinaryData.fromObject(model).toObject(ExecutionProperties.class);
        Assertions.assertEquals("mcmuapc", model.workflowVersionId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
