// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ActiveState;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.InstanceHistory;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstanceHistoriesListByInstanceMockTests {
    @Test
    public void testListByInstance() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"solutionVersion\":{\"solutionVersionId\":\"orpravkjoges\",\"specification\":{}},\"target\":{\"targetId\":\"smjkwynqxaekqsy\",\"targetSpecification\":{},\"solutionScope\":\"tqpkevmy\"},\"solutionScope\":\"jcrspxklurcclfgx\",\"activeState\":\"active\",\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"ytzpo\"},\"status\":{\"lastModified\":\"2021-06-06T14:38:21Z\",\"deployed\":1822498924,\"expectedRunningJobId\":1807994418,\"runningJobId\":467042544,\"status\":\"aupxvpi\",\"statusDetails\":\"f\",\"generation\":479705193,\"targetStatuses\":[{\"name\":\"zeyuubeidszl\",\"status\":\"toi\",\"componentStatuses\":[{},{},{},{}]},{\"name\":\"gvfltgvdihoynkr\",\"status\":\"etwkdrcyrucpc\",\"componentStatuses\":[{},{}]},{\"name\":\"zdqumoe\",\"status\":\"dnaienhqhskndnel\",\"componentStatuses\":[{}]},{\"name\":\"dlknwfoanniyop\",\"status\":\"xivcnrlyxnu\",\"componentStatuses\":[{},{},{},{}]}]},\"provisioningState\":\"Initialized\"},\"extendedLocation\":{\"name\":\"lkwq\",\"type\":\"EdgeZone\"},\"eTag\":\"vbqsdt\",\"id\":\"bctvivuzqym\",\"name\":\"uo\",\"type\":\"o\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<InstanceHistory> response = manager.instanceHistories()
            .listByInstance("dsajrednwyysh", "uwg", "evuafpwzyifrk", "wltxeqipxgzdyims",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ActiveState.ACTIVE, response.iterator().next().properties().activeState());
        Assertions.assertEquals("lkwq", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, response.iterator().next().extendedLocation().type());
    }
}
