// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.Execution;
import com.azure.resourcemanager.workloadorchestration.models.ExecutionProperties;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"workflowVersionId\":\"hskxx\",\"specification\":{},\"status\":{\"updateTime\":\"2021-12-04T06:38:55Z\",\"status\":435024183,\"statusMessage\":\"qgvtojrulfu\",\"stageHistory\":[{\"status\":1905255839,\"statusMessage\":\"hcfjzhxlyubqjro\",\"stage\":\"vrjeqmtzzbeqrztr\",\"nextstage\":\"lxrdhabsrwrsn\",\"errorMessage\":\"pqatiwkkvyanxkv\",\"isActive\":\"active\",\"inputs\":{},\"outputs\":{}},{\"status\":84399472,\"statusMessage\":\"jkqxetqmmli\",\"stage\":\"jjxnwxdchpoj\",\"nextstage\":\"ehzl\",\"errorMessage\":\"gfquwz\",\"isActive\":\"inactive\",\"inputs\":{},\"outputs\":{}},{\"status\":1998740765,\"statusMessage\":\"rwkwbpjxljtxbus\",\"stage\":\"bxxn\",\"nextstage\":\"i\",\"errorMessage\":\"zhgbdgzpagsecn\",\"isActive\":\"active\",\"inputs\":{},\"outputs\":{}},{\"status\":159804724,\"statusMessage\":\"llmqiyne\",\"stage\":\"ellnkkii\",\"nextstage\":\"mtum\",\"errorMessage\":\"ymdjfua\",\"isActive\":\"active\",\"inputs\":{},\"outputs\":{}}]},\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"guncan\",\"type\":\"CustomLocation\"},\"eTag\":\"wzor\",\"id\":\"bm\",\"name\":\"aqklxy\",\"type\":\"x\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Execution response = manager.executions()
            .define("chgjtnhtukfacih")
            .withExistingVersion("hthdklmvetatlakf", "oixwgiksb", "vtooxrpo", "wp")
            .withProperties(new ExecutionProperties().withWorkflowVersionId("fntumeezbxvqx").withSpecification(mapOf()))
            .withExtendedLocation(
                new ExtendedLocation().withName("srqorcgenmvceb").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .create();

        Assertions.assertEquals("hskxx", response.properties().workflowVersionId());
        Assertions.assertEquals("guncan", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
