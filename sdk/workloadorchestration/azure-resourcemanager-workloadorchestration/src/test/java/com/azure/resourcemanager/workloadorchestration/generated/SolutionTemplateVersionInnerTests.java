// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionInner;
import com.azure.resourcemanager.workloadorchestration.models.OrchestratorType;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionTemplateVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionTemplateVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"configurations\":\"qal\",\"specification\":{},\"orchestratorType\":\"TO\",\"provisioningState\":\"Failed\"},\"eTag\":\"pxacqqudfn\",\"id\":\"xbaaabjyv\",\"name\":\"yffimrzrtuzqogs\",\"type\":\"xnevfdnwn\"}")
            .toObject(SolutionTemplateVersionInner.class);
        Assertions.assertEquals("qal", model.properties().configurations());
        Assertions.assertEquals(OrchestratorType.TO, model.properties().orchestratorType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionTemplateVersionInner model = new SolutionTemplateVersionInner()
            .withProperties(new SolutionTemplateVersionProperties().withConfigurations("qal")
                .withSpecification(mapOf())
                .withOrchestratorType(OrchestratorType.TO));
        model = BinaryData.fromObject(model).toObject(SolutionTemplateVersionInner.class);
        Assertions.assertEquals("qal", model.properties().configurations());
        Assertions.assertEquals(OrchestratorType.TO, model.properties().orchestratorType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
