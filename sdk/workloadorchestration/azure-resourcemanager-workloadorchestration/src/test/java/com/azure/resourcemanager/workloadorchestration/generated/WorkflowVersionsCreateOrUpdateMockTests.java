// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ErrorAction;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.StageSpec;
import com.azure.resourcemanager.workloadorchestration.models.TaskOption;
import com.azure.resourcemanager.workloadorchestration.models.TaskSpec;
import com.azure.resourcemanager.workloadorchestration.models.WorkflowVersion;
import com.azure.resourcemanager.workloadorchestration.models.WorkflowVersionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"revision\":1589873134,\"configuration\":\"cm\",\"stageSpec\":[{\"name\":\"rndb\",\"specification\":{},\"tasks\":[{\"name\":\"fltfnnxr\",\"specification\":{}},{\"name\":\"adj\",\"specification\":{}},{\"name\":\"ynnfmuiii\",\"specification\":{}},{\"name\":\"ipfohykfkx\",\"specification\":{}}],\"taskOption\":{\"concurrency\":1232113097,\"errorAction\":{}}},{\"name\":\"wjiutgnjiz\",\"specification\":{},\"tasks\":[{\"name\":\"iy\",\"specification\":{}},{\"name\":\"rvzb\",\"specification\":{}},{\"name\":\"uyrsrziuctix\",\"specification\":{}},{\"name\":\"bdsuifr\",\"specification\":{}}],\"taskOption\":{\"concurrency\":1996304749,\"errorAction\":{}}},{\"name\":\"pezkis\",\"specification\":{},\"tasks\":[{\"name\":\"g\",\"specification\":{}},{\"name\":\"syparybjufp\",\"specification\":{}}],\"taskOption\":{\"concurrency\":1317353251,\"errorAction\":{}}},{\"name\":\"jnciui\",\"specification\":{},\"tasks\":[{\"name\":\"aswvppis\",\"specification\":{}},{\"name\":\"qzlgcndhzxrrfcfs\",\"specification\":{}}],\"taskOption\":{\"concurrency\":809769529,\"errorAction\":{}}}],\"reviewId\":\"nxu\",\"state\":\"UpgradeInReview\",\"specification\":{},\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"sbzxl\",\"type\":\"CustomLocation\"},\"eTag\":\"omeikjcl\",\"id\":\"acnmwpfsuqtaaz\",\"name\":\"qbxyxoyfpuqqi\",\"type\":\"ezxlhdjzqdca\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkflowVersion response = manager.workflowVersions()
            .define("jcx")
            .withExistingWorkflow("ktyjmf", "zlfsyqkfrbzgowo", "qmje")
            .withProperties(new WorkflowVersionProperties()
                .withStageSpec(Arrays.asList(new StageSpec()
                    .withName("ceagbjqvlsumywz")
                    .withSpecification(mapOf())
                    .withTasks(Arrays.asList(new TaskSpec().withName("onoyjf").withSpecification(mapOf())))
                    .withTaskOption(new TaskOption().withConcurrency(1141136911).withErrorAction(new ErrorAction())),
                    new StageSpec().withName("yznclkfkee")
                        .withSpecification(mapOf())
                        .withTasks(Arrays.asList(new TaskSpec().withName("e").withSpecification(mapOf()),
                            new TaskSpec().withName("tuoqujlyegqavni").withSpecification(mapOf())))
                        .withTaskOption(
                            new TaskOption().withConcurrency(1510649527).withErrorAction(new ErrorAction()))))
                .withSpecification(mapOf()))
            .withExtendedLocation(
                new ExtendedLocation().withName("vabm").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .create();

        Assertions.assertEquals("rndb", response.properties().stageSpec().get(0).name());
        Assertions.assertEquals("fltfnnxr", response.properties().stageSpec().get(0).tasks().get(0).name());
        Assertions.assertEquals(1232113097, response.properties().stageSpec().get(0).taskOption().concurrency());
        Assertions.assertEquals("sbzxl", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
