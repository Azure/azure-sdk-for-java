// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.Diagnostic;
import com.azure.resourcemanager.workloadorchestration.models.DiagnosticProperties;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiagnosticsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"ggytexvzilmhivz\",\"type\":\"EdgeZone\"},\"eTag\":\"wncknr\",\"location\":\"ajlskzptj\",\"tags\":{\"qlehmcgcjeinu\":\"weucyrth\"},\"id\":\"hokamvfej\",\"name\":\"qnttmbq\",\"type\":\"abzfivf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Diagnostic response = manager.diagnostics()
            .define("funlcpxxvi")
            .withRegion("ljtiahxmfqryarv")
            .withExistingResourceGroup("txvcm")
            .withTags(mapOf("hz", "qbglcjkaysp", "gblioskkfmkm", "dubtlmj", "dlrslskk", "djxyxgbkkqvjcteo"))
            .withProperties(new DiagnosticProperties())
            .withExtendedLocation(new ExtendedLocation().withName("gjgvr").withType(ExtendedLocationType.EDGE_ZONE))
            .create();

        Assertions.assertEquals("ajlskzptj", response.location());
        Assertions.assertEquals("weucyrth", response.tags().get("qlehmcgcjeinu"));
        Assertions.assertEquals("ggytexvzilmhivz", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
