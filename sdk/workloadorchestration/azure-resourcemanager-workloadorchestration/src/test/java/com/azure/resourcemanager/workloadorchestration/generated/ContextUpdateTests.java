// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.models.Capability;
import com.azure.resourcemanager.workloadorchestration.models.ContextUpdate;
import com.azure.resourcemanager.workloadorchestration.models.ContextUpdateProperties;
import com.azure.resourcemanager.workloadorchestration.models.Hierarchy;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ContextUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContextUpdate model = BinaryData.fromString(
            "{\"tags\":{\"lbyvictctbrxkjzw\":\"zb\",\"kgozxwop\":\"gxffmshkwf\",\"yg\":\"bydpizqaclnapxb\"},\"properties\":{\"capabilities\":[{\"name\":\"knfsmfcttuxuuyil\",\"description\":\"lq\",\"state\":\"active\"}],\"hierarchies\":[{\"name\":\"rehmr\",\"description\":\"jhvsujztczyt\"},{\"name\":\"jtwhauunf\",\"description\":\"rnjlet\"},{\"name\":\"xsmrpddouifamow\",\"description\":\"z\"},{\"name\":\"yn\",\"description\":\"nlqwzdvpiwhx\"}]}}")
            .toObject(ContextUpdate.class);
        Assertions.assertEquals("zb", model.tags().get("lbyvictctbrxkjzw"));
        Assertions.assertEquals("knfsmfcttuxuuyil", model.properties().capabilities().get(0).name());
        Assertions.assertEquals("lq", model.properties().capabilities().get(0).description());
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().capabilities().get(0).state());
        Assertions.assertEquals("rehmr", model.properties().hierarchies().get(0).name());
        Assertions.assertEquals("jhvsujztczyt", model.properties().hierarchies().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContextUpdate model = new ContextUpdate()
            .withTags(mapOf("lbyvictctbrxkjzw", "zb", "kgozxwop", "gxffmshkwf", "yg", "bydpizqaclnapxb"))
            .withProperties(new ContextUpdateProperties().withCapabilities(Arrays.asList(
                new Capability().withName("knfsmfcttuxuuyil").withDescription("lq").withState(ResourceState.ACTIVE)))
                .withHierarchies(Arrays.asList(new Hierarchy().withName("rehmr").withDescription("jhvsujztczyt"),
                    new Hierarchy().withName("jtwhauunf").withDescription("rnjlet"),
                    new Hierarchy().withName("xsmrpddouifamow").withDescription("z"),
                    new Hierarchy().withName("yn").withDescription("nlqwzdvpiwhx"))));
        model = BinaryData.fromObject(model).toObject(ContextUpdate.class);
        Assertions.assertEquals("zb", model.tags().get("lbyvictctbrxkjzw"));
        Assertions.assertEquals("knfsmfcttuxuuyil", model.properties().capabilities().get(0).name());
        Assertions.assertEquals("lq", model.properties().capabilities().get(0).description());
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().capabilities().get(0).state());
        Assertions.assertEquals("rehmr", model.properties().hierarchies().get(0).name());
        Assertions.assertEquals("jhvsujztczyt", model.properties().hierarchies().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
