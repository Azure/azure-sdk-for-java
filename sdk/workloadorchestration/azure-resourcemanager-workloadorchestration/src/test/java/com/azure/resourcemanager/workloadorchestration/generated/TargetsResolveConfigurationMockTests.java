// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ResolvedConfiguration;
import com.azure.resourcemanager.workloadorchestration.models.SolutionDependencyParameter;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TargetsResolveConfigurationMockTests {
    @Test
    public void testResolveConfiguration() throws Exception {
        String responseStr = "{\"configuration\":\"hqawmo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ResolvedConfiguration response = manager.targets()
            .resolveConfiguration("zusjsz", "bscm",
                new SolutionTemplateParameter().withSolutionTemplateVersionId("lzijiufehgmvflnw")
                    .withSolutionInstanceName("qkxrerl")
                    .withSolutionDependencies(
                        Arrays.asList(new SolutionDependencyParameter().withSolutionVersionId("yl")
                            .withSolutionTemplateId("wxzut")
                            .withSolutionTemplateVersion("ztwhghmupg")
                            .withSolutionInstanceName("jtcdxabbujftaben")
                            .withTargetId("klqpx")
                            .withDependencies(Arrays.asList(
                                new SolutionDependencyParameter().withSolutionVersionId("feddwwnlza")
                                    .withSolutionTemplateId("xud")
                                    .withSolutionTemplateVersion("hgookrtalvnbwgpb")
                                    .withSolutionInstanceName("eluclvdjj")
                                    .withTargetId("yrdnqod")
                                    .withDependencies(Arrays.asList(new SolutionDependencyParameter(),
                                        new SolutionDependencyParameter())),
                                new SolutionDependencyParameter().withSolutionVersionId("xhqf")
                                    .withSolutionTemplateId("nvzoqgyipemch")
                                    .withSolutionTemplateVersion("v")
                                    .withSolutionInstanceName("zuejd")
                                    .withTargetId("ptlghwzhomewjjst")
                                    .withDependencies(Arrays.asList(new SolutionDependencyParameter(),
                                        new SolutionDependencyParameter(), new SolutionDependencyParameter())))))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hqawmo", response.configuration());
    }
}
