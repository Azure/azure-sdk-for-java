// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.ConfigTemplateInner;
import com.azure.resourcemanager.workloadorchestration.models.ConfigTemplateProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfigTemplateInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfigTemplateInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"n\",\"latestVersion\":\"zudhcxg\",\"provisioningState\":\"Canceled\"},\"eTag\":\"xcdyuibhmfdnb\",\"location\":\"dvfvfcjnaeoi\",\"tags\":{\"mzhwplefaxvxi\":\"hmgorffukiscv\",\"yqxtjjfzql\":\"cbtgnhnz\",\"dggxdbeesmi\":\"hycav\"},\"id\":\"knlrariaawiuagy\",\"name\":\"wqfbylyrfgiagt\",\"type\":\"ojocqwogf\"}")
            .toObject(ConfigTemplateInner.class);
        Assertions.assertEquals("dvfvfcjnaeoi", model.location());
        Assertions.assertEquals("hmgorffukiscv", model.tags().get("mzhwplefaxvxi"));
        Assertions.assertEquals("n", model.properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfigTemplateInner model = new ConfigTemplateInner().withLocation("dvfvfcjnaeoi")
            .withTags(mapOf("mzhwplefaxvxi", "hmgorffukiscv", "yqxtjjfzql", "cbtgnhnz", "dggxdbeesmi", "hycav"))
            .withProperties(new ConfigTemplateProperties().withDescription("n"));
        model = BinaryData.fromObject(model).toObject(ConfigTemplateInner.class);
        Assertions.assertEquals("dvfvfcjnaeoi", model.location());
        Assertions.assertEquals("hmgorffukiscv", model.tags().get("mzhwplefaxvxi"));
        Assertions.assertEquals("n", model.properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
