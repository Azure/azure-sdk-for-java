// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.models.ErrorAction;
import com.azure.resourcemanager.workloadorchestration.models.ErrorActionMode;
import com.azure.resourcemanager.workloadorchestration.models.StageSpec;
import com.azure.resourcemanager.workloadorchestration.models.TaskOption;
import com.azure.resourcemanager.workloadorchestration.models.TaskSpec;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StageSpecTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StageSpec model = BinaryData.fromString(
            "{\"name\":\"oqaqhvseufuq\",\"specification\":{},\"tasks\":[{\"name\":\"lcgqlsismj\",\"targetId\":\"rddga\",\"specification\":{}},{\"name\":\"uhiosrsju\",\"targetId\":\"fcdis\",\"specification\":{}},{\"name\":\"rnxzh\",\"targetId\":\"exrxzbujrtrhq\",\"specification\":{}},{\"name\":\"revkhgnlnzo\",\"targetId\":\"lrpiqywnc\",\"specification\":{}}],\"taskOption\":{\"concurrency\":162010613,\"errorAction\":{\"mode\":\"stopOnAnyFailure\",\"maxToleratedFailures\":1957842604}}}")
            .toObject(StageSpec.class);
        Assertions.assertEquals("oqaqhvseufuq", model.name());
        Assertions.assertEquals("lcgqlsismj", model.tasks().get(0).name());
        Assertions.assertEquals("rddga", model.tasks().get(0).targetId());
        Assertions.assertEquals(162010613, model.taskOption().concurrency());
        Assertions.assertEquals(ErrorActionMode.STOP_ON_ANY_FAILURE, model.taskOption().errorAction().mode());
        Assertions.assertEquals(1957842604, model.taskOption().errorAction().maxToleratedFailures());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StageSpec model
            = new StageSpec().withName("oqaqhvseufuq")
                .withSpecification(mapOf())
                .withTasks(Arrays.asList(
                    new TaskSpec().withName("lcgqlsismj").withTargetId("rddga").withSpecification(mapOf()),
                    new TaskSpec().withName("uhiosrsju").withTargetId("fcdis").withSpecification(mapOf()),
                    new TaskSpec().withName("rnxzh").withTargetId("exrxzbujrtrhq").withSpecification(mapOf()),
                    new TaskSpec().withName("revkhgnlnzo").withTargetId("lrpiqywnc").withSpecification(mapOf())))
                .withTaskOption(new TaskOption().withConcurrency(162010613)
                    .withErrorAction(new ErrorAction().withMode(ErrorActionMode.STOP_ON_ANY_FAILURE)
                        .withMaxToleratedFailures(1957842604)));
        model = BinaryData.fromObject(model).toObject(StageSpec.class);
        Assertions.assertEquals("oqaqhvseufuq", model.name());
        Assertions.assertEquals("lcgqlsismj", model.tasks().get(0).name());
        Assertions.assertEquals("rddga", model.tasks().get(0).targetId());
        Assertions.assertEquals(162010613, model.taskOption().concurrency());
        Assertions.assertEquals(ErrorActionMode.STOP_ON_ANY_FAILURE, model.taskOption().errorAction().mode());
        Assertions.assertEquals(1957842604, model.taskOption().errorAction().maxToleratedFailures());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
