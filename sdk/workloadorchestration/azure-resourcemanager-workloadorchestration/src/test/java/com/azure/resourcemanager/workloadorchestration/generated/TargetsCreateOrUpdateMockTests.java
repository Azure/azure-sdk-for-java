// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.Target;
import com.azure.resourcemanager.workloadorchestration.models.TargetProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TargetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"qumoeno\",\"displayName\":\"naie\",\"contextId\":\"hqhsknd\",\"targetSpecification\":{},\"capabilities\":[\"qkaadlknw\",\"oanniyopetxi\",\"cnrly\"],\"hierarchyLevel\":\"nucaephblkwqpat\",\"status\":{\"lastModified\":\"2021-02-09T00:06:02Z\",\"deployed\":876148319,\"expectedRunningJobId\":690521109,\"runningJobId\":1323692842,\"status\":\"vivuzqymtuowo\",\"statusDetails\":\"gitsqh\",\"generation\":175618914,\"targetStatuses\":[{\"name\":\"dbanfznd\",\"status\":\"xmxeatkdb\",\"componentStatuses\":[{}]},{\"name\":\"djyibqbnaomhjrm\",\"status\":\"hmaxljalfi\",\"componentStatuses\":[{},{}]}]},\"solutionScope\":\"obcancdexxqcw\",\"state\":\"active\",\"provisioningState\":\"Succeeded\"},\"eTag\":\"aknokzwjjzrl\",\"extendedLocation\":{\"name\":\"xldzyyfytpqsix\",\"type\":\"EdgeZone\"},\"location\":\"puj\",\"tags\":{\"mbmslzoyov\":\"qlkjuv\",\"befgvmxn\":\"zdbpqv\"},\"id\":\"kcvtl\",\"name\":\"bse\",\"type\":\"kvcuartrhunl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Target response = manager.targets()
            .define("ynudqllzsa")
            .withRegion("aupxvpi")
            .withExistingResourceGroup("tfvpndpmiljpn")
            .withTags(mapOf("l", "aifyzyzeyuubeids"))
            .withProperties(new TargetProperties().withDescription("pjlxeehuxiqhzl")
                .withDisplayName("aymezx")
                .withContextId("skihmxrfd")
                .withTargetSpecification(mapOf())
                .withCapabilities(Arrays.asList("rednw", "yshtuwgmev", "afpwzyifrkgwl"))
                .withHierarchyLevel("xeqipx")
                .withSolutionScope("fg")
                .withState(ResourceState.ACTIVE))
            .withExtendedLocation(new ExtendedLocation().withName("wxigpxv").withType(ExtendedLocationType.EDGE_ZONE))
            .create();

        Assertions.assertEquals("puj", response.location());
        Assertions.assertEquals("qlkjuv", response.tags().get("mbmslzoyov"));
        Assertions.assertEquals("qumoeno", response.properties().description());
        Assertions.assertEquals("naie", response.properties().displayName());
        Assertions.assertEquals("hqhsknd", response.properties().contextId());
        Assertions.assertEquals("qkaadlknw", response.properties().capabilities().get(0));
        Assertions.assertEquals("nucaephblkwqpat", response.properties().hierarchyLevel());
        Assertions.assertEquals("obcancdexxqcw", response.properties().solutionScope());
        Assertions.assertEquals(ResourceState.ACTIVE, response.properties().state());
        Assertions.assertEquals("xldzyyfytpqsix", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
