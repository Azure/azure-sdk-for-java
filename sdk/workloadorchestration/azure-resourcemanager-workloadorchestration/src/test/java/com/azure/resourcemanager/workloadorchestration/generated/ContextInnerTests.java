// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.ContextInner;
import com.azure.resourcemanager.workloadorchestration.models.Capability;
import com.azure.resourcemanager.workloadorchestration.models.ContextProperties;
import com.azure.resourcemanager.workloadorchestration.models.Hierarchy;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ContextInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContextInner model = BinaryData.fromString(
            "{\"properties\":{\"capabilities\":[{\"name\":\"db\",\"description\":\"cxjmonfdgnwncyp\",\"state\":\"active\"},{\"name\":\"w\",\"description\":\"tvuqjctzenkeifzz\",\"state\":\"inactive\"},{\"name\":\"dasvfl\",\"description\":\"hbxcu\",\"state\":\"inactive\"},{\"name\":\"xgsrboldforobw\",\"description\":\"lvizb\",\"state\":\"inactive\"}],\"hierarchies\":[{\"name\":\"vvacqpb\",\"description\":\"uodxesza\"},{\"name\":\"belawumuaslzkwr\",\"description\":\"woycqucwyha\"},{\"name\":\"nomdrkywuhpsv\",\"description\":\"uurutlwexxwlalni\"}],\"provisioningState\":\"Failed\"},\"location\":\"rzpgep\",\"tags\":{\"wpgdak\":\"bb\"},\"id\":\"hzyvlixqnrkcx\",\"name\":\"jibnxmysu\",\"type\":\"swqrntvlwijp\"}")
            .toObject(ContextInner.class);
        Assertions.assertEquals("rzpgep", model.location());
        Assertions.assertEquals("bb", model.tags().get("wpgdak"));
        Assertions.assertEquals("db", model.properties().capabilities().get(0).name());
        Assertions.assertEquals("cxjmonfdgnwncyp", model.properties().capabilities().get(0).description());
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().capabilities().get(0).state());
        Assertions.assertEquals("vvacqpb", model.properties().hierarchies().get(0).name());
        Assertions.assertEquals("uodxesza", model.properties().hierarchies().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContextInner model = new ContextInner().withLocation("rzpgep")
            .withTags(mapOf("wpgdak", "bb"))
            .withProperties(new ContextProperties().withCapabilities(Arrays.asList(
                new Capability().withName("db").withDescription("cxjmonfdgnwncyp").withState(ResourceState.ACTIVE),
                new Capability().withName("w").withDescription("tvuqjctzenkeifzz").withState(ResourceState.INACTIVE),
                new Capability().withName("dasvfl").withDescription("hbxcu").withState(ResourceState.INACTIVE),
                new Capability().withName("xgsrboldforobw").withDescription("lvizb").withState(ResourceState.INACTIVE)))
                .withHierarchies(Arrays.asList(new Hierarchy().withName("vvacqpb").withDescription("uodxesza"),
                    new Hierarchy().withName("belawumuaslzkwr").withDescription("woycqucwyha"),
                    new Hierarchy().withName("nomdrkywuhpsv").withDescription("uurutlwexxwlalni"))));
        model = BinaryData.fromObject(model).toObject(ContextInner.class);
        Assertions.assertEquals("rzpgep", model.location());
        Assertions.assertEquals("bb", model.tags().get("wpgdak"));
        Assertions.assertEquals("db", model.properties().capabilities().get(0).name());
        Assertions.assertEquals("cxjmonfdgnwncyp", model.properties().capabilities().get(0).description());
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().capabilities().get(0).state());
        Assertions.assertEquals("vvacqpb", model.properties().hierarchies().get(0).name());
        Assertions.assertEquals("uodxesza", model.properties().hierarchies().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
