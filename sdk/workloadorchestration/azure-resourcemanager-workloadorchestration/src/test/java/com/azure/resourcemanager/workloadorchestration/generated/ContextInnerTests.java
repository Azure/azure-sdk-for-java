// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.ContextInner;
import com.azure.resourcemanager.workloadorchestration.models.Capability;
import com.azure.resourcemanager.workloadorchestration.models.ContextProperties;
import com.azure.resourcemanager.workloadorchestration.models.Hierarchy;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ContextInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContextInner model = BinaryData.fromString(
            "{\"properties\":{\"capabilities\":[{\"name\":\"ztrksxwpndf\",\"description\":\"pfnznthjtwkj\",\"state\":\"inactive\"},{\"name\":\"rxuzvoam\",\"description\":\"tcqiosmg\",\"state\":\"active\"},{\"name\":\"hgxqdlyrt\",\"description\":\"tlaprltzkatb\",\"state\":\"inactive\"},{\"name\":\"znnbsoqeqalarvl\",\"description\":\"gunbtgfebwlnbm\",\"state\":\"inactive\"}],\"hierarchies\":[{\"name\":\"eudzqavbpd\",\"description\":\"mjxlyyzglgouw\"}],\"provisioningState\":\"Initialized\"},\"location\":\"jyuojqtobaxkjeyt\",\"tags\":{\"u\":\"bfjkw\",\"njqhdenxa\":\"nkqbhsyrq\"},\"id\":\"l\",\"name\":\"pakdkifmjnnawt\",\"type\":\"abpxuc\"}")
            .toObject(ContextInner.class);
        Assertions.assertEquals("jyuojqtobaxkjeyt", model.location());
        Assertions.assertEquals("bfjkw", model.tags().get("u"));
        Assertions.assertEquals("ztrksxwpndf", model.properties().capabilities().get(0).name());
        Assertions.assertEquals("pfnznthjtwkj", model.properties().capabilities().get(0).description());
        Assertions.assertEquals(ResourceState.INACTIVE, model.properties().capabilities().get(0).state());
        Assertions.assertEquals("eudzqavbpd", model.properties().hierarchies().get(0).name());
        Assertions.assertEquals("mjxlyyzglgouw", model.properties().hierarchies().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContextInner model = new ContextInner().withLocation("jyuojqtobaxkjeyt")
            .withTags(mapOf("u", "bfjkw", "njqhdenxa", "nkqbhsyrq"))
            .withProperties(new ContextProperties()
                .withCapabilities(Arrays.asList(
                    new Capability().withName("ztrksxwpndf")
                        .withDescription("pfnznthjtwkj")
                        .withState(ResourceState.INACTIVE),
                    new Capability().withName("rxuzvoam").withDescription("tcqiosmg").withState(ResourceState.ACTIVE),
                    new Capability().withName("hgxqdlyrt")
                        .withDescription("tlaprltzkatb")
                        .withState(ResourceState.INACTIVE),
                    new Capability().withName("znnbsoqeqalarvl")
                        .withDescription("gunbtgfebwlnbm")
                        .withState(ResourceState.INACTIVE)))
                .withHierarchies(
                    Arrays.asList(new Hierarchy().withName("eudzqavbpd").withDescription("mjxlyyzglgouw"))));
        model = BinaryData.fromObject(model).toObject(ContextInner.class);
        Assertions.assertEquals("jyuojqtobaxkjeyt", model.location());
        Assertions.assertEquals("bfjkw", model.tags().get("u"));
        Assertions.assertEquals("ztrksxwpndf", model.properties().capabilities().get(0).name());
        Assertions.assertEquals("pfnznthjtwkj", model.properties().capabilities().get(0).description());
        Assertions.assertEquals(ResourceState.INACTIVE, model.properties().capabilities().get(0).state());
        Assertions.assertEquals("eudzqavbpd", model.properties().hierarchies().get(0).name());
        Assertions.assertEquals("mjxlyyzglgouw", model.properties().hierarchies().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
