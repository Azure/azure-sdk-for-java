// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.models.ErrorAction;
import com.azure.resourcemanager.workloadorchestration.models.ErrorActionMode;
import com.azure.resourcemanager.workloadorchestration.models.StageSpec;
import com.azure.resourcemanager.workloadorchestration.models.TaskOption;
import com.azure.resourcemanager.workloadorchestration.models.TaskSpec;
import com.azure.resourcemanager.workloadorchestration.models.WorkflowVersionProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkflowVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkflowVersionProperties model = BinaryData.fromString(
            "{\"revision\":811580474,\"configuration\":\"rdcnifmzzsdy\",\"stageSpec\":[{\"name\":\"rnysux\",\"specification\":{},\"tasks\":[{\"name\":\"wgck\",\"targetId\":\"cxvdfffwafqrouda\",\"specification\":{}},{\"name\":\"avehhrvkbunzo\",\"targetId\":\"dhcxgkmoy\",\"specification\":{}},{\"name\":\"dyuib\",\"targetId\":\"fdn\",\"specification\":{}},{\"name\":\"ydvfvfcjnae\",\"targetId\":\"srvhmgorffuki\",\"specification\":{}}],\"taskOption\":{\"concurrency\":1204565564,\"errorAction\":{\"mode\":\"silentlyContinue\",\"maxToleratedFailures\":1363348487}}}],\"reviewId\":\"faxvxil\",\"state\":\"InReview\",\"specification\":{},\"provisioningState\":\"Failed\"}")
            .toObject(WorkflowVersionProperties.class);
        Assertions.assertEquals("rnysux", model.stageSpec().get(0).name());
        Assertions.assertEquals("wgck", model.stageSpec().get(0).tasks().get(0).name());
        Assertions.assertEquals("cxvdfffwafqrouda", model.stageSpec().get(0).tasks().get(0).targetId());
        Assertions.assertEquals(1204565564, model.stageSpec().get(0).taskOption().concurrency());
        Assertions.assertEquals(ErrorActionMode.SILENTLY_CONTINUE,
            model.stageSpec().get(0).taskOption().errorAction().mode());
        Assertions.assertEquals(1363348487, model.stageSpec().get(0).taskOption().errorAction().maxToleratedFailures());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkflowVersionProperties model
            = new WorkflowVersionProperties().withStageSpec(Arrays.asList(new StageSpec().withName("rnysux")
                .withSpecification(mapOf())
                .withTasks(Arrays.asList(
                    new TaskSpec().withName("wgck").withTargetId("cxvdfffwafqrouda").withSpecification(mapOf()),
                    new TaskSpec().withName("avehhrvkbunzo").withTargetId("dhcxgkmoy").withSpecification(mapOf()),
                    new TaskSpec().withName("dyuib").withTargetId("fdn").withSpecification(mapOf()),
                    new TaskSpec().withName("ydvfvfcjnae").withTargetId("srvhmgorffuki").withSpecification(mapOf())))
                .withTaskOption(new TaskOption().withConcurrency(1204565564)
                    .withErrorAction(new ErrorAction().withMode(ErrorActionMode.SILENTLY_CONTINUE)
                        .withMaxToleratedFailures(1363348487)))))
                .withSpecification(mapOf());
        model = BinaryData.fromObject(model).toObject(WorkflowVersionProperties.class);
        Assertions.assertEquals("rnysux", model.stageSpec().get(0).name());
        Assertions.assertEquals("wgck", model.stageSpec().get(0).tasks().get(0).name());
        Assertions.assertEquals("cxvdfffwafqrouda", model.stageSpec().get(0).tasks().get(0).targetId());
        Assertions.assertEquals(1204565564, model.stageSpec().get(0).taskOption().concurrency());
        Assertions.assertEquals(ErrorActionMode.SILENTLY_CONTINUE,
            model.stageSpec().get(0).taskOption().errorAction().mode());
        Assertions.assertEquals(1363348487, model.stageSpec().get(0).taskOption().errorAction().maxToleratedFailures());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
