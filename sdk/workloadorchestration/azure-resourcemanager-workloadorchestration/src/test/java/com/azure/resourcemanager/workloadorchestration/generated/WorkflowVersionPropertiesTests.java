// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.models.ErrorAction;
import com.azure.resourcemanager.workloadorchestration.models.ErrorActionMode;
import com.azure.resourcemanager.workloadorchestration.models.StageSpec;
import com.azure.resourcemanager.workloadorchestration.models.TaskOption;
import com.azure.resourcemanager.workloadorchestration.models.TaskSpec;
import com.azure.resourcemanager.workloadorchestration.models.WorkflowVersionProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkflowVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkflowVersionProperties model = BinaryData.fromString(
            "{\"revision\":1885635288,\"configuration\":\"vgcxtx\",\"stageSpec\":[{\"name\":\"sheafid\",\"specification\":{},\"tasks\":[{\"name\":\"resmkssjhoiftxfk\",\"targetId\":\"egprhptil\",\"specification\":{}}],\"taskOption\":{\"concurrency\":2086555538,\"errorAction\":{\"mode\":\"stopOnNFailures\",\"maxToleratedFailures\":13160998}}},{\"name\":\"ohmcwsld\",\"specification\":{},\"tasks\":[{\"name\":\"pwbralllibphbqz\",\"targetId\":\"zakakankjpdn\",\"specification\":{}}],\"taskOption\":{\"concurrency\":1242778940,\"errorAction\":{\"mode\":\"stopOnAnyFailure\",\"maxToleratedFailures\":2052287318}}},{\"name\":\"lmuoyxprimrsopte\",\"specification\":{},\"tasks\":[{\"name\":\"islstv\",\"targetId\":\"ylw\",\"specification\":{}},{\"name\":\"zaum\",\"targetId\":\"oohgu\",\"specification\":{}},{\"name\":\"uzboyjathw\",\"targetId\":\"olbaemwmdx\",\"specification\":{}},{\"name\":\"bwjscjpahlxveab\",\"targetId\":\"xnmwmqtibxyijddt\",\"specification\":{}}],\"taskOption\":{\"concurrency\":747956494,\"errorAction\":{\"mode\":\"stopOnAnyFailure\",\"maxToleratedFailures\":1119917570}}},{\"name\":\"eukmr\",\"specification\":{},\"tasks\":[{\"name\":\"pndzaapmudqmeq\",\"targetId\":\"gp\",\"specification\":{}}],\"taskOption\":{\"concurrency\":674250391,\"errorAction\":{\"mode\":\"stopOnAnyFailure\",\"maxToleratedFailures\":2053314156}}}],\"reviewId\":\"ybpmzznrtffyaq\",\"state\":\"Deploying\",\"specification\":{},\"provisioningState\":\"InProgress\"}")
            .toObject(WorkflowVersionProperties.class);
        Assertions.assertEquals("sheafid", model.stageSpec().get(0).name());
        Assertions.assertEquals("resmkssjhoiftxfk", model.stageSpec().get(0).tasks().get(0).name());
        Assertions.assertEquals("egprhptil", model.stageSpec().get(0).tasks().get(0).targetId());
        Assertions.assertEquals(2086555538, model.stageSpec().get(0).taskOption().concurrency());
        Assertions.assertEquals(ErrorActionMode.STOP_ON_NFAILURES,
            model.stageSpec().get(0).taskOption().errorAction().mode());
        Assertions.assertEquals(13160998, model.stageSpec().get(0).taskOption().errorAction().maxToleratedFailures());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkflowVersionProperties model = new WorkflowVersionProperties().withStageSpec(Arrays.asList(
            new StageSpec().withName("sheafid")
                .withSpecification(mapOf())
                .withTasks(Arrays.asList(
                    new TaskSpec().withName("resmkssjhoiftxfk").withTargetId("egprhptil").withSpecification(mapOf())))
                .withTaskOption(
                    new TaskOption().withConcurrency(2086555538)
                        .withErrorAction(new ErrorAction()
                            .withMode(ErrorActionMode.STOP_ON_NFAILURES)
                            .withMaxToleratedFailures(13160998))),
            new StageSpec().withName("ohmcwsld")
                .withSpecification(mapOf())
                .withTasks(Arrays.asList(
                    new TaskSpec().withName("pwbralllibphbqz").withTargetId("zakakankjpdn").withSpecification(mapOf())))
                .withTaskOption(new TaskOption().withConcurrency(1242778940)
                    .withErrorAction(new ErrorAction().withMode(ErrorActionMode.STOP_ON_ANY_FAILURE)
                        .withMaxToleratedFailures(2052287318))),
            new StageSpec().withName("lmuoyxprimrsopte")
                .withSpecification(mapOf())
                .withTasks(
                    Arrays.asList(new TaskSpec().withName("islstv").withTargetId("ylw").withSpecification(mapOf()),
                        new TaskSpec().withName("zaum").withTargetId("oohgu").withSpecification(mapOf()),
                        new TaskSpec().withName("uzboyjathw").withTargetId("olbaemwmdx").withSpecification(mapOf()),
                        new TaskSpec().withName("bwjscjpahlxveab")
                            .withTargetId("xnmwmqtibxyijddt")
                            .withSpecification(mapOf())))
                .withTaskOption(new TaskOption().withConcurrency(747956494)
                    .withErrorAction(new ErrorAction().withMode(ErrorActionMode.STOP_ON_ANY_FAILURE)
                        .withMaxToleratedFailures(1119917570))),
            new StageSpec().withName("eukmr")
                .withSpecification(mapOf())
                .withTasks(Arrays
                    .asList(new TaskSpec().withName("pndzaapmudqmeq").withTargetId("gp").withSpecification(mapOf())))
                .withTaskOption(new TaskOption().withConcurrency(674250391)
                    .withErrorAction(new ErrorAction().withMode(ErrorActionMode.STOP_ON_ANY_FAILURE)
                        .withMaxToleratedFailures(2053314156)))))
            .withSpecification(mapOf());
        model = BinaryData.fromObject(model).toObject(WorkflowVersionProperties.class);
        Assertions.assertEquals("sheafid", model.stageSpec().get(0).name());
        Assertions.assertEquals("resmkssjhoiftxfk", model.stageSpec().get(0).tasks().get(0).name());
        Assertions.assertEquals("egprhptil", model.stageSpec().get(0).tasks().get(0).targetId());
        Assertions.assertEquals(2086555538, model.stageSpec().get(0).taskOption().concurrency());
        Assertions.assertEquals(ErrorActionMode.STOP_ON_NFAILURES,
            model.stageSpec().get(0).taskOption().errorAction().mode());
        Assertions.assertEquals(13160998, model.stageSpec().get(0).taskOption().errorAction().maxToleratedFailures());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
