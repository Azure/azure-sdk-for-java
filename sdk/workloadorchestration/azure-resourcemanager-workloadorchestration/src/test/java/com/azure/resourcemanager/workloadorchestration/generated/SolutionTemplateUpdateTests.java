// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateUpdate;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateUpdateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionTemplateUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionTemplateUpdate model = BinaryData.fromString(
            "{\"tags\":{\"rrvqa\":\"xccbdreaxhcex\",\"svfycxzbfv\":\"qkghtpwijnhy\",\"ronzmyhgfip\":\"owvrvmtgjqppyos\",\"waekrrjreafxtsgu\":\"sxkm\"},\"properties\":{\"description\":\"glikkxwslolb\",\"capabilities\":[\"uzlm\",\"felfktg\"],\"state\":\"active\",\"enableExternalValidation\":false}}")
            .toObject(SolutionTemplateUpdate.class);
        Assertions.assertEquals("xccbdreaxhcex", model.tags().get("rrvqa"));
        Assertions.assertEquals("glikkxwslolb", model.properties().description());
        Assertions.assertEquals("uzlm", model.properties().capabilities().get(0));
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().state());
        Assertions.assertFalse(model.properties().enableExternalValidation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionTemplateUpdate model = new SolutionTemplateUpdate()
            .withTags(mapOf("rrvqa", "xccbdreaxhcex", "svfycxzbfv", "qkghtpwijnhy", "ronzmyhgfip", "owvrvmtgjqppyos",
                "waekrrjreafxtsgu", "sxkm"))
            .withProperties(new SolutionTemplateUpdateProperties().withDescription("glikkxwslolb")
                .withCapabilities(Arrays.asList("uzlm", "felfktg"))
                .withState(ResourceState.ACTIVE)
                .withEnableExternalValidation(false));
        model = BinaryData.fromObject(model).toObject(SolutionTemplateUpdate.class);
        Assertions.assertEquals("xccbdreaxhcex", model.tags().get("rrvqa"));
        Assertions.assertEquals("glikkxwslolb", model.properties().description());
        Assertions.assertEquals("uzlm", model.properties().capabilities().get(0));
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().state());
        Assertions.assertFalse(model.properties().enableExternalValidation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
