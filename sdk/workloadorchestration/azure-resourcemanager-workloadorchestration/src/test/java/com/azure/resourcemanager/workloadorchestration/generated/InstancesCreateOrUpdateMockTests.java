// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ActiveState;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.Instance;
import com.azure.resourcemanager.workloadorchestration.models.InstanceProperties;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"solutionVersionId\":\"pefcpcz\",\"targetId\":\"hnuqndaizu\",\"activeState\":\"active\",\"reconciliationPolicy\":{\"state\":\"active\",\"interval\":\"ytus\"},\"solutionScope\":\"hmt\",\"status\":{\"lastModified\":\"2020-12-21T03:09:55Z\",\"deployed\":239385444,\"expectedRunningJobId\":397812436,\"runningJobId\":1816525505,\"status\":\"zwydwtth\",\"statusDetails\":\"kgkskjivbsshaj\",\"generation\":121782295,\"targetStatuses\":[{\"name\":\"expgeumilhwu\",\"status\":\"rdexyio\",\"componentStatuses\":[{},{},{}]},{\"name\":\"inbd\",\"status\":\"s\",\"componentStatuses\":[{},{},{},{}]},{\"name\":\"qrs\",\"status\":\"cbbprtugav\",\"componentStatuses\":[{},{},{}]},{\"name\":\"yksivmfogdrtbfc\",\"status\":\"rftsjcwjjxs\",\"componentStatuses\":[{},{}]}]},\"deploymentTimestampEpoch\":3638056724847854965,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"xkecifhocj\",\"type\":\"EdgeZone\"},\"eTag\":\"loozrvt\",\"id\":\"cmufunlcpxxv\",\"name\":\"ryeyngjgv\",\"type\":\"quv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Instance response = manager.instances()
            .define("ajfoxc")
            .withExistingSolution("x", "fciatxtjrr", "kmdskjhhxd")
            .withProperties(new InstanceProperties().withSolutionVersionId("cvslxlhuavkrmukm")
                .withTargetId("jmkxettcslojf")
                .withActiveState(ActiveState.ACTIVE)
                .withReconciliationPolicy(new ReconciliationPolicyProperties().withState(ReconciliationState.INACTIVE)
                    .withInterval("qtoqxjhqxcsq"))
                .withSolutionScope("kbtn"))
            .withExtendedLocation(
                new ExtendedLocation().withName("djxqeskoynuiylpc").withType(ExtendedLocationType.EDGE_ZONE))
            .create();

        Assertions.assertEquals("pefcpcz", response.properties().solutionVersionId());
        Assertions.assertEquals("hnuqndaizu", response.properties().targetId());
        Assertions.assertEquals(ActiveState.ACTIVE, response.properties().activeState());
        Assertions.assertEquals(ReconciliationState.ACTIVE, response.properties().reconciliationPolicy().state());
        Assertions.assertEquals("ytus", response.properties().reconciliationPolicy().interval());
        Assertions.assertEquals("hmt", response.properties().solutionScope());
        Assertions.assertEquals("xkecifhocj", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, response.extendedLocation().type());
    }
}
