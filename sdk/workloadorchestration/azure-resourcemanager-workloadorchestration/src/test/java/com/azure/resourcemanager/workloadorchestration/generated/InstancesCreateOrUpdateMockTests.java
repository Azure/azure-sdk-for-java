// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ActiveState;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.Instance;
import com.azure.resourcemanager.workloadorchestration.models.InstanceProperties;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"solutionVersionId\":\"opagttmvmmag\",\"targetId\":\"aqylkjztji\",\"activeState\":\"active\",\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"gmxitpfi\"},\"solutionScope\":\"cpdltkrlg\",\"status\":{\"lastModified\":\"2021-11-01T19:23:43Z\",\"deployed\":1780203290,\"expectedRunningJobId\":1405016434,\"runningJobId\":1161865517,\"status\":\"efz\",\"statusDetails\":\"mpheqdur\",\"generation\":2146493282,\"targetStatuses\":[{\"name\":\"fyoum\",\"status\":\"kyeclcdigpta\",\"componentStatuses\":[{}]},{\"name\":\"mqxuc\",\"status\":\"ijo\",\"componentStatuses\":[{},{},{}]}]},\"deploymentTimestampEpoch\":7203756374062354312,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"yzyzjd\",\"type\":\"EdgeZone\"},\"eTag\":\"jb\",\"id\":\"jeaoqaqbz\",\"name\":\"yh\",\"type\":\"w\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Instance response = manager.instances()
            .define("ltcoqc")
            .withExistingSolution("alwvskbu", "z", "caqt")
            .withProperties(new InstanceProperties().withSolutionVersionId("pdsxzakuejkm")
                .withTargetId("bizt")
                .withActiveState(ActiveState.ACTIVE)
                .withReconciliationPolicy(new ReconciliationPolicyProperties().withState(ReconciliationState.ACTIVE)
                    .withInterval("vovjufycsjmlbe"))
                .withSolutionScope("ej"))
            .withExtendedLocation(new ExtendedLocation().withName("gvxvatv").withType(ExtendedLocationType.EDGE_ZONE))
            .create();

        Assertions.assertEquals("opagttmvmmag", response.properties().solutionVersionId());
        Assertions.assertEquals("aqylkjztji", response.properties().targetId());
        Assertions.assertEquals(ActiveState.ACTIVE, response.properties().activeState());
        Assertions.assertEquals(ReconciliationState.INACTIVE, response.properties().reconciliationPolicy().state());
        Assertions.assertEquals("gmxitpfi", response.properties().reconciliationPolicy().interval());
        Assertions.assertEquals("cpdltkrlg", response.properties().solutionScope());
        Assertions.assertEquals("yzyzjd", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, response.extendedLocation().type());
    }
}
