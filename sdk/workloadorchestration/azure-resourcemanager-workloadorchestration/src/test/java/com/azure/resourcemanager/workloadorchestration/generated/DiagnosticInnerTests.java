// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.DiagnosticInner;
import com.azure.resourcemanager.workloadorchestration.models.DiagnosticProperties;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"uwfmduragegizvc\",\"type\":\"CustomLocation\"},\"eTag\":\"lisdjubggbq\",\"location\":\"kxkbsazgakgacyr\",\"tags\":{\"pv\":\"dmspof\",\"iofrzgbzjedmstk\":\"hryl\",\"nktwfansnvpdibmi\":\"nlvxbcuii\",\"qnyophzfyls\":\"ostbzbkiwb\"},\"id\":\"crpfbcunez\",\"name\":\"cez\",\"type\":\"lfwyfwlwxjwetn\"}")
            .toObject(DiagnosticInner.class);
        Assertions.assertEquals("kxkbsazgakgacyr", model.location());
        Assertions.assertEquals("dmspof", model.tags().get("pv"));
        Assertions.assertEquals("uwfmduragegizvc", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticInner model = new DiagnosticInner().withLocation("kxkbsazgakgacyr")
            .withTags(mapOf("pv", "dmspof", "iofrzgbzjedmstk", "hryl", "nktwfansnvpdibmi", "nlvxbcuii", "qnyophzfyls",
                "ostbzbkiwb"))
            .withProperties(new DiagnosticProperties())
            .withExtendedLocation(
                new ExtendedLocation().withName("uwfmduragegizvc").withType(ExtendedLocationType.CUSTOM_LOCATION));
        model = BinaryData.fromObject(model).toObject(DiagnosticInner.class);
        Assertions.assertEquals("kxkbsazgakgacyr", model.location());
        Assertions.assertEquals("dmspof", model.tags().get("pv"));
        Assertions.assertEquals("uwfmduragegizvc", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
