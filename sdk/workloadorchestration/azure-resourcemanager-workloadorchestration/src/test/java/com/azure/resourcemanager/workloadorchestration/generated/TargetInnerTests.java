// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.TargetInner;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.TargetProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TargetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"rbpbewtghfgblcg\",\"displayName\":\"xzvlvqhjkbegib\",\"contextId\":\"nmxiebwwaloayqc\",\"targetSpecification\":{},\"capabilities\":[\"tzjuzgwyzmhtxo\",\"gmtsavjcbpwxqpsr\"],\"hierarchyLevel\":\"nftguvriuhpr\",\"status\":{\"lastModified\":\"2021-05-29T19:52:45Z\",\"deployed\":628006410,\"expectedRunningJobId\":1392355180,\"runningJobId\":473809520,\"status\":\"iwwroyqbexrmc\",\"statusDetails\":\"bycnojvkn\",\"generation\":841332893,\"targetStatuses\":[{\"name\":\"zvahapjy\",\"status\":\"pvgqzcjrvxdjzlm\",\"componentStatuses\":[{},{},{}]},{\"name\":\"vu\",\"status\":\"hzovawjvzunlut\",\"componentStatuses\":[{}]},{\"name\":\"rnxipei\",\"status\":\"jzuaejxdultskzbb\",\"componentStatuses\":[{},{},{}]},{\"name\":\"mv\",\"status\":\"kgpwoz\",\"componentStatuses\":[{},{}]}]},\"solutionScope\":\"p\",\"state\":\"inactive\",\"provisioningState\":\"Succeeded\"},\"eTag\":\"dxluu\",\"extendedLocation\":{\"name\":\"ttouwaboekqvkel\",\"type\":\"EdgeZone\"},\"location\":\"vbxwyjsflhh\",\"tags\":{\"joya\":\"lnjixisxya\"},\"id\":\"cslyjpk\",\"name\":\"idzyexznelixhnr\",\"type\":\"tfolhbnx\"}")
            .toObject(TargetInner.class);
        Assertions.assertEquals("vbxwyjsflhh", model.location());
        Assertions.assertEquals("lnjixisxya", model.tags().get("joya"));
        Assertions.assertEquals("rbpbewtghfgblcg", model.properties().description());
        Assertions.assertEquals("xzvlvqhjkbegib", model.properties().displayName());
        Assertions.assertEquals("nmxiebwwaloayqc", model.properties().contextId());
        Assertions.assertEquals("tzjuzgwyzmhtxo", model.properties().capabilities().get(0));
        Assertions.assertEquals("nftguvriuhpr", model.properties().hierarchyLevel());
        Assertions.assertEquals("p", model.properties().solutionScope());
        Assertions.assertEquals(ResourceState.INACTIVE, model.properties().state());
        Assertions.assertEquals("ttouwaboekqvkel", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetInner model = new TargetInner().withLocation("vbxwyjsflhh")
            .withTags(mapOf("joya", "lnjixisxya"))
            .withProperties(new TargetProperties().withDescription("rbpbewtghfgblcg")
                .withDisplayName("xzvlvqhjkbegib")
                .withContextId("nmxiebwwaloayqc")
                .withTargetSpecification(mapOf())
                .withCapabilities(Arrays.asList("tzjuzgwyzmhtxo", "gmtsavjcbpwxqpsr"))
                .withHierarchyLevel("nftguvriuhpr")
                .withSolutionScope("p")
                .withState(ResourceState.INACTIVE))
            .withExtendedLocation(
                new ExtendedLocation().withName("ttouwaboekqvkel").withType(ExtendedLocationType.EDGE_ZONE));
        model = BinaryData.fromObject(model).toObject(TargetInner.class);
        Assertions.assertEquals("vbxwyjsflhh", model.location());
        Assertions.assertEquals("lnjixisxya", model.tags().get("joya"));
        Assertions.assertEquals("rbpbewtghfgblcg", model.properties().description());
        Assertions.assertEquals("xzvlvqhjkbegib", model.properties().displayName());
        Assertions.assertEquals("nmxiebwwaloayqc", model.properties().contextId());
        Assertions.assertEquals("tzjuzgwyzmhtxo", model.properties().capabilities().get(0));
        Assertions.assertEquals("nftguvriuhpr", model.properties().hierarchyLevel());
        Assertions.assertEquals("p", model.properties().solutionScope());
        Assertions.assertEquals(ResourceState.INACTIVE, model.properties().state());
        Assertions.assertEquals("ttouwaboekqvkel", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
