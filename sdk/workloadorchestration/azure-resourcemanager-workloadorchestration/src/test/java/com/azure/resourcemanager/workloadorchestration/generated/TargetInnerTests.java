// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.TargetInner;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.TargetProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TargetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"zz\",\"displayName\":\"bijhtxfvgxbf\",\"contextId\":\"mxnehmp\",\"targetSpecification\":{},\"capabilities\":[\"xgodebfqkkrbmp\",\"kgriwflzlfbx\"],\"hierarchyLevel\":\"puz\",\"status\":{\"lastModified\":\"2021-03-03T14:03:42Z\",\"deployed\":1593715454,\"expectedRunningJobId\":2125725117,\"runningJobId\":64383308,\"status\":\"gkbrpyyd\",\"statusDetails\":\"bnuqqkpik\",\"generation\":1684029730,\"targetStatuses\":[{\"name\":\"qagnbuyn\",\"status\":\"jggmebfsiarbu\",\"componentStatuses\":[{},{},{},{}]}]},\"solutionScope\":\"pnazzm\",\"state\":\"active\",\"provisioningState\":\"Canceled\"},\"eTag\":\"pxtt\",\"extendedLocation\":{\"name\":\"hrbnlankxmyskpbh\",\"type\":\"CustomLocation\"},\"location\":\"tkcxywnytnrsy\",\"tags\":{\"lhaaxdbabp\":\"idybyxczf\",\"fkts\":\"lwrq\"},\"id\":\"hsucoc\",\"name\":\"nyyazttbtwwrqpue\",\"type\":\"ckzywbiexzfeyue\"}")
            .toObject(TargetInner.class);
        Assertions.assertEquals("tkcxywnytnrsy", model.location());
        Assertions.assertEquals("idybyxczf", model.tags().get("lhaaxdbabp"));
        Assertions.assertEquals("zz", model.properties().description());
        Assertions.assertEquals("bijhtxfvgxbf", model.properties().displayName());
        Assertions.assertEquals("mxnehmp", model.properties().contextId());
        Assertions.assertEquals("xgodebfqkkrbmp", model.properties().capabilities().get(0));
        Assertions.assertEquals("puz", model.properties().hierarchyLevel());
        Assertions.assertEquals("pnazzm", model.properties().solutionScope());
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().state());
        Assertions.assertEquals("hrbnlankxmyskpbh", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetInner model = new TargetInner().withLocation("tkcxywnytnrsy")
            .withTags(mapOf("lhaaxdbabp", "idybyxczf", "fkts", "lwrq"))
            .withProperties(new TargetProperties().withDescription("zz")
                .withDisplayName("bijhtxfvgxbf")
                .withContextId("mxnehmp")
                .withTargetSpecification(mapOf())
                .withCapabilities(Arrays.asList("xgodebfqkkrbmp", "kgriwflzlfbx"))
                .withHierarchyLevel("puz")
                .withSolutionScope("pnazzm")
                .withState(ResourceState.ACTIVE))
            .withExtendedLocation(
                new ExtendedLocation().withName("hrbnlankxmyskpbh").withType(ExtendedLocationType.CUSTOM_LOCATION));
        model = BinaryData.fromObject(model).toObject(TargetInner.class);
        Assertions.assertEquals("tkcxywnytnrsy", model.location());
        Assertions.assertEquals("idybyxczf", model.tags().get("lhaaxdbabp"));
        Assertions.assertEquals("zz", model.properties().description());
        Assertions.assertEquals("bijhtxfvgxbf", model.properties().displayName());
        Assertions.assertEquals("mxnehmp", model.properties().contextId());
        Assertions.assertEquals("xgodebfqkkrbmp", model.properties().capabilities().get(0));
        Assertions.assertEquals("puz", model.properties().hierarchyLevel());
        Assertions.assertEquals("pnazzm", model.properties().solutionScope());
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().state());
        Assertions.assertEquals("hrbnlankxmyskpbh", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
