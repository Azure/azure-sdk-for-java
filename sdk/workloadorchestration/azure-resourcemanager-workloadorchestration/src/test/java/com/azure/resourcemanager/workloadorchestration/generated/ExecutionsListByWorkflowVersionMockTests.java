// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.Execution;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExecutionsListByWorkflowVersionMockTests {
    @Test
    public void testListByWorkflowVersion() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"workflowVersionId\":\"kiwrsiw\",\"specification\":{},\"status\":{\"updateTime\":\"2021-09-30T22:56:34Z\",\"status\":980511476,\"statusMessage\":\"rra\",\"stageHistory\":[{\"status\":742764824,\"statusMessage\":\"uehogdd\",\"stage\":\"bcbgydlqidywmhm\",\"nextstage\":\"yrilkfb\",\"errorMessage\":\"qqxvztpbn\",\"isActive\":\"inactive\",\"inputs\":{},\"outputs\":{}},{\"status\":222029368,\"statusMessage\":\"lswbnf\",\"stage\":\"epl\",\"nextstage\":\"qjn\",\"errorMessage\":\"zygleexahvm\",\"isActive\":\"active\",\"inputs\":{},\"outputs\":{}}]},\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"csjjzyvoaqajuve\",\"type\":\"CustomLocation\"},\"eTag\":\"tdmkrrbhmpful\",\"id\":\"efgybpmfbfununmp\",\"name\":\"krvfyifkdschl\",\"type\":\"vfictnkjjwgcwn\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Execution> response = manager.executions()
            .listByWorkflowVersion("yckzex", "xak", "kywymxgaabj", "dtfohfaog", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kiwrsiw", response.iterator().next().properties().workflowVersionId());
        Assertions.assertEquals("csjjzyvoaqajuve", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION,
            response.iterator().next().extendedLocation().type());
    }
}
