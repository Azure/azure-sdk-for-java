// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.TargetUpdateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TargetUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetUpdateProperties model = BinaryData.fromString(
            "{\"description\":\"pbttdum\",\"displayName\":\"p\",\"contextId\":\"ebmnzbtbhjpglk\",\"targetSpecification\":{},\"capabilities\":[\"neuelfphsdyhtoz\"],\"hierarchyLevel\":\"kd\",\"solutionScope\":\"wq\",\"state\":\"active\"}")
            .toObject(TargetUpdateProperties.class);
        Assertions.assertEquals("pbttdum", model.description());
        Assertions.assertEquals("p", model.displayName());
        Assertions.assertEquals("ebmnzbtbhjpglk", model.contextId());
        Assertions.assertEquals("neuelfphsdyhtoz", model.capabilities().get(0));
        Assertions.assertEquals("kd", model.hierarchyLevel());
        Assertions.assertEquals("wq", model.solutionScope());
        Assertions.assertEquals(ResourceState.ACTIVE, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetUpdateProperties model = new TargetUpdateProperties().withDescription("pbttdum")
            .withDisplayName("p")
            .withContextId("ebmnzbtbhjpglk")
            .withTargetSpecification(mapOf())
            .withCapabilities(Arrays.asList("neuelfphsdyhtoz"))
            .withHierarchyLevel("kd")
            .withSolutionScope("wq")
            .withState(ResourceState.ACTIVE);
        model = BinaryData.fromObject(model).toObject(TargetUpdateProperties.class);
        Assertions.assertEquals("pbttdum", model.description());
        Assertions.assertEquals("p", model.displayName());
        Assertions.assertEquals("ebmnzbtbhjpglk", model.contextId());
        Assertions.assertEquals("neuelfphsdyhtoz", model.capabilities().get(0));
        Assertions.assertEquals("kd", model.hierarchyLevel());
        Assertions.assertEquals("wq", model.solutionScope());
        Assertions.assertEquals(ResourceState.ACTIVE, model.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
