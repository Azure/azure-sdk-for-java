// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionInner;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateVersionWithUpdateTypeInner;
import com.azure.resourcemanager.workloadorchestration.models.OrchestratorType;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersion;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateVersionProperties;
import com.azure.resourcemanager.workloadorchestration.models.UpdateType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionTemplatesCreateVersionMockTests {
    @Test
    public void testCreateVersion() throws Exception {
        String responseStr
            = "{\"properties\":{\"configurations\":\"ehqpuvjmvqmt\",\"specification\":{},\"orchestratorType\":\"TO\",\"provisioningState\":\"Succeeded\"},\"eTag\":\"oejnndljdju\",\"id\":\"br\",\"name\":\"eqy\",\"type\":\"kceysfaqegplw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SolutionTemplateVersion response = manager.solutionTemplates()
            .createVersion("cgqyhleseyq", "hvyeldotj",
                new SolutionTemplateVersionWithUpdateTypeInner().withUpdateType(UpdateType.MINOR)
                    .withVersion("iswskuk")
                    .withSolutionTemplateVersion(new SolutionTemplateVersionInner()
                        .withProperties(new SolutionTemplateVersionProperties().withConfigurations("asbvw")
                            .withSpecification(mapOf())
                            .withOrchestratorType(OrchestratorType.TO))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ehqpuvjmvqmt", response.properties().configurations());
        Assertions.assertEquals(OrchestratorType.TO, response.properties().orchestratorType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
