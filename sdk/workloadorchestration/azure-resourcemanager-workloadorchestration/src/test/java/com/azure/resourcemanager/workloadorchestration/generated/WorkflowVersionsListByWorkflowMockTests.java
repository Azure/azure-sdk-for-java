// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.WorkflowVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowVersionsListByWorkflowMockTests {
    @Test
    public void testListByWorkflow() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"revision\":1995657676,\"configuration\":\"saetgzdgvpyig\",\"stageSpec\":[{\"name\":\"qqil\",\"specification\":{},\"tasks\":[{\"name\":\"wjoe\",\"specification\":{}},{\"name\":\"xngucaifpaurwwgi\",\"specification\":{}},{\"name\":\"fjqq\",\"specification\":{}}],\"taskOption\":{\"concurrency\":2083533019,\"errorAction\":{}}},{\"name\":\"xwxdcvjwc\",\"specification\":{},\"tasks\":[{\"name\":\"eciqchxr\",\"specification\":{}},{\"name\":\"uicdsiwdfmmpzhzz\",\"specification\":{}},{\"name\":\"vywrgyngydgr\",\"specification\":{}},{\"name\":\"x\",\"specification\":{}}],\"taskOption\":{\"concurrency\":84373044,\"errorAction\":{}}},{\"name\":\"qao\",\"specification\":{},\"tasks\":[{\"name\":\"clamgglvlmfejdoq\",\"specification\":{}},{\"name\":\"ykglt\",\"specification\":{}},{\"name\":\"gxhqfgqkayejs\",\"specification\":{}}],\"taskOption\":{\"concurrency\":1396514650,\"errorAction\":{}}},{\"name\":\"lwfgziiu\",\"specification\":{},\"tasks\":[{\"name\":\"eatlijjjrtvamcas\",\"specification\":{}},{\"name\":\"knxkvccxetyvkunm\",\"specification\":{}},{\"name\":\"gno\",\"specification\":{}},{\"name\":\"ikkgqo\",\"specification\":{}}],\"taskOption\":{\"concurrency\":1080786088,\"errorAction\":{}}}],\"reviewId\":\"dedvabbxbhme\",\"state\":\"Deploying\",\"specification\":{},\"provisioningState\":\"Deleting\"},\"extendedLocation\":{\"name\":\"fcfxzirzzihvwy\",\"type\":\"EdgeZone\"},\"eTag\":\"u\",\"id\":\"slczwciidjsllf\",\"name\":\"yvdmvx\",\"type\":\"dqacfrgnawbabgf\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<WorkflowVersion> response = manager.workflowVersions()
            .listByWorkflow("bhdvafjrqpjiy", "qjcrgaxwmzwdf", "bnrzorpdltbqctq", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qqil", response.iterator().next().properties().stageSpec().get(0).name());
        Assertions.assertEquals("wjoe",
            response.iterator().next().properties().stageSpec().get(0).tasks().get(0).name());
        Assertions.assertEquals(2083533019,
            response.iterator().next().properties().stageSpec().get(0).taskOption().concurrency());
        Assertions.assertEquals("fcfxzirzzihvwy", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, response.iterator().next().extendedLocation().type());
    }
}
