// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateInner;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionTemplateInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionTemplateInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"ivfxzsjabibsyst\",\"capabilities\":[\"fsdjpvkvp\",\"jxbkzbzkdvn\",\"jabudurgkakmo\"],\"latestVersion\":\"hjjklff\",\"state\":\"active\",\"enableExternalValidation\":false,\"provisioningState\":\"Succeeded\"},\"eTag\":\"zrfze\",\"location\":\"ebizikayuh\",\"tags\":{\"vtldgmfpgvmpip\":\"jbsybbqw\",\"x\":\"slthaq\"},\"id\":\"smwutwbdsrezpd\",\"name\":\"hneuyowqkd\",\"type\":\"ytisibir\"}")
            .toObject(SolutionTemplateInner.class);
        Assertions.assertEquals("ebizikayuh", model.location());
        Assertions.assertEquals("jbsybbqw", model.tags().get("vtldgmfpgvmpip"));
        Assertions.assertEquals("ivfxzsjabibsyst", model.properties().description());
        Assertions.assertEquals("fsdjpvkvp", model.properties().capabilities().get(0));
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().state());
        Assertions.assertFalse(model.properties().enableExternalValidation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionTemplateInner model = new SolutionTemplateInner().withLocation("ebizikayuh")
            .withTags(mapOf("vtldgmfpgvmpip", "jbsybbqw", "x", "slthaq"))
            .withProperties(new SolutionTemplateProperties().withDescription("ivfxzsjabibsyst")
                .withCapabilities(Arrays.asList("fsdjpvkvp", "jxbkzbzkdvn", "jabudurgkakmo"))
                .withState(ResourceState.ACTIVE)
                .withEnableExternalValidation(false));
        model = BinaryData.fromObject(model).toObject(SolutionTemplateInner.class);
        Assertions.assertEquals("ebizikayuh", model.location());
        Assertions.assertEquals("jbsybbqw", model.tags().get("vtldgmfpgvmpip"));
        Assertions.assertEquals("ivfxzsjabibsyst", model.properties().description());
        Assertions.assertEquals("fsdjpvkvp", model.properties().capabilities().get(0));
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().state());
        Assertions.assertFalse(model.properties().enableExternalValidation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
