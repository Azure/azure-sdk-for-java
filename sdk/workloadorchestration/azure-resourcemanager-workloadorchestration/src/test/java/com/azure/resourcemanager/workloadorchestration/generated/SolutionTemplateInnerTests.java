// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.SolutionTemplateInner;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.SolutionTemplateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionTemplateInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionTemplateInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"snjvcdwxlpqekftn\",\"capabilities\":[\"tjsyin\",\"wfqatmtd\"],\"latestVersion\":\"mdvy\",\"state\":\"inactive\",\"enableExternalValidation\":true,\"provisioningState\":\"Canceled\"},\"eTag\":\"ywkbirryuzhlhkjo\",\"location\":\"vqqaatjinrvgo\",\"tags\":{\"x\":\"fiibfggjioolvr\",\"kkgll\":\"v\",\"uhbxvvy\":\"wjygvjayvblmhvk\"},\"id\":\"gsopbyrqufegxu\",\"name\":\"wz\",\"type\":\"bnhlmc\"}")
            .toObject(SolutionTemplateInner.class);
        Assertions.assertEquals("vqqaatjinrvgo", model.location());
        Assertions.assertEquals("fiibfggjioolvr", model.tags().get("x"));
        Assertions.assertEquals("snjvcdwxlpqekftn", model.properties().description());
        Assertions.assertEquals("tjsyin", model.properties().capabilities().get(0));
        Assertions.assertEquals(ResourceState.INACTIVE, model.properties().state());
        Assertions.assertTrue(model.properties().enableExternalValidation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionTemplateInner model = new SolutionTemplateInner().withLocation("vqqaatjinrvgo")
            .withTags(mapOf("x", "fiibfggjioolvr", "kkgll", "v", "uhbxvvy", "wjygvjayvblmhvk"))
            .withProperties(new SolutionTemplateProperties().withDescription("snjvcdwxlpqekftn")
                .withCapabilities(Arrays.asList("tjsyin", "wfqatmtd"))
                .withState(ResourceState.INACTIVE)
                .withEnableExternalValidation(true));
        model = BinaryData.fromObject(model).toObject(SolutionTemplateInner.class);
        Assertions.assertEquals("vqqaatjinrvgo", model.location());
        Assertions.assertEquals("fiibfggjioolvr", model.tags().get("x"));
        Assertions.assertEquals("snjvcdwxlpqekftn", model.properties().description());
        Assertions.assertEquals("tjsyin", model.properties().capabilities().get(0));
        Assertions.assertEquals(ResourceState.INACTIVE, model.properties().state());
        Assertions.assertTrue(model.properties().enableExternalValidation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
