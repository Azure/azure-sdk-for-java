// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.fluent.models.WorkflowVersionInner;
import com.azure.resourcemanager.workloadorchestration.models.ErrorAction;
import com.azure.resourcemanager.workloadorchestration.models.ErrorActionMode;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocation;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.StageSpec;
import com.azure.resourcemanager.workloadorchestration.models.TaskOption;
import com.azure.resourcemanager.workloadorchestration.models.TaskSpec;
import com.azure.resourcemanager.workloadorchestration.models.WorkflowVersionProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkflowVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkflowVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"revision\":318308535,\"configuration\":\"iglaecx\",\"stageSpec\":[{\"name\":\"t\",\"specification\":{},\"tasks\":[{\"name\":\"vzm\",\"targetId\":\"t\",\"specification\":{}}],\"taskOption\":{\"concurrency\":60135256,\"errorAction\":{\"mode\":\"silentlyContinue\",\"maxToleratedFailures\":1646739085}}},{\"name\":\"clnpkci\",\"specification\":{},\"tasks\":[{\"name\":\"ykhyawfvjlboxqvk\",\"targetId\":\"mxho\",\"specification\":{}},{\"name\":\"ynhdwdigum\",\"targetId\":\"raauzzpt\",\"specification\":{}}],\"taskOption\":{\"concurrency\":2034990044,\"errorAction\":{\"mode\":\"silentlyContinue\",\"maxToleratedFailures\":1254202777}}},{\"name\":\"wwvaiqyuvvfonk\",\"specification\":{},\"tasks\":[{\"name\":\"ikvylauya\",\"targetId\":\"uwmncs\",\"specification\":{}}],\"taskOption\":{\"concurrency\":2120109491,\"errorAction\":{\"mode\":\"stopOnAnyFailure\",\"maxToleratedFailures\":263453714}}}],\"reviewId\":\"krsgsgb\",\"state\":\"Failed\",\"specification\":{},\"provisioningState\":\"InProgress\"},\"extendedLocation\":{\"name\":\"dgkynscliqhzvhxn\",\"type\":\"EdgeZone\"},\"eTag\":\"tkubotppn\",\"id\":\"xz\",\"name\":\"hihfrbbcevqagtlt\",\"type\":\"hlfkqojpy\"}")
            .toObject(WorkflowVersionInner.class);
        Assertions.assertEquals("t", model.properties().stageSpec().get(0).name());
        Assertions.assertEquals("vzm", model.properties().stageSpec().get(0).tasks().get(0).name());
        Assertions.assertEquals("t", model.properties().stageSpec().get(0).tasks().get(0).targetId());
        Assertions.assertEquals(60135256, model.properties().stageSpec().get(0).taskOption().concurrency());
        Assertions.assertEquals(ErrorActionMode.SILENTLY_CONTINUE,
            model.properties().stageSpec().get(0).taskOption().errorAction().mode());
        Assertions.assertEquals(1646739085,
            model.properties().stageSpec().get(0).taskOption().errorAction().maxToleratedFailures());
        Assertions.assertEquals("dgkynscliqhzvhxn", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkflowVersionInner model = new WorkflowVersionInner()
            .withProperties(new WorkflowVersionProperties().withStageSpec(Arrays.asList(
                new StageSpec().withName("t")
                    .withSpecification(mapOf())
                    .withTasks(
                        Arrays.asList(new TaskSpec().withName("vzm").withTargetId("t").withSpecification(mapOf())))
                    .withTaskOption(new TaskOption().withConcurrency(60135256)
                        .withErrorAction(new ErrorAction().withMode(ErrorActionMode.SILENTLY_CONTINUE)
                            .withMaxToleratedFailures(1646739085))),
                new StageSpec().withName("clnpkci")
                    .withSpecification(mapOf())
                    .withTasks(Arrays.asList(
                        new TaskSpec().withName("ykhyawfvjlboxqvk").withTargetId("mxho").withSpecification(mapOf()),
                        new TaskSpec().withName("ynhdwdigum").withTargetId("raauzzpt").withSpecification(mapOf())))
                    .withTaskOption(new TaskOption().withConcurrency(2034990044)
                        .withErrorAction(new ErrorAction().withMode(ErrorActionMode.SILENTLY_CONTINUE)
                            .withMaxToleratedFailures(1254202777))),
                new StageSpec().withName("wwvaiqyuvvfonk")
                    .withSpecification(mapOf())
                    .withTasks(Arrays
                        .asList(new TaskSpec().withName("ikvylauya").withTargetId("uwmncs").withSpecification(mapOf())))
                    .withTaskOption(new TaskOption().withConcurrency(2120109491)
                        .withErrorAction(new ErrorAction().withMode(ErrorActionMode.STOP_ON_ANY_FAILURE)
                            .withMaxToleratedFailures(263453714)))))
                .withSpecification(mapOf()))
            .withExtendedLocation(
                new ExtendedLocation().withName("dgkynscliqhzvhxn").withType(ExtendedLocationType.EDGE_ZONE));
        model = BinaryData.fromObject(model).toObject(WorkflowVersionInner.class);
        Assertions.assertEquals("t", model.properties().stageSpec().get(0).name());
        Assertions.assertEquals("vzm", model.properties().stageSpec().get(0).tasks().get(0).name());
        Assertions.assertEquals("t", model.properties().stageSpec().get(0).tasks().get(0).targetId());
        Assertions.assertEquals(60135256, model.properties().stageSpec().get(0).taskOption().concurrency());
        Assertions.assertEquals(ErrorActionMode.SILENTLY_CONTINUE,
            model.properties().stageSpec().get(0).taskOption().errorAction().mode());
        Assertions.assertEquals(1646739085,
            model.properties().stageSpec().get(0).taskOption().errorAction().maxToleratedFailures());
        Assertions.assertEquals("dgkynscliqhzvhxn", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
