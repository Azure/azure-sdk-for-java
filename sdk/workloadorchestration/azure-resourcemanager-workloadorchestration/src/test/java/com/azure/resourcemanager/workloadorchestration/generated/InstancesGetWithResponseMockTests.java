// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ActiveState;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.Instance;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"solutionVersionId\":\"s\",\"targetId\":\"grbjbxsjybvitvqk\",\"activeState\":\"active\",\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"umtggmuwdchozfn\"},\"solutionScope\":\"exlvxnoakiz\",\"status\":{\"lastModified\":\"2021-09-09T07:48:02Z\",\"deployed\":1220529720,\"expectedRunningJobId\":106818765,\"runningJobId\":1377558622,\"status\":\"wiguyxlyk\",\"statusDetails\":\"hvxzcwxhmp\",\"generation\":338411027,\"targetStatuses\":[{\"name\":\"xaonwivkcqh\",\"status\":\"hxknlccrmmkyupi\",\"componentStatuses\":[{},{},{},{}]}]},\"deploymentTimestampEpoch\":7739164189837902113,\"provisioningState\":\"Deleting\"},\"extendedLocation\":{\"name\":\"kfq\",\"type\":\"EdgeZone\"},\"eTag\":\"em\",\"id\":\"ldudxjascowv\",\"name\":\"djkpdxph\",\"type\":\"kk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Instance response = manager.instances()
            .getWithResponse("wrso", "pl", "dbmairrhvhfnr", "cwnpqigtuujwouhd", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("s", response.properties().solutionVersionId());
        Assertions.assertEquals("grbjbxsjybvitvqk", response.properties().targetId());
        Assertions.assertEquals(ActiveState.ACTIVE, response.properties().activeState());
        Assertions.assertEquals(ReconciliationState.INACTIVE, response.properties().reconciliationPolicy().state());
        Assertions.assertEquals("umtggmuwdchozfn", response.properties().reconciliationPolicy().interval());
        Assertions.assertEquals("exlvxnoakiz", response.properties().solutionScope());
        Assertions.assertEquals("kfq", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, response.extendedLocation().type());
    }
}
