// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ActiveState;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.Instance;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"solutionVersionId\":\"ddacbcbgydlqidy\",\"targetId\":\"mhmpty\",\"activeState\":\"inactive\",\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"bnrqq\"},\"solutionScope\":\"ztpb\",\"status\":{\"lastModified\":\"2021-08-20T03:01:03Z\",\"deployed\":602199119,\"expectedRunningJobId\":462746510,\"runningJobId\":222029368,\"status\":\"lswbnf\",\"statusDetails\":\"epl\",\"generation\":571315048,\"targetStatuses\":[{\"name\":\"f\",\"status\":\"gl\",\"componentStatuses\":[{}]}]},\"deploymentTimestampEpoch\":7089584992073086055,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"hsbrcary\",\"type\":\"CustomLocation\"},\"eTag\":\"j\",\"id\":\"voaqajuvehzptdmk\",\"name\":\"rbhmpfulubef\",\"type\":\"ybpmf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Instance response
            = manager.instances().getWithResponse("rra", "eek", "s", "eh", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("ddacbcbgydlqidy", response.properties().solutionVersionId());
        Assertions.assertEquals("mhmpty", response.properties().targetId());
        Assertions.assertEquals(ActiveState.INACTIVE, response.properties().activeState());
        Assertions.assertEquals(ReconciliationState.INACTIVE, response.properties().reconciliationPolicy().state());
        Assertions.assertEquals("bnrqq", response.properties().reconciliationPolicy().interval());
        Assertions.assertEquals("ztpb", response.properties().solutionScope());
        Assertions.assertEquals("hsbrcary", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }
}
