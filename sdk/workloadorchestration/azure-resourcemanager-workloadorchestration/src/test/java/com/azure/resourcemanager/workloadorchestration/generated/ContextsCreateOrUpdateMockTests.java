// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.Capability;
import com.azure.resourcemanager.workloadorchestration.models.ContextModel;
import com.azure.resourcemanager.workloadorchestration.models.ContextProperties;
import com.azure.resourcemanager.workloadorchestration.models.Hierarchy;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ContextsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"capabilities\":[{\"name\":\"rgdtpeqnacyheqw\",\"description\":\"pqqncju\",\"state\":\"active\"},{\"name\":\"jozfym\",\"description\":\"wmbupyvqyvliq\",\"state\":\"inactive\"},{\"name\":\"sejb\",\"description\":\"vsi\",\"state\":\"active\"}],\"hierarchies\":[{\"name\":\"whddzydisnuepyw\",\"description\":\"jlnldpxottdiiaoc\"},{\"name\":\"ibz\",\"description\":\"ihweeb\"},{\"name\":\"ph\",\"description\":\"yv\"},{\"name\":\"jw\",\"description\":\"w\"}],\"provisioningState\":\"Succeeded\"},\"location\":\"atjhdhzybspijhf\",\"tags\":{\"rfmzhwilz\":\"dkkagvwukhsusmm\",\"lrcxivcbkut\":\"hnijmriprlkdneyt\",\"ynbpvzlqywauy\":\"umltwjflu\"},\"id\":\"njc\",\"name\":\"hmocgjshg\",\"type\":\"u\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ContextModel response = manager.contexts()
            .define("obektmbozo")
            .withRegion("xweyslandkdcdjh")
            .withExistingResourceGroup("hxjxjoezlqxrkdkn")
            .withTags(mapOf("xsotir", "ghcgawnrrnqu", "xstcyilbvzm", "imseobf", "okjxebjvb", "xcjzlquze", "v",
                "inzabwmvoglj"))
            .withProperties(new ContextProperties().withCapabilities(Arrays.asList(
                new Capability().withName("amicbigwcdgz").withDescription("eznuxkeu").withState(ResourceState.INACTIVE),
                new Capability().withName("aabmdlqjb").withDescription("dp").withState(ResourceState.INACTIVE)))
                .withHierarchies(Arrays.asList(new Hierarchy().withName("hupmomihzbd").withDescription("p"),
                    new Hierarchy().withName("pkcdpreyxely").withDescription("cghf"),
                    new Hierarchy().withName("rufssjyg").withDescription("sfxrkbhammgm"),
                    new Hierarchy().withName("fm").withDescription("fgvqcpdw"))))
            .create();

        Assertions.assertEquals("atjhdhzybspijhf", response.location());
        Assertions.assertEquals("dkkagvwukhsusmm", response.tags().get("rfmzhwilz"));
        Assertions.assertEquals("rgdtpeqnacyheqw", response.properties().capabilities().get(0).name());
        Assertions.assertEquals("pqqncju", response.properties().capabilities().get(0).description());
        Assertions.assertEquals(ResourceState.ACTIVE, response.properties().capabilities().get(0).state());
        Assertions.assertEquals("whddzydisnuepyw", response.properties().hierarchies().get(0).name());
        Assertions.assertEquals("jlnldpxottdiiaoc", response.properties().hierarchies().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
