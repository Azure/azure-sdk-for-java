// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadorchestration.WorkloadOrchestrationManager;
import com.azure.resourcemanager.workloadorchestration.models.ActiveState;
import com.azure.resourcemanager.workloadorchestration.models.ExtendedLocationType;
import com.azure.resourcemanager.workloadorchestration.models.Instance;
import com.azure.resourcemanager.workloadorchestration.models.ReconciliationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesListBySolutionMockTests {
    @Test
    public void testListBySolution() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"solutionVersionId\":\"luqw\",\"targetId\":\"ulsutrjbhxy\",\"activeState\":\"active\",\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"ezvqq\"},\"solutionScope\":\"drftbcvexreuquo\",\"status\":{\"lastModified\":\"2021-01-27T00:09:21Z\",\"deployed\":1013930183,\"expectedRunningJobId\":1432269012,\"runningJobId\":949120362,\"status\":\"gkhyxvrqtvbczsu\",\"statusDetails\":\"dgglmepjpfs\",\"generation\":557010764,\"targetStatuses\":[{\"name\":\"ngpszngafpg\",\"status\":\"kvec\",\"componentStatuses\":[{},{},{}]}]},\"deploymentTimestampEpoch\":2612565558576892207,\"provisioningState\":\"InProgress\"},\"extendedLocation\":{\"name\":\"yedmzrgj\",\"type\":\"EdgeZone\"},\"eTag\":\"nub\",\"id\":\"itpkpztrgdg\",\"name\":\"vcoqraswugyxpqi\",\"type\":\"we\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadOrchestrationManager manager = WorkloadOrchestrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Instance> response
            = manager.instances().listBySolution("nmgzvyfijdkzuqnw", "it", "uqoly", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("luqw", response.iterator().next().properties().solutionVersionId());
        Assertions.assertEquals("ulsutrjbhxy", response.iterator().next().properties().targetId());
        Assertions.assertEquals(ActiveState.ACTIVE, response.iterator().next().properties().activeState());
        Assertions.assertEquals(ReconciliationState.INACTIVE,
            response.iterator().next().properties().reconciliationPolicy().state());
        Assertions.assertEquals("ezvqq", response.iterator().next().properties().reconciliationPolicy().interval());
        Assertions.assertEquals("drftbcvexreuquo", response.iterator().next().properties().solutionScope());
        Assertions.assertEquals("yedmzrgj", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.EDGE_ZONE, response.iterator().next().extendedLocation().type());
    }
}
