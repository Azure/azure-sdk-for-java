// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadorchestration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadorchestration.models.ResourceState;
import com.azure.resourcemanager.workloadorchestration.models.TargetUpdate;
import com.azure.resourcemanager.workloadorchestration.models.TargetUpdateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TargetUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetUpdate model = BinaryData.fromString(
            "{\"tags\":{\"nsikvmkqzeqqkdl\":\"onz\",\"bdagxt\":\"fzxmhhvhgureodkw\",\"akbogqxndlkzgxh\":\"bqdxbx\"},\"properties\":{\"description\":\"plbpodxun\",\"displayName\":\"ebxmubyynt\",\"contextId\":\"rbqtkoie\",\"targetSpecification\":{},\"capabilities\":[\"gqrlltmuwla\"],\"hierarchyLevel\":\"zizxbmpgcj\",\"solutionScope\":\"u\",\"state\":\"active\"}}")
            .toObject(TargetUpdate.class);
        Assertions.assertEquals("onz", model.tags().get("nsikvmkqzeqqkdl"));
        Assertions.assertEquals("plbpodxun", model.properties().description());
        Assertions.assertEquals("ebxmubyynt", model.properties().displayName());
        Assertions.assertEquals("rbqtkoie", model.properties().contextId());
        Assertions.assertEquals("gqrlltmuwla", model.properties().capabilities().get(0));
        Assertions.assertEquals("zizxbmpgcj", model.properties().hierarchyLevel());
        Assertions.assertEquals("u", model.properties().solutionScope());
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetUpdate model = new TargetUpdate()
            .withTags(mapOf("nsikvmkqzeqqkdl", "onz", "bdagxt", "fzxmhhvhgureodkw", "akbogqxndlkzgxh", "bqdxbx"))
            .withProperties(new TargetUpdateProperties().withDescription("plbpodxun")
                .withDisplayName("ebxmubyynt")
                .withContextId("rbqtkoie")
                .withTargetSpecification(mapOf())
                .withCapabilities(Arrays.asList("gqrlltmuwla"))
                .withHierarchyLevel("zizxbmpgcj")
                .withSolutionScope("u")
                .withState(ResourceState.ACTIVE));
        model = BinaryData.fromObject(model).toObject(TargetUpdate.class);
        Assertions.assertEquals("onz", model.tags().get("nsikvmkqzeqqkdl"));
        Assertions.assertEquals("plbpodxun", model.properties().description());
        Assertions.assertEquals("ebxmubyynt", model.properties().displayName());
        Assertions.assertEquals("rbqtkoie", model.properties().contextId());
        Assertions.assertEquals("gqrlltmuwla", model.properties().capabilities().get(0));
        Assertions.assertEquals("zizxbmpgcj", model.properties().hierarchyLevel());
        Assertions.assertEquals("u", model.properties().solutionScope());
        Assertions.assertEquals(ResourceState.ACTIVE, model.properties().state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
