// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Onboarding information.
 */
@Fluent
public final class Onboarding implements JsonSerializable<Onboarding> {
    /*
     * Onboarding guide.
     */
    private String instructions;

    /*
     * The location of the development portal
     */
    private List<String> developerPortalUri;

    /**
     * Creates an instance of Onboarding class.
     */
    public Onboarding() {
    }

    /**
     * Get the instructions property: Onboarding guide.
     * 
     * @return the instructions value.
     */
    public String instructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: Onboarding guide.
     * 
     * @param instructions the instructions value to set.
     * @return the Onboarding object itself.
     */
    public Onboarding withInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the developerPortalUri property: The location of the development portal.
     * 
     * @return the developerPortalUri value.
     */
    public List<String> developerPortalUri() {
        return this.developerPortalUri;
    }

    /**
     * Set the developerPortalUri property: The location of the development portal.
     * 
     * @param developerPortalUri the developerPortalUri value to set.
     * @return the Onboarding object itself.
     */
    public Onboarding withDeveloperPortalUri(List<String> developerPortalUri) {
        this.developerPortalUri = developerPortalUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeArrayField("developerPortalUri", this.developerPortalUri,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Onboarding from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Onboarding if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Onboarding.
     */
    public static Onboarding fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Onboarding deserializedOnboarding = new Onboarding();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instructions".equals(fieldName)) {
                    deserializedOnboarding.instructions = reader.getString();
                } else if ("developerPortalUri".equals(fieldName)) {
                    List<String> developerPortalUri = reader.readArray(reader1 -> reader1.getString());
                    deserializedOnboarding.developerPortalUri = developerPortalUri;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnboarding;
        });
    }
}
