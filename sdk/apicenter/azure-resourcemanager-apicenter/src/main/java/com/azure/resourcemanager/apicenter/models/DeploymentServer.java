// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Server.
 */
@Fluent
public final class DeploymentServer implements JsonSerializable<DeploymentServer> {
    /*
     * Base runtime URLs for this deployment.
     */
    private List<String> runtimeUri;

    /**
     * Creates an instance of DeploymentServer class.
     */
    public DeploymentServer() {
    }

    /**
     * Get the runtimeUri property: Base runtime URLs for this deployment.
     * 
     * @return the runtimeUri value.
     */
    public List<String> runtimeUri() {
        return this.runtimeUri;
    }

    /**
     * Set the runtimeUri property: Base runtime URLs for this deployment.
     * 
     * @param runtimeUri the runtimeUri value to set.
     * @return the DeploymentServer object itself.
     */
    public DeploymentServer withRuntimeUri(List<String> runtimeUri) {
        this.runtimeUri = runtimeUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("runtimeUri", this.runtimeUri, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentServer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentServer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentServer.
     */
    public static DeploymentServer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentServer deserializedDeploymentServer = new DeploymentServer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runtimeUri".equals(fieldName)) {
                    List<String> runtimeUri = reader.readArray(reader1 -> reader1.getString());
                    deserializedDeploymentServer.runtimeUri = runtimeUri;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentServer;
        });
    }
}
