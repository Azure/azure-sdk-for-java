// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.apicenter.fluent.models.EnvironmentInner;
import com.azure.resourcemanager.apicenter.models.Environment;
import com.azure.resourcemanager.apicenter.models.EnvironmentProperties;

public final class EnvironmentImpl implements Environment, Environment.Definition, Environment.Update {
    private EnvironmentInner innerObject;

    private final com.azure.resourcemanager.apicenter.ApiCenterManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public EnvironmentProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public EnvironmentInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.apicenter.ApiCenterManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String serviceName;

    private String workspaceName;

    private String environmentName;

    public EnvironmentImpl withExistingWorkspace(String resourceGroupName, String serviceName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.serviceName = serviceName;
        this.workspaceName = workspaceName;
        return this;
    }

    public Environment create() {
        this.innerObject
            = serviceManager.serviceClient().getEnvironments().createOrUpdateWithResponse(resourceGroupName,
                serviceName, workspaceName, environmentName, this.innerModel(), Context.NONE).getValue();
        return this;
    }

    public Environment create(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getEnvironments().createOrUpdateWithResponse(resourceGroupName,
                serviceName, workspaceName, environmentName, this.innerModel(), context).getValue();
        return this;
    }

    EnvironmentImpl(String name, com.azure.resourcemanager.apicenter.ApiCenterManager serviceManager) {
        this.innerObject = new EnvironmentInner();
        this.serviceManager = serviceManager;
        this.environmentName = name;
    }

    public EnvironmentImpl update() {
        return this;
    }

    public Environment apply() {
        this.innerObject
            = serviceManager.serviceClient().getEnvironments().createOrUpdateWithResponse(resourceGroupName,
                serviceName, workspaceName, environmentName, this.innerModel(), Context.NONE).getValue();
        return this;
    }

    public Environment apply(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getEnvironments().createOrUpdateWithResponse(resourceGroupName,
                serviceName, workspaceName, environmentName, this.innerModel(), context).getValue();
        return this;
    }

    EnvironmentImpl(EnvironmentInner innerObject, com.azure.resourcemanager.apicenter.ApiCenterManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.serviceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "services");
        this.workspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.environmentName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "environments");
    }

    public Environment refresh() {
        this.innerObject = serviceManager.serviceClient().getEnvironments()
            .getWithResponse(resourceGroupName, serviceName, workspaceName, environmentName, Context.NONE).getValue();
        return this;
    }

    public Environment refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getEnvironments()
            .getWithResponse(resourceGroupName, serviceName, workspaceName, environmentName, context).getValue();
        return this;
    }

    public EnvironmentImpl withProperties(EnvironmentProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
