// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Additional, external documentation for the API.
 */
@Fluent
public final class ExternalDocumentation implements JsonSerializable<ExternalDocumentation> {
    /*
     * Title of the documentation.
     */
    private String title;

    /*
     * Description of the documentation.
     */
    private String description;

    /*
     * URL pointing to the documentation.
     */
    private String url;

    /**
     * Creates an instance of ExternalDocumentation class.
     */
    public ExternalDocumentation() {
    }

    /**
     * Get the title property: Title of the documentation.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title of the documentation.
     * 
     * @param title the title value to set.
     * @return the ExternalDocumentation object itself.
     */
    public ExternalDocumentation withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Description of the documentation.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the documentation.
     * 
     * @param description the description value to set.
     * @return the ExternalDocumentation object itself.
     */
    public ExternalDocumentation withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the url property: URL pointing to the documentation.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: URL pointing to the documentation.
     * 
     * @param url the url value to set.
     * @return the ExternalDocumentation object itself.
     */
    public ExternalDocumentation withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (url() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property url in model ExternalDocumentation"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExternalDocumentation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExternalDocumentation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExternalDocumentation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExternalDocumentation.
     */
    public static ExternalDocumentation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExternalDocumentation deserializedExternalDocumentation = new ExternalDocumentation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedExternalDocumentation.url = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedExternalDocumentation.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedExternalDocumentation.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExternalDocumentation;
        });
    }
}
