// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Environment properties entity.
 */
@Fluent
public final class EnvironmentProperties implements JsonSerializable<EnvironmentProperties> {
    /*
     * Environment title.
     */
    private String title;

    /*
     * The environment description.
     */
    private String description;

    /*
     * Environment kind.
     */
    private EnvironmentKind kind;

    /*
     * Server information of the environment.
     */
    private EnvironmentServer server;

    /*
     * Environment onboarding information
     */
    private Onboarding onboarding;

    /*
     * The custom metadata defined for API catalog entities.
     */
    private Object customProperties;

    /**
     * Creates an instance of EnvironmentProperties class.
     */
    public EnvironmentProperties() {
    }

    /**
     * Get the title property: Environment title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Environment title.
     * 
     * @param title the title value to set.
     * @return the EnvironmentProperties object itself.
     */
    public EnvironmentProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: The environment description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The environment description.
     * 
     * @param description the description value to set.
     * @return the EnvironmentProperties object itself.
     */
    public EnvironmentProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the kind property: Environment kind.
     * 
     * @return the kind value.
     */
    public EnvironmentKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Environment kind.
     * 
     * @param kind the kind value to set.
     * @return the EnvironmentProperties object itself.
     */
    public EnvironmentProperties withKind(EnvironmentKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the server property: Server information of the environment.
     * 
     * @return the server value.
     */
    public EnvironmentServer server() {
        return this.server;
    }

    /**
     * Set the server property: Server information of the environment.
     * 
     * @param server the server value to set.
     * @return the EnvironmentProperties object itself.
     */
    public EnvironmentProperties withServer(EnvironmentServer server) {
        this.server = server;
        return this;
    }

    /**
     * Get the onboarding property: Environment onboarding information.
     * 
     * @return the onboarding value.
     */
    public Onboarding onboarding() {
        return this.onboarding;
    }

    /**
     * Set the onboarding property: Environment onboarding information.
     * 
     * @param onboarding the onboarding value to set.
     * @return the EnvironmentProperties object itself.
     */
    public EnvironmentProperties withOnboarding(Onboarding onboarding) {
        this.onboarding = onboarding;
        return this;
    }

    /**
     * Get the customProperties property: The custom metadata defined for API catalog entities.
     * 
     * @return the customProperties value.
     */
    public Object customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: The custom metadata defined for API catalog entities.
     * 
     * @param customProperties the customProperties value to set.
     * @return the EnvironmentProperties object itself.
     */
    public EnvironmentProperties withCustomProperties(Object customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (title() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property title in model EnvironmentProperties"));
        }
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kind in model EnvironmentProperties"));
        }
        if (server() != null) {
            server().validate();
        }
        if (onboarding() != null) {
            onboarding().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EnvironmentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("server", this.server);
        jsonWriter.writeJsonField("onboarding", this.onboarding);
        jsonWriter.writeUntypedField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvironmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvironmentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnvironmentProperties.
     */
    public static EnvironmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnvironmentProperties deserializedEnvironmentProperties = new EnvironmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedEnvironmentProperties.title = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedEnvironmentProperties.kind = EnvironmentKind.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedEnvironmentProperties.description = reader.getString();
                } else if ("server".equals(fieldName)) {
                    deserializedEnvironmentProperties.server = EnvironmentServer.fromJson(reader);
                } else if ("onboarding".equals(fieldName)) {
                    deserializedEnvironmentProperties.onboarding = Onboarding.fromJson(reader);
                } else if ("customProperties".equals(fieldName)) {
                    deserializedEnvironmentProperties.customProperties = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnvironmentProperties;
        });
    }
}
