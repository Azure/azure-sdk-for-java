// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API version properties entity.
 */
@Fluent
public final class ApiVersionProperties implements JsonSerializable<ApiVersionProperties> {
    /*
     * API version title.
     */
    private String title;

    /*
     * Current lifecycle stage of the API.
     */
    private LifecycleStage lifecycleStage;

    /**
     * Creates an instance of ApiVersionProperties class.
     */
    public ApiVersionProperties() {
    }

    /**
     * Get the title property: API version title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: API version title.
     * 
     * @param title the title value to set.
     * @return the ApiVersionProperties object itself.
     */
    public ApiVersionProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the lifecycleStage property: Current lifecycle stage of the API.
     * 
     * @return the lifecycleStage value.
     */
    public LifecycleStage lifecycleStage() {
        return this.lifecycleStage;
    }

    /**
     * Set the lifecycleStage property: Current lifecycle stage of the API.
     * 
     * @param lifecycleStage the lifecycleStage value to set.
     * @return the ApiVersionProperties object itself.
     */
    public ApiVersionProperties withLifecycleStage(LifecycleStage lifecycleStage) {
        this.lifecycleStage = lifecycleStage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (title() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property title in model ApiVersionProperties"));
        }
        if (lifecycleStage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property lifecycleStage in model ApiVersionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApiVersionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("lifecycleStage",
            this.lifecycleStage == null ? null : this.lifecycleStage.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiVersionProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApiVersionProperties.
     */
    public static ApiVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiVersionProperties deserializedApiVersionProperties = new ApiVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedApiVersionProperties.title = reader.getString();
                } else if ("lifecycleStage".equals(fieldName)) {
                    deserializedApiVersionProperties.lifecycleStage = LifecycleStage.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiVersionProperties;
        });
    }
}
