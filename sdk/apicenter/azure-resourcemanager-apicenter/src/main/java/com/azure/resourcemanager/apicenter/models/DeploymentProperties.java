// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API deployment entity properties.
 */
@Fluent
public final class DeploymentProperties implements JsonSerializable<DeploymentProperties> {
    /*
     * API deployment title
     */
    private String title;

    /*
     * Description of the deployment.
     */
    private String description;

    /*
     * API center-scoped environment resource ID.
     */
    private String environmentId;

    /*
     * API center-scoped definition resource ID.
     */
    private String definitionId;

    /*
     * State of API deployment.
     */
    private DeploymentState state;

    /*
     * The deployment server
     */
    private DeploymentServer server;

    /*
     * The custom metadata defined for API catalog entities.
     */
    private Object customProperties;

    /**
     * Creates an instance of DeploymentProperties class.
     */
    public DeploymentProperties() {
    }

    /**
     * Get the title property: API deployment title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: API deployment title.
     * 
     * @param title the title value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Description of the deployment.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the deployment.
     * 
     * @param description the description value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the environmentId property: API center-scoped environment resource ID.
     * 
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: API center-scoped environment resource ID.
     * 
     * @param environmentId the environmentId value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the definitionId property: API center-scoped definition resource ID.
     * 
     * @return the definitionId value.
     */
    public String definitionId() {
        return this.definitionId;
    }

    /**
     * Set the definitionId property: API center-scoped definition resource ID.
     * 
     * @param definitionId the definitionId value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withDefinitionId(String definitionId) {
        this.definitionId = definitionId;
        return this;
    }

    /**
     * Get the state property: State of API deployment.
     * 
     * @return the state value.
     */
    public DeploymentState state() {
        return this.state;
    }

    /**
     * Set the state property: State of API deployment.
     * 
     * @param state the state value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withState(DeploymentState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the server property: The deployment server.
     * 
     * @return the server value.
     */
    public DeploymentServer server() {
        return this.server;
    }

    /**
     * Set the server property: The deployment server.
     * 
     * @param server the server value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withServer(DeploymentServer server) {
        this.server = server;
        return this;
    }

    /**
     * Get the customProperties property: The custom metadata defined for API catalog entities.
     * 
     * @return the customProperties value.
     */
    public Object customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: The custom metadata defined for API catalog entities.
     * 
     * @param customProperties the customProperties value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withCustomProperties(Object customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (server() != null) {
            server().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("environmentId", this.environmentId);
        jsonWriter.writeStringField("definitionId", this.definitionId);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeJsonField("server", this.server);
        jsonWriter.writeUntypedField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentProperties.
     */
    public static DeploymentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentProperties deserializedDeploymentProperties = new DeploymentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedDeploymentProperties.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDeploymentProperties.description = reader.getString();
                } else if ("environmentId".equals(fieldName)) {
                    deserializedDeploymentProperties.environmentId = reader.getString();
                } else if ("definitionId".equals(fieldName)) {
                    deserializedDeploymentProperties.definitionId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedDeploymentProperties.state = DeploymentState.fromString(reader.getString());
                } else if ("server".equals(fieldName)) {
                    deserializedDeploymentProperties.server = DeploymentServer.fromJson(reader);
                } else if ("customProperties".equals(fieldName)) {
                    deserializedDeploymentProperties.customProperties = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentProperties;
        });
    }
}
