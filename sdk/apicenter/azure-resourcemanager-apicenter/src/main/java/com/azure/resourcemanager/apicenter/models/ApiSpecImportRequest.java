// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The API specification source entity properties.
 */
@Fluent
public final class ApiSpecImportRequest implements JsonSerializable<ApiSpecImportRequest> {
    /*
     * Value of the API specification source.
     */
    private String value;

    /*
     * Format of the API specification source.
     */
    private ApiSpecImportSourceFormat format;

    /*
     * API specification details.
     */
    private ApiSpecImportRequestSpecification specification;

    /**
     * Creates an instance of ApiSpecImportRequest class.
     */
    public ApiSpecImportRequest() {
    }

    /**
     * Get the value property: Value of the API specification source.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: Value of the API specification source.
     * 
     * @param value the value value to set.
     * @return the ApiSpecImportRequest object itself.
     */
    public ApiSpecImportRequest withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the format property: Format of the API specification source.
     * 
     * @return the format value.
     */
    public ApiSpecImportSourceFormat format() {
        return this.format;
    }

    /**
     * Set the format property: Format of the API specification source.
     * 
     * @param format the format value to set.
     * @return the ApiSpecImportRequest object itself.
     */
    public ApiSpecImportRequest withFormat(ApiSpecImportSourceFormat format) {
        this.format = format;
        return this;
    }

    /**
     * Get the specification property: API specification details.
     * 
     * @return the specification value.
     */
    public ApiSpecImportRequestSpecification specification() {
        return this.specification;
    }

    /**
     * Set the specification property: API specification details.
     * 
     * @param specification the specification value to set.
     * @return the ApiSpecImportRequest object itself.
     */
    public ApiSpecImportRequest withSpecification(ApiSpecImportRequestSpecification specification) {
        this.specification = specification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (specification() != null) {
            specification().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("format", this.format == null ? null : this.format.toString());
        jsonWriter.writeJsonField("specification", this.specification);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiSpecImportRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiSpecImportRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiSpecImportRequest.
     */
    public static ApiSpecImportRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiSpecImportRequest deserializedApiSpecImportRequest = new ApiSpecImportRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedApiSpecImportRequest.value = reader.getString();
                } else if ("format".equals(fieldName)) {
                    deserializedApiSpecImportRequest.format = ApiSpecImportSourceFormat.fromString(reader.getString());
                } else if ("specification".equals(fieldName)) {
                    deserializedApiSpecImportRequest.specification = ApiSpecImportRequestSpecification.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiSpecImportRequest;
        });
    }
}
