// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Metadata schema properties.
 */
@Fluent
public final class MetadataSchemaProperties {
    /*
     * The schema defining the type.
     */
    @JsonProperty(value = "schema", required = true)
    private String schema;

    /*
     * The assignees
     */
    @JsonProperty(value = "assignedTo")
    private List<MetadataAssignment> assignedTo;

    /**
     * Creates an instance of MetadataSchemaProperties class.
     */
    public MetadataSchemaProperties() {
    }

    /**
     * Get the schema property: The schema defining the type.
     * 
     * @return the schema value.
     */
    public String schema() {
        return this.schema;
    }

    /**
     * Set the schema property: The schema defining the type.
     * 
     * @param schema the schema value to set.
     * @return the MetadataSchemaProperties object itself.
     */
    public MetadataSchemaProperties withSchema(String schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the assignedTo property: The assignees.
     * 
     * @return the assignedTo value.
     */
    public List<MetadataAssignment> assignedTo() {
        return this.assignedTo;
    }

    /**
     * Set the assignedTo property: The assignees.
     * 
     * @param assignedTo the assignedTo value to set.
     * @return the MetadataSchemaProperties object itself.
     */
    public MetadataSchemaProperties withAssignedTo(List<MetadataAssignment> assignedTo) {
        this.assignedTo = assignedTo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (schema() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property schema in model MetadataSchemaProperties"));
        }
        if (assignedTo() != null) {
            assignedTo().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MetadataSchemaProperties.class);
}
