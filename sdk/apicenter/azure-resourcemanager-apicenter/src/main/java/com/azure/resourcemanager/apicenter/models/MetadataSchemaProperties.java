// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Metadata schema properties.
 */
@Fluent
public final class MetadataSchemaProperties implements JsonSerializable<MetadataSchemaProperties> {
    /*
     * The schema defining the type.
     */
    private String schema;

    /*
     * The assignees
     */
    private List<MetadataAssignment> assignedTo;

    /**
     * Creates an instance of MetadataSchemaProperties class.
     */
    public MetadataSchemaProperties() {
    }

    /**
     * Get the schema property: The schema defining the type.
     * 
     * @return the schema value.
     */
    public String schema() {
        return this.schema;
    }

    /**
     * Set the schema property: The schema defining the type.
     * 
     * @param schema the schema value to set.
     * @return the MetadataSchemaProperties object itself.
     */
    public MetadataSchemaProperties withSchema(String schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the assignedTo property: The assignees.
     * 
     * @return the assignedTo value.
     */
    public List<MetadataAssignment> assignedTo() {
        return this.assignedTo;
    }

    /**
     * Set the assignedTo property: The assignees.
     * 
     * @param assignedTo the assignedTo value to set.
     * @return the MetadataSchemaProperties object itself.
     */
    public MetadataSchemaProperties withAssignedTo(List<MetadataAssignment> assignedTo) {
        this.assignedTo = assignedTo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (schema() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property schema in model MetadataSchemaProperties"));
        }
        if (assignedTo() != null) {
            assignedTo().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MetadataSchemaProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("schema", this.schema);
        jsonWriter.writeArrayField("assignedTo", this.assignedTo, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataSchemaProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataSchemaProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetadataSchemaProperties.
     */
    public static MetadataSchemaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetadataSchemaProperties deserializedMetadataSchemaProperties = new MetadataSchemaProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schema".equals(fieldName)) {
                    deserializedMetadataSchemaProperties.schema = reader.getString();
                } else if ("assignedTo".equals(fieldName)) {
                    List<MetadataAssignment> assignedTo
                        = reader.readArray(reader1 -> MetadataAssignment.fromJson(reader1));
                    deserializedMetadataSchemaProperties.assignedTo = assignedTo;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetadataSchemaProperties;
        });
    }
}
