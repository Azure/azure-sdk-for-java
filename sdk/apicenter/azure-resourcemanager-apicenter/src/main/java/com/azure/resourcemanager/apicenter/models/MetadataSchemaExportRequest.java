// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The metadata schema export request.
 */
@Fluent
public final class MetadataSchemaExportRequest implements JsonSerializable<MetadataSchemaExportRequest> {
    /*
     * An entity the metadata schema is requested for.
     */
    private MetadataAssignmentEntity assignedTo;

    /**
     * Creates an instance of MetadataSchemaExportRequest class.
     */
    public MetadataSchemaExportRequest() {
    }

    /**
     * Get the assignedTo property: An entity the metadata schema is requested for.
     * 
     * @return the assignedTo value.
     */
    public MetadataAssignmentEntity assignedTo() {
        return this.assignedTo;
    }

    /**
     * Set the assignedTo property: An entity the metadata schema is requested for.
     * 
     * @param assignedTo the assignedTo value to set.
     * @return the MetadataSchemaExportRequest object itself.
     */
    public MetadataSchemaExportRequest withAssignedTo(MetadataAssignmentEntity assignedTo) {
        this.assignedTo = assignedTo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assignedTo", this.assignedTo == null ? null : this.assignedTo.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataSchemaExportRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataSchemaExportRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetadataSchemaExportRequest.
     */
    public static MetadataSchemaExportRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetadataSchemaExportRequest deserializedMetadataSchemaExportRequest = new MetadataSchemaExportRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assignedTo".equals(fieldName)) {
                    deserializedMetadataSchemaExportRequest.assignedTo
                        = MetadataAssignmentEntity.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetadataSchemaExportRequest;
        });
    }
}
