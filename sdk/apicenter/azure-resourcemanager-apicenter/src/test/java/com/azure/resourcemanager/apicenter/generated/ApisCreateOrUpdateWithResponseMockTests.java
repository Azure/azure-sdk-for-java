// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.apicenter.ApiCenterManager;
import com.azure.resourcemanager.apicenter.models.Api;
import com.azure.resourcemanager.apicenter.models.ApiKind;
import com.azure.resourcemanager.apicenter.models.ApiProperties;
import com.azure.resourcemanager.apicenter.models.Contact;
import com.azure.resourcemanager.apicenter.models.ExternalDocumentation;
import com.azure.resourcemanager.apicenter.models.License;
import com.azure.resourcemanager.apicenter.models.TermsOfService;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ApisCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"title\":\"z\",\"kind\":\"graphql\",\"description\":\"rvexztvb\",\"summary\":\"gsfraoyzkoow\",\"lifecycleStage\":\"design\",\"termsOfService\":{\"url\":\"guxawqaldsyuuxi\"},\"externalDocumentation\":[{\"title\":\"fobwy\",\"description\":\"kby\",\"url\":\"utwpfhp\"}],\"contacts\":[{\"name\":\"r\",\"url\":\"dsnfdsdoakgtdl\",\"email\":\"kzevdlhewpusds\"}],\"license\":{\"name\":\"vogvbbejdcngqqmo\",\"url\":\"ufgmjzrwrdg\",\"identifier\":\"wae\"},\"customProperties\":\"datauzkopbminrfd\"},\"id\":\"yuhhziu\",\"name\":\"efozbhdms\",\"type\":\"l\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ApiCenterManager manager = ApiCenterManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Api response
            = manager.apis().define("yhmlwpaztzp")
                .withExistingWorkspace("zuempsbzkf", "beyvpnqicvinvkjj", "dxrbuukzcle")
                .withProperties(new ApiProperties().withTitle("ncckw").withKind(ApiKind.REST)
                    .withDescription("qwhxxbuyqaxzfeqz").withSummary("priolx")
                    .withTermsOfService(new TermsOfService().withUrl("lt"))
                    .withExternalDocumentation(Arrays.asList(
                        new ExternalDocumentation().withTitle("cwsobqwcs").withDescription("nwdcfhu")
                            .withUrl("qdpfuvglsbjjca"),
                        new ExternalDocumentation().withTitle("xbvtvudu").withDescription("cormr").withUrl("xqtvcofu"),
                        new ExternalDocumentation().withTitle("lvkgju").withDescription("dknnqvsazn").withUrl("n"),
                        new ExternalDocumentation().withTitle("rudsg").withDescription("hmk").withUrl("c")))
                    .withContacts(
                        Arrays.asList(new Contact().withName("wjue").withUrl("eburu").withEmail("movsmzlxwabmqoe"),
                            new Contact().withName("ifrvtpu").withUrl("jmqlgkfb").withEmail("doaon"),
                            new Contact().withName("jcntuj").withUrl("c").withEmail("df")))
                    .withLicense(new License().withName("ae").withUrl("ojvdcpzfoqo").withIdentifier("cybxa"))
                    .withCustomProperties("datagszufoxciqopid"))
                .create();

        Assertions.assertEquals("z", response.properties().title());
        Assertions.assertEquals(ApiKind.GRAPHQL, response.properties().kind());
        Assertions.assertEquals("rvexztvb", response.properties().description());
        Assertions.assertEquals("gsfraoyzkoow", response.properties().summary());
        Assertions.assertEquals("guxawqaldsyuuxi", response.properties().termsOfService().url());
        Assertions.assertEquals("fobwy", response.properties().externalDocumentation().get(0).title());
        Assertions.assertEquals("kby", response.properties().externalDocumentation().get(0).description());
        Assertions.assertEquals("utwpfhp", response.properties().externalDocumentation().get(0).url());
        Assertions.assertEquals("r", response.properties().contacts().get(0).name());
        Assertions.assertEquals("dsnfdsdoakgtdl", response.properties().contacts().get(0).url());
        Assertions.assertEquals("kzevdlhewpusds", response.properties().contacts().get(0).email());
        Assertions.assertEquals("vogvbbejdcngqqmo", response.properties().license().name());
        Assertions.assertEquals("ufgmjzrwrdg", response.properties().license().url());
        Assertions.assertEquals("wae", response.properties().license().identifier());
    }
}
