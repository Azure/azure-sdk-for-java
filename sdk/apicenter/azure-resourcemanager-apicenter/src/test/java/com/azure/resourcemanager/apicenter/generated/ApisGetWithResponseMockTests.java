// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.apicenter.ApiCenterManager;
import com.azure.resourcemanager.apicenter.models.Api;
import com.azure.resourcemanager.apicenter.models.ApiKind;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ApisGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"title\":\"yjmoadsu\",\"kind\":\"soap\",\"description\":\"m\",\"summary\":\"dmjsjqb\",\"lifecycleStage\":\"deprecated\",\"termsOfService\":{\"url\":\"x\"},\"externalDocumentation\":[{\"title\":\"yc\",\"description\":\"uhpkxkgymar\",\"url\":\"qnajxqugj\"},{\"title\":\"ycubeddgs\",\"description\":\"fwqmzqalkrmn\",\"url\":\"i\"},{\"title\":\"xacqqudfnbyx\",\"description\":\"aabjyvayffimrz\",\"url\":\"tuzqogsexne\"},{\"title\":\"dnw\",\"description\":\"mewzsyyc\",\"url\":\"uzsoi\"}],\"contacts\":[{\"name\":\"pfrxtrthzvay\",\"url\":\"wkqbrqu\",\"email\":\"axhexiilivp\"}],\"license\":{\"name\":\"irqtdqoa\",\"url\":\"r\",\"identifier\":\"fgsqu\"},\"customProperties\":\"dataxrxxlep\"},\"id\":\"amxjezwlw\",\"name\":\"wxuqlcvydypatdoo\",\"type\":\"ojknio\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ApiCenterManager manager = ApiCenterManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Api response = manager.apis()
            .getWithResponse("gge", "dunyg", "eqidbqfatpx", "lr", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("yjmoadsu", response.properties().title());
        Assertions.assertEquals(ApiKind.SOAP, response.properties().kind());
        Assertions.assertEquals("m", response.properties().description());
        Assertions.assertEquals("dmjsjqb", response.properties().summary());
        Assertions.assertEquals("x", response.properties().termsOfService().url());
        Assertions.assertEquals("yc", response.properties().externalDocumentation().get(0).title());
        Assertions.assertEquals("uhpkxkgymar", response.properties().externalDocumentation().get(0).description());
        Assertions.assertEquals("qnajxqugj", response.properties().externalDocumentation().get(0).url());
        Assertions.assertEquals("pfrxtrthzvay", response.properties().contacts().get(0).name());
        Assertions.assertEquals("wkqbrqu", response.properties().contacts().get(0).url());
        Assertions.assertEquals("axhexiilivp", response.properties().contacts().get(0).email());
        Assertions.assertEquals("irqtdqoa", response.properties().license().name());
        Assertions.assertEquals("r", response.properties().license().url());
        Assertions.assertEquals("fgsqu", response.properties().license().identifier());
    }
}
