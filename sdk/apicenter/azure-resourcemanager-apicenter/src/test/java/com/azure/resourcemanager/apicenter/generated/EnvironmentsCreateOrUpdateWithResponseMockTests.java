// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.apicenter.ApiCenterManager;
import com.azure.resourcemanager.apicenter.models.Environment;
import com.azure.resourcemanager.apicenter.models.EnvironmentKind;
import com.azure.resourcemanager.apicenter.models.EnvironmentProperties;
import com.azure.resourcemanager.apicenter.models.EnvironmentServer;
import com.azure.resourcemanager.apicenter.models.EnvironmentServerType;
import com.azure.resourcemanager.apicenter.models.Onboarding;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class EnvironmentsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"title\":\"vewzcj\",\"description\":\"m\",\"kind\":\"production\",\"server\":{\"type\":\"Kong API Gateway\",\"managementPortalUri\":[\"adraufactkahzo\",\"ajjziuxxpshne\",\"kulfg\",\"lqubkwdlen\"]},\"onboarding\":{\"instructions\":\"utujba\",\"developerPortalUri\":[\"uo\",\"minyflnorwm\",\"uvwpklvxwmyg\",\"xpgpq\"]},\"customProperties\":\"dataisze\"},\"id\":\"nb\",\"name\":\"crxgibb\",\"type\":\"axconfozauo\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ApiCenterManager manager = ApiCenterManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Environment response = manager.environments().define("coezbrhubskh")
            .withExistingWorkspace("qkdlw", "qfbumlkxtrqjf", "mlmbtxhwgfwsrta")
            .withProperties(new EnvironmentProperties().withTitle("ygo").withDescription("kkqfqjbvle")
                .withKind(EnvironmentKind.STAGING)
                .withServer(new EnvironmentServer().withType(EnvironmentServerType.KONG_API_GATEWAY)
                    .withManagementPortalUri(Arrays.asList("qtqzfavyv", "qqybarye", "ayjkqa")))
                .withOnboarding(new Onboarding().withInstructions("zslesjcbher")
                    .withDeveloperPortalUri(Arrays.asList("iew", "jcvb")))
                .withCustomProperties("datawr"))
            .create();

        Assertions.assertEquals("vewzcj", response.properties().title());
        Assertions.assertEquals("m", response.properties().description());
        Assertions.assertEquals(EnvironmentKind.PRODUCTION, response.properties().kind());
        Assertions.assertEquals(EnvironmentServerType.KONG_API_GATEWAY, response.properties().server().type());
        Assertions.assertEquals("adraufactkahzo", response.properties().server().managementPortalUri().get(0));
        Assertions.assertEquals("utujba", response.properties().onboarding().instructions());
        Assertions.assertEquals("uo", response.properties().onboarding().developerPortalUri().get(0));
    }
}
