// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apicenter.fluent.models.ServiceInner;
import com.azure.resourcemanager.apicenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.apicenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.apicenter.models.ServiceCollection;
import com.azure.resourcemanager.apicenter.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceCollection model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\"},\"identity\":{\"principalId\":\"d5c227d3-e0ef-4fc3-b3de-f34544ba7047\",\"tenantId\":\"9b522761-456f-4aec-a803-753e1fecbfa9\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"fpikxwczb\":{\"principalId\":\"31ccd157-65f2-4f42-81d6-445eb56563cb\",\"clientId\":\"206b9bbb-9dc6-4ce5-88d2-ecf6f95f1276\"},\"npqxuh\":{\"principalId\":\"1fa4e505-77df-4fea-960e-d59386b269d5\",\"clientId\":\"ece22af9-fae3-473d-b613-de8de42e80a8\"},\"qniwbybrkxvdumj\":{\"principalId\":\"6a9b163f-6960-46ed-a8bc-a41602ef7d69\",\"clientId\":\"9a8c80e6-3dff-4f89-a7cc-20bf79ce8039\"},\"fwvuk\":{\"principalId\":\"b79e122d-1510-47ff-9b3f-00e75de1f7f6\",\"clientId\":\"73629f88-e12c-4df0-88fb-26e7240429d2\"}}},\"location\":\"audccsnhs\",\"tags\":{\"yhtnapczwlokjye\":\"yejhk\",\"jnchgej\":\"kkvnipjox\",\"huxinpmqnj\":\"podmailzydehojwy\",\"vcputegj\":\"qwixjspro\"},\"id\":\"wmfdatscmdvpjhul\",\"name\":\"uuvmkjozkrwfnd\",\"type\":\"odjpslwejd\"}],\"nextLink\":\"wryoqpsoacc\"}")
                .toObject(ServiceCollection.class);
        Assertions.assertEquals("audccsnhs", model.value().get(0).location());
        Assertions.assertEquals("yejhk", model.value().get(0).tags().get("yhtnapczwlokjye"));
        Assertions
            .assertEquals(
                ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("wryoqpsoacc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceCollection model =
            new ServiceCollection()
                .withValue(
                    Arrays
                        .asList(
                            new ServiceInner()
                                .withLocation("audccsnhs")
                                .withTags(
                                    mapOf(
                                        "yhtnapczwlokjye",
                                        "yejhk",
                                        "jnchgej",
                                        "kkvnipjox",
                                        "huxinpmqnj",
                                        "podmailzydehojwy",
                                        "vcputegj",
                                        "qwixjspro"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                        .withUserAssignedIdentities(
                                            mapOf(
                                                "fpikxwczb",
                                                new UserAssignedIdentity(),
                                                "npqxuh",
                                                new UserAssignedIdentity(),
                                                "qniwbybrkxvdumj",
                                                new UserAssignedIdentity(),
                                                "fwvuk",
                                                new UserAssignedIdentity())))))
                .withNextLink("wryoqpsoacc");
        model = BinaryData.fromObject(model).toObject(ServiceCollection.class);
        Assertions.assertEquals("audccsnhs", model.value().get(0).location());
        Assertions.assertEquals("yejhk", model.value().get(0).tags().get("yhtnapczwlokjye"));
        Assertions
            .assertEquals(
                ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("wryoqpsoacc", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
