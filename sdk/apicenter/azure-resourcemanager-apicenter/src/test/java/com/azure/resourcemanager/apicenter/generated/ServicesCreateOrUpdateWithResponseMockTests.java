// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.apicenter.ApicenterManager;
import com.azure.resourcemanager.apicenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.apicenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.apicenter.models.Service;
import com.azure.resourcemanager.apicenter.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServicesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Failed\"},\"identity\":{\"principalId\":\"ec2ca46c-f474-4627-b14d-cdc26a62313b\",\"tenantId\":\"c878d812-4caf-4208-a878-690fd336006c\",\"type\":\"None\",\"userAssignedIdentities\":{\"nohjt\":{\"principalId\":\"aa9e2297-db97-4d72-98e5-82eab1b7c35f\",\"clientId\":\"a3c813f3-8896-491a-a7f7-8ff528401a68\"},\"h\":{\"principalId\":\"a99fa4e8-d2bb-4f19-ab70-b38ee048b9a3\",\"clientId\":\"394726a7-f63a-445a-93c7-6141d16bd781\"},\"ifiyipjxsqwpgrj\":{\"principalId\":\"772c9234-df61-4a5d-a2a8-2e329a3105e9\",\"clientId\":\"4279db14-f308-4152-beec-3fc9995a2345\"},\"orcjxvsnby\":{\"principalId\":\"c0cc3d3a-9408-46d2-a845-c2c02e0f61d1\",\"clientId\":\"2ff93edf-4a90-47d7-af86-5cef16add772\"}}},\"location\":\"abnmocpcyshu\",\"tags\":{\"gpbtoqcjmklj\":\"fblj\",\"qajzyulpkudjkr\":\"vbqid\",\"e\":\"khbzhfepgzg\",\"scpai\":\"zloc\"},\"id\":\"rhhbcs\",\"name\":\"l\",\"type\":\"mmajtjaodx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApicenterManager manager =
            ApicenterManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Service response =
            manager
                .services()
                .define("gazxuf")
                .withRegion("mijcmmxdcufufs")
                .withExistingResourceGroup("prwzwbnguitnwui")
                .withTags(mapOf("sgfyccsnew", "mzidnsezcxtb", "oosflnr", "dwzjeiach"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(
                            mapOf(
                                "dfvzwdzuhty",
                                new UserAssignedIdentity(),
                                "sdkf",
                                new UserAssignedIdentity(),
                                "xmnteiwaop",
                                new UserAssignedIdentity())))
                .create();

        Assertions.assertEquals("abnmocpcyshu", response.location());
        Assertions.assertEquals("fblj", response.tags().get("gpbtoqcjmklj"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
