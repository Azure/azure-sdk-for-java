// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apicenter.ApiCenterManager;
import com.azure.resourcemanager.apicenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.apicenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.apicenter.models.Service;
import com.azure.resourcemanager.apicenter.models.ServiceProperties;
import com.azure.resourcemanager.apicenter.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\"},\"identity\":{\"principalId\":\"8b369e7c-f2df-4b0a-b3e6-54af5b086ed0\",\"tenantId\":\"28bf0f77-43f0-41ab-a318-278e969c0479\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"mubyynt\":{\"principalId\":\"b83e0951-434b-4b45-9c09-b1535a375fd8\",\"clientId\":\"b6b414d8-cbf3-417a-8ce5-5787ac2d40db\"},\"bqtkoievseotgqr\":{\"principalId\":\"3a2bda92-0819-4564-a2ee-d5bf37ef9c17\",\"clientId\":\"8f340e50-450b-4bba-bd85-ff1a015d908f\"},\"muwlauwzizxbm\":{\"principalId\":\"8efa50ee-a589-4198-895e-0ffa46c82a62\",\"clientId\":\"880c22a1-6609-4bdd-adb1-4c042d97f583\"}}},\"location\":\"cjefuzmu\",\"tags\":{\"bhjpglkfgohdne\":\"ttdumorppxebmnzb\",\"phsdyhto\":\"el\",\"v\":\"fikdowwqu\"},\"id\":\"zx\",\"name\":\"lvithhqzonosgg\",\"type\":\"hcohfwdsjnk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiCenterManager manager = ApiCenterManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Service response = manager.services()
            .define("vwiwubmwmbesld")
            .withRegion("ikvmkqzeqqk")
            .withExistingResourceGroup("tshhszhedp")
            .withTags(mapOf("bdagxt", "fzxmhhvhgureodkw"))
            .withProperties(new ServiceProperties())
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("ogaok", new UserAssignedIdentity(), "m", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("cjefuzmu", response.location());
        Assertions.assertEquals("ttdumorppxebmnzb", response.tags().get("bhjpglkfgohdne"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
