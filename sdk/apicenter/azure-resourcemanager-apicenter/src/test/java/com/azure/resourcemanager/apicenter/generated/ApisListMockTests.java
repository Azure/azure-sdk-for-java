// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.apicenter.ApiCenterManager;
import com.azure.resourcemanager.apicenter.models.Api;
import com.azure.resourcemanager.apicenter.models.ApiKind;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ApisListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"title\":\"la\",\"kind\":\"graphql\",\"description\":\"lwuip\",\"summary\":\"cjzkzivgvvcna\",\"lifecycleStage\":\"development\",\"termsOfService\":{\"url\":\"rnxxmueed\"},\"externalDocumentation\":[{\"title\":\"v\",\"description\":\"kwqqtchealmf\",\"url\":\"tdaaygdvwvg\"},{\"title\":\"ohgwxrtfudxepxg\",\"description\":\"agvrvmnpkuk\",\"url\":\"himdbl\"},{\"title\":\"wi\",\"description\":\"njhf\",\"url\":\"xw\"}],\"contacts\":[{\"name\":\"kfoqreyfkzikfj\",\"url\":\"n\",\"email\":\"ivx\"}],\"license\":{\"name\":\"elpcirelsfeaenwa\",\"url\":\"atklddxbjhwuaa\",\"identifier\":\"zjosp\"},\"customProperties\":\"dataoulpjrv\"},\"id\":\"glrvimjwosytxi\",\"name\":\"cskfcktqumiekk\",\"type\":\"zzikhlyfjhdg\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ApiCenterManager manager = ApiCenterManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Api> response = manager.apis().list("syocogjltdtbnnha", "oocrkvcikhnv", "amqgxqquezikyw", "gxk",
            com.azure.core.util.Context.NONE);

        Assertions.assertEquals("la", response.iterator().next().properties().title());
        Assertions.assertEquals(ApiKind.GRAPHQL, response.iterator().next().properties().kind());
        Assertions.assertEquals("lwuip", response.iterator().next().properties().description());
        Assertions.assertEquals("cjzkzivgvvcna", response.iterator().next().properties().summary());
        Assertions.assertEquals("rnxxmueed", response.iterator().next().properties().termsOfService().url());
        Assertions.assertEquals("v", response.iterator().next().properties().externalDocumentation().get(0).title());
        Assertions.assertEquals("kwqqtchealmf",
            response.iterator().next().properties().externalDocumentation().get(0).description());
        Assertions.assertEquals("tdaaygdvwvg",
            response.iterator().next().properties().externalDocumentation().get(0).url());
        Assertions.assertEquals("kfoqreyfkzikfj", response.iterator().next().properties().contacts().get(0).name());
        Assertions.assertEquals("n", response.iterator().next().properties().contacts().get(0).url());
        Assertions.assertEquals("ivx", response.iterator().next().properties().contacts().get(0).email());
        Assertions.assertEquals("elpcirelsfeaenwa", response.iterator().next().properties().license().name());
        Assertions.assertEquals("atklddxbjhwuaa", response.iterator().next().properties().license().url());
        Assertions.assertEquals("zjosp", response.iterator().next().properties().license().identifier());
    }
}
