// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apicenter.fluent.models.MetadataSchemaInner;
import com.azure.resourcemanager.apicenter.models.MetadataAssignment;
import com.azure.resourcemanager.apicenter.models.MetadataAssignmentEntity;
import com.azure.resourcemanager.apicenter.models.MetadataSchemaProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MetadataSchemaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MetadataSchemaInner model = BinaryData.fromString(
            "{\"properties\":{\"schema\":\"bzqqedqytbciq\",\"assignedTo\":[{\"entity\":\"deployment\",\"required\":false,\"deprecated\":false},{\"entity\":\"api\",\"required\":false,\"deprecated\":true}]},\"id\":\"lougpbkw\",\"name\":\"mutduqktaps\",\"type\":\"wgcu\"}")
            .toObject(MetadataSchemaInner.class);
        Assertions.assertEquals("bzqqedqytbciq", model.properties().schema());
        Assertions.assertEquals(MetadataAssignmentEntity.DEPLOYMENT, model.properties().assignedTo().get(0).entity());
        Assertions.assertEquals(false, model.properties().assignedTo().get(0).required());
        Assertions.assertEquals(false, model.properties().assignedTo().get(0).deprecated());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MetadataSchemaInner model
            = new MetadataSchemaInner().withProperties(new MetadataSchemaProperties().withSchema("bzqqedqytbciq")
                .withAssignedTo(Arrays.asList(
                    new MetadataAssignment().withEntity(MetadataAssignmentEntity.DEPLOYMENT).withRequired(false)
                        .withDeprecated(false),
                    new MetadataAssignment().withEntity(MetadataAssignmentEntity.API).withRequired(false)
                        .withDeprecated(true))));
        model = BinaryData.fromObject(model).toObject(MetadataSchemaInner.class);
        Assertions.assertEquals("bzqqedqytbciq", model.properties().schema());
        Assertions.assertEquals(MetadataAssignmentEntity.DEPLOYMENT, model.properties().assignedTo().get(0).entity());
        Assertions.assertEquals(false, model.properties().assignedTo().get(0).required());
        Assertions.assertEquals(false, model.properties().assignedTo().get(0).deprecated());
    }
}
