// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.apicenter.ApiCenterManager;
import com.azure.resourcemanager.apicenter.models.MetadataAssignment;
import com.azure.resourcemanager.apicenter.models.MetadataAssignmentEntity;
import com.azure.resourcemanager.apicenter.models.MetadataSchema;
import com.azure.resourcemanager.apicenter.models.MetadataSchemaProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MetadataSchemasCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"schema\":\"zdtmhrkwofy\",\"assignedTo\":[{\"entity\":\"deployment\",\"required\":true,\"deprecated\":false}]},\"id\":\"pbtg\",\"name\":\"wbwo\",\"type\":\"nwashrtd\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ApiCenterManager manager = ApiCenterManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        MetadataSchema response
            = manager.metadataSchemas().define("apvhelxprgly").withExistingService("jqg", "ysmocmbqfqvmkcxo")
                .withProperties(new MetadataSchemaProperties().withSchema("dd")
                    .withAssignedTo(Arrays.asList(
                        new MetadataAssignment().withEntity(MetadataAssignmentEntity.ENVIRONMENT).withRequired(true)
                            .withDeprecated(true),
                        new MetadataAssignment().withEntity(MetadataAssignmentEntity.DEPLOYMENT).withRequired(true)
                            .withDeprecated(true),
                        new MetadataAssignment().withEntity(MetadataAssignmentEntity.ENVIRONMENT).withRequired(false)
                            .withDeprecated(true),
                        new MetadataAssignment().withEntity(MetadataAssignmentEntity.DEPLOYMENT).withRequired(true)
                            .withDeprecated(true))))
                .create();

        Assertions.assertEquals("zdtmhrkwofy", response.properties().schema());
        Assertions.assertEquals(MetadataAssignmentEntity.DEPLOYMENT,
            response.properties().assignedTo().get(0).entity());
        Assertions.assertEquals(true, response.properties().assignedTo().get(0).required());
        Assertions.assertEquals(false, response.properties().assignedTo().get(0).deprecated());
    }
}
