// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apicenter.ApiCenterManager;
import com.azure.resourcemanager.apicenter.models.MetadataAssignment;
import com.azure.resourcemanager.apicenter.models.MetadataAssignmentEntity;
import com.azure.resourcemanager.apicenter.models.MetadataSchema;
import com.azure.resourcemanager.apicenter.models.MetadataSchemaProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MetadataSchemasCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"schema\":\"zdtmhrkwofy\",\"assignedTo\":[{\"entity\":\"deployment\",\"required\":true,\"deprecated\":false}]},\"id\":\"pbtg\",\"name\":\"wbwo\",\"type\":\"nwashrtd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiCenterManager manager = ApiCenterManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MetadataSchema response = manager.metadataSchemas()
            .define("apvhelxprgly")
            .withExistingService("jqg", "ysmocmbqfqvmkcxo")
            .withProperties(new MetadataSchemaProperties().withSchema("dd")
                .withAssignedTo(Arrays.asList(
                    new MetadataAssignment().withEntity(MetadataAssignmentEntity.ENVIRONMENT)
                        .withRequired(true)
                        .withDeprecated(true),
                    new MetadataAssignment().withEntity(MetadataAssignmentEntity.DEPLOYMENT)
                        .withRequired(true)
                        .withDeprecated(true),
                    new MetadataAssignment().withEntity(MetadataAssignmentEntity.ENVIRONMENT)
                        .withRequired(false)
                        .withDeprecated(true),
                    new MetadataAssignment().withEntity(MetadataAssignmentEntity.DEPLOYMENT)
                        .withRequired(true)
                        .withDeprecated(true))))
            .create();

        Assertions.assertEquals("zdtmhrkwofy", response.properties().schema());
        Assertions.assertEquals(MetadataAssignmentEntity.DEPLOYMENT,
            response.properties().assignedTo().get(0).entity());
        Assertions.assertEquals(true, response.properties().assignedTo().get(0).required());
        Assertions.assertEquals(false, response.properties().assignedTo().get(0).deprecated());
    }
}
