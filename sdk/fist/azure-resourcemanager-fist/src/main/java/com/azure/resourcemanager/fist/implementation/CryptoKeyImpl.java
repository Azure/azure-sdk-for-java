// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fist.implementation;

import com.azure.resourcemanager.fist.fluent.models.CryptoKeyInner;
import com.azure.resourcemanager.fist.models.CryptoKey;
import com.azure.resourcemanager.fist.models.IsShortKeySize;
import com.azure.resourcemanager.fist.models.PairedKey;
import java.util.Collections;
import java.util.List;

public final class CryptoKeyImpl implements CryptoKey {
    private CryptoKeyInner innerObject;

    private final com.azure.resourcemanager.fist.FistManager serviceManager;

    CryptoKeyImpl(CryptoKeyInner innerObject, com.azure.resourcemanager.fist.FistManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String cryptoKeyId() {
        return this.innerModel().cryptoKeyId();
    }

    public String keyType() {
        return this.innerModel().keyType();
    }

    public Long keySize() {
        return this.innerModel().keySize();
    }

    public String keyAlgorithm() {
        return this.innerModel().keyAlgorithm();
    }

    public List<String> usage() {
        List<String> inner = this.innerModel().usage();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> filePaths() {
        List<String> inner = this.innerModel().filePaths();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public PairedKey pairedKey() {
        return this.innerModel().pairedKey();
    }

    public IsShortKeySize isShortKeySize() {
        return this.innerModel().isShortKeySize();
    }

    public CryptoKeyInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.fist.FistManager manager() {
        return this.serviceManager;
    }
}
