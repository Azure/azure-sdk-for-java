// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.portalservicescopilot.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Copilot Settings properties.
 */
@Fluent
public final class CopilotSettingsProperties implements JsonSerializable<CopilotSettingsProperties> {
    /*
     * Boolean indicating if role-based access control is enabled for copilot in this tenant.
     */
    private boolean accessControlEnabled;

    /*
     * The status of the last provisioning operation performed on the resource.
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of CopilotSettingsProperties class.
     */
    public CopilotSettingsProperties() {
    }

    /**
     * Get the accessControlEnabled property: Boolean indicating if role-based access control is enabled for copilot in
     * this tenant.
     * 
     * @return the accessControlEnabled value.
     */
    public boolean accessControlEnabled() {
        return this.accessControlEnabled;
    }

    /**
     * Set the accessControlEnabled property: Boolean indicating if role-based access control is enabled for copilot in
     * this tenant.
     * 
     * @param accessControlEnabled the accessControlEnabled value to set.
     * @return the CopilotSettingsProperties object itself.
     */
    public CopilotSettingsProperties withAccessControlEnabled(boolean accessControlEnabled) {
        this.accessControlEnabled = accessControlEnabled;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last provisioning operation performed on the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("accessControlEnabled", this.accessControlEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CopilotSettingsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CopilotSettingsProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CopilotSettingsProperties.
     */
    public static CopilotSettingsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CopilotSettingsProperties deserializedCopilotSettingsProperties = new CopilotSettingsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessControlEnabled".equals(fieldName)) {
                    deserializedCopilotSettingsProperties.accessControlEnabled = reader.getBoolean();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCopilotSettingsProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCopilotSettingsProperties;
        });
    }
}
