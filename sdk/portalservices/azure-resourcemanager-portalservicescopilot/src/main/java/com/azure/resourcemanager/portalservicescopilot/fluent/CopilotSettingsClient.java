// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.portalservicescopilot.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.portalservicescopilot.fluent.models.CopilotSettingsResourceInner;
import com.azure.resourcemanager.portalservicescopilot.models.CopilotSettingsResourceUpdate;

/**
 * An instance of this class provides access to all the operations defined in CopilotSettingsClient.
 */
public interface CopilotSettingsClient {
    /**
     * Get a CopilotSettingsResource.
     * 
     * @param apiVersion The API version to use for this operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CopilotSettingsResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CopilotSettingsResourceInner> getWithResponse(String apiVersion, Context context);

    /**
     * Get a CopilotSettingsResource.
     * 
     * @param apiVersion The API version to use for this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CopilotSettingsResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CopilotSettingsResourceInner get(String apiVersion);

    /**
     * Create a CopilotSettingsResource.
     * 
     * @param apiVersion The API version to use for this operation.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the copilot settings tenant resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CopilotSettingsResourceInner> createOrUpdateWithResponse(String apiVersion,
        CopilotSettingsResourceInner resource, Context context);

    /**
     * Create a CopilotSettingsResource.
     * 
     * @param apiVersion The API version to use for this operation.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the copilot settings tenant resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CopilotSettingsResourceInner createOrUpdate(String apiVersion, CopilotSettingsResourceInner resource);

    /**
     * Update a CopilotSettingsResource.
     * 
     * @param apiVersion The API version to use for this operation.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the copilot settings tenant resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CopilotSettingsResourceInner> updateWithResponse(String apiVersion,
        CopilotSettingsResourceUpdate properties, Context context);

    /**
     * Update a CopilotSettingsResource.
     * 
     * @param apiVersion The API version to use for this operation.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the copilot settings tenant resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CopilotSettingsResourceInner update(String apiVersion, CopilotSettingsResourceUpdate properties);

    /**
     * Delete a CopilotSettingsResource.
     * 
     * @param apiVersion The API version to use for this operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String apiVersion, Context context);

    /**
     * Delete a CopilotSettingsResource.
     * 
     * @param apiVersion The API version to use for this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String apiVersion);
}
