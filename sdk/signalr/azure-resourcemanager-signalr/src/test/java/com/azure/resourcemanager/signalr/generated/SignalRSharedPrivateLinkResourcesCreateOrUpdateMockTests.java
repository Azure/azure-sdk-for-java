// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.SharedPrivateLinkResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SignalRSharedPrivateLinkResourcesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"groupId\":\"mkfqlwxldy\",\"privateLinkResourceId\":\"alsygao\",\"provisioningState\":\"Succeeded\",\"requestMessage\":\"nnbmjksibjgsjj\",\"status\":\"Disconnected\"},\"id\":\"mr\",\"name\":\"ad\",\"type\":\"yqegx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SignalRManager manager = SignalRManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SharedPrivateLinkResource response = manager.signalRSharedPrivateLinkResources()
            .define("lz")
            .withExistingSignalR("zjknyuxg", "ttxpnrupza")
            .withGroupId("rdixt")
            .withPrivateLinkResourceId("ekidswyskb")
            .withRequestMessage("gllukkutvlxhrpqh")
            .create();

        Assertions.assertEquals("mkfqlwxldy", response.groupId());
        Assertions.assertEquals("alsygao", response.privateLinkResourceId());
        Assertions.assertEquals("nnbmjksibjgsjj", response.requestMessage());
    }
}
