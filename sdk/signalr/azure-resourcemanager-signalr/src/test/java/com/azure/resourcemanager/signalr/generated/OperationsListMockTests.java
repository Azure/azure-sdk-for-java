// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"rr\",\"isDataAction\":false,\"display\":{\"provider\":\"ydzgkrvqeevtoe\",\"resource\":\"yutnwytpzdmov\",\"operation\":\"fvaawzqa\",\"description\":\"lgzurig\"},\"origin\":\"ecxn\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"pvz\",\"displayName\":\"qtmldgxo\",\"displayDescription\":\"irclnpk\",\"unit\":\"ayzri\",\"aggregationType\":\"hya\",\"fillGapWithZero\":\"vjlboxqvk\",\"category\":\"mxho\",\"dimensions\":[{},{},{}]},{\"name\":\"hdwdi\",\"displayName\":\"mbnraauzzp\",\"displayDescription\":\"a\",\"unit\":\"sdzhezww\",\"aggregationType\":\"iqyuvvfo\",\"fillGapWithZero\":\"p\",\"category\":\"qyikvy\",\"dimensions\":[{}]}],\"logSpecifications\":[{\"name\":\"luwmncst\",\"displayName\":\"jfybvpoekrsgsgb\"},{\"name\":\"uzqgnjdgkynsc\",\"displayName\":\"qhzvhxnkomt\"},{\"name\":\"bo\",\"displayName\":\"pnvdxz\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SignalRManager manager = SignalRManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rr", response.iterator().next().name());
        Assertions.assertEquals(false, response.iterator().next().isDataAction());
        Assertions.assertEquals("ydzgkrvqeevtoe", response.iterator().next().display().provider());
        Assertions.assertEquals("yutnwytpzdmov", response.iterator().next().display().resource());
        Assertions.assertEquals("fvaawzqa", response.iterator().next().display().operation());
        Assertions.assertEquals("lgzurig", response.iterator().next().display().description());
        Assertions.assertEquals("ecxn", response.iterator().next().origin());
        Assertions.assertEquals("pvz",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("qtmldgxo",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("irclnpk",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .displayDescription());
        Assertions.assertEquals("ayzri",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("hya",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .aggregationType());
        Assertions.assertEquals("vjlboxqvk",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .fillGapWithZero());
        Assertions.assertEquals("mxho",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("luwmncst",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("jfybvpoekrsgsgb",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
    }
}
