// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.signalr.fluent.models.SignalRResourceInner;
import com.azure.resourcemanager.signalr.models.AclAction;
import com.azure.resourcemanager.signalr.models.FeatureFlags;
import com.azure.resourcemanager.signalr.models.LiveTraceCategory;
import com.azure.resourcemanager.signalr.models.LiveTraceConfiguration;
import com.azure.resourcemanager.signalr.models.ManagedIdentity;
import com.azure.resourcemanager.signalr.models.ManagedIdentityType;
import com.azure.resourcemanager.signalr.models.NetworkAcl;
import com.azure.resourcemanager.signalr.models.PrivateEndpointAcl;
import com.azure.resourcemanager.signalr.models.ResourceLogCategory;
import com.azure.resourcemanager.signalr.models.ResourceLogConfiguration;
import com.azure.resourcemanager.signalr.models.ResourceSku;
import com.azure.resourcemanager.signalr.models.ServerlessSettings;
import com.azure.resourcemanager.signalr.models.ServerlessUpstreamSettings;
import com.azure.resourcemanager.signalr.models.ServiceKind;
import com.azure.resourcemanager.signalr.models.SignalRCorsSettings;
import com.azure.resourcemanager.signalr.models.SignalRFeature;
import com.azure.resourcemanager.signalr.models.SignalRNetworkACLs;
import com.azure.resourcemanager.signalr.models.SignalRRequestType;
import com.azure.resourcemanager.signalr.models.SignalRResourceList;
import com.azure.resourcemanager.signalr.models.SignalRSkuTier;
import com.azure.resourcemanager.signalr.models.SignalRTlsSettings;
import com.azure.resourcemanager.signalr.models.UpstreamTemplate;
import com.azure.resourcemanager.signalr.models.UserAssignedIdentityProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SignalRResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SignalRResourceList model = BinaryData.fromString(
            "{\"value\":[{\"sku\":{\"name\":\"tpngjcrcczsqpjh\",\"tier\":\"Free\",\"size\":\"jvnysounqe\",\"family\":\"noae\",\"capacity\":1901274446},\"properties\":{\"provisioningState\":\"Deleting\",\"externalIP\":\"trpmo\",\"hostName\":\"mcmatuokthfuiu\",\"publicPort\":1445775245,\"serverPort\":680550088,\"version\":\"pk\",\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"uozmyzydagfua\",\"name\":\"bezy\",\"type\":\"uokktwhrdxwz\"},{\"properties\":{},\"id\":\"sm\",\"name\":\"surex\",\"type\":\"moryocfsfksym\"},{\"properties\":{},\"id\":\"stkiiuxhqyud\",\"name\":\"o\",\"type\":\"rq\"},{\"properties\":{},\"id\":\"oczvy\",\"name\":\"fqrvkdvjsllrmvvd\",\"type\":\"watkpnpulexxb\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"uwiqzb\",\"privateLinkResourceId\":\"j\"},\"id\":\"sovmyokacspkwl\",\"name\":\"zdobpxjmflbvvnch\",\"type\":\"kcciwwzjuqkhr\"},{\"properties\":{\"groupId\":\"iwkuofos\",\"privateLinkResourceId\":\"ghsauuimjmvxied\"},\"id\":\"ugidyjrr\",\"name\":\"byao\",\"type\":\"v\"},{\"properties\":{\"groupId\":\"sonpclhocohs\",\"privateLinkResourceId\":\"kevle\"},\"id\":\"gz\",\"name\":\"buhfmvfaxkffeiit\",\"type\":\"lvmezyvshxmzsbbz\"},{\"properties\":{\"groupId\":\"igrxwburvjxxjn\",\"privateLinkResourceId\":\"pydptko\"},\"id\":\"nkoukn\",\"name\":\"udwtiukbl\",\"type\":\"ngkpocipazy\"}],\"tls\":{\"clientCertEnabled\":true},\"hostNamePrefix\":\"kgjn\",\"features\":[{\"flag\":\"EnableConnectivityLogs\",\"value\":\"gygev\",\"properties\":{\"ydnfyhxdeoejz\":\"typmrbpizcdrqjsd\",\"jttgzf\":\"cwif\",\"khaj\":\"ishc\",\"p\":\"eyeam\"}},{\"flag\":\"EnableLiveTrace\",\"value\":\"g\",\"properties\":{\"honowkgshwank\":\"buxwgip\",\"rywn\":\"xzbinjeputt\",\"lwh\":\"zoqftiyqzrnkcqvy\"}},{\"flag\":\"EnableMessagingLogs\",\"value\":\"sicohoqqnwvlry\",\"properties\":{\"konocu\":\"hheunmmqhgyx\"}}],\"liveTraceConfiguration\":{\"enabled\":\"lyaxuc\",\"categories\":[{},{}]},\"resourceLogConfiguration\":{\"categories\":[{}]},\"cors\":{\"allowedOrigins\":[\"eyp\",\"wrmjmwvvjektc\",\"senhwlrs\"]},\"serverless\":{\"connectionTimeoutInSeconds\":842863771},\"upstream\":{\"templates\":[{\"urlTemplate\":\"lqdqgbiqylihka\"}]},\"networkACLs\":{\"defaultAction\":\"Allow\",\"publicNetwork\":{\"allow\":[\"Trace\",\"ServerConnection\",\"ClientConnection\"],\"deny\":[\"Trace\",\"Trace\",\"Trace\"]},\"privateEndpoints\":[{\"name\":\"ctq\"},{\"name\":\"jf\"},{\"name\":\"ebrjcxe\"}]},\"publicNetworkAccess\":\"uwutttxfvjrbi\",\"disableLocalAuth\":true,\"disableAadAuth\":true},\"kind\":\"SignalR\",\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"oxgvclt\":{\"principalId\":\"ljkyqxjvuuj\",\"clientId\":\"idokgjlj\"},\"gx\":{\"principalId\":\"sncghkjeszz\",\"clientId\":\"ijhtxf\"}},\"principalId\":\"smx\",\"tenantId\":\"hmpvecx\"},\"location\":\"debfqkkrbmpukgri\",\"tags\":{\"ahmgkbrp\":\"zlfbxzpuzycispnq\",\"hibnuqqkpika\":\"y\",\"buynhijggm\":\"rgvtqag\"},\"id\":\"bfs\",\"name\":\"arbu\",\"type\":\"rcvpnazzmhjrunmp\"},{\"sku\":{\"name\":\"tdbhrbnla\",\"tier\":\"Basic\",\"size\":\"yskpbhen\",\"family\":\"kcxywnyt\",\"capacity\":1863766018},\"properties\":{\"provisioningState\":\"Failed\",\"externalIP\":\"idybyxczf\",\"hostName\":\"haaxdbabphl\",\"publicPort\":77204722,\"serverPort\":818210611,\"version\":\"tsthsucocm\",\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"t\",\"name\":\"bt\",\"type\":\"wrqpue\"},{\"properties\":{},\"id\":\"zywbiex\",\"name\":\"fey\",\"type\":\"eaxib\"},{\"properties\":{},\"id\":\"wbhqwal\",\"name\":\"uzyoxaep\",\"type\":\"kzjancuxrhdwbav\"},{\"properties\":{},\"id\":\"iwdjswztsdbpgn\",\"name\":\"ytxhp\",\"type\":\"xbzpfzab\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"xwtctyqiklbbovpl\",\"privateLinkResourceId\":\"zbhvgyuguosv\"},\"id\":\"kfssxqukkf\",\"name\":\"l\",\"type\":\"mg\"}],\"tls\":{\"clientCertEnabled\":false},\"hostNamePrefix\":\"zkd\",\"features\":[{\"flag\":\"EnableLiveTrace\",\"value\":\"vlopwiyighx\",\"properties\":{\"baumnyqupedeoj\":\"wzbaiue\",\"ckhsmtxpsieb\":\"a\"}},{\"flag\":\"EnableMessagingLogs\",\"value\":\"hvpesapskrdqm\",\"properties\":{\"uutkncw\":\"dhtldwkyz\",\"wrupqsxvnmicykvc\":\"cwsvlxotog\",\"eil\":\"o\"}}],\"liveTraceConfiguration\":{\"enabled\":\"oty\",\"categories\":[{}]},\"resourceLogConfiguration\":{\"categories\":[{},{},{},{}]},\"cors\":{\"allowedOrigins\":[\"nxdhbt\"]},\"serverless\":{\"connectionTimeoutInSeconds\":59412891},\"upstream\":{\"templates\":[{\"urlTemplate\":\"nv\"},{\"urlTemplate\":\"t\"},{\"urlTemplate\":\"qnermclfplphoxu\"},{\"urlTemplate\":\"crpab\"}]},\"networkACLs\":{\"defaultAction\":\"Allow\",\"publicNetwork\":{\"allow\":[\"Trace\"],\"deny\":[\"Trace\"]},\"privateEndpoints\":[{\"name\":\"xywpmueefjzwfqkq\"},{\"name\":\"jidsuyonobglaoc\"}]},\"publicNetworkAccess\":\"tcc\",\"disableLocalAuth\":true,\"disableAadAuth\":false},\"kind\":\"RawWebSockets\",\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"wpzntxhdzh\":{\"principalId\":\"xv\",\"clientId\":\"u\"},\"rlhrxs\":{\"principalId\":\"qj\",\"clientId\":\"ck\"},\"ehhseyvjusrts\":{\"principalId\":\"yvpycanuzbpzk\",\"clientId\":\"kuwbcrnwb\"},\"ahvljuaha\":{\"principalId\":\"spkdee\",\"clientId\":\"ofmxagkvtmelmqkr\"}},\"principalId\":\"hcdhmdual\",\"tenantId\":\"xqpvfadmw\"},\"location\":\"crgvxpvgom\",\"tags\":{\"e\":\"misgwbnb\",\"urqhaka\":\"dawkzbali\"},\"id\":\"hashsfwxosow\",\"name\":\"xcug\",\"type\":\"cjooxdjebwpucwwf\"},{\"sku\":{\"name\":\"vbvmeu\",\"tier\":\"Premium\",\"size\":\"yhz\",\"family\":\"uojgj\",\"capacity\":1178618137},\"properties\":{\"provisioningState\":\"Failed\",\"externalIP\":\"twm\",\"hostName\":\"ytdxwit\",\"publicPort\":1070997174,\"serverPort\":381866779,\"version\":\"gqwgxhniskxfbkp\",\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"wndnhj\",\"name\":\"auwhvylwzbtdhx\",\"type\":\"jznb\"},{\"properties\":{},\"id\":\"wuwprzqlv\",\"name\":\"ualupjmkh\",\"type\":\"xobbcswsrt\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"rbpbewtghfgblcg\",\"privateLinkResourceId\":\"xzvlvqhjkbegib\"},\"id\":\"nmxiebwwaloayqc\",\"name\":\"wrtz\",\"type\":\"uzgwyzmhtx\"},{\"properties\":{\"groupId\":\"mtsavjcbpwxqp\",\"privateLinkResourceId\":\"rknftguvriuhprwm\"},\"id\":\"yvxqtayriwwroy\",\"name\":\"bexrmcq\",\"type\":\"bycnojvkn\"},{\"properties\":{\"groupId\":\"qsgzvahapj\",\"privateLinkResourceId\":\"zhpvgqzcjrvxd\"},\"id\":\"zlmwlxkvugfhz\",\"name\":\"vawjvzunlu\",\"type\":\"hnnpr\"},{\"properties\":{\"groupId\":\"peilpjzuaejxdu\",\"privateLinkResourceId\":\"tskzbbtdzumveek\"},\"id\":\"pwo\",\"name\":\"uh\",\"type\":\"fpbsjyofdxl\"}],\"tls\":{\"clientCertEnabled\":true},\"hostNamePrefix\":\"touwaboekqv\",\"features\":[{\"flag\":\"EnableMessagingLogs\",\"value\":\"smv\",\"properties\":{\"isxyawjoyaqcslyj\":\"yjsflhhcaalnji\",\"nelixhnrztfo\":\"kiidzyex\",\"xknalaulppg\":\"hb\",\"gvpgy\":\"dtpnapnyiropuhp\"}}],\"liveTraceConfiguration\":{\"enabled\":\"git\",\"categories\":[{},{},{}]},\"resourceLogConfiguration\":{\"categories\":[{}]},\"cors\":{\"allowedOrigins\":[\"ynqwwncwzzhxgk\",\"rmgucnap\",\"t\"]},\"serverless\":{\"connectionTimeoutInSeconds\":1950925712},\"upstream\":{\"templates\":[{\"urlTemplate\":\"tfdygpfqb\"}]},\"networkACLs\":{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"RESTAPI\"],\"deny\":[\"ServerConnection\",\"ServerConnection\",\"RESTAPI\",\"ClientConnection\"]},\"privateEndpoints\":[{\"name\":\"ppcqeqxolz\"},{\"name\":\"ahzxctobgbk\"},{\"name\":\"moizpos\"}]},\"publicNetworkAccess\":\"grcfb\",\"disableLocalAuth\":true,\"disableAadAuth\":true},\"kind\":\"SignalR\",\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"szjfauvjfdxxivet\":{\"principalId\":\"vjymjhxxjyngud\",\"clientId\":\"krtswbxqz\"},\"bhsfxob\":{\"principalId\":\"cqaqtdoqmcbx\",\"clientId\":\"vxysl\"},\"shqjohxcrsbf\":{\"principalId\":\"tkblmpewww\",\"clientId\":\"krvrns\"}},\"principalId\":\"asrru\",\"tenantId\":\"bhsqfsubcgjbirxb\"},\"location\":\"bsrfbj\",\"tags\":{\"sotftpvj\":\"w\"},\"id\":\"bexilzznfqqnv\",\"name\":\"pmqtaru\",\"type\":\"ujmkcjhwqy\"},{\"sku\":{\"name\":\"r\",\"tier\":\"Free\",\"size\":\"jewgdrjerv\",\"family\":\"enq\",\"capacity\":682074960},\"properties\":{\"provisioningState\":\"Creating\",\"externalIP\":\"ygmi\",\"hostName\":\"hnzdndslgnayqi\",\"publicPort\":1427716289,\"serverPort\":1655484798,\"version\":\"avhqlkth\",\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"lbg\",\"name\":\"cdui\",\"type\":\"r\"},{\"properties\":{},\"id\":\"cym\",\"name\":\"aolps\",\"type\":\"lqlfm\"},{\"properties\":{},\"id\":\"bbglzpswiydmc\",\"name\":\"yhz\",\"type\":\"xssadbzmnvdf\"},{\"properties\":{},\"id\":\"daodvxzbncblyl\",\"name\":\"stdbhhxsrzdzu\",\"type\":\"erscdntne\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"mygtdssls\",\"privateLinkResourceId\":\"tmweriofzpyq\"},\"id\":\"emwabnet\",\"name\":\"hhszh\",\"type\":\"d\"},{\"properties\":{\"groupId\":\"wiwubm\",\"privateLinkResourceId\":\"mbes\"},\"id\":\"dnkwwtppjflcxog\",\"name\":\"okonzmnsikvmkqz\",\"type\":\"qqkdltfzxmhhvhgu\"},{\"properties\":{\"groupId\":\"dkwobdagx\",\"privateLinkResourceId\":\"ibqdxbxwakbogqx\"},\"id\":\"dlkzgxhuri\",\"name\":\"lbpodxunk\",\"type\":\"ebxmubyynt\"}],\"tls\":{\"clientCertEnabled\":true},\"hostNamePrefix\":\"tkoievseotgq\",\"features\":[{\"flag\":\"EnableMessagingLogs\",\"value\":\"muwlauwzizxbm\",\"properties\":{\"p\":\"jefuzmuvpbttdumo\",\"mnzb\":\"xe\"}},{\"flag\":\"EnableLiveTrace\",\"value\":\"hjpglkf\",\"properties\":{\"lfphsdyhtozfikd\":\"dneu\",\"zonosgg\":\"wwquuvxzxclvithh\",\"ljuti\":\"hcohfwdsjnk\"}},{\"flag\":\"EnableMessagingLogs\",\"value\":\"wacf\",\"properties\":{\"zewk\":\"k\",\"pnppfuf\":\"vhqcrail\",\"afcnih\":\"rwdmhdlxyjrxsa\",\"vq\":\"wqapnedgfbcvk\"}},{\"flag\":\"EnableLiveTrace\",\"value\":\"keqdcvdrhvoods\",\"properties\":{\"wmgxcxrsl\":\"obzdopcjwvnhdl\",\"rpkhjwn\":\"mutwuoe\",\"dggkzzlvmbmpa\":\"yqsluic\",\"yhrfouyftaakcpw\":\"modfvuefywsbpfvm\"}}],\"liveTraceConfiguration\":{\"enabled\":\"vqtmnub\",\"categories\":[{},{},{}]},\"resourceLogConfiguration\":{\"categories\":[{},{}]},\"cors\":{\"allowedOrigins\":[\"ndjmquxvyp\",\"mg\"]},\"serverless\":{\"connectionTimeoutInSeconds\":107730122},\"upstream\":{\"templates\":[{\"urlTemplate\":\"jvp\"},{\"urlTemplate\":\"jqg\"}]},\"networkACLs\":{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"ClientConnection\",\"ServerConnection\"],\"deny\":[\"ServerConnection\",\"RESTAPI\"]},\"privateEndpoints\":[{\"name\":\"xozap\"},{\"name\":\"helxprglya\"},{\"name\":\"dd\"}]},\"publicNetworkAccess\":\"cbcuejrjxgciqi\",\"disableLocalAuth\":false,\"disableAadAuth\":true},\"kind\":\"RawWebSockets\",\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"szdtmhrkwof\":{\"principalId\":\"y\",\"clientId\":\"bmrqyibahwfl\"},\"nwashrtd\":{\"principalId\":\"voqacpiexpbt\",\"clientId\":\"wbwo\"},\"i\":{\"principalId\":\"cnqxwbpokulpi\",\"clientId\":\"waasip\"},\"fbtkuwhhmhyk\":{\"principalId\":\"byuqerpqlp\",\"clientId\":\"cciuqgbdbutau\"}},\"principalId\":\"oxafn\",\"tenantId\":\"lpichk\"},\"location\":\"mkcdyhbpkkpwdre\",\"tags\":{\"w\":\"vvqfovljxyws\",\"dsytgadgvr\":\"yrs\",\"neqn\":\"ea\",\"jfqka\":\"arrwlquu\"},\"id\":\"e\",\"name\":\"iipfpubj\",\"type\":\"bwwift\"}],\"nextLink\":\"qkvpuvksgplsakn\"}")
            .toObject(SignalRResourceList.class);
        Assertions.assertEquals("debfqkkrbmpukgri", model.value().get(0).location());
        Assertions.assertEquals("zlfbxzpuzycispnq", model.value().get(0).tags().get("ahmgkbrp"));
        Assertions.assertEquals("tpngjcrcczsqpjh", model.value().get(0).sku().name());
        Assertions.assertEquals(SignalRSkuTier.FREE, model.value().get(0).sku().tier());
        Assertions.assertEquals(1901274446, model.value().get(0).sku().capacity());
        Assertions.assertEquals(ServiceKind.SIGNALR, model.value().get(0).kind());
        Assertions.assertEquals(ManagedIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals(true, model.value().get(0).tls().clientCertEnabled());
        Assertions.assertEquals(FeatureFlags.ENABLE_CONNECTIVITY_LOGS, model.value().get(0).features().get(0).flag());
        Assertions.assertEquals("gygev", model.value().get(0).features().get(0).value());
        Assertions.assertEquals("typmrbpizcdrqjsd",
            model.value().get(0).features().get(0).properties().get("ydnfyhxdeoejz"));
        Assertions.assertEquals("lyaxuc", model.value().get(0).liveTraceConfiguration().enabled());
        Assertions.assertEquals("eyp", model.value().get(0).cors().allowedOrigins().get(0));
        Assertions.assertEquals(842863771, model.value().get(0).serverless().connectionTimeoutInSeconds());
        Assertions.assertEquals("lqdqgbiqylihka", model.value().get(0).upstream().templates().get(0).urlTemplate());
        Assertions.assertEquals(AclAction.ALLOW, model.value().get(0).networkACLs().defaultAction());
        Assertions.assertEquals(SignalRRequestType.TRACE,
            model.value().get(0).networkACLs().publicNetwork().allow().get(0));
        Assertions.assertEquals(SignalRRequestType.TRACE,
            model.value().get(0).networkACLs().publicNetwork().deny().get(0));
        Assertions.assertEquals("ctq", model.value().get(0).networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("uwutttxfvjrbi", model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(true, model.value().get(0).disableAadAuth());
        Assertions.assertEquals("qkvpuvksgplsakn", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SignalRResourceList model
            = new SignalRResourceList()
                .withValue(Arrays.asList(
                    new SignalRResourceInner().withLocation("debfqkkrbmpukgri")
                        .withTags(mapOf("ahmgkbrp", "zlfbxzpuzycispnq", "hibnuqqkpika", "y", "buynhijggm", "rgvtqag"))
                        .withSku(new ResourceSku().withName("tpngjcrcczsqpjh")
                            .withTier(SignalRSkuTier.FREE)
                            .withCapacity(1901274446))
                        .withKind(ServiceKind.SIGNALR)
                        .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.NONE)
                            .withUserAssignedIdentities(mapOf("oxgvclt", new UserAssignedIdentityProperty(), "gx",
                                new UserAssignedIdentityProperty())))
                        .withTls(new SignalRTlsSettings().withClientCertEnabled(true))
                        .withFeatures(Arrays.asList(
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_CONNECTIVITY_LOGS)
                                .withValue("gygev")
                                .withProperties(mapOf("ydnfyhxdeoejz", "typmrbpizcdrqjsd", "jttgzf", "cwif", "khaj",
                                    "ishc", "p", "eyeam")),
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_LIVE_TRACE)
                                .withValue("g")
                                .withProperties(mapOf("honowkgshwank", "buxwgip", "rywn", "xzbinjeputt", "lwh",
                                    "zoqftiyqzrnkcqvy")),
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                                .withValue("sicohoqqnwvlry")
                                .withProperties(mapOf("konocu", "hheunmmqhgyx"))))
                        .withLiveTraceConfiguration(new LiveTraceConfiguration().withEnabled("lyaxuc")
                            .withCategories(Arrays.asList(new LiveTraceCategory(), new LiveTraceCategory())))
                        .withResourceLogConfiguration(
                            new ResourceLogConfiguration().withCategories(Arrays.asList(new ResourceLogCategory())))
                        .withCors(new SignalRCorsSettings()
                            .withAllowedOrigins(Arrays.asList("eyp", "wrmjmwvvjektc", "senhwlrs")))
                        .withServerless(new ServerlessSettings().withConnectionTimeoutInSeconds(842863771))
                        .withUpstream(new ServerlessUpstreamSettings()
                            .withTemplates(Arrays.asList(new UpstreamTemplate().withUrlTemplate("lqdqgbiqylihka"))))
                        .withNetworkACLs(new SignalRNetworkACLs().withDefaultAction(AclAction.ALLOW)
                            .withPublicNetwork(new NetworkAcl()
                                .withAllow(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.SERVER_CONNECTION,
                                    SignalRRequestType.CLIENT_CONNECTION))
                                .withDeny(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.TRACE,
                                    SignalRRequestType.TRACE)))
                            .withPrivateEndpoints(Arrays.asList(
                                new PrivateEndpointAcl().withName("ctq"), new PrivateEndpointAcl().withName("jf"),
                                new PrivateEndpointAcl().withName("ebrjcxe"))))
                        .withPublicNetworkAccess("uwutttxfvjrbi")
                        .withDisableLocalAuth(true)
                        .withDisableAadAuth(true),
                    new SignalRResourceInner()
                        .withLocation("crgvxpvgom")
                        .withTags(mapOf("e", "misgwbnb", "urqhaka", "dawkzbali"))
                        .withSku(new ResourceSku().withName("tdbhrbnla")
                            .withTier(SignalRSkuTier.BASIC)
                            .withCapacity(1863766018))
                        .withKind(ServiceKind.RAW_WEB_SOCKETS)
                        .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("wpzntxhdzh", new UserAssignedIdentityProperty(),
                                "rlhrxs", new UserAssignedIdentityProperty(), "ehhseyvjusrts",
                                new UserAssignedIdentityProperty(), "ahvljuaha", new UserAssignedIdentityProperty())))
                        .withTls(new SignalRTlsSettings().withClientCertEnabled(false))
                        .withFeatures(
                            Arrays
                                .asList(
                                    new SignalRFeature().withFlag(FeatureFlags.ENABLE_LIVE_TRACE)
                                        .withValue("vlopwiyighx")
                                        .withProperties(mapOf("baumnyqupedeoj", "wzbaiue", "ckhsmtxpsieb", "a")),
                                    new SignalRFeature().withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                                        .withValue("hvpesapskrdqm")
                                        .withProperties(mapOf("uutkncw", "dhtldwkyz", "wrupqsxvnmicykvc", "cwsvlxotog",
                                            "eil", "o"))))
                        .withLiveTraceConfiguration(new LiveTraceConfiguration().withEnabled("oty")
                            .withCategories(Arrays.asList(new LiveTraceCategory())))
                        .withResourceLogConfiguration(
                            new ResourceLogConfiguration().withCategories(Arrays.asList(new ResourceLogCategory(),
                                new ResourceLogCategory(), new ResourceLogCategory(), new ResourceLogCategory())))
                        .withCors(new SignalRCorsSettings().withAllowedOrigins(Arrays.asList("nxdhbt")))
                        .withServerless(new ServerlessSettings().withConnectionTimeoutInSeconds(59412891))
                        .withUpstream(new ServerlessUpstreamSettings()
                            .withTemplates(Arrays.asList(new UpstreamTemplate().withUrlTemplate("nv"),
                                new UpstreamTemplate().withUrlTemplate("t"),
                                new UpstreamTemplate().withUrlTemplate("qnermclfplphoxu"),
                                new UpstreamTemplate().withUrlTemplate("crpab"))))
                        .withNetworkACLs(new SignalRNetworkACLs().withDefaultAction(AclAction.ALLOW)
                            .withPublicNetwork(new NetworkAcl().withAllow(Arrays.asList(SignalRRequestType.TRACE))
                                .withDeny(Arrays.asList(SignalRRequestType.TRACE)))
                            .withPrivateEndpoints(Arrays.asList(
                                new PrivateEndpointAcl().withName("xywpmueefjzwfqkq"),
                                new PrivateEndpointAcl().withName("jidsuyonobglaoc"))))
                        .withPublicNetworkAccess("tcc")
                        .withDisableLocalAuth(true)
                        .withDisableAadAuth(false),
                    new SignalRResourceInner().withLocation("bsrfbj")
                        .withTags(mapOf("sotftpvj", "w"))
                        .withSku(new ResourceSku().withName("vbvmeu")
                            .withTier(SignalRSkuTier.PREMIUM)
                            .withCapacity(1178618137))
                        .withKind(ServiceKind.SIGNALR)
                        .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("szjfauvjfdxxivet", new UserAssignedIdentityProperty(),
                                "bhsfxob", new UserAssignedIdentityProperty(), "shqjohxcrsbf",
                                new UserAssignedIdentityProperty())))
                        .withTls(new SignalRTlsSettings().withClientCertEnabled(true))
                        .withFeatures(Arrays.asList(new SignalRFeature().withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                            .withValue("smv")
                            .withProperties(mapOf("isxyawjoyaqcslyj", "yjsflhhcaalnji", "nelixhnrztfo", "kiidzyex",
                                "xknalaulppg", "hb", "gvpgy", "dtpnapnyiropuhp"))))
                        .withLiveTraceConfiguration(new LiveTraceConfiguration().withEnabled("git")
                            .withCategories(Arrays.asList(new LiveTraceCategory(), new LiveTraceCategory(),
                                new LiveTraceCategory())))
                        .withResourceLogConfiguration(
                            new ResourceLogConfiguration().withCategories(Arrays.asList(new ResourceLogCategory())))
                        .withCors(new SignalRCorsSettings()
                            .withAllowedOrigins(Arrays.asList("ynqwwncwzzhxgk", "rmgucnap", "t")))
                        .withServerless(new ServerlessSettings().withConnectionTimeoutInSeconds(1950925712))
                        .withUpstream(new ServerlessUpstreamSettings()
                            .withTemplates(Arrays.asList(new UpstreamTemplate().withUrlTemplate("tfdygpfqb"))))
                        .withNetworkACLs(new SignalRNetworkACLs().withDefaultAction(AclAction.DENY)
                            .withPublicNetwork(new NetworkAcl().withAllow(Arrays.asList(SignalRRequestType.RESTAPI))
                                .withDeny(Arrays.asList(SignalRRequestType.SERVER_CONNECTION,
                                    SignalRRequestType.SERVER_CONNECTION, SignalRRequestType.RESTAPI,
                                    SignalRRequestType.CLIENT_CONNECTION)))
                            .withPrivateEndpoints(Arrays.asList(new PrivateEndpointAcl().withName("ppcqeqxolz"),
                                new PrivateEndpointAcl().withName("ahzxctobgbk"),
                                new PrivateEndpointAcl().withName("moizpos"))))
                        .withPublicNetworkAccess("grcfb")
                        .withDisableLocalAuth(true)
                        .withDisableAadAuth(true),
                    new SignalRResourceInner().withLocation("mkcdyhbpkkpwdre")
                        .withTags(mapOf("w", "vvqfovljxyws", "dsytgadgvr", "yrs", "neqn", "ea", "jfqka", "arrwlquu"))
                        .withSku(new ResourceSku().withName("r").withTier(SignalRSkuTier.FREE).withCapacity(682074960))
                        .withKind(ServiceKind.RAW_WEB_SOCKETS)
                        .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("szdtmhrkwof", new UserAssignedIdentityProperty(),
                                "nwashrtd", new UserAssignedIdentityProperty(), "i", new UserAssignedIdentityProperty(),
                                "fbtkuwhhmhyk", new UserAssignedIdentityProperty())))
                        .withTls(new SignalRTlsSettings().withClientCertEnabled(true))
                        .withFeatures(Arrays.asList(
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                                .withValue("muwlauwzizxbm")
                                .withProperties(mapOf("p", "jefuzmuvpbttdumo", "mnzb", "xe")),
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_LIVE_TRACE)
                                .withValue("hjpglkf")
                                .withProperties(mapOf("lfphsdyhtozfikd", "dneu", "zonosgg", "wwquuvxzxclvithh", "ljuti",
                                    "hcohfwdsjnk")),
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                                .withValue("wacf")
                                .withProperties(mapOf("zewk", "k", "pnppfuf", "vhqcrail", "afcnih", "rwdmhdlxyjrxsa",
                                    "vq", "wqapnedgfbcvk")),
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_LIVE_TRACE)
                                .withValue("keqdcvdrhvoods")
                                .withProperties(mapOf("wmgxcxrsl", "obzdopcjwvnhdl", "rpkhjwn", "mutwuoe",
                                    "dggkzzlvmbmpa", "yqsluic", "yhrfouyftaakcpw", "modfvuefywsbpfvm"))))
                        .withLiveTraceConfiguration(new LiveTraceConfiguration().withEnabled("vqtmnub")
                            .withCategories(Arrays.asList(new LiveTraceCategory(), new LiveTraceCategory(),
                                new LiveTraceCategory())))
                        .withResourceLogConfiguration(new ResourceLogConfiguration()
                            .withCategories(Arrays.asList(new ResourceLogCategory(), new ResourceLogCategory())))
                        .withCors(new SignalRCorsSettings().withAllowedOrigins(Arrays.asList("ndjmquxvyp", "mg")))
                        .withServerless(new ServerlessSettings().withConnectionTimeoutInSeconds(107730122))
                        .withUpstream(new ServerlessUpstreamSettings().withTemplates(
                            Arrays.asList(new UpstreamTemplate().withUrlTemplate("jvp"),
                                new UpstreamTemplate().withUrlTemplate("jqg"))))
                        .withNetworkACLs(new SignalRNetworkACLs().withDefaultAction(AclAction.DENY)
                            .withPublicNetwork(new NetworkAcl()
                                .withAllow(Arrays.asList(SignalRRequestType.CLIENT_CONNECTION,
                                    SignalRRequestType.SERVER_CONNECTION))
                                .withDeny(
                                    Arrays.asList(SignalRRequestType.SERVER_CONNECTION, SignalRRequestType.RESTAPI)))
                            .withPrivateEndpoints(Arrays.asList(new PrivateEndpointAcl().withName("xozap"),
                                new PrivateEndpointAcl().withName("helxprglya"),
                                new PrivateEndpointAcl().withName("dd"))))
                        .withPublicNetworkAccess("cbcuejrjxgciqi")
                        .withDisableLocalAuth(false)
                        .withDisableAadAuth(true)))
                .withNextLink("qkvpuvksgplsakn");
        model = BinaryData.fromObject(model).toObject(SignalRResourceList.class);
        Assertions.assertEquals("debfqkkrbmpukgri", model.value().get(0).location());
        Assertions.assertEquals("zlfbxzpuzycispnq", model.value().get(0).tags().get("ahmgkbrp"));
        Assertions.assertEquals("tpngjcrcczsqpjh", model.value().get(0).sku().name());
        Assertions.assertEquals(SignalRSkuTier.FREE, model.value().get(0).sku().tier());
        Assertions.assertEquals(1901274446, model.value().get(0).sku().capacity());
        Assertions.assertEquals(ServiceKind.SIGNALR, model.value().get(0).kind());
        Assertions.assertEquals(ManagedIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals(true, model.value().get(0).tls().clientCertEnabled());
        Assertions.assertEquals(FeatureFlags.ENABLE_CONNECTIVITY_LOGS, model.value().get(0).features().get(0).flag());
        Assertions.assertEquals("gygev", model.value().get(0).features().get(0).value());
        Assertions.assertEquals("typmrbpizcdrqjsd",
            model.value().get(0).features().get(0).properties().get("ydnfyhxdeoejz"));
        Assertions.assertEquals("lyaxuc", model.value().get(0).liveTraceConfiguration().enabled());
        Assertions.assertEquals("eyp", model.value().get(0).cors().allowedOrigins().get(0));
        Assertions.assertEquals(842863771, model.value().get(0).serverless().connectionTimeoutInSeconds());
        Assertions.assertEquals("lqdqgbiqylihka", model.value().get(0).upstream().templates().get(0).urlTemplate());
        Assertions.assertEquals(AclAction.ALLOW, model.value().get(0).networkACLs().defaultAction());
        Assertions.assertEquals(SignalRRequestType.TRACE,
            model.value().get(0).networkACLs().publicNetwork().allow().get(0));
        Assertions.assertEquals(SignalRRequestType.TRACE,
            model.value().get(0).networkACLs().publicNetwork().deny().get(0));
        Assertions.assertEquals("ctq", model.value().get(0).networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("uwutttxfvjrbi", model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(true, model.value().get(0).disableAadAuth());
        Assertions.assertEquals("qkvpuvksgplsakn", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
