// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.SkuList;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SignalRsListReplicaSkusWithResponseMockTests {
    @Test
    public void testListReplicaSkusWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"resourceType\":\"ohqfzizv\",\"sku\":{\"name\":\"mmkjsvthnwpztek\",\"tier\":\"Basic\",\"size\":\"ibiattg\",\"family\":\"ucfotangcf\",\"capacity\":821874250},\"capacity\":{\"minimum\":1077682035,\"maximum\":809427492,\"default\":1031306393,\"allowedValues\":[2124351290],\"scaleType\":\"None\"}},{\"resourceType\":\"qwm\",\"sku\":{\"name\":\"xnjmxm\",\"tier\":\"Standard\",\"size\":\"dtcvcl\",\"family\":\"npdkv\",\"capacity\":1186529927},\"capacity\":{\"minimum\":979398617,\"maximum\":269435268,\"default\":214346592,\"allowedValues\":[874901455,593163747,203185987],\"scaleType\":\"Manual\"}},{\"resourceType\":\"eiknpgo\",\"sku\":{\"name\":\"jiuqhibtozi\",\"tier\":\"Premium\",\"size\":\"edmurrxxge\",\"family\":\"ktvqylkmqpzoy\",\"capacity\":2005467515},\"capacity\":{\"minimum\":1241682628,\"maximum\":774397044,\"default\":125495169,\"allowedValues\":[325536454],\"scaleType\":\"None\"}},{\"resourceType\":\"injipnwjf\",\"sku\":{\"name\":\"qlafcbahhpzpofoi\",\"tier\":\"Free\",\"size\":\"filkmkkholv\",\"family\":\"dviauogp\",\"capacity\":1546671556},\"capacity\":{\"minimum\":1965289703,\"maximum\":887059851,\"default\":1904382549,\"allowedValues\":[2049992940,1475609054],\"scaleType\":\"None\"}}],\"nextLink\":\"n\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SignalRManager manager =
            SignalRManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SkuList response =
            manager
                .signalRs()
                .listReplicaSkusWithResponse(
                    "qcbfrmbodths", "qgvriibakcla", "jfrnxousxauzlwv", com.azure.core.util.Context.NONE)
                .getValue();
    }
}
