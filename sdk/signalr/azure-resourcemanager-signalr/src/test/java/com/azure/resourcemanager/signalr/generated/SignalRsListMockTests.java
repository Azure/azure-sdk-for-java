// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.AclAction;
import com.azure.resourcemanager.signalr.models.FeatureFlags;
import com.azure.resourcemanager.signalr.models.ManagedIdentityType;
import com.azure.resourcemanager.signalr.models.ServiceKind;
import com.azure.resourcemanager.signalr.models.SignalRRequestType;
import com.azure.resourcemanager.signalr.models.SignalRResource;
import com.azure.resourcemanager.signalr.models.SignalRSkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SignalRsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"name\":\"wafqroud\",\"tier\":\"Basic\",\"size\":\"vehhrvkbunzozu\",\"family\":\"cxgkmoyxcdyui\",\"capacity\":1002212342},\"properties\":{\"provisioningState\":\"Canceled\",\"externalIP\":\"zydvfvf\",\"hostName\":\"naeo\",\"publicPort\":1738473188,\"serverPort\":1226403170,\"version\":\"gorf\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"privateEndpoint\":{},\"groupIds\":[\"hwplefaxvx\",\"l\",\"btgn\",\"nzeyqxtjj\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"qlqhycavodg\",\"name\":\"xdbeesmieknl\",\"type\":\"ariaawi\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"privateEndpoint\":{},\"groupIds\":[\"bylyrfgia\",\"tcojocqwo\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"nzjvusfzldm\",\"name\":\"zuxylfsbtkadpyso\",\"type\":\"nbtgkbugrjqctoj\"},{\"properties\":{\"provisioningState\":\"Updating\",\"privateEndpoint\":{},\"groupIds\":[\"ypefojyqdhcupl\",\"plcwkhi\",\"ihlhzdsqtzb\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"gnowcjhfgmveca\",\"name\":\"txmwoteyow\",\"type\":\"luqovekqvg\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"fzmpjwyivq\",\"privateLinkResourceId\":\"kfxcvhrfs\",\"provisioningState\":\"Unknown\",\"requestMessage\":\"grttikteusqczk\",\"status\":\"Approved\"},\"id\":\"lxubyj\",\"name\":\"ff\",\"type\":\"mfblcqcuubg\"},{\"properties\":{\"groupId\":\"rtalmet\",\"privateLinkResourceId\":\"t\",\"provisioningState\":\"Canceled\",\"requestMessage\":\"lqxihhrmooiz\",\"status\":\"Timeout\"},\"id\":\"ypxiutcxap\",\"name\":\"hyrpetogebjoxs\",\"type\":\"hvnh\"},{\"properties\":{\"groupId\":\"rqnkkzjcjbtr\",\"privateLinkResourceId\":\"aehvvibrxjjstoq\",\"provisioningState\":\"Moving\",\"requestMessage\":\"pkxztmoobkl\",\"status\":\"Disconnected\"},\"id\":\"dgfcwqmp\",\"name\":\"maqxzhemjyh\",\"type\":\"hujswtwkozzwcul\"}],\"tls\":{\"clientCertEnabled\":false},\"hostNamePrefix\":\"fajnjwltlwtjjguk\",\"features\":[{\"flag\":\"EnableMessagingLogs\",\"value\":\"snv\",\"properties\":{\"mlnwiaaomylweazu\":\"mxzrpoa\",\"hwwn\":\"cse\"}},{\"flag\":\"EnableLiveTrace\",\"value\":\"hlf\",\"properties\":{\"fb\":\"pchwa\",\"l\":\"usnfepgfewet\"}},{\"flag\":\"EnableConnectivityLogs\",\"value\":\"gncxykxhdj\",\"properties\":{\"rxvxcjzh\":\"mmbcxfhbcp\",\"qscjavftjuh\":\"izxfpxt\"}}],\"liveTraceConfiguration\":{\"enabled\":\"zkmtgguwpijrajci\",\"categories\":[{\"name\":\"hfcf\",\"enabled\":\"rxgkne\"},{\"name\":\"yinzqodfvpgs\",\"enabled\":\"xgsg\"},{\"name\":\"fgzdjtxvz\",\"enabled\":\"bqvgaqv\"},{\"name\":\"a\",\"enabled\":\"qusrdvetnws\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"wlduyc\",\"enabled\":\"zhyrmewipmve\"},{\"name\":\"xukuqgsj\",\"enabled\":\"undxgketw\"},{\"name\":\"hzjhf\",\"enabled\":\"hvvmuvgpmun\"}]},\"cors\":{\"allowedOrigins\":[\"vmhfbuz\",\"yihsasbhudypohyu\"]},\"serverless\":{\"connectionTimeoutInSeconds\":189904532},\"upstream\":{\"templates\":[{\"hubPattern\":\"yrpfoobrlttymsj\",\"eventPattern\":\"gqdnfwqzd\",\"categoryPattern\":\"tilaxh\",\"urlTemplate\":\"fhqlyvi\",\"auth\":{}}]},\"networkACLs\":{\"defaultAction\":\"Allow\",\"publicNetwork\":{\"allow\":[\"RESTAPI\",\"Trace\",\"ServerConnection\"],\"deny\":[\"ServerConnection\",\"RESTAPI\"]},\"privateEndpoints\":[{\"name\":\"rtikvcpwpg\",\"allow\":[\"Trace\"],\"deny\":[\"ClientConnection\",\"ServerConnection\"]},{\"name\":\"oxfrkenxpmyyefr\",\"allow\":[\"Trace\",\"ClientConnection\",\"ClientConnection\",\"ServerConnection\"],\"deny\":[\"Trace\"]},{\"name\":\"waoqvmmb\",\"allow\":[\"ClientConnection\"],\"deny\":[\"ServerConnection\",\"Trace\"]},{\"name\":\"kzmegnitgvkxlz\",\"allow\":[\"ClientConnection\"],\"deny\":[\"RESTAPI\"]}]},\"publicNetworkAccess\":\"ealzxwhcansymoyq\",\"disableLocalAuth\":false,\"disableAadAuth\":true},\"kind\":\"RawWebSockets\",\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"e\":{\"principalId\":\"omfaj\",\"clientId\":\"asqvd\"},\"xasicddyvvjskg\":{\"principalId\":\"guxak\",\"clientId\":\"qzhzbezkgimsi\"},\"eaahhvjhhn\":{\"principalId\":\"ocwah\",\"clientId\":\"gat\"}},\"principalId\":\"zybbj\",\"tenantId\":\"dj\"},\"location\":\"yxkyxvx\",\"tags\":{\"dnlj\":\"lbj\",\"aulx\":\"age\"},\"id\":\"nsmjbnkppxynen\",\"name\":\"svxeizzgwklnsr\",\"type\":\"ffeycx\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SignalRManager manager = SignalRManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SignalRResource> response = manager.signalRs().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("yxkyxvx", response.iterator().next().location());
        Assertions.assertEquals("lbj", response.iterator().next().tags().get("dnlj"));
        Assertions.assertEquals("wafqroud", response.iterator().next().sku().name());
        Assertions.assertEquals(SignalRSkuTier.BASIC, response.iterator().next().sku().tier());
        Assertions.assertEquals(1002212342, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ServiceKind.RAW_WEB_SOCKETS, response.iterator().next().kind());
        Assertions.assertEquals(ManagedIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals(false, response.iterator().next().tls().clientCertEnabled());
        Assertions.assertEquals(FeatureFlags.ENABLE_MESSAGING_LOGS,
            response.iterator().next().features().get(0).flag());
        Assertions.assertEquals("snv", response.iterator().next().features().get(0).value());
        Assertions.assertEquals("mxzrpoa",
            response.iterator().next().features().get(0).properties().get("mlnwiaaomylweazu"));
        Assertions.assertEquals("zkmtgguwpijrajci", response.iterator().next().liveTraceConfiguration().enabled());
        Assertions.assertEquals("hfcf", response.iterator().next().liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("rxgkne",
            response.iterator().next().liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("wlduyc",
            response.iterator().next().resourceLogConfiguration().categories().get(0).name());
        Assertions.assertEquals("zhyrmewipmve",
            response.iterator().next().resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("vmhfbuz", response.iterator().next().cors().allowedOrigins().get(0));
        Assertions.assertEquals(189904532, response.iterator().next().serverless().connectionTimeoutInSeconds());
        Assertions.assertEquals("yrpfoobrlttymsj",
            response.iterator().next().upstream().templates().get(0).hubPattern());
        Assertions.assertEquals("gqdnfwqzd", response.iterator().next().upstream().templates().get(0).eventPattern());
        Assertions.assertEquals("tilaxh", response.iterator().next().upstream().templates().get(0).categoryPattern());
        Assertions.assertEquals("fhqlyvi", response.iterator().next().upstream().templates().get(0).urlTemplate());
        Assertions.assertEquals(AclAction.ALLOW, response.iterator().next().networkACLs().defaultAction());
        Assertions.assertEquals(SignalRRequestType.RESTAPI,
            response.iterator().next().networkACLs().publicNetwork().allow().get(0));
        Assertions.assertEquals(SignalRRequestType.SERVER_CONNECTION,
            response.iterator().next().networkACLs().publicNetwork().deny().get(0));
        Assertions.assertEquals(SignalRRequestType.TRACE,
            response.iterator().next().networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions.assertEquals(SignalRRequestType.CLIENT_CONNECTION,
            response.iterator().next().networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("rtikvcpwpg",
            response.iterator().next().networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("ealzxwhcansymoyq", response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(true, response.iterator().next().disableAadAuth());
    }
}
