// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.AclAction;
import com.azure.resourcemanager.signalr.models.FeatureFlags;
import com.azure.resourcemanager.signalr.models.ManagedIdentityType;
import com.azure.resourcemanager.signalr.models.ServiceKind;
import com.azure.resourcemanager.signalr.models.SignalRRequestType;
import com.azure.resourcemanager.signalr.models.SignalRResource;
import com.azure.resourcemanager.signalr.models.SignalRSkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SignalRsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"sku\":{\"name\":\"bunzozudh\",\"tier\":\"Premium\",\"size\":\"moy\",\"family\":\"dyuib\",\"capacity\":595382657},\"properties\":{\"provisioningState\":\"Creating\",\"externalIP\":\"ydvfvfcjnae\",\"hostName\":\"srvhmgorffuki\",\"publicPort\":1917370345,\"serverPort\":1204565564,\"version\":\"hwplefaxvx\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Creating\",\"privateEndpoint\":{},\"groupIds\":[\"zeyqxtjjfzqlqhyc\",\"vodggxdbee\",\"mieknlraria\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"uagydwqfbylyrf\",\"name\":\"iagtc\",\"type\":\"jocqwogfnzjvusf\"},{\"properties\":{\"provisioningState\":\"Running\",\"privateEndpoint\":{},\"groupIds\":[\"xylfsb\",\"kadpysown\",\"tgkbugrjqctojc\",\"isofieypefojyqd\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"plcplcwkhi\",\"name\":\"ihlhzdsqtzb\",\"type\":\"rgnowcjhfgm\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"ctxmwoteyowcluq\",\"privateLinkResourceId\":\"vekqvgqo\",\"provisioningState\":\"Running\",\"requestMessage\":\"zmpjwyiv\",\"status\":\"Approved\"},\"id\":\"f\",\"name\":\"cvhrfsp\",\"type\":\"uagrttikteusqc\"}],\"tls\":{\"clientCertEnabled\":true},\"hostNamePrefix\":\"lxubyj\",\"features\":[{\"flag\":\"EnableLiveTrace\",\"value\":\"mfblcqcuubg\",\"properties\":{\"t\":\"rtalmet\"}},{\"flag\":\"EnableLiveTrace\",\"value\":\"dslqxihhrmooizqs\",\"properties\":{\"pzhyr\":\"xiutcx\",\"joxslhvnhla\":\"etoge\"}},{\"flag\":\"EnableMessagingLogs\",\"value\":\"q\",\"properties\":{\"aehvvibrxjjstoq\":\"zjcjbtr\",\"bklftidgfcwqmpim\":\"eitpkxztmo\",\"yhohujswtwkozzwc\":\"qxzhem\"}}],\"liveTraceConfiguration\":{\"enabled\":\"bawpfajnjwltlwt\",\"categories\":[{\"name\":\"ktalhsnvkcdmxz\",\"enabled\":\"oaimlnw\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"ylweazulc\",\"enabled\":\"thwwn\"},{\"name\":\"hlf\",\"enabled\":\"wpchwahf\"}]},\"cors\":{\"allowedOrigins\":[\"nfepgf\",\"wetwlyxgncxykxh\",\"jhlimmbcxfhbcpo\",\"xvxcjzhq\"]},\"serverless\":{\"connectionTimeoutInSeconds\":1212582847},\"upstream\":{\"templates\":[{\"hubPattern\":\"qscjavftjuh\",\"eventPattern\":\"azkmtgguwp\",\"categoryPattern\":\"r\",\"urlTemplate\":\"jcivmmg\",\"auth\":{}},{\"hubPattern\":\"fiwrxgkn\",\"eventPattern\":\"vyi\",\"categoryPattern\":\"qodfvp\",\"urlTemplate\":\"shoxgsgb\",\"auth\":{}},{\"hubPattern\":\"zdjtxvzflbqv\",\"eventPattern\":\"qvlgafcqusrdvetn\",\"categoryPattern\":\"dtutnwldu\",\"urlTemplate\":\"cvuzhyrmewipmve\",\"auth\":{}},{\"hubPattern\":\"ukuqgsj\",\"eventPattern\":\"undxgketw\",\"categoryPattern\":\"hzjhf\",\"urlTemplate\":\"mhv\",\"auth\":{}}]},\"networkACLs\":{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"ServerConnection\",\"ClientConnection\",\"ServerConnection\"],\"deny\":[\"ServerConnection\",\"ServerConnection\"]},\"privateEndpoints\":[{\"name\":\"buzjyih\",\"allow\":[\"ClientConnection\",\"Trace\"],\"deny\":[\"ClientConnection\"]},{\"name\":\"pohyuemslynsqyr\",\"allow\":[\"ServerConnection\",\"Trace\",\"Trace\"],\"deny\":[\"ClientConnection\",\"ClientConnection\"]},{\"name\":\"msjnygqdnfw\",\"allow\":[\"ServerConnection\",\"ServerConnection\"],\"deny\":[\"ClientConnection\",\"ServerConnection\"]}]},\"publicNetworkAccess\":\"hnfhqlyvijouwi\",\"disableLocalAuth\":true,\"disableAadAuth\":true},\"kind\":\"SignalR\",\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"lrcivtsoxfrke\":{\"principalId\":\"ti\",\"clientId\":\"cpwpg\"},\"lkzmegnitgvkxl\":{\"principalId\":\"pmyyefrpmpdnqq\",\"clientId\":\"awaoqvmmbnpqfrt\"},\"lwigdivbkbx\":{\"principalId\":\"qdrfegcealzxwhc\",\"clientId\":\"symoyq\"},\"e\":{\"principalId\":\"mf\",\"clientId\":\"uwasqvd\"}},\"principalId\":\"guxak\",\"tenantId\":\"qzhzbezkgimsi\"},\"location\":\"asi\",\"tags\":{\"wa\":\"yvvjskgfmo\",\"tjeaahhvjhh\":\"pqg\",\"bbjjidjksyxk\":\"akz\",\"euaulxu\":\"xvxevblbjednljla\"},\"id\":\"smjbnkppxyn\",\"name\":\"nlsvxeiz\",\"type\":\"gwklnsr\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SignalRManager manager =
            SignalRManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SignalRResource> response = manager.signalRs().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("asi", response.iterator().next().location());
        Assertions.assertEquals("yvvjskgfmo", response.iterator().next().tags().get("wa"));
        Assertions.assertEquals("bunzozudh", response.iterator().next().sku().name());
        Assertions.assertEquals(SignalRSkuTier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals(595382657, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ServiceKind.SIGNALR, response.iterator().next().kind());
        Assertions.assertEquals(ManagedIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals(true, response.iterator().next().tls().clientCertEnabled());
        Assertions.assertEquals(FeatureFlags.ENABLE_LIVE_TRACE, response.iterator().next().features().get(0).flag());
        Assertions.assertEquals("mfblcqcuubg", response.iterator().next().features().get(0).value());
        Assertions.assertEquals("rtalmet", response.iterator().next().features().get(0).properties().get("t"));
        Assertions.assertEquals("bawpfajnjwltlwt", response.iterator().next().liveTraceConfiguration().enabled());
        Assertions
            .assertEquals(
                "ktalhsnvkcdmxz", response.iterator().next().liveTraceConfiguration().categories().get(0).name());
        Assertions
            .assertEquals("oaimlnw", response.iterator().next().liveTraceConfiguration().categories().get(0).enabled());
        Assertions
            .assertEquals(
                "ylweazulc", response.iterator().next().resourceLogConfiguration().categories().get(0).name());
        Assertions
            .assertEquals("thwwn", response.iterator().next().resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("nfepgf", response.iterator().next().cors().allowedOrigins().get(0));
        Assertions.assertEquals(1212582847, response.iterator().next().serverless().connectionTimeoutInSeconds());
        Assertions.assertEquals("qscjavftjuh", response.iterator().next().upstream().templates().get(0).hubPattern());
        Assertions.assertEquals("azkmtgguwp", response.iterator().next().upstream().templates().get(0).eventPattern());
        Assertions.assertEquals("r", response.iterator().next().upstream().templates().get(0).categoryPattern());
        Assertions.assertEquals("jcivmmg", response.iterator().next().upstream().templates().get(0).urlTemplate());
        Assertions.assertEquals(AclAction.DENY, response.iterator().next().networkACLs().defaultAction());
        Assertions
            .assertEquals(
                SignalRRequestType.SERVER_CONNECTION,
                response.iterator().next().networkACLs().publicNetwork().allow().get(0));
        Assertions
            .assertEquals(
                SignalRRequestType.SERVER_CONNECTION,
                response.iterator().next().networkACLs().publicNetwork().deny().get(0));
        Assertions
            .assertEquals(
                SignalRRequestType.CLIENT_CONNECTION,
                response.iterator().next().networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions
            .assertEquals(
                SignalRRequestType.CLIENT_CONNECTION,
                response.iterator().next().networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("buzjyih", response.iterator().next().networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("hnfhqlyvijouwi", response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals(true, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(true, response.iterator().next().disableAadAuth());
    }
}
