// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.AclAction;
import com.azure.resourcemanager.signalr.models.FeatureFlags;
import com.azure.resourcemanager.signalr.models.LiveTraceCategory;
import com.azure.resourcemanager.signalr.models.LiveTraceConfiguration;
import com.azure.resourcemanager.signalr.models.ManagedIdentity;
import com.azure.resourcemanager.signalr.models.ManagedIdentityType;
import com.azure.resourcemanager.signalr.models.NetworkAcl;
import com.azure.resourcemanager.signalr.models.PrivateEndpointAcl;
import com.azure.resourcemanager.signalr.models.ResourceLogCategory;
import com.azure.resourcemanager.signalr.models.ResourceLogConfiguration;
import com.azure.resourcemanager.signalr.models.ResourceSku;
import com.azure.resourcemanager.signalr.models.ServerlessSettings;
import com.azure.resourcemanager.signalr.models.ServerlessUpstreamSettings;
import com.azure.resourcemanager.signalr.models.ServiceKind;
import com.azure.resourcemanager.signalr.models.SignalRCorsSettings;
import com.azure.resourcemanager.signalr.models.SignalRFeature;
import com.azure.resourcemanager.signalr.models.SignalRNetworkACLs;
import com.azure.resourcemanager.signalr.models.SignalRRequestType;
import com.azure.resourcemanager.signalr.models.SignalRResource;
import com.azure.resourcemanager.signalr.models.SignalRSkuTier;
import com.azure.resourcemanager.signalr.models.SignalRTlsSettings;
import com.azure.resourcemanager.signalr.models.UpstreamAuthSettings;
import com.azure.resourcemanager.signalr.models.UpstreamTemplate;
import com.azure.resourcemanager.signalr.models.UserAssignedIdentityProperty;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SignalRsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"ooqjagmditgueio\",\"tier\":\"Standard\",\"size\":\"sahrtdtpdel\",\"family\":\"cslmotoebnfxo\",\"capacity\":1425919318},\"properties\":{\"provisioningState\":\"Succeeded\",\"externalIP\":\"irazftxejwabmd\",\"hostName\":\"tmvcop\",\"publicPort\":206055715,\"serverPort\":1931798752,\"version\":\"rbuhhlky\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Moving\",\"privateEndpoint\":{},\"groupIds\":[\"wkffdjkt\",\"ysidfvclgl\",\"n\",\"uijtkbu\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"ogsf\",\"name\":\"kayi\",\"type\":\"nsharujtjiqxfzyj\"},{\"properties\":{\"provisioningState\":\"Unknown\",\"privateEndpoint\":{},\"groupIds\":[\"hjpenuygbq\",\"qqekewvnqvcdlgu\",\"ucmfdj\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"laxpunj\",\"name\":\"ikczvvitacgxmf\",\"type\":\"sserxhtvsoxhlwn\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"privateEndpoint\":{},\"groupIds\":[\"y\",\"ruuuybnch\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"zizoyuely\",\"name\":\"tn\",\"type\":\"nb\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"agfl\",\"privateLinkResourceId\":\"lgmtrwahzjmucf\",\"provisioningState\":\"Unknown\",\"requestMessage\":\"plrohkpigq\",\"status\":\"Approved\"},\"id\":\"u\",\"name\":\"kzmkwklsnoxaxmqe\",\"type\":\"alhhjnhgwydyynfs\"},{\"properties\":{\"groupId\":\"gbv\",\"privateLinkResourceId\":\"ta\",\"provisioningState\":\"Running\",\"requestMessage\":\"dlpukhpyrne\",\"status\":\"Rejected\"},\"id\":\"cpeogkhnmgbrou\",\"name\":\"ddbhf\",\"type\":\"pfpazjzoywjxhpdu\"},{\"properties\":{\"groupId\":\"tacnpqwtehtuev\",\"privateLinkResourceId\":\"hrljy\",\"provisioningState\":\"Moving\",\"requestMessage\":\"xh\",\"status\":\"Rejected\"},\"id\":\"uug\",\"name\":\"bsre\",\"type\":\"rfqkfuar\"}],\"tls\":{\"clientCertEnabled\":true},\"hostNamePrefix\":\"htkln\",\"features\":[{\"flag\":\"ServiceMode\",\"value\":\"vvkyfedevjboslcq\",\"properties\":{\"ymc\":\"okkhminq\"}},{\"flag\":\"EnableMessagingLogs\",\"value\":\"gn\",\"properties\":{\"wuninv\":\"x\",\"h\":\"db\"}}],\"liveTraceConfiguration\":{\"enabled\":\"tvq\",\"categories\":[{\"name\":\"ct\",\"enabled\":\"xdtddmflhuytxzv\"},{\"name\":\"napxbannovv\",\"enabled\":\"czytprwn\"},{\"name\":\"roevyt\",\"enabled\":\"okrrrouuxv\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"crymodizrxklobd\",\"enabled\":\"azpmkmlmv\"},{\"name\":\"f\",\"enabled\":\"op\"},{\"name\":\"bzxliohrdddtfgxq\",\"enabled\":\"wpcbbnzqcy\"},{\"name\":\"apqofyuicdhz\",\"enabled\":\"ybww\"}]},\"cors\":{\"allowedOrigins\":[\"ibidmhmwffp\",\"fmuvapckccr\",\"vwe\",\"oxoyyukp\"]},\"serverless\":{\"connectionTimeoutInSeconds\":1490735732},\"upstream\":{\"templates\":[{\"hubPattern\":\"oqboshbragapyyr\",\"eventPattern\":\"svbpavbopfppdbwn\",\"categoryPattern\":\"gahxkumasjcaa\",\"urlTemplate\":\"fdmmcpug\",\"auth\":{}},{\"hubPattern\":\"qepvufhbzeh\",\"eventPattern\":\"hoqhnl\",\"categoryPattern\":\"nbldxeaclgschori\",\"urlTemplate\":\"krsrrmoucs\",\"auth\":{}}]},\"networkACLs\":{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"Trace\"],\"deny\":[\"Trace\"]},\"privateEndpoints\":[{\"name\":\"eolhbhlvbmx\",\"allow\":[\"Trace\",\"ClientConnection\",\"RESTAPI\"],\"deny\":[\"Trace\",\"RESTAPI\",\"Trace\",\"RESTAPI\"]},{\"name\":\"b\",\"allow\":[\"RESTAPI\",\"ClientConnection\"],\"deny\":[\"RESTAPI\"]}]},\"publicNetworkAccess\":\"lkjxnqpvwgf\",\"disableLocalAuth\":true,\"disableAadAuth\":false},\"kind\":\"RawWebSockets\",\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"gc\":{\"principalId\":\"aoaf\",\"clientId\":\"uqvoxmycjimryv\"},\"wefohecbvo\":{\"principalId\":\"pbmz\",\"clientId\":\"esyds\"},\"vbrdfjmzsyzfho\":{\"principalId\":\"ndyqleal\",\"clientId\":\"lmtkhlowkxx\"},\"rtws\":{\"principalId\":\"h\",\"clientId\":\"cyychunsjlp\"}},\"principalId\":\"vv\",\"tenantId\":\"c\"},\"location\":\"vtrrmhwrbfdpyflu\",\"tags\":{\"ocu\":\"jgl\",\"n\":\"zlwhhmemhooclu\",\"jk\":\"qmemc\",\"rryejylmbkzudnig\":\"mykyujxsglhs\"},\"id\":\"fihotj\",\"name\":\"wlpxuzzjg\",\"type\":\"refqy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SignalRManager manager = SignalRManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SignalRResource response
            = manager.signalRs()
                .define("uojqt")
                .withRegion("usxjbaqehg")
                .withExistingResourceGroup("lgouwtlmjj")
                .withTags(mapOf("xncnwfe", "hzjqatucoige", "cgbjbgdlfgt", "bnwgfmxj", "naquflq", "y", "zeqyjleziun",
                    "ctqhamzjrwdk"))
                .withSku(
                    new ResourceSku().withName("axkjeytunlbfjk").withTier(SignalRSkuTier.FREE).withCapacity(1762253481))
                .withKind(ServiceKind.SIGNALR)
                .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf("onwpnga", new UserAssignedIdentityProperty(), "jfjmyccxlzh",
                        new UserAssignedIdentityProperty(), "txrdcqtjvi", new UserAssignedIdentityProperty(), "ecjxe",
                        new UserAssignedIdentityProperty())))
                .withTls(new SignalRTlsSettings().withClientCertEnabled(true))
                .withFeatures(
                    Arrays
                        .asList(
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                                .withValue("ivbgkcv")
                                .withProperties(mapOf("yp", "zvuqdflvon", "idibgqjxgpn", "pubcpzgpxtivhjk",
                                    "kqmhhaowjr", "hgovfgp")),
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_LIVE_TRACE)
                                .withValue("vuporqzdfuydzv")
                                .withProperties(mapOf("ggdhbemzqkzszuw", "xcnqmxqpswokmvkh", "ljfp", "wtglxx",
                                    "pqcbfrmbodthsq", "picrmnzhrgmqgjsx")),
                            new SignalRFeature().withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                                .withValue("vriibakclacjfr")
                                .withProperties(mapOf("uzlwvsgmw", "usx", "izvu", "hqf", "vmribiat", "mmkjsvthnwpztek",
                                    "zcugswvxwlmzqw", "gplucfotangcfhny"))))
                .withLiveTraceConfiguration(new LiveTraceConfiguration().withEnabled("xnjmxm")
                    .withCategories(Arrays.asList(new LiveTraceCategory().withName("dtcvcl").withEnabled("npdkv"),
                        new LiveTraceCategory().withName("abuiy").withEnabled("buzphdugn"),
                        new LiveTraceCategory().withName("knpgoxgjiuq").withEnabled("btozipqwje"))))
                .withResourceLogConfiguration(new ResourceLogConfiguration().withCategories(
                    Arrays.asList(new ResourceLogCategory().withName("xxgewpk").withEnabled("qylkmqpzoyhlf"),
                        new ResourceLogCategory().withName("gwgcl").withEnabled("oebqinjipn"),
                        new ResourceLogCategory().withName("fujqlafcba").withEnabled("pzpofoiyjw"))))
                .withCors(new SignalRCorsSettings().withAllowedOrigins(
                    Arrays.asList("kmkkholvdnd", "iauogphuartv", "iukyefchnmna", "mnxhkxjqirwrweo")))
                .withServerless(new ServerlessSettings().withConnectionTimeoutInSeconds(641060199))
                .withUpstream(new ServerlessUpstreamSettings()
                    .withTemplates(Arrays.asList(new UpstreamTemplate().withHubPattern("wrsnewmozqvbu")
                        .withEventPattern("ma")
                        .withCategoryPattern("sycxhxzgaz")
                        .withUrlTemplate("taboidvmf")
                        .withAuth(new UpstreamAuthSettings()))))
                .withNetworkACLs(new SignalRNetworkACLs().withDefaultAction(AclAction.DENY)
                    .withPublicNetwork(new NetworkAcl().withAllow(Arrays.asList(SignalRRequestType.SERVER_CONNECTION))
                        .withDeny(Arrays.asList(SignalRRequestType.SERVER_CONNECTION, SignalRRequestType.RESTAPI,
                            SignalRRequestType.CLIENT_CONNECTION, SignalRRequestType.SERVER_CONNECTION)))
                    .withPrivateEndpoints(Arrays.asList(
                        new PrivateEndpointAcl().withAllow(Arrays.asList(SignalRRequestType.SERVER_CONNECTION))
                            .withDeny(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.RESTAPI,
                                SignalRRequestType.CLIENT_CONNECTION))
                            .withName("dherngbtcj"),
                        new PrivateEndpointAcl()
                            .withAllow(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.TRACE))
                            .withDeny(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.TRACE,
                                SignalRRequestType.CLIENT_CONNECTION))
                            .withName("kauxof"),
                        new PrivateEndpointAcl()
                            .withAllow(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.SERVER_CONNECTION,
                                SignalRRequestType.SERVER_CONNECTION, SignalRRequestType.CLIENT_CONNECTION))
                            .withDeny(Arrays.asList(SignalRRequestType.SERVER_CONNECTION, SignalRRequestType.TRACE,
                                SignalRRequestType.TRACE))
                            .withName("aiywzejywhsl"),
                        new PrivateEndpointAcl().withAllow(Arrays.asList(SignalRRequestType.TRACE))
                            .withDeny(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.RESTAPI,
                                SignalRRequestType.CLIENT_CONNECTION, SignalRRequestType.CLIENT_CONNECTION))
                            .withName("wrpqafgfugsnnf"))))
                .withPublicNetworkAccess("ctfjgtixr")
                .withDisableLocalAuth(false)
                .withDisableAadAuth(true)
                .create();

        Assertions.assertEquals("vtrrmhwrbfdpyflu", response.location());
        Assertions.assertEquals("jgl", response.tags().get("ocu"));
        Assertions.assertEquals("ooqjagmditgueio", response.sku().name());
        Assertions.assertEquals(SignalRSkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals(1425919318, response.sku().capacity());
        Assertions.assertEquals(ServiceKind.RAW_WEB_SOCKETS, response.kind());
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(true, response.tls().clientCertEnabled());
        Assertions.assertEquals(FeatureFlags.SERVICE_MODE, response.features().get(0).flag());
        Assertions.assertEquals("vvkyfedevjboslcq", response.features().get(0).value());
        Assertions.assertEquals("okkhminq", response.features().get(0).properties().get("ymc"));
        Assertions.assertEquals("tvq", response.liveTraceConfiguration().enabled());
        Assertions.assertEquals("ct", response.liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("xdtddmflhuytxzv", response.liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("crymodizrxklobd", response.resourceLogConfiguration().categories().get(0).name());
        Assertions.assertEquals("azpmkmlmv", response.resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("ibidmhmwffp", response.cors().allowedOrigins().get(0));
        Assertions.assertEquals(1490735732, response.serverless().connectionTimeoutInSeconds());
        Assertions.assertEquals("oqboshbragapyyr", response.upstream().templates().get(0).hubPattern());
        Assertions.assertEquals("svbpavbopfppdbwn", response.upstream().templates().get(0).eventPattern());
        Assertions.assertEquals("gahxkumasjcaa", response.upstream().templates().get(0).categoryPattern());
        Assertions.assertEquals("fdmmcpug", response.upstream().templates().get(0).urlTemplate());
        Assertions.assertEquals(AclAction.DENY, response.networkACLs().defaultAction());
        Assertions.assertEquals(SignalRRequestType.TRACE, response.networkACLs().publicNetwork().allow().get(0));
        Assertions.assertEquals(SignalRRequestType.TRACE, response.networkACLs().publicNetwork().deny().get(0));
        Assertions.assertEquals(SignalRRequestType.TRACE,
            response.networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions.assertEquals(SignalRRequestType.TRACE,
            response.networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("eolhbhlvbmx", response.networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("lkjxnqpvwgf", response.publicNetworkAccess());
        Assertions.assertEquals(true, response.disableLocalAuth());
        Assertions.assertEquals(false, response.disableAadAuth());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
