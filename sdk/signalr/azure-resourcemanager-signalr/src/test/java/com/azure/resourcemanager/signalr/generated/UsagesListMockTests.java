// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.SignalRUsage;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsagesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"id\":\"wpzdqtvhcspo\",\"currentValue\":7851073221681739012,\"limit\":4118287642102521584,\"name\":{\"value\":\"etgbebjfulb\",\"localizedValue\":\"ichdlpn\"},\"unit\":\"ubntnbatzviqsow\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SignalRManager manager = SignalRManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SignalRUsage> response
            = manager.usages().list("qotoihiqakydiwfb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wpzdqtvhcspo", response.iterator().next().id());
        Assertions.assertEquals(7851073221681739012L, response.iterator().next().currentValue());
        Assertions.assertEquals(4118287642102521584L, response.iterator().next().limit());
        Assertions.assertEquals("etgbebjfulb", response.iterator().next().name().value());
        Assertions.assertEquals("ichdlpn", response.iterator().next().name().localizedValue());
        Assertions.assertEquals("ubntnbatzviqsow", response.iterator().next().unit());
    }
}
