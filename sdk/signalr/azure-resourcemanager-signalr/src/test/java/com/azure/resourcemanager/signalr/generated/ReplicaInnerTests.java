// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.signalr.fluent.models.ReplicaInner;
import com.azure.resourcemanager.signalr.models.ResourceSku;
import com.azure.resourcemanager.signalr.models.SignalRSkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ReplicaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicaInner model =
            BinaryData
                .fromString(
                    "{\"sku\":{\"name\":\"zuxylfsbtkadpyso\",\"tier\":\"Premium\",\"size\":\"gkbugrjqct\",\"family\":\"cmisofie\",\"capacity\":860547851},\"properties\":{\"provisioningState\":\"Running\",\"regionEndpointEnabled\":\"qdhcu\",\"resourceStopped\":\"cp\"},\"location\":\"wkhihihlhzdsqt\",\"tags\":{\"ecactx\":\"rgnowcjhfgm\"},\"id\":\"wotey\",\"name\":\"wcluqovekqvgq\",\"type\":\"uwifzmpjwyiv\"}")
                .toObject(ReplicaInner.class);
        Assertions.assertEquals("wkhihihlhzdsqt", model.location());
        Assertions.assertEquals("rgnowcjhfgm", model.tags().get("ecactx"));
        Assertions.assertEquals("zuxylfsbtkadpyso", model.sku().name());
        Assertions.assertEquals(SignalRSkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals(860547851, model.sku().capacity());
        Assertions.assertEquals("qdhcu", model.regionEndpointEnabled());
        Assertions.assertEquals("cp", model.resourceStopped());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicaInner model =
            new ReplicaInner()
                .withLocation("wkhihihlhzdsqt")
                .withTags(mapOf("ecactx", "rgnowcjhfgm"))
                .withSku(
                    new ResourceSku()
                        .withName("zuxylfsbtkadpyso")
                        .withTier(SignalRSkuTier.PREMIUM)
                        .withCapacity(860547851))
                .withRegionEndpointEnabled("qdhcu")
                .withResourceStopped("cp");
        model = BinaryData.fromObject(model).toObject(ReplicaInner.class);
        Assertions.assertEquals("wkhihihlhzdsqt", model.location());
        Assertions.assertEquals("rgnowcjhfgm", model.tags().get("ecactx"));
        Assertions.assertEquals("zuxylfsbtkadpyso", model.sku().name());
        Assertions.assertEquals(SignalRSkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals(860547851, model.sku().capacity());
        Assertions.assertEquals("qdhcu", model.regionEndpointEnabled());
        Assertions.assertEquals("cp", model.resourceStopped());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
