// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.signalr.models.AclAction;
import com.azure.resourcemanager.signalr.models.NetworkAcl;
import com.azure.resourcemanager.signalr.models.PrivateEndpointAcl;
import com.azure.resourcemanager.signalr.models.SignalRNetworkACLs;
import com.azure.resourcemanager.signalr.models.SignalRRequestType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SignalRNetworkACLsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SignalRNetworkACLs model = BinaryData.fromString(
            "{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"RESTAPI\"],\"deny\":[\"Trace\",\"Trace\",\"ClientConnection\"]},\"privateEndpoints\":[{\"name\":\"xdyuxzejnt\",\"allow\":[\"RESTAPI\",\"ServerConnection\",\"Trace\",\"ClientConnection\"],\"deny\":[\"ServerConnection\"]},{\"name\":\"ukry\",\"allow\":[\"ClientConnection\",\"RESTAPI\"],\"deny\":[\"ClientConnection\",\"ServerConnection\",\"ServerConnection\",\"ServerConnection\"]},{\"name\":\"ggufhyaomtb\",\"allow\":[\"RESTAPI\",\"ServerConnection\"],\"deny\":[\"RESTAPI\"]},{\"name\":\"kffovjzhpjbibgjm\",\"allow\":[\"ClientConnection\",\"Trace\"],\"deny\":[\"Trace\",\"ServerConnection\",\"ClientConnection\"]}]}")
            .toObject(SignalRNetworkACLs.class);
        Assertions.assertEquals(AclAction.DENY, model.defaultAction());
        Assertions.assertEquals(SignalRRequestType.RESTAPI, model.publicNetwork().allow().get(0));
        Assertions.assertEquals(SignalRRequestType.TRACE, model.publicNetwork().deny().get(0));
        Assertions.assertEquals(SignalRRequestType.RESTAPI, model.privateEndpoints().get(0).allow().get(0));
        Assertions.assertEquals(SignalRRequestType.SERVER_CONNECTION, model.privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("xdyuxzejnt", model.privateEndpoints().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SignalRNetworkACLs model = new SignalRNetworkACLs().withDefaultAction(AclAction.DENY)
            .withPublicNetwork(new NetworkAcl().withAllow(Arrays.asList(SignalRRequestType.RESTAPI))
                .withDeny(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.TRACE,
                    SignalRRequestType.CLIENT_CONNECTION)))
            .withPrivateEndpoints(Arrays.asList(
                new PrivateEndpointAcl()
                    .withAllow(Arrays.asList(SignalRRequestType.RESTAPI, SignalRRequestType.SERVER_CONNECTION,
                        SignalRRequestType.TRACE, SignalRRequestType.CLIENT_CONNECTION))
                    .withDeny(Arrays.asList(SignalRRequestType.SERVER_CONNECTION))
                    .withName("xdyuxzejnt"),
                new PrivateEndpointAcl()
                    .withAllow(Arrays.asList(SignalRRequestType.CLIENT_CONNECTION, SignalRRequestType.RESTAPI))
                    .withDeny(Arrays.asList(SignalRRequestType.CLIENT_CONNECTION, SignalRRequestType.SERVER_CONNECTION,
                        SignalRRequestType.SERVER_CONNECTION, SignalRRequestType.SERVER_CONNECTION))
                    .withName("ukry"),
                new PrivateEndpointAcl()
                    .withAllow(Arrays.asList(SignalRRequestType.RESTAPI, SignalRRequestType.SERVER_CONNECTION))
                    .withDeny(Arrays.asList(SignalRRequestType.RESTAPI))
                    .withName("ggufhyaomtb"),
                new PrivateEndpointAcl()
                    .withAllow(Arrays.asList(SignalRRequestType.CLIENT_CONNECTION, SignalRRequestType.TRACE))
                    .withDeny(Arrays.asList(SignalRRequestType.TRACE, SignalRRequestType.SERVER_CONNECTION,
                        SignalRRequestType.CLIENT_CONNECTION))
                    .withName("kffovjzhpjbibgjm")));
        model = BinaryData.fromObject(model).toObject(SignalRNetworkACLs.class);
        Assertions.assertEquals(AclAction.DENY, model.defaultAction());
        Assertions.assertEquals(SignalRRequestType.RESTAPI, model.publicNetwork().allow().get(0));
        Assertions.assertEquals(SignalRRequestType.TRACE, model.publicNetwork().deny().get(0));
        Assertions.assertEquals(SignalRRequestType.RESTAPI, model.privateEndpoints().get(0).allow().get(0));
        Assertions.assertEquals(SignalRRequestType.SERVER_CONNECTION, model.privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("xdyuxzejnt", model.privateEndpoints().get(0).name());
    }
}
