// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.signalr.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.signalr.models.PrivateEndpoint;
import com.azure.resourcemanager.signalr.models.PrivateEndpointConnectionList;
import com.azure.resourcemanager.signalr.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.signalr.models.PrivateLinkServiceConnectionStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{\"id\":\"ejwcwwqiok\"},\"groupIds\":[\"xmojmsvpkjp\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"fz\",\"actionsRequired\":\"jyxgtczh\"}},\"id\":\"ydbsd\",\"name\":\"hmkxmaehvbb\",\"type\":\"uripltfnhtba\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"privateEndpoint\":{\"id\":\"ckpyklyhplu\"},\"groupIds\":[\"vruu\",\"lgzi\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"tgk\",\"actionsRequired\":\"tvdxeclzedqb\"}},\"id\":\"vh\",\"name\":\"lhpl\",\"type\":\"dqkdlwwqfbu\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"privateEndpoint\":{\"id\":\"jfsmlmbtxhwgfwsr\"},\"groupIds\":[\"coezbrhubskh\",\"dyg\",\"ookk\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"vleo\",\"actionsRequired\":\"ml\"}},\"id\":\"iqtqzfavyvnq\",\"name\":\"ybar\",\"type\":\"euayjkqabqgzsles\"},{\"properties\":{\"provisioningState\":\"Creating\",\"privateEndpoint\":{\"id\":\"ntiew\"},\"groupIds\":[\"vbquwr\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"gohbuffkmrq\",\"actionsRequired\":\"vvhmxtdrj\"}},\"id\":\"utacoe\",\"name\":\"jvewzcjznmwcp\",\"type\":\"guaadraufactkahz\"}],\"nextLink\":\"ajjziuxxpshne\"}")
            .toObject(PrivateEndpointConnectionList.class);
        Assertions.assertEquals("ejwcwwqiok", model.value().get(0).privateEndpoint().id());
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.REJECTED,
            model.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("fz", model.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("jyxgtczh", model.value().get(0).privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("ajjziuxxpshne", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionList model
            = new PrivateEndpointConnectionList()
                .withValue(Arrays.asList(
                    new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint().withId("ejwcwwqiok"))
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateLinkServiceConnectionStatus.REJECTED)
                            .withDescription("fz")
                            .withActionsRequired("jyxgtczh")),
                    new PrivateEndpointConnectionInner()
                        .withPrivateEndpoint(new PrivateEndpoint().withId("ckpyklyhplu"))
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateLinkServiceConnectionStatus.APPROVED)
                            .withDescription("tgk")
                            .withActionsRequired("tvdxeclzedqb")),
                    new PrivateEndpointConnectionInner()
                        .withPrivateEndpoint(new PrivateEndpoint().withId("jfsmlmbtxhwgfwsr"))
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateLinkServiceConnectionStatus.PENDING)
                            .withDescription("vleo")
                            .withActionsRequired("ml")),
                    new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint().withId("ntiew"))
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateLinkServiceConnectionStatus.REJECTED)
                            .withDescription("gohbuffkmrq")
                            .withActionsRequired("vvhmxtdrj"))))
                .withNextLink("ajjziuxxpshne");
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionList.class);
        Assertions.assertEquals("ejwcwwqiok", model.value().get(0).privateEndpoint().id());
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.REJECTED,
            model.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("fz", model.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("jyxgtczh", model.value().get(0).privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("ajjziuxxpshne", model.nextLink());
    }
}
