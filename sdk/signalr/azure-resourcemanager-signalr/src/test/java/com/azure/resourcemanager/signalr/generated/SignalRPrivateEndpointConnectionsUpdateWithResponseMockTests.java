// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.signalr.models.PrivateEndpoint;
import com.azure.resourcemanager.signalr.models.PrivateEndpointConnection;
import com.azure.resourcemanager.signalr.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.signalr.models.PrivateLinkServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SignalRPrivateEndpointConnectionsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{\"id\":\"znnhd\"},\"groupIds\":[\"tgjcsgguxheml\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"eczgfb\",\"actionsRequired\":\"klelssxb\"}},\"id\":\"ycsxzu\",\"name\":\"ksrl\",\"type\":\"mdesqp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SignalRManager manager = SignalRManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.signalRPrivateEndpointConnections()
            .updateWithResponse("y", "rhpw", "gddeimaw",
                new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint().withId("muikjcjcaztbws"))
                    .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                        .withStatus(PrivateLinkServiceConnectionStatus.DISCONNECTED)
                        .withDescription("lvhbwrnf")
                        .withActionsRequired("gddpq")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("znnhd", response.privateEndpoint().id());
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.PENDING,
            response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("eczgfb", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("klelssxb", response.privateLinkServiceConnectionState().actionsRequired());
    }
}
