// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.SkuList;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SignalRsListSkusWithResponseMockTests {
    @Test
    public void testListSkusWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"resourceType\":\"mbnkb\",\"sku\":{\"name\":\"qvxkd\",\"tier\":\"Basic\",\"size\":\"heb\",\"family\":\"swbzuwfmdurage\",\"capacity\":1912120593},\"capacity\":{\"minimum\":2034109305,\"maximum\":2073266063,\"default\":1132204031,\"allowedValues\":[1329122271],\"scaleType\":\"None\"}},{\"resourceType\":\"gbqi\",\"sku\":{\"name\":\"xkbsazgakgac\",\"tier\":\"Standard\",\"size\":\"jdmspofapvuhryln\",\"family\":\"frzgbzjed\",\"capacity\":1946171356},\"capacity\":{\"minimum\":247999147,\"maximum\":162758827,\"default\":1553181859,\"allowedValues\":[444730016,917017780,663058389,2051570067],\"scaleType\":\"Automatic\"}},{\"resourceType\":\"f\",\"sku\":{\"name\":\"snvpdibmi\",\"tier\":\"Free\",\"size\":\"bzbkiw\",\"family\":\"qnyophzfyls\",\"capacity\":362710224},\"capacity\":{\"minimum\":652938143,\"maximum\":734228564,\"default\":1369473795,\"allowedValues\":[691935711,262075273,12099501],\"scaleType\":\"Manual\"}},{\"resourceType\":\"w\",\"sku\":{\"name\":\"wl\",\"tier\":\"Standard\",\"size\":\"etnpsihcl\",\"family\":\"zvaylptrsqqw\",\"capacity\":794270999},\"capacity\":{\"minimum\":544384144,\"maximum\":899185817,\"default\":96806467,\"allowedValues\":[1038627609,719164524,816573779],\"scaleType\":\"Automatic\"}}],\"nextLink\":\"jkjexf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SignalRManager manager =
            SignalRManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SkuList response =
            manager.signalRs().listSkusWithResponse("f", "pofvwb", com.azure.core.util.Context.NONE).getValue();
    }
}
