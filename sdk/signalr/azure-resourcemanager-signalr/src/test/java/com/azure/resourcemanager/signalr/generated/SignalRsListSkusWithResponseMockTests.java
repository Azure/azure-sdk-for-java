// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.signalr.SignalRManager;
import com.azure.resourcemanager.signalr.models.SkuList;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SignalRsListSkusWithResponseMockTests {
    @Test
    public void testListSkusWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"resourceType\":\"fhxwrsne\",\"sku\":{\"name\":\"ozqvbubqmam\",\"tier\":\"Standard\",\"size\":\"xhxzgazttaboidvm\",\"family\":\"hppubowsepdfgkmt\",\"capacity\":2120323807},\"capacity\":{\"minimum\":343818307,\"maximum\":784188527,\"default\":151823445,\"allowedValues\":[812344780,1780706475,1263292916,155784561],\"scaleType\":\"None\"}},{\"resourceType\":\"kauxof\",\"sku\":{\"name\":\"fphwpnu\",\"tier\":\"Basic\",\"size\":\"wzejywhslw\",\"family\":\"jpllndnpdwrpq\",\"capacity\":822689438},\"capacity\":{\"minimum\":1169799061,\"maximum\":813335965,\"default\":1546371971,\"allowedValues\":[291808500,1701232505],\"scaleType\":\"Manual\"}},{\"resourceType\":\"pococtfjgt\",\"sku\":{\"name\":\"rjvzuyt\",\"tier\":\"Basic\",\"size\":\"muowolbauiro\",\"family\":\"ons\",\"capacity\":269423729},\"capacity\":{\"minimum\":1957887263,\"maximum\":2022776068,\"default\":1491253083,\"allowedValues\":[1937164138,1566256657,850455603,1627836178],\"scaleType\":\"Manual\"}}],\"nextLink\":\"mjfjmyccxlzhcox\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SignalRManager manager =
            SignalRManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SkuList response =
            manager
                .signalRs()
                .listSkusWithResponse("hmnxhkxjqi", "wrweoo", com.azure.core.util.Context.NONE)
                .getValue();
    }
}
