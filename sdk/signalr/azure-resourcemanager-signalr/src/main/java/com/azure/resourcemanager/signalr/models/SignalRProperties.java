// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.signalr.fluent.models.PrivateEndpointConnectionInner;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * A class that describes the properties of the SignalR service that should contain more read-only properties than
 * AzSignalR.Models.SignalRCreateOrUpdateProperties.
 */
@Fluent
public final class SignalRProperties extends SignalRCreateOrUpdateProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SignalRProperties.class);

    /*
     * Provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The publicly accessible IP of the SignalR service.
     */
    @JsonProperty(value = "externalIP", access = JsonProperty.Access.WRITE_ONLY)
    private String externalIp;

    /*
     * FQDN of the SignalR service instance. Format: xxx.service.signalr.net
     */
    @JsonProperty(value = "hostName", access = JsonProperty.Access.WRITE_ONLY)
    private String hostname;

    /*
     * The publicly accessible port of the SignalR service which is designed
     * for browser/client side usage.
     */
    @JsonProperty(value = "publicPort", access = JsonProperty.Access.WRITE_ONLY)
    private Integer publicPort;

    /*
     * The publicly accessible port of the SignalR service which is designed
     * for customer server side usage.
     */
    @JsonProperty(value = "serverPort", access = JsonProperty.Access.WRITE_ONLY)
    private Integer serverPort;

    /*
     * Version of the SignalR resource. Probably you need the same or higher
     * version of client SDKs.
     */
    @JsonProperty(value = "version", access = JsonProperty.Access.WRITE_ONLY)
    private String version;

    /*
     * Private endpoint connections to the SignalR resource.
     */
    @JsonProperty(value = "privateEndpointConnections", access = JsonProperty.Access.WRITE_ONLY)
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * TLS settings.
     */
    @JsonProperty(value = "tls")
    private SignalRTlsSettings tls;

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the externalIp property: The publicly accessible IP of the SignalR service.
     *
     * @return the externalIp value.
     */
    public String externalIp() {
        return this.externalIp;
    }

    /**
     * Get the hostname property: FQDN of the SignalR service instance. Format: xxx.service.signalr.net.
     *
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the publicPort property: The publicly accessible port of the SignalR service which is designed for
     * browser/client side usage.
     *
     * @return the publicPort value.
     */
    public Integer publicPort() {
        return this.publicPort;
    }

    /**
     * Get the serverPort property: The publicly accessible port of the SignalR service which is designed for customer
     * server side usage.
     *
     * @return the serverPort value.
     */
    public Integer serverPort() {
        return this.serverPort;
    }

    /**
     * Get the version property: Version of the SignalR resource. Probably you need the same or higher version of client
     * SDKs.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the privateEndpointConnections property: Private endpoint connections to the SignalR resource.
     *
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the tls property: TLS settings.
     *
     * @return the tls value.
     */
    public SignalRTlsSettings tls() {
        return this.tls;
    }

    /**
     * Set the tls property: TLS settings.
     *
     * @param tls the tls value to set.
     * @return the SignalRProperties object itself.
     */
    public SignalRProperties withTls(SignalRTlsSettings tls) {
        this.tls = tls;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SignalRProperties withFeatures(List<SignalRFeature> features) {
        super.withFeatures(features);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SignalRProperties withCors(SignalRCorsSettings cors) {
        super.withCors(cors);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SignalRProperties withUpstream(ServerlessUpstreamSettings upstream) {
        super.withUpstream(upstream);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SignalRProperties withNetworkACLs(SignalRNetworkACLs networkACLs) {
        super.withNetworkACLs(networkACLs);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
        if (tls() != null) {
            tls().validate();
        }
    }
}
