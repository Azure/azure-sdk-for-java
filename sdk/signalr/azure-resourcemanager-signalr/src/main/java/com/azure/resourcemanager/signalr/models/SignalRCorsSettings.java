// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Cross-Origin Resource Sharing (CORS) settings.
 */
@Fluent
public final class SignalRCorsSettings implements JsonSerializable<SignalRCorsSettings> {
    /*
     * Gets or sets the list of origins that should be allowed to make cross-origin calls (for example:
     * http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
     */
    private List<String> allowedOrigins;

    /**
     * Creates an instance of SignalRCorsSettings class.
     */
    public SignalRCorsSettings() {
    }

    /**
     * Get the allowedOrigins property: Gets or sets the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
     * 
     * @return the allowedOrigins value.
     */
    public List<String> allowedOrigins() {
        return this.allowedOrigins;
    }

    /**
     * Set the allowedOrigins property: Gets or sets the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
     * 
     * @param allowedOrigins the allowedOrigins value to set.
     * @return the SignalRCorsSettings object itself.
     */
    public SignalRCorsSettings withAllowedOrigins(List<String> allowedOrigins) {
        this.allowedOrigins = allowedOrigins;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("allowedOrigins", this.allowedOrigins,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SignalRCorsSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SignalRCorsSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SignalRCorsSettings.
     */
    public static SignalRCorsSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SignalRCorsSettings deserializedSignalRCorsSettings = new SignalRCorsSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedOrigins".equals(fieldName)) {
                    List<String> allowedOrigins = reader.readArray(reader1 -> reader1.getString());
                    deserializedSignalRCorsSettings.allowedOrigins = allowedOrigins;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSignalRCorsSettings;
        });
    }
}
