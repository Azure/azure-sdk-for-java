// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Settings used to provision or configure the resource. */
@Fluent
public class SignalRCreateOrUpdateProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SignalRCreateOrUpdateProperties.class);

    /*
     * List of SignalR featureFlags. e.g. ServiceMode.
     *
     * FeatureFlags that are not included in the parameters for the update
     * operation will not be modified.
     * And the response will only include featureFlags that are explicitly set.
     * When a featureFlag is not explicitly set, SignalR service will use its
     * globally default value.
     * But keep in mind, the default value doesn't mean "false". It varies in
     * terms of different FeatureFlags.
     */
    @JsonProperty(value = "features")
    private List<SignalRFeature> features;

    /*
     * Cross-Origin Resource Sharing (CORS) settings.
     */
    @JsonProperty(value = "cors")
    private SignalRCorsSettings cors;

    /*
     * Upstream settings when the Azure SignalR is in server-less mode.
     */
    @JsonProperty(value = "upstream")
    private ServerlessUpstreamSettings upstream;

    /*
     * Network ACLs
     */
    @JsonProperty(value = "networkACLs")
    private SignalRNetworkACLs networkACLs;

    /**
     * Get the features property: List of SignalR featureFlags. e.g. ServiceMode.
     *
     * <p>FeatureFlags that are not included in the parameters for the update operation will not be modified. And the
     * response will only include featureFlags that are explicitly set. When a featureFlag is not explicitly set,
     * SignalR service will use its globally default value. But keep in mind, the default value doesn't mean "false". It
     * varies in terms of different FeatureFlags.
     *
     * @return the features value.
     */
    public List<SignalRFeature> features() {
        return this.features;
    }

    /**
     * Set the features property: List of SignalR featureFlags. e.g. ServiceMode.
     *
     * <p>FeatureFlags that are not included in the parameters for the update operation will not be modified. And the
     * response will only include featureFlags that are explicitly set. When a featureFlag is not explicitly set,
     * SignalR service will use its globally default value. But keep in mind, the default value doesn't mean "false". It
     * varies in terms of different FeatureFlags.
     *
     * @param features the features value to set.
     * @return the SignalRCreateOrUpdateProperties object itself.
     */
    public SignalRCreateOrUpdateProperties withFeatures(List<SignalRFeature> features) {
        this.features = features;
        return this;
    }

    /**
     * Get the cors property: Cross-Origin Resource Sharing (CORS) settings.
     *
     * @return the cors value.
     */
    public SignalRCorsSettings cors() {
        return this.cors;
    }

    /**
     * Set the cors property: Cross-Origin Resource Sharing (CORS) settings.
     *
     * @param cors the cors value to set.
     * @return the SignalRCreateOrUpdateProperties object itself.
     */
    public SignalRCreateOrUpdateProperties withCors(SignalRCorsSettings cors) {
        this.cors = cors;
        return this;
    }

    /**
     * Get the upstream property: Upstream settings when the Azure SignalR is in server-less mode.
     *
     * @return the upstream value.
     */
    public ServerlessUpstreamSettings upstream() {
        return this.upstream;
    }

    /**
     * Set the upstream property: Upstream settings when the Azure SignalR is in server-less mode.
     *
     * @param upstream the upstream value to set.
     * @return the SignalRCreateOrUpdateProperties object itself.
     */
    public SignalRCreateOrUpdateProperties withUpstream(ServerlessUpstreamSettings upstream) {
        this.upstream = upstream;
        return this;
    }

    /**
     * Get the networkACLs property: Network ACLs.
     *
     * @return the networkACLs value.
     */
    public SignalRNetworkACLs networkACLs() {
        return this.networkACLs;
    }

    /**
     * Set the networkACLs property: Network ACLs.
     *
     * @param networkACLs the networkACLs value to set.
     * @return the SignalRCreateOrUpdateProperties object itself.
     */
    public SignalRCreateOrUpdateProperties withNetworkACLs(SignalRNetworkACLs networkACLs) {
        this.networkACLs = networkACLs;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (features() != null) {
            features().forEach(e -> e.validate());
        }
        if (cors() != null) {
            cors().validate();
        }
        if (upstream() != null) {
            upstream().validate();
        }
        if (networkACLs() != null) {
            networkACLs().validate();
        }
    }
}
