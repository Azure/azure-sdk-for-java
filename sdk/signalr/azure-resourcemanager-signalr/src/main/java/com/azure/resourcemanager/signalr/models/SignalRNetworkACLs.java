// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Network ACLs for the resource.
 */
@Fluent
public final class SignalRNetworkACLs implements JsonSerializable<SignalRNetworkACLs> {
    /*
     * Azure Networking ACL Action.
     */
    private AclAction defaultAction;

    /*
     * Network ACL
     */
    private NetworkAcl publicNetwork;

    /*
     * ACLs for requests from private endpoints
     */
    private List<PrivateEndpointAcl> privateEndpoints;

    /**
     * Creates an instance of SignalRNetworkACLs class.
     */
    public SignalRNetworkACLs() {
    }

    /**
     * Get the defaultAction property: Azure Networking ACL Action.
     * 
     * @return the defaultAction value.
     */
    public AclAction defaultAction() {
        return this.defaultAction;
    }

    /**
     * Set the defaultAction property: Azure Networking ACL Action.
     * 
     * @param defaultAction the defaultAction value to set.
     * @return the SignalRNetworkACLs object itself.
     */
    public SignalRNetworkACLs withDefaultAction(AclAction defaultAction) {
        this.defaultAction = defaultAction;
        return this;
    }

    /**
     * Get the publicNetwork property: Network ACL.
     * 
     * @return the publicNetwork value.
     */
    public NetworkAcl publicNetwork() {
        return this.publicNetwork;
    }

    /**
     * Set the publicNetwork property: Network ACL.
     * 
     * @param publicNetwork the publicNetwork value to set.
     * @return the SignalRNetworkACLs object itself.
     */
    public SignalRNetworkACLs withPublicNetwork(NetworkAcl publicNetwork) {
        this.publicNetwork = publicNetwork;
        return this;
    }

    /**
     * Get the privateEndpoints property: ACLs for requests from private endpoints.
     * 
     * @return the privateEndpoints value.
     */
    public List<PrivateEndpointAcl> privateEndpoints() {
        return this.privateEndpoints;
    }

    /**
     * Set the privateEndpoints property: ACLs for requests from private endpoints.
     * 
     * @param privateEndpoints the privateEndpoints value to set.
     * @return the SignalRNetworkACLs object itself.
     */
    public SignalRNetworkACLs withPrivateEndpoints(List<PrivateEndpointAcl> privateEndpoints) {
        this.privateEndpoints = privateEndpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publicNetwork() != null) {
            publicNetwork().validate();
        }
        if (privateEndpoints() != null) {
            privateEndpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("defaultAction", this.defaultAction == null ? null : this.defaultAction.toString());
        jsonWriter.writeJsonField("publicNetwork", this.publicNetwork);
        jsonWriter.writeArrayField("privateEndpoints", this.privateEndpoints,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SignalRNetworkACLs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SignalRNetworkACLs if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SignalRNetworkACLs.
     */
    public static SignalRNetworkACLs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SignalRNetworkACLs deserializedSignalRNetworkACLs = new SignalRNetworkACLs();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultAction".equals(fieldName)) {
                    deserializedSignalRNetworkACLs.defaultAction = AclAction.fromString(reader.getString());
                } else if ("publicNetwork".equals(fieldName)) {
                    deserializedSignalRNetworkACLs.publicNetwork = NetworkAcl.fromJson(reader);
                } else if ("privateEndpoints".equals(fieldName)) {
                    List<PrivateEndpointAcl> privateEndpoints
                        = reader.readArray(reader1 -> PrivateEndpointAcl.fromJson(reader1));
                    deserializedSignalRNetworkACLs.privateEndpoints = privateEndpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSignalRNetworkACLs;
        });
    }
}
