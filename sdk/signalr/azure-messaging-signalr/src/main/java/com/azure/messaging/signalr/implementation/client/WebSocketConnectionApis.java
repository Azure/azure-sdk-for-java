// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.signalr.implementation.client;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Head;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in WebSocketConnectionApis. */
public final class WebSocketConnectionApis {
    /** The proxy service used to perform REST calls. */
    private final WebSocketConnectionApisService service;

    /** The service client containing this operation class. */
    private final AzureWebSocketServiceRestAPI client;

    /**
     * Initializes an instance of WebSocketConnectionApis.
     *
     * @param client the instance of the service client containing this operation class.
     */
    WebSocketConnectionApis(AzureWebSocketServiceRestAPI client) {
        this.service = RestProxy.create(WebSocketConnectionApisService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureWebSocketServiceRestAPIWebSocketConnectionApis to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureWebSocketServic")
    private interface WebSocketConnectionApisService {
        @Post("/ws/api/v1")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postDefaultHubBroadcast(
                @HostParam("$host") String host,
                @QueryParam("excluded") String excluded,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> data,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/ws/api/v1")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postDefaultHubBroadcast(
                @HostParam("$host") String host,
                @QueryParam("excluded") String excluded,
                @BodyParam("text/plain") String data,
                Context context);

        @Post("/ws/api/v1/hubs/{hub}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postBroadcast(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @QueryParam("excluded") String excluded,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> data,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/ws/api/v1/hubs/{hub}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postBroadcast(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @QueryParam("excluded") String excluded,
                @BodyParam("text/plain") String data,
                Context context);

        @Post("/ws/api/v1/users/{id}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postSendToDefaultHubUser(
                @HostParam("$host") String host,
                @PathParam("id") String id,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> data,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/ws/api/v1/users/{id}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postSendToDefaultHubUser(
                @HostParam("$host") String host,
                @PathParam("id") String id,
                @BodyParam("text/plain") String data,
                Context context);

        @Post("/ws/api/v1/hubs/{hub}/users/{id}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postSendToUser(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("id") String id,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> data,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/ws/api/v1/hubs/{hub}/users/{id}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postSendToUser(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("id") String id,
                @BodyParam("text/plain") String data,
                Context context);

        @Post("/ws/api/v1/connections/{connectionId}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postSendToDefaultHubConnection(
                @HostParam("$host") String host,
                @PathParam("connectionId") String connectionId,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> data,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/ws/api/v1/connections/{connectionId}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postSendToDefaultHubConnection(
                @HostParam("$host") String host,
                @PathParam("connectionId") String connectionId,
                @BodyParam("text/plain") String data,
                Context context);

        @Get("/ws/api/v1/connections/{connectionId}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getCheckDefaultHubConnectionExistence(
                @HostParam("$host") String host, @PathParam("connectionId") String connectionId, Context context);

        @Head("/ws/api/v1/connections/{connectionId}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> headCheckDefaultHubConnectionExistence(
                @HostParam("$host") String host, @PathParam("connectionId") String connectionId, Context context);

        @Delete("/ws/api/v1/connections/{connectionId}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteCloseDefaultHubClientConnection(
                @HostParam("$host") String host,
                @PathParam("connectionId") String connectionId,
                @QueryParam("reason") String reason,
                Context context);

        @Post("/ws/api/v1/hubs/{hub}/connections/{connectionId}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postSendToConnection(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> data,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/ws/api/v1/hubs/{hub}/connections/{connectionId}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postSendToConnection(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                @BodyParam("text/plain") String data,
                Context context);

        @Get("/ws/api/v1/hubs/{hub}/connections/{connectionId}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getCheckConnectionExistence(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                Context context);

        @Head("/ws/api/v1/hubs/{hub}/connections/{connectionId}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> headCheckConnectionExistence(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                Context context);

        @Delete("/ws/api/v1/hubs/{hub}/connections/{connectionId}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteCloseClientConnection(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                @QueryParam("reason") String reason,
                Context context);

        @Post("/ws/api/v1/groups/{group}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postDefaultHubGroupBroadcast(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @QueryParam("excluded") String excluded,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> data,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/ws/api/v1/groups/{group}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postDefaultHubGroupBroadcast(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @QueryParam("excluded") String excluded,
                @BodyParam("text/plain") String data,
                Context context);

        @Get("/ws/api/v1/groups/{group}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getCheckDefaultHubGroupExistence(
                @HostParam("$host") String host, @PathParam("group") String group, Context context);

        @Head("/ws/api/v1/groups/{group}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> headCheckDefaultHubGroupExistence(
                @HostParam("$host") String host, @PathParam("group") String group, Context context);

        @Post("/ws/api/v1/hubs/{hub}/groups/{group}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postGroupBroadcast(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @QueryParam("excluded") String excluded,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> data,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/ws/api/v1/hubs/{hub}/groups/{group}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postGroupBroadcast(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @QueryParam("excluded") String excluded,
                @BodyParam("text/plain") String data,
                Context context);

        @Get("/ws/api/v1/hubs/{hub}/groups/{group}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getCheckGroupExistence(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                Context context);

        @Head("/ws/api/v1/hubs/{hub}/groups/{group}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> headCheckGroupExistence(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                Context context);

        @Get("/ws/api/v1/users/{user}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getCheckDefaultHubUserExistence(
                @HostParam("$host") String host, @PathParam("user") String user, Context context);

        @Head("/ws/api/v1/users/{user}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> headCheckDefaultHubUserExistence(
                @HostParam("$host") String host, @PathParam("user") String user, Context context);

        @Put("/ws/api/v1/groups/{group}/connections/{connectionId}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putAddConnectionToDefaultHubGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("connectionId") String connectionId,
                Context context);

        @Delete("/ws/api/v1/groups/{group}/connections/{connectionId}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRemoveConnectionFromDefaultHubGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("connectionId") String connectionId,
                Context context);

        @Get("/ws/api/v1/groups/{group}/users/{user}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getCheckUserExistenceInDefaultHubGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("user") String user,
                Context context);

        @Head("/ws/api/v1/groups/{group}/users/{user}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> headCheckUserExistenceInDefaultHubGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("user") String user,
                Context context);

        @Put("/ws/api/v1/groups/{group}/users/{user}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putAddUserToDefaultHubGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("user") String user,
                @QueryParam("ttl") Integer ttl,
                Context context);

        @Delete("/ws/api/v1/groups/{group}/users/{user}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRemoveUserFromDefaultHubGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("user") String user,
                Context context);

        @Delete("/ws/api/v1/users/{user}/groups")
        @ExpectedResponses({200, 202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRemoveUserFromAllDefaultHubGroups(
                @HostParam("$host") String host, @PathParam("user") String user, Context context);

        @Get("/ws/api/v1/hubs/{hub}/users/{user}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getCheckUserExistence(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("user") String user,
                Context context);

        @Head("/ws/api/v1/hubs/{hub}/users/{user}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> headCheckUserExistence(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("user") String user,
                Context context);

        @Put("/ws/api/v1/hubs/{hub}/groups/{group}/connections/{connectionId}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putAddConnectionToGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("connectionId") String connectionId,
                Context context);

        @Delete("/ws/api/v1/hubs/{hub}/groups/{group}/connections/{connectionId}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRemoveConnectionFromGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("connectionId") String connectionId,
                Context context);

        @Get("/ws/api/v1/hubs/{hub}/groups/{group}/users/{user}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getCheckUserExistenceInGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("user") String user,
                Context context);

        @Head("/ws/api/v1/hubs/{hub}/groups/{group}/users/{user}")
        @ExpectedResponses({200, 400, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> headCheckUserExistenceInGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("user") String user,
                Context context);

        @Put("/ws/api/v1/hubs/{hub}/groups/{group}/users/{user}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putAddUserToGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("user") String user,
                @QueryParam("ttl") Integer ttl,
                Context context);

        @Delete("/ws/api/v1/hubs/{hub}/groups/{group}/users/{user}")
        @ExpectedResponses({202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRemoveUserFromGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("user") String user,
                Context context);

        @Delete("/ws/api/v1/hubs/{hub}/users/{user}/groups")
        @ExpectedResponses({200, 202, 400})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRemoveUserFromAllGroups(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("user") String user,
                Context context);
    }

    /**
     * Broadcast content inside request body to all the connected to endpoint "/ws/client".
     *
     * @param data The data parameter.
     * @param contentLength The contentLength parameter.
     * @param excluded Array of Post0ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postDefaultHubBroadcastWithResponseAsync(
            Flux<ByteBuffer> data, long contentLength, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.postDefaultHubBroadcast(this.client.getHost(), excludedConverted, data, contentLength, context);
    }

    /**
     * Broadcast content inside request body to all the connected to endpoint "/ws/client".
     *
     * @param data simple string.
     * @param excluded Array of Post0ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postDefaultHubBroadcastWithResponseAsync(
            String data, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.postDefaultHubBroadcast(this.client.getHost(), excludedConverted, data, context);
    }

    /**
     * Broadcast content inside request body to all the connected connections in the same hub.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param data The data parameter.
     * @param contentLength The contentLength parameter.
     * @param excluded Array of Post1ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postBroadcastWithResponseAsync(
            String hub, Flux<ByteBuffer> data, long contentLength, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.postBroadcast(this.client.getHost(), hub, excludedConverted, data, contentLength, context);
    }

    /**
     * Broadcast content inside request body to all the connected connections in the same hub.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param data simple string.
     * @param excluded Array of Post1ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postBroadcastWithResponseAsync(
            String hub, String data, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.postBroadcast(this.client.getHost(), hub, excludedConverted, data, context);
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param data The data parameter.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postSendToDefaultHubUserWithResponseAsync(
            String id, Flux<ByteBuffer> data, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        return service.postSendToDefaultHubUser(this.client.getHost(), id, data, contentLength, context);
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param data simple string.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postSendToDefaultHubUserWithResponseAsync(String id, String data, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        return service.postSendToDefaultHubUser(this.client.getHost(), id, data, context);
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param id The user Id.
     * @param data The data parameter.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postSendToUserWithResponseAsync(
            String hub, String id, Flux<ByteBuffer> data, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        return service.postSendToUser(this.client.getHost(), hub, id, data, contentLength, context);
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param id The user Id.
     * @param data simple string.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postSendToUserWithResponseAsync(String hub, String id, String data, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        return service.postSendToUser(this.client.getHost(), hub, id, data, context);
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param data The data parameter.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postSendToDefaultHubConnectionWithResponseAsync(
            String connectionId, Flux<ByteBuffer> data, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        return service.postSendToDefaultHubConnection(
                this.client.getHost(), connectionId, data, contentLength, context);
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param data simple string.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postSendToDefaultHubConnectionWithResponseAsync(
            String connectionId, String data, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        return service.postSendToDefaultHubConnection(this.client.getHost(), connectionId, data, context);
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param connectionId The connectionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getCheckDefaultHubConnectionExistenceWithResponseAsync(
            String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.getCheckDefaultHubConnectionExistence(this.client.getHost(), connectionId, context);
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param connectionId The connectionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> headCheckDefaultHubConnectionExistenceWithResponseAsync(
            String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.headCheckDefaultHubConnectionExistence(this.client.getHost(), connectionId, context);
    }

    /**
     * Close the client connection.
     *
     * @param connectionId The connectionId parameter.
     * @param reason The reason parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCloseDefaultHubClientConnectionWithResponseAsync(
            String connectionId, String reason, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.deleteCloseDefaultHubClientConnection(this.client.getHost(), connectionId, reason, context);
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param data The data parameter.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postSendToConnectionWithResponseAsync(
            String hub, String connectionId, Flux<ByteBuffer> data, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        return service.postSendToConnection(this.client.getHost(), hub, connectionId, data, contentLength, context);
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param data simple string.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postSendToConnectionWithResponseAsync(
            String hub, String connectionId, String data, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        return service.postSendToConnection(this.client.getHost(), hub, connectionId, data, context);
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param hub The hub parameter.
     * @param connectionId The connectionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getCheckConnectionExistenceWithResponseAsync(
            String hub, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.getCheckConnectionExistence(this.client.getHost(), hub, connectionId, context);
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param hub The hub parameter.
     * @param connectionId The connectionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> headCheckConnectionExistenceWithResponseAsync(
            String hub, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.headCheckConnectionExistence(this.client.getHost(), hub, connectionId, context);
    }

    /**
     * Close the client connection.
     *
     * @param hub The hub parameter.
     * @param connectionId The connectionId parameter.
     * @param reason The reason parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCloseClientConnectionWithResponseAsync(
            String hub, String connectionId, String reason, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.deleteCloseClientConnection(this.client.getHost(), hub, connectionId, reason, context);
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param data The data parameter.
     * @param contentLength The contentLength parameter.
     * @param excluded Array of String.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postDefaultHubGroupBroadcastWithResponseAsync(
            String group, Flux<ByteBuffer> data, long contentLength, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.postDefaultHubGroupBroadcast(
                this.client.getHost(), group, excludedConverted, data, contentLength, context);
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param data simple string.
     * @param excluded Array of String.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postDefaultHubGroupBroadcastWithResponseAsync(
            String group, String data, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.postDefaultHubGroupBroadcast(this.client.getHost(), group, excludedConverted, data, context);
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param group The group parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getCheckDefaultHubGroupExistenceWithResponseAsync(String group, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        return service.getCheckDefaultHubGroupExistence(this.client.getHost(), group, context);
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param group The group parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> headCheckDefaultHubGroupExistenceWithResponseAsync(String group, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        return service.headCheckDefaultHubGroupExistence(this.client.getHost(), group, context);
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param data The data parameter.
     * @param contentLength The contentLength parameter.
     * @param excluded Array of Post2ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postGroupBroadcastWithResponseAsync(
            String hub,
            String group,
            Flux<ByteBuffer> data,
            long contentLength,
            List<String> excluded,
            Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.postGroupBroadcast(
                this.client.getHost(), hub, group, excludedConverted, data, contentLength, context);
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param data simple string.
     * @param excluded Array of Post2ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postGroupBroadcastWithResponseAsync(
            String hub, String group, String data, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (data == null) {
            return Mono.error(new IllegalArgumentException("Parameter data is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.postGroupBroadcast(this.client.getHost(), hub, group, excludedConverted, data, context);
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param hub The hub parameter.
     * @param group The group parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getCheckGroupExistenceWithResponseAsync(String hub, String group, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        return service.getCheckGroupExistence(this.client.getHost(), hub, group, context);
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param hub The hub parameter.
     * @param group The group parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> headCheckGroupExistenceWithResponseAsync(String hub, String group, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        return service.headCheckGroupExistence(this.client.getHost(), hub, group, context);
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param user The user parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getCheckDefaultHubUserExistenceWithResponseAsync(String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.getCheckDefaultHubUserExistence(this.client.getHost(), user, context);
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param user The user parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> headCheckDefaultHubUserExistenceWithResponseAsync(String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.headCheckDefaultHubUserExistence(this.client.getHost(), user, context);
    }

    /**
     * Add a connection to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putAddConnectionToDefaultHubGroupWithResponseAsync(
            String group, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.putAddConnectionToDefaultHubGroup(this.client.getHost(), group, connectionId, context);
    }

    /**
     * Remove a connection from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRemoveConnectionFromDefaultHubGroupWithResponseAsync(
            String group, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.deleteRemoveConnectionFromDefaultHubGroup(this.client.getHost(), group, connectionId, context);
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getCheckUserExistenceInDefaultHubGroupWithResponseAsync(
            String group, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.getCheckUserExistenceInDefaultHubGroup(this.client.getHost(), group, user, context);
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> headCheckUserExistenceInDefaultHubGroupWithResponseAsync(
            String group, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.headCheckUserExistenceInDefaultHubGroup(this.client.getHost(), group, user, context);
    }

    /**
     * Add a user to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param ttl Specifies the seconds that the user exists in the group. If not set, the user lives in the group
     *     forever.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putAddUserToDefaultHubGroupWithResponseAsync(
            String group, String user, Integer ttl, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.putAddUserToDefaultHubGroup(this.client.getHost(), group, user, ttl, context);
    }

    /**
     * Remove a user from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRemoveUserFromDefaultHubGroupWithResponseAsync(
            String group, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.deleteRemoveUserFromDefaultHubGroup(this.client.getHost(), group, user, context);
    }

    /**
     * Remove a user from all groups.
     *
     * @param user Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRemoveUserFromAllDefaultHubGroupsWithResponseAsync(String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.deleteRemoveUserFromAllDefaultHubGroups(this.client.getHost(), user, context);
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param hub The hub parameter.
     * @param user The user parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getCheckUserExistenceWithResponseAsync(String hub, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.getCheckUserExistence(this.client.getHost(), hub, user, context);
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param hub The hub parameter.
     * @param user The user parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> headCheckUserExistenceWithResponseAsync(String hub, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.headCheckUserExistence(this.client.getHost(), hub, user, context);
    }

    /**
     * Add a connection to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putAddConnectionToGroupWithResponseAsync(
            String hub, String group, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.putAddConnectionToGroup(this.client.getHost(), hub, group, connectionId, context);
    }

    /**
     * Remove a connection from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRemoveConnectionFromGroupWithResponseAsync(
            String hub, String group, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.deleteRemoveConnectionFromGroup(this.client.getHost(), hub, group, connectionId, context);
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getCheckUserExistenceInGroupWithResponseAsync(
            String hub, String group, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.getCheckUserExistenceInGroup(this.client.getHost(), hub, group, user, context);
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> headCheckUserExistenceInGroupWithResponseAsync(
            String hub, String group, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.headCheckUserExistenceInGroup(this.client.getHost(), hub, group, user, context);
    }

    /**
     * Add a user to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param ttl Specifies the seconds that the user exists in the group. If not set, the user lives in the group
     *     forever.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putAddUserToGroupWithResponseAsync(
            String hub, String group, String user, Integer ttl, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.putAddUserToGroup(this.client.getHost(), hub, group, user, ttl, context);
    }

    /**
     * Remove a user from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRemoveUserFromGroupWithResponseAsync(
            String hub, String group, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.deleteRemoveUserFromGroup(this.client.getHost(), hub, group, user, context);
    }

    /**
     * Remove a user from all groups.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param user Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRemoveUserFromAllGroupsWithResponseAsync(
            String hub, String user, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.deleteRemoveUserFromAllGroups(this.client.getHost(), hub, user, context);
    }
}
