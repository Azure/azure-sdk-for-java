/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.signalr.v2020_05_01.implementation;

import com.microsoft.azure.management.signalr.v2020_05_01.ResourceSku;
import java.util.List;
import com.microsoft.azure.management.signalr.v2020_05_01.SignalRFeature;
import com.microsoft.azure.management.signalr.v2020_05_01.SignalRCorsSettings;
import com.microsoft.azure.management.signalr.v2020_05_01.ServerlessUpstreamSettings;
import com.microsoft.azure.management.signalr.v2020_05_01.SignalRNetworkACLs;
import com.microsoft.azure.management.signalr.v2020_05_01.ProvisioningState;
import com.microsoft.azure.management.signalr.v2020_05_01.ServiceKind;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.rest.SkipParentValidation;
import com.microsoft.azure.Resource;

/**
 * A class represent a SignalR service resource.
 */
@JsonFlatten
@SkipParentValidation
public class SignalRResourceInner extends Resource {
    /**
     * The billing information of the resource.(e.g. Free, Standard).
     */
    @JsonProperty(value = "sku")
    private ResourceSku sku;

    /**
     * Prefix for the hostName of the SignalR service. Retained for future use.
     * The hostname will be of format:
     * &amp;lt;hostNamePrefix&amp;gt;.service.signalr.net.
     */
    @JsonProperty(value = "properties.hostNamePrefix")
    private String hostNamePrefix;

    /**
     * List of SignalR featureFlags. e.g. ServiceMode.
     *
     * FeatureFlags that are not included in the parameters for the update
     * operation will not be modified.
     * And the response will only include featureFlags that are explicitly set.
     * When a featureFlag is not explicitly set, SignalR service will use its
     * globally default value.
     * But keep in mind, the default value doesn't mean "false". It varies in
     * terms of different FeatureFlags.
     */
    @JsonProperty(value = "properties.features")
    private List<SignalRFeature> features;

    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     */
    @JsonProperty(value = "properties.cors")
    private SignalRCorsSettings cors;

    /**
     * Upstream settings when the Azure SignalR is in server-less mode.
     */
    @JsonProperty(value = "properties.upstream")
    private ServerlessUpstreamSettings upstream;

    /**
     * Network ACLs.
     */
    @JsonProperty(value = "properties.networkACLs")
    private SignalRNetworkACLs networkACLs;

    /**
     * Provisioning state of the resource. Possible values include: 'Unknown',
     * 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating', 'Updating',
     * 'Deleting', 'Moving'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * The publicly accessible IP of the SignalR service.
     */
    @JsonProperty(value = "properties.externalIP", access = JsonProperty.Access.WRITE_ONLY)
    private String externalIP;

    /**
     * FQDN of the SignalR service instance. Format: xxx.service.signalr.net.
     */
    @JsonProperty(value = "properties.hostName", access = JsonProperty.Access.WRITE_ONLY)
    private String hostName;

    /**
     * The publicly accessible port of the SignalR service which is designed
     * for browser/client side usage.
     */
    @JsonProperty(value = "properties.publicPort", access = JsonProperty.Access.WRITE_ONLY)
    private Integer publicPort;

    /**
     * The publicly accessible port of the SignalR service which is designed
     * for customer server side usage.
     */
    @JsonProperty(value = "properties.serverPort", access = JsonProperty.Access.WRITE_ONLY)
    private Integer serverPort;

    /**
     * Version of the SignalR resource. Probably you need the same or higher
     * version of client SDKs.
     */
    @JsonProperty(value = "properties.version", access = JsonProperty.Access.WRITE_ONLY)
    private String version;

    /**
     * Private endpoint connections to the SignalR resource.
     */
    @JsonProperty(value = "properties.privateEndpointConnections", access = JsonProperty.Access.WRITE_ONLY)
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /**
     * The kind of the service - e.g. "SignalR", or "RawWebSockets" for
     * "Microsoft.SignalRService/SignalR". Possible values include: 'SignalR',
     * 'RawWebSockets'.
     */
    @JsonProperty(value = "kind")
    private ServiceKind kind;

    /**
     * Get the billing information of the resource.(e.g. Free, Standard).
     *
     * @return the sku value
     */
    public ResourceSku sku() {
        return this.sku;
    }

    /**
     * Set the billing information of the resource.(e.g. Free, Standard).
     *
     * @param sku the sku value to set
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withSku(ResourceSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get prefix for the hostName of the SignalR service. Retained for future use.
     The hostname will be of format: &amp;lt;hostNamePrefix&amp;gt;.service.signalr.net.
     *
     * @return the hostNamePrefix value
     */
    public String hostNamePrefix() {
        return this.hostNamePrefix;
    }

    /**
     * Set prefix for the hostName of the SignalR service. Retained for future use.
     The hostname will be of format: &amp;lt;hostNamePrefix&amp;gt;.service.signalr.net.
     *
     * @param hostNamePrefix the hostNamePrefix value to set
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withHostNamePrefix(String hostNamePrefix) {
        this.hostNamePrefix = hostNamePrefix;
        return this;
    }

    /**
     * Get list of SignalR featureFlags. e.g. ServiceMode.
     FeatureFlags that are not included in the parameters for the update operation will not be modified.
     And the response will only include featureFlags that are explicitly set.
     When a featureFlag is not explicitly set, SignalR service will use its globally default value.
     But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
     *
     * @return the features value
     */
    public List<SignalRFeature> features() {
        return this.features;
    }

    /**
     * Set list of SignalR featureFlags. e.g. ServiceMode.
     FeatureFlags that are not included in the parameters for the update operation will not be modified.
     And the response will only include featureFlags that are explicitly set.
     When a featureFlag is not explicitly set, SignalR service will use its globally default value.
     But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
     *
     * @param features the features value to set
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withFeatures(List<SignalRFeature> features) {
        this.features = features;
        return this;
    }

    /**
     * Get cross-Origin Resource Sharing (CORS) settings.
     *
     * @return the cors value
     */
    public SignalRCorsSettings cors() {
        return this.cors;
    }

    /**
     * Set cross-Origin Resource Sharing (CORS) settings.
     *
     * @param cors the cors value to set
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withCors(SignalRCorsSettings cors) {
        this.cors = cors;
        return this;
    }

    /**
     * Get upstream settings when the Azure SignalR is in server-less mode.
     *
     * @return the upstream value
     */
    public ServerlessUpstreamSettings upstream() {
        return this.upstream;
    }

    /**
     * Set upstream settings when the Azure SignalR is in server-less mode.
     *
     * @param upstream the upstream value to set
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withUpstream(ServerlessUpstreamSettings upstream) {
        this.upstream = upstream;
        return this;
    }

    /**
     * Get network ACLs.
     *
     * @return the networkACLs value
     */
    public SignalRNetworkACLs networkACLs() {
        return this.networkACLs;
    }

    /**
     * Set network ACLs.
     *
     * @param networkACLs the networkACLs value to set
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withNetworkACLs(SignalRNetworkACLs networkACLs) {
        this.networkACLs = networkACLs;
        return this;
    }

    /**
     * Get provisioning state of the resource. Possible values include: 'Unknown', 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publicly accessible IP of the SignalR service.
     *
     * @return the externalIP value
     */
    public String externalIP() {
        return this.externalIP;
    }

    /**
     * Get fQDN of the SignalR service instance. Format: xxx.service.signalr.net.
     *
     * @return the hostName value
     */
    public String hostName() {
        return this.hostName;
    }

    /**
     * Get the publicly accessible port of the SignalR service which is designed for browser/client side usage.
     *
     * @return the publicPort value
     */
    public Integer publicPort() {
        return this.publicPort;
    }

    /**
     * Get the publicly accessible port of the SignalR service which is designed for customer server side usage.
     *
     * @return the serverPort value
     */
    public Integer serverPort() {
        return this.serverPort;
    }

    /**
     * Get version of the SignalR resource. Probably you need the same or higher version of client SDKs.
     *
     * @return the version value
     */
    public String version() {
        return this.version;
    }

    /**
     * Get private endpoint connections to the SignalR resource.
     *
     * @return the privateEndpointConnections value
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the kind of the service - e.g. "SignalR", or "RawWebSockets" for "Microsoft.SignalRService/SignalR". Possible values include: 'SignalR', 'RawWebSockets'.
     *
     * @return the kind value
     */
    public ServiceKind kind() {
        return this.kind;
    }

    /**
     * Set the kind of the service - e.g. "SignalR", or "RawWebSockets" for "Microsoft.SignalRService/SignalR". Possible values include: 'SignalR', 'RawWebSockets'.
     *
     * @param kind the kind value to set
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withKind(ServiceKind kind) {
        this.kind = kind;
        return this;
    }

}
