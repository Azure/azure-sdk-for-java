/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.signalr.v2020_05_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.signalr.v2020_05_01.SignalRResource;
import rx.Observable;
import com.microsoft.azure.management.signalr.v2020_05_01.ResourceSku;
import java.util.List;
import com.microsoft.azure.management.signalr.v2020_05_01.SignalRFeature;
import com.microsoft.azure.management.signalr.v2020_05_01.SignalRCorsSettings;
import com.microsoft.azure.management.signalr.v2020_05_01.ServerlessUpstreamSettings;
import com.microsoft.azure.management.signalr.v2020_05_01.SignalRNetworkACLs;
import com.microsoft.azure.management.signalr.v2020_05_01.ProvisioningState;
import com.microsoft.azure.management.signalr.v2020_05_01.ServiceKind;
import java.util.ArrayList;
import com.microsoft.azure.management.signalr.v2020_05_01.PrivateEndpointConnection;

class SignalRResourceImpl extends GroupableResourceCoreImpl<SignalRResource, SignalRResourceInner, SignalRResourceImpl, SignalRManager> implements SignalRResource, SignalRResource.Definition, SignalRResource.Update {
    SignalRResourceImpl(String name, SignalRResourceInner inner, SignalRManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<SignalRResource> createResourceAsync() {
        SignalRsInner client = this.manager().inner().signalRs();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SignalRResource> updateResourceAsync() {
        SignalRsInner client = this.manager().inner().signalRs();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SignalRResourceInner> getInnerAsync() {
        SignalRsInner client = this.manager().inner().signalRs();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public SignalRCorsSettings cors() {
        return this.inner().cors();
    }

    @Override
    public String externalIP() {
        return this.inner().externalIP();
    }

    @Override
    public List<SignalRFeature> features() {
        return this.inner().features();
    }

    @Override
    public String hostName() {
        return this.inner().hostName();
    }

    @Override
    public String hostNamePrefix() {
        return this.inner().hostNamePrefix();
    }

    @Override
    public ServiceKind kind() {
        return this.inner().kind();
    }

    @Override
    public SignalRNetworkACLs networkACLs() {
        return this.inner().networkACLs();
    }

    @Override
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnection> lst = new ArrayList<PrivateEndpointConnection>();
        if (this.inner().privateEndpointConnections() != null) {
            for (PrivateEndpointConnectionInner inner : this.inner().privateEndpointConnections()) {
                lst.add( new PrivateEndpointConnectionImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Integer publicPort() {
        return this.inner().publicPort();
    }

    @Override
    public Integer serverPort() {
        return this.inner().serverPort();
    }

    @Override
    public ResourceSku sku() {
        return this.inner().sku();
    }

    @Override
    public ServerlessUpstreamSettings upstream() {
        return this.inner().upstream();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

    @Override
    public SignalRResourceImpl withCors(SignalRCorsSettings cors) {
        this.inner().withCors(cors);
        return this;
    }

    @Override
    public SignalRResourceImpl withFeatures(List<SignalRFeature> features) {
        this.inner().withFeatures(features);
        return this;
    }

    @Override
    public SignalRResourceImpl withHostNamePrefix(String hostNamePrefix) {
        this.inner().withHostNamePrefix(hostNamePrefix);
        return this;
    }

    @Override
    public SignalRResourceImpl withKind(ServiceKind kind) {
        this.inner().withKind(kind);
        return this;
    }

    @Override
    public SignalRResourceImpl withNetworkACLs(SignalRNetworkACLs networkACLs) {
        this.inner().withNetworkACLs(networkACLs);
        return this;
    }

    @Override
    public SignalRResourceImpl withSku(ResourceSku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public SignalRResourceImpl withUpstream(ServerlessUpstreamSettings upstream) {
        this.inner().withUpstream(upstream);
        return this;
    }

}
