/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.signalr.v2020_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.signalr.v2020_05_01.Usages;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.signalr.v2020_05_01.SignalRUsage;

class UsagesImpl extends WrapperImpl<UsagesInner> implements Usages {
    private final SignalRManager manager;

    UsagesImpl(SignalRManager manager) {
        super(manager.inner().usages());
        this.manager = manager;
    }

    public SignalRManager manager() {
        return this.manager;
    }

    private SignalRUsageImpl wrapModel(SignalRUsageInner inner) {
        return  new SignalRUsageImpl(inner, manager());
    }

    @Override
    public Observable<SignalRUsage> listAsync(final String location) {
        UsagesInner client = this.inner();
        return client.listAsync(location)
        .flatMapIterable(new Func1<Page<SignalRUsageInner>, Iterable<SignalRUsageInner>>() {
            @Override
            public Iterable<SignalRUsageInner> call(Page<SignalRUsageInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SignalRUsageInner, SignalRUsage>() {
            @Override
            public SignalRUsage call(SignalRUsageInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
