// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.CropGeoJsonOptions;
import com.azure.analytics.planetarycomputer.models.Polygon;
import com.azure.analytics.planetarycomputer.models.StacAsset;
import com.azure.analytics.planetarycomputer.models.StacItem;
import com.azure.analytics.planetarycomputer.models.StacItemProperties;
import com.azure.analytics.planetarycomputer.models.StacLink;
import com.azure.analytics.planetarycomputer.models.StacLinkType;
import com.azure.core.util.BinaryData;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class TilerGeoJsonsCropFormatTests extends PlanetaryComputerClientTestBase {
    @Test
    @Disabled
    public void testTilerGeoJsonsCropFormatTests() {
        // method invocation
        BinaryData response = tilerClient.cropGeoJson("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png",
            new CropGeoJsonOptions(),
            new StacItem().setStacVersion("1.0.0")
                .setLinks(Arrays.asList(new StacLink().setRel("collection")
                    .setType(StacLinkType.APPLICATION_JSON)
                    .setHref(
                        "https://sample.cmbtazhseqhgeudd.uksouth.geocatalog.spatio.azure.com/stac/collections/example-collection"),
                    new StacLink().setRel("parent")
                        .setType(StacLinkType.APPLICATION_JSON)
                        .setHref(
                            "https://sample.cmbtazhseqhgeudd.uksouth.geocatalog.spatio.azure.com/stac/collections/example-collection"),
                    new StacLink().setRel("root")
                        .setType(StacLinkType.APPLICATION_JSON)
                        .setHref("https://sample.cmbtazhseqhgeudd.uksouth.geocatalog.spatio.azure.com/stac/"),
                    new StacLink().setRel("self")
                        .setType(StacLinkType.APPLICATION_GEO_JSON)
                        .setHref(
                            "https://sample.cmbtazhseqhgeudd.uksouth.geocatalog.spatio.azure.com/stac/collections/example-collection/items/S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413")))
                .setStacExtensions(Arrays.asList("https://stac-extensions.github.io/projection/v1.1.0/schema.json"))
                .setGeometry(new Polygon()
                    .setCoordinates(Arrays.asList(Arrays.asList(Arrays.asList(136.11023969131566, 36.05158282566385),
                        Arrays.asList(137.32861422946507, 36.03410504840171),
                        Arrays.asList(137.35846754627107, 37.02313780213882),
                        Arrays.asList(136.12448554733595, 37.041254047568394),
                        Arrays.asList(136.11023969131566, 36.05158282566385)))))
                .setBoundingBox(
                    Arrays.asList(136.11023969131566, 36.03410504840171, 137.35846754627107, 37.041254047568394))
                .setCollection("example-collection")
                .setProperties(new StacItemProperties().setDatetime("2023-10-17T01:36:51.024000Z")
                    .setAdditionalProperties(mapOf("proj:epsg",
                        BinaryData.fromBytes("32653".getBytes(StandardCharsets.UTF_8)), "proj:shape",
                        BinaryData.fromBytes("[10980, 10980]".getBytes(StandardCharsets.UTF_8)), "proj:transform",
                        BinaryData
                            .fromBytes("[10, 0, 600000, 0, -10, 4100040, 0, 0, 1]".getBytes(StandardCharsets.UTF_8)),
                        "proj:geometry",
                        BinaryData.fromBytes(
                            "{type=Polygon, coordinates=[[[600000, 3990240], [709800, 3990240], [709800, 4100040], [600000, 4100040], [600000, 3990240]]]}"
                                .getBytes(StandardCharsets.UTF_8)),
                        "eo:cloud_cover", BinaryData.fromBytes("19.538534".getBytes(StandardCharsets.UTF_8)),
                        "s2:mgrs_tile", BinaryData.fromBytes("53SPA".getBytes(StandardCharsets.UTF_8)), "proj:bbox",
                        BinaryData.fromBytes("[600000, 3990240, 709800, 4100040]".getBytes(StandardCharsets.UTF_8)),
                        "s2:nodata_pixel_percentage",
                        BinaryData.fromBytes("1.29E-4".getBytes(StandardCharsets.UTF_8)))))
                .setAssets(mapOf("predict", new StacAsset().setDescription("Argmax-parsed inference values.")
                    .setHref(
                        "https://sample.blob.core.windows.net/example-collection-16f38ddf/c8a/S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413/predict.tif")
                    .setType("image/tiff; application=geotiff; profile=cloud-optimized")
                    .setAdditionalProperties(mapOf()), "softmax",
                    new StacAsset().setDescription("Maximum raw inference values converted to uint8.")
                        .setHref(
                            "https://sample.blob.core.windows.net/example-collection-16f38ddf/c8a/S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413/softmax.tif")
                        .setType("image/tiff; application=geotiff; profile=cloud-optimized")
                        .setAdditionalProperties(mapOf())))
                .setTimestamp("2024-09-26T17:46:10.688245Z")
                .setETag("e99a9415-f26f-48ad-9553-3a5dd7260cde"),
            null);

        // response assertion
        Assertions.assertNotNull(response);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
