// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.Operation;
import com.azure.analytics.planetarycomputer.models.OperationStatus;
import com.azure.analytics.planetarycomputer.models.OperationStatusHistoryItem;
import com.azure.core.http.rest.PagedIterable;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class IngestionOperationsListTests extends PlanetaryComputerClientTestBase {
    @Test
    @Disabled
    public void testIngestionOperationsListTests() {
        // method invocation
        PagedIterable<Operation> response
            = ingestionClient.listOperations(null, null, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        Operation firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("9bb31abd-91d6-4649-9c6f-beadbec7c622", firstItem.getId());
        // verify property "status"
        Assertions.assertEquals(OperationStatus.fromString("Suceeded"), firstItem.getStatus());
        // verify property "type"
        Assertions.assertEquals("IngestionStaticCatalog", firstItem.getType());
        // verify property "creationTime"
        Assertions.assertNotNull(firstItem.getCreationTime());
        // verify property "collectionId"
        Assertions.assertEquals("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", firstItem.getCollectionId());
        // verify property "statusHistory"
        List<OperationStatusHistoryItem> firstItemStatusHistory = firstItem.getStatusHistory();
        OperationStatusHistoryItem firstItemStatusHistoryFirstItem = firstItemStatusHistory.iterator().next();
        Assertions.assertNotNull(firstItemStatusHistoryFirstItem);
        Assertions.assertNotNull(firstItemStatusHistoryFirstItem.getTimestamp());
        Assertions.assertEquals(OperationStatus.PENDING, firstItemStatusHistoryFirstItem.getStatus());
        // verify property "startTime"
        Assertions.assertNotNull(firstItem.getStartTime());
        // verify property "finishTime"
        Assertions.assertNotNull(firstItem.getFinishTime());
        // verify property "additionalInformation"
        Assertions.assertNotNull(firstItem.getAdditionalInformation());
    }
}
