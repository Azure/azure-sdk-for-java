// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.RenderOption;
import com.azure.analytics.planetarycomputer.models.RenderOptionType;
import com.azure.analytics.planetarycomputer.models.StacMosaic;
import com.azure.analytics.planetarycomputer.models.StacMosaicConfiguration;
import com.azure.analytics.planetarycomputer.models.TileSettings;
import com.azure.analytics.planetarycomputer.models.UserCollectionSettings;
import com.azure.core.util.BinaryData;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacCollectionConfigGetTests extends PlanetaryComputerProClientTestBase {
    @Test
    @Disabled
    public void testStacCollectionConfigGetTests() {
        // method invocation
        UserCollectionSettings response = stacClient.getCollectionConfiguration("naip-atl");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "tileSettings"
        TileSettings responseTileSettings = response.getTileSettings();
        Assertions.assertNotNull(responseTileSettings);
        Assertions.assertEquals(6, responseTileSettings.getMinZoom());
        Assertions.assertEquals(35, responseTileSettings.getMaxItemsPerTile());
        // verify property "mosaicConfiguration"
        StacMosaicConfiguration responseMosaicConfiguration = response.getMosaicConfiguration();
        Assertions.assertNotNull(responseMosaicConfiguration);
        List<StacMosaic> responseMosaicConfigurationMosaics = responseMosaicConfiguration.getMosaics();
        StacMosaic responseMosaicConfigurationMosaicsFirstItem = responseMosaicConfigurationMosaics.iterator().next();
        Assertions.assertNotNull(responseMosaicConfigurationMosaicsFirstItem);
        Assertions.assertEquals("default", responseMosaicConfigurationMosaicsFirstItem.getId());
        Assertions.assertEquals("Default", responseMosaicConfigurationMosaicsFirstItem.getName());
        Assertions.assertEquals("", responseMosaicConfigurationMosaicsFirstItem.getDescription());
        List<Map<String, BinaryData>> responseMosaicConfigurationMosaicsFirstItemCql
            = responseMosaicConfigurationMosaicsFirstItem.getCql();
        Assertions.assertEquals(0, responseMosaicConfigurationMosaicsFirstItemCql.size());
        List<RenderOption> responseMosaicConfigurationRenderOptions = responseMosaicConfiguration.getRenderOptions();
        RenderOption responseMosaicConfigurationRenderOptionsFirstItem
            = responseMosaicConfigurationRenderOptions.iterator().next();
        Assertions.assertNotNull(responseMosaicConfigurationRenderOptionsFirstItem);
        Assertions.assertEquals("natural-color", responseMosaicConfigurationRenderOptionsFirstItem.getId());
        Assertions.assertEquals("Natural color", responseMosaicConfigurationRenderOptionsFirstItem.getName());
        Assertions.assertEquals("RGB from visual assets",
            responseMosaicConfigurationRenderOptionsFirstItem.getDescription());
        Assertions.assertEquals(RenderOptionType.RASTER_TILE,
            responseMosaicConfigurationRenderOptionsFirstItem.getType());
        Assertions.assertEquals("assets=image&asset_bidx=image|1,2,3",
            responseMosaicConfigurationRenderOptionsFirstItem.getOptions());
        Assertions.assertEquals(6, responseMosaicConfigurationRenderOptionsFirstItem.getMinZoom());
    }
}
