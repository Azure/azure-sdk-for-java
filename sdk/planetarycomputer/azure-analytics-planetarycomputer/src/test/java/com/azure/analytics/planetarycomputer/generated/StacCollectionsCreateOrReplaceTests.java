// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.StacCollection;
import com.azure.analytics.planetarycomputer.models.StacCollectionTemporalExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionSpatialExtent;
import com.azure.analytics.planetarycomputer.models.StacLink;
import com.azure.analytics.planetarycomputer.models.StacLinkType;
import com.azure.core.util.BinaryData;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacCollectionsCreateOrReplaceTests extends PlanetaryComputerProClientTestBase {
    @Test
    @Disabled
    public void testStacCollectionsCreateOrReplaceTests() {
        // method invocation
        StacCollection response = stacClient.createOrReplaceCollection("test-collection-lifecycle", new StacCollection(
            "Test collection for lifecycle operations - UPDATED",
            Arrays.asList(new StacLink().setRel("items")
                .setType(StacLinkType.APPLICATION_GEO_JSON)
                .setHref(
                    "https://Sanitized.sanitized_label.sanitized_location.geocatalog.spatio.azure.com/stac/collections/test-collection-lifecycle/items"),
                new StacLink().setRel("parent")
                    .setType(StacLinkType.APPLICATION_JSON)
                    .setHref("https://Sanitized.sanitized_label.sanitized_location.geocatalog.spatio.azure.com/stac/"),
                new StacLink().setRel("root")
                    .setType(StacLinkType.APPLICATION_JSON)
                    .setHref("https://Sanitized.sanitized_label.sanitized_location.geocatalog.spatio.azure.com/stac/"),
                new StacLink().setRel("self")
                    .setType(StacLinkType.APPLICATION_JSON)
                    .setHref(
                        "https://Sanitized.sanitized_label.sanitized_location.geocatalog.spatio.azure.com/stac/collections/test-collection-lifecycle")),
            "proprietary",
            new StacExtensionExtent(
                new StacExtensionSpatialExtent()
                    .setBoundingBox(Arrays.asList(Arrays.asList(-180.0, -90.0, 180.0, 90.0))),
                new StacCollectionTemporalExtent(Arrays.asList(Arrays.asList(
                    OffsetDateTime.parse("2020-01-01T00:00:00Z"), OffsetDateTime.parse("2024-12-31T23:59:59Z"))))))
                        .setCreatedOn("2025-10-28T18:47:27.7827791Z")
                        .setUpdatedOn("2025-10-28T18:47:27.7827791Z")
                        .setStacVersion("1.0.0")
                        .setTitle("Test Collection Lifecycle")
                        .setType("Collection")
                        .setAdditionalProperties(mapOf("id",
                            BinaryData.fromBytes("test-collection-lifecycle".getBytes(StandardCharsets.UTF_8)))));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "createdOn"
        Assertions.assertEquals("2025-10-28T18:47:27.7827791Z", response.getCreatedOn());
        // verify property "updatedOn"
        Assertions.assertEquals("2025-10-28T18:48:06.7735849Z", response.getUpdatedOn());
        // verify property "id"
        Assertions.assertEquals("test-collection-lifecycle", response.getId());
        // verify property "description"
        Assertions.assertEquals("Test collection for lifecycle operations - UPDATED", response.getDescription());
        // verify property "stacVersion"
        Assertions.assertEquals("1.0.0", response.getStacVersion());
        // verify property "links"
        List<StacLink> responseLinks = response.getLinks();
        StacLink responseLinksFirstItem = responseLinks.iterator().next();
        Assertions.assertNotNull(responseLinksFirstItem);
        Assertions.assertEquals("self", responseLinksFirstItem.getRel());
        Assertions.assertEquals(StacLinkType.APPLICATION_JSON, responseLinksFirstItem.getType());
        Assertions.assertEquals(
            "http://test-accessibility.h5d5a9crhnc8deaz.uksouth.geocatalog.spatio.azure.com/stac/collections/test-collection-lifecycle/",
            responseLinksFirstItem.getHref());
        // verify property "title"
        Assertions.assertEquals("Test Collection Lifecycle", response.getTitle());
        // verify property "type"
        Assertions.assertEquals("Collection", response.getType());
        // verify property "license"
        Assertions.assertEquals("proprietary", response.getLicense());
        // verify property "extent"
        StacExtensionExtent responseExtent = response.getExtent();
        Assertions.assertNotNull(responseExtent);
        StacExtensionSpatialExtent responseExtentSpatial = responseExtent.getSpatial();
        Assertions.assertNotNull(responseExtentSpatial);
        List<List<Double>> responseExtentSpatialBoundingBox = responseExtentSpatial.getBoundingBox();
        List<Double> responseExtentSpatialBoundingBoxFirstItem = responseExtentSpatialBoundingBox.iterator().next();
        Assertions.assertEquals(-180.0, responseExtentSpatialBoundingBoxFirstItem.iterator().next());
        StacCollectionTemporalExtent responseExtentTemporal = responseExtent.getTemporal();
        Assertions.assertNotNull(responseExtentTemporal);
        List<List<OffsetDateTime>> responseExtentTemporalInterval = responseExtentTemporal.getInterval();
        List<OffsetDateTime> responseExtentTemporalIntervalFirstItem = responseExtentTemporalInterval.iterator().next();
        Assertions.assertNotNull(responseExtentTemporalIntervalFirstItem.iterator().next());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
