// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.InfoOperationResponse;
import com.azure.analytics.planetarycomputer.models.NoDataType;
import com.azure.analytics.planetarycomputer.models.TilerInfo;
import com.azure.core.util.BinaryData;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class TilerInfoOperationsGetTests extends PlanetaryComputerClientTestBase {
    @Test
    @Disabled
    public void testTilerInfoOperationsGetTests() {
        // method invocation
        InfoOperationResponse response = tilerClient.getAssetsInfo("{{collectionId}}", "{{itemId}}", null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "data"
        TilerInfo responseData = response.getData();
        Assertions.assertNotNull(responseData);
        List<Double> responseDataBounds = responseData.getBounds();
        Assertions.assertEquals(-65.75386020444417, responseDataBounds.iterator().next());
        List<List<BinaryData>> responseDataBandMetadata = responseData.getBandMetadata();
        List<BinaryData> responseDataBandMetadataFirstItem = responseDataBandMetadata.iterator().next();
        Assertions.assertNotNull(responseDataBandMetadataFirstItem.iterator().next());
        List<List<String>> responseDataBandDescriptions = responseData.getBandDescriptions();
        List<String> responseDataBandDescriptionsFirstItem = responseDataBandDescriptions.iterator().next();
        Assertions.assertEquals("b1", responseDataBandDescriptionsFirstItem.iterator().next());
        Assertions.assertEquals("int16", responseData.getDtype());
        Assertions.assertEquals(NoDataType.NONE, responseData.getNoDataType());
        List<String> responseDataColorinterp = responseData.getColorinterp();
        Assertions.assertEquals("gray", responseDataColorinterp.iterator().next());
        Assertions.assertEquals("GTiff", responseData.getDriver());
        Assertions.assertEquals(1, responseData.getCount());
        Assertions.assertEquals(10, responseData.getWidth());
        Assertions.assertEquals(10, responseData.getHeight());
        List<String> responseDataOverviews = responseData.getOverviews();
        Assertions.assertEquals(0, responseDataOverviews.size());
        Assertions.assertEquals(17, responseData.getMinZoom());
        Assertions.assertEquals(17, responseData.getMaxZoom());
    }
}
