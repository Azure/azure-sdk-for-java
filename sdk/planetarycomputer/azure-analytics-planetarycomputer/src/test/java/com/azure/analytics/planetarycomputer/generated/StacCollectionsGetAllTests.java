// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.StacCatalogCollections;
import com.azure.analytics.planetarycomputer.models.StacCollection;
import com.azure.analytics.planetarycomputer.models.StacCollectionTemporalExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionSpatialExtent;
import com.azure.analytics.planetarycomputer.models.StacLink;
import com.azure.analytics.planetarycomputer.models.StacLinkType;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacCollectionsGetAllTests extends PlanetaryComputerClientTestBase {
    @Test
    @Disabled
    public void testStacCollectionsGetAllTests() {
        // method invocation
        StacCatalogCollections response = stacClient.listCollections(null, null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "links"
        List<StacLink> responseLinks = response.getLinks();
        StacLink responseLinksFirstItem = responseLinks.iterator().next();
        Assertions.assertNotNull(responseLinksFirstItem);
        Assertions.assertEquals("root", responseLinksFirstItem.getRel());
        Assertions.assertEquals(StacLinkType.APPLICATION_JSON, responseLinksFirstItem.getType());
        Assertions.assertEquals("https://sample.cmbtazhseqhgeudd.uksouth.geocatalog.spatio.azure.com/stac/",
            responseLinksFirstItem.getHref());
        // verify property "collections"
        List<StacCollection> responseCollections = response.getCollections();
        StacCollection responseCollectionsFirstItem = responseCollections.iterator().next();
        Assertions.assertNotNull(responseCollectionsFirstItem);
        Assertions.assertEquals("2024-11-06T14:43:20.028837Z", responseCollectionsFirstItem.getCreatedOn());
        Assertions.assertEquals("2024-11-06T14:43:20.028837Z", responseCollectionsFirstItem.getUpdatedOn());
        Assertions.assertEquals("An example collection", responseCollectionsFirstItem.getShortDescription());
        Assertions.assertEquals("example-collection", responseCollectionsFirstItem.getId());
        Assertions.assertEquals("An example collection", responseCollectionsFirstItem.getDescription());
        Assertions.assertEquals("1.0.0", responseCollectionsFirstItem.getStacVersion());
        List<StacLink> responseCollectionsFirstItemLinks = responseCollectionsFirstItem.getLinks();
        StacLink responseCollectionsFirstItemLinksFirstItem = responseCollectionsFirstItemLinks.iterator().next();
        Assertions.assertNotNull(responseCollectionsFirstItemLinksFirstItem);
        Assertions.assertEquals("items", responseCollectionsFirstItemLinksFirstItem.getRel());
        Assertions.assertEquals(StacLinkType.APPLICATION_GEO_JSON,
            responseCollectionsFirstItemLinksFirstItem.getType());
        Assertions.assertEquals(
            "https://sample.cmbtazhseqhgeudd.uksouth.geocatalog.spatio.azure.com/stac/collections/example-collection/items",
            responseCollectionsFirstItemLinksFirstItem.getHref());
        Assertions.assertEquals("Example Collection", responseCollectionsFirstItem.getTitle());
        Assertions.assertEquals("Collection", responseCollectionsFirstItem.getType());
        Assertions.assertEquals("CC-BY-4.0", responseCollectionsFirstItem.getLicense());
        StacExtensionExtent responseCollectionsFirstItemExtent = responseCollectionsFirstItem.getExtent();
        Assertions.assertNotNull(responseCollectionsFirstItemExtent);
        StacExtensionSpatialExtent responseCollectionsFirstItemExtentSpatial
            = responseCollectionsFirstItemExtent.getSpatial();
        Assertions.assertNotNull(responseCollectionsFirstItemExtentSpatial);
        List<List<Double>> responseCollectionsFirstItemExtentSpatialBoundingBox
            = responseCollectionsFirstItemExtentSpatial.getBoundingBox();
        List<Double> responseCollectionsFirstItemExtentSpatialBoundingBoxFirstItem
            = responseCollectionsFirstItemExtentSpatialBoundingBox.iterator().next();
        Assertions.assertEquals(-180.0,
            responseCollectionsFirstItemExtentSpatialBoundingBoxFirstItem.iterator().next());
        StacCollectionTemporalExtent responseCollectionsFirstItemExtentTemporal
            = responseCollectionsFirstItemExtent.getTemporal();
        Assertions.assertNotNull(responseCollectionsFirstItemExtentTemporal);
        List<List<String>> responseCollectionsFirstItemExtentTemporalInterval
            = responseCollectionsFirstItemExtentTemporal.getInterval();
        List<String> responseCollectionsFirstItemExtentTemporalIntervalFirstItem
            = responseCollectionsFirstItemExtentTemporalInterval.iterator().next();
        Assertions.assertEquals("2018-01-01T00:00:00Z",
            responseCollectionsFirstItemExtentTemporalIntervalFirstItem.iterator().next());
    }
}
