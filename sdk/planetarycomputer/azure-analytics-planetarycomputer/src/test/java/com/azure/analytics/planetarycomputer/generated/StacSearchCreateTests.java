// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.FilterLanguage;
import com.azure.analytics.planetarycomputer.models.Geometry;
import com.azure.analytics.planetarycomputer.models.GeometryType;
import com.azure.analytics.planetarycomputer.models.StacItem;
import com.azure.analytics.planetarycomputer.models.StacItemCollection;
import com.azure.analytics.planetarycomputer.models.StacItemProperties;
import com.azure.analytics.planetarycomputer.models.StacModelType;
import com.azure.analytics.planetarycomputer.models.StacProvider;
import com.azure.analytics.planetarycomputer.models.StacSearchParameters;
import com.azure.analytics.planetarycomputer.models.StacSearchSortingDirection;
import com.azure.analytics.planetarycomputer.models.StacSortExtension;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacSearchCreateTests extends PlanetaryComputerProClientTestBase {
    @Test
    @Disabled
    public void testStacSearchCreateTests() {
        // method invocation
        StacItemCollection response = stacClient.search(new StacSearchParameters()
            .setCollections(Arrays.asList("naip-atl"))
            .setDatetime("2021-01-01T00:00:00Z/2022-12-31T00:00:00Z")
            .setLimit(50)
            .setSortBy(Arrays.asList(new StacSortExtension("datetime", StacSearchSortingDirection.DESC)))
            .setFilter(
                "{op=s_intersects, args=[{property=geometry}, {type=Polygon, coordinates=[[[-84.46416308610219, 33.6033686729869], [-84.38815071170247, 33.6033686729869], [-84.38815071170247, 33.6713179813099], [-84.46416308610219, 33.6713179813099], [-84.46416308610219, 33.6033686729869]]]}]}")
            .setFilterLang(FilterLanguage.CQL2_JSON));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "type"
        Assertions.assertEquals(StacModelType.FEATURE_COLLECTION, response.getType());
        // verify property "features"
        List<StacItem> responseFeatures = response.getFeatures();
        StacItem responseFeaturesFirstItem = responseFeatures.iterator().next();
        Assertions.assertNotNull(responseFeaturesFirstItem);
        Assertions.assertEquals(StacModelType.FEATURE, responseFeaturesFirstItem.getType());
        Geometry responseFeaturesFirstItemGeometry = responseFeaturesFirstItem.getGeometry();
        Assertions.assertNotNull(responseFeaturesFirstItemGeometry);
        Assertions.assertEquals(GeometryType.POLYGON, responseFeaturesFirstItemGeometry.getType());
        Assertions.assertEquals("ga_m_3308429_nw_16_060_20211114", responseFeaturesFirstItem.getId());
        Assertions.assertEquals("naip-atl", responseFeaturesFirstItem.getCollection());
        List<Double> responseFeaturesFirstItemBoundingBox = responseFeaturesFirstItem.getBoundingBox();
        Assertions.assertEquals(-84.504026, responseFeaturesFirstItemBoundingBox.iterator().next());
        StacItemProperties responseFeaturesFirstItemProperties = responseFeaturesFirstItem.getProperties();
        Assertions.assertNotNull(responseFeaturesFirstItemProperties);
        List<StacProvider> responseFeaturesFirstItemPropertiesProviders
            = responseFeaturesFirstItemProperties.getProviders();
        StacProvider responseFeaturesFirstItemPropertiesProvidersFirstItem
            = responseFeaturesFirstItemPropertiesProviders.iterator().next();
        Assertions.assertNotNull(responseFeaturesFirstItemPropertiesProvidersFirstItem);
        Assertions.assertEquals("USDA Farm Service Agency",
            responseFeaturesFirstItemPropertiesProvidersFirstItem.getName());
        List<String> responseFeaturesFirstItemPropertiesProvidersFirstItemRoles
            = responseFeaturesFirstItemPropertiesProvidersFirstItem.getRoles();
        Assertions.assertEquals("producer",
            responseFeaturesFirstItemPropertiesProvidersFirstItemRoles.iterator().next());
        Assertions.assertEquals(
            "https://www.fsa.usda.gov/programs-and-services/aerial-photography/imagery-programs/naip-imagery/",
            responseFeaturesFirstItemPropertiesProvidersFirstItem.getUrl());
        Assertions.assertEquals(0.6D, responseFeaturesFirstItemProperties.getGsd());
        Assertions.assertEquals("2021-11-14T16:00:00Z", responseFeaturesFirstItemProperties.getDatetime());
        Assertions.assertNotNull(responseFeaturesFirstItem.getAssets());
        Assertions.assertEquals("2025-10-22T11:16:45.853226Z", responseFeaturesFirstItem.getTimestamp());
        Assertions.assertEquals("44ccaf80-46a9-41c9-b3a0-e86329784186", responseFeaturesFirstItem.getETag());
    }
}
