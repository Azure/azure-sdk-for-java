// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.StacCollection;
import com.azure.analytics.planetarycomputer.models.StacCollectionTemporalExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionSpatialExtent;
import com.azure.analytics.planetarycomputer.models.StacLink;
import com.azure.analytics.planetarycomputer.models.StacLinkType;
import com.azure.analytics.planetarycomputer.models.StacProvider;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacCollectionsGetTests extends PlanetaryComputerProClientTestBase {
    @Test
    @Disabled
    public void testStacCollectionsGetTests() {
        // method invocation
        StacCollection response = stacClient.getCollection("naip-atl", null, null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "createdOn"
        Assertions.assertEquals("2025-10-22T11:14:31.811918Z", response.getCreatedOn());
        // verify property "updatedOn"
        Assertions.assertEquals("2025-10-28T18:00:29.154669Z", response.getUpdatedOn());
        // verify property "stacExtensions"
        List<String> responseStacExtensions = response.getStacExtensions();
        Assertions.assertEquals("https://stac-extensions.github.io/item-assets/v1.0.0/schema.json",
            responseStacExtensions.iterator().next());
        // verify property "id"
        Assertions.assertEquals("naip-atl", response.getId());
        // verify property "description"
        Assertions.assertEquals(
            "A Subset of NAIP imagery for sample MPC Pro GeoCatalog deployments. Includes multiple city and national park focus areas, useful for quick product evaluation. - Updated for testing",
            response.getDescription());
        // verify property "stacVersion"
        Assertions.assertEquals("1.0.0", response.getStacVersion());
        // verify property "links"
        List<StacLink> responseLinks = response.getLinks();
        StacLink responseLinksFirstItem = responseLinks.iterator().next();
        Assertions.assertNotNull(responseLinksFirstItem);
        Assertions.assertEquals("items", responseLinksFirstItem.getRel());
        Assertions.assertEquals(StacLinkType.APPLICATION_GEO_JSON, responseLinksFirstItem.getType());
        Assertions.assertEquals(
            "https://Sanitized.sanitized_label.sanitized_location.geocatalog.spatio.azure.com/stac/collections/naip-atl/items",
            responseLinksFirstItem.getHref());
        // verify property "title"
        Assertions.assertEquals("NAIP Atlanta (MPC Pro Sample Datasets)", response.getTitle());
        // verify property "type"
        Assertions.assertEquals("Collection", response.getType());
        // verify property "assets"
        Assertions.assertNotNull(response.getAssets());
        // verify property "itemAssets"
        Assertions.assertNotNull(response.getItemAssets());
        // verify property "license"
        Assertions.assertEquals("proprietary", response.getLicense());
        // verify property "extent"
        StacExtensionExtent responseExtent = response.getExtent();
        Assertions.assertNotNull(responseExtent);
        StacExtensionSpatialExtent responseExtentSpatial = responseExtent.getSpatial();
        Assertions.assertNotNull(responseExtentSpatial);
        List<List<Double>> responseExtentSpatialBoundingBox = responseExtentSpatial.getBoundingBox();
        List<Double> responseExtentSpatialBoundingBoxFirstItem = responseExtentSpatialBoundingBox.iterator().next();
        Assertions.assertEquals(-85.605165, responseExtentSpatialBoundingBoxFirstItem.iterator().next());
        StacCollectionTemporalExtent responseExtentTemporal = responseExtent.getTemporal();
        Assertions.assertNotNull(responseExtentTemporal);
        List<List<OffsetDateTime>> responseExtentTemporalInterval = responseExtentTemporal.getInterval();
        List<OffsetDateTime> responseExtentTemporalIntervalFirstItem = responseExtentTemporalInterval.iterator().next();
        Assertions.assertNotNull(responseExtentTemporalIntervalFirstItem.iterator().next());
        // verify property "providers"
        List<StacProvider> responseProviders = response.getProviders();
        StacProvider responseProvidersFirstItem = responseProviders.iterator().next();
        Assertions.assertNotNull(responseProvidersFirstItem);
        Assertions.assertEquals("USDA Farm Service Agency", responseProvidersFirstItem.getName());
        List<String> responseProvidersFirstItemRoles = responseProvidersFirstItem.getRoles();
        Assertions.assertEquals("producer", responseProvidersFirstItemRoles.iterator().next());
        Assertions.assertEquals(
            "https://www.fsa.usda.gov/programs-and-services/aerial-photography/imagery-programs/naip-imagery/",
            responseProvidersFirstItem.getUrl());
        // verify property "summaries"
        Assertions.assertNotNull(response.getSummaries());
    }
}
