// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.Operation;
import com.azure.analytics.planetarycomputer.models.StacCollection;
import com.azure.analytics.planetarycomputer.models.StacCollectionTemporalExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionSpatialExtent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.SyncPoller;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacCollectionsCreateTests extends PlanetaryComputerProClientTestBase {
    @Test
    @Disabled
    public void testStacCollectionsCreateTests() {
        // method invocation
        SyncPoller<Operation, Void> response = setPlaybackSyncPollerPollInterval(stacClient.beginCreateCollection(
            new StacCollection("Temporary collection for partition type testing", Arrays.asList(), "proprietary",
                new StacExtensionExtent(
                    new StacExtensionSpatialExtent()
                        .setBoundingBox(Arrays.asList(Arrays.asList(-180.0, -90.0, 180.0, 90.0))),
                    new StacCollectionTemporalExtent(Arrays.asList(Arrays.asList(
                        OffsetDateTime.parse("2020-01-01T00:00:00Z"), OffsetDateTime.parse("2099-12-31T23:59:59Z"))))))
                            .setStacVersion("1.0.0")
                            .setTitle("Test Partition Type Collection")
                            .setType("Collection")
                            .setAdditionalProperties(mapOf("id", BinaryData
                                .fromBytes("test-partition-type-collection".getBytes(StandardCharsets.UTF_8))))));

        // response assertion
        Assertions.assertEquals(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED,
            response.waitForCompletion().getStatus());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
