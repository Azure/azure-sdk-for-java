// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.Operation;
import com.azure.analytics.planetarycomputer.models.Polygon;
import com.azure.analytics.planetarycomputer.models.StacAsset;
import com.azure.analytics.planetarycomputer.models.StacItem;
import com.azure.analytics.planetarycomputer.models.StacItemProperties;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.SyncPoller;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacItemsCreateTests extends PlanetaryComputerClientTestBase {
    @Test
    @Disabled
    public void testStacItemsCreateTests() {
        // method invocation
        SyncPoller<Operation, Void> response
            = setPlaybackSyncPollerPollInterval(stacClient.beginCreateItem("36fcb8da-9b15-49e0-b400-0d2e751e2061",
                new StacItem().setStacVersion("1.0.0")
                    .setLinks(Arrays.asList())
                    .setStacExtensions(Arrays.asList("https://stac-extensions.github.io/eo/v1.0.0/schema.json",
                        "https://stac-extensions.github.io/projection/v1.0.0/schema.json"))
                    .setGeometry(
                        new Polygon().setCoordinates(Arrays.asList(Arrays.asList(Arrays.asList(-80.560478, 27.997976),
                            Arrays.asList(-80.560208, 28.064325), Arrays.asList(-80.627067, 28.064522),
                            Arrays.asList(-80.627296, 27.998174), Arrays.asList(-80.560478, 27.997976)))))
                    .setCollection("{{collectionId}}")
                    .setBoundingBox(Arrays.asList(-80.627296, 27.997976, -80.560208, 28.064522))
                    .setProperties(new StacItemProperties().setGsd(0.6D)
                        .setDatetime("2019-12-15T00:00:00Z")
                        .setAdditionalProperties(mapOf("proj:epsg",
                            BinaryData.fromBytes("26917".getBytes(StandardCharsets.UTF_8)), "naip:state",
                            BinaryData.fromBytes("fl".getBytes(StandardCharsets.UTF_8)), "proj:shape",
                            BinaryData.fromBytes("[12250, 10950]".getBytes(StandardCharsets.UTF_8)), "proj:transform",
                            BinaryData.fromBytes(
                                "[0.6, 0, 536646, 0, -0.6, 3104406, 0, 0, 1]".getBytes(StandardCharsets.UTF_8)),
                            "naip:year", BinaryData.fromBytes("2019".getBytes(StandardCharsets.UTF_8)), "proj:bbox",
                            BinaryData
                                .fromBytes("[536646, 3097056, 543216, 3104406]".getBytes(StandardCharsets.UTF_8)))))
                    .setAssets(mapOf("sample_external", new StacAsset().setTitle("Sample external image")
                        .setHref(
                            "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
                        .setType("image/png")
                        .setRoles(Arrays.asList("tiles"))
                        .setAdditionalProperties(mapOf())))));

        // response assertion
        Assertions.assertEquals(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED,
            response.waitForCompletion().getStatus());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
