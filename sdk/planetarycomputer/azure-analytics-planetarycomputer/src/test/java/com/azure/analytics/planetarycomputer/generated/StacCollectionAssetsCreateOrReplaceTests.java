// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.models.StacCollection;
import com.azure.analytics.planetarycomputer.models.StacCollectionTemporalExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionExtent;
import com.azure.analytics.planetarycomputer.models.StacExtensionSpatialExtent;
import com.azure.analytics.planetarycomputer.models.StacLink;
import com.azure.analytics.planetarycomputer.models.StacLinkType;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacCollectionAssetsCreateOrReplaceTests extends PlanetaryComputerClientTestBase {
    @Test
    @Disabled
    public void testStacCollectionAssetsCreateOrReplaceTests() {
        // method invocation
        StacCollection response
            = stacClient.createOrReplaceCollectionAsset("test-collection-d45537668d06", "visual", null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "createdOn"
        Assertions.assertEquals("2024-11-06T22:41:26.982611Z", response.getCreatedOn());
        // verify property "updatedOn"
        Assertions.assertEquals("2024-11-06T22:41:27.735413Z", response.getUpdatedOn());
        // verify property "id"
        Assertions.assertEquals("test-collection-b07e7de4387b", response.getId());
        // verify property "description"
        Assertions.assertEquals("A collection for integration tests purposes", response.getDescription());
        // verify property "stacVersion"
        Assertions.assertEquals("1.0.0", response.getStacVersion());
        // verify property "links"
        List<StacLink> responseLinks = response.getLinks();
        StacLink responseLinksFirstItem = responseLinks.iterator().next();
        Assertions.assertNotNull(responseLinksFirstItem);
        Assertions.assertEquals("items", responseLinksFirstItem.getRel());
        Assertions.assertEquals(StacLinkType.APPLICATION_GEO_JSON, responseLinksFirstItem.getType());
        Assertions.assertEquals(
            "https://sample.cmbtazhseqhgeudd.uksouth.geocatalog.spatio.azure.com/stac/collections/test-collection-b07e7de4387b/items",
            responseLinksFirstItem.getHref());
        // verify property "title"
        Assertions.assertEquals("Test Collection b07e7de4387b", response.getTitle());
        // verify property "type"
        Assertions.assertEquals("Collection", response.getType());
        // verify property "assets"
        Assertions.assertNotNull(response.getAssets());
        // verify property "license"
        Assertions.assertEquals("CC-BY-4.0", response.getLicense());
        // verify property "extent"
        StacExtensionExtent responseExtent = response.getExtent();
        Assertions.assertNotNull(responseExtent);
        StacExtensionSpatialExtent responseExtentSpatial = responseExtent.getSpatial();
        Assertions.assertNotNull(responseExtentSpatial);
        List<List<Double>> responseExtentSpatialBoundingBox = responseExtentSpatial.getBoundingBox();
        List<Double> responseExtentSpatialBoundingBoxFirstItem = responseExtentSpatialBoundingBox.iterator().next();
        Assertions.assertEquals(-180.0, responseExtentSpatialBoundingBoxFirstItem.iterator().next());
        StacCollectionTemporalExtent responseExtentTemporal = responseExtent.getTemporal();
        Assertions.assertNotNull(responseExtentTemporal);
        List<List<String>> responseExtentTemporalInterval = responseExtentTemporal.getInterval();
        List<String> responseExtentTemporalIntervalFirstItem = responseExtentTemporalInterval.iterator().next();
        Assertions.assertEquals("2020-01-01T00:00:00Z", responseExtentTemporalIntervalFirstItem.iterator().next());
    }
}
