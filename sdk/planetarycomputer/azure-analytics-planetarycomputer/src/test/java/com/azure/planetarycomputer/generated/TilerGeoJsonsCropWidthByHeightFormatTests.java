// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.generated;

import com.azure.core.util.BinaryData;
import com.azure.planetarycomputer.models.Polygon;
import com.azure.planetarycomputer.models.StacAsset;
import com.azure.planetarycomputer.models.StacItem;
import com.azure.planetarycomputer.models.StacItemProperties;
import com.azure.planetarycomputer.models.StacLink;
import com.azure.planetarycomputer.models.StacLinkType;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class TilerGeoJsonsCropWidthByHeightFormatTests extends PlanetaryComputerClientTestBase {
    @Test
    @Disabled
    public void testTilerGeoJsonsCropWidthByHeightFormatTests() {
        // method invocation
        BinaryData response = tilerClient.cropGeoJsonWithDimensions("collectionId-0df36a74d7ed", "item-0df36a74d7ed",
            4.1, 0.08, "png", null,
            new StacItem().setStacVersion("1.0.0")
                .setLinks(Arrays.asList(new StacLink().setRel("self")
                    .setType(StacLinkType.APPLICATION_JSON)
                    .setHref("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")))
                .setStacExtensions(Arrays.asList("https://stac-extensions.github.io/projection/v1.0.0/schema.json"))
                .setGeometry(new Polygon()
                    .setCoordinates(Arrays.asList(Arrays.asList(Arrays.asList(-65.75386020444417, 18.252659831448764),
                        Arrays.asList(-65.75385878091376, 18.252569552371305),
                        Arrays.asList(-65.75376429311993, 18.252570912467043),
                        Arrays.asList(-65.75376571660163, 18.252661191551685),
                        Arrays.asList(-65.75386020444417, 18.252659831448764)))))
                .setBoundingBox(
                    Arrays.asList(-65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685))
                .setCollection("test-collection-0df36a74d7ed")
                .setProperties(
                    new StacItemProperties().setDatetime("2024-11-06T22:49:19.098983Z")
                        .setAdditionalProperties(mapOf("proj:epsg",
                            BinaryData.fromBytes("26920".getBytes(StandardCharsets.UTF_8)), "proj:shape",
                            BinaryData.fromBytes("[10, 10]".getBytes(StandardCharsets.UTF_8)), "proj:transform",
                            BinaryData.fromBytes("[208796.4, 1, 0, 2020332.3, 0, -1]".getBytes(StandardCharsets.UTF_8)),
                            "proj:bbox",
                            BinaryData.fromBytes(
                                "[208796.4, 2020322.3, 208806.4, 2020332.3]".getBytes(StandardCharsets.UTF_8)))))
                .setAssets(mapOf("data",
                    new StacAsset().setTitle("Test data")
                        .setHref("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
                        .setType("image/tiff; application=geotiff")
                        .setRoles(Arrays.asList("data"))
                        .setAdditionalProperties(mapOf()))),
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

        // response assertion
        Assertions.assertNotNull(response);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
