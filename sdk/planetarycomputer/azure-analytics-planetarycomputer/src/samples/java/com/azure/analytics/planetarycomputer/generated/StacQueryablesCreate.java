// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.PlanetaryComputerClientBuilder;
import com.azure.analytics.planetarycomputer.StacClient;
import com.azure.analytics.planetarycomputer.models.StacQueryable;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StacQueryablesCreate {
    public static void main(String[] args) {
        StacClient stacClient
            = new PlanetaryComputerClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildStacClient();
        // BEGIN:com.azure.analytics.planetarycomputer.generated.stac-create-queryables.stac-queryables-create
        List<StacQueryable> response = stacClient.createQueryables("36fcb8da-9b15-49e0-b400-0d2e751e2061",
            Arrays.asList(new StacQueryable("eo:clown_cover",
                mapOf("description",
                    BinaryData
                        .fromBytes("Like cloud cover, but with more party tricks".getBytes(StandardCharsets.UTF_8)),
                    "data_type", BinaryData.fromBytes("number".getBytes(StandardCharsets.UTF_8))))));
        // END:com.azure.analytics.planetarycomputer.generated.stac-create-queryables.stac-queryables-create
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
