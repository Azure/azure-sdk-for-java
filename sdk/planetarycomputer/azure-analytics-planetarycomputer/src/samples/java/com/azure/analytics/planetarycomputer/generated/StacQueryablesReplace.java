// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.generated;

import com.azure.analytics.planetarycomputer.PlanetaryComputerProClientBuilder;
import com.azure.analytics.planetarycomputer.StacClient;
import com.azure.analytics.planetarycomputer.models.StacQueryable;
import com.azure.analytics.planetarycomputer.models.StacQueryableDefinitionDataType;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

public class StacQueryablesReplace {
    public static void main(String[] args) {
        StacClient stacClient
            = new PlanetaryComputerProClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildStacClient();
        // BEGIN:com.azure.analytics.planetarycomputer.generated.stac-replace-queryable.stac-queryables-replace
        StacQueryable response = stacClient.replaceQueryable("naip-atl", "test%3Aproperty",
            new StacQueryable("test:property",
                mapOf("data_type", BinaryData.fromBytes("number".getBytes(StandardCharsets.UTF_8)), "description",
                    BinaryData.fromBytes("Test property - updated".getBytes(StandardCharsets.UTF_8))))
                        .setCreateIndex(false)
                        .setDataType(StacQueryableDefinitionDataType.NUMBER));
        // END:com.azure.analytics.planetarycomputer.generated.stac-replace-queryable.stac-queryables-replace
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
