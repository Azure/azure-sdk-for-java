// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.generated;

import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.planetarycomputer.PlanetaryComputerClientBuilder;
import com.azure.planetarycomputer.StacClient;
import com.azure.planetarycomputer.models.StacQueryable;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

public class StacQueryablesCreateOrReplace {
    public static void main(String[] args) {
        StacClient stacClient
            = new PlanetaryComputerClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildStacClient();
        // BEGIN:com.azure.planetarycomputer.generated.stac-client-create-or-replace-queryable.stac-queryables-create-or-replace
        StacQueryable response
            = stacClient.createOrReplaceQueryable("36fcb8da-9b15-49e0-b400-0d2e751e2061", "naip:state",
                new StacQueryable("naip:state",
                    mapOf("data_type", BinaryData.fromBytes("string".getBytes(StandardCharsets.UTF_8)), "description",
                        BinaryData.fromBytes("State of the NAIP image".getBytes(StandardCharsets.UTF_8)),
                        "create_index", BinaryData.fromBytes("true".getBytes(StandardCharsets.UTF_8)))));
        // END:com.azure.planetarycomputer.generated.stac-client-create-or-replace-queryable.stac-queryables-create-or-replace
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
