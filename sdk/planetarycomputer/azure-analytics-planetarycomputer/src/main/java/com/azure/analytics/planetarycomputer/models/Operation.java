// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Microsoft Planetary Computer Pro geo-catalog operation.
 */
@Immutable
public final class Operation implements JsonSerializable<Operation> {
    /*
     * Operation id
     */
    @Generated
    private final String id;

    /*
     * Operation status
     */
    @Generated
    private final OperationStatus status;

    /*
     * Operation type
     */
    @Generated
    private final String type;

    /*
     * The UTC time at which the operation was created
     */
    @Generated
    private final OffsetDateTime creationTime;

    /*
     * Collection ID
     */
    @Generated
    private String collectionId;

    /*
     * The history of the operation status in time
     */
    @Generated
    private final List<OperationStatusHistoryItem> statusHistory;

    /*
     * The UTC time at which the operation was started
     */
    @Generated
    private OffsetDateTime startTime;

    /*
     * The UTC time at which the operation finished its execution
     */
    @Generated
    private OffsetDateTime finishTime;

    /*
     * Additional information elements about the particular operation type
     */
    @Generated
    private Map<String, String> additionalInformation;

    /*
     * Error information
     */
    @Generated
    private ResponseError error;

    /**
     * Creates an instance of Operation class.
     * 
     * @param id the id value to set.
     * @param status the status value to set.
     * @param type the type value to set.
     * @param creationTime the creationTime value to set.
     * @param statusHistory the statusHistory value to set.
     */
    @Generated
    private Operation(String id, OperationStatus status, String type, OffsetDateTime creationTime,
        List<OperationStatusHistoryItem> statusHistory) {
        this.id = id;
        this.status = status;
        this.type = type;
        this.creationTime = creationTime;
        this.statusHistory = statusHistory;
    }

    /**
     * Get the id property: Operation id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the status property: Operation status.
     * 
     * @return the status value.
     */
    @Generated
    public OperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the type property: Operation type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the creationTime property: The UTC time at which the operation was created.
     * 
     * @return the creationTime value.
     */
    @Generated
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the collectionId property: Collection ID.
     * 
     * @return the collectionId value.
     */
    @Generated
    public String getCollectionId() {
        return this.collectionId;
    }

    /**
     * Get the statusHistory property: The history of the operation status in time.
     * 
     * @return the statusHistory value.
     */
    @Generated
    public List<OperationStatusHistoryItem> getStatusHistory() {
        return this.statusHistory;
    }

    /**
     * Get the startTime property: The UTC time at which the operation was started.
     * 
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the finishTime property: The UTC time at which the operation finished its execution.
     * 
     * @return the finishTime value.
     */
    @Generated
    public OffsetDateTime getFinishTime() {
        return this.finishTime;
    }

    /**
     * Get the additionalInformation property: Additional information elements about the particular operation type.
     * 
     * @return the additionalInformation value.
     */
    @Generated
    public Map<String, String> getAdditionalInformation() {
        return this.additionalInformation;
    }

    /**
     * Get the error property: Error information.
     * 
     * @return the error value.
     */
    @Generated
    public ResponseError getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeArrayField("statusHistory", this.statusHistory, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("collectionId", this.collectionId);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("finishTime",
            this.finishTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.finishTime));
        jsonWriter.writeMapField("additionalInformation", this.additionalInformation,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Operation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Operation if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Operation.
     */
    @Generated
    public static Operation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OperationStatus status = null;
            String type = null;
            OffsetDateTime creationTime = null;
            List<OperationStatusHistoryItem> statusHistory = null;
            String collectionId = null;
            OffsetDateTime startTime = null;
            OffsetDateTime finishTime = null;
            Map<String, String> additionalInformation = null;
            ResponseError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = OperationStatus.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("statusHistory".equals(fieldName)) {
                    statusHistory = reader.readArray(reader1 -> OperationStatusHistoryItem.fromJson(reader1));
                } else if ("collectionId".equals(fieldName)) {
                    collectionId = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("finishTime".equals(fieldName)) {
                    finishTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("additionalInformation".equals(fieldName)) {
                    additionalInformation = reader.readMap(reader1 -> reader1.getString());
                } else if ("error".equals(fieldName)) {
                    error = ResponseError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            Operation deserializedOperation = new Operation(id, status, type, creationTime, statusHistory);
            deserializedOperation.collectionId = collectionId;
            deserializedOperation.startTime = startTime;
            deserializedOperation.finishTime = finishTime;
            deserializedOperation.additionalInformation = additionalInformation;
            deserializedOperation.error = error;

            return deserializedOperation;
        });
    }
}
