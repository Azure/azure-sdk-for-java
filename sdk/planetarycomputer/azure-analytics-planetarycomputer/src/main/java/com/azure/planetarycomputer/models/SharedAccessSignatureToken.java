// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Managed Storage Shared Access Signature (SAS) Token
 * 
 * Represents a Shared Access Signature (SAS) token response for accessing Azure Blob Storage.
 */
@Immutable
public final class SharedAccessSignatureToken implements JsonSerializable<SharedAccessSignatureToken> {
    /*
     * Msft:Expiry
     * 
     * The expiration date and time of the SAS token in UTC.
     */
    @Generated
    private final OffsetDateTime expiresOn;

    /*
     * Token
     * 
     * The SAS token string used for authentication.
     */
    @Generated
    private final String token;

    /**
     * Creates an instance of SharedAccessSignatureToken class.
     * 
     * @param expiresOn the expiresOn value to set.
     * @param token the token value to set.
     */
    @Generated
    private SharedAccessSignatureToken(OffsetDateTime expiresOn, String token) {
        this.expiresOn = expiresOn;
        this.token = token;
    }

    /**
     * Get the expiresOn property: Msft:Expiry
     * 
     * The expiration date and time of the SAS token in UTC.
     * 
     * @return the expiresOn value.
     */
    @Generated
    public OffsetDateTime getExpiresOn() {
        return this.expiresOn;
    }

    /**
     * Get the token property: Token
     * 
     * The SAS token string used for authentication.
     * 
     * @return the token value.
     */
    @Generated
    public String getToken() {
        return this.token;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("msft:expiry",
            this.expiresOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiresOn));
        jsonWriter.writeStringField("token", this.token);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SharedAccessSignatureToken from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SharedAccessSignatureToken if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SharedAccessSignatureToken.
     */
    @Generated
    public static SharedAccessSignatureToken fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime expiresOn = null;
            String token = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("msft:expiry".equals(fieldName)) {
                    expiresOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("token".equals(fieldName)) {
                    token = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new SharedAccessSignatureToken(expiresOn, token);
        });
    }
}
