// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * TileJSON metadata describing a tile set according to the TileJSON specification
 * 
 * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0.
 */
@Immutable
public final class TileJsonMetadata implements JsonSerializable<TileJsonMetadata> {
    /*
     * TileJson
     */
    @Generated
    private String tileJson;

    /*
     * Human-readable name of the tile set
     */
    @Generated
    private String name;

    /*
     * Human-readable description of the tile set
     */
    @Generated
    private String description;

    /*
     * Version
     */
    @Generated
    private String version;

    /*
     * Attribution text for the data sources
     */
    @Generated
    private String attribution;

    /*
     * URL template for feature info queries
     */
    @Generated
    private String template;

    /*
     * URL to legend content for the tile set
     */
    @Generated
    private String legend;

    /*
     * Tile addressing scheme (xyz or tms)
     */
    @Generated
    private TileAddressingScheme scheme;

    /*
     * Array of tile URL templates
     */
    @Generated
    private final List<String> tiles;

    /*
     * Array of UTFGrid URL templates
     */
    @Generated
    private List<String> grids;

    /*
     * Array of data file URL templates
     */
    @Generated
    private List<String> data;

    /*
     * Minimum zoom level available in the tile set
     */
    @Generated
    private Integer minZoom;

    /*
     * Maximum zoom level available in the tile set
     */
    @Generated
    private Integer maxZoom;

    /*
     * Bounds
     */
    @Generated
    private List<Double> bounds;

    /*
     * Default center point [longitude, latitude, zoom] for the tile set
     */
    @Generated
    private List<Double> center;

    /**
     * Creates an instance of TileJsonMetadata class.
     * 
     * @param tiles the tiles value to set.
     */
    @Generated
    private TileJsonMetadata(List<String> tiles) {
        this.tiles = tiles;
    }

    /**
     * Get the tileJson property: TileJson.
     * 
     * @return the tileJson value.
     */
    @Generated
    public String getTileJson() {
        return this.tileJson;
    }

    /**
     * Get the name property: Human-readable name of the tile set.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: Human-readable description of the tile set.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the version property: Version.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the attribution property: Attribution text for the data sources.
     * 
     * @return the attribution value.
     */
    @Generated
    public String getAttribution() {
        return this.attribution;
    }

    /**
     * Get the template property: URL template for feature info queries.
     * 
     * @return the template value.
     */
    @Generated
    public String getTemplate() {
        return this.template;
    }

    /**
     * Get the legend property: URL to legend content for the tile set.
     * 
     * @return the legend value.
     */
    @Generated
    public String getLegend() {
        return this.legend;
    }

    /**
     * Get the scheme property: Tile addressing scheme (xyz or tms).
     * 
     * @return the scheme value.
     */
    @Generated
    public TileAddressingScheme getScheme() {
        return this.scheme;
    }

    /**
     * Get the tiles property: Array of tile URL templates.
     * 
     * @return the tiles value.
     */
    @Generated
    public List<String> getTiles() {
        return this.tiles;
    }

    /**
     * Get the grids property: Array of UTFGrid URL templates.
     * 
     * @return the grids value.
     */
    @Generated
    public List<String> getGrids() {
        return this.grids;
    }

    /**
     * Get the data property: Array of data file URL templates.
     * 
     * @return the data value.
     */
    @Generated
    public List<String> getData() {
        return this.data;
    }

    /**
     * Get the minZoom property: Minimum zoom level available in the tile set.
     * 
     * @return the minZoom value.
     */
    @Generated
    public Integer getMinZoom() {
        return this.minZoom;
    }

    /**
     * Get the maxZoom property: Maximum zoom level available in the tile set.
     * 
     * @return the maxZoom value.
     */
    @Generated
    public Integer getMaxZoom() {
        return this.maxZoom;
    }

    /**
     * Get the bounds property: Bounds.
     * 
     * @return the bounds value.
     */
    @Generated
    public List<Double> getBounds() {
        return this.bounds;
    }

    /**
     * Get the center property: Default center point [longitude, latitude, zoom] for the tile set.
     * 
     * @return the center value.
     */
    @Generated
    public List<Double> getCenter() {
        return this.center;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tiles", this.tiles, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("tilejson", this.tileJson);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("attribution", this.attribution);
        jsonWriter.writeStringField("template", this.template);
        jsonWriter.writeStringField("legend", this.legend);
        jsonWriter.writeStringField("scheme", this.scheme == null ? null : this.scheme.toString());
        jsonWriter.writeArrayField("grids", this.grids, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("data", this.data, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("minzoom", this.minZoom);
        jsonWriter.writeNumberField("maxzoom", this.maxZoom);
        jsonWriter.writeArrayField("bounds", this.bounds, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("center", this.center, (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TileJsonMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TileJsonMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TileJsonMetadata.
     */
    @Generated
    public static TileJsonMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> tiles = null;
            String tileJson = null;
            String name = null;
            String description = null;
            String version = null;
            String attribution = null;
            String template = null;
            String legend = null;
            TileAddressingScheme scheme = null;
            List<String> grids = null;
            List<String> data = null;
            Integer minZoom = null;
            Integer maxZoom = null;
            List<Double> bounds = null;
            List<Double> center = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tiles".equals(fieldName)) {
                    tiles = reader.readArray(reader1 -> reader1.getString());
                } else if ("tilejson".equals(fieldName)) {
                    tileJson = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("attribution".equals(fieldName)) {
                    attribution = reader.getString();
                } else if ("template".equals(fieldName)) {
                    template = reader.getString();
                } else if ("legend".equals(fieldName)) {
                    legend = reader.getString();
                } else if ("scheme".equals(fieldName)) {
                    scheme = TileAddressingScheme.fromString(reader.getString());
                } else if ("grids".equals(fieldName)) {
                    grids = reader.readArray(reader1 -> reader1.getString());
                } else if ("data".equals(fieldName)) {
                    data = reader.readArray(reader1 -> reader1.getString());
                } else if ("minzoom".equals(fieldName)) {
                    minZoom = reader.getNullable(JsonReader::getInt);
                } else if ("maxzoom".equals(fieldName)) {
                    maxZoom = reader.getNullable(JsonReader::getInt);
                } else if ("bounds".equals(fieldName)) {
                    bounds = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("center".equals(fieldName)) {
                    center = reader.readArray(reader1 -> reader1.getDouble());
                } else {
                    reader.skipChildren();
                }
            }
            TileJsonMetadata deserializedTileJsonMetadata = new TileJsonMetadata(tiles);
            deserializedTileJsonMetadata.tileJson = tileJson;
            deserializedTileJsonMetadata.name = name;
            deserializedTileJsonMetadata.description = description;
            deserializedTileJsonMetadata.version = version;
            deserializedTileJsonMetadata.attribution = attribution;
            deserializedTileJsonMetadata.template = template;
            deserializedTileJsonMetadata.legend = legend;
            deserializedTileJsonMetadata.scheme = scheme;
            deserializedTileJsonMetadata.grids = grids;
            deserializedTileJsonMetadata.data = data;
            deserializedTileJsonMetadata.minZoom = minZoom;
            deserializedTileJsonMetadata.maxZoom = maxZoom;
            deserializedTileJsonMetadata.bounds = bounds;
            deserializedTileJsonMetadata.center = center;

            return deserializedTileJsonMetadata;
        });
    }
}
