// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.mdCollection of STAC items with
 * statistical information.
 */
@Immutable
public final class GeoJsonStatisticsForStacItemCollection
    implements JsonSerializable<GeoJsonStatisticsForStacItemCollection> {
    /*
     * GeoJSON type identifier for StacItemCollection
     */
    @Generated
    private final StacItemCollectionType type;

    /*
     * Array of STAC items with statistics
     */
    @Generated
    private final List<GeoJsonStatisticsItemResponse> features;

    /*
     * Bounding box coordinates [west, south, east, north]
     */
    @Generated
    private List<Double> boundingBox;

    /*
     * Stac Version
     */
    @Generated
    private String stacVersion;

    /*
     * MSFT Created
     */
    @Generated
    private String createdOn;

    /*
     * MSFT Updated
     */
    @Generated
    private String updatedOn;

    /*
     * MSFT Short Description
     */
    @Generated
    private String shortDescription;

    /*
     * List of STAC extension URLs used by this item collection
     */
    @Generated
    private List<String> stacExtensions;

    /*
     * Related links for the item collection
     */
    @Generated
    private List<StacLink> links;

    /*
     * Pagination context for the response
     * 
     * See the [STAC Context
     * Extension](https://github.com/radiantearth/stac-api-spec/tree/master/extensions/context#context-extension-
     * specification)
     */
    @Generated
    private StacContextExtension context;

    /**
     * Creates an instance of GeoJsonStatisticsForStacItemCollection class.
     * 
     * @param type the type value to set.
     * @param features the features value to set.
     */
    @Generated
    private GeoJsonStatisticsForStacItemCollection(StacItemCollectionType type,
        List<GeoJsonStatisticsItemResponse> features) {
        this.type = type;
        this.features = features;
    }

    /**
     * Get the type property: GeoJSON type identifier for StacItemCollection.
     * 
     * @return the type value.
     */
    @Generated
    public StacItemCollectionType getType() {
        return this.type;
    }

    /**
     * Get the features property: Array of STAC items with statistics.
     * 
     * @return the features value.
     */
    @Generated
    public List<GeoJsonStatisticsItemResponse> getFeatures() {
        return this.features;
    }

    /**
     * Get the boundingBox property: Bounding box coordinates [west, south, east, north].
     * 
     * @return the boundingBox value.
     */
    @Generated
    public List<Double> getBoundingBox() {
        return this.boundingBox;
    }

    /**
     * Get the stacVersion property: Stac Version.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the createdOn property: MSFT Created.
     * 
     * @return the createdOn value.
     */
    @Generated
    public String getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Get the updatedOn property: MSFT Updated.
     * 
     * @return the updatedOn value.
     */
    @Generated
    public String getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Get the shortDescription property: MSFT Short Description.
     * 
     * @return the shortDescription value.
     */
    @Generated
    public String getShortDescription() {
        return this.shortDescription;
    }

    /**
     * Get the stacExtensions property: List of STAC extension URLs used by this item collection.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Get the links property: Related links for the item collection.
     * 
     * @return the links value.
     */
    @Generated
    public List<StacLink> getLinks() {
        return this.links;
    }

    /**
     * Get the context property: Pagination context for the response
     * 
     * See the [STAC Context
     * Extension](https://github.com/radiantearth/stac-api-spec/tree/master/extensions/context#context-extension-specification).
     * 
     * @return the context value.
     */
    @Generated
    public StacContextExtension getContext() {
        return this.context;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("bbox", this.boundingBox, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeStringField("stac_version", this.stacVersion);
        jsonWriter.writeStringField("msft:_created", this.createdOn);
        jsonWriter.writeStringField("msft:_updated", this.updatedOn);
        jsonWriter.writeStringField("short_description", this.shortDescription);
        jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("context", this.context);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoJsonStatisticsForStacItemCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoJsonStatisticsForStacItemCollection if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GeoJsonStatisticsForStacItemCollection.
     */
    @Generated
    public static GeoJsonStatisticsForStacItemCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StacItemCollectionType type = null;
            List<GeoJsonStatisticsItemResponse> features = null;
            List<Double> boundingBox = null;
            String stacVersion = null;
            String createdOn = null;
            String updatedOn = null;
            String shortDescription = null;
            List<String> stacExtensions = null;
            List<StacLink> links = null;
            StacContextExtension context = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = StacItemCollectionType.fromString(reader.getString());
                } else if ("features".equals(fieldName)) {
                    features = reader.readArray(reader1 -> GeoJsonStatisticsItemResponse.fromJson(reader1));
                } else if ("bbox".equals(fieldName)) {
                    boundingBox = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("stac_version".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("msft:_created".equals(fieldName)) {
                    createdOn = reader.getString();
                } else if ("msft:_updated".equals(fieldName)) {
                    updatedOn = reader.getString();
                } else if ("short_description".equals(fieldName)) {
                    shortDescription = reader.getString();
                } else if ("stac_extensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> StacLink.fromJson(reader1));
                } else if ("context".equals(fieldName)) {
                    context = StacContextExtension.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            GeoJsonStatisticsForStacItemCollection deserializedGeoJsonStatisticsForStacItemCollection
                = new GeoJsonStatisticsForStacItemCollection(type, features);
            deserializedGeoJsonStatisticsForStacItemCollection.boundingBox = boundingBox;
            deserializedGeoJsonStatisticsForStacItemCollection.stacVersion = stacVersion;
            deserializedGeoJsonStatisticsForStacItemCollection.createdOn = createdOn;
            deserializedGeoJsonStatisticsForStacItemCollection.updatedOn = updatedOn;
            deserializedGeoJsonStatisticsForStacItemCollection.shortDescription = shortDescription;
            deserializedGeoJsonStatisticsForStacItemCollection.stacExtensions = stacExtensions;
            deserializedGeoJsonStatisticsForStacItemCollection.links = links;
            deserializedGeoJsonStatisticsForStacItemCollection.context = context;

            return deserializedGeoJsonStatisticsForStacItemCollection;
        });
    }
}
