// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.implementation;

import com.azure.analytics.planetarycomputer.PlanetaryComputerServiceVersion;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SharedAccessSignatures.
 */
public final class SharedAccessSignaturesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SharedAccessSignaturesService service;

    /**
     * The service client containing this operation class.
     */
    private final PlanetaryComputerClientImpl client;

    /**
     * Initializes an instance of SharedAccessSignaturesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SharedAccessSignaturesImpl(PlanetaryComputerClientImpl client) {
        this.service = RestProxy.create(SharedAccessSignaturesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PlanetaryComputerServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for PlanetaryComputerClientSharedAccessSignatures to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PlanetaryComputerClientSharedAccessSignatures")
    public interface SharedAccessSignaturesService {
        @Get("/sas/sign")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSign(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam(value = "href", encoded = true) String href,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/sas/sign")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSignSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam(value = "href", encoded = true) String href,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/sas/token/{collectionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getToken(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/sas/token/{collectionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTokenSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/sas/token/revoke")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> revokeToken(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, RequestOptions requestOptions, Context context);

        @Post("/sas/token/revoke")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> revokeTokenSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, RequestOptions requestOptions, Context context);
    }

    /**
     * sign an HREF in the format of a URL and returns a SingedLink
     * 
     * Signs a HREF (a link URL) by appending a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
     * If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:expiry: OffsetDateTime (Optional)
     *     href: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param href Href
     * 
     * HREF (URL) to sign.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return unsignedLink along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSignWithResponseAsync(String href, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSign(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), href, accept, requestOptions, context));
    }

    /**
     * sign an HREF in the format of a URL and returns a SingedLink
     * 
     * Signs a HREF (a link URL) by appending a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
     * If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:expiry: OffsetDateTime (Optional)
     *     href: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param href Href
     * 
     * HREF (URL) to sign.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return unsignedLink along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSignWithResponse(String href, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSignSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), href,
            accept, requestOptions, Context.NONE);
    }

    /**
     * generate a SAS Token for the given Azure Blob storage account and container.
     * 
     * Generate a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for the given storage account and container. The storage account and container
     * must be associated with a Planetary Computer dataset indexed by the STAC API.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:expiry: OffsetDateTime (Required)
     *     token: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Collection Id
     * 
     * The name of the Collection that the SAS token will be issued for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return managed Storage Shared Access Signature (SAS) Token along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTokenWithResponseAsync(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getToken(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * generate a SAS Token for the given Azure Blob storage account and container.
     * 
     * Generate a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for the given storage account and container. The storage account and container
     * must be associated with a Planetary Computer dataset indexed by the STAC API.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:expiry: OffsetDateTime (Required)
     *     token: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Collection Id
     * 
     * The name of the Collection that the SAS token will be issued for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return managed Storage Shared Access Signature (SAS) Token along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTokenWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTokenSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, accept, requestOptions, Context.NONE);
    }

    /**
     * revoke a SAS Token for the given Azure Blob storage account
     * 
     * Revoke a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for managed storage account of this GeoCatalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> revokeTokenWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.revokeToken(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), requestOptions, context));
    }

    /**
     * revoke a SAS Token for the given Azure Blob storage account
     * 
     * Revoke a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for managed storage account of this GeoCatalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> revokeTokenWithResponse(RequestOptions requestOptions) {
        return service.revokeTokenSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            requestOptions, Context.NONE);
    }
}
