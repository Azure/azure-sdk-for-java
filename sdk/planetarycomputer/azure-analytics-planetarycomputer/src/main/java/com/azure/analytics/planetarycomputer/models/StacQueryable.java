// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of a queryable field for STAC API filtering.
 */
@Fluent
public final class StacQueryable implements JsonSerializable<StacQueryable> {
    /*
     * Name of the queryable field.
     */
    @Generated
    private final String name;

    /*
     * Metadata for the queryable field.
     */
    @Generated
    private final Map<String, BinaryData> definition;

    /*
     * Whether to create a database index for this field.
     */
    @Generated
    private Boolean createIndex;

    /*
     * Data type of the queryable field.
     */
    @Generated
    private StacQueryableDefinitionDataType dataType;

    /**
     * Creates an instance of StacQueryable class.
     * 
     * @param name the name value to set.
     * @param definition the definition value to set.
     */
    @Generated
    public StacQueryable(String name, Map<String, BinaryData> definition) {
        this.name = name;
        this.definition = definition;
    }

    /**
     * Get the name property: Name of the queryable field.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the definition property: Metadata for the queryable field.
     * 
     * @return the definition value.
     */
    @Generated
    public Map<String, BinaryData> getDefinition() {
        return this.definition;
    }

    /**
     * Get the createIndex property: Whether to create a database index for this field.
     * 
     * @return the createIndex value.
     */
    @Generated
    public Boolean isCreateIndex() {
        return this.createIndex;
    }

    /**
     * Set the createIndex property: Whether to create a database index for this field.
     * 
     * @param createIndex the createIndex value to set.
     * @return the StacQueryable object itself.
     */
    @Generated
    public StacQueryable setCreateIndex(Boolean createIndex) {
        this.createIndex = createIndex;
        return this;
    }

    /**
     * Get the dataType property: Data type of the queryable field.
     * 
     * @return the dataType value.
     */
    @Generated
    public StacQueryableDefinitionDataType getDataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: Data type of the queryable field.
     * 
     * @param dataType the dataType value to set.
     * @return the StacQueryable object itself.
     */
    @Generated
    public StacQueryable setDataType(StacQueryableDefinitionDataType dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("definition", this.definition,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeBooleanField("create_index", this.createIndex);
        jsonWriter.writeStringField("data_type", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacQueryable from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacQueryable if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacQueryable.
     */
    @Generated
    public static StacQueryable fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            Map<String, BinaryData> definition = null;
            Boolean createIndex = null;
            StacQueryableDefinitionDataType dataType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("definition".equals(fieldName)) {
                    definition = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("create_index".equals(fieldName)) {
                    createIndex = reader.getNullable(JsonReader::getBoolean);
                } else if ("data_type".equals(fieldName)) {
                    dataType = StacQueryableDefinitionDataType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            StacQueryable deserializedStacQueryable = new StacQueryable(name, definition);
            deserializedStacQueryable.createIndex = createIndex;
            deserializedStacQueryable.dataType = dataType;

            return deserializedStacQueryable;
        });
    }
}
