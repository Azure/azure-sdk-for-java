// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer;

import com.azure.analytics.planetarycomputer.implementation.MultipartFormDataHelper;
import com.azure.analytics.planetarycomputer.implementation.StacsImpl;
import com.azure.analytics.planetarycomputer.models.FormContent;
import com.azure.analytics.planetarycomputer.models.Operation;
import com.azure.analytics.planetarycomputer.models.PartitionType;
import com.azure.analytics.planetarycomputer.models.RenderOption;
import com.azure.analytics.planetarycomputer.models.StacAssetUrlSigningMode;
import com.azure.analytics.planetarycomputer.models.StacCatalogCollections;
import com.azure.analytics.planetarycomputer.models.StacCollection;
import com.azure.analytics.planetarycomputer.models.StacConformanceClasses;
import com.azure.analytics.planetarycomputer.models.StacItem;
import com.azure.analytics.planetarycomputer.models.StacItemCollection;
import com.azure.analytics.planetarycomputer.models.StacItemOrStacItemCollection;
import com.azure.analytics.planetarycomputer.models.StacLandingPage;
import com.azure.analytics.planetarycomputer.models.StacMosaic;
import com.azure.analytics.planetarycomputer.models.StacQueryable;
import com.azure.analytics.planetarycomputer.models.StacSearchParameters;
import com.azure.analytics.planetarycomputer.models.TileSettings;
import com.azure.analytics.planetarycomputer.models.UserCollectionSettings;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous PlanetaryComputerClient type.
 */
@ServiceClient(builder = PlanetaryComputerClientBuilder.class, isAsync = true)
public final class StacAsyncClient {
    @Generated
    private final StacsImpl serviceClient;

    /**
     * Initializes an instance of StacAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    StacAsyncClient(StacsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     OffsetDateTime (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param body Multi-part form data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> createCollectionAssetWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        // Operation 'createCollectionAsset' is of content-type 'multipart/form-data'. Protocol API is not usable and
        // hence not generated.
        return this.serviceClient.createCollectionAssetWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     OffsetDateTime (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param body Multi-part form data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> createOrReplaceCollectionAssetWithResponse(String collectionId, String assetId,
        BinaryData body, RequestOptions requestOptions) {
        // Operation 'createOrReplaceCollectionAsset' is of content-type 'multipart/form-data'. Protocol API is not
        // usable and hence not generated.
        return this.serviceClient.createOrReplaceCollectionAssetWithResponseAsync(collectionId, assetId, body,
            requestOptions);
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCollectionAssetWithResponse(String collectionId, String assetId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCollectionAssetWithResponseAsync(collectionId, assetId, requestOptions);
    }

    /**
     * Get Config
     * 
     * Get the complete user configuration for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tileSettings (Required): {
     *         minZoom: int (Required)
     *         maxItemsPerTile: int (Required)
     *         defaultLocation (Optional): {
     *             zoom: int (Required)
     *             coordinates (Required): [
     *                 double (Required)
     *             ]
     *         }
     *     }
     *     mosaicInfo (Required): {
     *         mosaics (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 cql (Required): [
     *                      (Required){
     *                         String: BinaryData (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         renderOptions (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *                 options: String (Optional)
     *                 vectorOptions (Optional): {
     *                     tilejsonKey: String (Required)
     *                     sourceLayer: String (Required)
     *                     fillColor: String (Optional)
     *                     strokeColor: String (Optional)
     *                     strokeWidth: Integer (Optional)
     *                     filter (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *                 minZoom: Integer (Optional)
     *                 legend (Optional): {
     *                     type: String(continuous/classmap/interval/none) (Optional)
     *                     labels (Optional): [
     *                         String (Optional)
     *                     ]
     *                     trimStart: Integer (Optional)
     *                     trimEnd: Integer (Optional)
     *                     scaleFactor: Double (Optional)
     *                 }
     *                 conditions (Optional): [
     *                      (Optional){
     *                         property: String (Required)
     *                         value: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         defaultLocation (Optional): (recursive schema, see defaultLocation above)
     *         defaultCustomQuery (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return config
     * 
     * Get the complete user configuration for a given collection along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCollectionConfigurationWithResponse(String collectionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getCollectionConfigurationWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Add Collection Mosaic
     * 
     * Add a mosaic definition to a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: BinaryData (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: BinaryData (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Mosaic definition to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines a named mosaic with filtering criteria along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addMosaicWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.addMosaicWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Update Collection Mosaic
     * 
     * Update a mosaic definition from a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: BinaryData (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: BinaryData (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param body Mosaic definition to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines a named mosaic with filtering criteria along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceMosaicWithResponse(String collectionId, String mosaicId,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceMosaicWithResponseAsync(collectionId, mosaicId, body, requestOptions);
    }

    /**
     * Delete Collection Mosaic
     * 
     * Delete a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMosaicWithResponse(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteMosaicWithResponseAsync(collectionId, mosaicId, requestOptions);
    }

    /**
     * Get Collection Mosaic
     * 
     * Get a mosaic definition from a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: BinaryData (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaic
     * 
     * Get a mosaic definition from a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMosaicWithResponse(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        return this.serviceClient.getMosaicWithResponseAsync(collectionId, mosaicId, requestOptions);
    }

    /**
     * Get Collection Mosaics
     * 
     * Get the mosaic definitions for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         cql (Required): [
     *              (Required){
     *                 String: BinaryData (Required)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaics
     * 
     * Get the mosaic definitions for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listMosaicsWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.listMosaicsWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Create Collection
     * 
     * Create a new collection in the GeoCatalog instance.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     OffsetDateTime (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body Request collection body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateCollection(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateCollectionAsync(body, requestOptions);
    }

    /**
     * Create or update Collection
     * 
     * Create or replace a collection in the GeoCatalog instance.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     OffsetDateTime (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param body Request collection body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateOrReplaceCollection(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrReplaceCollectionAsync(collectionId, body, requestOptions);
    }

    /**
     * Delete Collection
     * 
     * Delete a collection in the GeoCatalog instance.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteCollection(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteCollectionAsync(collectionId, requestOptions);
    }

    /**
     * Get Collection
     * 
     * Get a collection in the GeoCatalog instance.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>String</td><td>No</td><td>Whether to sign asset URLs in the response. Allowed values:
     * "true", "false".</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>URL signature duration in minutes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     OffsetDateTime (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection
     * 
     * Get a collection in the GeoCatalog instance along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCollectionWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getCollectionWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Get Collections
     * 
     * List all collections in the GeoCatalog instance.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>String</td><td>No</td><td>Whether to sign asset URLs in the response. Allowed values:
     * "true", "false".</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>URL signature duration in minutes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     collections (Required): [
     *          (Required){
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             id: String (Required)
     *             description: String (Required)
     *             stac_version: String (Optional)
     *             links (Required): [
     *                 (recursive schema, see above)
     *             ]
     *             title: String (Optional)
     *             type: String (Optional)
     *             assets (Optional): {
     *                 String (Required): {
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                          (Optional){
     *                             name: String (Optional, Required on create)
     *                             description: String (Optional)
     *                             roles (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             url: String (Optional)
     *                         }
     *                     ]
     *                     gsd: Double (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     href: String (Optional, Required on create)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             license: String (Required)
     *             extent (Required): {
     *                 spatial (Required): {
     *                     bbox (Optional): [
     *                          (Optional)[
     *                             double (Optional)
     *                         ]
     *                     ]
     *                 }
     *                 temporal (Required): {
     *                     interval (Required): [
     *                          (Required)[
     *                             OffsetDateTime (Required)
     *                         ]
     *                     ]
     *                 }
     *             }
     *             keywords (Optional): [
     *                 String (Optional)
     *             ]
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             summaries (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collections
     * 
     * List all collections in the GeoCatalog instance along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listCollectionsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listCollectionsWithResponseAsync(requestOptions);
    }

    /**
     * Get Partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionTypeWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getPartitionTypeWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Create Partitiontype
     * 
     * Updates partition type for a GeoCatalog Collection. This will
     * determine the partitioning scheme for items within the database,
     * and can only be set before any items are loaded.
     * 
     * Ideal partitioning schemes result in partitions of roughly 100k items each.
     * 
     * The default partitioning scheme is "none" which does not partition items.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Partition type configuration determining how items are partitioned in storage.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> replacePartitionTypeWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.replacePartitionTypeWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Add Collection Render Option
     * 
     * Add a render option for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Render option configuration to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines visualization parameters for rendering data on a map along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRenderOptionWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createRenderOptionWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Update Collection Render Option
     * 
     * Update a render option for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param body Render option configuration to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines visualization parameters for rendering data on a map along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceRenderOptionWithResponse(String collectionId,
        String renderOptionId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceRenderOptionWithResponseAsync(collectionId, renderOptionId, body,
            requestOptions);
    }

    /**
     * Delete Collection Render Option
     * 
     * Delete a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRenderOptionWithResponse(String collectionId, String renderOptionId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteRenderOptionWithResponseAsync(collectionId, renderOptionId, requestOptions);
    }

    /**
     * Get Collection Render Option
     * 
     * Get a render option for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Render Option
     * 
     * Get a render option for a given collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRenderOptionWithResponse(String collectionId, String renderOptionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getRenderOptionWithResponseAsync(collectionId, renderOptionId, requestOptions);
    }

    /**
     * Get Collection Render Options
     * 
     * Get all render options for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *         options: String (Optional)
     *         vectorOptions (Optional): {
     *             tilejsonKey: String (Required)
     *             sourceLayer: String (Required)
     *             fillColor: String (Optional)
     *             strokeColor: String (Optional)
     *             strokeWidth: Integer (Optional)
     *             filter (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         minZoom: Integer (Optional)
     *         legend (Optional): {
     *             type: String(continuous/classmap/interval/none) (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             trimStart: Integer (Optional)
     *             trimEnd: Integer (Optional)
     *             scaleFactor: Double (Optional)
     *         }
     *         conditions (Optional): [
     *              (Optional){
     *                 property: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Render Options
     * 
     * Get all render options for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listRenderOptionsWithResponse(String collectionId,
        RequestOptions requestOptions) {
        return this.serviceClient.listRenderOptionsWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Get Collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Thumbnail
     * 
     * Get thumbnail for given collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCollectionThumbnailWithResponse(String collectionId, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getCollectionThumbnailWithResponseAsync(collectionId, accept, requestOptions);
    }

    /**
     * Get Collection Tile Settings
     * 
     * Get the tile settings for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Tile Settings
     * 
     * Get the tile settings for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTileSettingsWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getTileSettingsWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Update Collection Tile Settings
     * 
     * Update the tile settings for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Tile settings configuration to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return configuration for map tile visualization along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> replaceTileSettingsWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.replaceTileSettingsWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Conformance Classes
     * 
     * Returns the STAC conformance classes.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     conformsTo (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
     * 
     * Represents the OGC API conformance declaration along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getConformanceClassWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getConformanceClassWithResponseAsync(requestOptions);
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param body STAC Item or StacItemCollection
     * 
     * Represents a STAC Item or StacItemCollection as defined by the STAC 1.0.0 standard.
     * 
     * **Item**: A GeoJSON Feature that represents a single spatiotemporal asset.
     * It includes metadata such as geometry, datetime, and links to related assets.
     * Example: A satellite image with its metadata.
     * 
     * **StacItemCollection**: A GeoJSON FeatureCollection that contains multiple Items.
     * It is used to group multiple related Items together, such as a collection of satellite images.
     * 
     * This union allows the request body to accept either a single Item or a collection of Items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateItem(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateItemAsync(collectionId, body, requestOptions);
    }

    /**
     * Create or replace a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     geometry (Optional, Required on create): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Required)
     *     collection: String (Optional)
     *     bbox (Optional, Required on create): [
     *         double (Optional, Required on create)
     *     ]
     *     properties (Optional, Required on create): {
     *         platform: String (Optional)
     *         instruments (Optional): [
     *             String (Optional)
     *         ]
     *         constellation: String (Optional)
     *         mission: String (Optional)
     *         providers (Optional): [
     *              (Optional){
     *                 name: String (Optional, Required on create)
     *                 description: String (Optional)
     *                 roles (Optional): [
     *                     String (Optional)
     *                 ]
     *                 url: String (Optional)
     *             }
     *         ]
     *         gsd: Double (Optional)
     *         created: OffsetDateTime (Optional)
     *         updated: OffsetDateTime (Optional)
     *         title: String (Optional)
     *         description: String (Optional)
     *         datetime: String (Optional, Required on create)
     *         start_datetime: OffsetDateTime (Optional)
     *         end_datetime: OffsetDateTime (Optional)
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     assets (Optional, Required on create): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     _msft:ts: String (Optional)
     *     _msft:etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param body STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateOrReplaceItem(String collectionId, String itemId,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrReplaceItemAsync(collectionId, itemId, body, requestOptions);
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteItem(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteItemAsync(collectionId, itemId, requestOptions);
    }

    /**
     * Fetch a single STAC Item.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     geometry (Optional, Required on create): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Required)
     *     collection: String (Optional)
     *     bbox (Optional, Required on create): [
     *         double (Optional, Required on create)
     *     ]
     *     properties (Optional, Required on create): {
     *         platform: String (Optional)
     *         instruments (Optional): [
     *             String (Optional)
     *         ]
     *         constellation: String (Optional)
     *         mission: String (Optional)
     *         providers (Optional): [
     *              (Optional){
     *                 name: String (Optional, Required on create)
     *                 description: String (Optional)
     *                 roles (Optional): [
     *                     String (Optional)
     *                 ]
     *                 url: String (Optional)
     *             }
     *         ]
     *         gsd: Double (Optional)
     *         created: OffsetDateTime (Optional)
     *         updated: OffsetDateTime (Optional)
     *         title: String (Optional)
     *         description: String (Optional)
     *         datetime: String (Optional, Required on create)
     *         start_datetime: OffsetDateTime (Optional)
     *         end_datetime: OffsetDateTime (Optional)
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     assets (Optional, Required on create): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     _msft:ts: String (Optional)
     *     _msft:etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a STAC Item, which is a GeoJSON Feature with additional metadata along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getItemWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getItemWithResponseAsync(collectionId, itemId, requestOptions);
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The optional limit parameter recommends the number of items that
     * should be present in the response document.
     * 
     * If the limit parameter value is greater than advertised limit maximum, the server must return the
     * maximum possible number of items, rather than responding with an error.
     * 
     * Only items are counted that are on the first level of the collection in the response document.
     * Nested objects contained within the explicitly requested items must not be counted.
     * 
     * Minimum = 1. Maximum = 10000. Default = 10.</td></tr>
     * <tr><td>bbox</td><td>List&lt;String&gt;</td><td>No</td><td>Only features that have a geometry that intersects the
     * bounding box are selected.
     * The bounding box is provided as four or six numbers, depending on whether the
     * coordinate reference system includes a vertical axis (height or depth):
     * 
     * - Lower left corner, coordinate axis 1
     * - Lower left corner, coordinate axis 2
     * - Minimum value, coordinate axis 3 (optional)
     * - Upper right corner, coordinate axis 1
     * - Upper right corner, coordinate axis 2
     * - Maximum value, coordinate axis 3 (optional)
     * 
     * The coordinate reference system of the values is WGS 84 longitude/latitude
     * (http://www.opengis.net/def/crs/OGC/1.3/CRS84).
     * 
     * For WGS 84 longitude/latitude the values are in most cases the sequence of
     * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
     * However, in cases where the box spans the antimeridian the first value
     * (west-most box edge) is larger than the third value (east-most box edge).
     * 
     * If the vertical axis is included, the third and the sixth number are
     * the bottom and the top of the 3-dimensional bounding box.
     * 
     * If a feature has multiple spatial geometry properties, it is the decision of the
     * server whether only a single spatial geometry property is used to determine
     * the extent or all relevant geometries. In the form of "," separated string.</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>Either a date-time or an interval, open or closed. Date and
     * time expressions
     * adhere to RFC 3339. Open intervals are expressed using double-dots.
     * 
     * Examples:
     * 
     * - A date-time: "2018-02-12T23:20:50Z"
     * - A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
     * - Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"
     * 
     * Only features that have a temporal property that intersects the value of
     * `datetime` are selected.
     * 
     * If a feature has multiple temporal properties, it is the decision of the
     * server whether only a single temporal property is used to determine
     * the extent or all relevant temporal properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     features (Optional, Required on create): [
     *          (Optional, Required on create){
     *             type: String(Feature/FeatureCollection) (Required)
     *             stac_version: String (Optional)
     *             links (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             geometry (Optional, Required on create): {
     *                 type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *                 bbox (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             id: String (Required)
     *             collection: String (Optional)
     *             bbox (Optional, Required on create): [
     *                 double (Optional, Required on create)
     *             ]
     *             properties (Optional, Required on create): {
     *                 platform: String (Optional)
     *                 instruments (Optional): [
     *                     String (Optional)
     *                 ]
     *                 constellation: String (Optional)
     *                 mission: String (Optional)
     *                 providers (Optional): [
     *                      (Optional){
     *                         name: String (Optional, Required on create)
     *                         description: String (Optional)
     *                         roles (Optional): [
     *                             String (Optional)
     *                         ]
     *                         url: String (Optional)
     *                     }
     *                 ]
     *                 gsd: Double (Optional)
     *                 created: OffsetDateTime (Optional)
     *                 updated: OffsetDateTime (Optional)
     *                 title: String (Optional)
     *                 description: String (Optional)
     *                 datetime: String (Optional, Required on create)
     *                 start_datetime: OffsetDateTime (Optional)
     *                 end_datetime: OffsetDateTime (Optional)
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *             assets (Optional, Required on create): {
     *                 String (Required): {
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     gsd: Double (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     href: String (Optional, Required on create)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             _msft:ts: String (Optional)
     *             _msft:etag: String (Optional)
     *         }
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     context (Optional): {
     *         returned: int (Optional, Required on create)
     *         limit: Integer (Optional)
     *         matched: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listItemsWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.listItemsWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     geometry (Optional, Required on create): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Required)
     *     collection: String (Optional)
     *     bbox (Optional, Required on create): [
     *         double (Optional, Required on create)
     *     ]
     *     properties (Optional, Required on create): {
     *         platform: String (Optional)
     *         instruments (Optional): [
     *             String (Optional)
     *         ]
     *         constellation: String (Optional)
     *         mission: String (Optional)
     *         providers (Optional): [
     *              (Optional){
     *                 name: String (Optional, Required on create)
     *                 description: String (Optional)
     *                 roles (Optional): [
     *                     String (Optional)
     *                 ]
     *                 url: String (Optional)
     *             }
     *         ]
     *         gsd: Double (Optional)
     *         created: OffsetDateTime (Optional)
     *         updated: OffsetDateTime (Optional)
     *         title: String (Optional)
     *         description: String (Optional)
     *         datetime: String (Optional, Required on create)
     *         start_datetime: OffsetDateTime (Optional)
     *         end_datetime: OffsetDateTime (Optional)
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     assets (Optional, Required on create): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     _msft:ts: String (Optional)
     *     _msft:etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param body STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginUpdateItem(String collectionId, String itemId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginUpdateItemAsync(collectionId, itemId, body, requestOptions);
    }

    /**
     * Landing Page
     * 
     * Return the STAC landing page.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     title: String (Optional)
     *     stac_version: String (Optional)
     *     conformsTo (Required): [
     *         String (Required)
     *     ]
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     type: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
     * 
     * Represents the STAC API landing page with links to available resources along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getStacLandingPageWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getStacLandingPageWithResponseAsync(requestOptions);
    }

    /**
     * Set Collection Queryables
     * 
     * Set queryables for a collection given a list of queryable definitions.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         name: String (Required)
     *         definition (Required): {
     *             String: BinaryData (Required)
     *         }
     *         create_index: Boolean (Optional)
     *         data_type: String(string/number/boolean/timestamp/date) (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         name: String (Required)
     *         definition (Required): {
     *             String: BinaryData (Required)
     *         }
     *         create_index: Boolean (Optional)
     *         data_type: String(string/number/boolean/timestamp/date) (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Request queryable definition body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createQueryablesWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createQueryablesWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Update Collection Queryables
     * 
     * Updates a queryable given a queryable definition and
     * corresponding collection id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *         String: BinaryData (Required)
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(string/number/boolean/timestamp/date) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *         String: BinaryData (Required)
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(string/number/boolean/timestamp/date) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param body Request queryable definition body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return definition of a queryable field for STAC API filtering along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceQueryableWithResponse(String collectionId, String queryableName,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceQueryableWithResponseAsync(collectionId, queryableName, body,
            requestOptions);
    }

    /**
     * Delete Queryables
     * 
     * Delete queryables by name for specified collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteQueryableWithResponse(String collectionId, String queryableName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteQueryableWithResponseAsync(collectionId, queryableName, requestOptions);
    }

    /**
     * Queryables
     * 
     * List all queryables in the GeoCatalog instance.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     String: BinaryData (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listQueryablesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listQueryablesWithResponseAsync(requestOptions);
    }

    /**
     * Collection Queryables
     * 
     * List all queryables in a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     String: BinaryData (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Collection ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listCollectionQueryablesWithResponse(String collectionId,
        RequestOptions requestOptions) {
        return this.serviceClient.listCollectionQueryablesWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Search
     * 
     * STAC search operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     intersects (Optional): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     datetime: String (Optional)
     *     limit: Integer (Optional)
     *     conf (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     sign: String(true/false) (Optional)
     *     duration: Integer (Optional)
     *     query (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     sortby (Optional): [
     *          (Optional){
     *             field: String (Required)
     *             direction: String(asc/desc) (Required)
     *         }
     *     ]
     *     fields (Optional): [
     *          (Optional){
     *             include (Optional): [
     *                 String (Optional)
     *             ]
     *             exclude (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     filter: String (Optional)
     *     filter-crs: String (Optional)
     *     filter-lang: String(cql-json/cql2-json/cql2-text) (Optional)
     *     token: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     features (Optional, Required on create): [
     *          (Optional, Required on create){
     *             type: String(Feature/FeatureCollection) (Required)
     *             stac_version: String (Optional)
     *             links (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             geometry (Optional, Required on create): {
     *                 type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *                 bbox (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             id: String (Required)
     *             collection: String (Optional)
     *             bbox (Optional, Required on create): [
     *                 double (Optional, Required on create)
     *             ]
     *             properties (Optional, Required on create): {
     *                 platform: String (Optional)
     *                 instruments (Optional): [
     *                     String (Optional)
     *                 ]
     *                 constellation: String (Optional)
     *                 mission: String (Optional)
     *                 providers (Optional): [
     *                      (Optional){
     *                         name: String (Optional, Required on create)
     *                         description: String (Optional)
     *                         roles (Optional): [
     *                             String (Optional)
     *                         ]
     *                         url: String (Optional)
     *                     }
     *                 ]
     *                 gsd: Double (Optional)
     *                 created: OffsetDateTime (Optional)
     *                 updated: OffsetDateTime (Optional)
     *                 title: String (Optional)
     *                 description: String (Optional)
     *                 datetime: String (Optional, Required on create)
     *                 start_datetime: OffsetDateTime (Optional)
     *                 end_datetime: OffsetDateTime (Optional)
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *             assets (Optional, Required on create): {
     *                 String (Required): {
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     gsd: Double (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     href: String (Optional, Required on create)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             _msft:ts: String (Optional)
     *             _msft:etag: String (Optional)
     *         }
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     context (Optional): {
     *         returned: int (Optional, Required on create)
     *         limit: Integer (Optional)
     *         matched: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body Request body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.searchWithResponseAsync(body, requestOptions);
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * @param collectionId STAC Collection ID.
     * @param body Multi-part form data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacCollection> createCollectionAsset(String collectionId, FormContent body) {
        // Generated convenience method for createCollectionAssetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createCollectionAssetWithResponse(collectionId,
            new MultipartFormDataHelper(requestOptions).serializeJsonField("data", body.getData())
                .serializeFileField("file", body.getFile().getContent(), body.getFile().getContentType(),
                    body.getFile().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(StacCollection.class));
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param body Multi-part form data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacCollection> createOrReplaceCollectionAsset(String collectionId, String assetId, FormContent body) {
        // Generated convenience method for createOrReplaceCollectionAssetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceCollectionAssetWithResponse(collectionId, assetId,
            new MultipartFormDataHelper(requestOptions).serializeJsonField("data", body.getData())
                .serializeFileField("file", body.getFile().getContent(), body.getFile().getContentType(),
                    body.getFile().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(StacCollection.class));
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCollectionAsset(String collectionId, String assetId) {
        // Generated convenience method for deleteCollectionAssetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteCollectionAssetWithResponse(collectionId, assetId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Config
     * 
     * Get the complete user configuration for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config
     * 
     * Get the complete user configuration for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserCollectionSettings> getCollectionConfiguration(String collectionId) {
        // Generated convenience method for getCollectionConfigurationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCollectionConfigurationWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(UserCollectionSettings.class));
    }

    /**
     * Add Collection Mosaic
     * 
     * Add a mosaic definition to a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Mosaic definition to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a named mosaic with filtering criteria on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacMosaic> addMosaic(String collectionId, StacMosaic body) {
        // Generated convenience method for addMosaicWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addMosaicWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacMosaic.class));
    }

    /**
     * Update Collection Mosaic
     * 
     * Update a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param body Mosaic definition to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a named mosaic with filtering criteria on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacMosaic> createOrReplaceMosaic(String collectionId, String mosaicId, StacMosaic body) {
        // Generated convenience method for createOrReplaceMosaicWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceMosaicWithResponse(collectionId, mosaicId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacMosaic.class));
    }

    /**
     * Delete Collection Mosaic
     * 
     * Delete a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMosaic(String collectionId, String mosaicId) {
        // Generated convenience method for deleteMosaicWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteMosaicWithResponse(collectionId, mosaicId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Collection Mosaic
     * 
     * Get a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Mosaic
     * 
     * Get a mosaic definition from a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacMosaic> getMosaic(String collectionId, String mosaicId) {
        // Generated convenience method for getMosaicWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMosaicWithResponse(collectionId, mosaicId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacMosaic.class));
    }

    /**
     * Get Collection Mosaics
     * 
     * Get the mosaic definitions for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Mosaics
     * 
     * Get the mosaic definitions for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<StacMosaic>> listMosaics(String collectionId) {
        // Generated convenience method for listMosaicsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listMosaicsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_STAC_MOSAIC));
    }

    /**
     * Create Collection
     * 
     * Create a new collection in the GeoCatalog instance.
     * 
     * @param body Request collection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginCreateCollection(StacCollection body) {
        // Generated convenience method for beginCreateCollectionWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateCollectionWithModelAsync(BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Create or update Collection
     * 
     * Create or replace a collection in the GeoCatalog instance.
     * 
     * @param collectionId Catalog collection id.
     * @param body Request collection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginCreateOrReplaceCollection(String collectionId, StacCollection body) {
        // Generated convenience method for beginCreateOrReplaceCollectionWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateOrReplaceCollectionWithModelAsync(collectionId, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Delete Collection
     * 
     * Delete a collection in the GeoCatalog instance.
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginDeleteCollection(String collectionId) {
        // Generated convenience method for beginDeleteCollectionWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteCollectionWithModelAsync(collectionId, requestOptions);
    }

    /**
     * Get Collection
     * 
     * Get a collection in the GeoCatalog instance.
     * 
     * @param collectionId Catalog collection id.
     * @param sign Whether to sign asset URLs in the response.
     * @param durationInMinutes URL signature duration in minutes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection
     * 
     * Get a collection in the GeoCatalog instance on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacCollection> getCollection(String collectionId, StacAssetUrlSigningMode sign,
        Integer durationInMinutes) {
        // Generated convenience method for getCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sign != null) {
            requestOptions.addQueryParam("sign", sign.toString(), false);
        }
        if (durationInMinutes != null) {
            requestOptions.addQueryParam("duration", String.valueOf(durationInMinutes), false);
        }
        return getCollectionWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacCollection.class));
    }

    /**
     * Get Collection
     * 
     * Get a collection in the GeoCatalog instance.
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection
     * 
     * Get a collection in the GeoCatalog instance on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacCollection> getCollection(String collectionId) {
        // Generated convenience method for getCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCollectionWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacCollection.class));
    }

    /**
     * Get Collections
     * 
     * List all collections in the GeoCatalog instance.
     * 
     * @param sign Whether to sign asset URLs in the response.
     * @param durationInMinutes URL signature duration in minutes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collections
     * 
     * List all collections in the GeoCatalog instance on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacCatalogCollections> listCollections(StacAssetUrlSigningMode sign, Integer durationInMinutes) {
        // Generated convenience method for listCollectionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sign != null) {
            requestOptions.addQueryParam("sign", sign.toString(), false);
        }
        if (durationInMinutes != null) {
            requestOptions.addQueryParam("duration", String.valueOf(durationInMinutes), false);
        }
        return listCollectionsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacCatalogCollections.class));
    }

    /**
     * Get Collections
     * 
     * List all collections in the GeoCatalog instance.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collections
     * 
     * List all collections in the GeoCatalog instance on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacCatalogCollections> listCollections() {
        // Generated convenience method for listCollectionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listCollectionsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacCatalogCollections.class));
    }

    /**
     * Get Partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionType> getPartitionType(String collectionId) {
        // Generated convenience method for getPartitionTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPartitionTypeWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PartitionType.class));
    }

    /**
     * Create Partitiontype
     * 
     * Updates partition type for a GeoCatalog Collection. This will
     * determine the partitioning scheme for items within the database,
     * and can only be set before any items are loaded.
     * 
     * Ideal partitioning schemes result in partitions of roughly 100k items each.
     * 
     * The default partitioning scheme is "none" which does not partition items.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Partition type configuration determining how items are partitioned in storage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> replacePartitionType(String collectionId, PartitionType body) {
        // Generated convenience method for replacePartitionTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return replacePartitionTypeWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Add Collection Render Option
     * 
     * Add a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Render option configuration to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines visualization parameters for rendering data on a map on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RenderOption> createRenderOption(String collectionId, RenderOption body) {
        // Generated convenience method for createRenderOptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createRenderOptionWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RenderOption.class));
    }

    /**
     * Update Collection Render Option
     * 
     * Update a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param body Render option configuration to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines visualization parameters for rendering data on a map on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RenderOption> createOrReplaceRenderOption(String collectionId, String renderOptionId,
        RenderOption body) {
        // Generated convenience method for createOrReplaceRenderOptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceRenderOptionWithResponse(collectionId, renderOptionId, BinaryData.fromObject(body),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(RenderOption.class));
    }

    /**
     * Delete Collection Render Option
     * 
     * Delete a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRenderOption(String collectionId, String renderOptionId) {
        // Generated convenience method for deleteRenderOptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteRenderOptionWithResponse(collectionId, renderOptionId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Collection Render Option
     * 
     * Get a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Render Option
     * 
     * Get a render option for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RenderOption> getRenderOption(String collectionId, String renderOptionId) {
        // Generated convenience method for getRenderOptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRenderOptionWithResponse(collectionId, renderOptionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RenderOption.class));
    }

    /**
     * Get Collection Render Options
     * 
     * Get all render options for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Render Options
     * 
     * Get all render options for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<RenderOption>> listRenderOptions(String collectionId) {
        // Generated convenience method for listRenderOptionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listRenderOptionsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_RENDER_OPTION));
    }

    /**
     * Get Collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * @param collectionId STAC Collection ID.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Thumbnail
     * 
     * Get thumbnail for given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getCollectionThumbnail(String collectionId, String accept) {
        // Generated convenience method for getCollectionThumbnailWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCollectionThumbnailWithResponse(collectionId, accept, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Collection Tile Settings
     * 
     * Get the tile settings for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Tile Settings
     * 
     * Get the tile settings for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TileSettings> getTileSettings(String collectionId) {
        // Generated convenience method for getTileSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTileSettingsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TileSettings.class));
    }

    /**
     * Update Collection Tile Settings
     * 
     * Update the tile settings for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Tile settings configuration to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for map tile visualization on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TileSettings> replaceTileSettings(String collectionId, TileSettings body) {
        // Generated convenience method for replaceTileSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return replaceTileSettingsWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TileSettings.class));
    }

    /**
     * Conformance Classes
     * 
     * Returns the STAC conformance classes.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
     * 
     * Represents the OGC API conformance declaration on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacConformanceClasses> getConformanceClass() {
        // Generated convenience method for getConformanceClassWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getConformanceClassWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacConformanceClasses.class));
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param body STAC Item or StacItemCollection
     * 
     * Represents a STAC Item or StacItemCollection as defined by the STAC 1.0.0 standard.
     * 
     * **Item**: A GeoJSON Feature that represents a single spatiotemporal asset.
     * It includes metadata such as geometry, datetime, and links to related assets.
     * Example: A satellite image with its metadata.
     * 
     * **StacItemCollection**: A GeoJSON FeatureCollection that contains multiple Items.
     * It is used to group multiple related Items together, such as a collection of satellite images.
     * 
     * This union allows the request body to accept either a single Item or a collection of Items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginCreateItem(String collectionId, StacItemOrStacItemCollection body) {
        // Generated convenience method for beginCreateItemWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateItemWithModelAsync(collectionId, BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Create or replace a STAC item in a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param body STAC Item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginCreateOrReplaceItem(String collectionId, String itemId, StacItem body) {
        // Generated convenience method for beginCreateOrReplaceItemWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateOrReplaceItemWithModelAsync(collectionId, itemId, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Delete a STAC item from a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginDeleteItem(String collectionId, String itemId) {
        // Generated convenience method for beginDeleteItemWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteItemWithModelAsync(collectionId, itemId, requestOptions);
    }

    /**
     * Fetch a single STAC Item.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a STAC Item, which is a GeoJSON Feature with additional metadata on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacItem> getItem(String collectionId, String itemId) {
        // Generated convenience method for getItemWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getItemWithResponse(collectionId, itemId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacItem.class));
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.
     * 
     * @param collectionId Catalog collection id.
     * @param limit The optional limit parameter recommends the number of items that should be present in the response
     * document.
     * 
     * If the limit parameter value is greater than advertised limit maximum, the server must return the
     * maximum possible number of items, rather than responding with an error.
     * 
     * Only items are counted that are on the first level of the collection in the response document.
     * Nested objects contained within the explicitly requested items must not be counted.
     * 
     * Minimum = 1. Maximum = 10000. Default = 10.
     * @param boundingBox Only features that have a geometry that intersects the bounding box are selected.
     * The bounding box is provided as four or six numbers, depending on whether the
     * coordinate reference system includes a vertical axis (height or depth):
     * 
     * - Lower left corner, coordinate axis 1
     * - Lower left corner, coordinate axis 2
     * - Minimum value, coordinate axis 3 (optional)
     * - Upper right corner, coordinate axis 1
     * - Upper right corner, coordinate axis 2
     * - Maximum value, coordinate axis 3 (optional)
     * 
     * The coordinate reference system of the values is WGS 84 longitude/latitude
     * (http://www.opengis.net/def/crs/OGC/1.3/CRS84).
     * 
     * For WGS 84 longitude/latitude the values are in most cases the sequence of
     * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
     * However, in cases where the box spans the antimeridian the first value
     * (west-most box edge) is larger than the third value (east-most box edge).
     * 
     * If the vertical axis is included, the third and the sixth number are
     * the bottom and the top of the 3-dimensional bounding box.
     * 
     * If a feature has multiple spatial geometry properties, it is the decision of the
     * server whether only a single spatial geometry property is used to determine
     * the extent or all relevant geometries.
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions
     * adhere to RFC 3339. Open intervals are expressed using double-dots.
     * 
     * Examples:
     * 
     * - A date-time: "2018-02-12T23:20:50Z"
     * - A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
     * - Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"
     * 
     * Only features that have a temporal property that intersects the value of
     * `datetime` are selected.
     * 
     * If a feature has multiple temporal properties, it is the decision of the
     * server whether only a single temporal property is used to determine
     * the extent or all relevant temporal properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacItemCollection> listItems(String collectionId, Integer limit, List<String> boundingBox,
        String datetime) {
        // Generated convenience method for listItemsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (boundingBox != null) {
            requestOptions.addQueryParam("bbox",
                boundingBox.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (datetime != null) {
            requestOptions.addQueryParam("datetime", datetime, false);
        }
        return listItemsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacItemCollection.class));
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacItemCollection> listItems(String collectionId) {
        // Generated convenience method for listItemsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listItemsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacItemCollection.class));
    }

    /**
     * Landing Page
     * 
     * Return the STAC landing page.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
     * 
     * Represents the STAC API landing page with links to available resources on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacLandingPage> getStacLandingPage() {
        // Generated convenience method for getStacLandingPageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStacLandingPageWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacLandingPage.class));
    }

    /**
     * Set Collection Queryables
     * 
     * Set queryables for a collection given a list of queryable definitions.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Request queryable definition body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<StacQueryable>> createQueryables(String collectionId, List<StacQueryable> body) {
        // Generated convenience method for createQueryablesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createQueryablesWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_STAC_QUERYABLE));
    }

    /**
     * Update Collection Queryables
     * 
     * Updates a queryable given a queryable definition and
     * corresponding collection id.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param body Request queryable definition body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return definition of a queryable field for STAC API filtering on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacQueryable> createOrReplaceQueryable(String collectionId, String queryableName, StacQueryable body) {
        // Generated convenience method for createOrReplaceQueryableWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceQueryableWithResponse(collectionId, queryableName, BinaryData.fromObject(body),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(StacQueryable.class));
    }

    /**
     * Delete Queryables
     * 
     * Delete queryables by name for specified collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteQueryable(String collectionId, String queryableName) {
        // Generated convenience method for deleteQueryableWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteQueryableWithResponse(collectionId, queryableName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Queryables
     * 
     * List all queryables in the GeoCatalog instance.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Map<String, BinaryData>> listQueryables() {
        // Generated convenience method for listQueryablesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listQueryablesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_MAP_STRING_BINARY_DATA));
    }

    /**
     * Collection Queryables
     * 
     * List all queryables in a given collection.
     * 
     * @param collectionId Collection ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Map<String, BinaryData>> listCollectionQueryables(String collectionId) {
        // Generated convenience method for listCollectionQueryablesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listCollectionQueryablesWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_MAP_STRING_BINARY_DATA));
    }

    /**
     * Search
     * 
     * STAC search operation.
     * 
     * @param body Request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacItemCollection> search(StacSearchParameters body) {
        // Generated convenience method for searchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return searchWithResponse(BinaryData.fromObject(body), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(StacItemCollection.class));
    }

    @Generated
    private static final TypeReference<List<StacMosaic>> TYPE_REFERENCE_LIST_STAC_MOSAIC
        = new TypeReference<List<StacMosaic>>() {
        };

    @Generated
    private static final TypeReference<Map<String, BinaryData>> TYPE_REFERENCE_MAP_STRING_BINARY_DATA
        = new TypeReference<Map<String, BinaryData>>() {
        };

    @Generated
    private static final TypeReference<List<StacQueryable>> TYPE_REFERENCE_LIST_STAC_QUERYABLE
        = new TypeReference<List<StacQueryable>>() {
        };

    @Generated
    private static final TypeReference<List<RenderOption>> TYPE_REFERENCE_LIST_RENDER_OPTION
        = new TypeReference<List<RenderOption>>() {
        };
}
