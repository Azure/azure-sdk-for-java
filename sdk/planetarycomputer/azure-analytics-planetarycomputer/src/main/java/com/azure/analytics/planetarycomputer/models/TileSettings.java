// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration for map tile visualization.
 */
@Fluent
public final class TileSettings implements JsonSerializable<TileSettings> {
    /*
     * The minimum zoom level that can be requested for this collection. Provides a
     * hard limit for the tile servers to ensure they don't get requests for low zoom
     * levels, which would cause many files to be fetched and the tile servers to
     * hang.
     */
    @Generated
    private final int minZoom;

    /*
     * Maximum number of items to include in a single tile.
     */
    @Generated
    private final int maxItemsPerTile;

    /*
     * Default map location when displaying this collection.
     */
    @Generated
    private DefaultLocation defaultLocation;

    /**
     * Creates an instance of TileSettings class.
     * 
     * @param minZoom the minZoom value to set.
     * @param maxItemsPerTile the maxItemsPerTile value to set.
     */
    @Generated
    public TileSettings(int minZoom, int maxItemsPerTile) {
        this.minZoom = minZoom;
        this.maxItemsPerTile = maxItemsPerTile;
    }

    /**
     * Get the minZoom property: The minimum zoom level that can be requested for this collection. Provides a
     * hard limit for the tile servers to ensure they don't get requests for low zoom
     * levels, which would cause many files to be fetched and the tile servers to
     * hang.
     * 
     * @return the minZoom value.
     */
    @Generated
    public int getMinZoom() {
        return this.minZoom;
    }

    /**
     * Get the maxItemsPerTile property: Maximum number of items to include in a single tile.
     * 
     * @return the maxItemsPerTile value.
     */
    @Generated
    public int getMaxItemsPerTile() {
        return this.maxItemsPerTile;
    }

    /**
     * Get the defaultLocation property: Default map location when displaying this collection.
     * 
     * @return the defaultLocation value.
     */
    @Generated
    public DefaultLocation getDefaultLocation() {
        return this.defaultLocation;
    }

    /**
     * Set the defaultLocation property: Default map location when displaying this collection.
     * 
     * @param defaultLocation the defaultLocation value to set.
     * @return the TileSettings object itself.
     */
    @Generated
    public TileSettings setDefaultLocation(DefaultLocation defaultLocation) {
        this.defaultLocation = defaultLocation;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("minZoom", this.minZoom);
        jsonWriter.writeIntField("maxItemsPerTile", this.maxItemsPerTile);
        jsonWriter.writeJsonField("defaultLocation", this.defaultLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TileSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TileSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TileSettings.
     */
    @Generated
    public static TileSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int minZoom = 0;
            int maxItemsPerTile = 0;
            DefaultLocation defaultLocation = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minZoom".equals(fieldName)) {
                    minZoom = reader.getInt();
                } else if ("maxItemsPerTile".equals(fieldName)) {
                    maxItemsPerTile = reader.getInt();
                } else if ("defaultLocation".equals(fieldName)) {
                    defaultLocation = DefaultLocation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            TileSettings deserializedTileSettings = new TileSettings(minZoom, maxItemsPerTile);
            deserializedTileSettings.defaultLocation = defaultLocation;

            return deserializedTileSettings;
        });
    }
}
