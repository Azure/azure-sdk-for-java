// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model for variableMatrixWidth.
 */
@Immutable
public final class VariableMatrixWidth implements JsonSerializable<VariableMatrixWidth> {
    /*
     * Number of tiles in width that coalesce in a single tile for these rows
     */
    @Generated
    private final int coalesce;

    /*
     * First tile row where the coalescence factor applies for this tilematrix
     */
    @Generated
    private final int minTileRow;

    /*
     * Last tile row where the coalescence factor applies for this tilematrix
     */
    @Generated
    private final int maxTileRow;

    /**
     * Creates an instance of VariableMatrixWidth class.
     * 
     * @param coalesce the coalesce value to set.
     * @param minTileRow the minTileRow value to set.
     * @param maxTileRow the maxTileRow value to set.
     */
    @Generated
    private VariableMatrixWidth(int coalesce, int minTileRow, int maxTileRow) {
        this.coalesce = coalesce;
        this.minTileRow = minTileRow;
        this.maxTileRow = maxTileRow;
    }

    /**
     * Get the coalesce property: Number of tiles in width that coalesce in a single tile for these rows.
     * 
     * @return the coalesce value.
     */
    @Generated
    public int getCoalesce() {
        return this.coalesce;
    }

    /**
     * Get the minTileRow property: First tile row where the coalescence factor applies for this tilematrix.
     * 
     * @return the minTileRow value.
     */
    @Generated
    public int getMinTileRow() {
        return this.minTileRow;
    }

    /**
     * Get the maxTileRow property: Last tile row where the coalescence factor applies for this tilematrix.
     * 
     * @return the maxTileRow value.
     */
    @Generated
    public int getMaxTileRow() {
        return this.maxTileRow;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("coalesce", this.coalesce);
        jsonWriter.writeIntField("minTileRow", this.minTileRow);
        jsonWriter.writeIntField("maxTileRow", this.maxTileRow);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VariableMatrixWidth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VariableMatrixWidth if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VariableMatrixWidth.
     */
    @Generated
    public static VariableMatrixWidth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int coalesce = 0;
            int minTileRow = 0;
            int maxTileRow = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("coalesce".equals(fieldName)) {
                    coalesce = reader.getInt();
                } else if ("minTileRow".equals(fieldName)) {
                    minTileRow = reader.getInt();
                } else if ("maxTileRow".equals(fieldName)) {
                    maxTileRow = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new VariableMatrixWidth(coalesce, minTileRow, maxTileRow);
        });
    }
}
