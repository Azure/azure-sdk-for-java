// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Defines a named mosaic with filtering criteria.
 */
@Fluent
public final class StacMosaic implements JsonSerializable<StacMosaic> {
    /*
     * Unique identifier for the mosaic.
     */
    @Generated
    private final String id;

    /*
     * Short descriptive name for the mosaic.
     */
    @Generated
    private final String name;

    /*
     * Detailed description of the mosaic.
     */
    @Generated
    private String description;

    /*
     * A list of valid CQL2-JSON expressions used to filter the collection to moasic.
     */
    @Generated
    private final List<Map<String, BinaryData>> cql;

    /**
     * Creates an instance of StacMosaic class.
     * 
     * @param id the id value to set.
     * @param name the name value to set.
     * @param cql the cql value to set.
     */
    @Generated
    public StacMosaic(String id, String name, List<Map<String, BinaryData>> cql) {
        this.id = id;
        this.name = name;
        this.cql = cql;
    }

    /**
     * Get the id property: Unique identifier for the mosaic.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: Short descriptive name for the mosaic.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: Detailed description of the mosaic.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Detailed description of the mosaic.
     * 
     * @param description the description value to set.
     * @return the StacMosaic object itself.
     */
    @Generated
    public StacMosaic setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the cql property: A list of valid CQL2-JSON expressions used to filter the collection to moasic.
     * 
     * @return the cql value.
     */
    @Generated
    public List<Map<String, BinaryData>> getCql() {
        return this.cql;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("cql", this.cql, (writer, element) -> writer.writeMap(element,
            (writer1, element1) -> writer1.writeUntyped(element1 == null ? null : element1.toObject(Object.class))));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacMosaic from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacMosaic if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacMosaic.
     */
    @Generated
    public static StacMosaic fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            List<Map<String, BinaryData>> cql = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("cql".equals(fieldName)) {
                    cql = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()))));
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            StacMosaic deserializedStacMosaic = new StacMosaic(id, name, cql);
            deserializedStacMosaic.description = description;

            return deserializedStacMosaic;
        });
    }
}
