// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Geographic extent of the tile matrix set expressed in the specified coordinate reference system.
 */
@Immutable
public final class TileMatrixSetBoundingBox implements JsonSerializable<TileMatrixSetBoundingBox> {
    /*
     * Lower-left corner coordinates [x, y] of bounding box
     */
    @Generated
    private final List<String> lowerLeft;

    /*
     * Upper-right corner coordinates [x, y] of bounding box
     */
    @Generated
    private final List<String> upperRight;

    /*
     * Coordinate reference system identifier
     */
    @Generated
    private String crs;

    /*
     * Explicit axis order for the CRS coordinates (e.g., ['x', 'y'])
     */
    @Generated
    private List<String> orderedAxes;

    /**
     * Creates an instance of TileMatrixSetBoundingBox class.
     * 
     * @param lowerLeft the lowerLeft value to set.
     * @param upperRight the upperRight value to set.
     */
    @Generated
    private TileMatrixSetBoundingBox(List<String> lowerLeft, List<String> upperRight) {
        this.lowerLeft = lowerLeft;
        this.upperRight = upperRight;
    }

    /**
     * Get the lowerLeft property: Lower-left corner coordinates [x, y] of bounding box.
     * 
     * @return the lowerLeft value.
     */
    @Generated
    public List<String> getLowerLeft() {
        return this.lowerLeft;
    }

    /**
     * Get the upperRight property: Upper-right corner coordinates [x, y] of bounding box.
     * 
     * @return the upperRight value.
     */
    @Generated
    public List<String> getUpperRight() {
        return this.upperRight;
    }

    /**
     * Get the crs property: Coordinate reference system identifier.
     * 
     * @return the crs value.
     */
    @Generated
    public String getCrs() {
        return this.crs;
    }

    /**
     * Get the orderedAxes property: Explicit axis order for the CRS coordinates (e.g., ['x', 'y']).
     * 
     * @return the orderedAxes value.
     */
    @Generated
    public List<String> getOrderedAxes() {
        return this.orderedAxes;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("lowerLeft", this.lowerLeft, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("upperRight", this.upperRight, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("crs", this.crs);
        jsonWriter.writeArrayField("orderedAxes", this.orderedAxes, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TileMatrixSetBoundingBox from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TileMatrixSetBoundingBox if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TileMatrixSetBoundingBox.
     */
    @Generated
    public static TileMatrixSetBoundingBox fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> lowerLeft = null;
            List<String> upperRight = null;
            String crs = null;
            List<String> orderedAxes = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lowerLeft".equals(fieldName)) {
                    lowerLeft = reader.readArray(reader1 -> reader1.getString());
                } else if ("upperRight".equals(fieldName)) {
                    upperRight = reader.readArray(reader1 -> reader1.getString());
                } else if ("crs".equals(fieldName)) {
                    crs = reader.getString();
                } else if ("orderedAxes".equals(fieldName)) {
                    orderedAxes = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TileMatrixSetBoundingBox deserializedTileMatrixSetBoundingBox
                = new TileMatrixSetBoundingBox(lowerLeft, upperRight);
            deserializedTileMatrixSetBoundingBox.crs = crs;
            deserializedTileMatrixSetBoundingBox.orderedAxes = orderedAxes;

            return deserializedTileMatrixSetBoundingBox;
        });
    }
}
