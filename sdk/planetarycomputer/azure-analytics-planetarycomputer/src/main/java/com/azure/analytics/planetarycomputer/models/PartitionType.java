// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines how data is partitioned for efficient storage and retrieval.
 */
@Fluent
public final class PartitionType implements JsonSerializable<PartitionType> {
    /*
     * Partitioning scheme to use for data organization.
     */
    @Generated
    private PartitionTypeScheme scheme;

    /**
     * Creates an instance of PartitionType class.
     */
    @Generated
    public PartitionType() {
    }

    /**
     * Get the scheme property: Partitioning scheme to use for data organization.
     * 
     * @return the scheme value.
     */
    @Generated
    public PartitionTypeScheme getScheme() {
        return this.scheme;
    }

    /**
     * Set the scheme property: Partitioning scheme to use for data organization.
     * 
     * @param scheme the scheme value to set.
     * @return the PartitionType object itself.
     */
    @Generated
    public PartitionType setScheme(PartitionTypeScheme scheme) {
        this.scheme = scheme;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheme", this.scheme == null ? null : this.scheme.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartitionType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartitionType if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PartitionType.
     */
    @Generated
    public static PartitionType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartitionType deserializedPartitionType = new PartitionType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheme".equals(fieldName)) {
                    deserializedPartitionType.scheme = PartitionTypeScheme.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartitionType;
        });
    }
}
