// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import java.util.List;

/**
 * Options for mosaic TileJSON.
 */
@Fluent
public final class GetMosaicTileJsonOptions {
    /*
     * Asset's names.
     */
    @Generated
    private List<String> assets;

    /*
     * Band math expression between assets
     */
    @Generated
    private String expression;

    /*
     * Per asset band indexes (coma separated indexes, e.g. "image|1,2,3" means use the bands 1, 2, and 3 from the asset
     * named "image")
     */
    @Generated
    private String assetBandIndices;

    /*
     * Asset as Band
     */
    @Generated
    private Boolean assetAsBand;

    /*
     * Overwrite internal Nodata value
     */
    @Generated
    private Double noData;

    /*
     * Apply internal Scale or Offset
     */
    @Generated
    private Boolean unscale;

    /*
     * Return as soon as we scan N items (defaults to 10000 in PgSTAC).
     */
    @Generated
    private Integer scanLimit;

    /*
     * Return as soon as we have N items per geometry (defaults to 100 in PgSTAC).
     */
    @Generated
    private Integer itemsLimit;

    /*
     * Return after N seconds to avoid long requests (defaults to 5 in PgSTAC).
     */
    @Generated
    private Integer timeLimit;

    /*
     * Return as soon as the geometry is fully covered (defaults to True in PgSTAC).
     */
    @Generated
    private Boolean exitWhenFull;

    /*
     * Skip any items that would show up completely under the previous items (defaults
     * to True in PgSTAC).
     */
    @Generated
    private Boolean skipCovered;

    /*
     * Terrain algorithm name
     */
    @Generated
    private TerrainAlgorithm algorithm;

    /*
     * Terrain algorithm parameters
     */
    @Generated
    private String algorithmParams;

    /*
     * Overwrite default minzoom.
     */
    @Generated
    private Integer minZoom;

    /*
     * Overwrite default maxzoom.
     */
    @Generated
    private Integer maxZoom;

    /*
     * Default will be automatically defined if the output image needs a mask (png) or
     * not (jpeg).
     */
    @Generated
    private TilerImageFormat tileFormat;

    /*
     * Tile scale factor affecting output size. Values > 1 produce larger tiles (e.g., 1=256x256, 2=512x512).
     */
    @Generated
    private Integer tileScale;

    /*
     * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     */
    @Generated
    private String buffer;

    /*
     * rio-color formula (info: https://github.com/mapbox/rio-color)
     */
    @Generated
    private String colorFormula;

    /*
     * STAC Collection ID
     */
    @Generated
    private String collection;

    /*
     * Resampling method.
     */
    @Generated
    private Resampling resampling;

    /*
     * Pixel selection method.
     */
    @Generated
    private PixelSelection pixelSelection;

    /*
     * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     */
    @Generated
    private List<String> rescale;

    /*
     * Colormap name
     */
    @Generated
    private ColorMapNames colorMapName;

    /*
     * JSON encoded custom Colormap
     */
    @Generated
    private String colorMap;

    /*
     * Add mask to the output data.
     */
    @Generated
    private Boolean returnMask;

    /**
     * Creates an instance of GetMosaicTileJsonOptions class.
     */
    @Generated
    public GetMosaicTileJsonOptions() {
    }

    /**
     * Get the assets property: Asset's names.
     * 
     * @return the assets value.
     */
    @Generated
    public List<String> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Asset's names.
     * 
     * @param assets the assets value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setAssets(List<String> assets) {
        this.assets = assets;
        return this;
    }

    /**
     * Get the expression property: Band math expression between assets.
     * 
     * @return the expression value.
     */
    @Generated
    public String getExpression() {
        return this.expression;
    }

    /**
     * Set the expression property: Band math expression between assets.
     * 
     * @param expression the expression value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Get the assetBandIndices property: Per asset band indexes (coma separated indexes, e.g. "image|1,2,3" means use
     * the bands 1, 2, and 3 from the asset named "image").
     * 
     * @return the assetBandIndices value.
     */
    @Generated
    public String getAssetBandIndices() {
        return this.assetBandIndices;
    }

    /**
     * Set the assetBandIndices property: Per asset band indexes (coma separated indexes, e.g. "image|1,2,3" means use
     * the bands 1, 2, and 3 from the asset named "image").
     * 
     * @param assetBandIndices the assetBandIndices value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setAssetBandIndices(String assetBandIndices) {
        this.assetBandIndices = assetBandIndices;
        return this;
    }

    /**
     * Get the assetAsBand property: Asset as Band.
     * 
     * @return the assetAsBand value.
     */
    @Generated
    public Boolean isAssetAsBand() {
        return this.assetAsBand;
    }

    /**
     * Set the assetAsBand property: Asset as Band.
     * 
     * @param assetAsBand the assetAsBand value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setAssetAsBand(Boolean assetAsBand) {
        this.assetAsBand = assetAsBand;
        return this;
    }

    /**
     * Get the noData property: Overwrite internal Nodata value.
     * 
     * @return the noData value.
     */
    @Generated
    public Double getNoData() {
        return this.noData;
    }

    /**
     * Set the noData property: Overwrite internal Nodata value.
     * 
     * @param noData the noData value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setNoData(Double noData) {
        this.noData = noData;
        return this;
    }

    /**
     * Get the unscale property: Apply internal Scale or Offset.
     * 
     * @return the unscale value.
     */
    @Generated
    public Boolean isUnscale() {
        return this.unscale;
    }

    /**
     * Set the unscale property: Apply internal Scale or Offset.
     * 
     * @param unscale the unscale value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setUnscale(Boolean unscale) {
        this.unscale = unscale;
        return this;
    }

    /**
     * Get the scanLimit property: Return as soon as we scan N items (defaults to 10000 in PgSTAC).
     * 
     * @return the scanLimit value.
     */
    @Generated
    public Integer getScanLimit() {
        return this.scanLimit;
    }

    /**
     * Set the scanLimit property: Return as soon as we scan N items (defaults to 10000 in PgSTAC).
     * 
     * @param scanLimit the scanLimit value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setScanLimit(Integer scanLimit) {
        this.scanLimit = scanLimit;
        return this;
    }

    /**
     * Get the itemsLimit property: Return as soon as we have N items per geometry (defaults to 100 in PgSTAC).
     * 
     * @return the itemsLimit value.
     */
    @Generated
    public Integer getItemsLimit() {
        return this.itemsLimit;
    }

    /**
     * Set the itemsLimit property: Return as soon as we have N items per geometry (defaults to 100 in PgSTAC).
     * 
     * @param itemsLimit the itemsLimit value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setItemsLimit(Integer itemsLimit) {
        this.itemsLimit = itemsLimit;
        return this;
    }

    /**
     * Get the timeLimit property: Return after N seconds to avoid long requests (defaults to 5 in PgSTAC).
     * 
     * @return the timeLimit value.
     */
    @Generated
    public Integer getTimeLimit() {
        return this.timeLimit;
    }

    /**
     * Set the timeLimit property: Return after N seconds to avoid long requests (defaults to 5 in PgSTAC).
     * 
     * @param timeLimit the timeLimit value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setTimeLimit(Integer timeLimit) {
        this.timeLimit = timeLimit;
        return this;
    }

    /**
     * Get the exitWhenFull property: Return as soon as the geometry is fully covered (defaults to True in PgSTAC).
     * 
     * @return the exitWhenFull value.
     */
    @Generated
    public Boolean isExitWhenFull() {
        return this.exitWhenFull;
    }

    /**
     * Set the exitWhenFull property: Return as soon as the geometry is fully covered (defaults to True in PgSTAC).
     * 
     * @param exitWhenFull the exitWhenFull value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setExitWhenFull(Boolean exitWhenFull) {
        this.exitWhenFull = exitWhenFull;
        return this;
    }

    /**
     * Get the skipCovered property: Skip any items that would show up completely under the previous items (defaults
     * to True in PgSTAC).
     * 
     * @return the skipCovered value.
     */
    @Generated
    public Boolean isSkipCovered() {
        return this.skipCovered;
    }

    /**
     * Set the skipCovered property: Skip any items that would show up completely under the previous items (defaults
     * to True in PgSTAC).
     * 
     * @param skipCovered the skipCovered value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setSkipCovered(Boolean skipCovered) {
        this.skipCovered = skipCovered;
        return this;
    }

    /**
     * Get the algorithm property: Terrain algorithm name.
     * 
     * @return the algorithm value.
     */
    @Generated
    public TerrainAlgorithm getAlgorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: Terrain algorithm name.
     * 
     * @param algorithm the algorithm value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setAlgorithm(TerrainAlgorithm algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Get the algorithmParams property: Terrain algorithm parameters.
     * 
     * @return the algorithmParams value.
     */
    @Generated
    public String getAlgorithmParams() {
        return this.algorithmParams;
    }

    /**
     * Set the algorithmParams property: Terrain algorithm parameters.
     * 
     * @param algorithmParams the algorithmParams value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setAlgorithmParams(String algorithmParams) {
        this.algorithmParams = algorithmParams;
        return this;
    }

    /**
     * Get the minZoom property: Overwrite default minzoom.
     * 
     * @return the minZoom value.
     */
    @Generated
    public Integer getMinZoom() {
        return this.minZoom;
    }

    /**
     * Set the minZoom property: Overwrite default minzoom.
     * 
     * @param minZoom the minZoom value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setMinZoom(Integer minZoom) {
        this.minZoom = minZoom;
        return this;
    }

    /**
     * Get the maxZoom property: Overwrite default maxzoom.
     * 
     * @return the maxZoom value.
     */
    @Generated
    public Integer getMaxZoom() {
        return this.maxZoom;
    }

    /**
     * Set the maxZoom property: Overwrite default maxzoom.
     * 
     * @param maxZoom the maxZoom value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setMaxZoom(Integer maxZoom) {
        this.maxZoom = maxZoom;
        return this;
    }

    /**
     * Get the tileFormat property: Default will be automatically defined if the output image needs a mask (png) or
     * not (jpeg).
     * 
     * @return the tileFormat value.
     */
    @Generated
    public TilerImageFormat getTileFormat() {
        return this.tileFormat;
    }

    /**
     * Set the tileFormat property: Default will be automatically defined if the output image needs a mask (png) or
     * not (jpeg).
     * 
     * @param tileFormat the tileFormat value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setTileFormat(TilerImageFormat tileFormat) {
        this.tileFormat = tileFormat;
        return this;
    }

    /**
     * Get the tileScale property: Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g.,
     * 1=256x256, 2=512x512).
     * 
     * @return the tileScale value.
     */
    @Generated
    public Integer getTileScale() {
        return this.tileScale;
    }

    /**
     * Set the tileScale property: Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g.,
     * 1=256x256, 2=512x512).
     * 
     * @param tileScale the tileScale value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setTileScale(Integer tileScale) {
        this.tileScale = tileScale;
        return this;
    }

    /**
     * Get the buffer property: Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * 
     * @return the buffer value.
     */
    @Generated
    public String getBuffer() {
        return this.buffer;
    }

    /**
     * Set the buffer property: Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * 
     * @param buffer the buffer value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setBuffer(String buffer) {
        this.buffer = buffer;
        return this;
    }

    /**
     * Get the colorFormula property: rio-color formula (info: https://github.com/mapbox/rio-color).
     * 
     * @return the colorFormula value.
     */
    @Generated
    public String getColorFormula() {
        return this.colorFormula;
    }

    /**
     * Set the colorFormula property: rio-color formula (info: https://github.com/mapbox/rio-color).
     * 
     * @param colorFormula the colorFormula value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setColorFormula(String colorFormula) {
        this.colorFormula = colorFormula;
        return this;
    }

    /**
     * Get the collection property: STAC Collection ID.
     * 
     * @return the collection value.
     */
    @Generated
    public String getCollection() {
        return this.collection;
    }

    /**
     * Set the collection property: STAC Collection ID.
     * 
     * @param collection the collection value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setCollection(String collection) {
        this.collection = collection;
        return this;
    }

    /**
     * Get the resampling property: Resampling method.
     * 
     * @return the resampling value.
     */
    @Generated
    public Resampling getResampling() {
        return this.resampling;
    }

    /**
     * Set the resampling property: Resampling method.
     * 
     * @param resampling the resampling value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setResampling(Resampling resampling) {
        this.resampling = resampling;
        return this;
    }

    /**
     * Get the pixelSelection property: Pixel selection method.
     * 
     * @return the pixelSelection value.
     */
    @Generated
    public PixelSelection getPixelSelection() {
        return this.pixelSelection;
    }

    /**
     * Set the pixelSelection property: Pixel selection method.
     * 
     * @param pixelSelection the pixelSelection value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setPixelSelection(PixelSelection pixelSelection) {
        this.pixelSelection = pixelSelection;
        return this;
    }

    /**
     * Get the rescale property: comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * 
     * @return the rescale value.
     */
    @Generated
    public List<String> getRescale() {
        return this.rescale;
    }

    /**
     * Set the rescale property: comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * 
     * @param rescale the rescale value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setRescale(List<String> rescale) {
        this.rescale = rescale;
        return this;
    }

    /**
     * Get the colorMapName property: Colormap name.
     * 
     * @return the colorMapName value.
     */
    @Generated
    public ColorMapNames getColorMapName() {
        return this.colorMapName;
    }

    /**
     * Set the colorMapName property: Colormap name.
     * 
     * @param colorMapName the colorMapName value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setColorMapName(ColorMapNames colorMapName) {
        this.colorMapName = colorMapName;
        return this;
    }

    /**
     * Get the colorMap property: JSON encoded custom Colormap.
     * 
     * @return the colorMap value.
     */
    @Generated
    public String getColorMap() {
        return this.colorMap;
    }

    /**
     * Set the colorMap property: JSON encoded custom Colormap.
     * 
     * @param colorMap the colorMap value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setColorMap(String colorMap) {
        this.colorMap = colorMap;
        return this;
    }

    /**
     * Get the returnMask property: Add mask to the output data.
     * 
     * @return the returnMask value.
     */
    @Generated
    public Boolean isReturnMask() {
        return this.returnMask;
    }

    /**
     * Set the returnMask property: Add mask to the output data.
     * 
     * @param returnMask the returnMask value to set.
     * @return the GetMosaicTileJsonOptions object itself.
     */
    @Generated
    public GetMosaicTileJsonOptions setReturnMask(Boolean returnMask) {
        this.returnMask = returnMask;
        return this;
    }
}
