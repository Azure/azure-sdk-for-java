// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import java.util.List;

/**
 * Options for cropping GeoJSON.
 */
@Fluent
public final class CropGeoJsonOptions {
    /*
     * Asset's names.
     */
    @Generated
    private List<String> assets;

    /*
     * Band math expression between assets
     */
    @Generated
    private String expression;

    /*
     * Per asset band indexes (coma separated indexes)
     */
    @Generated
    private List<String> assetBandIndices;

    /*
     * Asset as Band
     */
    @Generated
    private Boolean assetAsBand;

    /*
     * Overwrite internal Nodata value
     */
    @Generated
    private Double noData;

    /*
     * Apply internal Scale or Offset
     */
    @Generated
    private Boolean unscale;

    /*
     * Terrain algorithm name
     */
    @Generated
    private TerrainAlgorithm algorithm;

    /*
     * Terrain algorithm parameters
     */
    @Generated
    private String algorithmParams;

    /*
     * rio-color formula (info: https://github.com/mapbox/rio-color)
     */
    @Generated
    private String colorFormula;

    /*
     * Coordinate Reference System of the input coords. Default to `epsg:4326`.
     */
    @Generated
    private String coordinateReferenceSystem;

    /*
     * Resampling method.
     */
    @Generated
    private Resampling resampling;

    /*
     * Image output size limit if width and height limits are not set.
     */
    @Generated
    private Integer maxSize;

    /*
     * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     */
    @Generated
    private List<String> rescale;

    /*
     * Colormap name
     */
    @Generated
    private ColorMapNames colorMapName;

    /*
     * JSON encoded custom Colormap
     */
    @Generated
    private String colorMap;

    /*
     * Add mask to the output data.
     */
    @Generated
    private Boolean returnMask;

    /**
     * Creates an instance of CropGeoJsonOptions class.
     */
    @Generated
    public CropGeoJsonOptions() {
    }

    /**
     * Get the assets property: Asset's names.
     * 
     * @return the assets value.
     */
    @Generated
    public List<String> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Asset's names.
     * 
     * @param assets the assets value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setAssets(List<String> assets) {
        this.assets = assets;
        return this;
    }

    /**
     * Get the expression property: Band math expression between assets.
     * 
     * @return the expression value.
     */
    @Generated
    public String getExpression() {
        return this.expression;
    }

    /**
     * Set the expression property: Band math expression between assets.
     * 
     * @param expression the expression value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Get the assetBandIndices property: Per asset band indexes (coma separated indexes).
     * 
     * @return the assetBandIndices value.
     */
    @Generated
    public List<String> getAssetBandIndices() {
        return this.assetBandIndices;
    }

    /**
     * Set the assetBandIndices property: Per asset band indexes (coma separated indexes).
     * 
     * @param assetBandIndices the assetBandIndices value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setAssetBandIndices(List<String> assetBandIndices) {
        this.assetBandIndices = assetBandIndices;
        return this;
    }

    /**
     * Get the assetAsBand property: Asset as Band.
     * 
     * @return the assetAsBand value.
     */
    @Generated
    public Boolean isAssetAsBand() {
        return this.assetAsBand;
    }

    /**
     * Set the assetAsBand property: Asset as Band.
     * 
     * @param assetAsBand the assetAsBand value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setAssetAsBand(Boolean assetAsBand) {
        this.assetAsBand = assetAsBand;
        return this;
    }

    /**
     * Get the noData property: Overwrite internal Nodata value.
     * 
     * @return the noData value.
     */
    @Generated
    public Double getNoData() {
        return this.noData;
    }

    /**
     * Set the noData property: Overwrite internal Nodata value.
     * 
     * @param noData the noData value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setNoData(Double noData) {
        this.noData = noData;
        return this;
    }

    /**
     * Get the unscale property: Apply internal Scale or Offset.
     * 
     * @return the unscale value.
     */
    @Generated
    public Boolean isUnscale() {
        return this.unscale;
    }

    /**
     * Set the unscale property: Apply internal Scale or Offset.
     * 
     * @param unscale the unscale value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setUnscale(Boolean unscale) {
        this.unscale = unscale;
        return this;
    }

    /**
     * Get the algorithm property: Terrain algorithm name.
     * 
     * @return the algorithm value.
     */
    @Generated
    public TerrainAlgorithm getAlgorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: Terrain algorithm name.
     * 
     * @param algorithm the algorithm value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setAlgorithm(TerrainAlgorithm algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Get the algorithmParams property: Terrain algorithm parameters.
     * 
     * @return the algorithmParams value.
     */
    @Generated
    public String getAlgorithmParams() {
        return this.algorithmParams;
    }

    /**
     * Set the algorithmParams property: Terrain algorithm parameters.
     * 
     * @param algorithmParams the algorithmParams value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setAlgorithmParams(String algorithmParams) {
        this.algorithmParams = algorithmParams;
        return this;
    }

    /**
     * Get the colorFormula property: rio-color formula (info: https://github.com/mapbox/rio-color).
     * 
     * @return the colorFormula value.
     */
    @Generated
    public String getColorFormula() {
        return this.colorFormula;
    }

    /**
     * Set the colorFormula property: rio-color formula (info: https://github.com/mapbox/rio-color).
     * 
     * @param colorFormula the colorFormula value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setColorFormula(String colorFormula) {
        this.colorFormula = colorFormula;
        return this;
    }

    /**
     * Get the coordinateReferenceSystem property: Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.
     * 
     * @return the coordinateReferenceSystem value.
     */
    @Generated
    public String getCoordinateReferenceSystem() {
        return this.coordinateReferenceSystem;
    }

    /**
     * Set the coordinateReferenceSystem property: Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.
     * 
     * @param coordinateReferenceSystem the coordinateReferenceSystem value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setCoordinateReferenceSystem(String coordinateReferenceSystem) {
        this.coordinateReferenceSystem = coordinateReferenceSystem;
        return this;
    }

    /**
     * Get the resampling property: Resampling method.
     * 
     * @return the resampling value.
     */
    @Generated
    public Resampling getResampling() {
        return this.resampling;
    }

    /**
     * Set the resampling property: Resampling method.
     * 
     * @param resampling the resampling value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setResampling(Resampling resampling) {
        this.resampling = resampling;
        return this;
    }

    /**
     * Get the maxSize property: Image output size limit if width and height limits are not set.
     * 
     * @return the maxSize value.
     */
    @Generated
    public Integer getMaxSize() {
        return this.maxSize;
    }

    /**
     * Set the maxSize property: Image output size limit if width and height limits are not set.
     * 
     * @param maxSize the maxSize value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setMaxSize(Integer maxSize) {
        this.maxSize = maxSize;
        return this;
    }

    /**
     * Get the rescale property: comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * 
     * @return the rescale value.
     */
    @Generated
    public List<String> getRescale() {
        return this.rescale;
    }

    /**
     * Set the rescale property: comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * 
     * @param rescale the rescale value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setRescale(List<String> rescale) {
        this.rescale = rescale;
        return this;
    }

    /**
     * Get the colorMapName property: Colormap name.
     * 
     * @return the colorMapName value.
     */
    @Generated
    public ColorMapNames getColorMapName() {
        return this.colorMapName;
    }

    /**
     * Set the colorMapName property: Colormap name.
     * 
     * @param colorMapName the colorMapName value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setColorMapName(ColorMapNames colorMapName) {
        this.colorMapName = colorMapName;
        return this;
    }

    /**
     * Get the colorMap property: JSON encoded custom Colormap.
     * 
     * @return the colorMap value.
     */
    @Generated
    public String getColorMap() {
        return this.colorMap;
    }

    /**
     * Set the colorMap property: JSON encoded custom Colormap.
     * 
     * @param colorMap the colorMap value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setColorMap(String colorMap) {
        this.colorMap = colorMap;
        return this;
    }

    /**
     * Get the returnMask property: Add mask to the output data.
     * 
     * @return the returnMask value.
     */
    @Generated
    public Boolean isReturnMask() {
        return this.returnMask;
    }

    /**
     * Set the returnMask property: Add mask to the output data.
     * 
     * @param returnMask the returnMask value to set.
     * @return the CropGeoJsonOptions object itself.
     */
    @Generated
    public CropGeoJsonOptions setReturnMask(Boolean returnMask) {
        this.returnMask = returnMask;
        return this;
    }
}
