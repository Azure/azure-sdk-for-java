// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Parameters for requesting a rendered image from a collection.
 */
@Fluent
public final class ImageRequest implements JsonSerializable<ImageRequest> {
    /*
     * Cql
     */
    @Generated
    private final Map<String, BinaryData> cql;

    /*
     * Zoom
     */
    @Generated
    private Double zoom;

    /*
     * Geometry
     */
    @Generated
    private Geometry geometry;

    /*
     * JSON-encoded visualization parameters
     */
    @Generated
    private final String renderParameters;

    /*
     * Width of the output image in pixels
     */
    @Generated
    private final int columns;

    /*
     * Height of the output image in pixels
     */
    @Generated
    private final int rows;

    /*
     * Whether to include branding on the output image
     */
    @Generated
    private Boolean showBranding;

    /*
     * Image size
     */
    @Generated
    private String imageSize;

    /**
     * Creates an instance of ImageRequest class.
     * 
     * @param cql the cql value to set.
     * @param renderParameters the renderParameters value to set.
     * @param columns the columns value to set.
     * @param rows the rows value to set.
     */
    @Generated
    public ImageRequest(Map<String, BinaryData> cql, String renderParameters, int columns, int rows) {
        this.cql = cql;
        this.renderParameters = renderParameters;
        this.columns = columns;
        this.rows = rows;
    }

    /**
     * Get the cql property: Cql.
     * 
     * @return the cql value.
     */
    @Generated
    public Map<String, BinaryData> getCql() {
        return this.cql;
    }

    /**
     * Get the zoom property: Zoom.
     * 
     * @return the zoom value.
     */
    @Generated
    public Double getZoom() {
        return this.zoom;
    }

    /**
     * Set the zoom property: Zoom.
     * 
     * @param zoom the zoom value to set.
     * @return the ImageRequest object itself.
     */
    @Generated
    public ImageRequest setZoom(Double zoom) {
        this.zoom = zoom;
        return this;
    }

    /**
     * Get the geometry property: Geometry.
     * 
     * @return the geometry value.
     */
    @Generated
    public Geometry getGeometry() {
        return this.geometry;
    }

    /**
     * Set the geometry property: Geometry.
     * 
     * @param geometry the geometry value to set.
     * @return the ImageRequest object itself.
     */
    @Generated
    public ImageRequest setGeometry(Geometry geometry) {
        this.geometry = geometry;
        return this;
    }

    /**
     * Get the renderParameters property: JSON-encoded visualization parameters.
     * 
     * @return the renderParameters value.
     */
    @Generated
    public String getRenderParameters() {
        return this.renderParameters;
    }

    /**
     * Get the columns property: Width of the output image in pixels.
     * 
     * @return the columns value.
     */
    @Generated
    public int getColumns() {
        return this.columns;
    }

    /**
     * Get the rows property: Height of the output image in pixels.
     * 
     * @return the rows value.
     */
    @Generated
    public int getRows() {
        return this.rows;
    }

    /**
     * Get the showBranding property: Whether to include branding on the output image.
     * 
     * @return the showBranding value.
     */
    @Generated
    public Boolean isShowBranding() {
        return this.showBranding;
    }

    /**
     * Set the showBranding property: Whether to include branding on the output image.
     * 
     * @param showBranding the showBranding value to set.
     * @return the ImageRequest object itself.
     */
    @Generated
    public ImageRequest setShowBranding(Boolean showBranding) {
        this.showBranding = showBranding;
        return this;
    }

    /**
     * Get the imageSize property: Image size.
     * 
     * @return the imageSize value.
     */
    @Generated
    public String getImageSize() {
        return this.imageSize;
    }

    /**
     * Set the imageSize property: Image size.
     * 
     * @param imageSize the imageSize value to set.
     * @return the ImageRequest object itself.
     */
    @Generated
    public ImageRequest setImageSize(String imageSize) {
        this.imageSize = imageSize;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("cql", this.cql,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("render_params", this.renderParameters);
        jsonWriter.writeIntField("cols", this.columns);
        jsonWriter.writeIntField("rows", this.rows);
        jsonWriter.writeNumberField("zoom", this.zoom);
        jsonWriter.writeJsonField("geometry", this.geometry);
        jsonWriter.writeBooleanField("showBranding", this.showBranding);
        jsonWriter.writeStringField("imageSize", this.imageSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageRequest.
     */
    @Generated
    public static ImageRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, BinaryData> cql = null;
            String renderParameters = null;
            int columns = 0;
            int rows = 0;
            Double zoom = null;
            Geometry geometry = null;
            Boolean showBranding = null;
            String imageSize = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cql".equals(fieldName)) {
                    cql = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("render_params".equals(fieldName)) {
                    renderParameters = reader.getString();
                } else if ("cols".equals(fieldName)) {
                    columns = reader.getInt();
                } else if ("rows".equals(fieldName)) {
                    rows = reader.getInt();
                } else if ("zoom".equals(fieldName)) {
                    zoom = reader.getNullable(JsonReader::getDouble);
                } else if ("geometry".equals(fieldName)) {
                    geometry = Geometry.fromJson(reader);
                } else if ("showBranding".equals(fieldName)) {
                    showBranding = reader.getNullable(JsonReader::getBoolean);
                } else if ("imageSize".equals(fieldName)) {
                    imageSize = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ImageRequest deserializedImageRequest = new ImageRequest(cql, renderParameters, columns, rows);
            deserializedImageRequest.zoom = zoom;
            deserializedImageRequest.geometry = geometry;
            deserializedImageRequest.showBranding = showBranding;
            deserializedImageRequest.imageSize = imageSize;

            return deserializedImageRequest;
        });
    }
}
