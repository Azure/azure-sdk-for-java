// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * https://github.com/stac-extensions/item-assets
 * 
 * Represents a STAC item asset, which describes the assets available under any item in the collection.
 */
@Fluent
public final class StacItemAsset implements JsonSerializable<StacItemAsset> {
    /*
     * Platform that acquired the data.
     */
    @Generated
    private String platform;

    /*
     * Instruments that acquired the data.
     */
    @Generated
    private List<String> instruments;

    /*
     * Constellation of satellites that acquired the data.
     */
    @Generated
    private String constellation;

    /*
     * Mission associated with the data.
     */
    @Generated
    private String mission;

    /*
     * Organizations or individuals who provide the data.
     */
    @Generated
    private List<StacProvider> providers;

    /*
     * Ground sample distance in meters.
     */
    @Generated
    private Double gsd;

    /*
     * Creation timestamp of the data.
     */
    @Generated
    private OffsetDateTime created;

    /*
     * Last update timestamp of the data.
     */
    @Generated
    private OffsetDateTime updated;

    /*
     * Human-readable title for the asset.
     */
    @Generated
    private final String title;

    /*
     * Detailed description of the asset.
     */
    @Generated
    private String description;

    /*
     * URL to the asset file.
     */
    @Generated
    private String href;

    /*
     * Media type of the asset.
     */
    @Generated
    private final String type;

    /*
     * Roles of the asset within the item.
     */
    @Generated
    private List<String> roles;

    /*
     * https://github.com/stac-extensions/item-assets
     * 
     * Represents a STAC item asset, which describes the assets available under any item in the collection.
     */
    @Generated
    private Map<String, BinaryData> additionalProperties;

    /**
     * Creates an instance of StacItemAsset class.
     * 
     * @param title the title value to set.
     * @param type the type value to set.
     */
    @Generated
    public StacItemAsset(String title, String type) {
        this.title = title;
        this.type = type;
    }

    /**
     * Get the platform property: Platform that acquired the data.
     * 
     * @return the platform value.
     */
    @Generated
    public String getPlatform() {
        return this.platform;
    }

    /**
     * Set the platform property: Platform that acquired the data.
     * 
     * @param platform the platform value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setPlatform(String platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Get the instruments property: Instruments that acquired the data.
     * 
     * @return the instruments value.
     */
    @Generated
    public List<String> getInstruments() {
        return this.instruments;
    }

    /**
     * Set the instruments property: Instruments that acquired the data.
     * 
     * @param instruments the instruments value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setInstruments(List<String> instruments) {
        this.instruments = instruments;
        return this;
    }

    /**
     * Get the constellation property: Constellation of satellites that acquired the data.
     * 
     * @return the constellation value.
     */
    @Generated
    public String getConstellation() {
        return this.constellation;
    }

    /**
     * Set the constellation property: Constellation of satellites that acquired the data.
     * 
     * @param constellation the constellation value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setConstellation(String constellation) {
        this.constellation = constellation;
        return this;
    }

    /**
     * Get the mission property: Mission associated with the data.
     * 
     * @return the mission value.
     */
    @Generated
    public String getMission() {
        return this.mission;
    }

    /**
     * Set the mission property: Mission associated with the data.
     * 
     * @param mission the mission value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setMission(String mission) {
        this.mission = mission;
        return this;
    }

    /**
     * Get the providers property: Organizations or individuals who provide the data.
     * 
     * @return the providers value.
     */
    @Generated
    public List<StacProvider> getProviders() {
        return this.providers;
    }

    /**
     * Set the providers property: Organizations or individuals who provide the data.
     * 
     * @param providers the providers value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setProviders(List<StacProvider> providers) {
        this.providers = providers;
        return this;
    }

    /**
     * Get the gsd property: Ground sample distance in meters.
     * 
     * @return the gsd value.
     */
    @Generated
    public Double getGsd() {
        return this.gsd;
    }

    /**
     * Set the gsd property: Ground sample distance in meters.
     * 
     * @param gsd the gsd value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setGsd(Double gsd) {
        this.gsd = gsd;
        return this;
    }

    /**
     * Get the created property: Creation timestamp of the data.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Set the created property: Creation timestamp of the data.
     * 
     * @param created the created value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }

    /**
     * Get the updated property: Last update timestamp of the data.
     * 
     * @return the updated value.
     */
    @Generated
    public OffsetDateTime getUpdated() {
        return this.updated;
    }

    /**
     * Set the updated property: Last update timestamp of the data.
     * 
     * @param updated the updated value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }

    /**
     * Get the title property: Human-readable title for the asset.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the description property: Detailed description of the asset.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Detailed description of the asset.
     * 
     * @param description the description value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the href property: URL to the asset file.
     * 
     * @return the href value.
     */
    @Generated
    public String getHref() {
        return this.href;
    }

    /**
     * Set the href property: URL to the asset file.
     * 
     * @param href the href value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setHref(String href) {
        this.href = href;
        return this;
    }

    /**
     * Get the type property: Media type of the asset.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the roles property: Roles of the asset within the item.
     * 
     * @return the roles value.
     */
    @Generated
    public List<String> getRoles() {
        return this.roles;
    }

    /**
     * Set the roles property: Roles of the asset within the item.
     * 
     * @param roles the roles value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setRoles(List<String> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Get the additionalProperties property: https://github.com/stac-extensions/item-assets
     * 
     * Represents a STAC item asset, which describes the assets available under any item in the collection.
     * 
     * @return the additionalProperties value.
     */
    @Generated
    public Map<String, BinaryData> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: https://github.com/stac-extensions/item-assets
     * 
     * Represents a STAC item asset, which describes the assets available under any item in the collection.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the StacItemAsset object itself.
     */
    @Generated
    public StacItemAsset setAdditionalProperties(Map<String, BinaryData> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("platform", this.platform);
        jsonWriter.writeArrayField("instruments", this.instruments, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("constellation", this.constellation);
        jsonWriter.writeStringField("mission", this.mission);
        jsonWriter.writeArrayField("providers", this.providers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("gsd", this.gsd);
        jsonWriter.writeStringField("created",
            this.created == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.created));
        jsonWriter.writeStringField("updated",
            this.updated == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updated));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("href", this.href);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeString(element));
        if (additionalProperties != null) {
            for (Map.Entry<String, BinaryData> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeFieldName(additionalProperty.getKey());
                if (additionalProperty.getValue() == null) {
                    jsonWriter.writeNull();
                } else {
                    additionalProperty.getValue().writeTo(jsonWriter);
                }
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItemAsset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItemAsset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacItemAsset.
     */
    @Generated
    public static StacItemAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String title = null;
            String type = null;
            String platform = null;
            List<String> instruments = null;
            String constellation = null;
            String mission = null;
            List<StacProvider> providers = null;
            Double gsd = null;
            OffsetDateTime created = null;
            OffsetDateTime updated = null;
            String description = null;
            String href = null;
            List<String> roles = null;
            Map<String, BinaryData> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("platform".equals(fieldName)) {
                    platform = reader.getString();
                } else if ("instruments".equals(fieldName)) {
                    instruments = reader.readArray(reader1 -> reader1.getString());
                } else if ("constellation".equals(fieldName)) {
                    constellation = reader.getString();
                } else if ("mission".equals(fieldName)) {
                    mission = reader.getString();
                } else if ("providers".equals(fieldName)) {
                    providers = reader.readArray(reader1 -> StacProvider.fromJson(reader1));
                } else if ("gsd".equals(fieldName)) {
                    gsd = reader.getNullable(JsonReader::getDouble);
                } else if ("created".equals(fieldName)) {
                    created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updated".equals(fieldName)) {
                    updated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("href".equals(fieldName)) {
                    href = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    roles = reader.readArray(reader1 -> reader1.getString());
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName,
                        reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                }
            }
            StacItemAsset deserializedStacItemAsset = new StacItemAsset(title, type);
            deserializedStacItemAsset.platform = platform;
            deserializedStacItemAsset.instruments = instruments;
            deserializedStacItemAsset.constellation = constellation;
            deserializedStacItemAsset.mission = mission;
            deserializedStacItemAsset.providers = providers;
            deserializedStacItemAsset.gsd = gsd;
            deserializedStacItemAsset.created = created;
            deserializedStacItemAsset.updated = updated;
            deserializedStacItemAsset.description = description;
            deserializedStacItemAsset.href = href;
            deserializedStacItemAsset.roles = roles;
            deserializedStacItemAsset.additionalProperties = additionalProperties;

            return deserializedStacItemAsset;
        });
    }
}
