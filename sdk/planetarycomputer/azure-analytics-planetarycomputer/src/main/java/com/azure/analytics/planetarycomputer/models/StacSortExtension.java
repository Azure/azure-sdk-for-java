// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * https://github.com/radiantearth/stac-api-spec/tree/master/extensions/sort#sort-api-extension
 * 
 * Represents a sort specification for STAC API queries.
 */
@Immutable
public final class StacSortExtension implements JsonSerializable<StacSortExtension> {
    /*
     * The field name to sort by.
     */
    @Generated
    private final String field;

    /*
     * The sort direction (ascending or descending).
     */
    @Generated
    private final StacSearchSortingDirection direction;

    /**
     * Creates an instance of StacSortExtension class.
     * 
     * @param field the field value to set.
     * @param direction the direction value to set.
     */
    @Generated
    public StacSortExtension(String field, StacSearchSortingDirection direction) {
        this.field = field;
        this.direction = direction;
    }

    /**
     * Get the field property: The field name to sort by.
     * 
     * @return the field value.
     */
    @Generated
    public String getField() {
        return this.field;
    }

    /**
     * Get the direction property: The sort direction (ascending or descending).
     * 
     * @return the direction value.
     */
    @Generated
    public StacSearchSortingDirection getDirection() {
        return this.direction;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("field", this.field);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacSortExtension from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacSortExtension if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacSortExtension.
     */
    @Generated
    public static StacSortExtension fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String field = null;
            StacSearchSortingDirection direction = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("field".equals(fieldName)) {
                    field = reader.getString();
                } else if ("direction".equals(fieldName)) {
                    direction = StacSearchSortingDirection.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new StacSortExtension(field, direction);
        });
    }
}
