// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import java.util.List;

/**
 * Options for getting asset statistics.
 */
@Fluent
public final class GetAssetStatisticsOptions {
    /*
     * Asset's names.
     */
    @Generated
    private List<String> assets;

    /*
     * Band math expression between assets
     */
    @Generated
    private String expression;

    /*
     * Per asset band indexes (coma separated indexes, e.g. "image|1,2,3" means use the bands 1, 2, and 3 from the asset
     * named "image")
     */
    @Generated
    private String assetBandIndices;

    /*
     * Asset as Band
     */
    @Generated
    private Boolean assetAsBand;

    /*
     * Overwrite internal Nodata value
     */
    @Generated
    private Double noData;

    /*
     * Apply internal Scale or Offset
     */
    @Generated
    private Boolean unscale;

    /*
     * Resampling method.
     */
    @Generated
    private Resampling resampling;

    /*
     * Maximum dimension in pixels for the source data used to calculate statistics
     */
    @Generated
    private Integer maxSize;

    /*
     * Return statistics for categorical dataset.
     */
    @Generated
    private Boolean categorical;

    /*
     * List of pixel categorical values for which to report counts.
     */
    @Generated
    private List<String> categoriesPixels;

    /*
     * List of percentile values (default to [2, 98]).
     */
    @Generated
    private List<Integer> percentiles;

    /*
     * Defines the number of equal-width bins in the given range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
     */
    @Generated
    private String histogramBins;

    /*
     * Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
     */
    @Generated
    private String histogramRange;

    /**
     * Creates an instance of GetAssetStatisticsOptions class.
     */
    @Generated
    public GetAssetStatisticsOptions() {
    }

    /**
     * Get the assets property: Asset's names.
     * 
     * @return the assets value.
     */
    @Generated
    public List<String> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Asset's names.
     * 
     * @param assets the assets value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setAssets(List<String> assets) {
        this.assets = assets;
        return this;
    }

    /**
     * Get the expression property: Band math expression between assets.
     * 
     * @return the expression value.
     */
    @Generated
    public String getExpression() {
        return this.expression;
    }

    /**
     * Set the expression property: Band math expression between assets.
     * 
     * @param expression the expression value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Get the assetBandIndices property: Per asset band indexes (coma separated indexes, e.g. "image|1,2,3" means use
     * the bands 1, 2, and 3 from the asset named "image").
     * 
     * @return the assetBandIndices value.
     */
    @Generated
    public String getAssetBandIndices() {
        return this.assetBandIndices;
    }

    /**
     * Set the assetBandIndices property: Per asset band indexes (coma separated indexes, e.g. "image|1,2,3" means use
     * the bands 1, 2, and 3 from the asset named "image").
     * 
     * @param assetBandIndices the assetBandIndices value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setAssetBandIndices(String assetBandIndices) {
        this.assetBandIndices = assetBandIndices;
        return this;
    }

    /**
     * Get the assetAsBand property: Asset as Band.
     * 
     * @return the assetAsBand value.
     */
    @Generated
    public Boolean isAssetAsBand() {
        return this.assetAsBand;
    }

    /**
     * Set the assetAsBand property: Asset as Band.
     * 
     * @param assetAsBand the assetAsBand value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setAssetAsBand(Boolean assetAsBand) {
        this.assetAsBand = assetAsBand;
        return this;
    }

    /**
     * Get the noData property: Overwrite internal Nodata value.
     * 
     * @return the noData value.
     */
    @Generated
    public Double getNoData() {
        return this.noData;
    }

    /**
     * Set the noData property: Overwrite internal Nodata value.
     * 
     * @param noData the noData value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setNoData(Double noData) {
        this.noData = noData;
        return this;
    }

    /**
     * Get the unscale property: Apply internal Scale or Offset.
     * 
     * @return the unscale value.
     */
    @Generated
    public Boolean isUnscale() {
        return this.unscale;
    }

    /**
     * Set the unscale property: Apply internal Scale or Offset.
     * 
     * @param unscale the unscale value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setUnscale(Boolean unscale) {
        this.unscale = unscale;
        return this;
    }

    /**
     * Get the resampling property: Resampling method.
     * 
     * @return the resampling value.
     */
    @Generated
    public Resampling getResampling() {
        return this.resampling;
    }

    /**
     * Set the resampling property: Resampling method.
     * 
     * @param resampling the resampling value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setResampling(Resampling resampling) {
        this.resampling = resampling;
        return this;
    }

    /**
     * Get the maxSize property: Maximum dimension in pixels for the source data used to calculate statistics.
     * 
     * @return the maxSize value.
     */
    @Generated
    public Integer getMaxSize() {
        return this.maxSize;
    }

    /**
     * Set the maxSize property: Maximum dimension in pixels for the source data used to calculate statistics.
     * 
     * @param maxSize the maxSize value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setMaxSize(Integer maxSize) {
        this.maxSize = maxSize;
        return this;
    }

    /**
     * Get the categorical property: Return statistics for categorical dataset.
     * 
     * @return the categorical value.
     */
    @Generated
    public Boolean isCategorical() {
        return this.categorical;
    }

    /**
     * Set the categorical property: Return statistics for categorical dataset.
     * 
     * @param categorical the categorical value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setCategorical(Boolean categorical) {
        this.categorical = categorical;
        return this;
    }

    /**
     * Get the categoriesPixels property: List of pixel categorical values for which to report counts.
     * 
     * @return the categoriesPixels value.
     */
    @Generated
    public List<String> getCategoriesPixels() {
        return this.categoriesPixels;
    }

    /**
     * Set the categoriesPixels property: List of pixel categorical values for which to report counts.
     * 
     * @param categoriesPixels the categoriesPixels value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setCategoriesPixels(List<String> categoriesPixels) {
        this.categoriesPixels = categoriesPixels;
        return this;
    }

    /**
     * Get the percentiles property: List of percentile values (default to [2, 98]).
     * 
     * @return the percentiles value.
     */
    @Generated
    public List<Integer> getPercentiles() {
        return this.percentiles;
    }

    /**
     * Set the percentiles property: List of percentile values (default to [2, 98]).
     * 
     * @param percentiles the percentiles value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setPercentiles(List<Integer> percentiles) {
        this.percentiles = percentiles;
        return this;
    }

    /**
     * Get the histogramBins property: Defines the number of equal-width bins in the given range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * 
     * @return the histogramBins value.
     */
    @Generated
    public String getHistogramBins() {
        return this.histogramBins;
    }

    /**
     * Set the histogramBins property: Defines the number of equal-width bins in the given range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * 
     * @param histogramBins the histogramBins value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setHistogramBins(String histogramBins) {
        this.histogramBins = histogramBins;
        return this;
    }

    /**
     * Get the histogramRange property: Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * 
     * @return the histogramRange value.
     */
    @Generated
    public String getHistogramRange() {
        return this.histogramRange;
    }

    /**
     * Set the histogramRange property: Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * 
     * @param histogramRange the histogramRange value to set.
     * @return the GetAssetStatisticsOptions object itself.
     */
    @Generated
    public GetAssetStatisticsOptions setHistogramRange(String histogramRange) {
        this.histogramRange = histogramRange;
        return this;
    }
}
