// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Managed Identity metadata.
 */
@Immutable
public final class ManagedIdentityMetadata implements JsonSerializable<ManagedIdentityMetadata> {
    /*
     * Object id of the managed identity
     */
    @Generated
    private final String objectId;

    /*
     * ARM path or resource id of the managed identity
     */
    @Generated
    private final String resourceId;

    /**
     * Creates an instance of ManagedIdentityMetadata class.
     * 
     * @param objectId the objectId value to set.
     * @param resourceId the resourceId value to set.
     */
    @Generated
    private ManagedIdentityMetadata(String objectId, String resourceId) {
        this.objectId = objectId;
        this.resourceId = resourceId;
    }

    /**
     * Get the objectId property: Object id of the managed identity.
     * 
     * @return the objectId value.
     */
    @Generated
    public String getObjectId() {
        return this.objectId;
    }

    /**
     * Get the resourceId property: ARM path or resource id of the managed identity.
     * 
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectId", this.objectId);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIdentityMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIdentityMetadata if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedIdentityMetadata.
     */
    @Generated
    public static ManagedIdentityMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String objectId = null;
            String resourceId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectId".equals(fieldName)) {
                    objectId = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    resourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ManagedIdentityMetadata(objectId, resourceId);
        });
    }
}
