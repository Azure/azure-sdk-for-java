// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.analytics.planetarycomputer.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Properties of a STAC Item containing metadata about the asset.
 * 
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md#properties-object.
 */
@Fluent
public final class StacItemProperties implements JsonSerializable<StacItemProperties> {
    /*
     * Platform that acquired the data.
     */
    @Generated
    private String platform;

    /*
     * Instruments that acquired the data.
     */
    @Generated
    private List<String> instruments;

    /*
     * Constellation of satellites that acquired the data.
     */
    @Generated
    private String constellation;

    /*
     * Mission associated with the data.
     */
    @Generated
    private String mission;

    /*
     * Organizations or individuals who provide the data.
     */
    @Generated
    private List<StacProvider> providers;

    /*
     * Ground sample distance in meters.
     */
    @Generated
    private Double gsd;

    /*
     * Creation timestamp of the data.
     */
    @Generated
    private OffsetDateTime created;

    /*
     * Last update timestamp of the data.
     */
    @Generated
    private OffsetDateTime updated;

    /*
     * Human-readable title for the item.
     */
    @Generated
    private String title;

    /*
     * Detailed description of the item.
     */
    @Generated
    private String description;

    /*
     * Datetime the asset represents in RFC 3339 format.
     */
    @Generated
    private String datetime;

    /*
     * Start time of the item observation period.
     */
    @Generated
    private OffsetDateTime startDatetime;

    /*
     * End time of the item observation period.
     */
    @Generated
    private OffsetDateTime endDatetime;

    /*
     * Properties of a STAC Item containing metadata about the asset.
     * 
     * https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md#properties-object
     */
    @Generated
    private Map<String, BinaryData> additionalProperties;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setStacItemPropertiesAccessor(new JsonMergePatchHelper.StacItemPropertiesAccessor() {
            @Override
            public StacItemProperties prepareModelForJsonMergePatch(StacItemProperties model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(StacItemProperties model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of StacItemProperties class.
     */
    @Generated
    public StacItemProperties() {
    }

    /**
     * Get the platform property: Platform that acquired the data.
     * 
     * @return the platform value.
     */
    @Generated
    public String getPlatform() {
        return this.platform;
    }

    /**
     * Set the platform property: Platform that acquired the data.
     * 
     * @param platform the platform value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setPlatform(String platform) {
        this.platform = platform;
        this.updatedProperties.add("platform");
        return this;
    }

    /**
     * Get the instruments property: Instruments that acquired the data.
     * 
     * @return the instruments value.
     */
    @Generated
    public List<String> getInstruments() {
        return this.instruments;
    }

    /**
     * Set the instruments property: Instruments that acquired the data.
     * 
     * @param instruments the instruments value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setInstruments(List<String> instruments) {
        this.instruments = instruments;
        this.updatedProperties.add("instruments");
        return this;
    }

    /**
     * Get the constellation property: Constellation of satellites that acquired the data.
     * 
     * @return the constellation value.
     */
    @Generated
    public String getConstellation() {
        return this.constellation;
    }

    /**
     * Set the constellation property: Constellation of satellites that acquired the data.
     * 
     * @param constellation the constellation value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setConstellation(String constellation) {
        this.constellation = constellation;
        this.updatedProperties.add("constellation");
        return this;
    }

    /**
     * Get the mission property: Mission associated with the data.
     * 
     * @return the mission value.
     */
    @Generated
    public String getMission() {
        return this.mission;
    }

    /**
     * Set the mission property: Mission associated with the data.
     * 
     * @param mission the mission value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setMission(String mission) {
        this.mission = mission;
        this.updatedProperties.add("mission");
        return this;
    }

    /**
     * Get the providers property: Organizations or individuals who provide the data.
     * 
     * @return the providers value.
     */
    @Generated
    public List<StacProvider> getProviders() {
        return this.providers;
    }

    /**
     * Set the providers property: Organizations or individuals who provide the data.
     * 
     * @param providers the providers value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setProviders(List<StacProvider> providers) {
        this.providers = providers;
        this.updatedProperties.add("providers");
        return this;
    }

    /**
     * Get the gsd property: Ground sample distance in meters.
     * 
     * @return the gsd value.
     */
    @Generated
    public Double getGsd() {
        return this.gsd;
    }

    /**
     * Set the gsd property: Ground sample distance in meters.
     * 
     * @param gsd the gsd value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setGsd(Double gsd) {
        this.gsd = gsd;
        this.updatedProperties.add("gsd");
        return this;
    }

    /**
     * Get the created property: Creation timestamp of the data.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Set the created property: Creation timestamp of the data.
     * 
     * @param created the created value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setCreated(OffsetDateTime created) {
        this.created = created;
        this.updatedProperties.add("created");
        return this;
    }

    /**
     * Get the updated property: Last update timestamp of the data.
     * 
     * @return the updated value.
     */
    @Generated
    public OffsetDateTime getUpdated() {
        return this.updated;
    }

    /**
     * Set the updated property: Last update timestamp of the data.
     * 
     * @param updated the updated value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setUpdated(OffsetDateTime updated) {
        this.updated = updated;
        this.updatedProperties.add("updated");
        return this;
    }

    /**
     * Get the title property: Human-readable title for the item.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Set the title property: Human-readable title for the item.
     * 
     * @param title the title value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setTitle(String title) {
        this.title = title;
        this.updatedProperties.add("title");
        return this;
    }

    /**
     * Get the description property: Detailed description of the item.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Detailed description of the item.
     * 
     * @param description the description value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the datetime property: Datetime the asset represents in RFC 3339 format.
     * 
     * @return the datetime value.
     */
    @Generated
    public String getDatetime() {
        return this.datetime;
    }

    /**
     * Set the datetime property: Datetime the asset represents in RFC 3339 format.
     * <p>Required when create the resource.</p>
     * 
     * @param datetime the datetime value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setDatetime(String datetime) {
        this.datetime = datetime;
        this.updatedProperties.add("datetime");
        return this;
    }

    /**
     * Get the startDatetime property: Start time of the item observation period.
     * 
     * @return the startDatetime value.
     */
    @Generated
    public OffsetDateTime getStartDatetime() {
        return this.startDatetime;
    }

    /**
     * Set the startDatetime property: Start time of the item observation period.
     * 
     * @param startDatetime the startDatetime value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setStartDatetime(OffsetDateTime startDatetime) {
        this.startDatetime = startDatetime;
        this.updatedProperties.add("startDatetime");
        return this;
    }

    /**
     * Get the endDatetime property: End time of the item observation period.
     * 
     * @return the endDatetime value.
     */
    @Generated
    public OffsetDateTime getEndDatetime() {
        return this.endDatetime;
    }

    /**
     * Set the endDatetime property: End time of the item observation period.
     * 
     * @param endDatetime the endDatetime value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setEndDatetime(OffsetDateTime endDatetime) {
        this.endDatetime = endDatetime;
        this.updatedProperties.add("endDatetime");
        return this;
    }

    /**
     * Get the additionalProperties property: Properties of a STAC Item containing metadata about the asset.
     * 
     * https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md#properties-object.
     * 
     * @return the additionalProperties value.
     */
    @Generated
    public Map<String, BinaryData> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Properties of a STAC Item containing metadata about the asset.
     * 
     * https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md#properties-object.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the StacItemProperties object itself.
     */
    @Generated
    public StacItemProperties setAdditionalProperties(Map<String, BinaryData> additionalProperties) {
        this.additionalProperties = additionalProperties;
        this.updatedProperties.add("additionalProperties");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("platform", this.platform);
            jsonWriter.writeArrayField("instruments", this.instruments,
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("constellation", this.constellation);
            jsonWriter.writeStringField("mission", this.mission);
            jsonWriter.writeArrayField("providers", this.providers, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeNumberField("gsd", this.gsd);
            jsonWriter.writeStringField("created",
                this.created == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.created));
            jsonWriter.writeStringField("updated",
                this.updated == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updated));
            jsonWriter.writeStringField("title", this.title);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeStringField("datetime", this.datetime);
            jsonWriter.writeStringField("start_datetime",
                this.startDatetime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDatetime));
            jsonWriter.writeStringField("end_datetime",
                this.endDatetime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDatetime));
            if (additionalProperties != null) {
                for (Map.Entry<String, BinaryData> additionalProperty : additionalProperties.entrySet()) {
                    jsonWriter.writeFieldName(additionalProperty.getKey());
                    if (additionalProperty.getValue() == null) {
                        jsonWriter.writeNull();
                    } else {
                        additionalProperty.getValue().writeTo(jsonWriter);
                    }
                }
            }
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("platform")) {
            if (this.platform == null) {
                jsonWriter.writeNullField("platform");
            } else {
                jsonWriter.writeStringField("platform", this.platform);
            }
        }
        if (updatedProperties.contains("instruments")) {
            if (this.instruments == null) {
                jsonWriter.writeNullField("instruments");
            } else {
                jsonWriter.writeArrayField("instruments", this.instruments,
                    (writer, element) -> writer.writeString(element));
            }
        }
        if (updatedProperties.contains("constellation")) {
            if (this.constellation == null) {
                jsonWriter.writeNullField("constellation");
            } else {
                jsonWriter.writeStringField("constellation", this.constellation);
            }
        }
        if (updatedProperties.contains("mission")) {
            if (this.mission == null) {
                jsonWriter.writeNullField("mission");
            } else {
                jsonWriter.writeStringField("mission", this.mission);
            }
        }
        if (updatedProperties.contains("providers")) {
            if (this.providers == null) {
                jsonWriter.writeNullField("providers");
            } else {
                jsonWriter.writeArrayField("providers", this.providers, (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("gsd")) {
            if (this.gsd == null) {
                jsonWriter.writeNullField("gsd");
            } else {
                jsonWriter.writeNumberField("gsd", this.gsd);
            }
        }
        if (updatedProperties.contains("created")) {
            if (this.created == null) {
                jsonWriter.writeNullField("created");
            } else {
                jsonWriter.writeStringField("created",
                    this.created == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.created));
            }
        }
        if (updatedProperties.contains("updated")) {
            if (this.updated == null) {
                jsonWriter.writeNullField("updated");
            } else {
                jsonWriter.writeStringField("updated",
                    this.updated == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updated));
            }
        }
        if (updatedProperties.contains("title")) {
            if (this.title == null) {
                jsonWriter.writeNullField("title");
            } else {
                jsonWriter.writeStringField("title", this.title);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("datetime")) {
            if (this.datetime == null) {
                jsonWriter.writeNullField("datetime");
            } else {
                jsonWriter.writeStringField("datetime", this.datetime);
            }
        }
        if (updatedProperties.contains("startDatetime")) {
            if (this.startDatetime == null) {
                jsonWriter.writeNullField("start_datetime");
            } else {
                jsonWriter.writeStringField("start_datetime",
                    this.startDatetime == null
                        ? null
                        : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDatetime));
            }
        }
        if (updatedProperties.contains("endDatetime")) {
            if (this.endDatetime == null) {
                jsonWriter.writeNullField("end_datetime");
            } else {
                jsonWriter.writeStringField("end_datetime",
                    this.endDatetime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDatetime));
            }
        }
        if (additionalProperties != null) {
            for (Map.Entry<String, BinaryData> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeFieldName(additionalProperty.getKey());
                if (additionalProperty.getValue() == null) {
                    jsonWriter.writeNull();
                } else {
                    additionalProperty.getValue().writeTo(jsonWriter);
                }
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItemProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StacItemProperties.
     */
    @Generated
    public static StacItemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StacItemProperties deserializedStacItemProperties = new StacItemProperties();
            Map<String, BinaryData> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("platform".equals(fieldName)) {
                    deserializedStacItemProperties.platform = reader.getString();
                } else if ("instruments".equals(fieldName)) {
                    List<String> instruments = reader.readArray(reader1 -> reader1.getString());
                    deserializedStacItemProperties.instruments = instruments;
                } else if ("constellation".equals(fieldName)) {
                    deserializedStacItemProperties.constellation = reader.getString();
                } else if ("mission".equals(fieldName)) {
                    deserializedStacItemProperties.mission = reader.getString();
                } else if ("providers".equals(fieldName)) {
                    List<StacProvider> providers = reader.readArray(reader1 -> StacProvider.fromJson(reader1));
                    deserializedStacItemProperties.providers = providers;
                } else if ("gsd".equals(fieldName)) {
                    deserializedStacItemProperties.gsd = reader.getNullable(JsonReader::getDouble);
                } else if ("created".equals(fieldName)) {
                    deserializedStacItemProperties.created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updated".equals(fieldName)) {
                    deserializedStacItemProperties.updated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("title".equals(fieldName)) {
                    deserializedStacItemProperties.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedStacItemProperties.description = reader.getString();
                } else if ("datetime".equals(fieldName)) {
                    deserializedStacItemProperties.datetime = reader.getString();
                } else if ("start_datetime".equals(fieldName)) {
                    deserializedStacItemProperties.startDatetime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("end_datetime".equals(fieldName)) {
                    deserializedStacItemProperties.endDatetime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName,
                        reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                }
            }
            deserializedStacItemProperties.additionalProperties = additionalProperties;

            return deserializedStacItemProperties;
        });
    }
}
