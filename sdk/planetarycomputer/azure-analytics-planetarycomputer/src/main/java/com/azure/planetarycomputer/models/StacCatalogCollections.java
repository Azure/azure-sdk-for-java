// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * http://docs.opengeospatial.org/is/17-069r3/17-069r3.html#_feature_collections_rootcollections
 * 
 * Represents a collection of STAC collections with links.
 */
@Immutable
public final class StacCatalogCollections implements JsonSerializable<StacCatalogCollections> {
    /*
     * Links to related resources and endpoints.
     */
    @Generated
    private final List<StacLink> links;

    /*
     * Array of STAC collections available in the catalog.
     */
    @Generated
    private final List<StacCollection> collections;

    /**
     * Creates an instance of StacCatalogCollections class.
     * 
     * @param links the links value to set.
     * @param collections the collections value to set.
     */
    @Generated
    private StacCatalogCollections(List<StacLink> links, List<StacCollection> collections) {
        this.links = links;
        this.collections = collections;
    }

    /**
     * Get the links property: Links to related resources and endpoints.
     * 
     * @return the links value.
     */
    @Generated
    public List<StacLink> getLinks() {
        return this.links;
    }

    /**
     * Get the collections property: Array of STAC collections available in the catalog.
     * 
     * @return the collections value.
     */
    @Generated
    public List<StacCollection> getCollections() {
        return this.collections;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("collections", this.collections, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacCatalogCollections from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacCatalogCollections if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacCatalogCollections.
     */
    @Generated
    public static StacCatalogCollections fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<StacLink> links = null;
            List<StacCollection> collections = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> StacLink.fromJson(reader1));
                } else if ("collections".equals(fieldName)) {
                    collections = reader.readArray(reader1 -> StacCollection.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new StacCatalogCollections(links, collections);
        });
    }
}
