// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Response model for point query operations providing values at a specific location.
 */
@Immutable
public final class TilerCoreModelsResponsesPoint implements JsonSerializable<TilerCoreModelsResponsesPoint> {
    /*
     * Geographic coordinates [longitude, latitude] of the queried point
     */
    @Generated
    private final List<Double> coordinates;

    /*
     * Array of pixel values at the queried point for each band
     */
    @Generated
    private final List<Double> values;

    /*
     * Names of each band in the raster data
     */
    @Generated
    private final List<String> bandNames;

    /**
     * Creates an instance of TilerCoreModelsResponsesPoint class.
     * 
     * @param coordinates the coordinates value to set.
     * @param values the values value to set.
     * @param bandNames the bandNames value to set.
     */
    @Generated
    private TilerCoreModelsResponsesPoint(List<Double> coordinates, List<Double> values, List<String> bandNames) {
        this.coordinates = coordinates;
        this.values = values;
        this.bandNames = bandNames;
    }

    /**
     * Get the coordinates property: Geographic coordinates [longitude, latitude] of the queried point.
     * 
     * @return the coordinates value.
     */
    @Generated
    public List<Double> getCoordinates() {
        return this.coordinates;
    }

    /**
     * Get the values property: Array of pixel values at the queried point for each band.
     * 
     * @return the values value.
     */
    @Generated
    public List<Double> getValues() {
        return this.values;
    }

    /**
     * Get the bandNames property: Names of each band in the raster data.
     * 
     * @return the bandNames value.
     */
    @Generated
    public List<String> getBandNames() {
        return this.bandNames;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("coordinates", this.coordinates, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("band_names", this.bandNames, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TilerCoreModelsResponsesPoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TilerCoreModelsResponsesPoint if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TilerCoreModelsResponsesPoint.
     */
    @Generated
    public static TilerCoreModelsResponsesPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<Double> coordinates = null;
            List<Double> values = null;
            List<String> bandNames = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("coordinates".equals(fieldName)) {
                    coordinates = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("values".equals(fieldName)) {
                    values = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("band_names".equals(fieldName)) {
                    bandNames = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new TilerCoreModelsResponsesPoint(coordinates, values, bandNames);
        });
    }
}
