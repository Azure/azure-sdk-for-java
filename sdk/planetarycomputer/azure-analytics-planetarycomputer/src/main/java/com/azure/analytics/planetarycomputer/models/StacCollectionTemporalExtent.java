// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#temporal-extent-object
 * 
 * Represents the temporal extent of a STAC collection with time intervals.
 */
@Immutable
public final class StacCollectionTemporalExtent implements JsonSerializable<StacCollectionTemporalExtent> {
    /*
     * Array of time intervals in format [[start_datetime, end_datetime]].
     */
    @Generated
    private final List<List<OffsetDateTime>> interval;

    /**
     * Creates an instance of StacCollectionTemporalExtent class.
     * 
     * @param interval the interval value to set.
     */
    @Generated
    public StacCollectionTemporalExtent(List<List<OffsetDateTime>> interval) {
        this.interval = interval;
    }

    /**
     * Get the interval property: Array of time intervals in format [[start_datetime, end_datetime]].
     * 
     * @return the interval value.
     */
    @Generated
    public List<List<OffsetDateTime>> getInterval() {
        return this.interval;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("interval", this.interval,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1
                .writeString(element1 == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(element1))));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacCollectionTemporalExtent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacCollectionTemporalExtent if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacCollectionTemporalExtent.
     */
    @Generated
    public static StacCollectionTemporalExtent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<List<OffsetDateTime>> interval = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("interval".equals(fieldName)) {
                    interval = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()))));
                } else {
                    reader.skipChildren();
                }
            }
            return new StacCollectionTemporalExtent(interval);
        });
    }
}
