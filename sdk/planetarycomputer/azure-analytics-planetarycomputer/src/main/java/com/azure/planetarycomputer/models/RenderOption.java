// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines visualization parameters for rendering data on a map.
 */
@Fluent
public final class RenderOption implements JsonSerializable<RenderOption> {
    /*
     * Unique identifier for the render option.
     */
    @Generated
    private final String id;

    /*
     * Short descriptive name for the render option.
     */
    @Generated
    private final String name;

    /*
     * A longer description of the render option that can be used to explain its
     * content.
     */
    @Generated
    private String description;

    /*
     * The type of rendering to apply (raster or vector).
     */
    @Generated
    private RenderOptionType type;

    /*
     * A URL query-string encoded string of TiTiler rendering options. Valid only for
     * `raster-tile` types.
     * 
     * See [Query Parameters](https://developmentseed.org/titiler/endpoints/cog/#description).
     */
    @Generated
    private String options;

    /*
     * Options for rendering vector tiles. Valid only for `vt-polygon` and `vt-line`
     * types.
     */
    @Generated
    private RenderOptionVectorOptions vectorOptions;

    /*
     * Minimum zoom level at which to display this layer.
     */
    @Generated
    private Integer minZoom;

    /*
     * Legend configuration for this render option.
     */
    @Generated
    private RenderOptionLegend legend;

    /*
     * A list of property/value conditions that must be in the active mosaic CQL for
     * this render option to be enabled
     */
    @Generated
    private List<RenderOptionCondition> conditions;

    /**
     * Creates an instance of RenderOption class.
     * 
     * @param id the id value to set.
     * @param name the name value to set.
     */
    @Generated
    public RenderOption(String id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Get the id property: Unique identifier for the render option.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: Short descriptive name for the render option.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: A longer description of the render option that can be used to explain its
     * content.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: A longer description of the render option that can be used to explain its
     * content.
     * 
     * @param description the description value to set.
     * @return the RenderOption object itself.
     */
    @Generated
    public RenderOption setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the type property: The type of rendering to apply (raster or vector).
     * 
     * @return the type value.
     */
    @Generated
    public RenderOptionType getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of rendering to apply (raster or vector).
     * 
     * @param type the type value to set.
     * @return the RenderOption object itself.
     */
    @Generated
    public RenderOption setType(RenderOptionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the options property: A URL query-string encoded string of TiTiler rendering options. Valid only for
     * `raster-tile` types.
     * 
     * See [Query Parameters](https://developmentseed.org/titiler/endpoints/cog/#description).
     * 
     * @return the options value.
     */
    @Generated
    public String getOptions() {
        return this.options;
    }

    /**
     * Set the options property: A URL query-string encoded string of TiTiler rendering options. Valid only for
     * `raster-tile` types.
     * 
     * See [Query Parameters](https://developmentseed.org/titiler/endpoints/cog/#description).
     * 
     * @param options the options value to set.
     * @return the RenderOption object itself.
     */
    @Generated
    public RenderOption setOptions(String options) {
        this.options = options;
        return this;
    }

    /**
     * Get the vectorOptions property: Options for rendering vector tiles. Valid only for `vt-polygon` and `vt-line`
     * types.
     * 
     * @return the vectorOptions value.
     */
    @Generated
    public RenderOptionVectorOptions getVectorOptions() {
        return this.vectorOptions;
    }

    /**
     * Set the vectorOptions property: Options for rendering vector tiles. Valid only for `vt-polygon` and `vt-line`
     * types.
     * 
     * @param vectorOptions the vectorOptions value to set.
     * @return the RenderOption object itself.
     */
    @Generated
    public RenderOption setVectorOptions(RenderOptionVectorOptions vectorOptions) {
        this.vectorOptions = vectorOptions;
        return this;
    }

    /**
     * Get the minZoom property: Minimum zoom level at which to display this layer.
     * 
     * @return the minZoom value.
     */
    @Generated
    public Integer getMinZoom() {
        return this.minZoom;
    }

    /**
     * Set the minZoom property: Minimum zoom level at which to display this layer.
     * 
     * @param minZoom the minZoom value to set.
     * @return the RenderOption object itself.
     */
    @Generated
    public RenderOption setMinZoom(Integer minZoom) {
        this.minZoom = minZoom;
        return this;
    }

    /**
     * Get the legend property: Legend configuration for this render option.
     * 
     * @return the legend value.
     */
    @Generated
    public RenderOptionLegend getLegend() {
        return this.legend;
    }

    /**
     * Set the legend property: Legend configuration for this render option.
     * 
     * @param legend the legend value to set.
     * @return the RenderOption object itself.
     */
    @Generated
    public RenderOption setLegend(RenderOptionLegend legend) {
        this.legend = legend;
        return this;
    }

    /**
     * Get the conditions property: A list of property/value conditions that must be in the active mosaic CQL for
     * this render option to be enabled.
     * 
     * @return the conditions value.
     */
    @Generated
    public List<RenderOptionCondition> getConditions() {
        return this.conditions;
    }

    /**
     * Set the conditions property: A list of property/value conditions that must be in the active mosaic CQL for
     * this render option to be enabled.
     * 
     * @param conditions the conditions value to set.
     * @return the RenderOption object itself.
     */
    @Generated
    public RenderOption setConditions(List<RenderOptionCondition> conditions) {
        this.conditions = conditions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("options", this.options);
        jsonWriter.writeJsonField("vectorOptions", this.vectorOptions);
        jsonWriter.writeNumberField("minZoom", this.minZoom);
        jsonWriter.writeJsonField("legend", this.legend);
        jsonWriter.writeArrayField("conditions", this.conditions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RenderOption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RenderOption if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RenderOption.
     */
    @Generated
    public static RenderOption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            String description = null;
            RenderOptionType type = null;
            String options = null;
            RenderOptionVectorOptions vectorOptions = null;
            Integer minZoom = null;
            RenderOptionLegend legend = null;
            List<RenderOptionCondition> conditions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RenderOptionType.fromString(reader.getString());
                } else if ("options".equals(fieldName)) {
                    options = reader.getString();
                } else if ("vectorOptions".equals(fieldName)) {
                    vectorOptions = RenderOptionVectorOptions.fromJson(reader);
                } else if ("minZoom".equals(fieldName)) {
                    minZoom = reader.getNullable(JsonReader::getInt);
                } else if ("legend".equals(fieldName)) {
                    legend = RenderOptionLegend.fromJson(reader);
                } else if ("conditions".equals(fieldName)) {
                    conditions = reader.readArray(reader1 -> RenderOptionCondition.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            RenderOption deserializedRenderOption = new RenderOption(id, name);
            deserializedRenderOption.description = description;
            deserializedRenderOption.type = type;
            deserializedRenderOption.options = options;
            deserializedRenderOption.vectorOptions = vectorOptions;
            deserializedRenderOption.minZoom = minZoom;
            deserializedRenderOption.legend = legend;
            deserializedRenderOption.conditions = conditions;

            return deserializedRenderOption;
        });
    }
}
