// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * PgSTAC Search entry.
 * 
 * ref:
 * https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915Stored
 * search query in the PgSTAC database.
 */
@Immutable
public final class TilerStacSearchDefinition implements JsonSerializable<TilerStacSearchDefinition> {
    /*
     * Unique hash identifier for the search query
     */
    @Generated
    private final String hash;

    /*
     * Search
     */
    @Generated
    private final Map<String, BinaryData> search;

    /*
     * SQL WHERE clause representing the search filters
     */
    @Generated
    private final String where;

    /*
     * SQL ORDER BY clause for sorting results
     */
    @Generated
    private final String orderBy;

    /*
     * Timestamp when the search was last accessed
     */
    @Generated
    private final OffsetDateTime lastUsed;

    /*
     * Number of times the search has been accessed
     */
    @Generated
    private final int useCount;

    /*
     * Additional metadata associated with the search
     */
    @Generated
    private final MosaicMetadata metadata;

    /**
     * Creates an instance of TilerStacSearchDefinition class.
     * 
     * @param hash the hash value to set.
     * @param search the search value to set.
     * @param where the where value to set.
     * @param orderBy the orderBy value to set.
     * @param lastUsed the lastUsed value to set.
     * @param useCount the useCount value to set.
     * @param metadata the metadata value to set.
     */
    @Generated
    private TilerStacSearchDefinition(String hash, Map<String, BinaryData> search, String where, String orderBy,
        OffsetDateTime lastUsed, int useCount, MosaicMetadata metadata) {
        this.hash = hash;
        this.search = search;
        this.where = where;
        this.orderBy = orderBy;
        this.lastUsed = lastUsed;
        this.useCount = useCount;
        this.metadata = metadata;
    }

    /**
     * Get the hash property: Unique hash identifier for the search query.
     * 
     * @return the hash value.
     */
    @Generated
    public String getHash() {
        return this.hash;
    }

    /**
     * Get the search property: Search.
     * 
     * @return the search value.
     */
    @Generated
    public Map<String, BinaryData> getSearch() {
        return this.search;
    }

    /**
     * Get the where property: SQL WHERE clause representing the search filters.
     * 
     * @return the where value.
     */
    @Generated
    public String getWhere() {
        return this.where;
    }

    /**
     * Get the orderBy property: SQL ORDER BY clause for sorting results.
     * 
     * @return the orderBy value.
     */
    @Generated
    public String getOrderBy() {
        return this.orderBy;
    }

    /**
     * Get the lastUsed property: Timestamp when the search was last accessed.
     * 
     * @return the lastUsed value.
     */
    @Generated
    public OffsetDateTime getLastUsed() {
        return this.lastUsed;
    }

    /**
     * Get the useCount property: Number of times the search has been accessed.
     * 
     * @return the useCount value.
     */
    @Generated
    public int getUseCount() {
        return this.useCount;
    }

    /**
     * Get the metadata property: Additional metadata associated with the search.
     * 
     * @return the metadata value.
     */
    @Generated
    public MosaicMetadata getMetadata() {
        return this.metadata;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hash", this.hash);
        jsonWriter.writeMapField("search", this.search,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("_where", this.where);
        jsonWriter.writeStringField("orderby", this.orderBy);
        jsonWriter.writeStringField("lastused",
            this.lastUsed == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUsed));
        jsonWriter.writeIntField("usecount", this.useCount);
        jsonWriter.writeJsonField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TilerStacSearchDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TilerStacSearchDefinition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TilerStacSearchDefinition.
     */
    @Generated
    public static TilerStacSearchDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String hash = null;
            Map<String, BinaryData> search = null;
            String where = null;
            String orderBy = null;
            OffsetDateTime lastUsed = null;
            int useCount = 0;
            MosaicMetadata metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hash".equals(fieldName)) {
                    hash = reader.getString();
                } else if ("search".equals(fieldName)) {
                    search = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("_where".equals(fieldName)) {
                    where = reader.getString();
                } else if ("orderby".equals(fieldName)) {
                    orderBy = reader.getString();
                } else if ("lastused".equals(fieldName)) {
                    lastUsed = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("usecount".equals(fieldName)) {
                    useCount = reader.getInt();
                } else if ("metadata".equals(fieldName)) {
                    metadata = MosaicMetadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new TilerStacSearchDefinition(hash, search, where, orderBy, lastUsed, useCount, metadata);
        });
    }
}
