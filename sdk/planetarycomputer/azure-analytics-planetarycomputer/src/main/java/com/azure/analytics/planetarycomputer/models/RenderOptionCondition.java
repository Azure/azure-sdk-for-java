// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a condition for enabling a render option.
 */
@Fluent
public final class RenderOptionCondition implements JsonSerializable<RenderOptionCondition> {
    /*
     * Property name to check in the active CQL filter.
     */
    @Generated
    private final String property;

    /*
     * Value that the property must equal.
     */
    @Generated
    private String value;

    /**
     * Creates an instance of RenderOptionCondition class.
     * 
     * @param property the property value to set.
     */
    @Generated
    public RenderOptionCondition(String property) {
        this.property = property;
    }

    /**
     * Get the property property: Property name to check in the active CQL filter.
     * 
     * @return the property value.
     */
    @Generated
    public String getProperty() {
        return this.property;
    }

    /**
     * Get the value property: Value that the property must equal.
     * 
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * Set the value property: Value that the property must equal.
     * 
     * @param value the value value to set.
     * @return the RenderOptionCondition object itself.
     */
    @Generated
    public RenderOptionCondition setValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("property", this.property);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RenderOptionCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RenderOptionCondition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RenderOptionCondition.
     */
    @Generated
    public static RenderOptionCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String property = null;
            String value = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("property".equals(fieldName)) {
                    property = reader.getString();
                } else if ("value".equals(fieldName)) {
                    value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RenderOptionCondition deserializedRenderOptionCondition = new RenderOptionCondition(property);
            deserializedRenderOptionCondition.value = value;

            return deserializedRenderOptionCondition;
        });
    }
}
