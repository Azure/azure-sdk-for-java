// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Asset information for the specified point.
 */
@Immutable
public final class StacItemPointAsset implements JsonSerializable<StacItemPointAsset> {
    /*
     * STAC item ID
     */
    @Generated
    private final String id;

    /*
     * Bounding box coordinates for the feature
     */
    @Generated
    private final List<Double> boundingBox;

    /*
     * Asset information for the specified point
     */
    @Generated
    private final Map<String, StacAsset> assets;

    /*
     * Collection ID
     */
    @Generated
    private final String collectionId;

    /**
     * Creates an instance of StacItemPointAsset class.
     * 
     * @param id the id value to set.
     * @param boundingBox the boundingBox value to set.
     * @param assets the assets value to set.
     * @param collectionId the collectionId value to set.
     */
    @Generated
    private StacItemPointAsset(String id, List<Double> boundingBox, Map<String, StacAsset> assets,
        String collectionId) {
        this.id = id;
        this.boundingBox = boundingBox;
        this.assets = assets;
        this.collectionId = collectionId;
    }

    /**
     * Get the id property: STAC item ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the boundingBox property: Bounding box coordinates for the feature.
     * 
     * @return the boundingBox value.
     */
    @Generated
    public List<Double> getBoundingBox() {
        return this.boundingBox;
    }

    /**
     * Get the assets property: Asset information for the specified point.
     * 
     * @return the assets value.
     */
    @Generated
    public Map<String, StacAsset> getAssets() {
        return this.assets;
    }

    /**
     * Get the collectionId property: Collection ID.
     * 
     * @return the collectionId value.
     */
    @Generated
    public String getCollectionId() {
        return this.collectionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("bbox", this.boundingBox, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeMapField("assets", this.assets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("collection", this.collectionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItemPointAsset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItemPointAsset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacItemPointAsset.
     */
    @Generated
    public static StacItemPointAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<Double> boundingBox = null;
            Map<String, StacAsset> assets = null;
            String collectionId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("bbox".equals(fieldName)) {
                    boundingBox = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("assets".equals(fieldName)) {
                    assets = reader.readMap(reader1 -> StacAsset.fromJson(reader1));
                } else if ("collection".equals(fieldName)) {
                    collectionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new StacItemPointAsset(id, boundingBox, assets, collectionId);
        });
    }
}
