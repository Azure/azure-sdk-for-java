// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.analytics.planetarycomputer.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Microsoft Planetary Computer Pro geo-catalog ingestion creation model.
 */
@Fluent
public final class IngestionDefinition implements JsonSerializable<IngestionDefinition> {
    /*
     * Ingestion id
     */
    @Generated
    private String id;

    /*
     * Ingestion type
     */
    @Generated
    private IngestionType importType;

    /*
     * Ingestion name
     */
    @Generated
    private String displayName;

    /*
     * Source catalog URL. Required for StaticCatalog ingestion type
     */
    @Generated
    private String sourceCatalogUrl;

    /*
     * Skip processing existing items in the catalog
     */
    @Generated
    private Boolean skipExistingItems;

    /*
     * Keep original source assets
     */
    @Generated
    private Boolean keepOriginalAssets;

    /*
     * Ingestion creation time
     */
    @Generated
    private OffsetDateTime creationTime;

    /*
     * Ingestion status
     */
    @Generated
    private IngestionStatus status;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setIngestionDefinitionAccessor(new JsonMergePatchHelper.IngestionDefinitionAccessor() {
            @Override
            public IngestionDefinition prepareModelForJsonMergePatch(IngestionDefinition model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(IngestionDefinition model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of IngestionDefinition class.
     */
    @Generated
    public IngestionDefinition() {
    }

    /**
     * Get the id property: Ingestion id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the importType property: Ingestion type.
     * 
     * @return the importType value.
     */
    @Generated
    public IngestionType getImportType() {
        return this.importType;
    }

    /**
     * Set the importType property: Ingestion type.
     * <p>Required when create the resource.</p>
     * 
     * @param importType the importType value to set.
     * @return the IngestionDefinition object itself.
     */
    @Generated
    public IngestionDefinition setImportType(IngestionType importType) {
        this.importType = importType;
        this.updatedProperties.add("importType");
        return this;
    }

    /**
     * Get the displayName property: Ingestion name.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Ingestion name.
     * 
     * @param displayName the displayName value to set.
     * @return the IngestionDefinition object itself.
     */
    @Generated
    public IngestionDefinition setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the sourceCatalogUrl property: Source catalog URL. Required for StaticCatalog ingestion type.
     * 
     * @return the sourceCatalogUrl value.
     */
    @Generated
    public String getSourceCatalogUrl() {
        return this.sourceCatalogUrl;
    }

    /**
     * Set the sourceCatalogUrl property: Source catalog URL. Required for StaticCatalog ingestion type.
     * 
     * @param sourceCatalogUrl the sourceCatalogUrl value to set.
     * @return the IngestionDefinition object itself.
     */
    @Generated
    public IngestionDefinition setSourceCatalogUrl(String sourceCatalogUrl) {
        this.sourceCatalogUrl = sourceCatalogUrl;
        this.updatedProperties.add("sourceCatalogUrl");
        return this;
    }

    /**
     * Get the skipExistingItems property: Skip processing existing items in the catalog.
     * 
     * @return the skipExistingItems value.
     */
    @Generated
    public Boolean isSkipExistingItems() {
        return this.skipExistingItems;
    }

    /**
     * Set the skipExistingItems property: Skip processing existing items in the catalog.
     * 
     * @param skipExistingItems the skipExistingItems value to set.
     * @return the IngestionDefinition object itself.
     */
    @Generated
    public IngestionDefinition setSkipExistingItems(Boolean skipExistingItems) {
        this.skipExistingItems = skipExistingItems;
        this.updatedProperties.add("skipExistingItems");
        return this;
    }

    /**
     * Get the keepOriginalAssets property: Keep original source assets.
     * 
     * @return the keepOriginalAssets value.
     */
    @Generated
    public Boolean isKeepOriginalAssets() {
        return this.keepOriginalAssets;
    }

    /**
     * Set the keepOriginalAssets property: Keep original source assets.
     * 
     * @param keepOriginalAssets the keepOriginalAssets value to set.
     * @return the IngestionDefinition object itself.
     */
    @Generated
    public IngestionDefinition setKeepOriginalAssets(Boolean keepOriginalAssets) {
        this.keepOriginalAssets = keepOriginalAssets;
        this.updatedProperties.add("keepOriginalAssets");
        return this;
    }

    /**
     * Get the creationTime property: Ingestion creation time.
     * 
     * @return the creationTime value.
     */
    @Generated
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the status property: Ingestion status.
     * 
     * @return the status value.
     */
    @Generated
    public IngestionStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("importType", this.importType == null ? null : this.importType.toString());
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeStringField("sourceCatalogUrl", this.sourceCatalogUrl);
            jsonWriter.writeBooleanField("skipExistingItems", this.skipExistingItems);
            jsonWriter.writeBooleanField("keepOriginalAssets", this.keepOriginalAssets);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("importType")) {
            if (this.importType == null) {
                jsonWriter.writeNullField("importType");
            } else {
                jsonWriter.writeStringField("importType", this.importType.toString());
            }
        }
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("sourceCatalogUrl")) {
            if (this.sourceCatalogUrl == null) {
                jsonWriter.writeNullField("sourceCatalogUrl");
            } else {
                jsonWriter.writeStringField("sourceCatalogUrl", this.sourceCatalogUrl);
            }
        }
        if (updatedProperties.contains("skipExistingItems")) {
            if (this.skipExistingItems == null) {
                jsonWriter.writeNullField("skipExistingItems");
            } else {
                jsonWriter.writeBooleanField("skipExistingItems", this.skipExistingItems);
            }
        }
        if (updatedProperties.contains("keepOriginalAssets")) {
            if (this.keepOriginalAssets == null) {
                jsonWriter.writeNullField("keepOriginalAssets");
            } else {
                jsonWriter.writeBooleanField("keepOriginalAssets", this.keepOriginalAssets);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngestionDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngestionDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IngestionDefinition.
     */
    @Generated
    public static IngestionDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IngestionDefinition deserializedIngestionDefinition = new IngestionDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedIngestionDefinition.id = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    deserializedIngestionDefinition.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedIngestionDefinition.status = IngestionStatus.fromString(reader.getString());
                } else if ("importType".equals(fieldName)) {
                    deserializedIngestionDefinition.importType = IngestionType.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedIngestionDefinition.displayName = reader.getString();
                } else if ("sourceCatalogUrl".equals(fieldName)) {
                    deserializedIngestionDefinition.sourceCatalogUrl = reader.getString();
                } else if ("skipExistingItems".equals(fieldName)) {
                    deserializedIngestionDefinition.skipExistingItems = reader.getNullable(JsonReader::getBoolean);
                } else if ("keepOriginalAssets".equals(fieldName)) {
                    deserializedIngestionDefinition.keepOriginalAssets = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIngestionDefinition;
        });
    }
}
