// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer;

import com.azure.analytics.planetarycomputer.implementation.SharedAccessSignatureClientsImpl;
import com.azure.analytics.planetarycomputer.models.SharedAccessSignatureToken;
import com.azure.analytics.planetarycomputer.models.SignedLink;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous PlanetaryComputerClient type.
 */
@ServiceClient(builder = PlanetaryComputerClientBuilder.class)
public final class SharedAccessSignatureClient {
    @Generated
    private final SharedAccessSignatureClientsImpl serviceClient;

    /**
     * Initializes an instance of SharedAccessSignatureClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SharedAccessSignatureClient(SharedAccessSignatureClientsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * sign an HREF in the format of a URL and returns a SingedLink
     * 
     * Signs a HREF (a link URL) by appending a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
     * If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:expiry: OffsetDateTime (Optional)
     *     href: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param href Href
     * 
     * HREF (URL) to sign.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return unsignedLink along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSignWithResponse(String href, RequestOptions requestOptions) {
        return this.serviceClient.getSignWithResponse(href, requestOptions);
    }

    /**
     * generate a SAS Token for the given Azure Blob storage account and container.
     * 
     * Generate a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for the given storage account and container. The storage account and container
     * must be associated with a Planetary Computer dataset indexed by the STAC API.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:expiry: OffsetDateTime (Required)
     *     token: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Collection Id
     * 
     * The name of the Collection that the SAS token will be issued for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return managed Storage Shared Access Signature (SAS) Token along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTokenWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getTokenWithResponse(collectionId, requestOptions);
    }

    /**
     * revoke a SAS Token for the given Azure Blob storage account
     * 
     * Revoke a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for managed storage account of this GeoCatalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> revokeTokenWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.revokeTokenWithResponse(requestOptions);
    }

    /**
     * sign an HREF in the format of a URL and returns a SingedLink
     * 
     * Signs a HREF (a link URL) by appending a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
     * If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
     * 
     * @param href Href
     * 
     * HREF (URL) to sign.
     * @param durationInMinutes Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return unsignedLink.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SignedLink getSign(String href, Integer durationInMinutes) {
        // Generated convenience method for getSignWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (durationInMinutes != null) {
            requestOptions.addQueryParam("duration", String.valueOf(durationInMinutes), false);
        }
        return getSignWithResponse(href, requestOptions).getValue().toObject(SignedLink.class);
    }

    /**
     * sign an HREF in the format of a URL and returns a SingedLink
     * 
     * Signs a HREF (a link URL) by appending a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
     * If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
     * 
     * @param href Href
     * 
     * HREF (URL) to sign.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return unsignedLink.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SignedLink getSign(String href) {
        // Generated convenience method for getSignWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSignWithResponse(href, requestOptions).getValue().toObject(SignedLink.class);
    }

    /**
     * generate a SAS Token for the given Azure Blob storage account and container.
     * 
     * Generate a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for the given storage account and container. The storage account and container
     * must be associated with a Planetary Computer dataset indexed by the STAC API.
     * 
     * @param collectionId Collection Id
     * 
     * The name of the Collection that the SAS token will be issued for.
     * @param durationInMinutes Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed Storage Shared Access Signature (SAS) Token.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SharedAccessSignatureToken getToken(String collectionId, Integer durationInMinutes) {
        // Generated convenience method for getTokenWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (durationInMinutes != null) {
            requestOptions.addQueryParam("duration", String.valueOf(durationInMinutes), false);
        }
        return getTokenWithResponse(collectionId, requestOptions).getValue().toObject(SharedAccessSignatureToken.class);
    }

    /**
     * generate a SAS Token for the given Azure Blob storage account and container.
     * 
     * Generate a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for the given storage account and container. The storage account and container
     * must be associated with a Planetary Computer dataset indexed by the STAC API.
     * 
     * @param collectionId Collection Id
     * 
     * The name of the Collection that the SAS token will be issued for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed Storage Shared Access Signature (SAS) Token.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SharedAccessSignatureToken getToken(String collectionId) {
        // Generated convenience method for getTokenWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTokenWithResponse(collectionId, requestOptions).getValue().toObject(SharedAccessSignatureToken.class);
    }

    /**
     * revoke a SAS Token for the given Azure Blob storage account
     * 
     * Revoke a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for managed storage account of this GeoCatalog.
     * 
     * @param durationInMinutes Duration
     * 
     * The duration, in minutes, that the SAS token will be valid. Only valid for approved users.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void revokeToken(Integer durationInMinutes) {
        // Generated convenience method for revokeTokenWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (durationInMinutes != null) {
            requestOptions.addQueryParam("duration", String.valueOf(durationInMinutes), false);
        }
        revokeTokenWithResponse(requestOptions).getValue();
    }

    /**
     * revoke a SAS Token for the given Azure Blob storage account
     * 
     * Revoke a [SAS
     * Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
     * for managed storage account of this GeoCatalog.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void revokeToken() {
        // Generated convenience method for revokeTokenWithResponse
        RequestOptions requestOptions = new RequestOptions();
        revokeTokenWithResponse(requestOptions).getValue();
    }
}
