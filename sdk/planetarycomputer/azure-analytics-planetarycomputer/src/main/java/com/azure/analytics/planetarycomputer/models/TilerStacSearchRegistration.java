// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Information about a registered STAC search query.
 */
@Immutable
public final class TilerStacSearchRegistration implements JsonSerializable<TilerStacSearchRegistration> {
    /*
     * Details of the saved search query
     * 
     * See the [PgSTAC Search table
     * definition](https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql
     * #L907-L915).
     */
    @Generated
    private final TilerStacSearchDefinition search;

    /*
     * Related links for the search query
     */
    @Generated
    private List<StacLink> links;

    /**
     * Creates an instance of TilerStacSearchRegistration class.
     * 
     * @param search the search value to set.
     */
    @Generated
    private TilerStacSearchRegistration(TilerStacSearchDefinition search) {
        this.search = search;
    }

    /**
     * Get the search property: Details of the saved search query
     * 
     * See the [PgSTAC Search table
     * definition](https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915).
     * 
     * @return the search value.
     */
    @Generated
    public TilerStacSearchDefinition getSearch() {
        return this.search;
    }

    /**
     * Get the links property: Related links for the search query.
     * 
     * @return the links value.
     */
    @Generated
    public List<StacLink> getLinks() {
        return this.links;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("search", this.search);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TilerStacSearchRegistration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TilerStacSearchRegistration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TilerStacSearchRegistration.
     */
    @Generated
    public static TilerStacSearchRegistration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TilerStacSearchDefinition search = null;
            List<StacLink> links = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("search".equals(fieldName)) {
                    search = TilerStacSearchDefinition.fromJson(reader);
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> StacLink.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            TilerStacSearchRegistration deserializedTilerStacSearchRegistration
                = new TilerStacSearchRegistration(search);
            deserializedTilerStacSearchRegistration.links = links;

            return deserializedTilerStacSearchRegistration;
        });
    }
}
