// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.analytics.planetarycomputer.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * https://github.com/radiantearth/stac-api-spec/tree/master/extensions/context#context-extension-specification
 * 
 * Context information for a search response including pagination details.
 */
@Fluent
public final class StacContextExtension implements JsonSerializable<StacContextExtension> {
    /*
     * Number of items returned in the response.
     */
    @Generated
    private int returned;

    /*
     * Maximum number of items requested.
     */
    @Generated
    private Integer limit;

    /*
     * Total number of items matching the query.
     */
    @Generated
    private Integer matched;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setStacContextExtensionAccessor(new JsonMergePatchHelper.StacContextExtensionAccessor() {
            @Override
            public StacContextExtension prepareModelForJsonMergePatch(StacContextExtension model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(StacContextExtension model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of StacContextExtension class.
     */
    @Generated
    public StacContextExtension() {
    }

    /**
     * Get the returned property: Number of items returned in the response.
     * 
     * @return the returned value.
     */
    @Generated
    public int getReturned() {
        return this.returned;
    }

    /**
     * Set the returned property: Number of items returned in the response.
     * <p>Required when create the resource.</p>
     * 
     * @param returned the returned value to set.
     * @return the StacContextExtension object itself.
     */
    @Generated
    public StacContextExtension setReturned(int returned) {
        this.returned = returned;
        this.updatedProperties.add("returned");
        return this;
    }

    /**
     * Get the limit property: Maximum number of items requested.
     * 
     * @return the limit value.
     */
    @Generated
    public Integer getLimit() {
        return this.limit;
    }

    /**
     * Set the limit property: Maximum number of items requested.
     * 
     * @param limit the limit value to set.
     * @return the StacContextExtension object itself.
     */
    @Generated
    public StacContextExtension setLimit(Integer limit) {
        this.limit = limit;
        this.updatedProperties.add("limit");
        return this;
    }

    /**
     * Get the matched property: Total number of items matching the query.
     * 
     * @return the matched value.
     */
    @Generated
    public Integer getMatched() {
        return this.matched;
    }

    /**
     * Set the matched property: Total number of items matching the query.
     * 
     * @param matched the matched value to set.
     * @return the StacContextExtension object itself.
     */
    @Generated
    public StacContextExtension setMatched(Integer matched) {
        this.matched = matched;
        this.updatedProperties.add("matched");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeIntField("returned", this.returned);
            jsonWriter.writeNumberField("limit", this.limit);
            jsonWriter.writeNumberField("matched", this.matched);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("returned")) {
            jsonWriter.writeIntField("returned", this.returned);
        }
        if (updatedProperties.contains("limit")) {
            if (this.limit == null) {
                jsonWriter.writeNullField("limit");
            } else {
                jsonWriter.writeNumberField("limit", this.limit);
            }
        }
        if (updatedProperties.contains("matched")) {
            if (this.matched == null) {
                jsonWriter.writeNullField("matched");
            } else {
                jsonWriter.writeNumberField("matched", this.matched);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacContextExtension from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacContextExtension if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StacContextExtension.
     */
    @Generated
    public static StacContextExtension fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StacContextExtension deserializedStacContextExtension = new StacContextExtension();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("returned".equals(fieldName)) {
                    deserializedStacContextExtension.returned = reader.getInt();
                } else if ("limit".equals(fieldName)) {
                    deserializedStacContextExtension.limit = reader.getNullable(JsonReader::getInt);
                } else if ("matched".equals(fieldName)) {
                    deserializedStacContextExtension.matched = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStacContextExtension;
        });
    }
}
