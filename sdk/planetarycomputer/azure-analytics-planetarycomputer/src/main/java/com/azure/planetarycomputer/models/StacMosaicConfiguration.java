// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Configuration for data mosaic visualization.
 */
@Immutable
public final class StacMosaicConfiguration implements JsonSerializable<StacMosaicConfiguration> {
    /*
     * Predefined data mosaics available for this collection.
     */
    @Generated
    private final List<StacMosaic> mosaics;

    /*
     * Available render options for visualizing the data.
     */
    @Generated
    private final List<RenderOption> renderOptions;

    /*
     * Default map location when displaying this collection.
     */
    @Generated
    private DefaultLocation defaultLocation;

    /*
     * A list of CQL-JSON expressions to use as the default for this collection.
     */
    @Generated
    private Map<String, BinaryData> defaultCustomQuery;

    /**
     * Creates an instance of StacMosaicConfiguration class.
     * 
     * @param mosaics the mosaics value to set.
     * @param renderOptions the renderOptions value to set.
     */
    @Generated
    private StacMosaicConfiguration(List<StacMosaic> mosaics, List<RenderOption> renderOptions) {
        this.mosaics = mosaics;
        this.renderOptions = renderOptions;
    }

    /**
     * Get the mosaics property: Predefined data mosaics available for this collection.
     * 
     * @return the mosaics value.
     */
    @Generated
    public List<StacMosaic> getMosaics() {
        return this.mosaics;
    }

    /**
     * Get the renderOptions property: Available render options for visualizing the data.
     * 
     * @return the renderOptions value.
     */
    @Generated
    public List<RenderOption> getRenderOptions() {
        return this.renderOptions;
    }

    /**
     * Get the defaultLocation property: Default map location when displaying this collection.
     * 
     * @return the defaultLocation value.
     */
    @Generated
    public DefaultLocation getDefaultLocation() {
        return this.defaultLocation;
    }

    /**
     * Get the defaultCustomQuery property: A list of CQL-JSON expressions to use as the default for this collection.
     * 
     * @return the defaultCustomQuery value.
     */
    @Generated
    public Map<String, BinaryData> getDefaultCustomQuery() {
        return this.defaultCustomQuery;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("mosaics", this.mosaics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("renderOptions", this.renderOptions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("defaultLocation", this.defaultLocation);
        jsonWriter.writeMapField("defaultCustomQuery", this.defaultCustomQuery,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacMosaicConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacMosaicConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacMosaicConfiguration.
     */
    @Generated
    public static StacMosaicConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<StacMosaic> mosaics = null;
            List<RenderOption> renderOptions = null;
            DefaultLocation defaultLocation = null;
            Map<String, BinaryData> defaultCustomQuery = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mosaics".equals(fieldName)) {
                    mosaics = reader.readArray(reader1 -> StacMosaic.fromJson(reader1));
                } else if ("renderOptions".equals(fieldName)) {
                    renderOptions = reader.readArray(reader1 -> RenderOption.fromJson(reader1));
                } else if ("defaultLocation".equals(fieldName)) {
                    defaultLocation = DefaultLocation.fromJson(reader);
                } else if ("defaultCustomQuery".equals(fieldName)) {
                    defaultCustomQuery = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else {
                    reader.skipChildren();
                }
            }
            StacMosaicConfiguration deserializedStacMosaicConfiguration
                = new StacMosaicConfiguration(mosaics, renderOptions);
            deserializedStacMosaicConfiguration.defaultLocation = defaultLocation;
            deserializedStacMosaicConfiguration.defaultCustomQuery = defaultCustomQuery;

            return deserializedStacMosaicConfiguration;
        });
    }
}
