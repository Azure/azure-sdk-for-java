// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Image format specifier for tile and image requests.
 */
public final class TilerImageFormat extends ExpandableStringEnum<TilerImageFormat> {
    /**
     * Portable Network Graphics format - supports transparency.
     */
    @Generated
    public static final TilerImageFormat PNG = fromString("png");

    /**
     * NumPy array format for raw data access.
     */
    @Generated
    public static final TilerImageFormat NPY = fromString("npy");

    /**
     * GeoTIFF format for georeferenced raster data.
     */
    @Generated
    public static final TilerImageFormat TIF = fromString("tif");

    /**
     * JPEG format - smaller file size but lossy compression.
     */
    @Generated
    public static final TilerImageFormat JPEG = fromString("jpeg");

    /**
     * Alternate extension for JPEG format.
     */
    @Generated
    public static final TilerImageFormat JPG = fromString("jpg");

    /**
     * JPEG 2000 format - supports both lossy and lossless compression.
     */
    @Generated
    public static final TilerImageFormat JP2 = fromString("jp2");

    /**
     * WebP format - modern image format with good compression.
     */
    @Generated
    public static final TilerImageFormat WEBP = fromString("webp");

    /**
     * Raw PNG format for access to unprocessed data.
     */
    @Generated
    public static final TilerImageFormat PNGRAW = fromString("pngraw");

    /**
     * Creates a new instance of TilerImageFormat value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public TilerImageFormat() {
    }

    /**
     * Creates or finds a TilerImageFormat from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding TilerImageFormat.
     */
    @Generated
    public static TilerImageFormat fromString(String name) {
        return fromString(name, TilerImageFormat.class);
    }

    /**
     * Gets known TilerImageFormat values.
     * 
     * @return known TilerImageFormat values.
     */
    @Generated
    public static Collection<TilerImageFormat> values() {
        return values(TilerImageFormat.class);
    }
}
