// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * GeoJSON Feature object containing rio-tiler model information.
 */
@Immutable
public final class TilerInfoGeoJsonFeature implements JsonSerializable<TilerInfoGeoJsonFeature> {
    /*
     * GeoJSON type identifier
     */
    @Generated
    private final FeatureType type;

    /*
     * Geometry object defining the feature's shape
     */
    @Generated
    private final Geometry geometry;

    /*
     * Properties
     */
    @Generated
    private final Map<String, TilerInfo> properties;

    /*
     * Unique identifier for the feature
     */
    @Generated
    private String id;

    /*
     * Bounding box coordinates for the feature
     */
    @Generated
    private Double boundingBox;

    /**
     * Creates an instance of TilerInfoGeoJsonFeature class.
     * 
     * @param type the type value to set.
     * @param geometry the geometry value to set.
     * @param properties the properties value to set.
     */
    @Generated
    private TilerInfoGeoJsonFeature(FeatureType type, Geometry geometry, Map<String, TilerInfo> properties) {
        this.type = type;
        this.geometry = geometry;
        this.properties = properties;
    }

    /**
     * Get the type property: GeoJSON type identifier.
     * 
     * @return the type value.
     */
    @Generated
    public FeatureType getType() {
        return this.type;
    }

    /**
     * Get the geometry property: Geometry object defining the feature's shape.
     * 
     * @return the geometry value.
     */
    @Generated
    public Geometry getGeometry() {
        return this.geometry;
    }

    /**
     * Get the properties property: Properties.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, TilerInfo> getProperties() {
        return this.properties;
    }

    /**
     * Get the id property: Unique identifier for the feature.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the boundingBox property: Bounding box coordinates for the feature.
     * 
     * @return the boundingBox value.
     */
    @Generated
    public Double getBoundingBox() {
        return this.boundingBox;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("geometry", this.geometry);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeNumberField("bbox", this.boundingBox);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TilerInfoGeoJsonFeature from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TilerInfoGeoJsonFeature if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TilerInfoGeoJsonFeature.
     */
    @Generated
    public static TilerInfoGeoJsonFeature fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeatureType type = null;
            Geometry geometry = null;
            Map<String, TilerInfo> properties = null;
            String id = null;
            Double boundingBox = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = FeatureType.fromString(reader.getString());
                } else if ("geometry".equals(fieldName)) {
                    geometry = Geometry.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> TilerInfo.fromJson(reader1));
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("bbox".equals(fieldName)) {
                    boundingBox = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            TilerInfoGeoJsonFeature deserializedTilerInfoGeoJsonFeature
                = new TilerInfoGeoJsonFeature(type, geometry, properties);
            deserializedTilerInfoGeoJsonFeature.id = id;
            deserializedTilerInfoGeoJsonFeature.boundingBox = boundingBox;

            return deserializedTilerInfoGeoJsonFeature;
        });
    }
}
