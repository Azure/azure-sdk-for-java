// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Operation status history item.
 */
@Immutable
public final class OperationStatusHistoryItem implements JsonSerializable<OperationStatusHistoryItem> {
    /*
     * The UTC time at which the status was set
     */
    @Generated
    private final OffsetDateTime timestamp;

    /*
     * The status of the operation
     */
    @Generated
    private final OperationStatus status;

    /*
     * If the status is failed, the error code
     */
    @Generated
    private String errorCode;

    /*
     * If the status is failed, the error message
     */
    @Generated
    private String errorMessage;

    /**
     * Creates an instance of OperationStatusHistoryItem class.
     * 
     * @param timestamp the timestamp value to set.
     * @param status the status value to set.
     */
    @Generated
    private OperationStatusHistoryItem(OffsetDateTime timestamp, OperationStatus status) {
        this.timestamp = timestamp;
        this.status = status;
    }

    /**
     * Get the timestamp property: The UTC time at which the status was set.
     * 
     * @return the timestamp value.
     */
    @Generated
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the status property: The status of the operation.
     * 
     * @return the status value.
     */
    @Generated
    public OperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the errorCode property: If the status is failed, the error code.
     * 
     * @return the errorCode value.
     */
    @Generated
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * Get the errorMessage property: If the status is failed, the error message.
     * 
     * @return the errorMessage value.
     */
    @Generated
    public String getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("errorCode", this.errorCode);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationStatusHistoryItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationStatusHistoryItem if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperationStatusHistoryItem.
     */
    @Generated
    public static OperationStatusHistoryItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime timestamp = null;
            OperationStatus status = null;
            String errorCode = null;
            String errorMessage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    status = OperationStatus.fromString(reader.getString());
                } else if ("errorCode".equals(fieldName)) {
                    errorCode = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            OperationStatusHistoryItem deserializedOperationStatusHistoryItem
                = new OperationStatusHistoryItem(timestamp, status);
            deserializedOperationStatusHistoryItem.errorCode = errorCode;
            deserializedOperationStatusHistoryItem.errorMessage = errorMessage;

            return deserializedOperationStatusHistoryItem;
        });
    }
}
