// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.generated;

import com.azure.planetarycomputer.models.FilterLanguage;
import com.azure.planetarycomputer.models.Geometry;
import com.azure.planetarycomputer.models.GeometryType;
import com.azure.planetarycomputer.models.StacItem;
import com.azure.planetarycomputer.models.StacItemCollection;
import com.azure.planetarycomputer.models.StacItemProperties;
import com.azure.planetarycomputer.models.StacModelType;
import com.azure.planetarycomputer.models.StacSearchParameters;
import com.azure.planetarycomputer.models.StacSearchSortingDirection;
import com.azure.planetarycomputer.models.StacSortExtension;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StacSearchCreateTests extends PlanetaryComputerClientTestBase {
    @Test
    @Disabled
    public void testStacSearchCreateTests() {
        // method invocation
        StacItemCollection response = stacClient.search(new StacSearchParameters().setLimit(1)
            .setSortBy(Arrays.asList(new StacSortExtension("datetime", StacSearchSortingDirection.DESC)))
            .setFilter(
                "{op=and, args=[{op==, args=[{property=collection}, landsat-c2-l2]}, {op=s_intersects, args=[{property=geometry}, {type=Polygon, coordinates=[[[-64.40921305524132, -46.66887954721563], [124.52640055523665, -46.66887954721563], [124.52640055523665, 74.90964316425496], [-64.40921305524132, 74.90964316425496], [-64.40921305524132, -46.66887954721563]]]}]}, {op=anyinteracts, args=[{property=datetime}, {interval=[1982-08-22T00:00:00Z, 2025-07-23T23:59:59Z]}]}, {op=<=, args=[{property=eo:cloud_cover}, 20]}]}")
            .setFilterLang(FilterLanguage.CQL2_JSON));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "type"
        Assertions.assertEquals(StacModelType.FEATURE_COLLECTION, response.getType());
        // verify property "features"
        List<StacItem> responseFeatures = response.getFeatures();
        StacItem responseFeaturesFirstItem = responseFeatures.iterator().next();
        Assertions.assertNotNull(responseFeaturesFirstItem);
        Assertions.assertEquals(StacModelType.FEATURE, responseFeaturesFirstItem.getType());
        Geometry responseFeaturesFirstItemGeometry = responseFeaturesFirstItem.getGeometry();
        Assertions.assertNotNull(responseFeaturesFirstItemGeometry);
        Assertions.assertEquals(GeometryType.POLYGON, responseFeaturesFirstItemGeometry.getType());
        List<Double> responseFeaturesFirstItemBoundingBox = responseFeaturesFirstItem.getBoundingBox();
        Assertions.assertEquals(-33.93336757082145, responseFeaturesFirstItemBoundingBox.iterator().next());
        Assertions.assertEquals("LC09_L2SP_060238_20250714_02_T1", responseFeaturesFirstItem.getId());
        Assertions.assertEquals("landsat-c2-l2", responseFeaturesFirstItem.getCollection());
        StacItemProperties responseFeaturesFirstItemProperties = responseFeaturesFirstItem.getProperties();
        Assertions.assertNotNull(responseFeaturesFirstItemProperties);
        Assertions.assertEquals("landsat-9", responseFeaturesFirstItemProperties.getPlatform());
        List<String> responseFeaturesFirstItemPropertiesInstruments
            = responseFeaturesFirstItemProperties.getInstruments();
        Assertions.assertEquals("oli", responseFeaturesFirstItemPropertiesInstruments.iterator().next());
        Assertions.assertEquals(30.0D, responseFeaturesFirstItemProperties.getGsd());
        Assertions.assertNotNull(responseFeaturesFirstItemProperties.getCreated());
        Assertions.assertEquals("Landsat Collection 2 Level-2", responseFeaturesFirstItemProperties.getDescription());
        Assertions.assertEquals("2025-07-14T21:46:07.025131Z", responseFeaturesFirstItemProperties.getDatetime());
        Assertions.assertNotNull(responseFeaturesFirstItem.getAssets());
    }
}
