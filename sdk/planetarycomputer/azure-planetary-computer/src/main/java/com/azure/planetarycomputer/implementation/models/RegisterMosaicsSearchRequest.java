// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.models.FilterLanguage;
import com.azure.planetarycomputer.models.Geometry;
import com.azure.planetarycomputer.models.MosaicMetadata;
import com.azure.planetarycomputer.models.StacSortExtension;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The RegisterMosaicsSearchRequest model.
 */
@Fluent
public final class RegisterMosaicsSearchRequest implements JsonSerializable<RegisterMosaicsSearchRequest> {
    /*
     * List of STAC collection IDs to include in the mosaic
     */
    @Generated
    private List<String> collections;

    /*
     * List of specific STAC item IDs to include in the mosaic
     */
    @Generated
    private List<String> ids;

    /*
     * Geographic bounding box to filter items [west, south, east, north]
     */
    @Generated
    private Double boundingBox;

    /*
     * GeoJSON geometry to spatially filter items by intersection
     */
    @Generated
    private Geometry intersects;

    /*
     * Query
     */
    @Generated
    private Map<String, BinaryData> query;

    /*
     * Filter
     */
    @Generated
    private String filter;

    /*
     * Temporal filter in RFC 3339 format or interval
     */
    @Generated
    private String datetime;

    /*
     * Criteria for ordering items in the mosaic
     */
    @Generated
    private List<StacSortExtension> sortBy;

    /*
     * Query language format used in the filter parameter
     */
    @Generated
    private FilterLanguage filterLanguage;

    /*
     * Additional metadata to associate with the mosaic
     */
    @Generated
    private MosaicMetadata metadata;

    /**
     * Creates an instance of RegisterMosaicsSearchRequest class.
     */
    @Generated
    public RegisterMosaicsSearchRequest() {
    }

    /**
     * Get the collections property: List of STAC collection IDs to include in the mosaic.
     * 
     * @return the collections value.
     */
    @Generated
    public List<String> getCollections() {
        return this.collections;
    }

    /**
     * Set the collections property: List of STAC collection IDs to include in the mosaic.
     * 
     * @param collections the collections value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setCollections(List<String> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the ids property: List of specific STAC item IDs to include in the mosaic.
     * 
     * @return the ids value.
     */
    @Generated
    public List<String> getIds() {
        return this.ids;
    }

    /**
     * Set the ids property: List of specific STAC item IDs to include in the mosaic.
     * 
     * @param ids the ids value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setIds(List<String> ids) {
        this.ids = ids;
        return this;
    }

    /**
     * Get the boundingBox property: Geographic bounding box to filter items [west, south, east, north].
     * 
     * @return the boundingBox value.
     */
    @Generated
    public Double getBoundingBox() {
        return this.boundingBox;
    }

    /**
     * Set the boundingBox property: Geographic bounding box to filter items [west, south, east, north].
     * 
     * @param boundingBox the boundingBox value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setBoundingBox(Double boundingBox) {
        this.boundingBox = boundingBox;
        return this;
    }

    /**
     * Get the intersects property: GeoJSON geometry to spatially filter items by intersection.
     * 
     * @return the intersects value.
     */
    @Generated
    public Geometry getIntersects() {
        return this.intersects;
    }

    /**
     * Set the intersects property: GeoJSON geometry to spatially filter items by intersection.
     * 
     * @param intersects the intersects value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setIntersects(Geometry intersects) {
        this.intersects = intersects;
        return this;
    }

    /**
     * Get the query property: Query.
     * 
     * @return the query value.
     */
    @Generated
    public Map<String, BinaryData> getQuery() {
        return this.query;
    }

    /**
     * Set the query property: Query.
     * 
     * @param query the query value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setQuery(Map<String, BinaryData> query) {
        this.query = query;
        return this;
    }

    /**
     * Get the filter property: Filter.
     * 
     * @return the filter value.
     */
    @Generated
    public String getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: Filter.
     * 
     * @param filter the filter value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setFilter(String filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the datetime property: Temporal filter in RFC 3339 format or interval.
     * 
     * @return the datetime value.
     */
    @Generated
    public String getDatetime() {
        return this.datetime;
    }

    /**
     * Set the datetime property: Temporal filter in RFC 3339 format or interval.
     * 
     * @param datetime the datetime value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setDatetime(String datetime) {
        this.datetime = datetime;
        return this;
    }

    /**
     * Get the sortBy property: Criteria for ordering items in the mosaic.
     * 
     * @return the sortBy value.
     */
    @Generated
    public List<StacSortExtension> getSortBy() {
        return this.sortBy;
    }

    /**
     * Set the sortBy property: Criteria for ordering items in the mosaic.
     * 
     * @param sortBy the sortBy value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setSortBy(List<StacSortExtension> sortBy) {
        this.sortBy = sortBy;
        return this;
    }

    /**
     * Get the filterLanguage property: Query language format used in the filter parameter.
     * 
     * @return the filterLanguage value.
     */
    @Generated
    public FilterLanguage getFilterLanguage() {
        return this.filterLanguage;
    }

    /**
     * Set the filterLanguage property: Query language format used in the filter parameter.
     * 
     * @param filterLanguage the filterLanguage value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setFilterLanguage(FilterLanguage filterLanguage) {
        this.filterLanguage = filterLanguage;
        return this;
    }

    /**
     * Get the metadata property: Additional metadata to associate with the mosaic.
     * 
     * @return the metadata value.
     */
    @Generated
    public MosaicMetadata getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Additional metadata to associate with the mosaic.
     * 
     * @param metadata the metadata value to set.
     * @return the RegisterMosaicsSearchRequest object itself.
     */
    @Generated
    public RegisterMosaicsSearchRequest setMetadata(MosaicMetadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("collections", this.collections, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ids", this.ids, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("bbox", this.boundingBox);
        jsonWriter.writeJsonField("intersects", this.intersects);
        jsonWriter.writeMapField("query", this.query,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("filter", this.filter);
        jsonWriter.writeStringField("datetime", this.datetime);
        jsonWriter.writeArrayField("sortby", this.sortBy, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("filter-lang", this.filterLanguage == null ? null : this.filterLanguage.toString());
        jsonWriter.writeJsonField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegisterMosaicsSearchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegisterMosaicsSearchRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegisterMosaicsSearchRequest.
     */
    @Generated
    public static RegisterMosaicsSearchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegisterMosaicsSearchRequest deserializedRegisterMosaicsSearchRequest = new RegisterMosaicsSearchRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collections".equals(fieldName)) {
                    List<String> collections = reader.readArray(reader1 -> reader1.getString());
                    deserializedRegisterMosaicsSearchRequest.collections = collections;
                } else if ("ids".equals(fieldName)) {
                    List<String> ids = reader.readArray(reader1 -> reader1.getString());
                    deserializedRegisterMosaicsSearchRequest.ids = ids;
                } else if ("bbox".equals(fieldName)) {
                    deserializedRegisterMosaicsSearchRequest.boundingBox = reader.getNullable(JsonReader::getDouble);
                } else if ("intersects".equals(fieldName)) {
                    deserializedRegisterMosaicsSearchRequest.intersects = Geometry.fromJson(reader);
                } else if ("query".equals(fieldName)) {
                    Map<String, BinaryData> query = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedRegisterMosaicsSearchRequest.query = query;
                } else if ("filter".equals(fieldName)) {
                    deserializedRegisterMosaicsSearchRequest.filter = reader.getString();
                } else if ("datetime".equals(fieldName)) {
                    deserializedRegisterMosaicsSearchRequest.datetime = reader.getString();
                } else if ("sortby".equals(fieldName)) {
                    List<StacSortExtension> sortBy = reader.readArray(reader1 -> StacSortExtension.fromJson(reader1));
                    deserializedRegisterMosaicsSearchRequest.sortBy = sortBy;
                } else if ("filter-lang".equals(fieldName)) {
                    deserializedRegisterMosaicsSearchRequest.filterLanguage
                        = FilterLanguage.fromString(reader.getString());
                } else if ("metadata".equals(fieldName)) {
                    deserializedRegisterMosaicsSearchRequest.metadata = MosaicMetadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegisterMosaicsSearchRequest;
        });
    }
}
