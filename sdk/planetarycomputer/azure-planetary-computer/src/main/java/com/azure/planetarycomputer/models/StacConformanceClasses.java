// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
 * 
 * Represents the OGC API conformance declaration.
 */
@Immutable
public final class StacConformanceClasses implements JsonSerializable<StacConformanceClasses> {
    /*
     * List of OGC API conformance classes implemented by this API.
     */
    @Generated
    private final List<String> conformsTo;

    /**
     * Creates an instance of StacConformanceClasses class.
     * 
     * @param conformsTo the conformsTo value to set.
     */
    @Generated
    private StacConformanceClasses(List<String> conformsTo) {
        this.conformsTo = conformsTo;
    }

    /**
     * Get the conformsTo property: List of OGC API conformance classes implemented by this API.
     * 
     * @return the conformsTo value.
     */
    @Generated
    public List<String> getConformsTo() {
        return this.conformsTo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("conformsTo", this.conformsTo, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacConformanceClasses from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacConformanceClasses if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacConformanceClasses.
     */
    @Generated
    public static StacConformanceClasses fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> conformsTo = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("conformsTo".equals(fieldName)) {
                    conformsTo = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new StacConformanceClasses(conformsTo);
        });
    }
}
