// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Asset metadata model.
 */
@Immutable
public final class AssetMetadata implements JsonSerializable<AssetMetadata> {
    /*
     * The key of the asset.
     */
    @Generated
    private final String key;

    /*
     * The type of the asset.
     */
    @Generated
    private final String type;

    /*
     * The roles of the asset.
     */
    @Generated
    private final List<String> roles;

    /*
     * The title of the asset.
     */
    @Generated
    private final String title;

    /*
     * The description of the asset.
     */
    @Generated
    private final String description;

    /**
     * Creates an instance of AssetMetadata class.
     * 
     * @param key the key value to set.
     * @param type the type value to set.
     * @param roles the roles value to set.
     * @param title the title value to set.
     * @param description the description value to set.
     */
    @Generated
    public AssetMetadata(String key, String type, List<String> roles, String title, String description) {
        this.key = key;
        this.type = type;
        this.roles = roles;
        this.title = title;
        this.description = description;
    }

    /**
     * Get the key property: The key of the asset.
     * 
     * @return the key value.
     */
    @Generated
    public String getKey() {
        return this.key;
    }

    /**
     * Get the type property: The type of the asset.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the roles property: The roles of the asset.
     * 
     * @return the roles value.
     */
    @Generated
    public List<String> getRoles() {
        return this.roles;
    }

    /**
     * Get the title property: The title of the asset.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the description property: The description of the asset.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssetMetadata.
     */
    @Generated
    public static AssetMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String key = null;
            String type = null;
            List<String> roles = null;
            String title = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    key = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    roles = reader.readArray(reader1 -> reader1.getString());
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AssetMetadata(key, type, roles, title, description);
        });
    }
}
