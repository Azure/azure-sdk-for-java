// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Ingestion Source.
 */
@Immutable
public class IngestionSource implements JsonSerializable<IngestionSource> {
    /*
     * Discriminator for the ingestion source
     */
    @Generated
    private IngestionSourceType kind = IngestionSourceType.fromString("IngestionSource");

    /*
     * Ingestion source id
     */
    @Generated
    private final String id;

    /*
     * Created time in UTC format
     */
    @Generated
    private OffsetDateTime created;

    /**
     * Creates an instance of IngestionSource class.
     * 
     * @param id the id value to set.
     */
    @Generated
    public IngestionSource(String id) {
        this.id = id;
    }

    /**
     * Get the kind property: Discriminator for the ingestion source.
     * 
     * @return the kind value.
     */
    @Generated
    public IngestionSourceType getKind() {
        return this.kind;
    }

    /**
     * Get the id property: Ingestion source id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the created property: Created time in UTC format.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Set the created property: Created time in UTC format.
     * 
     * @param created the created value to set.
     * @return the IngestionSource object itself.
     */
    @Generated
    IngestionSource setCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngestionSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngestionSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IngestionSource.
     */
    @Generated
    public static IngestionSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("SasToken".equals(discriminatorValue)) {
                    return SharedAccessSignatureTokenIngestionSource.fromJson(readerToUse.reset());
                } else if ("BlobManagedIdentity".equals(discriminatorValue)) {
                    return ManagedIdentityIngestionSource.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static IngestionSource fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime created = null;
            IngestionSourceType kind = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created".equals(fieldName)) {
                    created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("kind".equals(fieldName)) {
                    kind = IngestionSourceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            IngestionSource deserializedIngestionSource = new IngestionSource(id);
            deserializedIngestionSource.created = created;
            deserializedIngestionSource.kind = kind;

            return deserializedIngestionSource;
        });
    }
}
