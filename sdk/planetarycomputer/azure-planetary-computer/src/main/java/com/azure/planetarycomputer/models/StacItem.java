// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Represents a STAC Item, which is a GeoJSON Feature with additional metadata.
 */
@Fluent
public final class StacItem extends StacItemOrStacItemCollection {
    /*
     * Discriminator property for StacItemOrStacItemCollection.
     */
    @Generated
    private StacModelType type = StacModelType.FEATURE;

    /*
     * Geometry object defining the feature's shape
     */
    @Generated
    private Geometry geometry;

    /*
     * Bounding box coordinates for the feature
     */
    @Generated
    private List<Double> boundingBox;

    /*
     * Unique identifier for the feature
     */
    @Generated
    private String id;

    /*
     * ID of the STAC collection this item belongs to.
     */
    @Generated
    private String collection;

    /*
     * Attributes associated with the feature
     */
    @Generated
    private StacItemProperties properties;

    /*
     * Assets
     */
    @Generated
    private Map<String, StacAsset> assets;

    /*
     * MSFT Timestamp
     */
    @Generated
    private String timestamp;

    /*
     * MSFT ETag
     */
    @Generated
    private String eTag;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of StacItem class.
     */
    @Generated
    public StacItem() {
    }

    /**
     * Get the type property: Discriminator property for StacItemOrStacItemCollection.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public StacModelType getType() {
        return this.type;
    }

    /**
     * Get the geometry property: Geometry object defining the feature's shape.
     * 
     * @return the geometry value.
     */
    @Generated
    public Geometry getGeometry() {
        return this.geometry;
    }

    /**
     * Set the geometry property: Geometry object defining the feature's shape.
     * <p>Required when create the resource.</p>
     * 
     * @param geometry the geometry value to set.
     * @return the StacItem object itself.
     */
    @Generated
    public StacItem setGeometry(Geometry geometry) {
        this.geometry = geometry;
        this.updatedProperties.add("geometry");
        return this;
    }

    /**
     * Get the boundingBox property: Bounding box coordinates for the feature.
     * 
     * @return the boundingBox value.
     */
    @Generated
    public List<Double> getBoundingBox() {
        return this.boundingBox;
    }

    /**
     * Set the boundingBox property: Bounding box coordinates for the feature.
     * <p>Required when create the resource.</p>
     * 
     * @param boundingBox the boundingBox value to set.
     * @return the StacItem object itself.
     */
    @Generated
    public StacItem setBoundingBox(List<Double> boundingBox) {
        this.boundingBox = boundingBox;
        this.updatedProperties.add("boundingBox");
        return this;
    }

    /**
     * Get the id property: Unique identifier for the feature.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the collection property: ID of the STAC collection this item belongs to.
     * 
     * @return the collection value.
     */
    @Generated
    public String getCollection() {
        return this.collection;
    }

    /**
     * Set the collection property: ID of the STAC collection this item belongs to.
     * 
     * @param collection the collection value to set.
     * @return the StacItem object itself.
     */
    @Generated
    public StacItem setCollection(String collection) {
        this.collection = collection;
        this.updatedProperties.add("collection");
        return this;
    }

    /**
     * Get the properties property: Attributes associated with the feature.
     * 
     * @return the properties value.
     */
    @Generated
    public StacItemProperties getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Attributes associated with the feature.
     * <p>Required when create the resource.</p>
     * 
     * @param properties the properties value to set.
     * @return the StacItem object itself.
     */
    @Generated
    public StacItem setProperties(StacItemProperties properties) {
        this.properties = properties;
        this.updatedProperties.add("properties");
        return this;
    }

    /**
     * Get the assets property: Assets.
     * 
     * @return the assets value.
     */
    @Generated
    public Map<String, StacAsset> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Assets.
     * <p>Required when create the resource.</p>
     * 
     * @param assets the assets value to set.
     * @return the StacItem object itself.
     */
    @Generated
    public StacItem setAssets(Map<String, StacAsset> assets) {
        this.assets = assets;
        this.updatedProperties.add("assets");
        return this;
    }

    /**
     * Get the timestamp property: MSFT Timestamp.
     * 
     * @return the timestamp value.
     */
    @Generated
    public String getTimestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: MSFT Timestamp.
     * 
     * @param timestamp the timestamp value to set.
     * @return the StacItem object itself.
     */
    @Generated
    public StacItem setTimestamp(String timestamp) {
        this.timestamp = timestamp;
        this.updatedProperties.add("timestamp");
        return this;
    }

    /**
     * Get the eTag property: MSFT ETag.
     * 
     * @return the eTag value.
     */
    @Generated
    public String getETag() {
        return this.eTag;
    }

    /**
     * Set the eTag property: MSFT ETag.
     * 
     * @param eTag the eTag value to set.
     * @return the StacItem object itself.
     */
    @Generated
    public StacItem setETag(String eTag) {
        this.eTag = eTag;
        this.updatedProperties.add("eTag");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItem setStacVersion(String stacVersion) {
        super.setStacVersion(stacVersion);
        this.updatedProperties.add("stacVersion");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItem setLinks(List<StacLink> links) {
        super.setLinks(links);
        this.updatedProperties.add("links");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItem setCreatedOn(String createdOn) {
        super.setCreatedOn(createdOn);
        this.updatedProperties.add("createdOn");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItem setUpdatedOn(String updatedOn) {
        super.setUpdatedOn(updatedOn);
        this.updatedProperties.add("updatedOn");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItem setShortDescription(String shortDescription) {
        super.setShortDescription(shortDescription);
        this.updatedProperties.add("shortDescription");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItem setStacExtensions(List<String> stacExtensions) {
        super.setStacExtensions(stacExtensions);
        this.updatedProperties.add("stacExtensions");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getStacItemOrStacItemCollectionAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("stac_version", getStacVersion());
            jsonWriter.writeArrayField("links", getLinks(), (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("msft:_created", getCreatedOn());
            jsonWriter.writeStringField("msft:_updated", getUpdatedOn());
            jsonWriter.writeStringField("msft:short_description", getShortDescription());
            jsonWriter.writeArrayField("stac_extensions", getStacExtensions(),
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeJsonField("geometry", this.geometry);
            jsonWriter.writeArrayField("bbox", this.boundingBox, (writer, element) -> writer.writeDouble(element));
            jsonWriter.writeStringField("collection", this.collection);
            jsonWriter.writeJsonField("properties", this.properties);
            jsonWriter.writeMapField("assets", this.assets, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("_msft:ts", this.timestamp);
            jsonWriter.writeStringField("_msft:etag", this.eTag);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("stacVersion")) {
            if (getStacVersion() == null) {
                jsonWriter.writeNullField("stac_version");
            } else {
                jsonWriter.writeStringField("stac_version", getStacVersion());
            }
        }
        if (updatedProperties.contains("links")) {
            if (getLinks() == null) {
                jsonWriter.writeNullField("links");
            } else {
                jsonWriter.writeArrayField("links", getLinks(), (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("createdOn")) {
            if (getCreatedOn() == null) {
                jsonWriter.writeNullField("msft:_created");
            } else {
                jsonWriter.writeStringField("msft:_created", getCreatedOn());
            }
        }
        if (updatedProperties.contains("updatedOn")) {
            if (getUpdatedOn() == null) {
                jsonWriter.writeNullField("msft:_updated");
            } else {
                jsonWriter.writeStringField("msft:_updated", getUpdatedOn());
            }
        }
        if (updatedProperties.contains("shortDescription")) {
            if (getShortDescription() == null) {
                jsonWriter.writeNullField("msft:short_description");
            } else {
                jsonWriter.writeStringField("msft:short_description", getShortDescription());
            }
        }
        if (updatedProperties.contains("stacExtensions")) {
            if (getStacExtensions() == null) {
                jsonWriter.writeNullField("stac_extensions");
            } else {
                jsonWriter.writeArrayField("stac_extensions", getStacExtensions(),
                    (writer, element) -> writer.writeString(element));
            }
        }
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("geometry")) {
            if (this.geometry == null) {
                jsonWriter.writeNullField("geometry");
            } else {
                JsonMergePatchHelper.getGeometryAccessor().prepareModelForJsonMergePatch(this.geometry, true);
                jsonWriter.writeJsonField("geometry", this.geometry);
                JsonMergePatchHelper.getGeometryAccessor().prepareModelForJsonMergePatch(this.geometry, false);
            }
        }
        if (updatedProperties.contains("boundingBox")) {
            if (this.boundingBox == null) {
                jsonWriter.writeNullField("bbox");
            } else {
                jsonWriter.writeArrayField("bbox", this.boundingBox, (writer, element) -> writer.writeDouble(element));
            }
        }
        if (updatedProperties.contains("collection")) {
            if (this.collection == null) {
                jsonWriter.writeNullField("collection");
            } else {
                jsonWriter.writeStringField("collection", this.collection);
            }
        }
        if (updatedProperties.contains("properties")) {
            if (this.properties == null) {
                jsonWriter.writeNullField("properties");
            } else {
                JsonMergePatchHelper.getStacItemPropertiesAccessor()
                    .prepareModelForJsonMergePatch(this.properties, true);
                jsonWriter.writeJsonField("properties", this.properties);
                JsonMergePatchHelper.getStacItemPropertiesAccessor()
                    .prepareModelForJsonMergePatch(this.properties, false);
            }
        }
        if (updatedProperties.contains("assets")) {
            if (this.assets == null) {
                jsonWriter.writeNullField("assets");
            } else {
                jsonWriter.writeMapField("assets", this.assets, (writer, element) -> {
                    if (element != null) {
                        JsonMergePatchHelper.getStacAssetAccessor().prepareModelForJsonMergePatch(element, true);
                        writer.writeJson(element);
                        JsonMergePatchHelper.getStacAssetAccessor().prepareModelForJsonMergePatch(element, false);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("timestamp")) {
            if (this.timestamp == null) {
                jsonWriter.writeNullField("_msft:ts");
            } else {
                jsonWriter.writeStringField("_msft:ts", this.timestamp);
            }
        }
        if (updatedProperties.contains("eTag")) {
            if (this.eTag == null) {
                jsonWriter.writeNullField("_msft:etag");
            } else {
                jsonWriter.writeStringField("_msft:etag", this.eTag);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItem if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacItem.
     */
    @Generated
    public static StacItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StacItem deserializedStacItem = new StacItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stac_version".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrStacItemCollectionAccessor()
                        .setStacVersion(deserializedStacItem, reader.getString());
                } else if ("links".equals(fieldName)) {
                    List<StacLink> links = reader.readArray(reader1 -> StacLink.fromJson(reader1));
                    JsonMergePatchHelper.getStacItemOrStacItemCollectionAccessor()
                        .setLinks(deserializedStacItem, links);
                } else if ("msft:_created".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrStacItemCollectionAccessor()
                        .setCreatedOn(deserializedStacItem, reader.getString());
                } else if ("msft:_updated".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrStacItemCollectionAccessor()
                        .setUpdatedOn(deserializedStacItem, reader.getString());
                } else if ("msft:short_description".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrStacItemCollectionAccessor()
                        .setShortDescription(deserializedStacItem, reader.getString());
                } else if ("stac_extensions".equals(fieldName)) {
                    List<String> stacExtensions = reader.readArray(reader1 -> reader1.getString());
                    JsonMergePatchHelper.getStacItemOrStacItemCollectionAccessor()
                        .setStacExtensions(deserializedStacItem, stacExtensions);
                } else if ("id".equals(fieldName)) {
                    deserializedStacItem.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStacItem.type = StacModelType.fromString(reader.getString());
                } else if ("geometry".equals(fieldName)) {
                    deserializedStacItem.geometry = Geometry.fromJson(reader);
                } else if ("bbox".equals(fieldName)) {
                    List<Double> boundingBox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedStacItem.boundingBox = boundingBox;
                } else if ("collection".equals(fieldName)) {
                    deserializedStacItem.collection = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedStacItem.properties = StacItemProperties.fromJson(reader);
                } else if ("assets".equals(fieldName)) {
                    Map<String, StacAsset> assets = reader.readMap(reader1 -> StacAsset.fromJson(reader1));
                    deserializedStacItem.assets = assets;
                } else if ("_msft:ts".equals(fieldName)) {
                    deserializedStacItem.timestamp = reader.getString();
                } else if ("_msft:etag".equals(fieldName)) {
                    deserializedStacItem.eTag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStacItem;
        });
    }
}
