// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Represents a GeoJSON geometry object as defined by RFC 7946.
 * 
 * Supported geometry types include:
 * - **Point**: A single geographic coordinate.
 * - **LineString**: A sequence of geographic coordinates forming a line.
 * - **Polygon**: A closed shape defined by linear rings.
 * - **MultiPoint**: A collection of Points.
 * - **MultiLineString**: A collection of LineStrings.
 * - **MultiPolygon**: A collection of Polygons.
 * 
 * Used for spatial filtering in STAC.
 */
@Fluent
public class Geometry implements JsonSerializable<Geometry> {
    /*
     * Discriminator property for Geometry.
     */
    @Generated
    private GeometryType type = GeometryType.fromString("Geometry");

    /*
     * Optional bounding box of the geometry.
     */
    @Generated
    private List<Double> boundingBox;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setGeometryAccessor(new JsonMergePatchHelper.GeometryAccessor() {
            @Override
            public Geometry prepareModelForJsonMergePatch(Geometry model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Geometry model) {
                return model.jsonMergePatch;
            }

            @Override
            public void setBoundingBox(Geometry model, List<Double> boundingBox) {
                model.boundingBox = boundingBox;
            }
        });
    }

    /**
     * Creates an instance of Geometry class.
     */
    @Generated
    public Geometry() {
    }

    /**
     * Get the type property: Discriminator property for Geometry.
     * 
     * @return the type value.
     */
    @Generated
    public GeometryType getType() {
        return this.type;
    }

    /**
     * Get the boundingBox property: Optional bounding box of the geometry.
     * 
     * @return the boundingBox value.
     */
    @Generated
    public List<Double> getBoundingBox() {
        return this.boundingBox;
    }

    /**
     * Set the boundingBox property: Optional bounding box of the geometry.
     * 
     * @param boundingBox the boundingBox value to set.
     * @return the Geometry object itself.
     */
    @Generated
    public Geometry setBoundingBox(List<Double> boundingBox) {
        this.boundingBox = boundingBox;
        this.updatedProperties.add("boundingBox");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeArrayField("bbox", this.boundingBox, (writer, element) -> writer.writeDouble(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("boundingBox")) {
            if (this.boundingBox == null) {
                jsonWriter.writeNullField("bbox");
            } else {
                jsonWriter.writeArrayField("bbox", this.boundingBox, (writer, element) -> writer.writeDouble(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Geometry from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Geometry if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Geometry.
     */
    @Generated
    public static Geometry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Point".equals(discriminatorValue)) {
                    return Point.fromJson(readerToUse.reset());
                } else if ("Polygon".equals(discriminatorValue)) {
                    return Polygon.fromJson(readerToUse.reset());
                } else if ("MultiPolygon".equals(discriminatorValue)) {
                    return MultiPolygon.fromJson(readerToUse.reset());
                } else if ("MultiLineString".equals(discriminatorValue)) {
                    return MultiLineString.fromJson(readerToUse.reset());
                } else if ("LineString".equals(discriminatorValue)) {
                    return LineString.fromJson(readerToUse.reset());
                } else if ("MultiPoint".equals(discriminatorValue)) {
                    return MultiPoint.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static Geometry fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Geometry deserializedGeometry = new Geometry();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedGeometry.type = GeometryType.fromString(reader.getString());
                } else if ("bbox".equals(fieldName)) {
                    List<Double> boundingBox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedGeometry.boundingBox = boundingBox;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeometry;
        });
    }
}
