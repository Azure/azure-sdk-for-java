// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import com.azure.planetarycomputer.PlanetaryComputerServiceVersion;
import com.azure.planetarycomputer.models.Operation;
import java.time.Duration;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in IngestionClients.
 */
public final class IngestionClientsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final IngestionClientsService service;

    /**
     * The service client containing this operation class.
     */
    private final PlanetaryComputerClientImpl client;

    /**
     * Initializes an instance of IngestionClientsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    IngestionClientsImpl(PlanetaryComputerClientImpl client) {
        this.service
            = RestProxy.create(IngestionClientsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PlanetaryComputerServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for PlanetaryComputerClientIngestionClients to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PlanetaryComputerClientIngestionClients")
    public interface IngestionClientsService {
        @Delete("/inma/operations/{operationId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> cancelIngestionOperation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            RequestOptions requestOptions, Context context);

        @Delete("/inma/operations/{operationId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> cancelIngestionOperationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            RequestOptions requestOptions, Context context);

        @Delete("/inma/operations")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> cancelAllIngestionOperations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, RequestOptions requestOptions, Context context);

        @Delete("/inma/operations")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> cancelAllIngestionOperationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, RequestOptions requestOptions, Context context);

        @Get("/inma/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestionOperation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/inma/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionOperationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/inma/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listIngestionOperations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listIngestionOperationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/inma/collections/{collectionId}/ingestions/{ingestionId}/runs")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createIngestionRun(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/inma/collections/{collectionId}/ingestions/{ingestionId}/runs")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createIngestionRunSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/collections/{collectionId}/ingestions/{ingestionId}/runs/{runId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestionRun(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @PathParam("runId") String runId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/inma/collections/{collectionId}/ingestions/{ingestionId}/runs/{runId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionRunSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @PathParam("runId") String runId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/inma/collections/{collectionId}/ingestions/{ingestionId}/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listIngestionRuns(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/collections/{collectionId}/ingestions/{ingestionId}/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listIngestionRunsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/inma/collections/{collectionId}/ingestions")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createIngestion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData definition, RequestOptions requestOptions, Context context);

        @Post("/inma/collections/{collectionId}/ingestions")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createIngestionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData definition, RequestOptions requestOptions, Context context);

        @Delete("/inma/collections/{collectionId}/ingestions/{ingestionId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteIngestion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/inma/collections/{collectionId}/ingestions/{ingestionId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteIngestionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/collections/{collectionId}/ingestions/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/collections/{collectionId}/ingestions/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/collections/{collectionId}/ingestions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listIngestions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/inma/collections/{collectionId}/ingestions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listIngestionsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/inma/collections/{collectionId}/ingestions/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateIngestion(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @QueryParam("api-version") String apiVersion,
            @PathParam("collectionId") String collectionId, @PathParam("ingestionId") String ingestionId,
            @HeaderParam("Accept") String accept, @BodyParam("application/merge-patch+json") BinaryData definition,
            RequestOptions requestOptions, Context context);

        @Patch("/inma/collections/{collectionId}/ingestions/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateIngestionSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @QueryParam("api-version") String apiVersion,
            @PathParam("collectionId") String collectionId, @PathParam("ingestionId") String ingestionId,
            @HeaderParam("Accept") String accept, @BodyParam("application/merge-patch+json") BinaryData definition,
            RequestOptions requestOptions, Context context);

        @Post("/inma/ingestion-sources")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createIngestionSource(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData ingestionSource,
            RequestOptions requestOptions, Context context);

        @Post("/inma/ingestion-sources")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createIngestionSourceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData ingestionSource,
            RequestOptions requestOptions, Context context);

        @Put("/inma/ingestion-sources/{id}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplaceIngestionSource(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData ingestionSource, RequestOptions requestOptions, Context context);

        @Put("/inma/ingestion-sources/{id}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceIngestionSourceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData ingestionSource, RequestOptions requestOptions, Context context);

        @Delete("/inma/ingestion-sources/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteIngestionSource(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id, RequestOptions requestOptions,
            Context context);

        @Delete("/inma/ingestion-sources/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteIngestionSourceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id, RequestOptions requestOptions,
            Context context);

        @Get("/inma/ingestion-sources/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestionSource(@HostParam("endpoint") String endpoint,
            @PathParam("id") String id, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/inma/ingestion-sources/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionSourceSync(@HostParam("endpoint") String endpoint, @PathParam("id") String id,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/ingestion-sources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listIngestionSources(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/ingestion-sources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listIngestionSourcesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/ingestion-sources/managed-identities")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listManagedIdentities(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/inma/ingestion-sources/managed-identities")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listManagedIdentitiesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelIngestionOperationWithResponseAsync(String operationId,
        RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.cancelIngestionOperation(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), operationId, requestOptions, context));
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelIngestionOperationWithResponse(String operationId, RequestOptions requestOptions) {
        return service.cancelIngestionOperationSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), operationId, requestOptions, Context.NONE);
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelAllIngestionOperationsWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.cancelAllIngestionOperations(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), requestOptions, context));
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelAllIngestionOperationsWithResponse(RequestOptions requestOptions) {
        return service.cancelAllIngestionOperationsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), requestOptions, Context.NONE);
    }

    /**
     * Get an operation of a geo-catalog collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation of a geo-catalog collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionOperationWithResponseAsync(String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestionOperation(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), operationId, accept, requestOptions, context));
    }

    /**
     * Get an operation of a geo-catalog collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation of a geo-catalog collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionOperationWithResponse(String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionOperationSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), operationId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get operations of a geo-catalog collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>Operation id used to filter the results</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>Operation status used to filter the results. Allowed values:
     * "Pending", "Running", "Succeeded", "Canceled", "Canceling", "Failed".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             type: String (Required)
     *             creationTime: OffsetDateTime (Required)
     *             collectionId: String (Optional)
     *             statusHistory (Required): [
     *                  (Required){
     *                     timestamp: OffsetDateTime (Required)
     *                     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                 }
     *             ]
     *             startTime: OffsetDateTime (Optional)
     *             finishTime: OffsetDateTime (Optional)
     *             additionalInformation (Optional): {
     *                 String: String (Required)
     *             }
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operations of a geo-catalog collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listIngestionOperationsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listIngestionOperations(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get operations of a geo-catalog collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>Operation id used to filter the results</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>Operation status used to filter the results. Allowed values:
     * "Pending", "Running", "Succeeded", "Canceled", "Canceling", "Failed".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             type: String (Required)
     *             creationTime: OffsetDateTime (Required)
     *             collectionId: String (Optional)
     *             statusHistory (Required): [
     *                  (Required){
     *                     timestamp: OffsetDateTime (Required)
     *                     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                 }
     *             ]
     *             startTime: OffsetDateTime (Optional)
     *             finishTime: OffsetDateTime (Optional)
     *             additionalInformation (Optional): {
     *                 String: String (Required)
     *             }
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operations of a geo-catalog collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listIngestionOperationsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listIngestionOperationsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * Create a new run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion run along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionRunWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createIngestionRun(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Create a new run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createIngestionRunWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createIngestionRunSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get a run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a run of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionRunWithResponseAsync(String collectionId, String ingestionId,
        String runId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getIngestionRun(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, ingestionId, runId, accept, requestOptions, context));
    }

    /**
     * Get a run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a run of an ingestion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionRunWithResponse(String collectionId, String ingestionId, String runId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionRunSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, ingestionId, runId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the runs of an ingestion.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             parentRunId: String (Optional)
     *             operation (Required): {
     *                 id: String (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 creationTime: OffsetDateTime (Required)
     *                 statusHistory (Required): [
     *                      (Required){
     *                         timestamp: OffsetDateTime (Required)
     *                         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                         errorCode: String (Optional)
     *                         errorMessage: String (Optional)
     *                     }
     *                 ]
     *                 startTime: OffsetDateTime (Optional)
     *                 finishTime: OffsetDateTime (Optional)
     *                 totalItems: int (Required)
     *                 totalPendingItems: int (Required)
     *                 totalSuccessfulItems: int (Required)
     *                 totalFailedItems: int (Required)
     *             }
     *             creationTime: OffsetDateTime (Required)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the runs of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listIngestionRunsWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listIngestionRuns(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Get the runs of an ingestion.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             parentRunId: String (Optional)
     *             operation (Required): {
     *                 id: String (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 creationTime: OffsetDateTime (Required)
     *                 statusHistory (Required): [
     *                      (Required){
     *                         timestamp: OffsetDateTime (Required)
     *                         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                         errorCode: String (Optional)
     *                         errorMessage: String (Optional)
     *                     }
     *                 ]
     *                 startTime: OffsetDateTime (Optional)
     *                 finishTime: OffsetDateTime (Optional)
     *                 totalItems: int (Required)
     *                 totalPendingItems: int (Required)
     *                 totalSuccessfulItems: int (Required)
     *                 totalFailedItems: int (Required)
     *             }
     *             creationTime: OffsetDateTime (Required)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the runs of an ingestion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listIngestionRunsWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listIngestionRunsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Create a new ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param definition Definition of the ingestion.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionWithResponseAsync(String collectionId, BinaryData definition,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createIngestion(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, contentType, accept, definition, requestOptions, context));
    }

    /**
     * Create a new ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param definition Definition of the ingestion.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createIngestionWithResponse(String collectionId, BinaryData definition,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createIngestionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, contentType, accept, definition, requestOptions, Context.NONE);
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog operation along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> deleteIngestionWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteIngestion(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteIngestionWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteIngestionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginDeleteIngestionWithModelAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteIngestionWithResponseAsync(collectionId, ingestionId, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginDeleteIngestionWithModel(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteIngestionWithResponse(collectionId, ingestionId, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteIngestionAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteIngestionWithResponseAsync(collectionId, ingestionId, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteIngestion(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteIngestionWithResponse(collectionId, ingestionId, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Get the definition of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definition of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestion(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Get the definition of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definition of an ingestion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get ingestions of a catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             importType: String(StaticCatalog) (Optional, Required on create)
     *             displayName: String (Optional)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *             creationTime: OffsetDateTime (Required)
     *             status: String(Ready/Deleting) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestions of a catalog along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listIngestionsWithResponseAsync(String collectionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listIngestions(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get ingestions of a catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             importType: String(StaticCatalog) (Optional, Required on create)
     *             displayName: String (Optional)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *             creationTime: OffsetDateTime (Required)
     *             status: String(Ready/Deleting) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestions of a catalog along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listIngestionsWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listIngestionsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Update an existing ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param definition Ingestion properties to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateIngestionWithResponseAsync(String collectionId, String ingestionId,
        BinaryData definition, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateIngestion(this.client.getEndpoint(), contentType,
            this.client.getServiceVersion().getVersion(), collectionId, ingestionId, accept, definition, requestOptions,
            context));
    }

    /**
     * Update an existing ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param definition Ingestion properties to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateIngestionWithResponse(String collectionId, String ingestionId,
        BinaryData definition, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.updateIngestionSync(this.client.getEndpoint(), contentType,
            this.client.getServiceVersion().getVersion(), collectionId, ingestionId, accept, definition, requestOptions,
            Context.NONE);
    }

    /**
     * Create a new ingestion source in a geo-catalog.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param ingestionSource Definition of the ingestion source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion Source along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionSourceWithResponseAsync(BinaryData ingestionSource,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createIngestionSource(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, ingestionSource, requestOptions,
            context));
    }

    /**
     * Create a new ingestion source in a geo-catalog.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param ingestionSource Definition of the ingestion source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion Source along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createIngestionSourceWithResponse(BinaryData ingestionSource,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createIngestionSourceSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, ingestionSource, requestOptions,
            Context.NONE);
    }

    /**
     * Update an existing ingestion source in a geo-catalog.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param id Ingestion source id.
     * @param ingestionSource Definition of the ingestion source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion Source along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceIngestionSourceWithResponseAsync(String id,
        BinaryData ingestionSource, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createOrReplaceIngestionSource(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), id, contentType, accept, ingestionSource, requestOptions,
            context));
    }

    /**
     * Update an existing ingestion source in a geo-catalog.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param id Ingestion source id.
     * @param ingestionSource Definition of the ingestion source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion Source along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceIngestionSourceWithResponse(String id, BinaryData ingestionSource,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrReplaceIngestionSourceSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), id, contentType, accept, ingestionSource, requestOptions,
            Context.NONE);
    }

    /**
     * Delete an ingestion source from a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteIngestionSourceWithResponseAsync(String id, RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.deleteIngestionSource(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), id, requestOptions, context));
    }

    /**
     * Delete an ingestion source from a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteIngestionSourceWithResponse(String id, RequestOptions requestOptions) {
        return service.deleteIngestionSourceSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), id, requestOptions, Context.NONE);
    }

    /**
     * Get an ingestion source in a geo-catalog.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param id Ingestion source id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an ingestion source in a geo-catalog along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionSourceWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestionSource(this.client.getEndpoint(), id,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get an ingestion source in a geo-catalog.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param id Ingestion source id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an ingestion source in a geo-catalog along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionSourceWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionSourceSync(this.client.getEndpoint(), id,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * Get ingestion sources in a geo-catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             kind: String(SasToken/BlobManagedIdentity) (Required)
     *             created: OffsetDateTime (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion sources in a geo-catalog along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listIngestionSourcesWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listIngestionSources(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get ingestion sources in a geo-catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             kind: String(SasToken/BlobManagedIdentity) (Required)
     *             created: OffsetDateTime (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion sources in a geo-catalog along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listIngestionSourcesWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listIngestionSourcesSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get all managed identities with access to storage accounts configured for a geo-catalog.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             objectId: String (Required)
     *             resourceId: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all managed identities with access to storage accounts configured for a geo-catalog along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listManagedIdentitiesWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listManagedIdentities(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get all managed identities with access to storage accounts configured for a geo-catalog.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             objectId: String (Required)
     *             resourceId: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all managed identities with access to storage accounts configured for a geo-catalog along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listManagedIdentitiesWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listManagedIdentitiesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }
}
