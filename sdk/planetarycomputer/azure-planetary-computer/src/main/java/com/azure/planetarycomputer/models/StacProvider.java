// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#provider-object
 * 
 * Represents information about a data provider for STAC collections and items.
 */
@Fluent
public final class StacProvider implements JsonSerializable<StacProvider> {
    /*
     * Name of the provider organization or individual.
     */
    @Generated
    private String name;

    /*
     * Description of the provider.
     */
    @Generated
    private String description;

    /*
     * Roles played by the provider (e.g., producer, processor, host).
     */
    @Generated
    private List<String> roles;

    /*
     * URL to the provider's website.
     */
    @Generated
    private String url;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setStacProviderAccessor(new JsonMergePatchHelper.StacProviderAccessor() {
            @Override
            public StacProvider prepareModelForJsonMergePatch(StacProvider model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(StacProvider model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of StacProvider class.
     */
    @Generated
    public StacProvider() {
    }

    /**
     * Get the name property: Name of the provider organization or individual.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the provider organization or individual.
     * <p>Required when create the resource.</p>
     * 
     * @param name the name value to set.
     * @return the StacProvider object itself.
     */
    @Generated
    public StacProvider setName(String name) {
        this.name = name;
        this.updatedProperties.add("name");
        return this;
    }

    /**
     * Get the description property: Description of the provider.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Description of the provider.
     * 
     * @param description the description value to set.
     * @return the StacProvider object itself.
     */
    @Generated
    public StacProvider setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the roles property: Roles played by the provider (e.g., producer, processor, host).
     * 
     * @return the roles value.
     */
    @Generated
    public List<String> getRoles() {
        return this.roles;
    }

    /**
     * Set the roles property: Roles played by the provider (e.g., producer, processor, host).
     * 
     * @param roles the roles value to set.
     * @return the StacProvider object itself.
     */
    @Generated
    public StacProvider setRoles(List<String> roles) {
        this.roles = roles;
        this.updatedProperties.add("roles");
        return this;
    }

    /**
     * Get the url property: URL to the provider's website.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Set the url property: URL to the provider's website.
     * 
     * @param url the url value to set.
     * @return the StacProvider object itself.
     */
    @Generated
    public StacProvider setUrl(String url) {
        this.url = url;
        this.updatedProperties.add("url");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("name", this.name);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("url", this.url);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("name")) {
            if (this.name == null) {
                jsonWriter.writeNullField("name");
            } else {
                jsonWriter.writeStringField("name", this.name);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("roles")) {
            if (this.roles == null) {
                jsonWriter.writeNullField("roles");
            } else {
                jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeString(element));
            }
        }
        if (updatedProperties.contains("url")) {
            if (this.url == null) {
                jsonWriter.writeNullField("url");
            } else {
                jsonWriter.writeStringField("url", this.url);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacProvider from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacProvider if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StacProvider.
     */
    @Generated
    public static StacProvider fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StacProvider deserializedStacProvider = new StacProvider();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStacProvider.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedStacProvider.description = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    List<String> roles = reader.readArray(reader1 -> reader1.getString());
                    deserializedStacProvider.roles = roles;
                } else if ("url".equals(fieldName)) {
                    deserializedStacProvider.url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStacProvider;
        });
    }
}
