// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.planetarycomputer.implementation.IngestionClientsImpl;
import com.azure.planetarycomputer.models.Ingestion;
import com.azure.planetarycomputer.models.IngestionRun;
import com.azure.planetarycomputer.models.IngestionSource;
import com.azure.planetarycomputer.models.Operation;
import com.azure.planetarycomputer.models.OperationStatus;
import com.azure.planetarycomputer.models.PageIngestion;
import com.azure.planetarycomputer.models.PageIngestionRun;
import com.azure.planetarycomputer.models.PageIngestionSourceSummary;
import com.azure.planetarycomputer.models.PageManagedIdentityMetadata;
import com.azure.planetarycomputer.models.PageOperation;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous PlanetaryComputerClient type.
 */
@ServiceClient(builder = PlanetaryComputerClientBuilder.class, isAsync = true)
public final class IngestionAsyncClient {
    @Generated
    private final IngestionClientsImpl serviceClient;

    /**
     * Initializes an instance of IngestionAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    IngestionAsyncClient(IngestionClientsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelIngestionOperationWithResponse(String operationId,
        RequestOptions requestOptions) {
        return this.serviceClient.cancelIngestionOperationWithResponseAsync(operationId, requestOptions);
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelAllIngestionOperationsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.cancelAllIngestionOperationsWithResponseAsync(requestOptions);
    }

    /**
     * Get an operation of a geo-catalog collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation of a geo-catalog collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionOperationWithResponse(String operationId,
        RequestOptions requestOptions) {
        return this.serviceClient.getIngestionOperationWithResponseAsync(operationId, requestOptions);
    }

    /**
     * Get operations of a geo-catalog collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>Operation id used to filter the results</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>Operation status used to filter the results. Allowed values:
     * "Pending", "Running", "Succeeded", "Canceled", "Canceling", "Failed".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             type: String (Required)
     *             creationTime: OffsetDateTime (Required)
     *             collectionId: String (Optional)
     *             statusHistory (Required): [
     *                  (Required){
     *                     timestamp: OffsetDateTime (Required)
     *                     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                 }
     *             ]
     *             startTime: OffsetDateTime (Optional)
     *             finishTime: OffsetDateTime (Optional)
     *             additionalInformation (Optional): {
     *                 String: String (Required)
     *             }
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operations of a geo-catalog collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listIngestionOperationsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listIngestionOperationsWithResponseAsync(requestOptions);
    }

    /**
     * Create a new run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion run along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionRunWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return this.serviceClient.createIngestionRunWithResponseAsync(collectionId, ingestionId, requestOptions);
    }

    /**
     * Get a run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a run of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionRunWithResponse(String collectionId, String ingestionId, String runId,
        RequestOptions requestOptions) {
        return this.serviceClient.getIngestionRunWithResponseAsync(collectionId, ingestionId, runId, requestOptions);
    }

    /**
     * Get the runs of an ingestion.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             parentRunId: String (Optional)
     *             operation (Required): {
     *                 id: String (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 creationTime: OffsetDateTime (Required)
     *                 statusHistory (Required): [
     *                      (Required){
     *                         timestamp: OffsetDateTime (Required)
     *                         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                         errorCode: String (Optional)
     *                         errorMessage: String (Optional)
     *                     }
     *                 ]
     *                 startTime: OffsetDateTime (Optional)
     *                 finishTime: OffsetDateTime (Optional)
     *                 totalItems: int (Required)
     *                 totalPendingItems: int (Required)
     *                 totalSuccessfulItems: int (Required)
     *                 totalFailedItems: int (Required)
     *             }
     *             creationTime: OffsetDateTime (Required)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the runs of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listIngestionRunsWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return this.serviceClient.listIngestionRunsWithResponseAsync(collectionId, ingestionId, requestOptions);
    }

    /**
     * Create a new ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param definition Definition of the ingestion.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionWithResponse(String collectionId, BinaryData definition,
        RequestOptions requestOptions) {
        return this.serviceClient.createIngestionWithResponseAsync(collectionId, definition, requestOptions);
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteIngestion(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteIngestionAsync(collectionId, ingestionId, requestOptions);
    }

    /**
     * Get the definition of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definition of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getIngestionWithResponseAsync(collectionId, ingestionId, requestOptions);
    }

    /**
     * Get ingestions of a catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             importType: String(StaticCatalog) (Optional, Required on create)
     *             displayName: String (Optional)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *             creationTime: OffsetDateTime (Required)
     *             status: String(Ready/Deleting) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestions of a catalog along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listIngestionsWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.listIngestionsWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Update an existing ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param definition Ingestion properties to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateIngestionWithResponse(String collectionId, String ingestionId,
        BinaryData definition, RequestOptions requestOptions) {
        return this.serviceClient.updateIngestionWithResponseAsync(collectionId, ingestionId, definition,
            requestOptions);
    }

    /**
     * Create a new ingestion source in a geo-catalog.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param ingestionSource Definition of the ingestion source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion Source along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionSourceWithResponse(BinaryData ingestionSource,
        RequestOptions requestOptions) {
        return this.serviceClient.createIngestionSourceWithResponseAsync(ingestionSource, requestOptions);
    }

    /**
     * Update an existing ingestion source in a geo-catalog.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param id Ingestion source id.
     * @param ingestionSource Definition of the ingestion source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion Source along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceIngestionSourceWithResponse(String id, BinaryData ingestionSource,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceIngestionSourceWithResponseAsync(id, ingestionSource, requestOptions);
    }

    /**
     * Delete an ingestion source from a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteIngestionSourceWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.deleteIngestionSourceWithResponseAsync(id, requestOptions);
    }

    /**
     * Get an ingestion source in a geo-catalog.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param id Ingestion source id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an ingestion source in a geo-catalog along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionSourceWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getIngestionSourceWithResponseAsync(id, requestOptions);
    }

    /**
     * Get ingestion sources in a geo-catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             kind: String(SasToken/BlobManagedIdentity) (Required)
     *             created: OffsetDateTime (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion sources in a geo-catalog along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listIngestionSourcesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listIngestionSourcesWithResponseAsync(requestOptions);
    }

    /**
     * Get all managed identities with access to storage accounts configured for a geo-catalog.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             objectId: String (Required)
     *             resourceId: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all managed identities with access to storage accounts configured for a geo-catalog along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listManagedIdentitiesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listManagedIdentitiesWithResponseAsync(requestOptions);
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelIngestionOperation(String operationId) {
        // Generated convenience method for cancelIngestionOperationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelIngestionOperationWithResponse(operationId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelAllIngestionOperations() {
        // Generated convenience method for cancelAllIngestionOperationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelAllIngestionOperationsWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get an operation of a geo-catalog collection.
     * 
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation of a geo-catalog collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Operation> getIngestionOperation(String operationId) {
        // Generated convenience method for getIngestionOperationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getIngestionOperationWithResponse(operationId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Operation.class));
    }

    /**
     * Get operations of a geo-catalog collection.
     * 
     * @param top The number of items to return.
     * @param skip The number of items to skip.
     * @param collectionId Operation id used to filter the results.
     * @param status Operation status used to filter the results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operations of a geo-catalog collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageOperation> listIngestionOperations(Long top, Long skip, String collectionId,
        OperationStatus status) {
        // Generated convenience method for listIngestionOperationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("$top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("$skip", String.valueOf(skip), false);
        }
        if (collectionId != null) {
            requestOptions.addQueryParam("collectionId", collectionId, false);
        }
        if (status != null) {
            requestOptions.addQueryParam("status", status.toString(), false);
        }
        return listIngestionOperationsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageOperation.class));
    }

    /**
     * Get operations of a geo-catalog collection.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operations of a geo-catalog collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageOperation> listIngestionOperations() {
        // Generated convenience method for listIngestionOperationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listIngestionOperationsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageOperation.class));
    }

    /**
     * Create a new run of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion run on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionRun> createIngestionRun(String collectionId, String ingestionId) {
        // Generated convenience method for createIngestionRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createIngestionRunWithResponse(collectionId, ingestionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionRun.class));
    }

    /**
     * Get a run of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a run of an ingestion on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionRun> getIngestionRun(String collectionId, String ingestionId, String runId) {
        // Generated convenience method for getIngestionRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getIngestionRunWithResponse(collectionId, ingestionId, runId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionRun.class));
    }

    /**
     * Get the runs of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param top The number of items to return.
     * @param skip The number of items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the runs of an ingestion on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageIngestionRun> listIngestionRuns(String collectionId, String ingestionId, Long top, Long skip) {
        // Generated convenience method for listIngestionRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("$top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("$skip", String.valueOf(skip), false);
        }
        return listIngestionRunsWithResponse(collectionId, ingestionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageIngestionRun.class));
    }

    /**
     * Get the runs of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the runs of an ingestion on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageIngestionRun> listIngestionRuns(String collectionId, String ingestionId) {
        // Generated convenience method for listIngestionRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listIngestionRunsWithResponse(collectionId, ingestionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageIngestionRun.class));
    }

    /**
     * Create a new ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param definition Definition of the ingestion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Ingestion> createIngestion(String collectionId, Ingestion definition) {
        // Generated convenience method for createIngestionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createIngestionWithResponse(collectionId, BinaryData.fromObject(definition), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Ingestion.class));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginDeleteIngestion(String collectionId, String ingestionId) {
        // Generated convenience method for beginDeleteIngestionWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteIngestionWithModelAsync(collectionId, ingestionId, requestOptions);
    }

    /**
     * Get the definition of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the definition of an ingestion on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Ingestion> getIngestion(String collectionId, String ingestionId) {
        // Generated convenience method for getIngestionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getIngestionWithResponse(collectionId, ingestionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Ingestion.class));
    }

    /**
     * Get ingestions of a catalog.
     * 
     * @param collectionId Catalog collection id.
     * @param top The number of items to return.
     * @param skip The number of items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestions of a catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageIngestion> listIngestions(String collectionId, Long top, Long skip) {
        // Generated convenience method for listIngestionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("$top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("$skip", String.valueOf(skip), false);
        }
        return listIngestionsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageIngestion.class));
    }

    /**
     * Get ingestions of a catalog.
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestions of a catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageIngestion> listIngestions(String collectionId) {
        // Generated convenience method for listIngestionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listIngestionsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageIngestion.class));
    }

    /**
     * Create a new ingestion source in a geo-catalog.
     * 
     * @param ingestionSource Definition of the ingestion source.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestion Source on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionSource> createIngestionSource(IngestionSource ingestionSource) {
        // Generated convenience method for createIngestionSourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createIngestionSourceWithResponse(BinaryData.fromObject(ingestionSource), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionSource.class));
    }

    /**
     * Update an existing ingestion source in a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @param ingestionSource Definition of the ingestion source.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestion Source on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionSource> createOrReplaceIngestionSource(String id, IngestionSource ingestionSource) {
        // Generated convenience method for createOrReplaceIngestionSourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceIngestionSourceWithResponse(id, BinaryData.fromObject(ingestionSource), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionSource.class));
    }

    /**
     * Delete an ingestion source from a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteIngestionSource(String id) {
        // Generated convenience method for deleteIngestionSourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteIngestionSourceWithResponse(id, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get an ingestion source in a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an ingestion source in a geo-catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionSource> getIngestionSource(String id) {
        // Generated convenience method for getIngestionSourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getIngestionSourceWithResponse(id, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionSource.class));
    }

    /**
     * Get ingestion sources in a geo-catalog.
     * 
     * @param top The number of items to return.
     * @param skip The number of items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestion sources in a geo-catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageIngestionSourceSummary> listIngestionSources(Long top, Long skip) {
        // Generated convenience method for listIngestionSourcesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("$top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("$skip", String.valueOf(skip), false);
        }
        return listIngestionSourcesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageIngestionSourceSummary.class));
    }

    /**
     * Get ingestion sources in a geo-catalog.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestion sources in a geo-catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageIngestionSourceSummary> listIngestionSources() {
        // Generated convenience method for listIngestionSourcesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listIngestionSourcesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageIngestionSourceSummary.class));
    }

    /**
     * Get all managed identities with access to storage accounts configured for a geo-catalog.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed identities with access to storage accounts configured for a geo-catalog on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PageManagedIdentityMetadata> listManagedIdentities() {
        // Generated convenience method for listManagedIdentitiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listManagedIdentitiesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PageManagedIdentityMetadata.class));
    }
}
