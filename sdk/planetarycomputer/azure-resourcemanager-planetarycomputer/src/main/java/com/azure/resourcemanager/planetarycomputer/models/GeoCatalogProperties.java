// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The details of the Microsoft Planetary Computer Pro GeoCatalog.
 */
@Fluent
public final class GeoCatalogProperties implements JsonSerializable<GeoCatalogProperties> {
    /*
     * Tier of the catalog. This cannot be changed after the catalog is created. If not provided, defaults to Basic.
     */
    private CatalogTier tier;

    /*
     * The URI of the catalog management UI.
     */
    private String catalogUri;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * The scope of the auto-generated domain name label. If not provided, defaults to TenantReuse.
     */
    private AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope;

    /**
     * Creates an instance of GeoCatalogProperties class.
     */
    public GeoCatalogProperties() {
    }

    /**
     * Get the tier property: Tier of the catalog. This cannot be changed after the catalog is created. If not provided,
     * defaults to Basic.
     * 
     * @return the tier value.
     */
    public CatalogTier tier() {
        return this.tier;
    }

    /**
     * Set the tier property: Tier of the catalog. This cannot be changed after the catalog is created. If not provided,
     * defaults to Basic.
     * 
     * @param tier the tier value to set.
     * @return the GeoCatalogProperties object itself.
     */
    public GeoCatalogProperties withTier(CatalogTier tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the catalogUri property: The URI of the catalog management UI.
     * 
     * @return the catalogUri value.
     */
    public String catalogUri() {
        return this.catalogUri;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the autoGeneratedDomainNameLabelScope property: The scope of the auto-generated domain name label. If not
     * provided, defaults to TenantReuse.
     * 
     * @return the autoGeneratedDomainNameLabelScope value.
     */
    public AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope() {
        return this.autoGeneratedDomainNameLabelScope;
    }

    /**
     * Set the autoGeneratedDomainNameLabelScope property: The scope of the auto-generated domain name label. If not
     * provided, defaults to TenantReuse.
     * 
     * @param autoGeneratedDomainNameLabelScope the autoGeneratedDomainNameLabelScope value to set.
     * @return the GeoCatalogProperties object itself.
     */
    public GeoCatalogProperties
        withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope) {
        this.autoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tier", this.tier == null ? null : this.tier.toString());
        jsonWriter.writeStringField("autoGeneratedDomainNameLabelScope",
            this.autoGeneratedDomainNameLabelScope == null ? null : this.autoGeneratedDomainNameLabelScope.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoCatalogProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoCatalogProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeoCatalogProperties.
     */
    public static GeoCatalogProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoCatalogProperties deserializedGeoCatalogProperties = new GeoCatalogProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tier".equals(fieldName)) {
                    deserializedGeoCatalogProperties.tier = CatalogTier.fromString(reader.getString());
                } else if ("catalogUri".equals(fieldName)) {
                    deserializedGeoCatalogProperties.catalogUri = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedGeoCatalogProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("autoGeneratedDomainNameLabelScope".equals(fieldName)) {
                    deserializedGeoCatalogProperties.autoGeneratedDomainNameLabelScope
                        = AutoGeneratedDomainNameLabelScope.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeoCatalogProperties;
        });
    }
}
