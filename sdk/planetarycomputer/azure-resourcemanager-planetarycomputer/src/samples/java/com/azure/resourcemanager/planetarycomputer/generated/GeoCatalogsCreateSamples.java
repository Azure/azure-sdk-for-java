// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.planetarycomputer.generated;

import com.azure.resourcemanager.planetarycomputer.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.planetarycomputer.models.CatalogTier;
import com.azure.resourcemanager.planetarycomputer.models.GeoCatalogProperties;
import com.azure.resourcemanager.planetarycomputer.models.ManagedServiceIdentity;
import com.azure.resourcemanager.planetarycomputer.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.planetarycomputer.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for GeoCatalogs Create.
 */
public final class GeoCatalogsCreateSamples {
    /*
     * x-ms-original-file: 2025-02-11-preview/GeoCatalogs_Create.json
     */
    /**
     * Sample code: GeoCatalogs_Create.
     * 
     * @param manager Entry point to PlanetaryComputerManager.
     */
    public static void geoCatalogsCreate(com.azure.resourcemanager.planetarycomputer.PlanetaryComputerManager manager) {
        manager.geoCatalogs()
            .define("MyCatalog")
            .withRegion("eastus")
            .withExistingResourceGroup("MyResourceGroup")
            .withTags(mapOf("MyTag", "MyValue"))
            .withProperties(new GeoCatalogProperties().withTier(CatalogTier.BASIC)
                .withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope.NO_REUSE))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/cd9b6cdf-dcf0-4dca-ab19-82be07b74704/resourceGroups/MyResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/MyManagedIdentity",
                    new UserAssignedIdentity())))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
