// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.planetarycomputer.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.planetarycomputer.PlanetaryComputerManager;
import com.azure.resourcemanager.planetarycomputer.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.planetarycomputer.models.CatalogTier;
import com.azure.resourcemanager.planetarycomputer.models.GeoCatalog;
import com.azure.resourcemanager.planetarycomputer.models.ManagedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GeoCatalogsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"tier\":\"Basic\",\"catalogUri\":\"crmnohjtckwhds\",\"provisioningState\":\"Canceled\",\"autoGeneratedDomainNameLabelScope\":\"NoReuse\"},\"identity\":{\"principalId\":\"jxsqwpgrjbz\",\"tenantId\":\"rcjxvsnbyxqabn\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"jjgpb\":{\"principalId\":\"ysh\",\"clientId\":\"zafb\"},\"ulpkudjkrl\":{\"principalId\":\"qcjm\",\"clientId\":\"javbqidtqajz\"}}},\"location\":\"bzhfepgzgqexz\",\"tags\":{\"glu\":\"xscpaierhhbc\"},\"id\":\"majtjaod\",\"name\":\"obnbdxkqpxokaj\",\"type\":\"onpimexgstxg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PlanetaryComputerManager manager = PlanetaryComputerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<GeoCatalog> response
            = manager.geoCatalogs().listByResourceGroup("swjdkirso", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bzhfepgzgqexz", response.iterator().next().location());
        Assertions.assertEquals("xscpaierhhbc", response.iterator().next().tags().get("glu"));
        Assertions.assertEquals(CatalogTier.BASIC, response.iterator().next().properties().tier());
        Assertions.assertEquals(AutoGeneratedDomainNameLabelScope.NO_REUSE,
            response.iterator().next().properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
