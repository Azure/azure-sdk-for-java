// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.planetarycomputer.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.planetarycomputer.PlanetaryComputerManager;
import com.azure.resourcemanager.planetarycomputer.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.planetarycomputer.models.CatalogTier;
import com.azure.resourcemanager.planetarycomputer.models.GeoCatalog;
import com.azure.resourcemanager.planetarycomputer.models.ManagedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GeoCatalogsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"tier\":\"Basic\",\"catalogUri\":\"maajrmvdjwzrlo\",\"provisioningState\":\"Deleting\",\"autoGeneratedDomainNameLabelScope\":\"ResourceGroupReuse\"},\"identity\":{\"principalId\":\"j\",\"tenantId\":\"ejctbzaqsqsycb\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"o\":{\"principalId\":\"ukdkexxppofmxa\",\"clientId\":\"fjpgddtocjjxhvp\"}}},\"location\":\"xhdzxibqeojnx\",\"tags\":{\"eic\":\"vddntwn\",\"cyddglmjthjqk\":\"twnpzaoqvuhrhcf\",\"ciwqvhk\":\"pyeicxm\",\"ghmewuam\":\"ixuigdtopbobj\"},\"id\":\"uhrzayvvt\",\"name\":\"gvdfgiotkftutq\",\"type\":\"ln\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PlanetaryComputerManager manager = PlanetaryComputerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<GeoCatalog> response = manager.geoCatalogs().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("xhdzxibqeojnx", response.iterator().next().location());
        Assertions.assertEquals("vddntwn", response.iterator().next().tags().get("eic"));
        Assertions.assertEquals(CatalogTier.BASIC, response.iterator().next().properties().tier());
        Assertions.assertEquals(AutoGeneratedDomainNameLabelScope.RESOURCE_GROUP_REUSE,
            response.iterator().next().properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
