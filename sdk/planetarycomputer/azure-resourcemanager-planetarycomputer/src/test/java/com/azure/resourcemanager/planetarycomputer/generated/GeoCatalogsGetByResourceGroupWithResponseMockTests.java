// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.planetarycomputer.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.planetarycomputer.PlanetaryComputerManager;
import com.azure.resourcemanager.planetarycomputer.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.planetarycomputer.models.CatalogTier;
import com.azure.resourcemanager.planetarycomputer.models.GeoCatalog;
import com.azure.resourcemanager.planetarycomputer.models.ManagedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GeoCatalogsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"tier\":\"Basic\",\"catalogUri\":\"uhmuouqfprwzwbn\",\"provisioningState\":\"Canceled\",\"autoGeneratedDomainNameLabelScope\":\"NoReuse\"},\"identity\":{\"principalId\":\"izgazxu\",\"tenantId\":\"zuckyfi\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"opvkmijcm\":{\"principalId\":\"fvzwdzuhty\",\"clientId\":\"isdkfthwxmnteiw\"}}},\"location\":\"dcuf\",\"tags\":{\"xtbzsgfyccsne\":\"rpymzidnsez\"},\"id\":\"mdwzjeiachboo\",\"name\":\"flnrosfqpteehzz\",\"type\":\"ypyqrimzinp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PlanetaryComputerManager manager = PlanetaryComputerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        GeoCatalog response = manager.geoCatalogs()
            .getByResourceGroupWithResponse("vpys", "zdn", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dcuf", response.location());
        Assertions.assertEquals("rpymzidnsez", response.tags().get("xtbzsgfyccsne"));
        Assertions.assertEquals(CatalogTier.BASIC, response.properties().tier());
        Assertions.assertEquals(AutoGeneratedDomainNameLabelScope.NO_REUSE,
            response.properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }
}
