// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.planetarycomputer.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.planetarycomputer.PlanetaryComputerManager;
import com.azure.resourcemanager.planetarycomputer.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.planetarycomputer.models.CatalogTier;
import com.azure.resourcemanager.planetarycomputer.models.GeoCatalog;
import com.azure.resourcemanager.planetarycomputer.models.GeoCatalogProperties;
import com.azure.resourcemanager.planetarycomputer.models.ManagedServiceIdentity;
import com.azure.resourcemanager.planetarycomputer.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.planetarycomputer.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GeoCatalogsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"tier\":\"Basic\",\"catalogUri\":\"gnzscxaqwo\",\"provisioningState\":\"Succeeded\",\"autoGeneratedDomainNameLabelScope\":\"ResourceGroupReuse\"},\"identity\":{\"principalId\":\"qvpkvlrxnjeaseip\",\"tenantId\":\"oflokey\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"xhejjzzvdud\":{\"principalId\":\"bdlwtgrhpdjpj\",\"clientId\":\"asxazjpqyegualhb\"}}},\"location\":\"dslfhotwmcy\",\"tags\":{\"ltyfsop\":\"lbjnpgacftadehx\",\"nzwdejba\":\"usue\",\"xdn\":\"orxzdmohctbqvud\",\"wdkcglhsl\":\"nvowgujju\"},\"id\":\"zj\",\"name\":\"yggdtjixh\",\"type\":\"kuofqweykhme\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PlanetaryComputerManager manager = PlanetaryComputerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        GeoCatalog response = manager.geoCatalogs()
            .define("qmi")
            .withRegion("pmivkwlzu")
            .withExistingResourceGroup("xlefgugnxkrx")
            .withTags(mapOf("cfionl", "fwnfnb"))
            .withProperties(new GeoCatalogProperties().withTier(CatalogTier.BASIC)
                .withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope.NO_REUSE))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("lzevgbmqjqab", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("dslfhotwmcy", response.location());
        Assertions.assertEquals("lbjnpgacftadehx", response.tags().get("ltyfsop"));
        Assertions.assertEquals(CatalogTier.BASIC, response.properties().tier());
        Assertions.assertEquals(AutoGeneratedDomainNameLabelScope.RESOURCE_GROUP_REUSE,
            response.properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
