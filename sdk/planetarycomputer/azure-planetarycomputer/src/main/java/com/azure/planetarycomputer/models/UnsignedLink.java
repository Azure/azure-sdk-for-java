// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * UnsignedLink
 * 
 * Represents a link that has not been signed with a SAS token.
 * The expiry field will be null for unsigned links.
 */
@Immutable
public final class UnsignedLink implements JsonSerializable<UnsignedLink> {
    /*
     * Msft:Expiry
     * 
     * The expiry date of the signed link. This indicates when the link will no longer be valid.
     */
    @Generated
    private OffsetDateTime msftExpiry;

    /*
     * Href
     * 
     * The URL of the unsigned link.
     */
    @Generated
    private final String href;

    /**
     * Creates an instance of UnsignedLink class.
     * 
     * @param href the href value to set.
     */
    @Generated
    private UnsignedLink(String href) {
        this.href = href;
    }

    /**
     * Get the msftExpiry property: Msft:Expiry
     * 
     * The expiry date of the signed link. This indicates when the link will no longer be valid.
     * 
     * @return the msftExpiry value.
     */
    @Generated
    public OffsetDateTime getMsftExpiry() {
        return this.msftExpiry;
    }

    /**
     * Get the href property: Href
     * 
     * The URL of the unsigned link.
     * 
     * @return the href value.
     */
    @Generated
    public String getHref() {
        return this.href;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("href", this.href);
        jsonWriter.writeStringField("msft:expiry",
            this.msftExpiry == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.msftExpiry));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UnsignedLink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UnsignedLink if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UnsignedLink.
     */
    @Generated
    public static UnsignedLink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String href = null;
            OffsetDateTime msftExpiry = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("href".equals(fieldName)) {
                    href = reader.getString();
                } else if ("msft:expiry".equals(fieldName)) {
                    msftExpiry = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            UnsignedLink deserializedUnsignedLink = new UnsignedLink(href);
            deserializedUnsignedLink.msftExpiry = msftExpiry;

            return deserializedUnsignedLink;
        });
    }
}
