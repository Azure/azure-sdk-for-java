// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
 * 
 * Represents the STAC API landing page with links to available resources.
 */
@Immutable
public final class LandingPage implements JsonSerializable<LandingPage> {
    /*
     * MSFT Created
     */
    @Generated
    private String msftCreated;

    /*
     * MSFT Updated
     */
    @Generated
    private String msftUpdated;

    /*
     * MSFT Short Description
     */
    @Generated
    private String msftShortDescription;

    /*
     * URLs to STAC extensions implemented by this STAC resource.
     */
    @Generated
    private List<String> stacExtensions;

    /*
     * Unique identifier for the STAC catalog.
     */
    @Generated
    private final String id;

    /*
     * Detailed description of the STAC catalog.
     */
    @Generated
    private final String description;

    /*
     * Human-readable title for the STAC catalog.
     */
    @Generated
    private String title;

    /*
     * Stac Version
     */
    @Generated
    private String stacVersion;

    /*
     * List of OGC API conformance classes implemented by this API.
     */
    @Generated
    private final List<String> conformsTo;

    /*
     * Links to related resources and endpoints.
     */
    @Generated
    private final List<Link> links;

    /*
     * Type
     */
    @Generated
    private String type;

    /**
     * Creates an instance of LandingPage class.
     * 
     * @param id the id value to set.
     * @param description the description value to set.
     * @param conformsTo the conformsTo value to set.
     * @param links the links value to set.
     */
    @Generated
    private LandingPage(String id, String description, List<String> conformsTo, List<Link> links) {
        this.id = id;
        this.description = description;
        this.conformsTo = conformsTo;
        this.links = links;
    }

    /**
     * Get the msftCreated property: MSFT Created.
     * 
     * @return the msftCreated value.
     */
    @Generated
    public String getMsftCreated() {
        return this.msftCreated;
    }

    /**
     * Get the msftUpdated property: MSFT Updated.
     * 
     * @return the msftUpdated value.
     */
    @Generated
    public String getMsftUpdated() {
        return this.msftUpdated;
    }

    /**
     * Get the msftShortDescription property: MSFT Short Description.
     * 
     * @return the msftShortDescription value.
     */
    @Generated
    public String getMsftShortDescription() {
        return this.msftShortDescription;
    }

    /**
     * Get the stacExtensions property: URLs to STAC extensions implemented by this STAC resource.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Get the id property: Unique identifier for the STAC catalog.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the description property: Detailed description of the STAC catalog.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the title property: Human-readable title for the STAC catalog.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the stacVersion property: Stac Version.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the conformsTo property: List of OGC API conformance classes implemented by this API.
     * 
     * @return the conformsTo value.
     */
    @Generated
    public List<String> getConformsTo() {
        return this.conformsTo;
    }

    /**
     * Get the links property: Links to related resources and endpoints.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Get the type property: Type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("conformsTo", this.conformsTo, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("msft:_created", this.msftCreated);
        jsonWriter.writeStringField("msft:_updated", this.msftUpdated);
        jsonWriter.writeStringField("msft:short_description", this.msftShortDescription);
        jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("stac_version", this.stacVersion);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LandingPage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LandingPage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LandingPage.
     */
    @Generated
    public static LandingPage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String description = null;
            List<String> conformsTo = null;
            List<Link> links = null;
            String msftCreated = null;
            String msftUpdated = null;
            String msftShortDescription = null;
            List<String> stacExtensions = null;
            String title = null;
            String stacVersion = null;
            String type = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("conformsTo".equals(fieldName)) {
                    conformsTo = reader.readArray(reader1 -> reader1.getString());
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link.fromJson(reader1));
                } else if ("msft:_created".equals(fieldName)) {
                    msftCreated = reader.getString();
                } else if ("msft:_updated".equals(fieldName)) {
                    msftUpdated = reader.getString();
                } else if ("msft:short_description".equals(fieldName)) {
                    msftShortDescription = reader.getString();
                } else if ("stac_extensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("stac_version".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            LandingPage deserializedLandingPage = new LandingPage(id, description, conformsTo, links);
            deserializedLandingPage.msftCreated = msftCreated;
            deserializedLandingPage.msftUpdated = msftUpdated;
            deserializedLandingPage.msftShortDescription = msftShortDescription;
            deserializedLandingPage.stacExtensions = stacExtensions;
            deserializedLandingPage.title = title;
            deserializedLandingPage.stacVersion = stacVersion;
            deserializedLandingPage.type = type;

            return deserializedLandingPage;
        });
    }
}
