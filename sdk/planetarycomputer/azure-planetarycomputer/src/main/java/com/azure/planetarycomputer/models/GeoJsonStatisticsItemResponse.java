// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * STAC Item representing a spatiotemporal asset with statistical information.
 */
@Immutable
public final class GeoJsonStatisticsItemResponse implements JsonSerializable<GeoJsonStatisticsItemResponse> {
    /*
     * Geometry object defining the feature's shape
     */
    @Generated
    private final Geometry geometry;

    /*
     * Bounding box coordinates for the feature
     */
    @Generated
    private final List<Double> bbox;

    /*
     * Unique identifier for the feature
     */
    @Generated
    private final String id;

    /*
     * GeoJSON type identifier for Feature
     */
    @Generated
    private final FeatureType type;

    /*
     * MSFT Created
     */
    @Generated
    private String msftCreated;

    /*
     * MSFT Updated
     */
    @Generated
    private String msftUpdated;

    /*
     * MSFT Short Description
     */
    @Generated
    private String msftShortDescription;

    /*
     * Stac Version
     */
    @Generated
    private String stacVersion;

    /*
     * ID of the STAC collection this item belongs to
     */
    @Generated
    private String collection;

    /*
     * Properties
     */
    @Generated
    private final ItemProperties properties;

    /*
     * MSFT Timestamp
     */
    @Generated
    private String msftTimestamp;

    /*
     * MSFT ETag
     */
    @Generated
    private String msftEtag;

    /*
     * List of STAC extension URLs used by this item
     */
    @Generated
    private List<String> stacExtensions;

    /**
     * Creates an instance of GeoJsonStatisticsItemResponse class.
     * 
     * @param geometry the geometry value to set.
     * @param bbox the bbox value to set.
     * @param id the id value to set.
     * @param type the type value to set.
     * @param properties the properties value to set.
     */
    @Generated
    private GeoJsonStatisticsItemResponse(Geometry geometry, List<Double> bbox, String id, FeatureType type,
        ItemProperties properties) {
        this.geometry = geometry;
        this.bbox = bbox;
        this.id = id;
        this.type = type;
        this.properties = properties;
    }

    /**
     * Get the geometry property: Geometry object defining the feature's shape.
     * 
     * @return the geometry value.
     */
    @Generated
    public Geometry getGeometry() {
        return this.geometry;
    }

    /**
     * Get the bbox property: Bounding box coordinates for the feature.
     * 
     * @return the bbox value.
     */
    @Generated
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Get the id property: Unique identifier for the feature.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the type property: GeoJSON type identifier for Feature.
     * 
     * @return the type value.
     */
    @Generated
    public FeatureType getType() {
        return this.type;
    }

    /**
     * Get the msftCreated property: MSFT Created.
     * 
     * @return the msftCreated value.
     */
    @Generated
    public String getMsftCreated() {
        return this.msftCreated;
    }

    /**
     * Get the msftUpdated property: MSFT Updated.
     * 
     * @return the msftUpdated value.
     */
    @Generated
    public String getMsftUpdated() {
        return this.msftUpdated;
    }

    /**
     * Get the msftShortDescription property: MSFT Short Description.
     * 
     * @return the msftShortDescription value.
     */
    @Generated
    public String getMsftShortDescription() {
        return this.msftShortDescription;
    }

    /**
     * Get the stacVersion property: Stac Version.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the collection property: ID of the STAC collection this item belongs to.
     * 
     * @return the collection value.
     */
    @Generated
    public String getCollection() {
        return this.collection;
    }

    /**
     * Get the properties property: Properties.
     * 
     * @return the properties value.
     */
    @Generated
    public ItemProperties getProperties() {
        return this.properties;
    }

    /**
     * Get the msftTimestamp property: MSFT Timestamp.
     * 
     * @return the msftTimestamp value.
     */
    @Generated
    public String getMsftTimestamp() {
        return this.msftTimestamp;
    }

    /**
     * Get the msftEtag property: MSFT ETag.
     * 
     * @return the msftEtag value.
     */
    @Generated
    public String getMsftEtag() {
        return this.msftEtag;
    }

    /**
     * Get the stacExtensions property: List of STAC extension URLs used by this item.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("geometry", this.geometry);
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeStringField("msft:_created", this.msftCreated);
        jsonWriter.writeStringField("msft:_updated", this.msftUpdated);
        jsonWriter.writeStringField("msft:short_description", this.msftShortDescription);
        jsonWriter.writeStringField("stac_version", this.stacVersion);
        jsonWriter.writeStringField("collection", this.collection);
        jsonWriter.writeStringField("_msft:ts", this.msftTimestamp);
        jsonWriter.writeStringField("_msft:etag", this.msftEtag);
        jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoJsonStatisticsItemResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoJsonStatisticsItemResponse if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GeoJsonStatisticsItemResponse.
     */
    @Generated
    public static GeoJsonStatisticsItemResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Geometry geometry = null;
            List<Double> bbox = null;
            String id = null;
            FeatureType type = null;
            ItemProperties properties = null;
            String msftCreated = null;
            String msftUpdated = null;
            String msftShortDescription = null;
            String stacVersion = null;
            String collection = null;
            String msftTimestamp = null;
            String msftEtag = null;
            List<String> stacExtensions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("geometry".equals(fieldName)) {
                    geometry = Geometry.fromJson(reader);
                } else if ("bbox".equals(fieldName)) {
                    bbox = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = FeatureType.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    properties = ItemProperties.fromJson(reader);
                } else if ("msft:_created".equals(fieldName)) {
                    msftCreated = reader.getString();
                } else if ("msft:_updated".equals(fieldName)) {
                    msftUpdated = reader.getString();
                } else if ("msft:short_description".equals(fieldName)) {
                    msftShortDescription = reader.getString();
                } else if ("stac_version".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("collection".equals(fieldName)) {
                    collection = reader.getString();
                } else if ("_msft:ts".equals(fieldName)) {
                    msftTimestamp = reader.getString();
                } else if ("_msft:etag".equals(fieldName)) {
                    msftEtag = reader.getString();
                } else if ("stac_extensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            GeoJsonStatisticsItemResponse deserializedGeoJsonStatisticsItemResponse
                = new GeoJsonStatisticsItemResponse(geometry, bbox, id, type, properties);
            deserializedGeoJsonStatisticsItemResponse.msftCreated = msftCreated;
            deserializedGeoJsonStatisticsItemResponse.msftUpdated = msftUpdated;
            deserializedGeoJsonStatisticsItemResponse.msftShortDescription = msftShortDescription;
            deserializedGeoJsonStatisticsItemResponse.stacVersion = stacVersion;
            deserializedGeoJsonStatisticsItemResponse.collection = collection;
            deserializedGeoJsonStatisticsItemResponse.msftTimestamp = msftTimestamp;
            deserializedGeoJsonStatisticsItemResponse.msftEtag = msftEtag;
            deserializedGeoJsonStatisticsItemResponse.stacExtensions = stacExtensions;

            return deserializedGeoJsonStatisticsItemResponse;
        });
    }
}
