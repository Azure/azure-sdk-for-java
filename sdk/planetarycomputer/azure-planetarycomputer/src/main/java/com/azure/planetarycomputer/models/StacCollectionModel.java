// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
 * 
 * Represents a STAC collection.
 */
@Fluent
public final class StacCollectionModel implements JsonSerializable<StacCollectionModel> {
    /*
     * MSFT Created
     */
    @Generated
    private String msftCreated;

    /*
     * MSFT Updated
     */
    @Generated
    private String msftUpdated;

    /*
     * MSFT Short Description
     */
    @Generated
    private String msftShortDescription;

    /*
     * URLs to STAC extensions implemented by this STAC resource.
     */
    @Generated
    private List<String> stacExtensions;

    /*
     * Unique identifier for the collection.
     */
    @Generated
    private String id;

    /*
     * Detailed description of the collection.
     */
    @Generated
    private final String description;

    /*
     * Stac Version
     */
    @Generated
    private String stacVersion;

    /*
     * Links to related resources and endpoints.
     */
    @Generated
    private final List<Link> links;

    /*
     * Human-readable title for the collection.
     */
    @Generated
    private String title;

    /*
     * Type
     */
    @Generated
    private String type;

    /*
     * Assets
     */
    @Generated
    private Map<String, Asset> assets;

    /*
     * License identifier for the collection data.
     */
    @Generated
    private final String license;

    /*
     * Spatial and temporal extent of the collection.
     */
    @Generated
    private final Extent extent;

    /*
     * Keywords describing the collection.
     */
    @Generated
    private List<String> keywords;

    /*
     * Organizations or individuals who provide the collection data.
     */
    @Generated
    private List<Provider> providers;

    /*
     * Summaries
     * 
     * See the [STAC Collection
     * Spec](https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-
     * object).
     */
    @Generated
    private StacCollectionSummaries summaries;

    /**
     * Creates an instance of StacCollectionModel class.
     * 
     * @param description the description value to set.
     * @param links the links value to set.
     * @param license the license value to set.
     * @param extent the extent value to set.
     */
    @Generated
    public StacCollectionModel(String description, List<Link> links, String license, Extent extent) {
        this.description = description;
        this.links = links;
        this.license = license;
        this.extent = extent;
    }

    /**
     * Get the msftCreated property: MSFT Created.
     * 
     * @return the msftCreated value.
     */
    @Generated
    public String getMsftCreated() {
        return this.msftCreated;
    }

    /**
     * Set the msftCreated property: MSFT Created.
     * 
     * @param msftCreated the msftCreated value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setMsftCreated(String msftCreated) {
        this.msftCreated = msftCreated;
        return this;
    }

    /**
     * Get the msftUpdated property: MSFT Updated.
     * 
     * @return the msftUpdated value.
     */
    @Generated
    public String getMsftUpdated() {
        return this.msftUpdated;
    }

    /**
     * Set the msftUpdated property: MSFT Updated.
     * 
     * @param msftUpdated the msftUpdated value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setMsftUpdated(String msftUpdated) {
        this.msftUpdated = msftUpdated;
        return this;
    }

    /**
     * Get the msftShortDescription property: MSFT Short Description.
     * 
     * @return the msftShortDescription value.
     */
    @Generated
    public String getMsftShortDescription() {
        return this.msftShortDescription;
    }

    /**
     * Set the msftShortDescription property: MSFT Short Description.
     * 
     * @param msftShortDescription the msftShortDescription value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setMsftShortDescription(String msftShortDescription) {
        this.msftShortDescription = msftShortDescription;
        return this;
    }

    /**
     * Get the stacExtensions property: URLs to STAC extensions implemented by this STAC resource.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Set the stacExtensions property: URLs to STAC extensions implemented by this STAC resource.
     * 
     * @param stacExtensions the stacExtensions value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setStacExtensions(List<String> stacExtensions) {
        this.stacExtensions = stacExtensions;
        return this;
    }

    /**
     * Get the id property: Unique identifier for the collection.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the description property: Detailed description of the collection.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the stacVersion property: Stac Version.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Set the stacVersion property: Stac Version.
     * 
     * @param stacVersion the stacVersion value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setStacVersion(String stacVersion) {
        this.stacVersion = stacVersion;
        return this;
    }

    /**
     * Get the links property: Links to related resources and endpoints.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Get the title property: Human-readable title for the collection.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Set the title property: Human-readable title for the collection.
     * 
     * @param title the title value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the type property: Type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Set the type property: Type.
     * 
     * @param type the type value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the assets property: Assets.
     * 
     * @return the assets value.
     */
    @Generated
    public Map<String, Asset> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Assets.
     * 
     * @param assets the assets value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setAssets(Map<String, Asset> assets) {
        this.assets = assets;
        return this;
    }

    /**
     * Get the license property: License identifier for the collection data.
     * 
     * @return the license value.
     */
    @Generated
    public String getLicense() {
        return this.license;
    }

    /**
     * Get the extent property: Spatial and temporal extent of the collection.
     * 
     * @return the extent value.
     */
    @Generated
    public Extent getExtent() {
        return this.extent;
    }

    /**
     * Get the keywords property: Keywords describing the collection.
     * 
     * @return the keywords value.
     */
    @Generated
    public List<String> getKeywords() {
        return this.keywords;
    }

    /**
     * Set the keywords property: Keywords describing the collection.
     * 
     * @param keywords the keywords value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setKeywords(List<String> keywords) {
        this.keywords = keywords;
        return this;
    }

    /**
     * Get the providers property: Organizations or individuals who provide the collection data.
     * 
     * @return the providers value.
     */
    @Generated
    public List<Provider> getProviders() {
        return this.providers;
    }

    /**
     * Set the providers property: Organizations or individuals who provide the collection data.
     * 
     * @param providers the providers value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setProviders(List<Provider> providers) {
        this.providers = providers;
        return this;
    }

    /**
     * Get the summaries property: Summaries
     * 
     * See the [STAC Collection
     * Spec](https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-object).
     * 
     * @return the summaries value.
     */
    @Generated
    public StacCollectionSummaries getSummaries() {
        return this.summaries;
    }

    /**
     * Set the summaries property: Summaries
     * 
     * See the [STAC Collection
     * Spec](https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-object).
     * 
     * @param summaries the summaries value to set.
     * @return the StacCollectionModel object itself.
     */
    @Generated
    public StacCollectionModel setSummaries(StacCollectionSummaries summaries) {
        this.summaries = summaries;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("license", this.license);
        jsonWriter.writeJsonField("extent", this.extent);
        jsonWriter.writeStringField("msft:_created", this.msftCreated);
        jsonWriter.writeStringField("msft:_updated", this.msftUpdated);
        jsonWriter.writeStringField("msft:short_description", this.msftShortDescription);
        jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("stac_version", this.stacVersion);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeMapField("assets", this.assets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("keywords", this.keywords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("providers", this.providers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("summaries", this.summaries);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacCollectionModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacCollectionModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacCollectionModel.
     */
    @Generated
    public static StacCollectionModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String description = null;
            List<Link> links = null;
            String license = null;
            Extent extent = null;
            String msftCreated = null;
            String msftUpdated = null;
            String msftShortDescription = null;
            List<String> stacExtensions = null;
            String stacVersion = null;
            String title = null;
            String type = null;
            Map<String, Asset> assets = null;
            List<String> keywords = null;
            List<Provider> providers = null;
            StacCollectionSummaries summaries = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link.fromJson(reader1));
                } else if ("license".equals(fieldName)) {
                    license = reader.getString();
                } else if ("extent".equals(fieldName)) {
                    extent = Extent.fromJson(reader);
                } else if ("msft:_created".equals(fieldName)) {
                    msftCreated = reader.getString();
                } else if ("msft:_updated".equals(fieldName)) {
                    msftUpdated = reader.getString();
                } else if ("msft:short_description".equals(fieldName)) {
                    msftShortDescription = reader.getString();
                } else if ("stac_extensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("stac_version".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("assets".equals(fieldName)) {
                    assets = reader.readMap(reader1 -> Asset.fromJson(reader1));
                } else if ("keywords".equals(fieldName)) {
                    keywords = reader.readArray(reader1 -> reader1.getString());
                } else if ("providers".equals(fieldName)) {
                    providers = reader.readArray(reader1 -> Provider.fromJson(reader1));
                } else if ("summaries".equals(fieldName)) {
                    summaries = StacCollectionSummaries.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            StacCollectionModel deserializedStacCollectionModel
                = new StacCollectionModel(description, links, license, extent);
            deserializedStacCollectionModel.id = id;
            deserializedStacCollectionModel.msftCreated = msftCreated;
            deserializedStacCollectionModel.msftUpdated = msftUpdated;
            deserializedStacCollectionModel.msftShortDescription = msftShortDescription;
            deserializedStacCollectionModel.stacExtensions = stacExtensions;
            deserializedStacCollectionModel.stacVersion = stacVersion;
            deserializedStacCollectionModel.title = title;
            deserializedStacCollectionModel.type = type;
            deserializedStacCollectionModel.assets = assets;
            deserializedStacCollectionModel.keywords = keywords;
            deserializedStacCollectionModel.providers = providers;
            deserializedStacCollectionModel.summaries = summaries;

            return deserializedStacCollectionModel;
        });
    }
}
