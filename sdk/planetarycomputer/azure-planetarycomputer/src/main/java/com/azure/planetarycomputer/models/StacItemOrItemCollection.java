// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Base type for STAC items and collections with discriminator.
 */
@Fluent
public class StacItemOrItemCollection implements JsonSerializable<StacItemOrItemCollection> {
    /*
     * The type discriminator for STAC resources.
     */
    @Generated
    private StacModelType type = StacModelType.fromString("StacItemOrItemCollection");

    /*
     * Stac Version
     */
    @Generated
    private String stacVersion;

    /*
     * Links to related resources and endpoints.
     */
    @Generated
    private List<Link> links;

    /*
     * MSFT Created
     */
    @Generated
    private String msftCreated;

    /*
     * MSFT Updated
     */
    @Generated
    private String msftUpdated;

    /*
     * MSFT Short Description
     */
    @Generated
    private String msftShortDescription;

    /*
     * URLs to STAC extensions implemented by this STAC resource.
     */
    @Generated
    private List<String> stacExtensions;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setStacItemOrItemCollectionAccessor(new JsonMergePatchHelper.StacItemOrItemCollectionAccessor() {
                @Override
                public StacItemOrItemCollection prepareModelForJsonMergePatch(StacItemOrItemCollection model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(StacItemOrItemCollection model) {
                    return model.jsonMergePatch;
                }

                @Override
                public void setStacVersion(StacItemOrItemCollection model, String stacVersion) {
                    model.stacVersion = stacVersion;
                }

                @Override
                public void setLinks(StacItemOrItemCollection model, List<Link> links) {
                    model.links = links;
                }

                @Override
                public void setMsftCreated(StacItemOrItemCollection model, String msftCreated) {
                    model.msftCreated = msftCreated;
                }

                @Override
                public void setMsftUpdated(StacItemOrItemCollection model, String msftUpdated) {
                    model.msftUpdated = msftUpdated;
                }

                @Override
                public void setMsftShortDescription(StacItemOrItemCollection model, String msftShortDescription) {
                    model.msftShortDescription = msftShortDescription;
                }

                @Override
                public void setStacExtensions(StacItemOrItemCollection model, List<String> stacExtensions) {
                    model.stacExtensions = stacExtensions;
                }
            });
    }

    /**
     * Creates an instance of StacItemOrItemCollection class.
     */
    @Generated
    public StacItemOrItemCollection() {
    }

    /**
     * Get the type property: The type discriminator for STAC resources.
     * 
     * @return the type value.
     */
    @Generated
    public StacModelType getType() {
        return this.type;
    }

    /**
     * Get the stacVersion property: Stac Version.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Set the stacVersion property: Stac Version.
     * 
     * @param stacVersion the stacVersion value to set.
     * @return the StacItemOrItemCollection object itself.
     */
    @Generated
    public StacItemOrItemCollection setStacVersion(String stacVersion) {
        this.stacVersion = stacVersion;
        this.updatedProperties.add("stacVersion");
        return this;
    }

    /**
     * Get the links property: Links to related resources and endpoints.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Set the links property: Links to related resources and endpoints.
     * 
     * @param links the links value to set.
     * @return the StacItemOrItemCollection object itself.
     */
    @Generated
    public StacItemOrItemCollection setLinks(List<Link> links) {
        this.links = links;
        this.updatedProperties.add("links");
        return this;
    }

    /**
     * Get the msftCreated property: MSFT Created.
     * 
     * @return the msftCreated value.
     */
    @Generated
    public String getMsftCreated() {
        return this.msftCreated;
    }

    /**
     * Set the msftCreated property: MSFT Created.
     * 
     * @param msftCreated the msftCreated value to set.
     * @return the StacItemOrItemCollection object itself.
     */
    @Generated
    public StacItemOrItemCollection setMsftCreated(String msftCreated) {
        this.msftCreated = msftCreated;
        this.updatedProperties.add("msftCreated");
        return this;
    }

    /**
     * Get the msftUpdated property: MSFT Updated.
     * 
     * @return the msftUpdated value.
     */
    @Generated
    public String getMsftUpdated() {
        return this.msftUpdated;
    }

    /**
     * Set the msftUpdated property: MSFT Updated.
     * 
     * @param msftUpdated the msftUpdated value to set.
     * @return the StacItemOrItemCollection object itself.
     */
    @Generated
    public StacItemOrItemCollection setMsftUpdated(String msftUpdated) {
        this.msftUpdated = msftUpdated;
        this.updatedProperties.add("msftUpdated");
        return this;
    }

    /**
     * Get the msftShortDescription property: MSFT Short Description.
     * 
     * @return the msftShortDescription value.
     */
    @Generated
    public String getMsftShortDescription() {
        return this.msftShortDescription;
    }

    /**
     * Set the msftShortDescription property: MSFT Short Description.
     * 
     * @param msftShortDescription the msftShortDescription value to set.
     * @return the StacItemOrItemCollection object itself.
     */
    @Generated
    public StacItemOrItemCollection setMsftShortDescription(String msftShortDescription) {
        this.msftShortDescription = msftShortDescription;
        this.updatedProperties.add("msftShortDescription");
        return this;
    }

    /**
     * Get the stacExtensions property: URLs to STAC extensions implemented by this STAC resource.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Set the stacExtensions property: URLs to STAC extensions implemented by this STAC resource.
     * 
     * @param stacExtensions the stacExtensions value to set.
     * @return the StacItemOrItemCollection object itself.
     */
    @Generated
    public StacItemOrItemCollection setStacExtensions(List<String> stacExtensions) {
        this.stacExtensions = stacExtensions;
        this.updatedProperties.add("stacExtensions");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeStringField("stac_version", this.stacVersion);
            jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("msft:_created", this.msftCreated);
            jsonWriter.writeStringField("msft:_updated", this.msftUpdated);
            jsonWriter.writeStringField("msft:short_description", this.msftShortDescription);
            jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
                (writer, element) -> writer.writeString(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("stacVersion")) {
            if (this.stacVersion == null) {
                jsonWriter.writeNullField("stac_version");
            } else {
                jsonWriter.writeStringField("stac_version", this.stacVersion);
            }
        }
        if (updatedProperties.contains("links")) {
            if (this.links == null) {
                jsonWriter.writeNullField("links");
            } else {
                jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("msftCreated")) {
            if (this.msftCreated == null) {
                jsonWriter.writeNullField("msft:_created");
            } else {
                jsonWriter.writeStringField("msft:_created", this.msftCreated);
            }
        }
        if (updatedProperties.contains("msftUpdated")) {
            if (this.msftUpdated == null) {
                jsonWriter.writeNullField("msft:_updated");
            } else {
                jsonWriter.writeStringField("msft:_updated", this.msftUpdated);
            }
        }
        if (updatedProperties.contains("msftShortDescription")) {
            if (this.msftShortDescription == null) {
                jsonWriter.writeNullField("msft:short_description");
            } else {
                jsonWriter.writeStringField("msft:short_description", this.msftShortDescription);
            }
        }
        if (updatedProperties.contains("stacExtensions")) {
            if (this.stacExtensions == null) {
                jsonWriter.writeNullField("stac_extensions");
            } else {
                jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
                    (writer, element) -> writer.writeString(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItemOrItemCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItemOrItemCollection if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StacItemOrItemCollection.
     */
    @Generated
    public static StacItemOrItemCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Feature".equals(discriminatorValue)) {
                    return StacItemModel.fromJson(readerToUse.reset());
                } else if ("FeatureCollection".equals(discriminatorValue)) {
                    return ItemCollectionModel.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static StacItemOrItemCollection fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StacItemOrItemCollection deserializedStacItemOrItemCollection = new StacItemOrItemCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedStacItemOrItemCollection.type = StacModelType.fromString(reader.getString());
                } else if ("stac_version".equals(fieldName)) {
                    deserializedStacItemOrItemCollection.stacVersion = reader.getString();
                } else if ("links".equals(fieldName)) {
                    List<Link> links = reader.readArray(reader1 -> Link.fromJson(reader1));
                    deserializedStacItemOrItemCollection.links = links;
                } else if ("msft:_created".equals(fieldName)) {
                    deserializedStacItemOrItemCollection.msftCreated = reader.getString();
                } else if ("msft:_updated".equals(fieldName)) {
                    deserializedStacItemOrItemCollection.msftUpdated = reader.getString();
                } else if ("msft:short_description".equals(fieldName)) {
                    deserializedStacItemOrItemCollection.msftShortDescription = reader.getString();
                } else if ("stac_extensions".equals(fieldName)) {
                    List<String> stacExtensions = reader.readArray(reader1 -> reader1.getString());
                    deserializedStacItemOrItemCollection.stacExtensions = stacExtensions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStacItemOrItemCollection;
        });
    }
}
