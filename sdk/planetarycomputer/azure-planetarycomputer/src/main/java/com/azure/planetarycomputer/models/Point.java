// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Represents a GeoJSON Point geometry.
 */
@Fluent
public final class Point extends Geometry {
    /*
     * Discriminator property for Geometry.
     */
    @Generated
    private GeometryType type = GeometryType.POINT;

    /*
     * The coordinates of the point as [longitude, latitude].
     */
    @Generated
    private String coordinates;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of Point class.
     */
    @Generated
    public Point() {
    }

    /**
     * Get the type property: Discriminator property for Geometry.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public GeometryType getType() {
        return this.type;
    }

    /**
     * Get the coordinates property: The coordinates of the point as [longitude, latitude].
     * 
     * @return the coordinates value.
     */
    @Generated
    public String getCoordinates() {
        return this.coordinates;
    }

    /**
     * Set the coordinates property: The coordinates of the point as [longitude, latitude].
     * <p>Required when create the resource.</p>
     * 
     * @param coordinates the coordinates value to set.
     * @return the Point object itself.
     */
    @Generated
    public Point setCoordinates(String coordinates) {
        this.coordinates = coordinates;
        this.updatedProperties.add("coordinates");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public Point setBbox(List<Double> bbox) {
        super.setBbox(bbox);
        this.updatedProperties.add("bbox");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getGeometryAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeArrayField("bbox", getBbox(), (writer, element) -> writer.writeDouble(element));
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeStringField("coordinates", this.coordinates);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("bbox")) {
            if (getBbox() == null) {
                jsonWriter.writeNullField("bbox");
            } else {
                jsonWriter.writeArrayField("bbox", getBbox(), (writer, element) -> writer.writeDouble(element));
            }
        }
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("coordinates")) {
            if (this.coordinates == null) {
                jsonWriter.writeNullField("coordinates");
            } else {
                jsonWriter.writeStringField("coordinates", this.coordinates);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Point from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Point if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Point.
     */
    @Generated
    public static Point fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Point deserializedPoint = new Point();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bbox".equals(fieldName)) {
                    List<Double> bbox = reader.readArray(reader1 -> reader1.getDouble());
                    JsonMergePatchHelper.getGeometryAccessor().setBbox(deserializedPoint, bbox);
                } else if ("type".equals(fieldName)) {
                    deserializedPoint.type = GeometryType.fromString(reader.getString());
                } else if ("coordinates".equals(fieldName)) {
                    deserializedPoint.coordinates = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPoint;
        });
    }
}
