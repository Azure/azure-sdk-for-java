// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.TypeReference;
import com.azure.planetarycomputer.implementation.MultipartFormDataHelper;
import com.azure.planetarycomputer.implementation.StacCollectionConfigurationClientImpl;
import com.azure.planetarycomputer.models.FormContent;
import com.azure.planetarycomputer.models.Mosaic;
import com.azure.planetarycomputer.models.PartitionType;
import com.azure.planetarycomputer.models.QueryableDefinition;
import com.azure.planetarycomputer.models.RenderOptionModel;
import com.azure.planetarycomputer.models.StacCollectionModel;
import com.azure.planetarycomputer.models.TileSettings;
import com.azure.planetarycomputer.models.UserCollectionSettings;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous StacCollectionConfigurationClient type.
 */
@ServiceClient(builder = StacCollectionConfigurationClientBuilder.class, isAsync = true)
public final class StacCollectionConfigurationAsyncClient {
    @Generated
    private final StacCollectionConfigurationClientImpl serviceClient;

    /**
     * Initializes an instance of StacCollectionConfigurationAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    StacCollectionConfigurationAsyncClient(StacCollectionConfigurationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to write, without a valid href to the asset.
     * file: The file to write.
     * collection_id: The ID of the collection to write the asset to.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the newly created asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param body Multi-part form data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> createCollectionAssetWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        // Operation 'createCollectionAsset' is of content-type 'multipart/form-data'. Protocol API is not usable and
        // hence not generated.
        return this.serviceClient.createCollectionAssetWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param body Multi-part form data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> createOrReplaceCollectionAssetWithResponse(String collectionId, String assetId,
        BinaryData body, RequestOptions requestOptions) {
        // Operation 'createOrReplaceCollectionAsset' is of content-type 'multipart/form-data'. Protocol API is not
        // usable and hence not generated.
        return this.serviceClient.createOrReplaceCollectionAssetWithResponseAsync(collectionId, assetId, body,
            requestOptions);
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to delete the asset from.
     * asset_id: The ID of the asset to delete.
     * 
     * Returns:
     * A Response object indicating the success of the deletion.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCollectionAssetWithResponse(String collectionId, String assetId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCollectionAssetWithResponseAsync(collectionId, assetId, requestOptions);
    }

    /**
     * Get Config
     * 
     * Get the complete user configuration for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tileSettings (Required): {
     *         minZoom: int (Required)
     *         maxItemsPerTile: int (Required)
     *         defaultLocation (Optional): {
     *             zoom: int (Required)
     *             coordinates (Required): [
     *                 double (Required)
     *             ]
     *         }
     *     }
     *     mosaicInfo (Required): {
     *         mosaics (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 cql (Required): [
     *                      (Required){
     *                          (Optional): {
     *                             String: BinaryData (Required)
     *                         }
     *                     }
     *                 ]
     *             }
     *         ]
     *         renderOptions (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *                 options: String (Optional)
     *                 vectorOptions (Optional): {
     *                     tilejsonKey: String (Required)
     *                     sourceLayer: String (Required)
     *                     fillColor: String (Optional)
     *                     strokeColor: String (Optional)
     *                     strokeWidth: Integer (Optional)
     *                     filter (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *                 minZoom: Integer (Optional)
     *                 legend (Optional): {
     *                     type: String(continuous/classmap/interval/none) (Optional)
     *                     labels (Optional): [
     *                         String (Optional)
     *                     ]
     *                     trimStart: Integer (Optional)
     *                     trimEnd: Integer (Optional)
     *                     scaleFactor: Double (Optional)
     *                 }
     *                 conditions (Optional): [
     *                      (Optional){
     *                         property: String (Required)
     *                         value: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         defaultLocation (Optional): (recursive schema, see defaultLocation above)
     *         defaultCustomQuery (Optional): (recursive schema, see defaultCustomQuery above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return config
     * 
     * Get the complete user configuration for a given collection along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCollectionConfigWithResponse(String collectionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getCollectionConfigWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Get Collection Mosaics
     * 
     * Get the mosaic definitions for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         cql (Required): [
     *              (Required){
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaics
     * 
     * Get the mosaic definitions for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllMosaicsWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getAllMosaicsWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Add Collection Mosaic
     * 
     * Add a mosaic definition to a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Mosaic definition to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines a named mosaic with filtering criteria along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addMosaicWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.addMosaicWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Get Collection Mosaic
     * 
     * Get a mosaic definition from a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaic
     * 
     * Get a mosaic definition from a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMosaicWithResponse(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        return this.serviceClient.getMosaicWithResponseAsync(collectionId, mosaicId, requestOptions);
    }

    /**
     * Update Collection Mosaic
     * 
     * Update a mosaic definition from a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param body Mosaic definition to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines a named mosaic with filtering criteria along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceMosaicWithResponse(String collectionId, String mosaicId,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceMosaicWithResponseAsync(collectionId, mosaicId, body, requestOptions);
    }

    /**
     * Delete Collection Mosaic
     * 
     * Delete a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMosaicWithResponse(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteMosaicWithResponseAsync(collectionId, mosaicId, requestOptions);
    }

    /**
     * Get Partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionTypeWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getPartitionTypeWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Create Partitiontype
     * 
     * Updates partition type for a GeoCatalog Collection. This will
     * determine the partitioning scheme for items within the database,
     * and can only be set before any items are loaded.
     * 
     * Ideal partitioning schemes result in partitions of roughly 100k items each.
     * 
     * The default partitioning scheme is "none" which does not partition items.
     * 
     * Args:
     * collection_id: the collection id to add the partitiontype to.
     * partitiontype: the partitiontype to add.
     * 
     * Returns:
     * None.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Partition type configuration determining how items are partitioned in storage.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines how data is partitioned for efficient storage and retrieval along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> replacePartitionTypeWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.replacePartitionTypeWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Get Collection Render Options
     * 
     * Get all render options for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *         options: String (Optional)
     *         vectorOptions (Optional): {
     *             tilejsonKey: String (Required)
     *             sourceLayer: String (Required)
     *             fillColor: String (Optional)
     *             strokeColor: String (Optional)
     *             strokeWidth: Integer (Optional)
     *             filter (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         minZoom: Integer (Optional)
     *         legend (Optional): {
     *             type: String(continuous/classmap/interval/none) (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             trimStart: Integer (Optional)
     *             trimEnd: Integer (Optional)
     *             scaleFactor: Double (Optional)
     *         }
     *         conditions (Optional): [
     *              (Optional){
     *                 property: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Render Options
     * 
     * Get all render options for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllRenderOptionsWithResponse(String collectionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAllRenderOptionsWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Add Collection Render Option
     * 
     * Add a render option for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Render option configuration to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines visualization parameters for rendering data on a map along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRenderOptionWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createRenderOptionWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Get Collection Render Option
     * 
     * Get a render option for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *         options: String (Optional)
     *         vectorOptions (Optional): {
     *             tilejsonKey: String (Required)
     *             sourceLayer: String (Required)
     *             fillColor: String (Optional)
     *             strokeColor: String (Optional)
     *             strokeWidth: Integer (Optional)
     *             filter (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         minZoom: Integer (Optional)
     *         legend (Optional): {
     *             type: String(continuous/classmap/interval/none) (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             trimStart: Integer (Optional)
     *             trimEnd: Integer (Optional)
     *             scaleFactor: Double (Optional)
     *         }
     *         conditions (Optional): [
     *              (Optional){
     *                 property: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Render Option
     * 
     * Get a render option for a given collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRenderOptionWithResponse(String collectionId, String renderOptionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getRenderOptionWithResponseAsync(collectionId, renderOptionId, requestOptions);
    }

    /**
     * Update Collection Render Option
     * 
     * Update a render option for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param body Render option configuration to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines visualization parameters for rendering data on a map along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceRenderOptionWithResponse(String collectionId,
        String renderOptionId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceRenderOptionWithResponseAsync(collectionId, renderOptionId, body,
            requestOptions);
    }

    /**
     * Delete Collection Render Option
     * 
     * Delete a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRenderOptionWithResponse(String collectionId, String renderOptionId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteRenderOptionWithResponseAsync(collectionId, renderOptionId, requestOptions);
    }

    /**
     * Get Collection Tile Settings
     * 
     * Get the tile settings for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Tile Settings
     * 
     * Get the tile settings for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTileSettingsWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getTileSettingsWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Update Collection Tile Settings
     * 
     * Update the tile settings for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Tile settings configuration to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return configuration for map tile visualization along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> replaceTileSettingsWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.replaceTileSettingsWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Update Collection Queryables
     * 
     * Updates a queryable given a queryable definition and
     * corresponding collection id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(string/number/boolean/timestamp/date) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(string/number/boolean/timestamp/date) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param body Request queryable definition body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return definition of a queryable field for STAC API filtering along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceQueryableWithResponse(String collectionId, String queryableName,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceQueryableWithResponseAsync(collectionId, queryableName, body,
            requestOptions);
    }

    /**
     * Delete Queryables
     * 
     * Delete queryables by name for specified collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteQueryableWithResponse(String collectionId, String queryableName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteQueryableWithResponseAsync(collectionId, queryableName, requestOptions);
    }

    /**
     * Get Collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCollectionThumbnailWithResponse(String collectionId, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getCollectionThumbnailWithResponseAsync(collectionId, accept, requestOptions);
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to write, without a valid href to the asset.
     * file: The file to write.
     * collection_id: The ID of the collection to write the asset to.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the newly created asset.
     * 
     * @param collectionId STAC Collection ID.
     * @param body Multi-part form data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacCollectionModel> createCollectionAsset(String collectionId, FormContent body) {
        // Generated convenience method for createCollectionAssetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createCollectionAssetWithResponse(collectionId,
            new MultipartFormDataHelper(requestOptions).serializeJsonField("data", body.getData())
                .serializeFileField("file", body.getFile().getContent(), body.getFile().getContentType(),
                    body.getFile().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(StacCollectionModel.class));
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param body Multi-part form data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StacCollectionModel> createOrReplaceCollectionAsset(String collectionId, String assetId,
        FormContent body) {
        // Generated convenience method for createOrReplaceCollectionAssetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceCollectionAssetWithResponse(collectionId, assetId,
            new MultipartFormDataHelper(requestOptions).serializeJsonField("data", body.getData())
                .serializeFileField("file", body.getFile().getContent(), body.getFile().getContentType(),
                    body.getFile().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(StacCollectionModel.class));
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to delete the asset from.
     * asset_id: The ID of the asset to delete.
     * 
     * Returns:
     * A Response object indicating the success of the deletion.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCollectionAsset(String collectionId, String assetId) {
        // Generated convenience method for deleteCollectionAssetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteCollectionAssetWithResponse(collectionId, assetId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Config
     * 
     * Get the complete user configuration for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config
     * 
     * Get the complete user configuration for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserCollectionSettings> getCollectionConfig(String collectionId) {
        // Generated convenience method for getCollectionConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCollectionConfigWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(UserCollectionSettings.class));
    }

    /**
     * Get Collection Mosaics
     * 
     * Get the mosaic definitions for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Mosaics
     * 
     * Get the mosaic definitions for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Mosaic>> getAllMosaics(String collectionId) {
        // Generated convenience method for getAllMosaicsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllMosaicsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_MOSAIC));
    }

    /**
     * Add Collection Mosaic
     * 
     * Add a mosaic definition to a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Mosaic definition to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a named mosaic with filtering criteria on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Mosaic> addMosaic(String collectionId, Mosaic body) {
        // Generated convenience method for addMosaicWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addMosaicWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Mosaic.class));
    }

    /**
     * Get Collection Mosaic
     * 
     * Get a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Mosaic
     * 
     * Get a mosaic definition from a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Mosaic> getMosaic(String collectionId, String mosaicId) {
        // Generated convenience method for getMosaicWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMosaicWithResponse(collectionId, mosaicId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Mosaic.class));
    }

    /**
     * Update Collection Mosaic
     * 
     * Update a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param body Mosaic definition to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a named mosaic with filtering criteria on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Mosaic> createOrReplaceMosaic(String collectionId, String mosaicId, Mosaic body) {
        // Generated convenience method for createOrReplaceMosaicWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceMosaicWithResponse(collectionId, mosaicId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Mosaic.class));
    }

    /**
     * Delete Collection Mosaic
     * 
     * Delete a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMosaic(String collectionId, String mosaicId) {
        // Generated convenience method for deleteMosaicWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteMosaicWithResponse(collectionId, mosaicId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionType> getPartitionType(String collectionId) {
        // Generated convenience method for getPartitionTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPartitionTypeWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PartitionType.class));
    }

    /**
     * Create Partitiontype
     * 
     * Updates partition type for a GeoCatalog Collection. This will
     * determine the partitioning scheme for items within the database,
     * and can only be set before any items are loaded.
     * 
     * Ideal partitioning schemes result in partitions of roughly 100k items each.
     * 
     * The default partitioning scheme is "none" which does not partition items.
     * 
     * Args:
     * collection_id: the collection id to add the partitiontype to.
     * partitiontype: the partitiontype to add.
     * 
     * Returns:
     * None.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Partition type configuration determining how items are partitioned in storage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines how data is partitioned for efficient storage and retrieval on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionType> replacePartitionType(String collectionId, PartitionType body) {
        // Generated convenience method for replacePartitionTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return replacePartitionTypeWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(PartitionType.class));
    }

    /**
     * Get Collection Render Options
     * 
     * Get all render options for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Render Options
     * 
     * Get all render options for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<RenderOptionModel>> getAllRenderOptions(String collectionId) {
        // Generated convenience method for getAllRenderOptionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllRenderOptionsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_RENDER_OPTION_MODEL));
    }

    /**
     * Add Collection Render Option
     * 
     * Add a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Render option configuration to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines visualization parameters for rendering data on a map on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RenderOptionModel> createRenderOption(String collectionId, RenderOptionModel body) {
        // Generated convenience method for createRenderOptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createRenderOptionWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RenderOptionModel.class));
    }

    /**
     * Get Collection Render Option
     * 
     * Get a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Render Option
     * 
     * Get a render option for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<RenderOptionModel>> getRenderOption(String collectionId, String renderOptionId) {
        // Generated convenience method for getRenderOptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRenderOptionWithResponse(collectionId, renderOptionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_RENDER_OPTION_MODEL));
    }

    /**
     * Update Collection Render Option
     * 
     * Update a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param body Render option configuration to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines visualization parameters for rendering data on a map on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RenderOptionModel> createOrReplaceRenderOption(String collectionId, String renderOptionId,
        RenderOptionModel body) {
        // Generated convenience method for createOrReplaceRenderOptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceRenderOptionWithResponse(collectionId, renderOptionId, BinaryData.fromObject(body),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(RenderOptionModel.class));
    }

    /**
     * Delete Collection Render Option
     * 
     * Delete a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRenderOption(String collectionId, String renderOptionId) {
        // Generated convenience method for deleteRenderOptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteRenderOptionWithResponse(collectionId, renderOptionId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Collection Tile Settings
     * 
     * Get the tile settings for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Tile Settings
     * 
     * Get the tile settings for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TileSettings> getTileSettings(String collectionId) {
        // Generated convenience method for getTileSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTileSettingsWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TileSettings.class));
    }

    /**
     * Update Collection Tile Settings
     * 
     * Update the tile settings for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Tile settings configuration to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for map tile visualization on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TileSettings> replaceTileSettings(String collectionId, TileSettings body) {
        // Generated convenience method for replaceTileSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return replaceTileSettingsWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TileSettings.class));
    }

    /**
     * Update Collection Queryables
     * 
     * Updates a queryable given a queryable definition and
     * corresponding collection id.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param body Request queryable definition body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return definition of a queryable field for STAC API filtering on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryableDefinition> createOrReplaceQueryable(String collectionId, String queryableName,
        QueryableDefinition body) {
        // Generated convenience method for createOrReplaceQueryableWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceQueryableWithResponse(collectionId, queryableName, BinaryData.fromObject(body),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(QueryableDefinition.class));
    }

    /**
     * Delete Queryables
     * 
     * Delete queryables by name for specified collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteQueryable(String collectionId, String queryableName) {
        // Generated convenience method for deleteQueryableWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteQueryableWithResponse(collectionId, queryableName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image.
     * 
     * @param collectionId STAC Collection ID.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getCollectionThumbnail(String collectionId, String accept) {
        // Generated convenience method for getCollectionThumbnailWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCollectionThumbnailWithResponse(collectionId, accept, requestOptions).flatMap(FluxUtil::toMono);
    }

    @Generated
    private static final TypeReference<List<Mosaic>> TYPE_REFERENCE_LIST_MOSAIC = new TypeReference<List<Mosaic>>() {
    };

    @Generated
    private static final TypeReference<List<RenderOptionModel>> TYPE_REFERENCE_LIST_RENDER_OPTION_MODEL
        = new TypeReference<List<RenderOptionModel>>() {
        };
}
