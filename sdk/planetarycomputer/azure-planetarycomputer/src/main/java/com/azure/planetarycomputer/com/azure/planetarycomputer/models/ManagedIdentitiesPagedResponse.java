// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Managed Identities paged response.
 */
@Immutable
public final class ManagedIdentitiesPagedResponse implements JsonSerializable<ManagedIdentitiesPagedResponse> {
    /*
     * Managed Identities
     */
    @Generated
    private final List<ManagedIdentityMetadata> value;

    /*
     * Next page
     */
    @Generated
    private String nextLink;

    /**
     * Creates an instance of ManagedIdentitiesPagedResponse class.
     * 
     * @param value the value value to set.
     */
    @Generated
    private ManagedIdentitiesPagedResponse(List<ManagedIdentityMetadata> value) {
        this.value = value;
    }

    /**
     * Get the value property: Managed Identities.
     * 
     * @return the value value.
     */
    @Generated
    public List<ManagedIdentityMetadata> getValue() {
        return this.value;
    }

    /**
     * Get the nextLink property: Next page.
     * 
     * @return the nextLink value.
     */
    @Generated
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIdentitiesPagedResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIdentitiesPagedResponse if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedIdentitiesPagedResponse.
     */
    @Generated
    public static ManagedIdentitiesPagedResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ManagedIdentityMetadata> value = null;
            String nextLink = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    value = reader.readArray(reader1 -> ManagedIdentityMetadata.fromJson(reader1));
                } else if ("nextLink".equals(fieldName)) {
                    nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ManagedIdentitiesPagedResponse deserializedManagedIdentitiesPagedResponse
                = new ManagedIdentitiesPagedResponse(value);
            deserializedManagedIdentitiesPagedResponse.nextLink = nextLink;

            return deserializedManagedIdentitiesPagedResponse;
        });
    }
}
