// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.TypeReference;
import com.azure.planetarycomputer.PlanetaryComputerServiceVersion;
import com.azure.planetarycomputer.models.Operation;
import java.time.Duration;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the IngestionManagementClient type.
 */
public final class IngestionManagementClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final IngestionManagementClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final PlanetaryComputerServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PlanetaryComputerServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of IngestionManagementClient client.
     * 
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public IngestionManagementClientImpl(String endpoint, PlanetaryComputerServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of IngestionManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public IngestionManagementClientImpl(HttpPipeline httpPipeline, String endpoint,
        PlanetaryComputerServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of IngestionManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public IngestionManagementClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        String endpoint, PlanetaryComputerServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service
            = RestProxy.create(IngestionManagementClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for IngestionManagementClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "IngestionManagementClient")
    public interface IngestionManagementClientService {
        @Get("/{collectionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{collectionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/{collectionId}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createIngestion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData definition, RequestOptions requestOptions, Context context);

        @Post("/{collectionId}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createIngestionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData definition, RequestOptions requestOptions, Context context);

        @Get("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Patch("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateIngestion(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @QueryParam("api-version") String apiVersion,
            @PathParam("collectionId") String collectionId, @PathParam("ingestionId") String ingestionId,
            @HeaderParam("Accept") String accept, @BodyParam("application/merge-patch+json") BinaryData definition,
            RequestOptions requestOptions, Context context);

        @Patch("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateIngestionSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @QueryParam("api-version") String apiVersion,
            @PathParam("collectionId") String collectionId, @PathParam("ingestionId") String ingestionId,
            @HeaderParam("Accept") String accept, @BodyParam("application/merge-patch+json") BinaryData definition,
            RequestOptions requestOptions, Context context);

        @Delete("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteIngestion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteIngestionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestionRuns(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionRunsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createIngestionRun(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/{collectionId}/{ingestionId}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createIngestionRunSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{collectionId}/{ingestionId}/{runId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestionRun(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @PathParam("runId") String runId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{collectionId}/{ingestionId}/{runId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionRunSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @PathParam("runId") String runId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestionOperations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionOperationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteAllIngestionOperations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteAllIngestionOperationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIngestionOperation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIngestionOperationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/{operationId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteIngestionOperation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/{operationId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteIngestionOperationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Get ingestions of a catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             importType: String(StaticCatalog) (Optional, Required on create)
     *             displayName: String (Optional)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *             creationTime: OffsetDateTime (Required)
     *             status: String(Ready/Deleting) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestions of a catalog along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionsWithResponseAsync(String collectionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestions(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get ingestions of a catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             importType: String(StaticCatalog) (Optional, Required on create)
     *             displayName: String (Optional)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *             creationTime: OffsetDateTime (Required)
     *             status: String(Ready/Deleting) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestions of a catalog along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionsWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Create a new ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param definition Definition of the ingestion.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionWithResponseAsync(String collectionId, BinaryData definition,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createIngestion(this.getEndpoint(), this.getServiceVersion().getVersion(),
                collectionId, contentType, accept, definition, requestOptions, context));
    }

    /**
     * Create a new ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param definition Definition of the ingestion.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createIngestionWithResponse(String collectionId, BinaryData definition,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createIngestionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            contentType, accept, definition, requestOptions, Context.NONE);
    }

    /**
     * Get the definition of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definition of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestion(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Get the definition of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definition of an ingestion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Update an existing ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param definition Ingestion properties to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateIngestionWithResponseAsync(String collectionId, String ingestionId,
        BinaryData definition, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.updateIngestion(this.getEndpoint(), contentType, this.getServiceVersion().getVersion(),
                collectionId, ingestionId, accept, definition, requestOptions, context));
    }

    /**
     * Update an existing ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     importType: String(StaticCatalog) (Optional, Required on create)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param definition Ingestion properties to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion creation model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateIngestionWithResponse(String collectionId, String ingestionId,
        BinaryData definition, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.updateIngestionSync(this.getEndpoint(), contentType, this.getServiceVersion().getVersion(),
            collectionId, ingestionId, accept, definition, requestOptions, Context.NONE);
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog operation along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> deleteIngestionWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteIngestion(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteIngestionWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteIngestionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginDeleteIngestionWithModelAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteIngestionWithResponseAsync(collectionId, ingestionId, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginDeleteIngestionWithModel(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteIngestionWithResponse(collectionId, ingestionId, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteIngestionAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteIngestionWithResponseAsync(collectionId, ingestionId, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteIngestion(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteIngestionWithResponse(collectionId, ingestionId, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Get the runs of an ingestion.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             parentRunId: String (Optional)
     *             operation (Required): {
     *                 id: String (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 creationTime: OffsetDateTime (Required)
     *                 statusHistory (Required): [
     *                      (Required){
     *                         timestamp: OffsetDateTime (Required)
     *                         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                         errorCode: String (Optional)
     *                         errorMessage: String (Optional)
     *                     }
     *                 ]
     *                 startTime: OffsetDateTime (Optional)
     *                 finishTime: OffsetDateTime (Optional)
     *                 totalItems: int (Required)
     *                 totalPendingItems: int (Required)
     *                 totalSuccessfulItems: int (Required)
     *                 totalFailedItems: int (Required)
     *             }
     *             creationTime: OffsetDateTime (Required)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the runs of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionRunsWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestionRuns(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Get the runs of an ingestion.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             parentRunId: String (Optional)
     *             operation (Required): {
     *                 id: String (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 creationTime: OffsetDateTime (Required)
     *                 statusHistory (Required): [
     *                      (Required){
     *                         timestamp: OffsetDateTime (Required)
     *                         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                         errorCode: String (Optional)
     *                         errorMessage: String (Optional)
     *                     }
     *                 ]
     *                 startTime: OffsetDateTime (Optional)
     *                 finishTime: OffsetDateTime (Optional)
     *                 totalItems: int (Required)
     *                 totalPendingItems: int (Required)
     *                 totalSuccessfulItems: int (Required)
     *                 totalFailedItems: int (Required)
     *             }
     *             creationTime: OffsetDateTime (Required)
     *             sourceCatalogUrl: String (Optional)
     *             skipExistingItems: Boolean (Optional)
     *             keepOriginalAssets: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the runs of an ingestion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionRunsWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionRunsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Create a new run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion run along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionRunWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createIngestionRun(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Create a new run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return microsoft Planetary Computer Pro geo-catalog ingestion run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createIngestionRunWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createIngestionRunSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get a run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a run of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionRunWithResponseAsync(String collectionId, String ingestionId,
        String runId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestionRun(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, ingestionId, runId, accept, requestOptions, context));
    }

    /**
     * Get a run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     parentRunId: String (Optional)
     *     operation (Required): {
     *         id: String (Required)
     *         status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: int (Required)
     *         totalPendingItems: int (Required)
     *         totalSuccessfulItems: int (Required)
     *         totalFailedItems: int (Required)
     *     }
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a run of an ingestion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionRunWithResponse(String collectionId, String ingestionId, String runId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionRunSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            ingestionId, runId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get operations of a geo-catalog collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>Operation id used to filter the results</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>Operation status used to filter the results. Allowed values:
     * "Pending", "Running", "Succeeded", "Canceled", "Canceling", "Failed".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             type: String (Required)
     *             creationTime: OffsetDateTime (Required)
     *             collectionId: String (Optional)
     *             statusHistory (Required): [
     *                  (Required){
     *                     timestamp: OffsetDateTime (Required)
     *                     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                 }
     *             ]
     *             startTime: OffsetDateTime (Optional)
     *             finishTime: OffsetDateTime (Optional)
     *             additionalInformation (Optional): {
     *                 String: String (Required)
     *             }
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operations of a geo-catalog collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionOperationsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestionOperations(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get operations of a geo-catalog collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>Operation id used to filter the results</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>Operation status used to filter the results. Allowed values:
     * "Pending", "Running", "Succeeded", "Canceled", "Canceling", "Failed".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             type: String (Required)
     *             creationTime: OffsetDateTime (Required)
     *             collectionId: String (Optional)
     *             statusHistory (Required): [
     *                  (Required){
     *                     timestamp: OffsetDateTime (Required)
     *                     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                 }
     *             ]
     *             startTime: OffsetDateTime (Optional)
     *             finishTime: OffsetDateTime (Optional)
     *             additionalInformation (Optional): {
     *                 String: String (Required)
     *             }
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operations of a geo-catalog collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionOperationsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionOperationsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAllIngestionOperationsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteAllIngestionOperations(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteAllIngestionOperationsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteAllIngestionOperationsSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get an operation of a geo-catalog collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation of a geo-catalog collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionOperationWithResponseAsync(String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIngestionOperation(this.getEndpoint(),
            this.getServiceVersion().getVersion(), operationId, accept, requestOptions, context));
    }

    /**
     * Get an operation of a geo-catalog collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation of a geo-catalog collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIngestionOperationWithResponse(String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIngestionOperationSync(this.getEndpoint(), this.getServiceVersion().getVersion(), operationId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteIngestionOperationWithResponseAsync(String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteIngestionOperation(this.getEndpoint(),
            this.getServiceVersion().getVersion(), operationId, accept, requestOptions, context));
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteIngestionOperationWithResponse(String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteIngestionOperationSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            operationId, accept, requestOptions, Context.NONE);
    }
}
