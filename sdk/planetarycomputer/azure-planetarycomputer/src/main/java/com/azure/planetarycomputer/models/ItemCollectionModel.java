// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
 * 
 * Represents a collection of STAC Items as a GeoJSON FeatureCollection.
 */
@Fluent
public final class ItemCollectionModel extends StacItemOrItemCollection {
    /*
     * Discriminator property for StacItemOrItemCollection.
     */
    @Generated
    private StacModelType type = StacModelType.FEATURE_COLLECTION;

    /*
     * Array of STAC Items in the collection.
     */
    @Generated
    private List<StacItemModel> features;

    /*
     * Bounding box of all items in format [west, south, east, north].
     */
    @Generated
    private List<Double> bbox;

    /*
     * Context information for the search response.
     */
    @Generated
    private ContextExtension context;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of ItemCollectionModel class.
     */
    @Generated
    public ItemCollectionModel() {
    }

    /**
     * Get the type property: Discriminator property for StacItemOrItemCollection.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public StacModelType getType() {
        return this.type;
    }

    /**
     * Get the features property: Array of STAC Items in the collection.
     * 
     * @return the features value.
     */
    @Generated
    public List<StacItemModel> getFeatures() {
        return this.features;
    }

    /**
     * Set the features property: Array of STAC Items in the collection.
     * <p>Required when create the resource.</p>
     * 
     * @param features the features value to set.
     * @return the ItemCollectionModel object itself.
     */
    @Generated
    public ItemCollectionModel setFeatures(List<StacItemModel> features) {
        this.features = features;
        this.updatedProperties.add("features");
        return this;
    }

    /**
     * Get the bbox property: Bounding box of all items in format [west, south, east, north].
     * 
     * @return the bbox value.
     */
    @Generated
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: Bounding box of all items in format [west, south, east, north].
     * 
     * @param bbox the bbox value to set.
     * @return the ItemCollectionModel object itself.
     */
    @Generated
    public ItemCollectionModel setBbox(List<Double> bbox) {
        this.bbox = bbox;
        this.updatedProperties.add("bbox");
        return this;
    }

    /**
     * Get the context property: Context information for the search response.
     * 
     * @return the context value.
     */
    @Generated
    public ContextExtension getContext() {
        return this.context;
    }

    /**
     * Set the context property: Context information for the search response.
     * 
     * @param context the context value to set.
     * @return the ItemCollectionModel object itself.
     */
    @Generated
    public ItemCollectionModel setContext(ContextExtension context) {
        this.context = context;
        this.updatedProperties.add("context");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ItemCollectionModel setStacVersion(String stacVersion) {
        super.setStacVersion(stacVersion);
        this.updatedProperties.add("stacVersion");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ItemCollectionModel setLinks(List<Link> links) {
        super.setLinks(links);
        this.updatedProperties.add("links");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ItemCollectionModel setMsftCreated(String msftCreated) {
        super.setMsftCreated(msftCreated);
        this.updatedProperties.add("msftCreated");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ItemCollectionModel setMsftUpdated(String msftUpdated) {
        super.setMsftUpdated(msftUpdated);
        this.updatedProperties.add("msftUpdated");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ItemCollectionModel setMsftShortDescription(String msftShortDescription) {
        super.setMsftShortDescription(msftShortDescription);
        this.updatedProperties.add("msftShortDescription");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ItemCollectionModel setStacExtensions(List<String> stacExtensions) {
        super.setStacExtensions(stacExtensions);
        this.updatedProperties.add("stacExtensions");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getStacItemOrItemCollectionAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("stac_version", getStacVersion());
            jsonWriter.writeArrayField("links", getLinks(), (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("msft:_created", getMsftCreated());
            jsonWriter.writeStringField("msft:_updated", getMsftUpdated());
            jsonWriter.writeStringField("msft:short_description", getMsftShortDescription());
            jsonWriter.writeArrayField("stac_extensions", getStacExtensions(),
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
            jsonWriter.writeJsonField("context", this.context);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("stacVersion")) {
            if (getStacVersion() == null) {
                jsonWriter.writeNullField("stac_version");
            } else {
                jsonWriter.writeStringField("stac_version", getStacVersion());
            }
        }
        if (updatedProperties.contains("links")) {
            if (getLinks() == null) {
                jsonWriter.writeNullField("links");
            } else {
                jsonWriter.writeArrayField("links", getLinks(), (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("msftCreated")) {
            if (getMsftCreated() == null) {
                jsonWriter.writeNullField("msft:_created");
            } else {
                jsonWriter.writeStringField("msft:_created", getMsftCreated());
            }
        }
        if (updatedProperties.contains("msftUpdated")) {
            if (getMsftUpdated() == null) {
                jsonWriter.writeNullField("msft:_updated");
            } else {
                jsonWriter.writeStringField("msft:_updated", getMsftUpdated());
            }
        }
        if (updatedProperties.contains("msftShortDescription")) {
            if (getMsftShortDescription() == null) {
                jsonWriter.writeNullField("msft:short_description");
            } else {
                jsonWriter.writeStringField("msft:short_description", getMsftShortDescription());
            }
        }
        if (updatedProperties.contains("stacExtensions")) {
            if (getStacExtensions() == null) {
                jsonWriter.writeNullField("stac_extensions");
            } else {
                jsonWriter.writeArrayField("stac_extensions", getStacExtensions(),
                    (writer, element) -> writer.writeString(element));
            }
        }
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("features")) {
            if (this.features == null) {
                jsonWriter.writeNullField("features");
            } else {
                jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("bbox")) {
            if (this.bbox == null) {
                jsonWriter.writeNullField("bbox");
            } else {
                jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
            }
        }
        if (updatedProperties.contains("context")) {
            if (this.context == null) {
                jsonWriter.writeNullField("context");
            } else {
                JsonMergePatchHelper.getContextExtensionAccessor().prepareModelForJsonMergePatch(this.context, true);
                jsonWriter.writeJsonField("context", this.context);
                JsonMergePatchHelper.getContextExtensionAccessor().prepareModelForJsonMergePatch(this.context, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ItemCollectionModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ItemCollectionModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ItemCollectionModel.
     */
    @Generated
    public static ItemCollectionModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ItemCollectionModel deserializedItemCollectionModel = new ItemCollectionModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stac_version".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setStacVersion(deserializedItemCollectionModel, reader.getString());
                } else if ("links".equals(fieldName)) {
                    List<Link> links = reader.readArray(reader1 -> Link.fromJson(reader1));
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setLinks(deserializedItemCollectionModel, links);
                } else if ("msft:_created".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setMsftCreated(deserializedItemCollectionModel, reader.getString());
                } else if ("msft:_updated".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setMsftUpdated(deserializedItemCollectionModel, reader.getString());
                } else if ("msft:short_description".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setMsftShortDescription(deserializedItemCollectionModel, reader.getString());
                } else if ("stac_extensions".equals(fieldName)) {
                    List<String> stacExtensions = reader.readArray(reader1 -> reader1.getString());
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setStacExtensions(deserializedItemCollectionModel, stacExtensions);
                } else if ("type".equals(fieldName)) {
                    deserializedItemCollectionModel.type = StacModelType.fromString(reader.getString());
                } else if ("features".equals(fieldName)) {
                    List<StacItemModel> features = reader.readArray(reader1 -> StacItemModel.fromJson(reader1));
                    deserializedItemCollectionModel.features = features;
                } else if ("bbox".equals(fieldName)) {
                    List<Double> bbox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedItemCollectionModel.bbox = bbox;
                } else if ("context".equals(fieldName)) {
                    deserializedItemCollectionModel.context = ContextExtension.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedItemCollectionModel;
        });
    }
}
