// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Image format specifier for tile and image requests.
 */
public final class ImageType extends ExpandableStringEnum<ImageType> {
    /**
     * Portable Network Graphics format - supports transparency.
     */
    @Generated
    public static final ImageType PNG = fromString("png");

    /**
     * NumPy array format for raw data access.
     */
    @Generated
    public static final ImageType NPY = fromString("npy");

    /**
     * GeoTIFF format for georeferenced raster data.
     */
    @Generated
    public static final ImageType TIF = fromString("tif");

    /**
     * JPEG format - smaller file size but lossy compression.
     */
    @Generated
    public static final ImageType JPEG = fromString("jpeg");

    /**
     * Alternate extension for JPEG format.
     */
    @Generated
    public static final ImageType JPG = fromString("jpg");

    /**
     * JPEG 2000 format - supports both lossy and lossless compression.
     */
    @Generated
    public static final ImageType JP2 = fromString("jp2");

    /**
     * WebP format - modern image format with good compression.
     */
    @Generated
    public static final ImageType WEBP = fromString("webp");

    /**
     * Raw PNG format for access to unprocessed data.
     */
    @Generated
    public static final ImageType PNGRAW = fromString("pngraw");

    /**
     * Creates a new instance of ImageType value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public ImageType() {
    }

    /**
     * Creates or finds a ImageType from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding ImageType.
     */
    @Generated
    public static ImageType fromString(String name) {
        return fromString(name, ImageType.class);
    }

    /**
     * Gets known ImageType values.
     * 
     * @return known ImageType values.
     */
    @Generated
    public static Collection<ImageType> values() {
        return values(ImageType.class);
    }
}
