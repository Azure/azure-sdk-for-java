// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Search model.
 * 
 * Overrides the validation for datetime from the base request model.
 * 
 * Defines parameters for a STAC search POST request.
 */
@Fluent
public final class SearchPostRequest implements JsonSerializable<SearchPostRequest> {
    /*
     * List of collection IDs to search within.
     */
    @Generated
    private List<String> collections;

    /*
     * List of specific item IDs to return.
     */
    @Generated
    private List<String> ids;

    /*
     * Bounding box for spatial filtering in format [west, south, east, north].
     */
    @Generated
    private List<Double> bbox;

    /*
     * GeoJSON geometry for spatial filtering.
     */
    @Generated
    private Geometry intersects;

    /*
     * Temporal filter in RFC 3339 format, can be a single time or range.
     */
    @Generated
    private String datetime;

    /*
     * Maximum number of results to return.
     */
    @Generated
    private Integer limit;

    /*
     * Conf
     * 
     * Overrides datetime validation from the base request model.
     */
    @Generated
    private Map<String, BinaryData> conf;

    /*
     * Whether to sign asset URLs in the response.
     */
    @Generated
    private SignType sign;

    /*
     * URL signature duration in seconds.
     */
    @Generated
    private Integer duration;

    /*
     * STAC Query
     * 
     * See the [STAC Query Extension](https://github.com/stac-api-extensions/query).
     */
    @Generated
    private StacQuery query;

    /*
     * Sort criteria for the search results.
     * 
     * See the [STAC Sort Extension](https://github.com/stac-api-extensions/sort).
     */
    @Generated
    private List<SortExtension> sortBy;

    /*
     * Specifies which fields to include or exclude in the STAC search results.
     * 
     * See the [STAC Fields Extension](https://github.com/stac-api-extensions/fields).
     */
    @Generated
    private List<SearchPostRequestFields> fields;

    /*
     * CQL2 Filter
     * 
     * See the [STAC Filter Extension](https://github.com/stac-api-extensions/filter).
     */
    @Generated
    private String filter;

    /*
     * Coordinate reference system for the filter.
     */
    @Generated
    private String filterCrs;

    /*
     * Filter language to use for the filter expression.
     */
    @Generated
    private FilterLang filterLang;

    /*
     * Pagination token for fetching the next set of results.
     */
    @Generated
    private String token;

    /**
     * Creates an instance of SearchPostRequest class.
     */
    @Generated
    public SearchPostRequest() {
    }

    /**
     * Get the collections property: List of collection IDs to search within.
     * 
     * @return the collections value.
     */
    @Generated
    public List<String> getCollections() {
        return this.collections;
    }

    /**
     * Set the collections property: List of collection IDs to search within.
     * 
     * @param collections the collections value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setCollections(List<String> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the ids property: List of specific item IDs to return.
     * 
     * @return the ids value.
     */
    @Generated
    public List<String> getIds() {
        return this.ids;
    }

    /**
     * Set the ids property: List of specific item IDs to return.
     * 
     * @param ids the ids value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setIds(List<String> ids) {
        this.ids = ids;
        return this;
    }

    /**
     * Get the bbox property: Bounding box for spatial filtering in format [west, south, east, north].
     * 
     * @return the bbox value.
     */
    @Generated
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: Bounding box for spatial filtering in format [west, south, east, north].
     * 
     * @param bbox the bbox value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setBbox(List<Double> bbox) {
        this.bbox = bbox;
        return this;
    }

    /**
     * Get the intersects property: GeoJSON geometry for spatial filtering.
     * 
     * @return the intersects value.
     */
    @Generated
    public Geometry getIntersects() {
        return this.intersects;
    }

    /**
     * Set the intersects property: GeoJSON geometry for spatial filtering.
     * 
     * @param intersects the intersects value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setIntersects(Geometry intersects) {
        this.intersects = intersects;
        return this;
    }

    /**
     * Get the datetime property: Temporal filter in RFC 3339 format, can be a single time or range.
     * 
     * @return the datetime value.
     */
    @Generated
    public String getDatetime() {
        return this.datetime;
    }

    /**
     * Set the datetime property: Temporal filter in RFC 3339 format, can be a single time or range.
     * 
     * @param datetime the datetime value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setDatetime(String datetime) {
        this.datetime = datetime;
        return this;
    }

    /**
     * Get the limit property: Maximum number of results to return.
     * 
     * @return the limit value.
     */
    @Generated
    public Integer getLimit() {
        return this.limit;
    }

    /**
     * Set the limit property: Maximum number of results to return.
     * 
     * @param limit the limit value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setLimit(Integer limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the conf property: Conf
     * 
     * Overrides datetime validation from the base request model.
     * 
     * @return the conf value.
     */
    @Generated
    public Map<String, BinaryData> getConf() {
        return this.conf;
    }

    /**
     * Set the conf property: Conf
     * 
     * Overrides datetime validation from the base request model.
     * 
     * @param conf the conf value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setConf(Map<String, BinaryData> conf) {
        this.conf = conf;
        return this;
    }

    /**
     * Get the sign property: Whether to sign asset URLs in the response.
     * 
     * @return the sign value.
     */
    @Generated
    public SignType getSign() {
        return this.sign;
    }

    /**
     * Set the sign property: Whether to sign asset URLs in the response.
     * 
     * @param sign the sign value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setSign(SignType sign) {
        this.sign = sign;
        return this;
    }

    /**
     * Get the duration property: URL signature duration in seconds.
     * 
     * @return the duration value.
     */
    @Generated
    public Integer getDuration() {
        return this.duration;
    }

    /**
     * Set the duration property: URL signature duration in seconds.
     * 
     * @param duration the duration value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setDuration(Integer duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the query property: STAC Query
     * 
     * See the [STAC Query Extension](https://github.com/stac-api-extensions/query).
     * 
     * @return the query value.
     */
    @Generated
    public StacQuery getQuery() {
        return this.query;
    }

    /**
     * Set the query property: STAC Query
     * 
     * See the [STAC Query Extension](https://github.com/stac-api-extensions/query).
     * 
     * @param query the query value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setQuery(StacQuery query) {
        this.query = query;
        return this;
    }

    /**
     * Get the sortBy property: Sort criteria for the search results.
     * 
     * See the [STAC Sort Extension](https://github.com/stac-api-extensions/sort).
     * 
     * @return the sortBy value.
     */
    @Generated
    public List<SortExtension> getSortBy() {
        return this.sortBy;
    }

    /**
     * Set the sortBy property: Sort criteria for the search results.
     * 
     * See the [STAC Sort Extension](https://github.com/stac-api-extensions/sort).
     * 
     * @param sortBy the sortBy value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setSortBy(List<SortExtension> sortBy) {
        this.sortBy = sortBy;
        return this;
    }

    /**
     * Get the fields property: Specifies which fields to include or exclude in the STAC search results.
     * 
     * See the [STAC Fields Extension](https://github.com/stac-api-extensions/fields).
     * 
     * @return the fields value.
     */
    @Generated
    public List<SearchPostRequestFields> getFields() {
        return this.fields;
    }

    /**
     * Set the fields property: Specifies which fields to include or exclude in the STAC search results.
     * 
     * See the [STAC Fields Extension](https://github.com/stac-api-extensions/fields).
     * 
     * @param fields the fields value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setFields(List<SearchPostRequestFields> fields) {
        this.fields = fields;
        return this;
    }

    /**
     * Get the filter property: CQL2 Filter
     * 
     * See the [STAC Filter Extension](https://github.com/stac-api-extensions/filter).
     * 
     * @return the filter value.
     */
    @Generated
    public String getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: CQL2 Filter
     * 
     * See the [STAC Filter Extension](https://github.com/stac-api-extensions/filter).
     * 
     * @param filter the filter value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setFilter(String filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the filterCrs property: Coordinate reference system for the filter.
     * 
     * @return the filterCrs value.
     */
    @Generated
    public String getFilterCrs() {
        return this.filterCrs;
    }

    /**
     * Set the filterCrs property: Coordinate reference system for the filter.
     * 
     * @param filterCrs the filterCrs value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setFilterCrs(String filterCrs) {
        this.filterCrs = filterCrs;
        return this;
    }

    /**
     * Get the filterLang property: Filter language to use for the filter expression.
     * 
     * @return the filterLang value.
     */
    @Generated
    public FilterLang getFilterLang() {
        return this.filterLang;
    }

    /**
     * Set the filterLang property: Filter language to use for the filter expression.
     * 
     * @param filterLang the filterLang value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setFilterLang(FilterLang filterLang) {
        this.filterLang = filterLang;
        return this;
    }

    /**
     * Get the token property: Pagination token for fetching the next set of results.
     * 
     * @return the token value.
     */
    @Generated
    public String getToken() {
        return this.token;
    }

    /**
     * Set the token property: Pagination token for fetching the next set of results.
     * 
     * @param token the token value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("collections", this.collections, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ids", this.ids, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeJsonField("intersects", this.intersects);
        jsonWriter.writeStringField("datetime", this.datetime);
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeMapField("conf", this.conf,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("sign", this.sign == null ? null : this.sign.toString());
        jsonWriter.writeNumberField("duration", this.duration);
        jsonWriter.writeJsonField("query", this.query);
        jsonWriter.writeArrayField("sortby", this.sortBy, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("fields", this.fields, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("filter", this.filter);
        jsonWriter.writeStringField("filter-crs", this.filterCrs);
        jsonWriter.writeStringField("filter-lang", this.filterLang == null ? null : this.filterLang.toString());
        jsonWriter.writeStringField("token", this.token);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchPostRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchPostRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchPostRequest.
     */
    @Generated
    public static SearchPostRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchPostRequest deserializedSearchPostRequest = new SearchPostRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collections".equals(fieldName)) {
                    List<String> collections = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchPostRequest.collections = collections;
                } else if ("ids".equals(fieldName)) {
                    List<String> ids = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchPostRequest.ids = ids;
                } else if ("bbox".equals(fieldName)) {
                    List<Double> bbox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedSearchPostRequest.bbox = bbox;
                } else if ("intersects".equals(fieldName)) {
                    deserializedSearchPostRequest.intersects = Geometry.fromJson(reader);
                } else if ("datetime".equals(fieldName)) {
                    deserializedSearchPostRequest.datetime = reader.getString();
                } else if ("limit".equals(fieldName)) {
                    deserializedSearchPostRequest.limit = reader.getNullable(JsonReader::getInt);
                } else if ("conf".equals(fieldName)) {
                    Map<String, BinaryData> conf = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedSearchPostRequest.conf = conf;
                } else if ("sign".equals(fieldName)) {
                    deserializedSearchPostRequest.sign = SignType.fromString(reader.getString());
                } else if ("duration".equals(fieldName)) {
                    deserializedSearchPostRequest.duration = reader.getNullable(JsonReader::getInt);
                } else if ("query".equals(fieldName)) {
                    deserializedSearchPostRequest.query = StacQuery.fromJson(reader);
                } else if ("sortby".equals(fieldName)) {
                    List<SortExtension> sortBy = reader.readArray(reader1 -> SortExtension.fromJson(reader1));
                    deserializedSearchPostRequest.sortBy = sortBy;
                } else if ("fields".equals(fieldName)) {
                    List<SearchPostRequestFields> fields
                        = reader.readArray(reader1 -> SearchPostRequestFields.fromJson(reader1));
                    deserializedSearchPostRequest.fields = fields;
                } else if ("filter".equals(fieldName)) {
                    deserializedSearchPostRequest.filter = reader.getString();
                } else if ("filter-crs".equals(fieldName)) {
                    deserializedSearchPostRequest.filterCrs = reader.getString();
                } else if ("filter-lang".equals(fieldName)) {
                    deserializedSearchPostRequest.filterLang = FilterLang.fromString(reader.getString());
                } else if ("token".equals(fieldName)) {
                    deserializedSearchPostRequest.token = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchPostRequest;
        });
    }
}
