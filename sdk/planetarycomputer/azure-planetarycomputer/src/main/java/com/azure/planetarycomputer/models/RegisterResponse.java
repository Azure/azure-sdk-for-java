// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Response from a successful mosaic registration with search ID and related links.
 */
@Immutable
public final class RegisterResponse implements JsonSerializable<RegisterResponse> {
    /*
     * Unique identifier for the registered search
     */
    @Generated
    private final String searchId;

    /*
     * Related links for the registered mosaic
     */
    @Generated
    private List<Link> links;

    /**
     * Creates an instance of RegisterResponse class.
     * 
     * @param searchId the searchId value to set.
     */
    @Generated
    private RegisterResponse(String searchId) {
        this.searchId = searchId;
    }

    /**
     * Get the searchId property: Unique identifier for the registered search.
     * 
     * @return the searchId value.
     */
    @Generated
    public String getSearchId() {
        return this.searchId;
    }

    /**
     * Get the links property: Related links for the registered mosaic.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("searchId", this.searchId);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegisterResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegisterResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RegisterResponse.
     */
    @Generated
    public static RegisterResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String searchId = null;
            List<Link> links = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("searchId".equals(fieldName)) {
                    searchId = reader.getString();
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            RegisterResponse deserializedRegisterResponse = new RegisterResponse(searchId);
            deserializedRegisterResponse.links = links;

            return deserializedRegisterResponse;
        });
    }
}
