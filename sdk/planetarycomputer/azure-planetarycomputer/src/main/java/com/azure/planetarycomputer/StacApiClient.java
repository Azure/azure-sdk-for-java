// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.TypeReference;
import com.azure.planetarycomputer.implementation.StacApiClientImpl;
import com.azure.planetarycomputer.models.ConformanceClasses;
import com.azure.planetarycomputer.models.FeatureCollections;
import com.azure.planetarycomputer.models.ItemCollectionModel;
import com.azure.planetarycomputer.models.JsonSchema;
import com.azure.planetarycomputer.models.LandingPage;
import com.azure.planetarycomputer.models.Operation;
import com.azure.planetarycomputer.models.QueryableDefinition;
import com.azure.planetarycomputer.models.SearchPostRequest;
import com.azure.planetarycomputer.models.SignType;
import com.azure.planetarycomputer.models.StacCollectionModel;
import com.azure.planetarycomputer.models.StacItemModel;
import com.azure.planetarycomputer.models.StacItemOrItemCollection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Initializes a new instance of the synchronous StacApiClient type.
 */
@ServiceClient(builder = StacApiClientBuilder.class)
public final class StacApiClient {
    @Generated
    private final StacApiClientImpl serviceClient;

    /**
     * Initializes an instance of StacApiClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    StacApiClient(StacApiClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Landing Page
     * 
     * Endpoint.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     title: String (Optional)
     *     stac_version: String (Optional)
     *     conformsTo (Required): [
     *         String (Required)
     *     ]
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     type: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
     * 
     * Represents the STAC API landing page with links to available resources along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStacLandingPageWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getStacLandingPageWithResponse(requestOptions);
    }

    /**
     * Get Collections
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>String</td><td>No</td><td>Whether to sign asset URLs in the response. Allowed values:
     * "true", "false".</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>URL signature duration in seconds.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     collections (Required): [
     *          (Required){
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             id: String (Required)
     *             description: String (Required)
     *             stac_version: String (Optional)
     *             links (Required): [
     *                 (recursive schema, see above)
     *             ]
     *             title: String (Optional)
     *             type: String (Optional)
     *             assets (Optional): {
     *                 String (Required): {
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                          (Optional){
     *                             name: String (Optional, Required on create)
     *                             description: String (Optional)
     *                             roles (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             url: String (Optional)
     *                         }
     *                     ]
     *                     gsd: Double (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     href: String (Optional, Required on create)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             license: String (Required)
     *             extent (Required): {
     *                 spatial (Required): {
     *                     bbox (Optional): [
     *                          (Optional)[
     *                             double (Optional)
     *                         ]
     *                     ]
     *                 }
     *                 temporal (Required): {
     *                     interval (Required): [
     *                          (Required)[
     *                             String (Required)
     *                         ]
     *                     ]
     *                 }
     *             }
     *             keywords (Optional): [
     *                 String (Optional)
     *             ]
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             summaries (Optional): {
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collections
     * 
     * Endpoint along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllCollectionsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAllCollectionsWithResponse(requestOptions);
    }

    /**
     * Create Collection
     * 
     * Create a new collection in the GeoCatalog instance.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body Request collection body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateCollection(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateCollection(body, requestOptions);
    }

    /**
     * Get Collection
     * 
     * Get a collection in the GeoCatalog instance.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>String</td><td>No</td><td>Whether to sign asset URLs in the response. Allowed values:
     * "true", "false".</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>URL signature duration in seconds.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection
     * 
     * Get a collection in the GeoCatalog instance along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCollectionWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getCollectionWithResponse(collectionId, requestOptions);
    }

    /**
     * Create or update Collection
     * 
     * Create or replace a collection in the GeoCatalog instance.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param body Request collection body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateOrReplaceCollection(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrReplaceCollection(collectionId, body, requestOptions);
    }

    /**
     * Delete Collection
     * 
     * Delete a collection in the GeoCatalog instance.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteCollection(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteCollection(collectionId, requestOptions);
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.").
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Long</td><td>No</td><td>The optional limit parameter recommends the number of items that
     * should be present in the response document.
     * 
     * If the limit parameter value is greater than advertised limit maximum, the server must return the
     * maximum possible number of items, rather than responding with an error.
     * 
     * Only items are counted that are on the first level of the collection in the response document.
     * Nested objects contained within the explicitly requested items must not be counted.
     * 
     * Minimum = 1. Maximum = 10000. Default = 10.</td></tr>
     * <tr><td>bbox</td><td>List&lt;String&gt;</td><td>No</td><td>Only features that have a geometry that intersects the
     * bounding box are selected.
     * The bounding box is provided as four or six numbers, depending on whether the
     * coordinate reference system includes a vertical axis (height or depth):
     * 
     * - Lower left corner, coordinate axis 1
     * - Lower left corner, coordinate axis 2
     * - Minimum value, coordinate axis 3 (optional)
     * - Upper right corner, coordinate axis 1
     * - Upper right corner, coordinate axis 2
     * - Maximum value, coordinate axis 3 (optional)
     * 
     * The coordinate reference system of the values is WGS 84 longitude/latitude
     * (http://www.opengis.net/def/crs/OGC/1.3/CRS84).
     * 
     * For WGS 84 longitude/latitude the values are in most cases the sequence of
     * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
     * However, in cases where the box spans the antimeridian the first value
     * (west-most box edge) is larger than the third value (east-most box edge).
     * 
     * If the vertical axis is included, the third and the sixth number are
     * the bottom and the top of the 3-dimensional bounding box.
     * 
     * If a feature has multiple spatial geometry properties, it is the decision of the
     * server whether only a single spatial geometry property is used to determine
     * the extent or all relevant geometries. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>Either a date-time or an interval, open or closed. Date and
     * time expressions
     * adhere to RFC 3339. Open intervals are expressed using double-dots.
     * 
     * Examples:
     * 
     * - A date-time: "2018-02-12T23:20:50Z"
     * - A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
     * - Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"
     * 
     * Only features that have a temporal property that intersects the value of
     * `datetime` are selected.
     * 
     * If a feature has multiple temporal properties, it is the decision of the
     * server whether only a single temporal property is used to determine
     * the extent or all relevant temporal properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     features (Optional, Required on create): [
     *          (Optional, Required on create){
     *             type: String(Feature/FeatureCollection) (Required)
     *             stac_version: String (Optional)
     *             links (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             geometry (Optional, Required on create): {
     *                 type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *                 bbox (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             bbox (Optional, Required on create): [
     *                 double (Optional, Required on create)
     *             ]
     *             id: String (Required)
     *             collection: String (Optional)
     *             properties (Optional, Required on create): {
     *                 platform: String (Optional)
     *                 instruments (Optional): [
     *                     String (Optional)
     *                 ]
     *                 constellation: String (Optional)
     *                 mission: String (Optional)
     *                 providers (Optional): [
     *                      (Optional){
     *                         name: String (Optional, Required on create)
     *                         description: String (Optional)
     *                         roles (Optional): [
     *                             String (Optional)
     *                         ]
     *                         url: String (Optional)
     *                     }
     *                 ]
     *                 gsd: Double (Optional)
     *                 created: OffsetDateTime (Optional)
     *                 updated: OffsetDateTime (Optional)
     *                 title: String (Optional)
     *                 description: String (Optional)
     *                 datetime: String (Optional, Required on create)
     *                 start_datetime: OffsetDateTime (Optional)
     *                 end_datetime: OffsetDateTime (Optional)
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *             assets (Optional, Required on create): {
     *                 String (Required): {
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     gsd: Double (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     href: String (Optional, Required on create)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             _msft:ts: String (Optional)
     *             _msft:etag: String (Optional)
     *         }
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     context (Optional): {
     *         returned: int (Optional, Required on create)
     *         limit: Integer (Optional)
     *         matched: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getItemsAsFeaturesWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getItemsAsFeaturesWithResponse(collectionId, requestOptions);
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param body STAC Item or ItemCollection
     * 
     * Represents a STAC Item or ItemCollectionModel as defined by the STAC 1.0.0 standard.
     * 
     * **Item**: A GeoJSON Feature that represents a single spatiotemporal asset.
     * It includes metadata such as geometry, datetime, and links to related assets.
     * Example: A satellite image with its metadata.
     * 
     * **ItemCollectionModel**: A GeoJSON FeatureCollection that contains multiple Items.
     * It is used to group multiple related Items together, such as a collection of satellite images.
     * 
     * This union allows the request body to accept either a single Item or a collection of Items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateItem(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateItem(collectionId, body, requestOptions);
    }

    /**
     * Fetch a single STAC Item.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     geometry (Optional, Required on create): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     bbox (Optional, Required on create): [
     *         double (Optional, Required on create)
     *     ]
     *     id: String (Required)
     *     collection: String (Optional)
     *     properties (Optional, Required on create): {
     *         platform: String (Optional)
     *         instruments (Optional): [
     *             String (Optional)
     *         ]
     *         constellation: String (Optional)
     *         mission: String (Optional)
     *         providers (Optional): [
     *              (Optional){
     *                 name: String (Optional, Required on create)
     *                 description: String (Optional)
     *                 roles (Optional): [
     *                     String (Optional)
     *                 ]
     *                 url: String (Optional)
     *             }
     *         ]
     *         gsd: Double (Optional)
     *         created: OffsetDateTime (Optional)
     *         updated: OffsetDateTime (Optional)
     *         title: String (Optional)
     *         description: String (Optional)
     *         datetime: String (Optional, Required on create)
     *         start_datetime: OffsetDateTime (Optional)
     *         end_datetime: OffsetDateTime (Optional)
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     assets (Optional, Required on create): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     _msft:ts: String (Optional)
     *     _msft:etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a STAC Item, which is a GeoJSON Feature with additional metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getItemWithResponse(String collectionId, String itemId, RequestOptions requestOptions) {
        return this.serviceClient.getItemWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Create or replace a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     geometry (Optional, Required on create): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     bbox (Optional, Required on create): [
     *         double (Optional, Required on create)
     *     ]
     *     id: String (Required)
     *     collection: String (Optional)
     *     properties (Optional, Required on create): {
     *         platform: String (Optional)
     *         instruments (Optional): [
     *             String (Optional)
     *         ]
     *         constellation: String (Optional)
     *         mission: String (Optional)
     *         providers (Optional): [
     *              (Optional){
     *                 name: String (Optional, Required on create)
     *                 description: String (Optional)
     *                 roles (Optional): [
     *                     String (Optional)
     *                 ]
     *                 url: String (Optional)
     *             }
     *         ]
     *         gsd: Double (Optional)
     *         created: OffsetDateTime (Optional)
     *         updated: OffsetDateTime (Optional)
     *         title: String (Optional)
     *         description: String (Optional)
     *         datetime: String (Optional, Required on create)
     *         start_datetime: OffsetDateTime (Optional)
     *         end_datetime: OffsetDateTime (Optional)
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     assets (Optional, Required on create): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     _msft:ts: String (Optional)
     *     _msft:etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param body STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateOrReplaceItem(String collectionId, String itemId,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrReplaceItem(collectionId, itemId, body, requestOptions);
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     geometry (Optional, Required on create): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     bbox (Optional, Required on create): [
     *         double (Optional, Required on create)
     *     ]
     *     id: String (Required)
     *     collection: String (Optional)
     *     properties (Optional, Required on create): {
     *         platform: String (Optional)
     *         instruments (Optional): [
     *             String (Optional)
     *         ]
     *         constellation: String (Optional)
     *         mission: String (Optional)
     *         providers (Optional): [
     *              (Optional){
     *                 name: String (Optional, Required on create)
     *                 description: String (Optional)
     *                 roles (Optional): [
     *                     String (Optional)
     *                 ]
     *                 url: String (Optional)
     *             }
     *         ]
     *         gsd: Double (Optional)
     *         created: OffsetDateTime (Optional)
     *         updated: OffsetDateTime (Optional)
     *         title: String (Optional)
     *         description: String (Optional)
     *         datetime: String (Optional, Required on create)
     *         start_datetime: OffsetDateTime (Optional)
     *         end_datetime: OffsetDateTime (Optional)
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     assets (Optional, Required on create): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     _msft:ts: String (Optional)
     *     _msft:etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param body STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUpdateItem(String collectionId, String itemId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginUpdateItem(collectionId, itemId, body, requestOptions);
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *     type: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     collectionId: String (Optional)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Succeeded/Canceled/Canceling/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     additionalInformation (Optional): {
     *         String: String (Required)
     *     }
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteItem(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteItem(collectionId, itemId, requestOptions);
    }

    /**
     * Queryables
     * 
     * Endpoint.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *      (Optional): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return jSON Schema structure for STAC Queryables along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllQueryablesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAllQueryablesWithResponse(requestOptions);
    }

    /**
     * Collection Queryables
     * 
     * Endpoint.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *      (Optional): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Collection ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return jSON Schema structure for STAC Queryables along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllQueryablesByCollectionWithResponse(String collectionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAllQueryablesByCollectionWithResponse(collectionId, requestOptions);
    }

    /**
     * Set Collection Queryables
     * 
     * Set queryables for a collection given a list of queryable definitions.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         name: String (Required)
     *         definition (Required): {
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *         create_index: Boolean (Optional)
     *         data_type: String(string/number/boolean/timestamp/date) (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         name: String (Required)
     *         definition (Required): {
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *         create_index: Boolean (Optional)
     *         data_type: String(string/number/boolean/timestamp/date) (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Request queryable definition body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createQueryablesWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createQueryablesWithResponse(collectionId, body, requestOptions);
    }

    /**
     * Conformance Classes
     * 
     * Endpoint.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     conformsTo (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
     * 
     * Represents the OGC API conformance declaration along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getConformanceClassWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getConformanceClassWithResponse(requestOptions);
    }

    /**
     * Search
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>collections</td><td>List&lt;String&gt;</td><td>No</td><td>List of Collection IDs to include in the
     * search. Only items in these collections will be searched. In the form of "," separated string.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Array of Item IDs to return specific items. In the form
     * of "," separated string.</td></tr>
     * <tr><td>bbox</td><td>List&lt;Double&gt;</td><td>No</td><td>Bounding box for spatial filtering in format [west,
     * south, east, north]. In the form of "," separated string.</td></tr>
     * <tr><td>intersects</td><td>String</td><td>No</td><td>GeoJSON geometry for spatial filtering.</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>Temporal filter in RFC 3339 format, can be a single time or
     * range.</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>Maximum number of results to return.</td></tr>
     * <tr><td>sign</td><td>String</td><td>No</td><td>Whether to sign asset URLs in the response. Allowed values:
     * "true", "false".</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>URL signature duration in seconds.</td></tr>
     * <tr><td>query</td><td>String</td><td>No</td><td>Property-based filtering expressed as a JSON object.</td></tr>
     * <tr><td>sortby</td><td>String</td><td>No</td><td>Sort order for items. Format is property name prefixed with "+"
     * for ascending or "-" for descending.</td></tr>
     * <tr><td>fields</td><td>String</td><td>No</td><td>Determines which fields to include in the response. Format is
     * comma-separated field names with "-" prefix to exclude fields.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>CQL filter expression for advanced filtering of items.</td></tr>
     * <tr><td>token</td><td>String</td><td>No</td><td>Pagination token for fetching the next set of results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     features (Optional, Required on create): [
     *          (Optional, Required on create){
     *             type: String(Feature/FeatureCollection) (Required)
     *             stac_version: String (Optional)
     *             links (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             geometry (Optional, Required on create): {
     *                 type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *                 bbox (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             bbox (Optional, Required on create): [
     *                 double (Optional, Required on create)
     *             ]
     *             id: String (Required)
     *             collection: String (Optional)
     *             properties (Optional, Required on create): {
     *                 platform: String (Optional)
     *                 instruments (Optional): [
     *                     String (Optional)
     *                 ]
     *                 constellation: String (Optional)
     *                 mission: String (Optional)
     *                 providers (Optional): [
     *                      (Optional){
     *                         name: String (Optional, Required on create)
     *                         description: String (Optional)
     *                         roles (Optional): [
     *                             String (Optional)
     *                         ]
     *                         url: String (Optional)
     *                     }
     *                 ]
     *                 gsd: Double (Optional)
     *                 created: OffsetDateTime (Optional)
     *                 updated: OffsetDateTime (Optional)
     *                 title: String (Optional)
     *                 description: String (Optional)
     *                 datetime: String (Optional, Required on create)
     *                 start_datetime: OffsetDateTime (Optional)
     *                 end_datetime: OffsetDateTime (Optional)
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *             assets (Optional, Required on create): {
     *                 String (Required): {
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     gsd: Double (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     href: String (Optional, Required on create)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             _msft:ts: String (Optional)
     *             _msft:etag: String (Optional)
     *         }
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     context (Optional): {
     *         returned: int (Optional, Required on create)
     *         limit: Integer (Optional)
     *         matched: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSearchOperationsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getSearchOperationsWithResponse(requestOptions);
    }

    /**
     * Search
     * 
     * Endpoint.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     intersects (Optional): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     datetime: String (Optional)
     *     limit: Integer (Optional)
     *     conf (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     sign: String(true/false) (Optional)
     *     duration: Integer (Optional)
     *     query (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     sortby (Optional): [
     *          (Optional){
     *             field: String (Required)
     *             direction: String(asc/desc) (Required)
     *         }
     *     ]
     *     fields (Optional): [
     *          (Optional){
     *             include (Optional): [
     *                 String (Optional)
     *             ]
     *             exclude (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     filter: String (Optional)
     *     filter-crs: String (Optional)
     *     filter-lang: String(cql-json/cql2-json/cql2-text) (Optional)
     *     token: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     features (Optional, Required on create): [
     *          (Optional, Required on create){
     *             type: String(Feature/FeatureCollection) (Required)
     *             stac_version: String (Optional)
     *             links (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             geometry (Optional, Required on create): {
     *                 type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *                 bbox (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             bbox (Optional, Required on create): [
     *                 double (Optional, Required on create)
     *             ]
     *             id: String (Required)
     *             collection: String (Optional)
     *             properties (Optional, Required on create): {
     *                 platform: String (Optional)
     *                 instruments (Optional): [
     *                     String (Optional)
     *                 ]
     *                 constellation: String (Optional)
     *                 mission: String (Optional)
     *                 providers (Optional): [
     *                      (Optional){
     *                         name: String (Optional, Required on create)
     *                         description: String (Optional)
     *                         roles (Optional): [
     *                             String (Optional)
     *                         ]
     *                         url: String (Optional)
     *                     }
     *                 ]
     *                 gsd: Double (Optional)
     *                 created: OffsetDateTime (Optional)
     *                 updated: OffsetDateTime (Optional)
     *                 title: String (Optional)
     *                 description: String (Optional)
     *                 datetime: String (Optional, Required on create)
     *                 start_datetime: OffsetDateTime (Optional)
     *                 end_datetime: OffsetDateTime (Optional)
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *             assets (Optional, Required on create): {
     *                 String (Required): {
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     gsd: Double (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     href: String (Optional, Required on create)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             _msft:ts: String (Optional)
     *             _msft:etag: String (Optional)
     *         }
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     context (Optional): {
     *         returned: int (Optional, Required on create)
     *         limit: Integer (Optional)
     *         matched: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body Request body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createSearchOperationsWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createSearchOperationsWithResponse(body, requestOptions);
    }

    /**
     * Landing Page
     * 
     * Endpoint.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
     * 
     * Represents the STAC API landing page with links to available resources.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingPage getStacLandingPage() {
        // Generated convenience method for getStacLandingPageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStacLandingPageWithResponse(requestOptions).getValue().toObject(LandingPage.class);
    }

    /**
     * Get Collections
     * 
     * Endpoint.
     * 
     * @param sign Whether to sign asset URLs in the response.
     * @param duration URL signature duration in seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collections
     * 
     * Endpoint.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FeatureCollections getAllCollections(SignType sign, Integer duration) {
        // Generated convenience method for getAllCollectionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sign != null) {
            requestOptions.addQueryParam("sign", sign.toString(), false);
        }
        if (duration != null) {
            requestOptions.addQueryParam("duration", String.valueOf(duration), false);
        }
        return getAllCollectionsWithResponse(requestOptions).getValue().toObject(FeatureCollections.class);
    }

    /**
     * Get Collections
     * 
     * Endpoint.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collections
     * 
     * Endpoint.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FeatureCollections getAllCollections() {
        // Generated convenience method for getAllCollectionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllCollectionsWithResponse(requestOptions).getValue().toObject(FeatureCollections.class);
    }

    /**
     * Create Collection
     * 
     * Create a new collection in the GeoCatalog instance.
     * 
     * @param body Request collection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginCreateCollection(StacCollectionModel body) {
        // Generated convenience method for beginCreateCollectionWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateCollectionWithModel(BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Get Collection
     * 
     * Get a collection in the GeoCatalog instance.
     * 
     * @param collectionId Unique identifier for the collection.
     * @param sign Whether to sign asset URLs in the response.
     * @param duration URL signature duration in seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection
     * 
     * Get a collection in the GeoCatalog instance.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StacCollectionModel getCollection(String collectionId, SignType sign, Integer duration) {
        // Generated convenience method for getCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sign != null) {
            requestOptions.addQueryParam("sign", sign.toString(), false);
        }
        if (duration != null) {
            requestOptions.addQueryParam("duration", String.valueOf(duration), false);
        }
        return getCollectionWithResponse(collectionId, requestOptions).getValue().toObject(StacCollectionModel.class);
    }

    /**
     * Get Collection
     * 
     * Get a collection in the GeoCatalog instance.
     * 
     * @param collectionId Unique identifier for the collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection
     * 
     * Get a collection in the GeoCatalog instance.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StacCollectionModel getCollection(String collectionId) {
        // Generated convenience method for getCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCollectionWithResponse(collectionId, requestOptions).getValue().toObject(StacCollectionModel.class);
    }

    /**
     * Create or update Collection
     * 
     * Create or replace a collection in the GeoCatalog instance.
     * 
     * @param collectionId Catalog collection id.
     * @param body Request collection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginCreateOrReplaceCollection(String collectionId, StacCollectionModel body) {
        // Generated convenience method for beginCreateOrReplaceCollectionWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateOrReplaceCollectionWithModel(collectionId, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Delete Collection
     * 
     * Delete a collection in the GeoCatalog instance.
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginDeleteCollection(String collectionId) {
        // Generated convenience method for beginDeleteCollectionWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteCollectionWithModel(collectionId, requestOptions);
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.").
     * 
     * @param collectionId Catalog collection id.
     * @param limit The optional limit parameter recommends the number of items that should be present in the response
     * document.
     * 
     * If the limit parameter value is greater than advertised limit maximum, the server must return the
     * maximum possible number of items, rather than responding with an error.
     * 
     * Only items are counted that are on the first level of the collection in the response document.
     * Nested objects contained within the explicitly requested items must not be counted.
     * 
     * Minimum = 1. Maximum = 10000. Default = 10.
     * @param bbox Only features that have a geometry that intersects the bounding box are selected.
     * The bounding box is provided as four or six numbers, depending on whether the
     * coordinate reference system includes a vertical axis (height or depth):
     * 
     * - Lower left corner, coordinate axis 1
     * - Lower left corner, coordinate axis 2
     * - Minimum value, coordinate axis 3 (optional)
     * - Upper right corner, coordinate axis 1
     * - Upper right corner, coordinate axis 2
     * - Maximum value, coordinate axis 3 (optional)
     * 
     * The coordinate reference system of the values is WGS 84 longitude/latitude
     * (http://www.opengis.net/def/crs/OGC/1.3/CRS84).
     * 
     * For WGS 84 longitude/latitude the values are in most cases the sequence of
     * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
     * However, in cases where the box spans the antimeridian the first value
     * (west-most box edge) is larger than the third value (east-most box edge).
     * 
     * If the vertical axis is included, the third and the sixth number are
     * the bottom and the top of the 3-dimensional bounding box.
     * 
     * If a feature has multiple spatial geometry properties, it is the decision of the
     * server whether only a single spatial geometry property is used to determine
     * the extent or all relevant geometries.
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions
     * adhere to RFC 3339. Open intervals are expressed using double-dots.
     * 
     * Examples:
     * 
     * - A date-time: "2018-02-12T23:20:50Z"
     * - A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
     * - Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"
     * 
     * Only features that have a temporal property that intersects the value of
     * `datetime` are selected.
     * 
     * If a feature has multiple temporal properties, it is the decision of the
     * server whether only a single temporal property is used to determine
     * the extent or all relevant temporal properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ItemCollectionModel getItemsAsFeatures(String collectionId, Long limit, List<String> bbox, String datetime) {
        // Generated convenience method for getItemsAsFeaturesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (bbox != null) {
            for (String paramItemValue : bbox) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("bbox", paramItemValue, false);
                }
            }
        }
        if (datetime != null) {
            requestOptions.addQueryParam("datetime", datetime, false);
        }
        return getItemsAsFeaturesWithResponse(collectionId, requestOptions).getValue()
            .toObject(ItemCollectionModel.class);
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.").
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ItemCollectionModel getItemsAsFeatures(String collectionId) {
        // Generated convenience method for getItemsAsFeaturesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getItemsAsFeaturesWithResponse(collectionId, requestOptions).getValue()
            .toObject(ItemCollectionModel.class);
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param body STAC Item or ItemCollection
     * 
     * Represents a STAC Item or ItemCollectionModel as defined by the STAC 1.0.0 standard.
     * 
     * **Item**: A GeoJSON Feature that represents a single spatiotemporal asset.
     * It includes metadata such as geometry, datetime, and links to related assets.
     * Example: A satellite image with its metadata.
     * 
     * **ItemCollectionModel**: A GeoJSON FeatureCollection that contains multiple Items.
     * It is used to group multiple related Items together, such as a collection of satellite images.
     * 
     * This union allows the request body to accept either a single Item or a collection of Items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginCreateItem(String collectionId, StacItemOrItemCollection body) {
        // Generated convenience method for beginCreateItemWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateItemWithModel(collectionId, BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Fetch a single STAC Item.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a STAC Item, which is a GeoJSON Feature with additional metadata.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StacItemModel getItem(String collectionId, String itemId) {
        // Generated convenience method for getItemWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getItemWithResponse(collectionId, itemId, requestOptions).getValue().toObject(StacItemModel.class);
    }

    /**
     * Create or replace a STAC item in a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param body STAC Item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginCreateOrReplaceItem(String collectionId, String itemId,
        StacItemModel body) {
        // Generated convenience method for beginCreateOrReplaceItemWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateOrReplaceItemWithModel(collectionId, itemId, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Delete a STAC item from a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of microsoft Planetary Computer Pro geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginDeleteItem(String collectionId, String itemId) {
        // Generated convenience method for beginDeleteItemWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteItemWithModel(collectionId, itemId, requestOptions);
    }

    /**
     * Queryables
     * 
     * Endpoint.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return jSON Schema structure for STAC Queryables.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JsonSchema getAllQueryables() {
        // Generated convenience method for getAllQueryablesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllQueryablesWithResponse(requestOptions).getValue().toObject(JsonSchema.class);
    }

    /**
     * Collection Queryables
     * 
     * Endpoint.
     * 
     * @param collectionId Collection ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return jSON Schema structure for STAC Queryables.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JsonSchema getAllQueryablesByCollection(String collectionId) {
        // Generated convenience method for getAllQueryablesByCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllQueryablesByCollectionWithResponse(collectionId, requestOptions).getValue()
            .toObject(JsonSchema.class);
    }

    /**
     * Set Collection Queryables
     * 
     * Set queryables for a collection given a list of queryable definitions.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Request queryable definition body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<QueryableDefinition> createQueryables(String collectionId, List<QueryableDefinition> body) {
        // Generated convenience method for createQueryablesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createQueryablesWithResponse(collectionId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_QUERYABLE_DEFINITION);
    }

    /**
     * Conformance Classes
     * 
     * Endpoint.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
     * 
     * Represents the OGC API conformance declaration.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConformanceClasses getConformanceClass() {
        // Generated convenience method for getConformanceClassWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getConformanceClassWithResponse(requestOptions).getValue().toObject(ConformanceClasses.class);
    }

    /**
     * Search
     * 
     * Endpoint.
     * 
     * @param collections List of Collection IDs to include in the search. Only items in these collections will be
     * searched.
     * @param ids Array of Item IDs to return specific items.
     * @param bbox Bounding box for spatial filtering in format [west, south, east, north].
     * @param intersects GeoJSON geometry for spatial filtering.
     * @param datetime Temporal filter in RFC 3339 format, can be a single time or range.
     * @param limit Maximum number of results to return.
     * @param sign Whether to sign asset URLs in the response.
     * @param duration URL signature duration in seconds.
     * @param query Property-based filtering expressed as a JSON object.
     * @param sortBy Sort order for items. Format is property name prefixed with "+" for ascending or "-" for
     * descending.
     * @param fields Determines which fields to include in the response. Format is comma-separated field names with "-"
     * prefix to exclude fields.
     * @param filter CQL filter expression for advanced filtering of items.
     * @param token Pagination token for fetching the next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ItemCollectionModel getSearchOperations(List<String> collections, List<String> ids, List<Double> bbox,
        String intersects, String datetime, Integer limit, SignType sign, Integer duration, String query, String sortBy,
        String fields, String filter, String token) {
        // Generated convenience method for getSearchOperationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (collections != null) {
            requestOptions.addQueryParam("collections",
                collections.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (ids != null) {
            requestOptions.addQueryParam("ids",
                ids.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (bbox != null) {
            requestOptions.addQueryParam("bbox",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(bbox, CollectionFormat.CSV), false);
        }
        if (intersects != null) {
            requestOptions.addQueryParam("intersects", intersects, false);
        }
        if (datetime != null) {
            requestOptions.addQueryParam("datetime", datetime, false);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (sign != null) {
            requestOptions.addQueryParam("sign", sign.toString(), false);
        }
        if (duration != null) {
            requestOptions.addQueryParam("duration", String.valueOf(duration), false);
        }
        if (query != null) {
            requestOptions.addQueryParam("query", query, false);
        }
        if (sortBy != null) {
            requestOptions.addQueryParam("sortby", sortBy, false);
        }
        if (fields != null) {
            requestOptions.addQueryParam("fields", fields, false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (token != null) {
            requestOptions.addQueryParam("token", token, false);
        }
        return getSearchOperationsWithResponse(requestOptions).getValue().toObject(ItemCollectionModel.class);
    }

    /**
     * Search
     * 
     * Endpoint.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ItemCollectionModel getSearchOperations() {
        // Generated convenience method for getSearchOperationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSearchOperationsWithResponse(requestOptions).getValue().toObject(ItemCollectionModel.class);
    }

    /**
     * Search
     * 
     * Endpoint.
     * 
     * @param body Request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
     * 
     * Represents a collection of STAC Items as a GeoJSON FeatureCollection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ItemCollectionModel createSearchOperations(SearchPostRequest body) {
        // Generated convenience method for createSearchOperationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createSearchOperationsWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(ItemCollectionModel.class);
    }

    @Generated
    private static final TypeReference<List<QueryableDefinition>> TYPE_REFERENCE_LIST_QUERYABLE_DEFINITION
        = new TypeReference<List<QueryableDefinition>>() {
        };
}
