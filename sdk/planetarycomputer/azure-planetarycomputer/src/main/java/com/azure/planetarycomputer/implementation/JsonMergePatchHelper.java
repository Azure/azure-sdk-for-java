// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.implementation;

import com.azure.planetarycomputer.com.azure.planetarycomputer.models.IngestionDefinition;
import com.azure.planetarycomputer.models.Asset;
import com.azure.planetarycomputer.models.ContextExtension;
import com.azure.planetarycomputer.models.Geometry;
import com.azure.planetarycomputer.models.ItemProperties;
import com.azure.planetarycomputer.models.Link;
import com.azure.planetarycomputer.models.Provider;
import com.azure.planetarycomputer.models.StacItemOrItemCollection;
import java.util.List;

/**
 * This is the Helper class to enable json merge patch serialization for a model.
 */
public class JsonMergePatchHelper {
    private static IngestionDefinitionAccessor ingestionDefinitionAccessor;

    public interface IngestionDefinitionAccessor {
        IngestionDefinition prepareModelForJsonMergePatch(IngestionDefinition ingestionDefinition,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(IngestionDefinition ingestionDefinition);
    }

    public static void setIngestionDefinitionAccessor(IngestionDefinitionAccessor accessor) {
        ingestionDefinitionAccessor = accessor;
    }

    public static IngestionDefinitionAccessor getIngestionDefinitionAccessor() {
        return ingestionDefinitionAccessor;
    }

    private static LinkAccessor linkAccessor;

    public interface LinkAccessor {
        Link prepareModelForJsonMergePatch(Link link, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(Link link);
    }

    public static void setLinkAccessor(LinkAccessor accessor) {
        linkAccessor = accessor;
    }

    public static LinkAccessor getLinkAccessor() {
        return linkAccessor;
    }

    private static AssetAccessor assetAccessor;

    public interface AssetAccessor {
        Asset prepareModelForJsonMergePatch(Asset asset, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(Asset asset);
    }

    public static void setAssetAccessor(AssetAccessor accessor) {
        assetAccessor = accessor;
    }

    public static AssetAccessor getAssetAccessor() {
        return assetAccessor;
    }

    private static ProviderAccessor providerAccessor;

    public interface ProviderAccessor {
        Provider prepareModelForJsonMergePatch(Provider provider, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(Provider provider);
    }

    public static void setProviderAccessor(ProviderAccessor accessor) {
        providerAccessor = accessor;
    }

    public static ProviderAccessor getProviderAccessor() {
        return providerAccessor;
    }

    private static StacItemOrItemCollectionAccessor stacItemOrItemCollectionAccessor;

    public interface StacItemOrItemCollectionAccessor {
        StacItemOrItemCollection prepareModelForJsonMergePatch(StacItemOrItemCollection stacItemOrItemCollection,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(StacItemOrItemCollection stacItemOrItemCollection);

        void setStacVersion(StacItemOrItemCollection stacItemOrItemCollection, String stacVersion);

        void setLinks(StacItemOrItemCollection stacItemOrItemCollection, List<Link> links);

        void setMsftCreated(StacItemOrItemCollection stacItemOrItemCollection, String msftCreated);

        void setMsftUpdated(StacItemOrItemCollection stacItemOrItemCollection, String msftUpdated);

        void setMsftShortDescription(StacItemOrItemCollection stacItemOrItemCollection, String msftShortDescription);

        void setStacExtensions(StacItemOrItemCollection stacItemOrItemCollection, List<String> stacExtensions);
    }

    public static void setStacItemOrItemCollectionAccessor(StacItemOrItemCollectionAccessor accessor) {
        stacItemOrItemCollectionAccessor = accessor;
    }

    public static StacItemOrItemCollectionAccessor getStacItemOrItemCollectionAccessor() {
        return stacItemOrItemCollectionAccessor;
    }

    private static GeometryAccessor geometryAccessor;

    public interface GeometryAccessor {
        Geometry prepareModelForJsonMergePatch(Geometry geometry, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(Geometry geometry);

        void setBbox(Geometry geometry, List<Double> bbox);
    }

    public static void setGeometryAccessor(GeometryAccessor accessor) {
        geometryAccessor = accessor;
    }

    public static GeometryAccessor getGeometryAccessor() {
        return geometryAccessor;
    }

    private static ItemPropertiesAccessor itemPropertiesAccessor;

    public interface ItemPropertiesAccessor {
        ItemProperties prepareModelForJsonMergePatch(ItemProperties itemProperties, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ItemProperties itemProperties);
    }

    public static void setItemPropertiesAccessor(ItemPropertiesAccessor accessor) {
        itemPropertiesAccessor = accessor;
    }

    public static ItemPropertiesAccessor getItemPropertiesAccessor() {
        return itemPropertiesAccessor;
    }

    private static ContextExtensionAccessor contextExtensionAccessor;

    public interface ContextExtensionAccessor {
        ContextExtension prepareModelForJsonMergePatch(ContextExtension contextExtension,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ContextExtension contextExtension);
    }

    public static void setContextExtensionAccessor(ContextExtensionAccessor accessor) {
        contextExtensionAccessor = accessor;
    }

    public static ContextExtensionAccessor getContextExtensionAccessor() {
        return contextExtensionAccessor;
    }
}
