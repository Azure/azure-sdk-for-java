// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User-specific collection settings for visualization.
 */
@Immutable
public final class UserCollectionSettings implements JsonSerializable<UserCollectionSettings> {
    /*
     * Settings for map tile visualization.
     */
    @Generated
    private final TileSettings tileSettings;

    /*
     * Settings for data mosaic visualization.
     */
    @Generated
    private final MosaicInfo mosaicInfo;

    /**
     * Creates an instance of UserCollectionSettings class.
     * 
     * @param tileSettings the tileSettings value to set.
     * @param mosaicInfo the mosaicInfo value to set.
     */
    @Generated
    private UserCollectionSettings(TileSettings tileSettings, MosaicInfo mosaicInfo) {
        this.tileSettings = tileSettings;
        this.mosaicInfo = mosaicInfo;
    }

    /**
     * Get the tileSettings property: Settings for map tile visualization.
     * 
     * @return the tileSettings value.
     */
    @Generated
    public TileSettings getTileSettings() {
        return this.tileSettings;
    }

    /**
     * Get the mosaicInfo property: Settings for data mosaic visualization.
     * 
     * @return the mosaicInfo value.
     */
    @Generated
    public MosaicInfo getMosaicInfo() {
        return this.mosaicInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("tileSettings", this.tileSettings);
        jsonWriter.writeJsonField("mosaicInfo", this.mosaicInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserCollectionSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserCollectionSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserCollectionSettings.
     */
    @Generated
    public static UserCollectionSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TileSettings tileSettings = null;
            MosaicInfo mosaicInfo = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tileSettings".equals(fieldName)) {
                    tileSettings = TileSettings.fromJson(reader);
                } else if ("mosaicInfo".equals(fieldName)) {
                    mosaicInfo = MosaicInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new UserCollectionSettings(tileSettings, mosaicInfo);
        });
    }
}
