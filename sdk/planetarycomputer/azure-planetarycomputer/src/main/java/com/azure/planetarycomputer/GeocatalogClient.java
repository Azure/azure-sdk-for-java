// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.planetarycomputer.implementation.GeocatalogClientImpl;
import com.azure.planetarycomputer.models.AuthConfig;
import com.azure.planetarycomputer.models.AzMapsClientId;
import com.azure.planetarycomputer.models.AzMapsToken;

/**
 * Initializes a new instance of the synchronous GeocatalogClient type.
 */
@ServiceClient(builder = GeocatalogClientBuilder.class)
public final class GeocatalogClient {
    @Generated
    private final GeocatalogClientImpl serviceClient;

    /**
     * Initializes an instance of GeocatalogClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    GeocatalogClient(GeocatalogClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Auth Config
     * 
     * Get the app id and tenant id information to make a MSAL request for this
     * GeoCatalog instance.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     authn_app_id: String (Required)
     *     tenant_id: String (Required)
     *     instance: String (Required)
     *     redirect_uri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return auth Config
     * 
     * Get the app id and tenant id information to make a MSAL request for this
     * GeoCatalog instance along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAuthConfigWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAuthConfigWithResponse(requestOptions);
    }

    /**
     * Get Azmaps Client Id
     * 
     * Fetch the client id for the Azure Maps API service based on the current
     * on the current identity. This client id is used for the Explorer to
     * authenticate with the Azure Maps API service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     client_id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return azmaps Client Id
     * 
     * Fetch the client id for the Azure Maps API service based on the current
     * on the current identity along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAzmapsClientIdWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAzmapsClientIdWithResponse(requestOptions);
    }

    /**
     * Get Azmaps Token
     * 
     * Fetch a token for the Azure Maps API service based on the current
     * service identity. This token is used for the Explorer to authenticate
     * with the Azure Maps API service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     token: String (Required)
     *     expires_on: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return azmaps Token
     * 
     * Fetch a token for the Azure Maps API service based on the current
     * service identity along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAzmapsTokenWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAzmapsTokenWithResponse(requestOptions);
    }

    /**
     * Get Auth Config
     * 
     * Get the app id and tenant id information to make a MSAL request for this
     * GeoCatalog instance.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return auth Config
     * 
     * Get the app id and tenant id information to make a MSAL request for this
     * GeoCatalog instance.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AuthConfig getAuthConfig() {
        // Generated convenience method for getAuthConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAuthConfigWithResponse(requestOptions).getValue().toObject(AuthConfig.class);
    }

    /**
     * Get Azmaps Client Id
     * 
     * Fetch the client id for the Azure Maps API service based on the current
     * on the current identity. This client id is used for the Explorer to
     * authenticate with the Azure Maps API service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azmaps Client Id
     * 
     * Fetch the client id for the Azure Maps API service based on the current
     * on the current identity.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzMapsClientId getAzmapsClientId() {
        // Generated convenience method for getAzmapsClientIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAzmapsClientIdWithResponse(requestOptions).getValue().toObject(AzMapsClientId.class);
    }

    /**
     * Get Azmaps Token
     * 
     * Fetch a token for the Azure Maps API service based on the current
     * service identity. This token is used for the Explorer to authenticate
     * with the Azure Maps API service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azmaps Token
     * 
     * Fetch a token for the Azure Maps API service based on the current
     * service identity.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzMapsToken getAzmapsToken() {
        // Generated convenience method for getAzmapsTokenWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAzmapsTokenWithResponse(requestOptions).getValue().toObject(AzMapsToken.class);
    }
}
