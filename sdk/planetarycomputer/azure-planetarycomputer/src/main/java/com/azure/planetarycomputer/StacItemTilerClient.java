// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import com.azure.planetarycomputer.implementation.StacItemTilerClientImpl;
import com.azure.planetarycomputer.models.Algorithm;
import com.azure.planetarycomputer.models.AssetStatisticsResponse;
import com.azure.planetarycomputer.models.BoundsResponse;
import com.azure.planetarycomputer.models.ColorMapNames;
import com.azure.planetarycomputer.models.GeoJsonStatisticsItemCollectionResponse;
import com.azure.planetarycomputer.models.Geometry;
import com.azure.planetarycomputer.models.ImageType;
import com.azure.planetarycomputer.models.InfoOperationResponse;
import com.azure.planetarycomputer.models.ItemCollectionModel;
import com.azure.planetarycomputer.models.Resampling;
import com.azure.planetarycomputer.models.StacItemModel;
import com.azure.planetarycomputer.models.StatisticsResponse;
import com.azure.planetarycomputer.models.TileJsonResponse;
import com.azure.planetarycomputer.models.Tilematrixsetid;
import com.azure.planetarycomputer.models.TilerInfoGeoJsonFeature;
import com.azure.planetarycomputer.models.TitilerCoreModelsResponsesPoint;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Initializes a new instance of the synchronous StacItemTilerClient type.
 */
@ServiceClient(builder = StacItemTilerClientBuilder.class)
public final class StacItemTilerClient {
    @Generated
    private final StacItemTilerClientImpl serviceClient;

    /**
     * Initializes an instance of StacItemTilerClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    StacItemTilerClient(StacItemTilerClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Bounds
     * 
     * Return all Bounds.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     bounds (Required): [
     *         double (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geographic extent of a dataset expressed as a bounding box along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBoundsWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getBoundsWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Info
     * 
     * Return dataset's basic info.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     data (Required): {
     *         bounds (Required): [
     *             double (Required)
     *         ]
     *         band_metadata (Optional): [
     *              (Optional)[
     *                 BinaryData (Optional)
     *             ]
     *         ]
     *         band_descriptions (Optional): [
     *              (Optional)[
     *                 String (Optional)
     *             ]
     *         ]
     *         dtype: String (Required)
     *         nodata_type: String(Alpha/Mask/Internal/Nodata/None) (Optional)
     *         colorinterp (Optional): [
     *             String (Optional)
     *         ]
     *         driver: String (Optional)
     *         count: Integer (Optional)
     *         width: Integer (Optional)
     *         height: Integer (Optional)
     *         overviews (Optional): [
     *             String (Optional)
     *         ]
     *         scales (Optional): [
     *             long (Optional)
     *         ]
     *         offsets (Optional): [
     *             long (Optional)
     *         ]
     *         colormap (Optional): {
     *             String (Required): [
     *                 String (Required)
     *             ]
     *         }
     *         minzoom: Long (Optional)
     *         maxzoom: Long (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return return dataset's basic info or the list of available assets along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getInfoWithResponse(String collectionId, String itemId, RequestOptions requestOptions) {
        return this.serviceClient.getInfoWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Info Geojson
     * 
     * Return Info Geojson.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature) (Required)
     *     geometry (Required): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     properties (Required): {
     *         String (Required): {
     *             bounds (Required): [
     *                 double (Required)
     *             ]
     *             band_metadata (Optional): [
     *                  (Optional)[
     *                     BinaryData (Optional)
     *                 ]
     *             ]
     *             band_descriptions (Optional): [
     *                  (Optional)[
     *                     String (Optional)
     *                 ]
     *             ]
     *             dtype: String (Required)
     *             nodata_type: String(Alpha/Mask/Internal/Nodata/None) (Optional)
     *             colorinterp (Optional): [
     *                 String (Optional)
     *             ]
     *             driver: String (Optional)
     *             count: Integer (Optional)
     *             width: Integer (Optional)
     *             height: Integer (Optional)
     *             overviews (Optional): [
     *                 String (Optional)
     *             ]
     *             scales (Optional): [
     *                 long (Optional)
     *             ]
     *             offsets (Optional): [
     *                 long (Optional)
     *             ]
     *             colormap (Optional): {
     *                 String (Required): [
     *                     String (Required)
     *                 ]
     *             }
     *             minzoom: Long (Optional)
     *             maxzoom: Long (Optional)
     *         }
     *     }
     *     id: String (Optional)
     *     bbox: Double (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoJSON Feature object containing rio-tiler model information along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getInfoGeoJsonWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getInfoGeoJsonWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Available Assets
     * 
     * Return a list of supported assets.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     String (Required)
     * ]
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAvailableAssetsWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAvailableAssetsWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Asset Statistics
     * 
     * Per Asset statistics.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Maximum dimension in pixels for the source data used to
     * calculate statistics</td></tr>
     * <tr><td>categorical</td><td>Boolean</td><td>No</td><td>Return statistics for categorical dataset.</td></tr>
     * <tr><td>c</td><td>List&lt;String&gt;</td><td>No</td><td>List of values for which to report counts. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>p</td><td>List&lt;Integer&gt;</td><td>No</td><td>List of percentile values (default to [2, 98]). Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>histogram_bins</td><td>String</td><td>No</td><td>Defines the number of equal-width bins in the given
     * range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * <tr><td>histogram_range</td><td>String</td><td>No</td><td>Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     data (Required): {
     *         String (Required): {
     *             min: double (Required)
     *             max: double (Required)
     *             mean: double (Required)
     *             count: double (Required)
     *             sum: double (Required)
     *             std: double (Required)
     *             median: double (Required)
     *             majority: double (Required)
     *             minority: double (Required)
     *             unique: double (Required)
     *             histogram (Required): [
     *                  (Required)[
     *                     double (Required)
     *                 ]
     *             ]
     *             valid_percent: double (Required)
     *             masked_pixels: double (Required)
     *             valid_pixels: double (Required)
     *             percentile_2: double (Required)
     *             percentile_98: double (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return return dataset's statistics along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssetStatisticsWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAssetStatisticsWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Statistics
     * 
     * Merged assets statistics.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Maximum dimension in pixels for the source data used to
     * calculate statistics</td></tr>
     * <tr><td>categorical</td><td>Boolean</td><td>No</td><td>Return statistics for categorical dataset.</td></tr>
     * <tr><td>c</td><td>List&lt;String&gt;</td><td>No</td><td>List of values for which to report counts. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>p</td><td>List&lt;Integer&gt;</td><td>No</td><td>List of percentile values (default to [2, 98]). Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>histogram_bins</td><td>String</td><td>No</td><td>Defines the number of equal-width bins in the given
     * range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * <tr><td>histogram_range</td><td>String</td><td>No</td><td>Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *      (Optional): {
     *         String (Required): {
     *             min: double (Required)
     *             max: double (Required)
     *             mean: double (Required)
     *             count: double (Required)
     *             sum: double (Required)
     *             std: double (Required)
     *             median: double (Required)
     *             majority: double (Required)
     *             minority: double (Required)
     *             unique: double (Required)
     *             histogram (Required): [
     *                  (Required)[
     *                     double (Required)
     *                 ]
     *             ]
     *             valid_percent: double (Required)
     *             masked_pixels: double (Required)
     *             valid_pixels: double (Required)
     *             percentile_2: double (Required)
     *             percentile_98: double (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return return dataset's statistics along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStatisticsWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getStatisticsWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Geojson Statistics
     * 
     * Get Statistics from a geojson feature or featureCollection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Maximum dimension in pixels for the source data used to
     * calculate statistics</td></tr>
     * <tr><td>categorical</td><td>Boolean</td><td>No</td><td>Return statistics for categorical dataset.</td></tr>
     * <tr><td>c</td><td>List&lt;String&gt;</td><td>No</td><td>List of values for which to report counts. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>p</td><td>List&lt;Integer&gt;</td><td>No</td><td>List of percentile values (default to [2, 98]). Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>histogram_bins</td><td>String</td><td>No</td><td>Defines the number of equal-width bins in the given
     * range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * <tr><td>histogram_range</td><td>String</td><td>No</td><td>Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     features (Optional, Required on create): [
     *          (Optional, Required on create){
     *             type: String(Feature/FeatureCollection) (Required)
     *             stac_version: String (Optional)
     *             links (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             geometry (Optional, Required on create): {
     *                 type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *                 bbox (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             bbox (Optional, Required on create): [
     *                 double (Optional, Required on create)
     *             ]
     *             id: String (Required)
     *             collection: String (Optional)
     *             properties (Optional, Required on create): {
     *                 platform: String (Optional)
     *                 instruments (Optional): [
     *                     String (Optional)
     *                 ]
     *                 constellation: String (Optional)
     *                 mission: String (Optional)
     *                 providers (Optional): [
     *                      (Optional){
     *                         name: String (Optional, Required on create)
     *                         description: String (Optional)
     *                         roles (Optional): [
     *                             String (Optional)
     *                         ]
     *                         url: String (Optional)
     *                     }
     *                 ]
     *                 gsd: Double (Optional)
     *                 created: OffsetDateTime (Optional)
     *                 updated: OffsetDateTime (Optional)
     *                 title: String (Optional)
     *                 description: String (Optional)
     *                 datetime: String (Optional, Required on create)
     *                 start_datetime: OffsetDateTime (Optional)
     *                 end_datetime: OffsetDateTime (Optional)
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *             assets (Optional, Required on create): {
     *                 String (Required): {
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     gsd: Double (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     href: String (Optional, Required on create)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             _msft:ts: String (Optional)
     *             _msft:etag: String (Optional)
     *         }
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     context (Optional): {
     *         returned: int (Optional, Required on create)
     *         limit: Integer (Optional)
     *         matched: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(FeatureCollection) (Required)
     *     features (Required): [
     *          (Required){
     *             geometry (Required): {
     *                 type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *                 bbox (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             bbox (Required): [
     *                 double (Required)
     *             ]
     *             id: String (Required)
     *             type: String(Feature) (Required)
     *             msft:_created: String (Optional)
     *             msft:_updated: String (Optional)
     *             msft:short_description: String (Optional)
     *             stac_version: String (Optional)
     *             collection: String (Optional)
     *             properties (Required): {
     *                 platform: String (Optional)
     *                 instruments (Optional): [
     *                     String (Optional)
     *                 ]
     *                 constellation: String (Optional)
     *                 mission: String (Optional)
     *                 providers (Optional): [
     *                      (Optional){
     *                         name: String (Optional, Required on create)
     *                         description: String (Optional)
     *                         roles (Optional): [
     *                             String (Optional)
     *                         ]
     *                         url: String (Optional)
     *                     }
     *                 ]
     *                 gsd: Double (Optional)
     *                 created: OffsetDateTime (Optional)
     *                 updated: OffsetDateTime (Optional)
     *                 title: String (Optional)
     *                 description: String (Optional)
     *                 datetime: String (Optional, Required on create)
     *                 start_datetime: OffsetDateTime (Optional)
     *                 end_datetime: OffsetDateTime (Optional)
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *             _msft:ts: String (Optional)
     *             _msft:etag: String (Optional)
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     stac_version: String (Optional)
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     context (Optional): {
     *         returned: int (Optional, Required on create)
     *         limit: Integer (Optional)
     *         matched: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param body Request GeoJson body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.mdCollection of STAC
     * items with statistical information along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGeoJsonStatisticsWithResponse(String collectionId, String itemId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.getGeoJsonStatisticsWithResponse(collectionId, itemId, body, requestOptions);
    }

    /**
     * Tile
     * 
     * Create map tile from a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * <tr><td>subdataset_name</td><td>String</td><td>No</td><td>The name of a subdataset within the asset.</td></tr>
     * <tr><td>subdataset_bands</td><td>List&lt;String&gt;</td><td>No</td><td>The index of a subdataset band within the
     * asset. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileWithResponse(String collectionId, String itemId, double z, double x, double y,
        double scale, String format, String accept, RequestOptions requestOptions) {
        return this.serviceClient.getTileWithResponse(collectionId, itemId, z, x, y, scale, format, accept,
            requestOptions);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * <tr><td>subdataset_name</td><td>String</td><td>No</td><td>The name of a subdataset within the asset.</td></tr>
     * <tr><td>subdataset_bands</td><td>List&lt;String&gt;</td><td>No</td><td>The index of a subdataset band within the
     * asset. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileWithMatrixSetWithResponse(String collectionId, String itemId,
        String tileMatrixSetId, double z, double x, double y, double scale, String format, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getTileWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId, z, x, y,
            scale, format, accept, requestOptions);
    }

    /**
     * Tilejson
     * 
     * Return Tilejson.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Default will be automatically defined if the output image
     * needs a mask (png) or
     * not (jpeg). Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tilejson: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     version: String (Optional)
     *     attribution: String (Optional)
     *     template: String (Optional)
     *     legend: String (Optional)
     *     scheme: String(xyz/tms) (Optional)
     *     tiles (Required): [
     *         String (Required)
     *     ]
     *     grids (Optional): [
     *         String (Optional)
     *     ]
     *     data (Optional): [
     *         String (Optional)
     *     ]
     *     minzoom: Integer (Optional)
     *     maxzoom: Integer (Optional)
     *     bounds (Optional): [
     *         double (Optional)
     *     ]
     *     center (Optional): [
     *         double (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileJsonWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getTileJsonWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Tilejson Tilematrixsetid As Path
     * 
     * Return the Tilejson Tilematrixsetid As a path.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Default will be automatically defined if the output image
     * needs a mask (png) or
     * not (jpeg). Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tilejson: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     version: String (Optional)
     *     attribution: String (Optional)
     *     template: String (Optional)
     *     legend: String (Optional)
     *     scheme: String(xyz/tms) (Optional)
     *     tiles (Required): [
     *         String (Required)
     *     ]
     *     grids (Optional): [
     *         String (Optional)
     *     ]
     *     data (Optional): [
     *         String (Optional)
     *     ]
     *     minzoom: Integer (Optional)
     *     maxzoom: Integer (Optional)
     *     bounds (Optional): [
     *         double (Optional)
     *     ]
     *     center (Optional): [
     *         double (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileJsonWithMatrixSetWithResponse(String collectionId, String itemId,
        String tileMatrixSetId, RequestOptions requestOptions) {
        return this.serviceClient.getTileJsonWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId,
            requestOptions);
    }

    /**
     * Wmts
     * 
     * OGC WMTS endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Output image type. Default is png. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a sequence of textual characters along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWmtsCapabilitiesWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWmtsCapabilitiesWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Wmts Tilematrixsetid As Path
     * 
     * OGC WMTS endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Output image type. Default is png. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a sequence of textual characters along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWmtsCapabilitiesWithMatrixSetWithResponse(String collectionId, String itemId,
        String tileMatrixSetId, RequestOptions requestOptions) {
        return this.serviceClient.getWmtsCapabilitiesWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId,
            requestOptions);
    }

    /**
     * Point
     * 
     * Get Point value for a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     coordinates (Required): [
     *         double (Required)
     *     ]
     *     values (Required): [
     *         double (Required)
     *     ]
     *     band_names (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param lon Longitude.
     * @param lat Latitude.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return point model.
     * 
     * response model for `/point` endpointsResponse model for point query operations providing values at a specific
     * location along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPointWithResponse(String collectionId, String itemId, double lon, double lat,
        RequestOptions requestOptions) {
        return this.serviceClient.getPointWithResponse(collectionId, itemId, lon, lat, requestOptions);
    }

    /**
     * Preview
     * 
     * Create preview of a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>Output format for the tile or image (e.g., png, jpeg, webp).
     * Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>dst-crs</td><td>String</td><td>No</td><td>Output Coordinate Reference System.</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Image output size limit if width and height limits are not
     * set.</td></tr>
     * <tr><td>height</td><td>Integer</td><td>No</td><td>Height in pixels for the output image</td></tr>
     * <tr><td>width</td><td>Integer</td><td>No</td><td>Width in pixels for the output image</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPreviewWithResponse(String collectionId, String itemId, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getPreviewWithResponse(collectionId, itemId, accept, requestOptions);
    }

    /**
     * Preview
     * 
     * Create preview of a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>dst-crs</td><td>String</td><td>No</td><td>Output Coordinate Reference System.</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Image output size limit if width and height limits are not
     * set.</td></tr>
     * <tr><td>height</td><td>Integer</td><td>No</td><td>Height in pixels for the output image</td></tr>
     * <tr><td>width</td><td>Integer</td><td>No</td><td>Width in pixels for the output image</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPreviewWithFormatWithResponse(String collectionId, String itemId, String format,
        String accept, RequestOptions requestOptions) {
        return this.serviceClient.getPreviewWithFormatWithResponse(collectionId, itemId, format, accept,
            requestOptions);
    }

    /**
     * Part
     * 
     * Create image from part of a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>dst-crs</td><td>String</td><td>No</td><td>Output Coordinate Reference System.</td></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Image output size limit if width and height limits are not
     * set.</td></tr>
     * <tr><td>height</td><td>Integer</td><td>No</td><td>Height in pixels for the output image</td></tr>
     * <tr><td>width</td><td>Integer</td><td>No</td><td>Width in pixels for the output image</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param minx Bounding box min X.
     * @param miny Bounding box min Y.
     * @param maxx Bounding box max X.
     * @param maxy Bounding box max Y.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartWithResponse(String collectionId, String itemId, double minx, double miny,
        double maxx, double maxy, String format, String accept, RequestOptions requestOptions) {
        return this.serviceClient.getPartWithResponse(collectionId, itemId, minx, miny, maxx, maxy, format, accept,
            requestOptions);
    }

    /**
     * Part
     * 
     * Create image from part of a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>dst-crs</td><td>String</td><td>No</td><td>Output Coordinate Reference System.</td></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Image output size limit if width and height limits are not
     * set.</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param minx Bounding box min X.
     * @param miny Bounding box min Y.
     * @param maxx Bounding box max X.
     * @param maxy Bounding box max Y.
     * @param width Width in pixels for the output image.
     * @param height Height in pixels for the output image.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartWithDimensionsWithResponse(String collectionId, String itemId, double minx,
        double miny, double maxx, double maxy, double width, double height, String format, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getPartWithDimensionsWithResponse(collectionId, itemId, minx, miny, maxx, maxy, width,
            height, format, accept, requestOptions);
    }

    /**
     * Geojson Crop
     * 
     * Create image from a geojson feature.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Image output size limit if width and height limits are not
     * set.</td></tr>
     * <tr><td>height</td><td>Integer</td><td>No</td><td>Height in pixels for the output image</td></tr>
     * <tr><td>width</td><td>Integer</td><td>No</td><td>Width in pixels for the output image</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param body Request GeoJson body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cropGeoJsonWithResponse(String collectionId, String itemId, String format,
        String accept, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.cropGeoJsonWithResponse(collectionId, itemId, format, accept, body, requestOptions);
    }

    /**
     * Geojson Crop
     * 
     * Create image from a geojson feature.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>max_size</td><td>Integer</td><td>No</td><td>Image output size limit if width and height limits are not
     * set.</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature/FeatureCollection) (Required)
     *     stac_version: String (Optional)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     geometry (Optional, Required on create): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     bbox (Optional, Required on create): [
     *         double (Optional, Required on create)
     *     ]
     *     id: String (Required)
     *     collection: String (Optional)
     *     properties (Optional, Required on create): {
     *         platform: String (Optional)
     *         instruments (Optional): [
     *             String (Optional)
     *         ]
     *         constellation: String (Optional)
     *         mission: String (Optional)
     *         providers (Optional): [
     *              (Optional){
     *                 name: String (Optional, Required on create)
     *                 description: String (Optional)
     *                 roles (Optional): [
     *                     String (Optional)
     *                 ]
     *                 url: String (Optional)
     *             }
     *         ]
     *         gsd: Double (Optional)
     *         created: OffsetDateTime (Optional)
     *         updated: OffsetDateTime (Optional)
     *         title: String (Optional)
     *         description: String (Optional)
     *         datetime: String (Optional, Required on create)
     *         start_datetime: OffsetDateTime (Optional)
     *         end_datetime: OffsetDateTime (Optional)
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     assets (Optional, Required on create): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     _msft:ts: String (Optional)
     *     _msft:etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param width Width in pixels for the output image.
     * @param height Height in pixels for the output image.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param body Request GeoJson body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cropGeoJsonWithDimensionsWithResponse(String collectionId, String itemId, double width,
        double height, String format, String accept, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.cropGeoJsonWithDimensionsWithResponse(collectionId, itemId, width, height, format,
            accept, body, requestOptions);
    }

    /**
     * Bounds
     * 
     * Return all Bounds.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geographic extent of a dataset expressed as a bounding box.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BoundsResponse getBounds(String collectionId, String itemId) {
        // Generated convenience method for getBoundsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getBoundsWithResponse(collectionId, itemId, requestOptions).getValue().toObject(BoundsResponse.class);
    }

    /**
     * Info
     * 
     * Return dataset's basic info.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param assets Asset's names.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return return dataset's basic info or the list of available assets.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InfoOperationResponse getInfo(String collectionId, String itemId, List<String> assets) {
        // Generated convenience method for getInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        return getInfoWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(InfoOperationResponse.class);
    }

    /**
     * Info
     * 
     * Return dataset's basic info.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return return dataset's basic info or the list of available assets.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InfoOperationResponse getInfo(String collectionId, String itemId) {
        // Generated convenience method for getInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getInfoWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(InfoOperationResponse.class);
    }

    /**
     * Info Geojson
     * 
     * Return Info Geojson.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param assets Asset's names.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geoJSON Feature object containing rio-tiler model information.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TilerInfoGeoJsonFeature getInfoGeoJson(String collectionId, String itemId, List<String> assets) {
        // Generated convenience method for getInfoGeoJsonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        return getInfoGeoJsonWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(TilerInfoGeoJsonFeature.class);
    }

    /**
     * Info Geojson
     * 
     * Return Info Geojson.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geoJSON Feature object containing rio-tiler model information.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TilerInfoGeoJsonFeature getInfoGeoJson(String collectionId, String itemId) {
        // Generated convenience method for getInfoGeoJsonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getInfoGeoJsonWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(TilerInfoGeoJsonFeature.class);
    }

    /**
     * Available Assets
     * 
     * Return a list of supported assets.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> getAvailableAssets(String collectionId, String itemId) {
        // Generated convenience method for getAvailableAssetsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAvailableAssetsWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_STRING);
    }

    /**
     * Asset Statistics
     * 
     * Per Asset statistics.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param resampling Resampling method.
     * @param maxSize Maximum dimension in pixels for the source data used to calculate statistics.
     * @param categorical Return statistics for categorical dataset.
     * @param c List of values for which to report counts.
     * @param p List of percentile values (default to [2, 98]).
     * @param histogramBins Defines the number of equal-width bins in the given range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * @param histogramRange Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return return dataset's statistics.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetStatisticsResponse getAssetStatistics(String collectionId, String itemId, List<String> assets,
        String expression, List<String> assetBidx, Boolean assetAsBand, Double nodata, Boolean unscale,
        Resampling resampling, Integer maxSize, Boolean categorical, List<String> c, List<Integer> p,
        String histogramBins, String histogramRange) {
        // Generated convenience method for getAssetStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (categorical != null) {
            requestOptions.addQueryParam("categorical", String.valueOf(categorical), false);
        }
        if (c != null) {
            for (String paramItemValue : c) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("c", paramItemValue, false);
                }
            }
        }
        if (p != null) {
            for (int paramItemValue : p) {
                requestOptions.addQueryParam("p", String.valueOf(paramItemValue), false);
            }
        }
        if (histogramBins != null) {
            requestOptions.addQueryParam("histogram_bins", histogramBins, false);
        }
        if (histogramRange != null) {
            requestOptions.addQueryParam("histogram_range", histogramRange, false);
        }
        return getAssetStatisticsWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(AssetStatisticsResponse.class);
    }

    /**
     * Asset Statistics
     * 
     * Per Asset statistics.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return return dataset's statistics.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetStatisticsResponse getAssetStatistics(String collectionId, String itemId) {
        // Generated convenience method for getAssetStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAssetStatisticsWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(AssetStatisticsResponse.class);
    }

    /**
     * Statistics
     * 
     * Merged assets statistics.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param resampling Resampling method.
     * @param maxSize Maximum dimension in pixels for the source data used to calculate statistics.
     * @param categorical Return statistics for categorical dataset.
     * @param c List of values for which to report counts.
     * @param p List of percentile values (default to [2, 98]).
     * @param histogramBins Defines the number of equal-width bins in the given range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * @param histogramRange Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return return dataset's statistics.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StatisticsResponse getStatistics(String collectionId, String itemId, List<String> assets, String expression,
        List<String> assetBidx, Boolean assetAsBand, Double nodata, Boolean unscale, Resampling resampling,
        Integer maxSize, Boolean categorical, List<String> c, List<Integer> p, String histogramBins,
        String histogramRange) {
        // Generated convenience method for getStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (categorical != null) {
            requestOptions.addQueryParam("categorical", String.valueOf(categorical), false);
        }
        if (c != null) {
            for (String paramItemValue : c) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("c", paramItemValue, false);
                }
            }
        }
        if (p != null) {
            for (int paramItemValue : p) {
                requestOptions.addQueryParam("p", String.valueOf(paramItemValue), false);
            }
        }
        if (histogramBins != null) {
            requestOptions.addQueryParam("histogram_bins", histogramBins, false);
        }
        if (histogramRange != null) {
            requestOptions.addQueryParam("histogram_range", histogramRange, false);
        }
        return getStatisticsWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(StatisticsResponse.class);
    }

    /**
     * Statistics
     * 
     * Merged assets statistics.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return return dataset's statistics.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StatisticsResponse getStatistics(String collectionId, String itemId) {
        // Generated convenience method for getStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStatisticsWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(StatisticsResponse.class);
    }

    /**
     * Geojson Statistics
     * 
     * Get Statistics from a geojson feature or featureCollection.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param body Request GeoJson body.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param coordCrs Coordinate Reference System of the input coords. Default to `epsg:4326`.
     * @param resampling Resampling method.
     * @param maxSize Maximum dimension in pixels for the source data used to calculate statistics.
     * @param categorical Return statistics for categorical dataset.
     * @param c List of values for which to report counts.
     * @param p List of percentile values (default to [2, 98]).
     * @param histogramBins Defines the number of equal-width bins in the given range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * @param histogramRange Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.mdCollection of STAC
     * items with statistical information.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GeoJsonStatisticsItemCollectionResponse getGeoJsonStatistics(String collectionId, String itemId,
        ItemCollectionModel body, List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand,
        Double nodata, Boolean unscale, String coordCrs, Resampling resampling, Integer maxSize, Boolean categorical,
        List<String> c, List<Integer> p, String histogramBins, String histogramRange) {
        // Generated convenience method for getGeoJsonStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (coordCrs != null) {
            requestOptions.addQueryParam("coord-crs", coordCrs, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (categorical != null) {
            requestOptions.addQueryParam("categorical", String.valueOf(categorical), false);
        }
        if (c != null) {
            for (String paramItemValue : c) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("c", paramItemValue, false);
                }
            }
        }
        if (p != null) {
            for (int paramItemValue : p) {
                requestOptions.addQueryParam("p", String.valueOf(paramItemValue), false);
            }
        }
        if (histogramBins != null) {
            requestOptions.addQueryParam("histogram_bins", histogramBins, false);
        }
        if (histogramRange != null) {
            requestOptions.addQueryParam("histogram_range", histogramRange, false);
        }
        return getGeoJsonStatisticsWithResponse(collectionId, itemId, BinaryData.fromObject(body), requestOptions)
            .getValue()
            .toObject(GeoJsonStatisticsItemCollectionResponse.class);
    }

    /**
     * Geojson Statistics
     * 
     * Get Statistics from a geojson feature or featureCollection.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param body Request GeoJson body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.mdCollection of STAC
     * items with statistical information.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GeoJsonStatisticsItemCollectionResponse getGeoJsonStatistics(String collectionId, String itemId,
        ItemCollectionModel body) {
        // Generated convenience method for getGeoJsonStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getGeoJsonStatisticsWithResponse(collectionId, itemId, BinaryData.fromObject(body), requestOptions)
            .getValue()
            .toObject(GeoJsonStatisticsItemCollectionResponse.class);
    }

    /**
     * Tile
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported (default:
     * 'WebMercatorQuad').
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param resampling Resampling method.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @param subdatasetName The name of a subdataset within the asset.
     * @param subdatasetBands The index of a subdataset band within the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTile(String collectionId, String itemId, double z, double x, double y, double scale,
        String format, String accept, List<String> assets, String expression, List<String> assetBidx,
        Boolean assetAsBand, Double nodata, Boolean unscale, Algorithm algorithm, String algorithmParams,
        Tilematrixsetid tileMatrixSetId, String buffer, String colorFormula, Resampling resampling,
        List<String> rescale, ColorMapNames colormapName, String colormap, Boolean returnMask, String subdatasetName,
        List<String> subdatasetBands) {
        // Generated convenience method for getTileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (tileMatrixSetId != null) {
            requestOptions.addQueryParam("tileMatrixSetId", tileMatrixSetId.toString(), false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", buffer, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        if (subdatasetName != null) {
            requestOptions.addQueryParam("subdataset_name", subdatasetName, false);
        }
        if (subdatasetBands != null) {
            requestOptions.addQueryParam("subdataset_bands",
                subdatasetBands.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getTileWithResponse(collectionId, itemId, z, x, y, scale, format, accept, requestOptions).getValue();
    }

    /**
     * Tile
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTile(String collectionId, String itemId, double z, double x, double y, double scale,
        String format, String accept) {
        // Generated convenience method for getTileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTileWithResponse(collectionId, itemId, z, x, y, scale, format, accept, requestOptions).getValue();
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param resampling Resampling method.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @param subdatasetName The name of a subdataset within the asset.
     * @param subdatasetBands The index of a subdataset band within the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTileWithMatrixSet(String collectionId, String itemId, String tileMatrixSetId, double z,
        double x, double y, double scale, String format, String accept, List<String> assets, String expression,
        List<String> assetBidx, Boolean assetAsBand, Double nodata, Boolean unscale, Algorithm algorithm,
        String algorithmParams, String buffer, String colorFormula, Resampling resampling, List<String> rescale,
        ColorMapNames colormapName, String colormap, Boolean returnMask, String subdatasetName,
        List<String> subdatasetBands) {
        // Generated convenience method for getTileWithMatrixSetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", buffer, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        if (subdatasetName != null) {
            requestOptions.addQueryParam("subdataset_name", subdatasetName, false);
        }
        if (subdatasetBands != null) {
            requestOptions.addQueryParam("subdataset_bands",
                subdatasetBands.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getTileWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, accept,
            requestOptions).getValue();
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTileWithMatrixSet(String collectionId, String itemId, String tileMatrixSetId, double z,
        double x, double y, double scale, String format, String accept) {
        // Generated convenience method for getTileWithMatrixSetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTileWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, accept,
            requestOptions).getValue();
    }

    /**
     * Tilejson
     * 
     * Return Tilejson.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported (default:
     * 'WebMercatorQuad').
     * @param tileFormat Default will be automatically defined if the output image needs a mask (png) or
     * not (jpeg).
     * @param tileScale Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256,
     * 2=512x512).
     * @param minzoom Overwrite default minzoom.
     * @param maxzoom Overwrite default maxzoom.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param resampling Resampling method.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TileJsonResponse getTileJson(String collectionId, String itemId, List<String> assets, String expression,
        List<String> assetBidx, Boolean assetAsBand, Double nodata, Boolean unscale, Algorithm algorithm,
        String algorithmParams, Tilematrixsetid tileMatrixSetId, ImageType tileFormat, Integer tileScale,
        Integer minzoom, Integer maxzoom, String buffer, String colorFormula, Resampling resampling,
        List<String> rescale, ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for getTileJsonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (tileMatrixSetId != null) {
            requestOptions.addQueryParam("tileMatrixSetId", tileMatrixSetId.toString(), false);
        }
        if (tileFormat != null) {
            requestOptions.addQueryParam("tile_format", tileFormat.toString(), false);
        }
        if (tileScale != null) {
            requestOptions.addQueryParam("tile_scale", String.valueOf(tileScale), false);
        }
        if (minzoom != null) {
            requestOptions.addQueryParam("minzoom", String.valueOf(minzoom), false);
        }
        if (maxzoom != null) {
            requestOptions.addQueryParam("maxzoom", String.valueOf(maxzoom), false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", buffer, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return getTileJsonWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(TileJsonResponse.class);
    }

    /**
     * Tilejson
     * 
     * Return Tilejson.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TileJsonResponse getTileJson(String collectionId, String itemId) {
        // Generated convenience method for getTileJsonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTileJsonWithResponse(collectionId, itemId, requestOptions).getValue()
            .toObject(TileJsonResponse.class);
    }

    /**
     * Tilejson Tilematrixsetid As Path
     * 
     * Return the Tilejson Tilematrixsetid As a path.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param tileFormat Default will be automatically defined if the output image needs a mask (png) or
     * not (jpeg).
     * @param tileScale Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256,
     * 2=512x512).
     * @param minzoom Overwrite default minzoom.
     * @param maxzoom Overwrite default maxzoom.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param resampling Resampling method.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TileJsonResponse getTileJsonWithMatrixSet(String collectionId, String itemId, String tileMatrixSetId,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, Double nodata,
        Boolean unscale, Algorithm algorithm, String algorithmParams, ImageType tileFormat, Integer tileScale,
        Integer minzoom, Integer maxzoom, String buffer, String colorFormula, Resampling resampling,
        List<String> rescale, ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for getTileJsonWithMatrixSetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (tileFormat != null) {
            requestOptions.addQueryParam("tile_format", tileFormat.toString(), false);
        }
        if (tileScale != null) {
            requestOptions.addQueryParam("tile_scale", String.valueOf(tileScale), false);
        }
        if (minzoom != null) {
            requestOptions.addQueryParam("minzoom", String.valueOf(minzoom), false);
        }
        if (maxzoom != null) {
            requestOptions.addQueryParam("maxzoom", String.valueOf(maxzoom), false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", buffer, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return getTileJsonWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId, requestOptions).getValue()
            .toObject(TileJsonResponse.class);
    }

    /**
     * Tilejson Tilematrixsetid As Path
     * 
     * Return the Tilejson Tilematrixsetid As a path.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TileJsonResponse getTileJsonWithMatrixSet(String collectionId, String itemId, String tileMatrixSetId) {
        // Generated convenience method for getTileJsonWithMatrixSetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTileJsonWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId, requestOptions).getValue()
            .toObject(TileJsonResponse.class);
    }

    /**
     * Wmts
     * 
     * OGC WMTS endpoint.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported (default:
     * 'WebMercatorQuad').
     * @param tileFormat Output image type. Default is png.
     * @param tileScale Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256,
     * 2=512x512).
     * @param minzoom Overwrite default minzoom.
     * @param maxzoom Overwrite default maxzoom.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param resampling Resampling method.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String getWmtsCapabilities(String collectionId, String itemId, List<String> assets, String expression,
        List<String> assetBidx, Boolean assetAsBand, Double nodata, Boolean unscale, Algorithm algorithm,
        String algorithmParams, Tilematrixsetid tileMatrixSetId, ImageType tileFormat, Integer tileScale,
        Integer minzoom, Integer maxzoom, String buffer, String colorFormula, Resampling resampling,
        List<String> rescale, ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for getWmtsCapabilitiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (tileMatrixSetId != null) {
            requestOptions.addQueryParam("tileMatrixSetId", tileMatrixSetId.toString(), false);
        }
        if (tileFormat != null) {
            requestOptions.addQueryParam("tile_format", tileFormat.toString(), false);
        }
        if (tileScale != null) {
            requestOptions.addQueryParam("tile_scale", String.valueOf(tileScale), false);
        }
        if (minzoom != null) {
            requestOptions.addQueryParam("minzoom", String.valueOf(minzoom), false);
        }
        if (maxzoom != null) {
            requestOptions.addQueryParam("maxzoom", String.valueOf(maxzoom), false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", buffer, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return getWmtsCapabilitiesWithResponse(collectionId, itemId, requestOptions).getValue().toObject(String.class);
    }

    /**
     * Wmts
     * 
     * OGC WMTS endpoint.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String getWmtsCapabilities(String collectionId, String itemId) {
        // Generated convenience method for getWmtsCapabilitiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWmtsCapabilitiesWithResponse(collectionId, itemId, requestOptions).getValue().toObject(String.class);
    }

    /**
     * Wmts Tilematrixsetid As Path
     * 
     * OGC WMTS endpoint.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param tileFormat Output image type. Default is png.
     * @param tileScale Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256,
     * 2=512x512).
     * @param minzoom Overwrite default minzoom.
     * @param maxzoom Overwrite default maxzoom.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param resampling Resampling method.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String getWmtsCapabilitiesWithMatrixSet(String collectionId, String itemId, String tileMatrixSetId,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, Double nodata,
        Boolean unscale, Algorithm algorithm, String algorithmParams, ImageType tileFormat, Integer tileScale,
        Integer minzoom, Integer maxzoom, String buffer, String colorFormula, Resampling resampling,
        List<String> rescale, ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for getWmtsCapabilitiesWithMatrixSetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (tileFormat != null) {
            requestOptions.addQueryParam("tile_format", tileFormat.toString(), false);
        }
        if (tileScale != null) {
            requestOptions.addQueryParam("tile_scale", String.valueOf(tileScale), false);
        }
        if (minzoom != null) {
            requestOptions.addQueryParam("minzoom", String.valueOf(minzoom), false);
        }
        if (maxzoom != null) {
            requestOptions.addQueryParam("maxzoom", String.valueOf(maxzoom), false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", buffer, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return getWmtsCapabilitiesWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId, requestOptions)
            .getValue()
            .toObject(String.class);
    }

    /**
     * Wmts Tilematrixsetid As Path
     * 
     * OGC WMTS endpoint.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String getWmtsCapabilitiesWithMatrixSet(String collectionId, String itemId, String tileMatrixSetId) {
        // Generated convenience method for getWmtsCapabilitiesWithMatrixSetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWmtsCapabilitiesWithMatrixSetWithResponse(collectionId, itemId, tileMatrixSetId, requestOptions)
            .getValue()
            .toObject(String.class);
    }

    /**
     * Point
     * 
     * Get Point value for a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param lon Longitude.
     * @param lat Latitude.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param coordCrs Coordinate Reference System of the input coords. Default to `epsg:4326`.
     * @param resampling Resampling method.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return point model.
     * 
     * response model for `/point` endpointsResponse model for point query operations providing values at a specific
     * location.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TitilerCoreModelsResponsesPoint getPoint(String collectionId, String itemId, double lon, double lat,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, Double nodata,
        Boolean unscale, String coordCrs, Resampling resampling) {
        // Generated convenience method for getPointWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (coordCrs != null) {
            requestOptions.addQueryParam("coord-crs", coordCrs, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        return getPointWithResponse(collectionId, itemId, lon, lat, requestOptions).getValue()
            .toObject(TitilerCoreModelsResponsesPoint.class);
    }

    /**
     * Point
     * 
     * Get Point value for a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param lon Longitude.
     * @param lat Latitude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return point model.
     * 
     * response model for `/point` endpointsResponse model for point query operations providing values at a specific
     * location.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TitilerCoreModelsResponsesPoint getPoint(String collectionId, String itemId, double lon, double lat) {
        // Generated convenience method for getPointWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPointWithResponse(collectionId, itemId, lon, lat, requestOptions).getValue()
            .toObject(TitilerCoreModelsResponsesPoint.class);
    }

    /**
     * Preview
     * 
     * Create preview of a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param accept The accept parameter.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param dstCrs Output Coordinate Reference System.
     * @param resampling Resampling method.
     * @param maxSize Image output size limit if width and height limits are not set.
     * @param height Height in pixels for the output image.
     * @param width Width in pixels for the output image.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getPreview(String collectionId, String itemId, String accept, List<String> assets,
        String expression, List<String> assetBidx, Boolean assetAsBand, Double nodata, Boolean unscale,
        Algorithm algorithm, String algorithmParams, ImageType format, String colorFormula, String dstCrs,
        Resampling resampling, Integer maxSize, Integer height, Integer width, List<String> rescale,
        ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for getPreviewWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (format != null) {
            requestOptions.addQueryParam("format", format.toString(), false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (dstCrs != null) {
            requestOptions.addQueryParam("dst-crs", dstCrs, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (height != null) {
            requestOptions.addQueryParam("height", String.valueOf(height), false);
        }
        if (width != null) {
            requestOptions.addQueryParam("width", String.valueOf(width), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return getPreviewWithResponse(collectionId, itemId, accept, requestOptions).getValue();
    }

    /**
     * Preview
     * 
     * Create preview of a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getPreview(String collectionId, String itemId, String accept) {
        // Generated convenience method for getPreviewWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPreviewWithResponse(collectionId, itemId, accept, requestOptions).getValue();
    }

    /**
     * Preview
     * 
     * Create preview of a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param dstCrs Output Coordinate Reference System.
     * @param resampling Resampling method.
     * @param maxSize Image output size limit if width and height limits are not set.
     * @param height Height in pixels for the output image.
     * @param width Width in pixels for the output image.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getPreviewWithFormat(String collectionId, String itemId, String format, String accept,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, Double nodata,
        Boolean unscale, Algorithm algorithm, String algorithmParams, String colorFormula, String dstCrs,
        Resampling resampling, Integer maxSize, Integer height, Integer width, List<String> rescale,
        ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for getPreviewWithFormatWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (dstCrs != null) {
            requestOptions.addQueryParam("dst-crs", dstCrs, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (height != null) {
            requestOptions.addQueryParam("height", String.valueOf(height), false);
        }
        if (width != null) {
            requestOptions.addQueryParam("width", String.valueOf(width), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return getPreviewWithFormatWithResponse(collectionId, itemId, format, accept, requestOptions).getValue();
    }

    /**
     * Preview
     * 
     * Create preview of a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getPreviewWithFormat(String collectionId, String itemId, String format, String accept) {
        // Generated convenience method for getPreviewWithFormatWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPreviewWithFormatWithResponse(collectionId, itemId, format, accept, requestOptions).getValue();
    }

    /**
     * Part
     * 
     * Create image from part of a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param minx Bounding box min X.
     * @param miny Bounding box min Y.
     * @param maxx Bounding box max X.
     * @param maxy Bounding box max Y.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param dstCrs Output Coordinate Reference System.
     * @param coordCrs Coordinate Reference System of the input coords. Default to `epsg:4326`.
     * @param resampling Resampling method.
     * @param maxSize Image output size limit if width and height limits are not set.
     * @param height Height in pixels for the output image.
     * @param width Width in pixels for the output image.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getPart(String collectionId, String itemId, double minx, double miny, double maxx, double maxy,
        String format, String accept, List<String> assets, String expression, List<String> assetBidx,
        Boolean assetAsBand, Double nodata, Boolean unscale, Algorithm algorithm, String algorithmParams,
        String colorFormula, String dstCrs, String coordCrs, Resampling resampling, Integer maxSize, Integer height,
        Integer width, List<String> rescale, ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for getPartWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (dstCrs != null) {
            requestOptions.addQueryParam("dst-crs", dstCrs, false);
        }
        if (coordCrs != null) {
            requestOptions.addQueryParam("coord-crs", coordCrs, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (height != null) {
            requestOptions.addQueryParam("height", String.valueOf(height), false);
        }
        if (width != null) {
            requestOptions.addQueryParam("width", String.valueOf(width), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return getPartWithResponse(collectionId, itemId, minx, miny, maxx, maxy, format, accept, requestOptions)
            .getValue();
    }

    /**
     * Part
     * 
     * Create image from part of a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param minx Bounding box min X.
     * @param miny Bounding box min Y.
     * @param maxx Bounding box max X.
     * @param maxy Bounding box max Y.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getPart(String collectionId, String itemId, double minx, double miny, double maxx, double maxy,
        String format, String accept) {
        // Generated convenience method for getPartWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPartWithResponse(collectionId, itemId, minx, miny, maxx, maxy, format, accept, requestOptions)
            .getValue();
    }

    /**
     * Part
     * 
     * Create image from part of a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param minx Bounding box min X.
     * @param miny Bounding box min Y.
     * @param maxx Bounding box max X.
     * @param maxy Bounding box max Y.
     * @param width Width in pixels for the output image.
     * @param height Height in pixels for the output image.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param dstCrs Output Coordinate Reference System.
     * @param coordCrs Coordinate Reference System of the input coords. Default to `epsg:4326`.
     * @param resampling Resampling method.
     * @param maxSize Image output size limit if width and height limits are not set.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getPartWithDimensions(String collectionId, String itemId, double minx, double miny, double maxx,
        double maxy, double width, double height, String format, String accept, List<String> assets, String expression,
        List<String> assetBidx, Boolean assetAsBand, Double nodata, Boolean unscale, Algorithm algorithm,
        String algorithmParams, String colorFormula, String dstCrs, String coordCrs, Resampling resampling,
        Integer maxSize, List<String> rescale, ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for getPartWithDimensionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (dstCrs != null) {
            requestOptions.addQueryParam("dst-crs", dstCrs, false);
        }
        if (coordCrs != null) {
            requestOptions.addQueryParam("coord-crs", coordCrs, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return getPartWithDimensionsWithResponse(collectionId, itemId, minx, miny, maxx, maxy, width, height, format,
            accept, requestOptions).getValue();
    }

    /**
     * Part
     * 
     * Create image from part of a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param minx Bounding box min X.
     * @param miny Bounding box min Y.
     * @param maxx Bounding box max X.
     * @param maxy Bounding box max Y.
     * @param width Width in pixels for the output image.
     * @param height Height in pixels for the output image.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getPartWithDimensions(String collectionId, String itemId, double minx, double miny, double maxx,
        double maxy, double width, double height, String format, String accept) {
        // Generated convenience method for getPartWithDimensionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPartWithDimensionsWithResponse(collectionId, itemId, minx, miny, maxx, maxy, width, height, format,
            accept, requestOptions).getValue();
    }

    /**
     * Geojson Crop
     * 
     * Create image from a geojson feature.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param body Request GeoJson body.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param coordCrs Coordinate Reference System of the input coords. Default to `epsg:4326`.
     * @param resampling Resampling method.
     * @param maxSize Image output size limit if width and height limits are not set.
     * @param height Height in pixels for the output image.
     * @param width Width in pixels for the output image.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData cropGeoJson(String collectionId, String itemId, String format, String accept, Geometry body,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, Double nodata,
        Boolean unscale, Algorithm algorithm, String algorithmParams, String colorFormula, String coordCrs,
        Resampling resampling, Integer maxSize, Integer height, Integer width, List<String> rescale,
        ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for cropGeoJsonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (coordCrs != null) {
            requestOptions.addQueryParam("coord-crs", coordCrs, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (height != null) {
            requestOptions.addQueryParam("height", String.valueOf(height), false);
        }
        if (width != null) {
            requestOptions.addQueryParam("width", String.valueOf(width), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return cropGeoJsonWithResponse(collectionId, itemId, format, accept, BinaryData.fromObject(body),
            requestOptions).getValue();
    }

    /**
     * Geojson Crop
     * 
     * Create image from a geojson feature.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param body Request GeoJson body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData cropGeoJson(String collectionId, String itemId, String format, String accept, Geometry body) {
        // Generated convenience method for cropGeoJsonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cropGeoJsonWithResponse(collectionId, itemId, format, accept, BinaryData.fromObject(body),
            requestOptions).getValue();
    }

    /**
     * Geojson Crop
     * 
     * Create image from a geojson feature.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param width Width in pixels for the output image.
     * @param height Height in pixels for the output image.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param body Request GeoJson body.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param coordCrs Coordinate Reference System of the input coords. Default to `epsg:4326`.
     * @param resampling Resampling method.
     * @param maxSize Image output size limit if width and height limits are not set.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData cropGeoJsonWithDimensions(String collectionId, String itemId, double width, double height,
        String format, String accept, StacItemModel body, List<String> assets, String expression,
        List<String> assetBidx, Boolean assetAsBand, Double nodata, Boolean unscale, Algorithm algorithm,
        String algorithmParams, String colorFormula, String coordCrs, Resampling resampling, Integer maxSize,
        List<String> rescale, ColorMapNames colormapName, String colormap, Boolean returnMask) {
        // Generated convenience method for cropGeoJsonWithDimensionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            requestOptions.addQueryParam("asset_bidx",
                assetBidx.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("asset_as_band", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", String.valueOf(nodata), false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithm_params", algorithmParams, false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("color_formula", colorFormula, false);
        }
        if (coordCrs != null) {
            requestOptions.addQueryParam("coord-crs", coordCrs, false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("max_size", String.valueOf(maxSize), false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormap_name", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("return_mask", String.valueOf(returnMask), false);
        }
        return cropGeoJsonWithDimensionsWithResponse(collectionId, itemId, width, height, format, accept,
            BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Geojson Crop
     * 
     * Create image from a geojson feature.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param width Width in pixels for the output image.
     * @param height Height in pixels for the output image.
     * @param format Output format for the tile or image (e.g., png, jpeg, webp).
     * @param accept The accept parameter.
     * @param body Request GeoJson body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData cropGeoJsonWithDimensions(String collectionId, String itemId, double width, double height,
        String format, String accept, StacItemModel body) {
        // Generated convenience method for cropGeoJsonWithDimensionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cropGeoJsonWithDimensionsWithResponse(collectionId, itemId, width, height, format, accept,
            BinaryData.fromObject(body), requestOptions).getValue();
    }

    @Generated
    private static final TypeReference<List<String>> TYPE_REFERENCE_LIST_STRING = new TypeReference<List<String>>() {
    };
}
