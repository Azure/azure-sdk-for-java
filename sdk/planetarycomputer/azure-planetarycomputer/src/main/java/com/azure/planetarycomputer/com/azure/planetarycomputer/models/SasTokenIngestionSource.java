// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * SAS Token ingestion source.
 */
@Immutable
public final class SasTokenIngestionSource extends IngestionSource {
    /*
     * Discriminator for the ingestion source
     */
    @Generated
    private IngestionSourceType kind = IngestionSourceType.SAS_TOKEN;

    /*
     * SAS token connection information
     */
    @Generated
    private final SasTokenConnection connectionInfo;

    /**
     * Creates an instance of SasTokenIngestionSource class.
     * 
     * @param id the id value to set.
     * @param connectionInfo the connectionInfo value to set.
     */
    @Generated
    public SasTokenIngestionSource(String id, SasTokenConnection connectionInfo) {
        super(id);
        this.connectionInfo = connectionInfo;
    }

    /**
     * Get the kind property: Discriminator for the ingestion source.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public IngestionSourceType getKind() {
        return this.kind;
    }

    /**
     * Get the connectionInfo property: SAS token connection information.
     * 
     * @return the connectionInfo value.
     */
    @Generated
    public SasTokenConnection getConnectionInfo() {
        return this.connectionInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeJsonField("connectionInfo", this.connectionInfo);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SasTokenIngestionSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SasTokenIngestionSource if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SasTokenIngestionSource.
     */
    @Generated
    public static SasTokenIngestionSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime created = null;
            SasTokenConnection connectionInfo = null;
            IngestionSourceType kind = IngestionSourceType.SAS_TOKEN;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created".equals(fieldName)) {
                    created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("connectionInfo".equals(fieldName)) {
                    connectionInfo = SasTokenConnection.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    kind = IngestionSourceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            SasTokenIngestionSource deserializedSasTokenIngestionSource
                = new SasTokenIngestionSource(id, connectionInfo);
            deserializedSasTokenIngestionSource.setCreated(created);
            deserializedSasTokenIngestionSource.kind = kind;

            return deserializedSasTokenIngestionSource;
        });
    }
}
