// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.planetarycomputer.PlanetaryComputerServiceVersion;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the MapLegendsClient type.
 */
public final class MapLegendsClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MapLegendsClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final PlanetaryComputerServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PlanetaryComputerServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of MapLegendsClient client.
     * 
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public MapLegendsClientImpl(String endpoint, PlanetaryComputerServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of MapLegendsClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public MapLegendsClientImpl(HttpPipeline httpPipeline, String endpoint,
        PlanetaryComputerServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of MapLegendsClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public MapLegendsClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        PlanetaryComputerServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(MapLegendsClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for MapLegendsClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MapLegendsClient")
    public interface MapLegendsClientService {
        @Get("/data/legend/classmap/{classmapName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClassmapLegend(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("classmapName") String classmapName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/legend/classmap/{classmapName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getClassmapLegendSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("classmapName") String classmapName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/legend/colormap/{cmapName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLegend(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("cmapName") String cmapName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/legend/colormap/{cmapName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLegendSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("cmapName") String cmapName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/legend/interval/{classmapName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getIntervalLegend(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("classmapName") String classmapName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/legend/interval/{classmapName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getIntervalLegendSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("classmapName") String classmapName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Get Classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *      (Optional): {
     *         String (Required): [
     *             long (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param classmapName classmap name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassmapLegendWithResponseAsync(String classmapName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getClassmapLegend(this.getEndpoint(),
            this.getServiceVersion().getVersion(), classmapName, accept, requestOptions, context));
    }

    /**
     * Get Classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *      (Optional): {
     *         String (Required): [
     *             long (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param classmapName classmap name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassmapLegendWithResponse(String classmapName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getClassmapLegendSync(this.getEndpoint(), this.getServiceVersion().getVersion(), classmapName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get Legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>height</td><td>Double</td><td>No</td><td>The output height of the legend image</td></tr>
     * <tr><td>width</td><td>Double</td><td>No</td><td>The output width of the legend image</td></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param cmapName The name of the registered colormap to generate a legend for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLegendWithResponseAsync(String cmapName, RequestOptions requestOptions) {
        final String accept = "image/png";
        return FluxUtil.withContext(context -> service.getLegend(this.getEndpoint(),
            this.getServiceVersion().getVersion(), cmapName, accept, requestOptions, context));
    }

    /**
     * Get Legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>height</td><td>Double</td><td>No</td><td>The output height of the legend image</td></tr>
     * <tr><td>width</td><td>Double</td><td>No</td><td>The output width of the legend image</td></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param cmapName The name of the registered colormap to generate a legend for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLegendWithResponse(String cmapName, RequestOptions requestOptions) {
        final String accept = "image/png";
        return service.getLegendSync(this.getEndpoint(), this.getServiceVersion().getVersion(), cmapName, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Get Interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required)[
     *         BinaryData (Required)
     *     ]
     * ]
     * }
     * </pre>
     * 
     * @param classmapName classmap name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIntervalLegendWithResponseAsync(String classmapName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getIntervalLegend(this.getEndpoint(),
            this.getServiceVersion().getVersion(), classmapName, accept, requestOptions, context));
    }

    /**
     * Get Interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required)[
     *         BinaryData (Required)
     *     ]
     * ]
     * }
     * </pre>
     * 
     * @param classmapName classmap name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIntervalLegendWithResponse(String classmapName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getIntervalLegendSync(this.getEndpoint(), this.getServiceVersion().getVersion(), classmapName,
            accept, requestOptions, Context.NONE);
    }
}
