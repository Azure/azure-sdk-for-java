// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Statistical information about a data band.
 */
@Immutable
public final class BandStatistics implements JsonSerializable<BandStatistics> {
    /*
     * Minimum value in the band.
     */
    @Generated
    private final double min;

    /*
     * Maximum value in the band.
     */
    @Generated
    private final double max;

    /*
     * Mean value of the band.
     */
    @Generated
    private final double mean;

    /*
     * Count of pixels in the band.
     */
    @Generated
    private final double count;

    /*
     * Sum of all pixel values in the band.
     */
    @Generated
    private final double sum;

    /*
     * Standard deviation of pixel values in the band.
     */
    @Generated
    private final double std;

    /*
     * Median value of the band.
     */
    @Generated
    private final double median;

    /*
     * Most common value in the band.
     */
    @Generated
    private final double majority;

    /*
     * Least common value in the band.
     */
    @Generated
    private final double minority;

    /*
     * Count of unique values in the band.
     */
    @Generated
    private final double unique;

    /*
     * Histogram of pixel values in the band.
     */
    @Generated
    private final List<List<Double>> histogram;

    /*
     * Percentage of valid (non-masked) pixels.
     */
    @Generated
    private final double validPercent;

    /*
     * Count of masked pixels in the band.
     */
    @Generated
    private final double maskedPixels;

    /*
     * Count of valid (non-masked) pixels in the band.
     */
    @Generated
    private final double validPixels;

    /*
     * Percentile 2
     * The 2nd percentile value.
     */
    @Generated
    private final double percentile2;

    /*
     * Percentile 98
     * The 98th percentile value.
     */
    @Generated
    private final double percentile98;

    /**
     * Creates an instance of BandStatistics class.
     * 
     * @param min the min value to set.
     * @param max the max value to set.
     * @param mean the mean value to set.
     * @param count the count value to set.
     * @param sum the sum value to set.
     * @param std the std value to set.
     * @param median the median value to set.
     * @param majority the majority value to set.
     * @param minority the minority value to set.
     * @param unique the unique value to set.
     * @param histogram the histogram value to set.
     * @param validPercent the validPercent value to set.
     * @param maskedPixels the maskedPixels value to set.
     * @param validPixels the validPixels value to set.
     * @param percentile2 the percentile2 value to set.
     * @param percentile98 the percentile98 value to set.
     */
    @Generated
    private BandStatistics(double min, double max, double mean, double count, double sum, double std, double median,
        double majority, double minority, double unique, List<List<Double>> histogram, double validPercent,
        double maskedPixels, double validPixels, double percentile2, double percentile98) {
        this.min = min;
        this.max = max;
        this.mean = mean;
        this.count = count;
        this.sum = sum;
        this.std = std;
        this.median = median;
        this.majority = majority;
        this.minority = minority;
        this.unique = unique;
        this.histogram = histogram;
        this.validPercent = validPercent;
        this.maskedPixels = maskedPixels;
        this.validPixels = validPixels;
        this.percentile2 = percentile2;
        this.percentile98 = percentile98;
    }

    /**
     * Get the min property: Minimum value in the band.
     * 
     * @return the min value.
     */
    @Generated
    public double getMin() {
        return this.min;
    }

    /**
     * Get the max property: Maximum value in the band.
     * 
     * @return the max value.
     */
    @Generated
    public double getMax() {
        return this.max;
    }

    /**
     * Get the mean property: Mean value of the band.
     * 
     * @return the mean value.
     */
    @Generated
    public double getMean() {
        return this.mean;
    }

    /**
     * Get the count property: Count of pixels in the band.
     * 
     * @return the count value.
     */
    @Generated
    public double getCount() {
        return this.count;
    }

    /**
     * Get the sum property: Sum of all pixel values in the band.
     * 
     * @return the sum value.
     */
    @Generated
    public double getSum() {
        return this.sum;
    }

    /**
     * Get the std property: Standard deviation of pixel values in the band.
     * 
     * @return the std value.
     */
    @Generated
    public double getStd() {
        return this.std;
    }

    /**
     * Get the median property: Median value of the band.
     * 
     * @return the median value.
     */
    @Generated
    public double getMedian() {
        return this.median;
    }

    /**
     * Get the majority property: Most common value in the band.
     * 
     * @return the majority value.
     */
    @Generated
    public double getMajority() {
        return this.majority;
    }

    /**
     * Get the minority property: Least common value in the band.
     * 
     * @return the minority value.
     */
    @Generated
    public double getMinority() {
        return this.minority;
    }

    /**
     * Get the unique property: Count of unique values in the band.
     * 
     * @return the unique value.
     */
    @Generated
    public double getUnique() {
        return this.unique;
    }

    /**
     * Get the histogram property: Histogram of pixel values in the band.
     * 
     * @return the histogram value.
     */
    @Generated
    public List<List<Double>> getHistogram() {
        return this.histogram;
    }

    /**
     * Get the validPercent property: Percentage of valid (non-masked) pixels.
     * 
     * @return the validPercent value.
     */
    @Generated
    public double getValidPercent() {
        return this.validPercent;
    }

    /**
     * Get the maskedPixels property: Count of masked pixels in the band.
     * 
     * @return the maskedPixels value.
     */
    @Generated
    public double getMaskedPixels() {
        return this.maskedPixels;
    }

    /**
     * Get the validPixels property: Count of valid (non-masked) pixels in the band.
     * 
     * @return the validPixels value.
     */
    @Generated
    public double getValidPixels() {
        return this.validPixels;
    }

    /**
     * Get the percentile2 property: Percentile 2
     * The 2nd percentile value.
     * 
     * @return the percentile2 value.
     */
    @Generated
    public double getPercentile2() {
        return this.percentile2;
    }

    /**
     * Get the percentile98 property: Percentile 98
     * The 98th percentile value.
     * 
     * @return the percentile98 value.
     */
    @Generated
    public double getPercentile98() {
        return this.percentile98;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("min", this.min);
        jsonWriter.writeDoubleField("max", this.max);
        jsonWriter.writeDoubleField("mean", this.mean);
        jsonWriter.writeDoubleField("count", this.count);
        jsonWriter.writeDoubleField("sum", this.sum);
        jsonWriter.writeDoubleField("std", this.std);
        jsonWriter.writeDoubleField("median", this.median);
        jsonWriter.writeDoubleField("majority", this.majority);
        jsonWriter.writeDoubleField("minority", this.minority);
        jsonWriter.writeDoubleField("unique", this.unique);
        jsonWriter.writeArrayField("histogram", this.histogram,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeDouble(element1)));
        jsonWriter.writeDoubleField("valid_percent", this.validPercent);
        jsonWriter.writeDoubleField("masked_pixels", this.maskedPixels);
        jsonWriter.writeDoubleField("valid_pixels", this.validPixels);
        jsonWriter.writeDoubleField("percentile_2", this.percentile2);
        jsonWriter.writeDoubleField("percentile_98", this.percentile98);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BandStatistics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BandStatistics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BandStatistics.
     */
    @Generated
    public static BandStatistics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double min = 0.0;
            double max = 0.0;
            double mean = 0.0;
            double count = 0.0;
            double sum = 0.0;
            double std = 0.0;
            double median = 0.0;
            double majority = 0.0;
            double minority = 0.0;
            double unique = 0.0;
            List<List<Double>> histogram = null;
            double validPercent = 0.0;
            double maskedPixels = 0.0;
            double validPixels = 0.0;
            double percentile2 = 0.0;
            double percentile98 = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("min".equals(fieldName)) {
                    min = reader.getDouble();
                } else if ("max".equals(fieldName)) {
                    max = reader.getDouble();
                } else if ("mean".equals(fieldName)) {
                    mean = reader.getDouble();
                } else if ("count".equals(fieldName)) {
                    count = reader.getDouble();
                } else if ("sum".equals(fieldName)) {
                    sum = reader.getDouble();
                } else if ("std".equals(fieldName)) {
                    std = reader.getDouble();
                } else if ("median".equals(fieldName)) {
                    median = reader.getDouble();
                } else if ("majority".equals(fieldName)) {
                    majority = reader.getDouble();
                } else if ("minority".equals(fieldName)) {
                    minority = reader.getDouble();
                } else if ("unique".equals(fieldName)) {
                    unique = reader.getDouble();
                } else if ("histogram".equals(fieldName)) {
                    histogram = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getDouble()));
                } else if ("valid_percent".equals(fieldName)) {
                    validPercent = reader.getDouble();
                } else if ("masked_pixels".equals(fieldName)) {
                    maskedPixels = reader.getDouble();
                } else if ("valid_pixels".equals(fieldName)) {
                    validPixels = reader.getDouble();
                } else if ("percentile_2".equals(fieldName)) {
                    percentile2 = reader.getDouble();
                } else if ("percentile_98".equals(fieldName)) {
                    percentile98 = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new BandStatistics(min, max, mean, count, sum, std, median, majority, minority, unique, histogram,
                validPercent, maskedPixels, validPixels, percentile2, percentile98);
        });
    }
}
