// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.mdCollection of STAC items with
 * statistical information.
 */
@Immutable
public final class GeoJsonStatisticsItemCollectionResponse
    implements JsonSerializable<GeoJsonStatisticsItemCollectionResponse> {
    /*
     * GeoJSON type identifier for ItemCollection
     */
    @Generated
    private final ItemCollectionType type;

    /*
     * Array of STAC items with statistics
     */
    @Generated
    private final List<GeoJsonStatisticsItemResponse> features;

    /*
     * Bounding box coordinates [west, south, east, north]
     */
    @Generated
    private List<Double> bbox;

    /*
     * Stac Version
     */
    @Generated
    private String stacVersion;

    /*
     * MSFT Created
     */
    @Generated
    private String msftCreated;

    /*
     * MSFT Updated
     */
    @Generated
    private String msftUpdated;

    /*
     * MSFT Short Description
     */
    @Generated
    private String msftShortDescription;

    /*
     * List of STAC extension URLs used by this item collection
     */
    @Generated
    private List<String> stacExtensions;

    /*
     * Related links for the item collection
     */
    @Generated
    private List<Link> links;

    /*
     * Pagination context for the response
     * 
     * See the [STAC Context
     * Extension](https://github.com/radiantearth/stac-api-spec/tree/master/extensions/context#context-extension-
     * specification)
     */
    @Generated
    private ContextExtension context;

    /**
     * Creates an instance of GeoJsonStatisticsItemCollectionResponse class.
     * 
     * @param type the type value to set.
     * @param features the features value to set.
     */
    @Generated
    private GeoJsonStatisticsItemCollectionResponse(ItemCollectionType type,
        List<GeoJsonStatisticsItemResponse> features) {
        this.type = type;
        this.features = features;
    }

    /**
     * Get the type property: GeoJSON type identifier for ItemCollection.
     * 
     * @return the type value.
     */
    @Generated
    public ItemCollectionType getType() {
        return this.type;
    }

    /**
     * Get the features property: Array of STAC items with statistics.
     * 
     * @return the features value.
     */
    @Generated
    public List<GeoJsonStatisticsItemResponse> getFeatures() {
        return this.features;
    }

    /**
     * Get the bbox property: Bounding box coordinates [west, south, east, north].
     * 
     * @return the bbox value.
     */
    @Generated
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Get the stacVersion property: Stac Version.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the msftCreated property: MSFT Created.
     * 
     * @return the msftCreated value.
     */
    @Generated
    public String getMsftCreated() {
        return this.msftCreated;
    }

    /**
     * Get the msftUpdated property: MSFT Updated.
     * 
     * @return the msftUpdated value.
     */
    @Generated
    public String getMsftUpdated() {
        return this.msftUpdated;
    }

    /**
     * Get the msftShortDescription property: MSFT Short Description.
     * 
     * @return the msftShortDescription value.
     */
    @Generated
    public String getMsftShortDescription() {
        return this.msftShortDescription;
    }

    /**
     * Get the stacExtensions property: List of STAC extension URLs used by this item collection.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Get the links property: Related links for the item collection.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Get the context property: Pagination context for the response
     * 
     * See the [STAC Context
     * Extension](https://github.com/radiantearth/stac-api-spec/tree/master/extensions/context#context-extension-specification).
     * 
     * @return the context value.
     */
    @Generated
    public ContextExtension getContext() {
        return this.context;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeStringField("stac_version", this.stacVersion);
        jsonWriter.writeStringField("msft:_created", this.msftCreated);
        jsonWriter.writeStringField("msft:_updated", this.msftUpdated);
        jsonWriter.writeStringField("msft:short_description", this.msftShortDescription);
        jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("context", this.context);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoJsonStatisticsItemCollectionResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoJsonStatisticsItemCollectionResponse if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GeoJsonStatisticsItemCollectionResponse.
     */
    @Generated
    public static GeoJsonStatisticsItemCollectionResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ItemCollectionType type = null;
            List<GeoJsonStatisticsItemResponse> features = null;
            List<Double> bbox = null;
            String stacVersion = null;
            String msftCreated = null;
            String msftUpdated = null;
            String msftShortDescription = null;
            List<String> stacExtensions = null;
            List<Link> links = null;
            ContextExtension context = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = ItemCollectionType.fromString(reader.getString());
                } else if ("features".equals(fieldName)) {
                    features = reader.readArray(reader1 -> GeoJsonStatisticsItemResponse.fromJson(reader1));
                } else if ("bbox".equals(fieldName)) {
                    bbox = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("stac_version".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("msft:_created".equals(fieldName)) {
                    msftCreated = reader.getString();
                } else if ("msft:_updated".equals(fieldName)) {
                    msftUpdated = reader.getString();
                } else if ("msft:short_description".equals(fieldName)) {
                    msftShortDescription = reader.getString();
                } else if ("stac_extensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link.fromJson(reader1));
                } else if ("context".equals(fieldName)) {
                    context = ContextExtension.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            GeoJsonStatisticsItemCollectionResponse deserializedGeoJsonStatisticsItemCollectionResponse
                = new GeoJsonStatisticsItemCollectionResponse(type, features);
            deserializedGeoJsonStatisticsItemCollectionResponse.bbox = bbox;
            deserializedGeoJsonStatisticsItemCollectionResponse.stacVersion = stacVersion;
            deserializedGeoJsonStatisticsItemCollectionResponse.msftCreated = msftCreated;
            deserializedGeoJsonStatisticsItemCollectionResponse.msftUpdated = msftUpdated;
            deserializedGeoJsonStatisticsItemCollectionResponse.msftShortDescription = msftShortDescription;
            deserializedGeoJsonStatisticsItemCollectionResponse.stacExtensions = stacExtensions;
            deserializedGeoJsonStatisticsItemCollectionResponse.links = links;
            deserializedGeoJsonStatisticsItemCollectionResponse.context = context;

            return deserializedGeoJsonStatisticsItemCollectionResponse;
        });
    }
}
