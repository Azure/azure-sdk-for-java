// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Represents a STAC Item, which is a GeoJSON Feature with additional metadata.
 */
@Fluent
public final class StacItemModel extends StacItemOrItemCollection {
    /*
     * The type discriminator for STAC resources.
     */
    @Generated
    private StacModelType type = StacModelType.FEATURE;

    /*
     * Geometry object defining the feature's shape
     */
    @Generated
    private Geometry geometry;

    /*
     * Bounding box coordinates for the feature
     */
    @Generated
    private List<Double> bbox;

    /*
     * Unique identifier for the feature
     */
    @Generated
    private String id;

    /*
     * ID of the STAC collection this item belongs to.
     */
    @Generated
    private String collection;

    /*
     * Attributes associated with the feature
     */
    @Generated
    private ItemProperties properties;

    /*
     * Assets
     */
    @Generated
    private Map<String, Asset> assets;

    /*
     * MSFT Timestamp
     */
    @Generated
    private String msftTimestamp;

    /*
     * MSFT ETag
     */
    @Generated
    private String msftEtag;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of StacItemModel class.
     */
    @Generated
    public StacItemModel() {
    }

    /**
     * Get the type property: The type discriminator for STAC resources.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public StacModelType getType() {
        return this.type;
    }

    /**
     * Get the geometry property: Geometry object defining the feature's shape.
     * 
     * @return the geometry value.
     */
    @Generated
    public Geometry getGeometry() {
        return this.geometry;
    }

    /**
     * Set the geometry property: Geometry object defining the feature's shape.
     * <p>Required when create the resource.</p>
     * 
     * @param geometry the geometry value to set.
     * @return the StacItemModel object itself.
     */
    @Generated
    public StacItemModel setGeometry(Geometry geometry) {
        this.geometry = geometry;
        this.updatedProperties.add("geometry");
        return this;
    }

    /**
     * Get the bbox property: Bounding box coordinates for the feature.
     * 
     * @return the bbox value.
     */
    @Generated
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: Bounding box coordinates for the feature.
     * <p>Required when create the resource.</p>
     * 
     * @param bbox the bbox value to set.
     * @return the StacItemModel object itself.
     */
    @Generated
    public StacItemModel setBbox(List<Double> bbox) {
        this.bbox = bbox;
        this.updatedProperties.add("bbox");
        return this;
    }

    /**
     * Get the id property: Unique identifier for the feature.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the collection property: ID of the STAC collection this item belongs to.
     * 
     * @return the collection value.
     */
    @Generated
    public String getCollection() {
        return this.collection;
    }

    /**
     * Set the collection property: ID of the STAC collection this item belongs to.
     * 
     * @param collection the collection value to set.
     * @return the StacItemModel object itself.
     */
    @Generated
    public StacItemModel setCollection(String collection) {
        this.collection = collection;
        this.updatedProperties.add("collection");
        return this;
    }

    /**
     * Get the properties property: Attributes associated with the feature.
     * 
     * @return the properties value.
     */
    @Generated
    public ItemProperties getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Attributes associated with the feature.
     * <p>Required when create the resource.</p>
     * 
     * @param properties the properties value to set.
     * @return the StacItemModel object itself.
     */
    @Generated
    public StacItemModel setProperties(ItemProperties properties) {
        this.properties = properties;
        this.updatedProperties.add("properties");
        return this;
    }

    /**
     * Get the assets property: Assets.
     * 
     * @return the assets value.
     */
    @Generated
    public Map<String, Asset> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Assets.
     * <p>Required when create the resource.</p>
     * 
     * @param assets the assets value to set.
     * @return the StacItemModel object itself.
     */
    @Generated
    public StacItemModel setAssets(Map<String, Asset> assets) {
        this.assets = assets;
        this.updatedProperties.add("assets");
        return this;
    }

    /**
     * Get the msftTimestamp property: MSFT Timestamp.
     * 
     * @return the msftTimestamp value.
     */
    @Generated
    public String getMsftTimestamp() {
        return this.msftTimestamp;
    }

    /**
     * Set the msftTimestamp property: MSFT Timestamp.
     * 
     * @param msftTimestamp the msftTimestamp value to set.
     * @return the StacItemModel object itself.
     */
    @Generated
    public StacItemModel setMsftTimestamp(String msftTimestamp) {
        this.msftTimestamp = msftTimestamp;
        this.updatedProperties.add("msftTimestamp");
        return this;
    }

    /**
     * Get the msftEtag property: MSFT ETag.
     * 
     * @return the msftEtag value.
     */
    @Generated
    public String getMsftEtag() {
        return this.msftEtag;
    }

    /**
     * Set the msftEtag property: MSFT ETag.
     * 
     * @param msftEtag the msftEtag value to set.
     * @return the StacItemModel object itself.
     */
    @Generated
    public StacItemModel setMsftEtag(String msftEtag) {
        this.msftEtag = msftEtag;
        this.updatedProperties.add("msftEtag");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItemModel setStacVersion(String stacVersion) {
        super.setStacVersion(stacVersion);
        this.updatedProperties.add("stacVersion");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItemModel setLinks(List<Link> links) {
        super.setLinks(links);
        this.updatedProperties.add("links");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItemModel setMsftCreated(String msftCreated) {
        super.setMsftCreated(msftCreated);
        this.updatedProperties.add("msftCreated");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItemModel setMsftUpdated(String msftUpdated) {
        super.setMsftUpdated(msftUpdated);
        this.updatedProperties.add("msftUpdated");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItemModel setMsftShortDescription(String msftShortDescription) {
        super.setMsftShortDescription(msftShortDescription);
        this.updatedProperties.add("msftShortDescription");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StacItemModel setStacExtensions(List<String> stacExtensions) {
        super.setStacExtensions(stacExtensions);
        this.updatedProperties.add("stacExtensions");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getStacItemOrItemCollectionAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("stac_version", getStacVersion());
            jsonWriter.writeArrayField("links", getLinks(), (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("msft:_created", getMsftCreated());
            jsonWriter.writeStringField("msft:_updated", getMsftUpdated());
            jsonWriter.writeStringField("msft:short_description", getMsftShortDescription());
            jsonWriter.writeArrayField("stac_extensions", getStacExtensions(),
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeJsonField("geometry", this.geometry);
            jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
            jsonWriter.writeStringField("collection", this.collection);
            jsonWriter.writeJsonField("properties", this.properties);
            jsonWriter.writeMapField("assets", this.assets, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("_msft:ts", this.msftTimestamp);
            jsonWriter.writeStringField("_msft:etag", this.msftEtag);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("stacVersion")) {
            if (getStacVersion() == null) {
                jsonWriter.writeNullField("stac_version");
            } else {
                jsonWriter.writeStringField("stac_version", getStacVersion());
            }
        }
        if (updatedProperties.contains("links")) {
            if (getLinks() == null) {
                jsonWriter.writeNullField("links");
            } else {
                jsonWriter.writeArrayField("links", getLinks(), (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("msftCreated")) {
            if (getMsftCreated() == null) {
                jsonWriter.writeNullField("msft:_created");
            } else {
                jsonWriter.writeStringField("msft:_created", getMsftCreated());
            }
        }
        if (updatedProperties.contains("msftUpdated")) {
            if (getMsftUpdated() == null) {
                jsonWriter.writeNullField("msft:_updated");
            } else {
                jsonWriter.writeStringField("msft:_updated", getMsftUpdated());
            }
        }
        if (updatedProperties.contains("msftShortDescription")) {
            if (getMsftShortDescription() == null) {
                jsonWriter.writeNullField("msft:short_description");
            } else {
                jsonWriter.writeStringField("msft:short_description", getMsftShortDescription());
            }
        }
        if (updatedProperties.contains("stacExtensions")) {
            if (getStacExtensions() == null) {
                jsonWriter.writeNullField("stac_extensions");
            } else {
                jsonWriter.writeArrayField("stac_extensions", getStacExtensions(),
                    (writer, element) -> writer.writeString(element));
            }
        }
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("geometry")) {
            if (this.geometry == null) {
                jsonWriter.writeNullField("geometry");
            } else {
                JsonMergePatchHelper.getGeometryAccessor().prepareModelForJsonMergePatch(this.geometry, true);
                jsonWriter.writeJsonField("geometry", this.geometry);
                JsonMergePatchHelper.getGeometryAccessor().prepareModelForJsonMergePatch(this.geometry, false);
            }
        }
        if (updatedProperties.contains("bbox")) {
            if (this.bbox == null) {
                jsonWriter.writeNullField("bbox");
            } else {
                jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
            }
        }
        if (updatedProperties.contains("collection")) {
            if (this.collection == null) {
                jsonWriter.writeNullField("collection");
            } else {
                jsonWriter.writeStringField("collection", this.collection);
            }
        }
        if (updatedProperties.contains("properties")) {
            if (this.properties == null) {
                jsonWriter.writeNullField("properties");
            } else {
                JsonMergePatchHelper.getItemPropertiesAccessor().prepareModelForJsonMergePatch(this.properties, true);
                jsonWriter.writeJsonField("properties", this.properties);
                JsonMergePatchHelper.getItemPropertiesAccessor().prepareModelForJsonMergePatch(this.properties, false);
            }
        }
        if (updatedProperties.contains("assets")) {
            if (this.assets == null) {
                jsonWriter.writeNullField("assets");
            } else {
                jsonWriter.writeMapField("assets", this.assets, (writer, element) -> {
                    if (element != null) {
                        JsonMergePatchHelper.getAssetAccessor().prepareModelForJsonMergePatch(element, true);
                        writer.writeJson(element);
                        JsonMergePatchHelper.getAssetAccessor().prepareModelForJsonMergePatch(element, false);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("msftTimestamp")) {
            if (this.msftTimestamp == null) {
                jsonWriter.writeNullField("_msft:ts");
            } else {
                jsonWriter.writeStringField("_msft:ts", this.msftTimestamp);
            }
        }
        if (updatedProperties.contains("msftEtag")) {
            if (this.msftEtag == null) {
                jsonWriter.writeNullField("_msft:etag");
            } else {
                jsonWriter.writeStringField("_msft:etag", this.msftEtag);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItemModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItemModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacItemModel.
     */
    @Generated
    public static StacItemModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StacItemModel deserializedStacItemModel = new StacItemModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stac_version".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setStacVersion(deserializedStacItemModel, reader.getString());
                } else if ("links".equals(fieldName)) {
                    List<Link> links = reader.readArray(reader1 -> Link.fromJson(reader1));
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setLinks(deserializedStacItemModel, links);
                } else if ("msft:_created".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setMsftCreated(deserializedStacItemModel, reader.getString());
                } else if ("msft:_updated".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setMsftUpdated(deserializedStacItemModel, reader.getString());
                } else if ("msft:short_description".equals(fieldName)) {
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setMsftShortDescription(deserializedStacItemModel, reader.getString());
                } else if ("stac_extensions".equals(fieldName)) {
                    List<String> stacExtensions = reader.readArray(reader1 -> reader1.getString());
                    JsonMergePatchHelper.getStacItemOrItemCollectionAccessor()
                        .setStacExtensions(deserializedStacItemModel, stacExtensions);
                } else if ("id".equals(fieldName)) {
                    deserializedStacItemModel.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStacItemModel.type = StacModelType.fromString(reader.getString());
                } else if ("geometry".equals(fieldName)) {
                    deserializedStacItemModel.geometry = Geometry.fromJson(reader);
                } else if ("bbox".equals(fieldName)) {
                    List<Double> bbox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedStacItemModel.bbox = bbox;
                } else if ("collection".equals(fieldName)) {
                    deserializedStacItemModel.collection = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedStacItemModel.properties = ItemProperties.fromJson(reader);
                } else if ("assets".equals(fieldName)) {
                    Map<String, Asset> assets = reader.readMap(reader1 -> Asset.fromJson(reader1));
                    deserializedStacItemModel.assets = assets;
                } else if ("_msft:ts".equals(fieldName)) {
                    deserializedStacItemModel.msftTimestamp = reader.getString();
                } else if ("_msft:etag".equals(fieldName)) {
                    deserializedStacItemModel.msftEtag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStacItemModel;
        });
    }
}
