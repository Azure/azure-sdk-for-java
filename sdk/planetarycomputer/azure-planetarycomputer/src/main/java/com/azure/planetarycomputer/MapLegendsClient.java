// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import com.azure.planetarycomputer.implementation.MapLegendsClientImpl;
import com.azure.planetarycomputer.models.ClassmapLegendResponse;
import java.util.List;

/**
 * Initializes a new instance of the synchronous MapLegendsClient type.
 */
@ServiceClient(builder = MapLegendsClientBuilder.class)
public final class MapLegendsClient {
    @Generated
    private final MapLegendsClientImpl serviceClient;

    /**
     * Initializes an instance of MapLegendsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    MapLegendsClient(MapLegendsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *      (Optional): {
     *         String (Required): [
     *             long (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param classmapName classmap name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassmapLegendWithResponse(String classmapName, RequestOptions requestOptions) {
        return this.serviceClient.getClassmapLegendWithResponse(classmapName, requestOptions);
    }

    /**
     * Get Legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>height</td><td>Double</td><td>No</td><td>The output height of the legend image</td></tr>
     * <tr><td>width</td><td>Double</td><td>No</td><td>The output width of the legend image</td></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param cmapName The name of the registered colormap to generate a legend for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLegendWithResponse(String cmapName, RequestOptions requestOptions) {
        return this.serviceClient.getLegendWithResponse(cmapName, requestOptions);
    }

    /**
     * Get Interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>trim_start</td><td>Integer</td><td>No</td><td>Number of items to trim from the start of the
     * cmap</td></tr>
     * <tr><td>trim_end</td><td>Integer</td><td>No</td><td>Number of items to trim from the end of the cmap</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required)[
     *         BinaryData (Required)
     *     ]
     * ]
     * }
     * </pre>
     * 
     * @param classmapName classmap name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getIntervalLegendWithResponse(String classmapName, RequestOptions requestOptions) {
        return this.serviceClient.getIntervalLegendWithResponse(classmapName, requestOptions);
    }

    /**
     * Get Classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * 
     * @param classmapName classmap name.
     * @param trimStart Number of items to trim from the start of the cmap.
     * @param trimEnd Number of items to trim from the end of the cmap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ClassmapLegendResponse getClassmapLegend(String classmapName, Integer trimStart, Integer trimEnd) {
        // Generated convenience method for getClassmapLegendWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (trimStart != null) {
            requestOptions.addQueryParam("trim_start", String.valueOf(trimStart), false);
        }
        if (trimEnd != null) {
            requestOptions.addQueryParam("trim_end", String.valueOf(trimEnd), false);
        }
        return getClassmapLegendWithResponse(classmapName, requestOptions).getValue()
            .toObject(ClassmapLegendResponse.class);
    }

    /**
     * Get Classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * 
     * @param classmapName classmap name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return classmap Legend
     * 
     * Generate values and color swatches mapping for a given classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim
     * from the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ClassmapLegendResponse getClassmapLegend(String classmapName) {
        // Generated convenience method for getClassmapLegendWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getClassmapLegendWithResponse(classmapName, requestOptions).getValue()
            .toObject(ClassmapLegendResponse.class);
    }

    /**
     * Get Legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     * 
     * @param cmapName The name of the registered colormap to generate a legend for.
     * @param height The output height of the legend image.
     * @param width The output width of the legend image.
     * @param trimStart Number of items to trim from the start of the cmap.
     * @param trimEnd Number of items to trim from the end of the cmap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getLegend(String cmapName, Double height, Double width, Integer trimStart, Integer trimEnd) {
        // Generated convenience method for getLegendWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (height != null) {
            requestOptions.addQueryParam("height", String.valueOf(height), false);
        }
        if (width != null) {
            requestOptions.addQueryParam("width", String.valueOf(width), false);
        }
        if (trimStart != null) {
            requestOptions.addQueryParam("trim_start", String.valueOf(trimStart), false);
        }
        if (trimEnd != null) {
            requestOptions.addQueryParam("trim_end", String.valueOf(trimEnd), false);
        }
        return getLegendWithResponse(cmapName, requestOptions).getValue();
    }

    /**
     * Get Legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     * 
     * @param cmapName The name of the registered colormap to generate a legend for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getLegend(String cmapName) {
        // Generated convenience method for getLegendWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLegendWithResponse(cmapName, requestOptions).getValue();
    }

    /**
     * Get Interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * 
     * @param classmapName classmap name.
     * @param trimStart Number of items to trim from the start of the cmap.
     * @param trimEnd Number of items to trim from the end of the cmap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<List<BinaryData>> getIntervalLegend(String classmapName, Integer trimStart, Integer trimEnd) {
        // Generated convenience method for getIntervalLegendWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (trimStart != null) {
            requestOptions.addQueryParam("trim_start", String.valueOf(trimStart), false);
        }
        if (trimEnd != null) {
            requestOptions.addQueryParam("trim_end", String.valueOf(trimEnd), false);
        }
        return getIntervalLegendWithResponse(classmapName, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIST_BINARY_DATA);
    }

    /**
     * Get Interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     * 
     * @param classmapName classmap name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return interval Legend
     * 
     * Generate values and color swatches mapping for a given interval classmap.
     * 
     * Args:
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<List<BinaryData>> getIntervalLegend(String classmapName) {
        // Generated convenience method for getIntervalLegendWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getIntervalLegendWithResponse(classmapName, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIST_BINARY_DATA);
    }

    @Generated
    private static final TypeReference<List<List<BinaryData>>> TYPE_REFERENCE_LIST_LIST_BINARY_DATA
        = new TypeReference<List<List<BinaryData>>>() {
        };
}
