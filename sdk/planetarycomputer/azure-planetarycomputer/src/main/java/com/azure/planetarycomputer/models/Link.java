// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.planetarycomputer.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Link model.
 * 
 * Ref:
 * http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml
 * 
 * Represents a link.
 */
@Fluent
public final class Link implements JsonSerializable<Link> {
    /*
     * The relationship type of the link.
     */
    @Generated
    private String rel;

    /*
     * The title of the link.
     */
    @Generated
    private String title;

    /*
     * The MIME type of the linked resource.
     */
    @Generated
    private LinkType type;

    /*
     * The URL of the link.
     */
    @Generated
    private String href;

    /*
     * The language of the linked resource.
     */
    @Generated
    private String hreflang;

    /*
     * The length of the linked resource.
     */
    @Generated
    private Integer length;

    /*
     * Specifies the HTTP method that the resource expects.
     * Default: GET.
     */
    @Generated
    private LinkMethod method;

    /*
     * Object key-value pairs that map to headers.
     * Example: { "Accept": "application/json" }.
     */
    @Generated
    private Map<String, String> headers;

    /*
     * For POST requests, the resource can specify the HTTP body as a JSON object.
     */
    @Generated
    private Map<String, BinaryData> body;

    /*
     * Indicates whether the client is expected to merge the body value into the current request body before following
     * the link.
     * This is only valid when the server is responding to a POST request.
     * Default: false.
     */
    @Generated
    private Boolean merge;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setLinkAccessor(new JsonMergePatchHelper.LinkAccessor() {
            @Override
            public Link prepareModelForJsonMergePatch(Link model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Link model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of Link class.
     */
    @Generated
    public Link() {
    }

    /**
     * Get the rel property: The relationship type of the link.
     * 
     * @return the rel value.
     */
    @Generated
    public String getRel() {
        return this.rel;
    }

    /**
     * Set the rel property: The relationship type of the link.
     * 
     * @param rel the rel value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setRel(String rel) {
        this.rel = rel;
        this.updatedProperties.add("rel");
        return this;
    }

    /**
     * Get the title property: The title of the link.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Set the title property: The title of the link.
     * 
     * @param title the title value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setTitle(String title) {
        this.title = title;
        this.updatedProperties.add("title");
        return this;
    }

    /**
     * Get the type property: The MIME type of the linked resource.
     * 
     * @return the type value.
     */
    @Generated
    public LinkType getType() {
        return this.type;
    }

    /**
     * Set the type property: The MIME type of the linked resource.
     * 
     * @param type the type value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setType(LinkType type) {
        this.type = type;
        this.updatedProperties.add("type");
        return this;
    }

    /**
     * Get the href property: The URL of the link.
     * 
     * @return the href value.
     */
    @Generated
    public String getHref() {
        return this.href;
    }

    /**
     * Set the href property: The URL of the link.
     * <p>Required when create the resource.</p>
     * 
     * @param href the href value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setHref(String href) {
        this.href = href;
        this.updatedProperties.add("href");
        return this;
    }

    /**
     * Get the hreflang property: The language of the linked resource.
     * 
     * @return the hreflang value.
     */
    @Generated
    public String getHreflang() {
        return this.hreflang;
    }

    /**
     * Set the hreflang property: The language of the linked resource.
     * 
     * @param hreflang the hreflang value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setHreflang(String hreflang) {
        this.hreflang = hreflang;
        this.updatedProperties.add("hreflang");
        return this;
    }

    /**
     * Get the length property: The length of the linked resource.
     * 
     * @return the length value.
     */
    @Generated
    public Integer getLength() {
        return this.length;
    }

    /**
     * Set the length property: The length of the linked resource.
     * 
     * @param length the length value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setLength(Integer length) {
        this.length = length;
        this.updatedProperties.add("length");
        return this;
    }

    /**
     * Get the method property: Specifies the HTTP method that the resource expects.
     * Default: GET.
     * 
     * @return the method value.
     */
    @Generated
    public LinkMethod getMethod() {
        return this.method;
    }

    /**
     * Set the method property: Specifies the HTTP method that the resource expects.
     * Default: GET.
     * 
     * @param method the method value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setMethod(LinkMethod method) {
        this.method = method;
        this.updatedProperties.add("method");
        return this;
    }

    /**
     * Get the headers property: Object key-value pairs that map to headers.
     * Example: { "Accept": "application/json" }.
     * 
     * @return the headers value.
     */
    @Generated
    public Map<String, String> getHeaders() {
        return this.headers;
    }

    /**
     * Set the headers property: Object key-value pairs that map to headers.
     * Example: { "Accept": "application/json" }.
     * 
     * @param headers the headers value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setHeaders(Map<String, String> headers) {
        this.headers = headers;
        this.updatedProperties.add("headers");
        return this;
    }

    /**
     * Get the body property: For POST requests, the resource can specify the HTTP body as a JSON object.
     * 
     * @return the body value.
     */
    @Generated
    public Map<String, BinaryData> getBody() {
        return this.body;
    }

    /**
     * Set the body property: For POST requests, the resource can specify the HTTP body as a JSON object.
     * 
     * @param body the body value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setBody(Map<String, BinaryData> body) {
        this.body = body;
        this.updatedProperties.add("body");
        return this;
    }

    /**
     * Get the merge property: Indicates whether the client is expected to merge the body value into the current request
     * body before following the link.
     * This is only valid when the server is responding to a POST request.
     * Default: false.
     * 
     * @return the merge value.
     */
    @Generated
    public Boolean isMerge() {
        return this.merge;
    }

    /**
     * Set the merge property: Indicates whether the client is expected to merge the body value into the current request
     * body before following the link.
     * This is only valid when the server is responding to a POST request.
     * Default: false.
     * 
     * @param merge the merge value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setMerge(Boolean merge) {
        this.merge = merge;
        this.updatedProperties.add("merge");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("rel", this.rel);
            jsonWriter.writeStringField("title", this.title);
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeStringField("href", this.href);
            jsonWriter.writeStringField("hreflang", this.hreflang);
            jsonWriter.writeNumberField("length", this.length);
            jsonWriter.writeStringField("method", this.method == null ? null : this.method.toString());
            jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
            jsonWriter.writeMapField("body", this.body,
                (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
            jsonWriter.writeBooleanField("merge", this.merge);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("rel")) {
            if (this.rel == null) {
                jsonWriter.writeNullField("rel");
            } else {
                jsonWriter.writeStringField("rel", this.rel);
            }
        }
        if (updatedProperties.contains("title")) {
            if (this.title == null) {
                jsonWriter.writeNullField("title");
            } else {
                jsonWriter.writeStringField("title", this.title);
            }
        }
        if (updatedProperties.contains("type")) {
            if (this.type == null) {
                jsonWriter.writeNullField("type");
            } else {
                jsonWriter.writeStringField("type", this.type.toString());
            }
        }
        if (updatedProperties.contains("href")) {
            if (this.href == null) {
                jsonWriter.writeNullField("href");
            } else {
                jsonWriter.writeStringField("href", this.href);
            }
        }
        if (updatedProperties.contains("hreflang")) {
            if (this.hreflang == null) {
                jsonWriter.writeNullField("hreflang");
            } else {
                jsonWriter.writeStringField("hreflang", this.hreflang);
            }
        }
        if (updatedProperties.contains("length")) {
            if (this.length == null) {
                jsonWriter.writeNullField("length");
            } else {
                jsonWriter.writeNumberField("length", this.length);
            }
        }
        if (updatedProperties.contains("method")) {
            if (this.method == null) {
                jsonWriter.writeNullField("method");
            } else {
                jsonWriter.writeStringField("method", this.method.toString());
            }
        }
        if (updatedProperties.contains("headers")) {
            if (this.headers == null) {
                jsonWriter.writeNullField("headers");
            } else {
                jsonWriter.writeMapField("headers", this.headers, (writer, element) -> {
                    if (element != null) {
                        writer.writeString(element);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("body")) {
            if (this.body == null) {
                jsonWriter.writeNullField("body");
            } else {
                jsonWriter.writeMapField("body", this.body, (writer, element) -> {
                    if (element != null) {
                        writer.writeUntyped(element == null ? null : element.toObject(Object.class));
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("merge")) {
            if (this.merge == null) {
                jsonWriter.writeNullField("merge");
            } else {
                jsonWriter.writeBooleanField("merge", this.merge);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Link from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Link if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Link.
     */
    @Generated
    public static Link fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Link deserializedLink = new Link();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rel".equals(fieldName)) {
                    deserializedLink.rel = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedLink.title = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLink.type = LinkType.fromString(reader.getString());
                } else if ("href".equals(fieldName)) {
                    deserializedLink.href = reader.getString();
                } else if ("hreflang".equals(fieldName)) {
                    deserializedLink.hreflang = reader.getString();
                } else if ("length".equals(fieldName)) {
                    deserializedLink.length = reader.getNullable(JsonReader::getInt);
                } else if ("method".equals(fieldName)) {
                    deserializedLink.method = LinkMethod.fromString(reader.getString());
                } else if ("headers".equals(fieldName)) {
                    Map<String, String> headers = reader.readMap(reader1 -> reader1.getString());
                    deserializedLink.headers = headers;
                } else if ("body".equals(fieldName)) {
                    Map<String, BinaryData> body = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedLink.body = body;
                } else if ("merge".equals(fieldName)) {
                    deserializedLink.merge = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLink;
        });
    }
}
