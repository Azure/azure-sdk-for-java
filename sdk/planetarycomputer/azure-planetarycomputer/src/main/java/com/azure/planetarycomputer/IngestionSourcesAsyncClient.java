// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.planetarycomputer.com.azure.planetarycomputer.models.IngestionSource;
import com.azure.planetarycomputer.com.azure.planetarycomputer.models.IngestionSourcesPagedResponse;
import com.azure.planetarycomputer.com.azure.planetarycomputer.models.ManagedIdentitiesPagedResponse;
import com.azure.planetarycomputer.implementation.IngestionSourcesClientImpl;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous IngestionSourcesClient type.
 */
@ServiceClient(builder = IngestionSourcesClientBuilder.class, isAsync = true)
public final class IngestionSourcesAsyncClient {
    @Generated
    private final IngestionSourcesClientImpl serviceClient;

    /**
     * Initializes an instance of IngestionSourcesAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    IngestionSourcesAsyncClient(IngestionSourcesClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get ingestion sources in a geo-catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             kind: String(SasToken/BlobManagedIdentity) (Required)
     *             created: OffsetDateTime (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion sources in a geo-catalog along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionSourcesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getIngestionSourcesWithResponseAsync(requestOptions);
    }

    /**
     * Create a new ingestion source in a geo-catalog.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param ingestionSource Definition of the ingestion source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion Source along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createIngestionSourceWithResponse(BinaryData ingestionSource,
        RequestOptions requestOptions) {
        return this.serviceClient.createIngestionSourceWithResponseAsync(ingestionSource, requestOptions);
    }

    /**
     * Get an ingestion source in a geo-catalog.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param id Ingestion source id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an ingestion source in a geo-catalog along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getIngestionSourceWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getIngestionSourceWithResponseAsync(id, requestOptions);
    }

    /**
     * Update an existing ingestion source in a geo-catalog.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(SasToken/BlobManagedIdentity) (Required)
     *     id: String (Required)
     *     created: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param id Ingestion source id.
     * @param ingestionSource Definition of the ingestion source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestion Source along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceIngestionSourceWithResponse(String id, BinaryData ingestionSource,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceIngestionSourceWithResponseAsync(id, ingestionSource, requestOptions);
    }

    /**
     * Delete an ingestion source from a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteIngestionSourceWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.deleteIngestionSourceWithResponseAsync(id, requestOptions);
    }

    /**
     * Get all managed identities with access to storage accounts configured for a geo-catalog.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             objectId: String (Required)
     *             resourceId: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all managed identities with access to storage accounts configured for a geo-catalog along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getManagedIdentitiesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getManagedIdentitiesWithResponseAsync(requestOptions);
    }

    /**
     * Get ingestion sources in a geo-catalog.
     * 
     * @param top The number of items to return.
     * @param skip The number of items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestion sources in a geo-catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionSourcesPagedResponse> getIngestionSources(Long top, Long skip) {
        // Generated convenience method for getIngestionSourcesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("$top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("$skip", String.valueOf(skip), false);
        }
        return getIngestionSourcesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionSourcesPagedResponse.class));
    }

    /**
     * Get ingestion sources in a geo-catalog.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestion sources in a geo-catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionSourcesPagedResponse> getIngestionSources() {
        // Generated convenience method for getIngestionSourcesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getIngestionSourcesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionSourcesPagedResponse.class));
    }

    /**
     * Create a new ingestion source in a geo-catalog.
     * 
     * @param ingestionSource Definition of the ingestion source.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestion Source on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionSource> createIngestionSource(IngestionSource ingestionSource) {
        // Generated convenience method for createIngestionSourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createIngestionSourceWithResponse(BinaryData.fromObject(ingestionSource), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionSource.class));
    }

    /**
     * Get an ingestion source in a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an ingestion source in a geo-catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionSource> getIngestionSource(String id) {
        // Generated convenience method for getIngestionSourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getIngestionSourceWithResponse(id, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionSource.class));
    }

    /**
     * Update an existing ingestion source in a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @param ingestionSource Definition of the ingestion source.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestion Source on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionSource> createOrReplaceIngestionSource(String id, IngestionSource ingestionSource) {
        // Generated convenience method for createOrReplaceIngestionSourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceIngestionSourceWithResponse(id, BinaryData.fromObject(ingestionSource), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionSource.class));
    }

    /**
     * Delete an ingestion source from a geo-catalog.
     * 
     * @param id Ingestion source id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteIngestionSource(String id) {
        // Generated convenience method for deleteIngestionSourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteIngestionSourceWithResponse(id, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get all managed identities with access to storage accounts configured for a geo-catalog.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed identities with access to storage accounts configured for a geo-catalog on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManagedIdentitiesPagedResponse> getManagedIdentities() {
        // Generated convenience method for getManagedIdentitiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getManagedIdentitiesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ManagedIdentitiesPagedResponse.class));
    }
}
