// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.planetarycomputer.PlanetaryComputerServiceVersion;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the StacCollectionConfigurationClient type.
 */
public final class StacCollectionConfigurationClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final StacCollectionConfigurationClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final PlanetaryComputerServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PlanetaryComputerServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of StacCollectionConfigurationClient client.
     * 
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public StacCollectionConfigurationClientImpl(String endpoint, PlanetaryComputerServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of StacCollectionConfigurationClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public StacCollectionConfigurationClientImpl(HttpPipeline httpPipeline, String endpoint,
        PlanetaryComputerServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of StacCollectionConfigurationClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public StacCollectionConfigurationClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        String endpoint, PlanetaryComputerServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(StacCollectionConfigurationClientService.class, this.httpPipeline,
            this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for StacCollectionConfigurationClient to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "StacCollectionConfigurationClient")
    public interface StacCollectionConfigurationClientService {
        // @Multipart not supported by RestProxy
        @Post("/stac/collections/{collectionId}/assets")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createCollectionAsset(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("multipart/form-data") BinaryData body, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/stac/collections/{collectionId}/assets")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createCollectionAssetSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("multipart/form-data") BinaryData body, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Put("/stac/collections/{collectionId}/assets/{assetId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplaceCollectionAsset(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("assetId") String assetId, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/form-data") BinaryData body,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Put("/stac/collections/{collectionId}/assets/{assetId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceCollectionAssetSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("assetId") String assetId, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/form-data") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Delete("/stac/collections/{collectionId}/assets/{assetId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteCollectionAsset(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("assetId") String assetId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/stac/collections/{collectionId}/assets/{assetId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteCollectionAssetSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("assetId") String assetId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/stac/collections/{collectionId}/configurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getCollectionConfig(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getCollectionConfigSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/mosaics")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAllMosaics(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/mosaics")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAllMosaicsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/stac/collections/{collectionId}/configurations/mosaics")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addMosaic(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/stac/collections/{collectionId}/configurations/mosaics")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> addMosaicSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/mosaics/{mosaicId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getMosaic(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("mosaicId") String mosaicId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/stac/collections/{collectionId}/configurations/mosaics/{mosaicId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getMosaicSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("mosaicId") String mosaicId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/stac/collections/{collectionId}/configurations/mosaics/{mosaicId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplaceMosaic(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("mosaicId") String mosaicId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/configurations/mosaics/{mosaicId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceMosaicSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("mosaicId") String mosaicId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Delete("/stac/collections/{collectionId}/configurations/mosaics/{mosaicId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteMosaic(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("mosaicId") String mosaicId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/stac/collections/{collectionId}/configurations/mosaics/{mosaicId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteMosaicSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("mosaicId") String mosaicId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/stac/collections/{collectionId}/configurations/partition-type")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionType(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/partition-type")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getPartitionTypeSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/configurations/partition-type")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> replacePartitionType(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/configurations/partition-type")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> replacePartitionTypeSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/render-options")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAllRenderOptions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/render-options")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAllRenderOptionsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/stac/collections/{collectionId}/configurations/render-options")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createRenderOption(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/stac/collections/{collectionId}/configurations/render-options")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createRenderOptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/render-options/{renderOptionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRenderOption(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("renderOptionId") String renderOptionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/render-options/{renderOptionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getRenderOptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("renderOptionId") String renderOptionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/configurations/render-options/{renderOptionId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplaceRenderOption(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("renderOptionId") String renderOptionId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/configurations/render-options/{renderOptionId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceRenderOptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("renderOptionId") String renderOptionId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Delete("/stac/collections/{collectionId}/configurations/render-options/{renderOptionId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRenderOption(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("renderOptionId") String renderOptionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/stac/collections/{collectionId}/configurations/render-options/{renderOptionId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteRenderOptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("renderOptionId") String renderOptionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/tile-settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTileSettings(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/configurations/tile-settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTileSettingsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/configurations/tile-settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> replaceTileSettings(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/configurations/tile-settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> replaceTileSettingsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/queryables/{queryableName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplaceQueryable(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("queryableName") String queryableName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Put("/stac/collections/{collectionId}/queryables/{queryableName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceQueryableSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("queryableName") String queryableName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Delete("/stac/collections/{collectionId}/queryables/{queryableName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteQueryable(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("queryableName") String queryableName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/stac/collections/{collectionId}/queryables/{queryableName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteQueryableSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("queryableName") String queryableName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/thumbnail")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getCollectionThumbnail(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/stac/collections/{collectionId}/thumbnail")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getCollectionThumbnailSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to write, without a valid href to the asset.
     * file: The file to write.
     * collection_id: The ID of the collection to write the asset to.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the newly created asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param body Multi-part form data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createCollectionAssetWithResponseAsync(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createCollectionAsset(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to write, without a valid href to the asset.
     * file: The file to write.
     * collection_id: The ID of the collection to write the asset to.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the newly created asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param body Multi-part form data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCollectionAssetWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createCollectionAssetSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            collectionId, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param body Multi-part form data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceCollectionAssetWithResponseAsync(String collectionId,
        String assetId, BinaryData body, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrReplaceCollectionAsset(this.getEndpoint(), this.getServiceVersion().getVersion(),
                collectionId, assetId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     msft:_created: String (Optional)
     *     msft:_updated: String (Optional)
     *     msft:short_description: String (Optional)
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Optional, Required on create)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             title: String (Optional)
     *             description: String (Optional)
     *             href: String (Optional, Required on create)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Optional): [
     *                  (Optional)[
     *                     double (Optional)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param body Multi-part form data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
     * 
     * Represents a STAC collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceCollectionAssetWithResponse(String collectionId, String assetId,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createOrReplaceCollectionAssetSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            collectionId, assetId, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to delete the asset from.
     * asset_id: The ID of the asset to delete.
     * 
     * Returns:
     * A Response object indicating the success of the deletion.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCollectionAssetWithResponseAsync(String collectionId, String assetId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteCollectionAsset(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, assetId, accept, requestOptions, context));
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to delete the asset from.
     * asset_id: The ID of the asset to delete.
     * 
     * Returns:
     * A Response object indicating the success of the deletion.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteCollectionAssetWithResponse(String collectionId, String assetId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteCollectionAssetSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            collectionId, assetId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get Config
     * 
     * Get the complete user configuration for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tileSettings (Required): {
     *         minZoom: int (Required)
     *         maxItemsPerTile: int (Required)
     *         defaultLocation (Optional): {
     *             zoom: int (Required)
     *             coordinates (Required): [
     *                 double (Required)
     *             ]
     *         }
     *     }
     *     mosaicInfo (Required): {
     *         mosaics (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 cql (Required): [
     *                      (Required){
     *                          (Optional): {
     *                             String: BinaryData (Required)
     *                         }
     *                     }
     *                 ]
     *             }
     *         ]
     *         renderOptions (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *                 options: String (Optional)
     *                 vectorOptions (Optional): {
     *                     tilejsonKey: String (Required)
     *                     sourceLayer: String (Required)
     *                     fillColor: String (Optional)
     *                     strokeColor: String (Optional)
     *                     strokeWidth: Integer (Optional)
     *                     filter (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *                 minZoom: Integer (Optional)
     *                 legend (Optional): {
     *                     type: String(continuous/classmap/interval/none) (Optional)
     *                     labels (Optional): [
     *                         String (Optional)
     *                     ]
     *                     trimStart: Integer (Optional)
     *                     trimEnd: Integer (Optional)
     *                     scaleFactor: Double (Optional)
     *                 }
     *                 conditions (Optional): [
     *                      (Optional){
     *                         property: String (Required)
     *                         value: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         defaultLocation (Optional): (recursive schema, see defaultLocation above)
     *         defaultCustomQuery (Optional): (recursive schema, see defaultCustomQuery above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return config
     * 
     * Get the complete user configuration for a given collection along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCollectionConfigWithResponseAsync(String collectionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getCollectionConfig(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get Config
     * 
     * Get the complete user configuration for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tileSettings (Required): {
     *         minZoom: int (Required)
     *         maxItemsPerTile: int (Required)
     *         defaultLocation (Optional): {
     *             zoom: int (Required)
     *             coordinates (Required): [
     *                 double (Required)
     *             ]
     *         }
     *     }
     *     mosaicInfo (Required): {
     *         mosaics (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 cql (Required): [
     *                      (Required){
     *                          (Optional): {
     *                             String: BinaryData (Required)
     *                         }
     *                     }
     *                 ]
     *             }
     *         ]
     *         renderOptions (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *                 options: String (Optional)
     *                 vectorOptions (Optional): {
     *                     tilejsonKey: String (Required)
     *                     sourceLayer: String (Required)
     *                     fillColor: String (Optional)
     *                     strokeColor: String (Optional)
     *                     strokeWidth: Integer (Optional)
     *                     filter (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *                 minZoom: Integer (Optional)
     *                 legend (Optional): {
     *                     type: String(continuous/classmap/interval/none) (Optional)
     *                     labels (Optional): [
     *                         String (Optional)
     *                     ]
     *                     trimStart: Integer (Optional)
     *                     trimEnd: Integer (Optional)
     *                     scaleFactor: Double (Optional)
     *                 }
     *                 conditions (Optional): [
     *                      (Optional){
     *                         property: String (Required)
     *                         value: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         defaultLocation (Optional): (recursive schema, see defaultLocation above)
     *         defaultCustomQuery (Optional): (recursive schema, see defaultCustomQuery above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return config
     * 
     * Get the complete user configuration for a given collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCollectionConfigWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getCollectionConfigSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get Collection Mosaics
     * 
     * Get the mosaic definitions for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         cql (Required): [
     *              (Required){
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaics
     * 
     * Get the mosaic definitions for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllMosaicsWithResponseAsync(String collectionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAllMosaics(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get Collection Mosaics
     * 
     * Get the mosaic definitions for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         cql (Required): [
     *              (Required){
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaics
     * 
     * Get the mosaic definitions for a given collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllMosaicsWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAllMosaicsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Add Collection Mosaic
     * 
     * Add a mosaic definition to a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Mosaic definition to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines a named mosaic with filtering criteria along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addMosaicWithResponseAsync(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.addMosaic(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Add Collection Mosaic
     * 
     * Add a mosaic definition to a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Mosaic definition to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines a named mosaic with filtering criteria along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addMosaicWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.addMosaicSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Get Collection Mosaic
     * 
     * Get a mosaic definition from a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaic
     * 
     * Get a mosaic definition from a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMosaicWithResponseAsync(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getMosaic(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, mosaicId, accept, requestOptions, context));
    }

    /**
     * Get Collection Mosaic
     * 
     * Get a mosaic definition from a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaic
     * 
     * Get a mosaic definition from a given collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMosaicWithResponse(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getMosaicSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId, mosaicId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Update Collection Mosaic
     * 
     * Update a mosaic definition from a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param body Mosaic definition to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines a named mosaic with filtering criteria along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceMosaicWithResponseAsync(String collectionId, String mosaicId,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrReplaceMosaic(this.getEndpoint(), this.getServiceVersion().getVersion(),
                collectionId, mosaicId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Update Collection Mosaic
     * 
     * Update a mosaic definition from a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param body Mosaic definition to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines a named mosaic with filtering criteria along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceMosaicWithResponse(String collectionId, String mosaicId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrReplaceMosaicSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            collectionId, mosaicId, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Delete Collection Mosaic
     * 
     * Delete a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMosaicWithResponseAsync(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteMosaic(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, mosaicId, accept, requestOptions, context));
    }

    /**
     * Delete Collection Mosaic
     * 
     * Delete a mosaic definition from a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param mosaicId Unique identifier for the mosaic configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMosaicWithResponse(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteMosaicSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            mosaicId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get Partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionTypeWithResponseAsync(String collectionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getPartitionType(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get Partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionTypeWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getPartitionTypeSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Create Partitiontype
     * 
     * Updates partition type for a GeoCatalog Collection. This will
     * determine the partitioning scheme for items within the database,
     * and can only be set before any items are loaded.
     * 
     * Ideal partitioning schemes result in partitions of roughly 100k items each.
     * 
     * The default partitioning scheme is "none" which does not partition items.
     * 
     * Args:
     * collection_id: the collection id to add the partitiontype to.
     * partitiontype: the partitiontype to add.
     * 
     * Returns:
     * None.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Partition type configuration determining how items are partitioned in storage.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines how data is partitioned for efficient storage and retrieval along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> replacePartitionTypeWithResponseAsync(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.replacePartitionType(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Create Partitiontype
     * 
     * Updates partition type for a GeoCatalog Collection. This will
     * determine the partitioning scheme for items within the database,
     * and can only be set before any items are loaded.
     * 
     * Ideal partitioning schemes result in partitions of roughly 100k items each.
     * 
     * The default partitioning scheme is "none" which does not partition items.
     * 
     * Args:
     * collection_id: the collection id to add the partitiontype to.
     * partitiontype: the partitiontype to add.
     * 
     * Returns:
     * None.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Partition type configuration determining how items are partitioned in storage.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines how data is partitioned for efficient storage and retrieval along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> replacePartitionTypeWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.replacePartitionTypeSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Get Collection Render Options
     * 
     * Get all render options for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *         options: String (Optional)
     *         vectorOptions (Optional): {
     *             tilejsonKey: String (Required)
     *             sourceLayer: String (Required)
     *             fillColor: String (Optional)
     *             strokeColor: String (Optional)
     *             strokeWidth: Integer (Optional)
     *             filter (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         minZoom: Integer (Optional)
     *         legend (Optional): {
     *             type: String(continuous/classmap/interval/none) (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             trimStart: Integer (Optional)
     *             trimEnd: Integer (Optional)
     *             scaleFactor: Double (Optional)
     *         }
     *         conditions (Optional): [
     *              (Optional){
     *                 property: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Render Options
     * 
     * Get all render options for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllRenderOptionsWithResponseAsync(String collectionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAllRenderOptions(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get Collection Render Options
     * 
     * Get all render options for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *         options: String (Optional)
     *         vectorOptions (Optional): {
     *             tilejsonKey: String (Required)
     *             sourceLayer: String (Required)
     *             fillColor: String (Optional)
     *             strokeColor: String (Optional)
     *             strokeWidth: Integer (Optional)
     *             filter (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         minZoom: Integer (Optional)
     *         legend (Optional): {
     *             type: String(continuous/classmap/interval/none) (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             trimStart: Integer (Optional)
     *             trimEnd: Integer (Optional)
     *             scaleFactor: Double (Optional)
     *         }
     *         conditions (Optional): [
     *              (Optional){
     *                 property: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Render Options
     * 
     * Get all render options for a given collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllRenderOptionsWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAllRenderOptionsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Add Collection Render Option
     * 
     * Add a render option for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Render option configuration to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines visualization parameters for rendering data on a map along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRenderOptionWithResponseAsync(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createRenderOption(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Add Collection Render Option
     * 
     * Add a render option for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Render option configuration to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines visualization parameters for rendering data on a map along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRenderOptionWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createRenderOptionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Get Collection Render Option
     * 
     * Get a render option for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *         options: String (Optional)
     *         vectorOptions (Optional): {
     *             tilejsonKey: String (Required)
     *             sourceLayer: String (Required)
     *             fillColor: String (Optional)
     *             strokeColor: String (Optional)
     *             strokeWidth: Integer (Optional)
     *             filter (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         minZoom: Integer (Optional)
     *         legend (Optional): {
     *             type: String(continuous/classmap/interval/none) (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             trimStart: Integer (Optional)
     *             trimEnd: Integer (Optional)
     *             scaleFactor: Double (Optional)
     *         }
     *         conditions (Optional): [
     *              (Optional){
     *                 property: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Render Option
     * 
     * Get a render option for a given collection along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRenderOptionWithResponseAsync(String collectionId, String renderOptionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getRenderOption(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, renderOptionId, accept, requestOptions, context));
    }

    /**
     * Get Collection Render Option
     * 
     * Get a render option for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *         options: String (Optional)
     *         vectorOptions (Optional): {
     *             tilejsonKey: String (Required)
     *             sourceLayer: String (Required)
     *             fillColor: String (Optional)
     *             strokeColor: String (Optional)
     *             strokeWidth: Integer (Optional)
     *             filter (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         minZoom: Integer (Optional)
     *         legend (Optional): {
     *             type: String(continuous/classmap/interval/none) (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             trimStart: Integer (Optional)
     *             trimEnd: Integer (Optional)
     *             scaleFactor: Double (Optional)
     *         }
     *         conditions (Optional): [
     *              (Optional){
     *                 property: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Render Option
     * 
     * Get a render option for a given collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRenderOptionWithResponse(String collectionId, String renderOptionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getRenderOptionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            renderOptionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Update Collection Render Option
     * 
     * Update a render option for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param body Render option configuration to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines visualization parameters for rendering data on a map along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceRenderOptionWithResponseAsync(String collectionId,
        String renderOptionId, BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrReplaceRenderOption(this.getEndpoint(), this.getServiceVersion().getVersion(),
                collectionId, renderOptionId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Update Collection Render Option
     * 
     * Update a render option for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *     options: String (Optional)
     *     vectorOptions (Optional): {
     *         tilejsonKey: String (Required)
     *         sourceLayer: String (Required)
     *         fillColor: String (Optional)
     *         strokeColor: String (Optional)
     *         strokeWidth: Integer (Optional)
     *         filter (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     minZoom: Integer (Optional)
     *     legend (Optional): {
     *         type: String(continuous/classmap/interval/none) (Optional)
     *         labels (Optional): [
     *             String (Optional)
     *         ]
     *         trimStart: Integer (Optional)
     *         trimEnd: Integer (Optional)
     *         scaleFactor: Double (Optional)
     *     }
     *     conditions (Optional): [
     *          (Optional){
     *             property: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param body Render option configuration to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines visualization parameters for rendering data on a map along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceRenderOptionWithResponse(String collectionId, String renderOptionId,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrReplaceRenderOptionSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            collectionId, renderOptionId, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Delete Collection Render Option
     * 
     * Delete a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRenderOptionWithResponseAsync(String collectionId, String renderOptionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteRenderOption(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, renderOptionId, accept, requestOptions, context));
    }

    /**
     * Delete Collection Render Option
     * 
     * Delete a render option for a given collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param renderOptionId Unique identifier for the render option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRenderOptionWithResponse(String collectionId, String renderOptionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteRenderOptionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            renderOptionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get Collection Tile Settings
     * 
     * Get the tile settings for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Tile Settings
     * 
     * Get the tile settings for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTileSettingsWithResponseAsync(String collectionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTileSettings(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get Collection Tile Settings
     * 
     * Get the tile settings for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Tile Settings
     * 
     * Get the tile settings for a given collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileSettingsWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTileSettingsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Update Collection Tile Settings
     * 
     * Update the tile settings for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Tile settings configuration to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return configuration for map tile visualization along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> replaceTileSettingsWithResponseAsync(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.replaceTileSettings(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Update Collection Tile Settings
     * 
     * Update the tile settings for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param body Tile settings configuration to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return configuration for map tile visualization along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> replaceTileSettingsWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.replaceTileSettingsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Update Collection Queryables
     * 
     * Updates a queryable given a queryable definition and
     * corresponding collection id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(string/number/boolean/timestamp/date) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(string/number/boolean/timestamp/date) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param body Request queryable definition body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return definition of a queryable field for STAC API filtering along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceQueryableWithResponseAsync(String collectionId,
        String queryableName, BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrReplaceQueryable(this.getEndpoint(), this.getServiceVersion().getVersion(),
                collectionId, queryableName, contentType, accept, body, requestOptions, context));
    }

    /**
     * Update Collection Queryables
     * 
     * Updates a queryable given a queryable definition and
     * corresponding collection id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(string/number/boolean/timestamp/date) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(string/number/boolean/timestamp/date) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param body Request queryable definition body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return definition of a queryable field for STAC API filtering along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceQueryableWithResponse(String collectionId, String queryableName,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrReplaceQueryableSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            collectionId, queryableName, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Delete Queryables
     * 
     * Delete queryables by name for specified collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteQueryableWithResponseAsync(String collectionId, String queryableName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteQueryable(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, queryableName, accept, requestOptions, context));
    }

    /**
     * Delete Queryables
     * 
     * Delete queryables by name for specified collection.
     * 
     * @param collectionId Unique identifier for the STAC collection.
     * @param queryableName Name of the queryable property to operate on.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteQueryableWithResponse(String collectionId, String queryableName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteQueryableSync(this.getEndpoint(), this.getServiceVersion().getVersion(), collectionId,
            queryableName, accept, requestOptions, Context.NONE);
    }

    /**
     * Get Collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCollectionThumbnailWithResponseAsync(String collectionId, String accept,
        RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.getCollectionThumbnail(this.getEndpoint(),
            this.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get Collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCollectionThumbnailWithResponse(String collectionId, String accept,
        RequestOptions requestOptions) {
        return service.getCollectionThumbnailSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            collectionId, accept, requestOptions, Context.NONE);
    }
}
