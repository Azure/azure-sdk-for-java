// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.planetarycomputer.PlanetaryComputerServiceVersion;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the MosaicTilerClient type.
 */
public final class MosaicTilerClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MosaicTilerClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final PlanetaryComputerServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PlanetaryComputerServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of MosaicTilerClient client.
     * 
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public MosaicTilerClientImpl(String endpoint, PlanetaryComputerServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of MosaicTilerClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public MosaicTilerClientImpl(HttpPipeline httpPipeline, String endpoint,
        PlanetaryComputerServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of MosaicTilerClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public MosaicTilerClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        PlanetaryComputerServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(MosaicTilerClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for MosaicTilerClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MosaicTilerClient")
    public interface MosaicTilerClientService {
        @Get("/data/mosaic/{searchId}/tiles/{z}/{x}/{y}@{scale}x.{format}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTile(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("z") double z, @PathParam("x") double x, @PathParam("y") double y,
            @PathParam("scale") double scale, @PathParam("format") String format, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/tiles/{z}/{x}/{y}@{scale}x.{format}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTileSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("z") double z, @PathParam("x") double x, @PathParam("y") double y,
            @PathParam("scale") double scale, @PathParam("format") String format, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/tiles/{tileMatrixSetId}/{z}/{x}/{y}@{scale}x.{format}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTileWithMatrixSet(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("tileMatrixSetId") String tileMatrixSetId, @PathParam("z") double z, @PathParam("x") double x,
            @PathParam("y") double y, @PathParam("scale") double scale, @PathParam("format") String format,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/tiles/{tileMatrixSetId}/{z}/{x}/{y}@{scale}x.{format}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTileWithMatrixSetSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("tileMatrixSetId") String tileMatrixSetId, @PathParam("z") double z, @PathParam("x") double x,
            @PathParam("y") double y, @PathParam("scale") double scale, @PathParam("format") String format,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/tilejson.json")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTileJson(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/tilejson.json")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTileJsonSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/{tileMatrixSetId}/tilejson.json")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTileJsonWithMatrixSet(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("tileMatrixSetId") String tileMatrixSetId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/{tileMatrixSetId}/tilejson.json")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTileJsonWithMatrixSetSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("tileMatrixSetId") String tileMatrixSetId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/WMTSCapabilities.xml")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getWmtsCapabilities(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/WMTSCapabilities.xml")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getWmtsCapabilitiesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/{tileMatrixSetId}/WMTSCapabilities.xml")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getWmtsCapabilitiesWithMatrixSet(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("tileMatrixSetId") String tileMatrixSetId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/{tileMatrixSetId}/WMTSCapabilities.xml")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getWmtsCapabilitiesWithMatrixSetSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("tileMatrixSetId") String tileMatrixSetId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/data/mosaic/register")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> registerSearch(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData registerSearchRequest,
            RequestOptions requestOptions, Context context);

        @Post("/data/mosaic/register")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> registerSearchSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData registerSearchRequest,
            RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/info")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSearchInfo(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/info")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSearchInfoSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/tiles/{z}/{x}/{y}/assets")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAssetsForTile(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("z") double z, @PathParam("x") double x, @PathParam("y") double y,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/tiles/{z}/{x}/{y}/assets")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAssetsForTileSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("z") double z, @PathParam("x") double x, @PathParam("y") double y,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/tiles/{tileMatrixSetId}/{z}/{x}/{y}/assets")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAssetsForTileWithMatrixSet(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("tileMatrixSetId") String tileMatrixSetId, @PathParam("z") double z, @PathParam("x") double x,
            @PathParam("y") double y, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/data/mosaic/{searchId}/tiles/{tileMatrixSetId}/{z}/{x}/{y}/assets")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAssetsForTileWithMatrixSetSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("tileMatrixSetId") String tileMatrixSetId, @PathParam("z") double z, @PathParam("x") double x,
            @PathParam("y") double y, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/data/mosaic/{searchId}/{lon},{lat}/assets")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAssetsForPoint(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("lon") double lon, @PathParam("lat") double lat, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/data/mosaic/{searchId}/{lon},{lat}/assets")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAssetsForPointSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("searchId") String searchId,
            @PathParam("lon") double lon, @PathParam("lat") double lat, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Tile
     * 
     * Create map tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>collection</td><td>String</td><td>No</td><td>STAC Collection ID</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>pixel_selection</td><td>String</td><td>No</td><td>Pixel selection method. Allowed values: "first",
     * "highest", "lowest", "mean", "median", "stdev", "lastbandlow", "lastbandhight".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTileWithResponseAsync(String searchId, double z, double x, double y,
        double scale, String format, String accept, RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.getTile(this.getEndpoint(),
            this.getServiceVersion().getVersion(), searchId, z, x, y, scale, format, accept, requestOptions, context));
    }

    /**
     * Tile
     * 
     * Create map tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>collection</td><td>String</td><td>No</td><td>STAC Collection ID</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>pixel_selection</td><td>String</td><td>No</td><td>Pixel selection method. Allowed values: "first",
     * "highest", "lowest", "mean", "median", "stdev", "lastbandlow", "lastbandhight".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileWithResponse(String searchId, double z, double x, double y, double scale,
        String format, String accept, RequestOptions requestOptions) {
        return service.getTileSync(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId, z, x, y, scale,
            format, accept, requestOptions, Context.NONE);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>collection</td><td>String</td><td>No</td><td>STAC Collection ID</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>pixel_selection</td><td>String</td><td>No</td><td>Pixel selection method. Allowed values: "first",
     * "highest", "lowest", "mean", "median", "stdev", "lastbandlow", "lastbandhight".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTileWithMatrixSetWithResponseAsync(String searchId, String tileMatrixSetId,
        double z, double x, double y, double scale, String format, String accept, RequestOptions requestOptions) {
        return FluxUtil.withContext(
            context -> service.getTileWithMatrixSet(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId,
                tileMatrixSetId, z, x, y, scale, format, accept, requestOptions, context));
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>collection</td><td>String</td><td>No</td><td>STAC Collection ID</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>pixel_selection</td><td>String</td><td>No</td><td>Pixel selection method. Allowed values: "first",
     * "highest", "lowest", "mean", "median", "stdev", "lastbandlow", "lastbandhight".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale Numeric scale factor for the tile. Higher values produce larger tiles (default: "1").
     * @param format Output format for the tile or image (e.g., png, jpeg, webp) (default: "png").
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileWithMatrixSetWithResponse(String searchId, String tileMatrixSetId, double z,
        double x, double y, double scale, String format, String accept, RequestOptions requestOptions) {
        return service.getTileWithMatrixSetSync(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId,
            tileMatrixSetId, z, x, y, scale, format, accept, requestOptions, Context.NONE);
    }

    /**
     * Tilejson
     * 
     * Return TileJSON document for a searchId.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default: 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad",
     * "LINZAntarticaMapTilegrid", "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad",
     * "WGS1984Quad", "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Default will be automatically defined if the output image
     * needs a mask (png) or
     * not (jpeg). Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>Double</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>collection</td><td>String</td><td>No</td><td>STAC Collection ID</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>pixel_selection</td><td>String</td><td>No</td><td>Pixel selection method. Allowed values: "first",
     * "highest", "lowest", "mean", "median", "stdev", "lastbandlow", "lastbandhight".</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tilejson: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     version: String (Optional)
     *     attribution: String (Optional)
     *     template: String (Optional)
     *     legend: String (Optional)
     *     scheme: String(xyz/tms) (Optional)
     *     tiles (Required): [
     *         String (Required)
     *     ]
     *     grids (Optional): [
     *         String (Optional)
     *     ]
     *     data (Optional): [
     *         String (Optional)
     *     ]
     *     minzoom: Integer (Optional)
     *     maxzoom: Integer (Optional)
     *     bounds (Optional): [
     *         double (Optional)
     *     ]
     *     center (Optional): [
     *         double (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTileJsonWithResponseAsync(String searchId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTileJson(this.getEndpoint(),
            this.getServiceVersion().getVersion(), searchId, accept, requestOptions, context));
    }

    /**
     * Tilejson
     * 
     * Return TileJSON document for a searchId.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default: 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad",
     * "LINZAntarticaMapTilegrid", "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad",
     * "WGS1984Quad", "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Default will be automatically defined if the output image
     * needs a mask (png) or
     * not (jpeg). Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>Double</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>collection</td><td>String</td><td>No</td><td>STAC Collection ID</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>pixel_selection</td><td>String</td><td>No</td><td>Pixel selection method. Allowed values: "first",
     * "highest", "lowest", "mean", "median", "stdev", "lastbandlow", "lastbandhight".</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tilejson: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     version: String (Optional)
     *     attribution: String (Optional)
     *     template: String (Optional)
     *     legend: String (Optional)
     *     scheme: String(xyz/tms) (Optional)
     *     tiles (Required): [
     *         String (Required)
     *     ]
     *     grids (Optional): [
     *         String (Optional)
     *     ]
     *     data (Optional): [
     *         String (Optional)
     *     ]
     *     minzoom: Integer (Optional)
     *     maxzoom: Integer (Optional)
     *     bounds (Optional): [
     *         double (Optional)
     *     ]
     *     center (Optional): [
     *         double (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileJsonWithResponse(String searchId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTileJsonSync(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Tilejson Tilematrixsetid As Path
     * 
     * Return TileJSON document for a searchId.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Default will be automatically defined if the output image
     * needs a mask (png) or
     * not (jpeg). Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>collection</td><td>String</td><td>No</td><td>STAC Collection ID</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>pixel_selection</td><td>String</td><td>No</td><td>Pixel selection method. Allowed values: "first",
     * "highest", "lowest", "mean", "median", "stdev", "lastbandlow", "lastbandhight".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tilejson: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     version: String (Optional)
     *     attribution: String (Optional)
     *     template: String (Optional)
     *     legend: String (Optional)
     *     scheme: String(xyz/tms) (Optional)
     *     tiles (Required): [
     *         String (Required)
     *     ]
     *     grids (Optional): [
     *         String (Optional)
     *     ]
     *     data (Optional): [
     *         String (Optional)
     *     ]
     *     minzoom: Integer (Optional)
     *     maxzoom: Integer (Optional)
     *     bounds (Optional): [
     *         double (Optional)
     *     ]
     *     center (Optional): [
     *         double (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTileJsonWithMatrixSetWithResponseAsync(String searchId, String tileMatrixSetId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTileJsonWithMatrixSet(this.getEndpoint(),
            this.getServiceVersion().getVersion(), searchId, tileMatrixSetId, accept, requestOptions, context));
    }

    /**
     * Tilejson Tilematrixsetid As Path
     * 
     * Return TileJSON document for a searchId.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Default will be automatically defined if the output image
     * needs a mask (png) or
     * not (jpeg). Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>collection</td><td>String</td><td>No</td><td>STAC Collection ID</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>pixel_selection</td><td>String</td><td>No</td><td>Pixel selection method. Allowed values: "first",
     * "highest", "lowest", "mean", "median", "stdev", "lastbandlow", "lastbandhight".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tilejson: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     version: String (Optional)
     *     attribution: String (Optional)
     *     template: String (Optional)
     *     legend: String (Optional)
     *     scheme: String(xyz/tms) (Optional)
     *     tiles (Required): [
     *         String (Required)
     *     ]
     *     grids (Optional): [
     *         String (Optional)
     *     ]
     *     data (Optional): [
     *         String (Optional)
     *     ]
     *     minzoom: Integer (Optional)
     *     maxzoom: Integer (Optional)
     *     bounds (Optional): [
     *         double (Optional)
     *     ]
     *     center (Optional): [
     *         double (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tileJSON model.
     * 
     * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set
     * according to the TileJSON specification along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTileJsonWithMatrixSetWithResponse(String searchId, String tileMatrixSetId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTileJsonWithMatrixSetSync(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId,
            tileMatrixSetId, accept, requestOptions, Context.NONE);
    }

    /**
     * Wmts
     * 
     * OGC WMTS endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Output image type. Default is png. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a sequence of textual characters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWmtsCapabilitiesWithResponseAsync(String searchId,
        RequestOptions requestOptions) {
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getWmtsCapabilities(this.getEndpoint(),
            this.getServiceVersion().getVersion(), searchId, accept, requestOptions, context));
    }

    /**
     * Wmts
     * 
     * OGC WMTS endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Output image type. Default is png. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a sequence of textual characters along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWmtsCapabilitiesWithResponse(String searchId, RequestOptions requestOptions) {
        final String accept = "application/xml";
        return service.getWmtsCapabilitiesSync(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Wmts Tilematrixsetid As Path
     * 
     * OGC WMTS endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Output image type. Default is png. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a sequence of textual characters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWmtsCapabilitiesWithMatrixSetWithResponseAsync(String searchId,
        String tileMatrixSetId, RequestOptions requestOptions) {
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getWmtsCapabilitiesWithMatrixSet(this.getEndpoint(),
            this.getServiceVersion().getVersion(), searchId, tileMatrixSetId, accept, requestOptions, context));
    }

    /**
     * Wmts Tilematrixsetid As Path
     * 
     * OGC WMTS endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>asset_bidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * In the form of "," separated string.</td></tr>
     * <tr><td>asset_as_band</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>Double</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithm_params</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>tile_format</td><td>String</td><td>No</td><td>Output image type. Default is png. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tile_scale</td><td>Integer</td><td>No</td><td>Tile scale factor affecting output size. Values &gt; 1
     * produce larger tiles (e.g., 1=256x256, 2=512x512).</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * <tr><td>buffer</td><td>String</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>color_formula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormap_name</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>return_mask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a sequence of textual characters along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWmtsCapabilitiesWithMatrixSetWithResponse(String searchId, String tileMatrixSetId,
        RequestOptions requestOptions) {
        final String accept = "application/xml";
        return service.getWmtsCapabilitiesWithMatrixSetSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            searchId, tileMatrixSetId, accept, requestOptions, Context.NONE);
    }

    /**
     * Register Search
     * 
     * Register a Search query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox: Double (Optional)
     *     intersects (Optional): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     query (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     filter: String (Optional)
     *     datetime: String (Optional)
     *     sortby (Optional): [
     *          (Optional){
     *             field: String (Required)
     *             direction: String(asc/desc) (Required)
     *         }
     *     ]
     *     filter-lang: String(cql-json/cql2-json/cql2-text) (Optional)
     *     metadata (Optional): {
     *         type: String(mosaic/search) (Optional)
     *         bounds: String (Optional)
     *         minzoom: Integer (Optional)
     *         maxzoom: Integer (Optional)
     *         name: String (Optional)
     *         assets (Optional): [
     *             String (Optional)
     *         ]
     *         defaults (Optional): {
     *             String: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     searchId: String (Required)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param registerSearchRequest The registerSearchRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a successful mosaic registration with search ID and related links along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> registerSearchWithResponseAsync(BinaryData registerSearchRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.registerSearch(this.getEndpoint(), this.getServiceVersion().getVersion(),
                contentType, accept, registerSearchRequest, requestOptions, context));
    }

    /**
     * Register Search
     * 
     * Register a Search query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox: Double (Optional)
     *     intersects (Optional): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     query (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     filter: String (Optional)
     *     datetime: String (Optional)
     *     sortby (Optional): [
     *          (Optional){
     *             field: String (Required)
     *             direction: String(asc/desc) (Required)
     *         }
     *     ]
     *     filter-lang: String(cql-json/cql2-json/cql2-text) (Optional)
     *     metadata (Optional): {
     *         type: String(mosaic/search) (Optional)
     *         bounds: String (Optional)
     *         minzoom: Integer (Optional)
     *         maxzoom: Integer (Optional)
     *         name: String (Optional)
     *         assets (Optional): [
     *             String (Optional)
     *         ]
     *         defaults (Optional): {
     *             String: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     searchId: String (Required)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param registerSearchRequest The registerSearchRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a successful mosaic registration with search ID and related links along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> registerSearchWithResponse(BinaryData registerSearchRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.registerSearchSync(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType,
            accept, registerSearchRequest, requestOptions, Context.NONE);
    }

    /**
     * Info Search
     * 
     * Get Search query metadata.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     search (Required): {
     *         hash: String (Required)
     *         search (Required): {
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *         _where: String (Required)
     *         orderby: String (Required)
     *         lastused: OffsetDateTime (Required)
     *         usecount: int (Required)
     *         metadata (Required): {
     *             type: String(mosaic/search) (Optional)
     *             bounds: String (Optional)
     *             minzoom: Integer (Optional)
     *             maxzoom: Integer (Optional)
     *             name: String (Optional)
     *             assets (Optional): [
     *                 String (Optional)
     *             ]
     *             defaults (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a registered STAC search query along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSearchInfoWithResponseAsync(String searchId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSearchInfo(this.getEndpoint(),
            this.getServiceVersion().getVersion(), searchId, accept, requestOptions, context));
    }

    /**
     * Info Search
     * 
     * Get Search query metadata.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     search (Required): {
     *         hash: String (Required)
     *         search (Required): {
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *         _where: String (Required)
     *         orderby: String (Required)
     *         lastused: OffsetDateTime (Required)
     *         usecount: int (Required)
     *         metadata (Required): {
     *             type: String(mosaic/search) (Optional)
     *             bounds: String (Optional)
     *             minzoom: Integer (Optional)
     *             maxzoom: Integer (Optional)
     *             name: String (Optional)
     *             assets (Optional): [
     *                 String (Optional)
     *             ]
     *             defaults (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Optional, Required on create)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *             method: String(GET/POST) (Optional)
     *             headers (Optional): {
     *                 String: String (Required)
     *             }
     *             body (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             merge: Boolean (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a registered STAC search query along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSearchInfoWithResponse(String searchId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSearchInfoSync(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Assets For Tile
     * 
     * Return a list of assets which overlap a given tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     BinaryData (Required)
     * ]
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAssetsForTileWithResponseAsync(String searchId, double z, double x, double y,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAssetsForTile(this.getEndpoint(),
            this.getServiceVersion().getVersion(), searchId, z, x, y, accept, requestOptions, context));
    }

    /**
     * Assets For Tile
     * 
     * Return a list of assets which overlap a given tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     BinaryData (Required)
     * ]
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssetsForTileWithResponse(String searchId, double z, double x, double y,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAssetsForTileSync(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId, z, x,
            y, accept, requestOptions, Context.NONE);
    }

    /**
     * Assets For Tile Tilematrixsetid As Path
     * 
     * Return a list of assets which overlap a given tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     BinaryData (Required)
     * ]
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAssetsForTileWithMatrixSetWithResponseAsync(String searchId,
        String tileMatrixSetId, double z, double x, double y, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getAssetsForTileWithMatrixSet(this.getEndpoint(), this.getServiceVersion().getVersion(),
                searchId, tileMatrixSetId, z, x, y, accept, requestOptions, context));
    }

    /**
     * Assets For Tile Tilematrixsetid As Path
     * 
     * Return a list of assets which overlap a given tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     BinaryData (Required)
     * ]
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssetsForTileWithMatrixSetWithResponse(String searchId, String tileMatrixSetId,
        double z, double x, double y, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAssetsForTileWithMatrixSetSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            searchId, tileMatrixSetId, z, x, y, accept, requestOptions, Context.NONE);
    }

    /**
     * Assets For Point
     * 
     * Return a list of assets for a given point.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     BinaryData (Required)
     * ]
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param lon Longitude.
     * @param lat Latitude.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAssetsForPointWithResponseAsync(String searchId, double lon, double lat,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAssetsForPoint(this.getEndpoint(),
            this.getServiceVersion().getVersion(), searchId, lon, lat, accept, requestOptions, context));
    }

    /**
     * Assets For Point
     * 
     * Return a list of assets for a given point.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scan_limit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>items_limit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults
     * to 100 in PgSTAC).</td></tr>
     * <tr><td>time_limit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to
     * 5 in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     BinaryData (Required)
     * ]
     * }
     * </pre>
     * 
     * @param searchId Search Id (pgSTAC Search Hash).
     * @param lon Longitude.
     * @param lat Latitude.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssetsForPointWithResponse(String searchId, double lon, double lat,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAssetsForPointSync(this.getEndpoint(), this.getServiceVersion().getVersion(), searchId, lon,
            lat, accept, requestOptions, Context.NONE);
    }
}
