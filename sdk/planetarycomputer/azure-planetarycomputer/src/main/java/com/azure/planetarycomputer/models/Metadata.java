// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Metadata information for mosaic or search results.
 */
@Fluent
public final class Metadata implements JsonSerializable<Metadata> {
    /*
     * Type of metadata resource
     */
    @Generated
    private MetadataType type;

    /*
     * Geographic bounding box in [west, south, east, north] format
     */
    @Generated
    private String bounds;

    /*
     * Minimum zoom level supported
     */
    @Generated
    private Integer minzoom;

    /*
     * Maximum zoom level supported
     */
    @Generated
    private Integer maxzoom;

    /*
     * Human-readable name for the resource
     */
    @Generated
    private String name;

    /*
     * List of asset identifiers included in the resource
     */
    @Generated
    private List<String> assets;

    /*
     * Defaults
     */
    @Generated
    private Map<String, String> defaults;

    /**
     * Creates an instance of Metadata class.
     */
    @Generated
    public Metadata() {
    }

    /**
     * Get the type property: Type of metadata resource.
     * 
     * @return the type value.
     */
    @Generated
    public MetadataType getType() {
        return this.type;
    }

    /**
     * Set the type property: Type of metadata resource.
     * 
     * @param type the type value to set.
     * @return the Metadata object itself.
     */
    @Generated
    public Metadata setType(MetadataType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the bounds property: Geographic bounding box in [west, south, east, north] format.
     * 
     * @return the bounds value.
     */
    @Generated
    public String getBounds() {
        return this.bounds;
    }

    /**
     * Set the bounds property: Geographic bounding box in [west, south, east, north] format.
     * 
     * @param bounds the bounds value to set.
     * @return the Metadata object itself.
     */
    @Generated
    public Metadata setBounds(String bounds) {
        this.bounds = bounds;
        return this;
    }

    /**
     * Get the minzoom property: Minimum zoom level supported.
     * 
     * @return the minzoom value.
     */
    @Generated
    public Integer getMinzoom() {
        return this.minzoom;
    }

    /**
     * Set the minzoom property: Minimum zoom level supported.
     * 
     * @param minzoom the minzoom value to set.
     * @return the Metadata object itself.
     */
    @Generated
    public Metadata setMinzoom(Integer minzoom) {
        this.minzoom = minzoom;
        return this;
    }

    /**
     * Get the maxzoom property: Maximum zoom level supported.
     * 
     * @return the maxzoom value.
     */
    @Generated
    public Integer getMaxzoom() {
        return this.maxzoom;
    }

    /**
     * Set the maxzoom property: Maximum zoom level supported.
     * 
     * @param maxzoom the maxzoom value to set.
     * @return the Metadata object itself.
     */
    @Generated
    public Metadata setMaxzoom(Integer maxzoom) {
        this.maxzoom = maxzoom;
        return this;
    }

    /**
     * Get the name property: Human-readable name for the resource.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Human-readable name for the resource.
     * 
     * @param name the name value to set.
     * @return the Metadata object itself.
     */
    @Generated
    public Metadata setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the assets property: List of asset identifiers included in the resource.
     * 
     * @return the assets value.
     */
    @Generated
    public List<String> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: List of asset identifiers included in the resource.
     * 
     * @param assets the assets value to set.
     * @return the Metadata object itself.
     */
    @Generated
    public Metadata setAssets(List<String> assets) {
        this.assets = assets;
        return this;
    }

    /**
     * Get the defaults property: Defaults.
     * 
     * @return the defaults value.
     */
    @Generated
    public Map<String, String> getDefaults() {
        return this.defaults;
    }

    /**
     * Set the defaults property: Defaults.
     * 
     * @param defaults the defaults value to set.
     * @return the Metadata object itself.
     */
    @Generated
    public Metadata setDefaults(Map<String, String> defaults) {
        this.defaults = defaults;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("bounds", this.bounds);
        jsonWriter.writeNumberField("minzoom", this.minzoom);
        jsonWriter.writeNumberField("maxzoom", this.maxzoom);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("assets", this.assets, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("defaults", this.defaults, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Metadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Metadata if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Metadata.
     */
    @Generated
    public static Metadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Metadata deserializedMetadata = new Metadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedMetadata.type = MetadataType.fromString(reader.getString());
                } else if ("bounds".equals(fieldName)) {
                    deserializedMetadata.bounds = reader.getString();
                } else if ("minzoom".equals(fieldName)) {
                    deserializedMetadata.minzoom = reader.getNullable(JsonReader::getInt);
                } else if ("maxzoom".equals(fieldName)) {
                    deserializedMetadata.maxzoom = reader.getNullable(JsonReader::getInt);
                } else if ("name".equals(fieldName)) {
                    deserializedMetadata.name = reader.getString();
                } else if ("assets".equals(fieldName)) {
                    List<String> assets = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadata.assets = assets;
                } else if ("defaults".equals(fieldName)) {
                    Map<String, String> defaults = reader.readMap(reader1 -> reader1.getString());
                    deserializedMetadata.defaults = defaults;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetadata;
        });
    }
}
