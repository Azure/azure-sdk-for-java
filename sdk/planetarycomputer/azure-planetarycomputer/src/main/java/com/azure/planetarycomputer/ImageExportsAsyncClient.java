// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.planetarycomputer.implementation.ImageExportsClientImpl;
import com.azure.planetarycomputer.models.ImageRequest;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous ImageExportsClient type.
 */
@ServiceClient(builder = ImageExportsClientBuilder.class, isAsync = true)
public final class ImageExportsAsyncClient {
    @Generated
    private final ImageExportsClientImpl serviceClient;

    /**
     * Initializes an instance of ImageExportsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ImageExportsAsyncClient(ImageExportsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create Static Image
     * 
     * Create a new image export.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     cql (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     *     geometry (Optional): {
     *         type: String(Point/LineString/Polygon/MultiPoint/MultiLineString/MultiPolygon) (Required)
     *         bbox (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     render_params: String (Required)
     *     cols: int (Required)
     *     rows: int (Required)
     *     format: String(png/cog) (Optional)
     *     showBranding: Boolean (Optional)
     *     mask: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param accept The accept parameter.
     * @param body Image request body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createStaticImageWithResponse(String collectionId, String accept, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createStaticImageWithResponseAsync(collectionId, accept, body, requestOptions);
    }

    /**
     * Get Static Image
     * 
     * Fetch an existing image export by ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param id Image export ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return static Image
     * 
     * Fetch an existing image export by ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getStaticImageWithResponse(String collectionId, String id,
        RequestOptions requestOptions) {
        return this.serviceClient.getStaticImageWithResponseAsync(collectionId, id, requestOptions);
    }

    /**
     * Create Static Image
     * 
     * Create a new image export.
     * 
     * @param collectionId STAC Collection ID.
     * @param accept The accept parameter.
     * @param body Image request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> createStaticImage(String collectionId, String accept, ImageRequest body) {
        // Generated convenience method for createStaticImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createStaticImageWithResponse(collectionId, accept, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Get Static Image
     * 
     * Fetch an existing image export by ID.
     * 
     * @param collectionId STAC Collection ID.
     * @param id Image export ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return static Image
     * 
     * Fetch an existing image export by ID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getStaticImage(String collectionId, String id) {
        // Generated convenience method for getStaticImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStaticImageWithResponse(collectionId, id, requestOptions).flatMap(FluxUtil::toMono);
    }
}
