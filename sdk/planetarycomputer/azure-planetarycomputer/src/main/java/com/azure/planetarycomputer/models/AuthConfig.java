// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.planetarycomputer.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Microsoft Authentication Library (MSAL) configuration for frontend authentication.
 */
@Immutable
public final class AuthConfig implements JsonSerializable<AuthConfig> {
    /*
     * Application ID for authentication.
     */
    @Generated
    private final String authnAppId;

    /*
     * Azure Active Directory tenant ID.
     */
    @Generated
    private final String tenantId;

    /*
     * Azure AD instance URL.
     */
    @Generated
    private final String instance;

    /*
     * Redirect URI after authentication.
     */
    @Generated
    private String redirectUri;

    /**
     * Creates an instance of AuthConfig class.
     * 
     * @param authnAppId the authnAppId value to set.
     * @param tenantId the tenantId value to set.
     * @param instance the instance value to set.
     */
    @Generated
    private AuthConfig(String authnAppId, String tenantId, String instance) {
        this.authnAppId = authnAppId;
        this.tenantId = tenantId;
        this.instance = instance;
    }

    /**
     * Get the authnAppId property: Application ID for authentication.
     * 
     * @return the authnAppId value.
     */
    @Generated
    public String getAuthnAppId() {
        return this.authnAppId;
    }

    /**
     * Get the tenantId property: Azure Active Directory tenant ID.
     * 
     * @return the tenantId value.
     */
    @Generated
    public String getTenantId() {
        return this.tenantId;
    }

    /**
     * Get the instance property: Azure AD instance URL.
     * 
     * @return the instance value.
     */
    @Generated
    public String getInstance() {
        return this.instance;
    }

    /**
     * Get the redirectUri property: Redirect URI after authentication.
     * 
     * @return the redirectUri value.
     */
    @Generated
    public String getRedirectUri() {
        return this.redirectUri;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authn_app_id", this.authnAppId);
        jsonWriter.writeStringField("tenant_id", this.tenantId);
        jsonWriter.writeStringField("instance", this.instance);
        jsonWriter.writeStringField("redirect_uri", this.redirectUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthConfig if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AuthConfig.
     */
    @Generated
    public static AuthConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String authnAppId = null;
            String tenantId = null;
            String instance = null;
            String redirectUri = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authn_app_id".equals(fieldName)) {
                    authnAppId = reader.getString();
                } else if ("tenant_id".equals(fieldName)) {
                    tenantId = reader.getString();
                } else if ("instance".equals(fieldName)) {
                    instance = reader.getString();
                } else if ("redirect_uri".equals(fieldName)) {
                    redirectUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AuthConfig deserializedAuthConfig = new AuthConfig(authnAppId, tenantId, instance);
            deserializedAuthConfig.redirectUri = redirectUri;

            return deserializedAuthConfig;
        });
    }
}
