// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.deploymentstacks.generated;

import com.azure.resourcemanager.resources.deploymentstacks.models.ActionOnUnmanage;
import com.azure.resourcemanager.resources.deploymentstacks.models.DenySettings;
import com.azure.resourcemanager.resources.deploymentstacks.models.DenySettingsMode;
import com.azure.resourcemanager.resources.deploymentstacks.models.DeploymentParameter;
import com.azure.resourcemanager.resources.deploymentstacks.models.DeploymentStackProperties;
import com.azure.resourcemanager.resources.deploymentstacks.models.DeploymentStacksDeleteDetachEnum;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DeploymentStacks CreateOrUpdateAtResourceGroup.
 */
public final class DeploymentStacksCreateOrUpdateAtResourceGroupSamples {
    /*
     * x-ms-original-file:
     * specification/resources/resource-manager/Microsoft.Resources/deploymentStacks/stable/2024-03-01/examples/
     * DeploymentStackResourceGroupCreate.json
     */
    /**
     * Sample code: DeploymentStacksResourceGroupCreateOrUpdate.
     * 
     * @param manager Entry point to DeploymentStacksManager.
     */
    public static void deploymentStacksResourceGroupCreateOrUpdate(
        com.azure.resourcemanager.resources.deploymentstacks.DeploymentStacksManager manager) {
        manager.deploymentStacks()
            .define("simpleDeploymentStack")
            .withExistingResourceGroup("deploymentStacksRG")
            .withRegion("eastus")
            .withTags(mapOf("tagkey", "fakeTokenPlaceholder"))
            .withProperties(new DeploymentStackProperties()
                .withParameters(mapOf("parameter1", new DeploymentParameter().withValue("a string")))
                .withActionOnUnmanage(new ActionOnUnmanage().withResources(DeploymentStacksDeleteDetachEnum.DELETE)
                    .withResourceGroups(DeploymentStacksDeleteDetachEnum.DELETE)
                    .withManagementGroups(DeploymentStacksDeleteDetachEnum.DETACH))
                .withDenySettings(new DenySettings().withMode(DenySettingsMode.DENY_DELETE)
                    .withExcludedPrincipals(Arrays.asList("principal"))
                    .withExcludedActions(Arrays.asList("action"))
                    .withApplyToChildScopes(false)))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
