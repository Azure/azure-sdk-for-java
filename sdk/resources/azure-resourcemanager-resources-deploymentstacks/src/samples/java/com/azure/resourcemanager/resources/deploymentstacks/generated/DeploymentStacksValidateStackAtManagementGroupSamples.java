// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.deploymentstacks.generated;

import com.azure.resourcemanager.resources.deploymentstacks.fluent.models.DeploymentStackInner;
import com.azure.resourcemanager.resources.deploymentstacks.models.ActionOnUnmanage;
import com.azure.resourcemanager.resources.deploymentstacks.models.DenySettings;
import com.azure.resourcemanager.resources.deploymentstacks.models.DenySettingsMode;
import com.azure.resourcemanager.resources.deploymentstacks.models.DeploymentParameter;
import com.azure.resourcemanager.resources.deploymentstacks.models.DeploymentStackProperties;
import com.azure.resourcemanager.resources.deploymentstacks.models.DeploymentStacksDeleteDetachEnum;
import com.azure.resourcemanager.resources.deploymentstacks.models.DeploymentStacksTemplateLink;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DeploymentStacks ValidateStackAtManagementGroup.
 */
public final class DeploymentStacksValidateStackAtManagementGroupSamples {
    /*
     * x-ms-original-file:
     * specification/resources/resource-manager/Microsoft.Resources/deploymentStacks/stable/2024-03-01/examples/
     * DeploymentStackManagementGroupValidate.json
     */
    /**
     * Sample code: DeploymentStacksManagementGroupValidate.
     * 
     * @param manager Entry point to DeploymentStacksManager.
     */
    public static void deploymentStacksManagementGroupValidate(
        com.azure.resourcemanager.resources.deploymentstacks.DeploymentStacksManager manager) {
        manager.deploymentStacks()
            .validateStackAtManagementGroup("myMg", "simpleDeploymentStack", new DeploymentStackInner()
                .withLocation("eastus")
                .withTags(mapOf("tagkey", "fakeTokenPlaceholder"))
                .withProperties(new DeploymentStackProperties()
                    .withTemplateLink(
                        new DeploymentStacksTemplateLink().withUri("https://example.com/exampleTemplate.json"))
                    .withParameters(mapOf("parameter1", new DeploymentParameter().withValue("a string")))
                    .withActionOnUnmanage(new ActionOnUnmanage().withResources(DeploymentStacksDeleteDetachEnum.DETACH)
                        .withResourceGroups(DeploymentStacksDeleteDetachEnum.DETACH)
                        .withManagementGroups(DeploymentStacksDeleteDetachEnum.DETACH))
                    .withDenySettings(new DenySettings().withMode(DenySettingsMode.DENY_DELETE)
                        .withExcludedPrincipals(Arrays.asList("principal"))
                        .withExcludedActions(Arrays.asList("action"))
                        .withApplyToChildScopes(false))),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
