// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.deploymentstacks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.resources.deploymentstacks.DeploymentStacksManager;
import com.azure.resourcemanager.resources.deploymentstacks.models.DeploymentStackTemplateDefinition;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DeploymentStacksExportTemplateAtManagementGroupWithResponseMockTests {
    @Test
    public void testExportTemplateAtManagementGroupWithResponse() throws Exception {
        String responseStr
            = "{\"template\":\"dataur\",\"templateLink\":{\"uri\":\"xjnspy\",\"id\":\"tko\",\"relativePath\":\"kouknvudwtiu\",\"queryString\":\"ldngkpoci\",\"contentVersion\":\"z\"}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeploymentStacksManager manager = DeploymentStacksManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DeploymentStackTemplateDefinition response = manager.deploymentStacks()
            .exportTemplateAtManagementGroupWithResponse("vmezy", "shxmzsbbzoggigrx", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("xjnspy", response.templateLink().uri());
        Assertions.assertEquals("tko", response.templateLink().id());
        Assertions.assertEquals("kouknvudwtiu", response.templateLink().relativePath());
        Assertions.assertEquals("ldngkpoci", response.templateLink().queryString());
        Assertions.assertEquals("z", response.templateLink().contentVersion());
    }
}
