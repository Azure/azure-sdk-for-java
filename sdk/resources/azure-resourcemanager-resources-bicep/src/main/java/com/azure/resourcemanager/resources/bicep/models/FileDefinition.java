// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.resources.bicep.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The definition of a file along with its contents.
 */
@Immutable
public final class FileDefinition implements JsonSerializable<FileDefinition> {
    /*
     * The file path of the Bicep file.
     */
    private String path;

    /*
     * The contents of the Bicep file.
     */
    private String contents;

    /**
     * Creates an instance of FileDefinition class.
     */
    private FileDefinition() {
    }

    /**
     * Get the path property: The file path of the Bicep file.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Get the contents property: The contents of the Bicep file.
     * 
     * @return the contents value.
     */
    public String contents() {
        return this.contents;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("contents", this.contents);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileDefinition.
     */
    public static FileDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileDefinition deserializedFileDefinition = new FileDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedFileDefinition.path = reader.getString();
                } else if ("contents".equals(fieldName)) {
                    deserializedFileDefinition.contents = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileDefinition;
        });
    }
}
