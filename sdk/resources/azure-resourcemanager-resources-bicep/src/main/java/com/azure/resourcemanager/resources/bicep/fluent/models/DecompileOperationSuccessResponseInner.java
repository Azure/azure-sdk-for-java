// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.resources.bicep.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resources.bicep.models.FileDefinition;
import java.io.IOException;
import java.util.List;

/**
 * The response of the decompileBicep operation.
 */
@Immutable
public final class DecompileOperationSuccessResponseInner
    implements JsonSerializable<DecompileOperationSuccessResponseInner> {
    /*
     * An array of key-value pairs containing the entryPoint string as the key for the Bicep file decompiled from the
     * ARM json template
     */
    private List<FileDefinition> files;

    /*
     * The file path to the main Bicep file generated from the decompiled ARM json template.
     */
    private String entryPoint;

    /**
     * Creates an instance of DecompileOperationSuccessResponseInner class.
     */
    private DecompileOperationSuccessResponseInner() {
    }

    /**
     * Get the files property: An array of key-value pairs containing the entryPoint string as the key for the Bicep
     * file decompiled from the ARM json template.
     * 
     * @return the files value.
     */
    public List<FileDefinition> files() {
        return this.files;
    }

    /**
     * Get the entryPoint property: The file path to the main Bicep file generated from the decompiled ARM json
     * template.
     * 
     * @return the entryPoint value.
     */
    public String entryPoint() {
        return this.entryPoint;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (files() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property files in model DecompileOperationSuccessResponseInner"));
        } else {
            files().forEach(e -> e.validate());
        }
        if (entryPoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property entryPoint in model DecompileOperationSuccessResponseInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DecompileOperationSuccessResponseInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("files", this.files, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("entryPoint", this.entryPoint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DecompileOperationSuccessResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DecompileOperationSuccessResponseInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DecompileOperationSuccessResponseInner.
     */
    public static DecompileOperationSuccessResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DecompileOperationSuccessResponseInner deserializedDecompileOperationSuccessResponseInner
                = new DecompileOperationSuccessResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("files".equals(fieldName)) {
                    List<FileDefinition> files = reader.readArray(reader1 -> FileDefinition.fromJson(reader1));
                    deserializedDecompileOperationSuccessResponseInner.files = files;
                } else if ("entryPoint".equals(fieldName)) {
                    deserializedDecompileOperationSuccessResponseInner.entryPoint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDecompileOperationSuccessResponseInner;
        });
    }
}
