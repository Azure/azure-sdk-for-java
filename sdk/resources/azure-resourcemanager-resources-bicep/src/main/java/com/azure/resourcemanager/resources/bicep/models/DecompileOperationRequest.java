// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.resources.bicep.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The body of the request for the decompileBicep operation.
 */
@Fluent
public final class DecompileOperationRequest implements JsonSerializable<DecompileOperationRequest> {
    /*
     * The ARM json template to be decompiled into a Bicep file
     */
    private String template;

    /**
     * Creates an instance of DecompileOperationRequest class.
     */
    public DecompileOperationRequest() {
    }

    /**
     * Get the template property: The ARM json template to be decompiled into a Bicep file.
     * 
     * @return the template value.
     */
    public String template() {
        return this.template;
    }

    /**
     * Set the template property: The ARM json template to be decompiled into a Bicep file.
     * 
     * @param template the template value to set.
     * @return the DecompileOperationRequest object itself.
     */
    public DecompileOperationRequest withTemplate(String template) {
        this.template = template;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (template() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property template in model DecompileOperationRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DecompileOperationRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("template", this.template);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DecompileOperationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DecompileOperationRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DecompileOperationRequest.
     */
    public static DecompileOperationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DecompileOperationRequest deserializedDecompileOperationRequest = new DecompileOperationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("template".equals(fieldName)) {
                    deserializedDecompileOperationRequest.template = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDecompileOperationRequest;
        });
    }
}
