// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.resources.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.management.resources.ErrorResponseException;
import com.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import com.azure.management.resources.fluentcore.collection.InnerSupportsListing;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PolicyAssignments. */
public final class PolicyAssignmentsInner
    implements InnerSupportsListing<PolicyAssignmentInner>, InnerSupportsDelete<PolicyAssignmentInner> {
    /** The proxy service used to perform REST calls. */
    private final PolicyAssignmentsService service;

    /** The service client containing this operation class. */
    private final PolicyClientImpl client;

    /**
     * Initializes an instance of PolicyAssignmentsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PolicyAssignmentsInner(PolicyClientImpl client) {
        this.service =
            RestProxy.create(PolicyAssignmentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyClientPolicyAssignments to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PolicyClientPolicyAs")
    private interface PolicyAssignmentsService {
        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Delete("/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentInner>> delete(
            @HostParam("$host") String host,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("policyAssignmentName") String policyAssignmentName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentInner>> create(
            @HostParam("$host") String host,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("policyAssignmentName") String policyAssignmentName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PolicyAssignmentInner parameters,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentInner>> get(
            @HostParam("$host") String host,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("policyAssignmentName") String policyAssignmentName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization"
                + "/policyAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentListResultInner>> listByResourceGroup(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam(value = "$filter", encoded = true) String filter,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers"
                + "/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers"
                + "/Microsoft.Authorization/policyAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentListResultInner>> listForResource(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceProviderNamespace") String resourceProviderNamespace,
            @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath,
            @PathParam(value = "resourceType", encoded = true) String resourceType,
            @PathParam("resourceName") String resourceName,
            @QueryParam("$filter") String filter,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentListResultInner>> list(
            @HostParam("$host") String host,
            @QueryParam("$filter") String filter,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Delete("/{policyAssignmentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentInner>> deleteById(
            @HostParam("$host") String host,
            @PathParam(value = "policyAssignmentId", encoded = true) String policyAssignmentId,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Put("/{policyAssignmentId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentInner>> createById(
            @HostParam("$host") String host,
            @PathParam(value = "policyAssignmentId", encoded = true) String policyAssignmentId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PolicyAssignmentInner parameters,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Get("/{policyAssignmentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentInner>> getById(
            @HostParam("$host") String host,
            @PathParam(value = "policyAssignmentId", encoded = true) String policyAssignmentId,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentListResultInner>> listForResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentListResultInner>> listForResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Headers({"Accept: application/json,text/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicyAssignmentListResultInner>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Deletes a policy assignment.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicyAssignmentInner>> deleteWithResponseAsync(
        String scope, String policyAssignmentName) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getHost(), scope, policyAssignmentName, apiVersion, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a policy assignment.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyAssignmentInner> deleteAsync(String scope, String policyAssignmentName) {
        return deleteWithResponseAsync(scope, policyAssignmentName)
            .flatMap(
                (SimpleResponse<PolicyAssignmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a policy assignment.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyAssignmentInner delete(String scope, String policyAssignmentName) {
        return deleteAsync(scope, policyAssignmentName).block();
    }

    /**
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group
     * that policy is assigned to all resources in the group.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment.
     * @param parameters The policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicyAssignmentInner>> createWithResponseAsync(
        String scope, String policyAssignmentName, PolicyAssignmentInner parameters) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(
                context ->
                    service.create(this.client.getHost(), scope, policyAssignmentName, apiVersion, parameters, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group
     * that policy is assigned to all resources in the group.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment.
     * @param parameters The policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyAssignmentInner> createAsync(
        String scope, String policyAssignmentName, PolicyAssignmentInner parameters) {
        return createWithResponseAsync(scope, policyAssignmentName, parameters)
            .flatMap(
                (SimpleResponse<PolicyAssignmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group
     * that policy is assigned to all resources in the group.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment.
     * @param parameters The policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyAssignmentInner create(String scope, String policyAssignmentName, PolicyAssignmentInner parameters) {
        return createAsync(scope, policyAssignmentName, parameters).block();
    }

    /**
     * Gets a policy assignment.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicyAssignmentInner>> getWithResponseAsync(String scope, String policyAssignmentName) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getHost(), scope, policyAssignmentName, apiVersion, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets a policy assignment.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyAssignmentInner> getAsync(String scope, String policyAssignmentName) {
        return getWithResponseAsync(scope, policyAssignmentName)
            .flatMap(
                (SimpleResponse<PolicyAssignmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a policy assignment.
     *
     * @param scope The scope of the policy assignment.
     * @param policyAssignmentName The name of the policy assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyAssignmentInner get(String scope, String policyAssignmentName) {
        return getAsync(scope, policyAssignmentName).block();
    }

    /**
     * Gets policy assignments for the resource group.
     *
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for the resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicyAssignmentInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, String filter) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getHost(),
                            resourceGroupName,
                            filter,
                            apiVersion,
                            this.client.getSubscriptionId(),
                            context))
            .<PagedResponse<PolicyAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets policy assignments for the resource group.
     *
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for the resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicyAssignmentInner> listByResourceGroupAsync(String resourceGroupName, String filter) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter),
            nextLink -> listForResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets policy assignments for the resource group.
     *
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for the resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicyAssignmentInner> listByResourceGroupAsync(String resourceGroupName) {
        final String filter = null;
        final Context context = null;
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter),
            nextLink -> listForResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets policy assignments for the resource group.
     *
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for the resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyAssignmentInner> listByResourceGroup(String resourceGroupName, String filter) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, filter));
    }

    /**
     * Gets policy assignments for the resource group.
     *
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for the resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyAssignmentInner> listByResourceGroup(String resourceGroupName) {
        final String filter = null;
        final Context context = null;
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, filter));
    }

    /**
     * Gets policy assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource path.
     * @param resourceType The resource type.
     * @param resourceName The name of the resource with policy assignments.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for a resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicyAssignmentInner>> listForResourceSinglePageAsync(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String filter) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listForResource(
                            this.client.getHost(),
                            resourceGroupName,
                            resourceProviderNamespace,
                            parentResourcePath,
                            resourceType,
                            resourceName,
                            filter,
                            apiVersion,
                            this.client.getSubscriptionId(),
                            context))
            .<PagedResponse<PolicyAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets policy assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource path.
     * @param resourceType The resource type.
     * @param resourceName The name of the resource with policy assignments.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for a resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicyAssignmentInner> listForResourceAsync(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String filter) {
        return new PagedFlux<>(
            () ->
                listForResourceSinglePageAsync(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    filter),
            nextLink -> listForResourceNextSinglePageAsync(nextLink));
    }

    /**
     * Gets policy assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource path.
     * @param resourceType The resource type.
     * @param resourceName The name of the resource with policy assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for a resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicyAssignmentInner> listForResourceAsync(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName) {
        final String filter = null;
        final Context context = null;
        return new PagedFlux<>(
            () ->
                listForResourceSinglePageAsync(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    filter),
            nextLink -> listForResourceNextSinglePageAsync(nextLink));
    }

    /**
     * Gets policy assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource path.
     * @param resourceType The resource type.
     * @param resourceName The name of the resource with policy assignments.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for a resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyAssignmentInner> listForResource(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String filter) {
        return new PagedIterable<>(
            listForResourceAsync(
                resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter));
    }

    /**
     * Gets policy assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource path.
     * @param resourceType The resource type.
     * @param resourceName The name of the resource with policy assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return policy assignments for a resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyAssignmentInner> listForResource(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName) {
        final String filter = null;
        final Context context = null;
        return new PagedIterable<>(
            listForResourceAsync(
                resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter));
    }

    /**
     * Gets all the policy assignments for a subscription.
     *
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the policy assignments for a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicyAssignmentInner>> listSinglePageAsync(String filter) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(
                context ->
                    service.list(this.client.getHost(), filter, apiVersion, this.client.getSubscriptionId(), context))
            .<PagedResponse<PolicyAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets all the policy assignments for a subscription.
     *
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the policy assignments for a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicyAssignmentInner> listAsync(String filter) {
        return new PagedFlux<>(() -> listSinglePageAsync(filter), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the policy assignments for a subscription.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the policy assignments for a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicyAssignmentInner> listAsync() {
        final String filter = null;
        final Context context = null;
        return new PagedFlux<>(() -> listSinglePageAsync(filter), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the policy assignments for a subscription.
     *
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the policy assignments for a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyAssignmentInner> list(String filter) {
        return new PagedIterable<>(listAsync(filter));
    }

    /**
     * Gets all the policy assignments for a subscription.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the policy assignments for a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyAssignmentInner> list() {
        final String filter = null;
        final Context context = null;
        return new PagedIterable<>(listAsync(filter));
    }

    /**
     * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicyAssignmentInner>> deleteByIdWithResponseAsync(String policyAssignmentId) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(context -> service.deleteById(this.client.getHost(), policyAssignmentId, apiVersion, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyAssignmentInner> deleteByIdAsync(String policyAssignmentId) {
        return deleteByIdWithResponseAsync(policyAssignmentId)
            .flatMap(
                (SimpleResponse<PolicyAssignmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyAssignmentInner deleteById(String policyAssignmentId) {
        return deleteByIdAsync(policyAssignmentId).block();
    }

    /**
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group
     * that policy is assigned to all resources in the group. When providing a scope for the assignment, use
     * '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @param parameters The policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicyAssignmentInner>> createByIdWithResponseAsync(
        String policyAssignmentId, PolicyAssignmentInner parameters) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(
                context ->
                    service.createById(this.client.getHost(), policyAssignmentId, apiVersion, parameters, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group
     * that policy is assigned to all resources in the group. When providing a scope for the assignment, use
     * '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @param parameters The policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyAssignmentInner> createByIdAsync(String policyAssignmentId, PolicyAssignmentInner parameters) {
        return createByIdWithResponseAsync(policyAssignmentId, parameters)
            .flatMap(
                (SimpleResponse<PolicyAssignmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group
     * that policy is assigned to all resources in the group. When providing a scope for the assignment, use
     * '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @param parameters The policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyAssignmentInner createById(String policyAssignmentId, PolicyAssignmentInner parameters) {
        return createByIdAsync(policyAssignmentId, parameters).block();
    }

    /**
     * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicyAssignmentInner>> getByIdWithResponseAsync(String policyAssignmentId) {
        final String apiVersion = "2017-06-01-preview";
        return FluxUtil
            .withContext(context -> service.getById(this.client.getHost(), policyAssignmentId, apiVersion, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyAssignmentInner> getByIdAsync(String policyAssignmentId) {
        return getByIdWithResponseAsync(policyAssignmentId)
            .flatMap(
                (SimpleResponse<PolicyAssignmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers
     * /{resource-provider-namespace}/{resource-type}/{resource-name}' for resources.
     *
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format
     *     '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the policy assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyAssignmentInner getById(String policyAssignmentId) {
        return getByIdAsync(policyAssignmentId).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of policy assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicyAssignmentInner>> listForResourceGroupNextSinglePageAsync(String nextLink) {
        return FluxUtil
            .withContext(context -> service.listForResourceGroupNext(nextLink, context))
            .<PagedResponse<PolicyAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of policy assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicyAssignmentInner>> listForResourceNextSinglePageAsync(String nextLink) {
        return FluxUtil
            .withContext(context -> service.listForResourceNext(nextLink, context))
            .<PagedResponse<PolicyAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of policy assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicyAssignmentInner>> listNextSinglePageAsync(String nextLink) {
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, context))
            .<PagedResponse<PolicyAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }
}
