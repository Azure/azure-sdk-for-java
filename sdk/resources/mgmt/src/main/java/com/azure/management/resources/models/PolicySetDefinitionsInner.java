// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.resources.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.resources.ErrorResponseException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * PolicySetDefinitions.
 */
public final class PolicySetDefinitionsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private PolicySetDefinitionsService service;

    /**
     * The service client containing this operation class.
     */
    private PolicyClientImpl client;

    /**
     * Initializes an instance of PolicySetDefinitionsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public PolicySetDefinitionsInner(PolicyClientImpl client) {
        this.service = RestProxy.create(PolicySetDefinitionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * PolicyClientPolicySetDefinitions to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PolicyClientPolicySetDefinitions")
    private interface PolicySetDefinitionsService {
        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionInner>> createOrUpdate(@HostParam("$host") String host, @PathParam("policySetDefinitionName") String policySetDefinitionName, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PolicySetDefinitionInner parameters);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @PathParam("policySetDefinitionName") String policySetDefinitionName, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionInner>> get(@HostParam("$host") String host, @PathParam("policySetDefinitionName") String policySetDefinitionName, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionInner>> getBuiltIn(@HostParam("$host") String host, @PathParam("policySetDefinitionName") String policySetDefinitionName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionListResultInner>> list(@HostParam("$host") String host, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("/providers/Microsoft.Authorization/policySetDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionListResultInner>> listBuiltIn(@HostParam("$host") String host, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionInner>> createOrUpdateAtManagementGroup(@HostParam("$host") String host, @PathParam("policySetDefinitionName") String policySetDefinitionName, @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId, @BodyParam("application/json") PolicySetDefinitionInner parameters);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> deleteAtManagementGroup(@HostParam("$host") String host, @PathParam("policySetDefinitionName") String policySetDefinitionName, @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionInner>> getAtManagementGroup(@HostParam("$host") String host, @PathParam("policySetDefinitionName") String policySetDefinitionName, @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionListResultInner>> listByManagementGroup(@HostParam("$host") String host, @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionListResultInner>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionListResultInner>> listBuiltInNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Headers({ "Accept: application/json,text/json", "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PolicySetDefinitionListResultInner>> listByManagementGroupNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Creates or updates a policy set definition.
     * 
     * @param policySetDefinitionName 
     * @param parameters The policy set definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicySetDefinitionInner>> createOrUpdateWithResponseAsync(String policySetDefinitionName, PolicySetDefinitionInner parameters) {
        final String apiVersion = "2017-06-01-preview";
        return service.createOrUpdate(this.client.getHost(), policySetDefinitionName, apiVersion, this.client.getSubscriptionId(), parameters);
    }

    /**
     * Creates or updates a policy set definition.
     * 
     * @param policySetDefinitionName 
     * @param parameters The policy set definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicySetDefinitionInner> createOrUpdateAsync(String policySetDefinitionName, PolicySetDefinitionInner parameters) {
        return createOrUpdateWithResponseAsync(policySetDefinitionName, parameters)
            .flatMap((SimpleResponse<PolicySetDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Creates or updates a policy set definition.
     * 
     * @param policySetDefinitionName 
     * @param parameters The policy set definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicySetDefinitionInner createOrUpdate(String policySetDefinitionName, PolicySetDefinitionInner parameters) {
        return createOrUpdateAsync(policySetDefinitionName, parameters).block();
    }

    /**
     * Deletes a policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String policySetDefinitionName) {
        final String apiVersion = "2017-06-01-preview";
        return service.delete(this.client.getHost(), policySetDefinitionName, apiVersion, this.client.getSubscriptionId());
    }

    /**
     * Deletes a policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String policySetDefinitionName) {
        return deleteWithResponseAsync(policySetDefinitionName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String policySetDefinitionName) {
        deleteAsync(policySetDefinitionName).block();
    }

    /**
     * Gets the policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicySetDefinitionInner>> getWithResponseAsync(String policySetDefinitionName) {
        final String apiVersion = "2017-06-01-preview";
        return service.get(this.client.getHost(), policySetDefinitionName, apiVersion, this.client.getSubscriptionId());
    }

    /**
     * Gets the policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicySetDefinitionInner> getAsync(String policySetDefinitionName) {
        return getWithResponseAsync(policySetDefinitionName)
            .flatMap((SimpleResponse<PolicySetDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicySetDefinitionInner get(String policySetDefinitionName) {
        return getAsync(policySetDefinitionName).block();
    }

    /**
     * Gets the built in policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicySetDefinitionInner>> getBuiltInWithResponseAsync(String policySetDefinitionName) {
        final String apiVersion = "2017-06-01-preview";
        return service.getBuiltIn(this.client.getHost(), policySetDefinitionName, apiVersion);
    }

    /**
     * Gets the built in policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicySetDefinitionInner> getBuiltInAsync(String policySetDefinitionName) {
        return getBuiltInWithResponseAsync(policySetDefinitionName)
            .flatMap((SimpleResponse<PolicySetDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the built in policy set definition.
     * 
     * @param policySetDefinitionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicySetDefinitionInner getBuiltIn(String policySetDefinitionName) {
        return getBuiltInAsync(policySetDefinitionName).block();
    }

    /**
     * Gets all the policy set definitions for a subscription.
     * 
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicySetDefinitionInner>> listSinglePageAsync() {
        final String apiVersion = "2017-06-01-preview";
        return service.list(this.client.getHost(), apiVersion, this.client.getSubscriptionId()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Gets all the policy set definitions for a subscription.
     * 
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicySetDefinitionInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the policy set definitions for a subscription.
     * 
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicySetDefinitionInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Gets all the built in policy set definitions.
     * 
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicySetDefinitionInner>> listBuiltInSinglePageAsync() {
        final String apiVersion = "2017-06-01-preview";
        return service.listBuiltIn(this.client.getHost(), apiVersion).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Gets all the built in policy set definitions.
     * 
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicySetDefinitionInner> listBuiltInAsync() {
        return new PagedFlux<>(
            () -> listBuiltInSinglePageAsync(),
            nextLink -> listBuiltInNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the built in policy set definitions.
     * 
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicySetDefinitionInner> listBuiltIn() {
        return new PagedIterable<>(listBuiltInAsync());
    }

    /**
     * Creates or updates a policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @param parameters The policy set definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicySetDefinitionInner>> createOrUpdateAtManagementGroupWithResponseAsync(String policySetDefinitionName, String managementGroupId, PolicySetDefinitionInner parameters) {
        final String apiVersion = "2017-06-01-preview";
        return service.createOrUpdateAtManagementGroup(this.client.getHost(), policySetDefinitionName, apiVersion, managementGroupId, parameters);
    }

    /**
     * Creates or updates a policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @param parameters The policy set definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicySetDefinitionInner> createOrUpdateAtManagementGroupAsync(String policySetDefinitionName, String managementGroupId, PolicySetDefinitionInner parameters) {
        return createOrUpdateAtManagementGroupWithResponseAsync(policySetDefinitionName, managementGroupId, parameters)
            .flatMap((SimpleResponse<PolicySetDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Creates or updates a policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @param parameters The policy set definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicySetDefinitionInner createOrUpdateAtManagementGroup(String policySetDefinitionName, String managementGroupId, PolicySetDefinitionInner parameters) {
        return createOrUpdateAtManagementGroupAsync(policySetDefinitionName, managementGroupId, parameters).block();
    }

    /**
     * Deletes a policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAtManagementGroupWithResponseAsync(String policySetDefinitionName, String managementGroupId) {
        final String apiVersion = "2017-06-01-preview";
        return service.deleteAtManagementGroup(this.client.getHost(), policySetDefinitionName, apiVersion, managementGroupId);
    }

    /**
     * Deletes a policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAtManagementGroupAsync(String policySetDefinitionName, String managementGroupId) {
        return deleteAtManagementGroupWithResponseAsync(policySetDefinitionName, managementGroupId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAtManagementGroup(String policySetDefinitionName, String managementGroupId) {
        deleteAtManagementGroupAsync(policySetDefinitionName, managementGroupId).block();
    }

    /**
     * Gets the policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PolicySetDefinitionInner>> getAtManagementGroupWithResponseAsync(String policySetDefinitionName, String managementGroupId) {
        final String apiVersion = "2017-06-01-preview";
        return service.getAtManagementGroup(this.client.getHost(), policySetDefinitionName, apiVersion, managementGroupId);
    }

    /**
     * Gets the policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicySetDefinitionInner> getAtManagementGroupAsync(String policySetDefinitionName, String managementGroupId) {
        return getAtManagementGroupWithResponseAsync(policySetDefinitionName, managementGroupId)
            .flatMap((SimpleResponse<PolicySetDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the policy set definition at management group level.
     * 
     * @param policySetDefinitionName 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicySetDefinitionInner getAtManagementGroup(String policySetDefinitionName, String managementGroupId) {
        return getAtManagementGroupAsync(policySetDefinitionName, managementGroupId).block();
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     * 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicySetDefinitionInner>> listByManagementGroupSinglePageAsync(String managementGroupId) {
        final String apiVersion = "2017-06-01-preview";
        return service.listByManagementGroup(this.client.getHost(), apiVersion, managementGroupId).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     * 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PolicySetDefinitionInner> listByManagementGroupAsync(String managementGroupId) {
        return new PagedFlux<>(
            () -> listByManagementGroupSinglePageAsync(managementGroupId),
            nextLink -> listByManagementGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     * 
     * @param managementGroupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicySetDefinitionInner> listByManagementGroup(String managementGroupId) {
        return new PagedIterable<>(listByManagementGroupAsync(managementGroupId));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicySetDefinitionInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicySetDefinitionInner>> listBuiltInNextSinglePageAsync(String nextLink) {
        return service.listBuiltInNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PolicySetDefinitionInner>> listByManagementGroupNextSinglePageAsync(String nextLink) {
        return service.listByManagementGroupNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
