// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resources.generated.ResourceManager;
import com.azure.resourcemanager.resources.generated.fluent.DeploymentOperationsClient;
import com.azure.resourcemanager.resources.generated.fluent.models.DeploymentOperationInner;
import com.azure.resourcemanager.resources.generated.models.DeploymentOperation;
import com.azure.resourcemanager.resources.generated.models.DeploymentOperations;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DeploymentOperationsImpl implements DeploymentOperations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DeploymentOperationsImpl.class);

    private final DeploymentOperationsClient innerClient;

    private final ResourceManager serviceManager;

    public DeploymentOperationsImpl(DeploymentOperationsClient innerClient, ResourceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DeploymentOperation getAtScope(String scope, String deploymentName, String operationId) {
        DeploymentOperationInner inner = this.serviceClient().getAtScope(scope, deploymentName, operationId);
        if (inner != null) {
            return new DeploymentOperationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentOperation> getAtScopeWithResponse(
        String scope, String deploymentName, String operationId, Context context) {
        Response<DeploymentOperationInner> inner =
            this.serviceClient().getAtScopeWithResponse(scope, deploymentName, operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentOperationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DeploymentOperation> listAtScope(String scope, String deploymentName) {
        PagedIterable<DeploymentOperationInner> inner = this.serviceClient().listAtScope(scope, deploymentName);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentOperation> listAtScope(
        String scope, String deploymentName, Integer top, Context context) {
        PagedIterable<DeploymentOperationInner> inner =
            this.serviceClient().listAtScope(scope, deploymentName, top, context);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public DeploymentOperation getAtTenantScope(String deploymentName, String operationId) {
        DeploymentOperationInner inner = this.serviceClient().getAtTenantScope(deploymentName, operationId);
        if (inner != null) {
            return new DeploymentOperationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentOperation> getAtTenantScopeWithResponse(
        String deploymentName, String operationId, Context context) {
        Response<DeploymentOperationInner> inner =
            this.serviceClient().getAtTenantScopeWithResponse(deploymentName, operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentOperationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DeploymentOperation> listAtTenantScope(String deploymentName) {
        PagedIterable<DeploymentOperationInner> inner = this.serviceClient().listAtTenantScope(deploymentName);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentOperation> listAtTenantScope(String deploymentName, Integer top, Context context) {
        PagedIterable<DeploymentOperationInner> inner =
            this.serviceClient().listAtTenantScope(deploymentName, top, context);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public DeploymentOperation getAtManagementGroupScope(String groupId, String deploymentName, String operationId) {
        DeploymentOperationInner inner =
            this.serviceClient().getAtManagementGroupScope(groupId, deploymentName, operationId);
        if (inner != null) {
            return new DeploymentOperationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentOperation> getAtManagementGroupScopeWithResponse(
        String groupId, String deploymentName, String operationId, Context context) {
        Response<DeploymentOperationInner> inner =
            this.serviceClient().getAtManagementGroupScopeWithResponse(groupId, deploymentName, operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentOperationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DeploymentOperation> listAtManagementGroupScope(String groupId, String deploymentName) {
        PagedIterable<DeploymentOperationInner> inner =
            this.serviceClient().listAtManagementGroupScope(groupId, deploymentName);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentOperation> listAtManagementGroupScope(
        String groupId, String deploymentName, Integer top, Context context) {
        PagedIterable<DeploymentOperationInner> inner =
            this.serviceClient().listAtManagementGroupScope(groupId, deploymentName, top, context);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public DeploymentOperation getAtSubscriptionScope(String deploymentName, String operationId) {
        DeploymentOperationInner inner = this.serviceClient().getAtSubscriptionScope(deploymentName, operationId);
        if (inner != null) {
            return new DeploymentOperationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentOperation> getAtSubscriptionScopeWithResponse(
        String deploymentName, String operationId, Context context) {
        Response<DeploymentOperationInner> inner =
            this.serviceClient().getAtSubscriptionScopeWithResponse(deploymentName, operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentOperationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DeploymentOperation> listAtSubscriptionScope(String deploymentName) {
        PagedIterable<DeploymentOperationInner> inner = this.serviceClient().listAtSubscriptionScope(deploymentName);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentOperation> listAtSubscriptionScope(
        String deploymentName, Integer top, Context context) {
        PagedIterable<DeploymentOperationInner> inner =
            this.serviceClient().listAtSubscriptionScope(deploymentName, top, context);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public DeploymentOperation get(String resourceGroupName, String deploymentName, String operationId) {
        DeploymentOperationInner inner = this.serviceClient().get(resourceGroupName, deploymentName, operationId);
        if (inner != null) {
            return new DeploymentOperationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentOperation> getWithResponse(
        String resourceGroupName, String deploymentName, String operationId, Context context) {
        Response<DeploymentOperationInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, deploymentName, operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentOperationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DeploymentOperation> listByResourceGroup(String resourceGroupName, String deploymentName) {
        PagedIterable<DeploymentOperationInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, deploymentName);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentOperation> listByResourceGroup(
        String resourceGroupName, String deploymentName, Integer top, Context context) {
        PagedIterable<DeploymentOperationInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, deploymentName, top, context);
        return inner.mapPage(inner1 -> new DeploymentOperationImpl(inner1, this.manager()));
    }

    private DeploymentOperationsClient serviceClient() {
        return this.innerClient;
    }

    private ResourceManager manager() {
        return this.serviceManager;
    }
}
