/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resources.v2016_09_01.implementation;

import com.microsoft.azure.management.resources.v2016_09_01.ResourceGroup;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.resources.v2016_09_01.ResourceGroupProperties;
import java.util.Map;

class ResourceGroupImpl extends CreatableUpdatableImpl<ResourceGroup, ResourceGroupInner, ResourceGroupImpl> implements ResourceGroup, ResourceGroup.Definition, ResourceGroup.Update {
    private final ResourcesManager manager;
    private String resourceGroupName;

    ResourceGroupImpl(String name, ResourcesManager manager) {
        super(name, new ResourceGroupInner());
        this.manager = manager;
        // Set resource name
        this.resourceGroupName = name;
        //
    }

    ResourceGroupImpl(ResourceGroupInner inner, ResourcesManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.resourceGroupName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourcegroups");
        //
    }

    @Override
    public ResourcesManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ResourceGroup> createResourceAsync() {
        ResourceGroupsInner client = this.manager().inner().resourceGroups();
        return client.createOrUpdateAsync(this.resourceGroupName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ResourceGroup> updateResourceAsync() {
        ResourceGroupsInner client = this.manager().inner().resourceGroups();
        return client.patchAsync(this.resourceGroupName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ResourceGroupInner> getInnerAsync() {
        ResourceGroupsInner client = this.manager().inner().resourceGroups();
        return client.getAsync(this.resourceGroupName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String managedBy() {
        return this.inner().managedBy();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ResourceGroupProperties properties() {
        return this.inner().properties();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().tags();
    }

    @Override
    public ResourceGroupImpl withExistingSubscription() {
        return this;
    }

    @Override
    public ResourceGroupImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ResourceGroupImpl withManagedBy(String managedBy) {
        this.inner().withManagedBy(managedBy);
        return this;
    }

    @Override
    public ResourceGroupImpl withName(String name) {
        this.inner().withName(name);
        return this;
    }

    @Override
    public ResourceGroupImpl withProperties(ResourceGroupProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

    @Override
    public ResourceGroupImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
