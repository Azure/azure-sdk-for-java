// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningcompute.generated;

import com.azure.resourcemanager.machinelearningcompute.models.AcsClusterProperties;
import com.azure.resourcemanager.machinelearningcompute.models.ClusterType;
import com.azure.resourcemanager.machinelearningcompute.models.GlobalServiceConfiguration;
import com.azure.resourcemanager.machinelearningcompute.models.KubernetesClusterProperties;
import com.azure.resourcemanager.machinelearningcompute.models.OrchestratorType;
import com.azure.resourcemanager.machinelearningcompute.models.ServicePrincipalProperties;
import com.azure.resourcemanager.machinelearningcompute.models.SslConfiguration;
import com.azure.resourcemanager.machinelearningcompute.models.Status;
import java.util.HashMap;
import java.util.Map;

/** Samples for OperationalizationClusters CreateOrUpdate. */
public final class OperationalizationClustersCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_CreateOrUpdate.json
     */
    /**
     * Sample code: PUT Operationalization Cluster.
     *
     * @param manager Entry point to MachineLearningComputeManager.
     */
    public static void pUTOperationalizationCluster(
        com.azure.resourcemanager.machinelearningcompute.MachineLearningComputeManager manager) {
        manager
            .operationalizationClusters()
            .define("myCluster")
            .withRegion("West US")
            .withExistingResourceGroup("myResourceGroup")
            .withTags(mapOf("key1", "alpha", "key2", "beta"))
            .withDescription("My Operationalization Cluster")
            .withClusterType(ClusterType.ACS)
            .withContainerService(
                new AcsClusterProperties()
                    .withOrchestratorType(OrchestratorType.KUBERNETES)
                    .withOrchestratorProperties(
                        new KubernetesClusterProperties()
                            .withServicePrincipal(
                                new ServicePrincipalProperties()
                                    .withClientId("abcdefghijklmnopqrt")
                                    .withSecret("<secret>"))))
            .withGlobalServiceConfiguration(
                new GlobalServiceConfiguration()
                    .withSsl(
                        new SslConfiguration()
                            .withStatus(Status.ENABLED)
                            .withCert("afjdklq2131casfakld=")
                            .withKey("flksdafkldsajf=")
                            .withCname("foo.bar.com"))
                    .withAdditionalProperties(mapOf()))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
