// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningcompute.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.HashMap;
import java.util.Map;

/** Global configuration for services in the cluster. */
@Fluent
public final class GlobalServiceConfiguration {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GlobalServiceConfiguration.class);

    /*
     * The configuration ETag for updates.
     */
    @JsonProperty(value = "etag")
    private String etag;

    /*
     * The SSL configuration properties
     */
    @JsonProperty(value = "ssl")
    private SslConfiguration ssl;

    /*
     * Optional global authorization keys for all user services deployed in
     * cluster. These are used if the service does not have auth keys.
     */
    @JsonProperty(value = "serviceAuth")
    private ServiceAuthConfiguration serviceAuth;

    /*
     * The auto-scale configuration
     */
    @JsonProperty(value = "autoScale")
    private AutoScaleConfiguration autoScale;

    /*
     * Global configuration for services in the cluster.
     */
    @JsonIgnore private Map<String, Object> additionalProperties;

    /**
     * Get the etag property: The configuration ETag for updates.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: The configuration ETag for updates.
     *
     * @param etag the etag value to set.
     * @return the GlobalServiceConfiguration object itself.
     */
    public GlobalServiceConfiguration withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the ssl property: The SSL configuration properties.
     *
     * @return the ssl value.
     */
    public SslConfiguration ssl() {
        return this.ssl;
    }

    /**
     * Set the ssl property: The SSL configuration properties.
     *
     * @param ssl the ssl value to set.
     * @return the GlobalServiceConfiguration object itself.
     */
    public GlobalServiceConfiguration withSsl(SslConfiguration ssl) {
        this.ssl = ssl;
        return this;
    }

    /**
     * Get the serviceAuth property: Optional global authorization keys for all user services deployed in cluster. These
     * are used if the service does not have auth keys.
     *
     * @return the serviceAuth value.
     */
    public ServiceAuthConfiguration serviceAuth() {
        return this.serviceAuth;
    }

    /**
     * Set the serviceAuth property: Optional global authorization keys for all user services deployed in cluster. These
     * are used if the service does not have auth keys.
     *
     * @param serviceAuth the serviceAuth value to set.
     * @return the GlobalServiceConfiguration object itself.
     */
    public GlobalServiceConfiguration withServiceAuth(ServiceAuthConfiguration serviceAuth) {
        this.serviceAuth = serviceAuth;
        return this;
    }

    /**
     * Get the autoScale property: The auto-scale configuration.
     *
     * @return the autoScale value.
     */
    public AutoScaleConfiguration autoScale() {
        return this.autoScale;
    }

    /**
     * Set the autoScale property: The auto-scale configuration.
     *
     * @param autoScale the autoScale value to set.
     * @return the GlobalServiceConfiguration object itself.
     */
    public GlobalServiceConfiguration withAutoScale(AutoScaleConfiguration autoScale) {
        this.autoScale = autoScale;
        return this;
    }

    /**
     * Get the additionalProperties property: Global configuration for services in the cluster.
     *
     * @return the additionalProperties value.
     */
    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Global configuration for services in the cluster.
     *
     * @param additionalProperties the additionalProperties value to set.
     * @return the GlobalServiceConfiguration object itself.
     */
    public GlobalServiceConfiguration withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    @JsonAnySetter
    void withAdditionalProperties(String key, Object value) {
        if (additionalProperties == null) {
            additionalProperties = new HashMap<>();
        }
        additionalProperties.put(key, value);
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ssl() != null) {
            ssl().validate();
        }
        if (serviceAuth() != null) {
            serviceAuth().validate();
        }
        if (autoScale() != null) {
            autoScale().validate();
        }
    }
}
