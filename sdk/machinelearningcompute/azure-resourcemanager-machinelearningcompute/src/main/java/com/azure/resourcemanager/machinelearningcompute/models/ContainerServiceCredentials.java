// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningcompute.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Information about the Azure Container Registry which contains the images deployed to the cluster. */
@Immutable
public final class ContainerServiceCredentials {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContainerServiceCredentials.class);

    /*
     * The ACS kube config file.
     */
    @JsonProperty(value = "acsKubeConfig", access = JsonProperty.Access.WRITE_ONLY)
    private String acsKubeConfig;

    /*
     * Service principal configuration used by Kubernetes.
     */
    @JsonProperty(value = "servicePrincipalConfiguration", access = JsonProperty.Access.WRITE_ONLY)
    private ServicePrincipalProperties servicePrincipalConfiguration;

    /*
     * The ACR image pull secret name which was created in Kubernetes.
     */
    @JsonProperty(value = "imagePullSecretName", access = JsonProperty.Access.WRITE_ONLY)
    private String imagePullSecretName;

    /**
     * Get the acsKubeConfig property: The ACS kube config file.
     *
     * @return the acsKubeConfig value.
     */
    public String acsKubeConfig() {
        return this.acsKubeConfig;
    }

    /**
     * Get the servicePrincipalConfiguration property: Service principal configuration used by Kubernetes.
     *
     * @return the servicePrincipalConfiguration value.
     */
    public ServicePrincipalProperties servicePrincipalConfiguration() {
        return this.servicePrincipalConfiguration;
    }

    /**
     * Get the imagePullSecretName property: The ACR image pull secret name which was created in Kubernetes.
     *
     * @return the imagePullSecretName value.
     */
    public String imagePullSecretName() {
        return this.imagePullSecretName;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (servicePrincipalConfiguration() != null) {
            servicePrincipalConfiguration().validate();
        }
    }
}
