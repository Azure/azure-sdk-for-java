// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningcompute.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of OperationalizationClusters. */
public interface OperationalizationClusters {
    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    OperationalizationCluster getByResourceGroup(String resourceGroupName, String clusterName);

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    Response<OperationalizationCluster> getByResourceGroupWithResponse(
        String resourceGroupName, String clusterName, Context context);

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String clusterName, Boolean deleteAll);

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String clusterName);

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String clusterName, Boolean deleteAll, Context context);

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    OperationalizationClusterCredentials listKeys(String resourceGroupName, String clusterName);

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    Response<OperationalizationClusterCredentials> listKeysWithResponse(
        String resourceGroupName, String clusterName, Context context);

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    CheckSystemServicesUpdatesAvailableResponse checkSystemServicesUpdatesAvailable(
        String resourceGroupName, String clusterName);

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    Response<CheckSystemServicesUpdatesAvailableResponse> checkSystemServicesUpdatesAvailableWithResponse(
        String resourceGroupName, String clusterName, Context context);

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    UpdateSystemServicesResponse updateSystemServices(String resourceGroupName, String clusterName);

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    UpdateSystemServicesResponse updateSystemServices(String resourceGroupName, String clusterName, Context context);

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    PagedIterable<OperationalizationCluster> listByResourceGroup(String resourceGroupName);

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    PagedIterable<OperationalizationCluster> listByResourceGroup(
        String resourceGroupName, String skiptoken, Context context);

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    PagedIterable<OperationalizationCluster> list();

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    PagedIterable<OperationalizationCluster> list(String skiptoken, Context context);

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    OperationalizationCluster getById(String id);

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    Response<OperationalizationCluster> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the specified cluster.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the specified cluster.
     *
     * @param id the resource ID.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Boolean deleteAll, Context context);

    /**
     * Begins definition for a new OperationalizationCluster resource.
     *
     * @param name resource name.
     * @return the first stage of the new OperationalizationCluster definition.
     */
    OperationalizationCluster.DefinitionStages.Blank define(String name);
}
