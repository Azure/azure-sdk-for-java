// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningcompute.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.machinelearningcompute.fluent.OperationalizationClustersClient;
import com.azure.resourcemanager.machinelearningcompute.fluent.models.CheckSystemServicesUpdatesAvailableResponseInner;
import com.azure.resourcemanager.machinelearningcompute.fluent.models.OperationalizationClusterCredentialsInner;
import com.azure.resourcemanager.machinelearningcompute.fluent.models.OperationalizationClusterInner;
import com.azure.resourcemanager.machinelearningcompute.fluent.models.UpdateSystemServicesResponseInner;
import com.azure.resourcemanager.machinelearningcompute.models.OperationalizationClusterUpdateParameters;
import com.azure.resourcemanager.machinelearningcompute.models.PaginatedOperationalizationClustersList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in OperationalizationClustersClient. */
public final class OperationalizationClustersClientImpl implements OperationalizationClustersClient {
    private final ClientLogger logger = new ClientLogger(OperationalizationClustersClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final OperationalizationClustersService service;

    /** The service client containing this operation class. */
    private final MachineLearningComputeManagementClientImpl client;

    /**
     * Initializes an instance of OperationalizationClustersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    OperationalizationClustersClientImpl(MachineLearningComputeManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    OperationalizationClustersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MachineLearningComputeManagementClientOperationalizationClusters to
     * be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MachineLearningCompu")
    private interface OperationalizationClustersService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @BodyParam("application/json") OperationalizationClusterInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OperationalizationClusterInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OperationalizationClusterInner>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @BodyParam("application/json") OperationalizationClusterUpdateParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @QueryParam("deleteAll") Boolean deleteAll,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/listKeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OperationalizationClusterCredentialsInner>> listKeys(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}"
                + "/checkSystemServicesUpdatesAvailable")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CheckSystemServicesUpdatesAvailableResponseInner>> checkSystemServicesUpdatesAvailable(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/updateSystemServices")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateSystemServices(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.MachineLearningCompute/operationalizationClusters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PaginatedOperationalizationClustersList>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("$skiptoken") String skiptoken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningCompute/operationalizationClusters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PaginatedOperationalizationClustersList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$skiptoken") String skiptoken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PaginatedOperationalizationClustersList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PaginatedOperationalizationClustersList>> listBySubscriptionIdNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String clusterName, OperationalizationClusterInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                parameters,
                accept,
                context);
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<OperationalizationClusterInner>, OperationalizationClusterInner>
        beginCreateOrUpdateAsync(
            String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, clusterName, parameters);
        return this
            .client
            .<OperationalizationClusterInner, OperationalizationClusterInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                OperationalizationClusterInner.class,
                OperationalizationClusterInner.class,
                Context.NONE);
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<OperationalizationClusterInner>, OperationalizationClusterInner>
        beginCreateOrUpdateAsync(
            String resourceGroupName, String clusterName, OperationalizationClusterInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, clusterName, parameters, context);
        return this
            .client
            .<OperationalizationClusterInner, OperationalizationClusterInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                OperationalizationClusterInner.class,
                OperationalizationClusterInner.class,
                context);
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<OperationalizationClusterInner>, OperationalizationClusterInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, parameters).getSyncPoller();
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<OperationalizationClusterInner>, OperationalizationClusterInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, OperationalizationClusterInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, parameters, context).getSyncPoller();
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationalizationClusterInner> createOrUpdateAsync(
        String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationalizationClusterInner> createOrUpdateAsync(
        String resourceGroupName, String clusterName, OperationalizationClusterInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationalizationClusterInner createOrUpdate(
        String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        return createOrUpdateAsync(resourceGroupName, clusterName, parameters).block();
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationalizationClusterInner createOrUpdate(
        String resourceGroupName, String clusterName, OperationalizationClusterInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, clusterName, parameters, context).block();
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationalizationClusterInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String clusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationalizationClusterInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String clusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                accept,
                context);
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationalizationClusterInner> getByResourceGroupAsync(String resourceGroupName, String clusterName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, clusterName)
            .flatMap(
                (Response<OperationalizationClusterInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationalizationClusterInner getByResourceGroup(String resourceGroupName, String clusterName) {
        return getByResourceGroupAsync(resourceGroupName, clusterName).block();
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call
     * ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization cluster resource view.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationalizationClusterInner> getByResourceGroupWithResponse(
        String resourceGroupName, String clusterName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, clusterName, context).block();
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other
     * properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters supplied to patch the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationalizationClusterInner>> updateWithResponseAsync(
        String resourceGroupName, String clusterName, OperationalizationClusterUpdateParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other
     * properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters supplied to patch the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationalizationClusterInner>> updateWithResponseAsync(
        String resourceGroupName,
        String clusterName,
        OperationalizationClusterUpdateParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                parameters,
                accept,
                context);
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other
     * properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters supplied to patch the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationalizationClusterInner> updateAsync(
        String resourceGroupName, String clusterName, OperationalizationClusterUpdateParameters parameters) {
        return updateWithResponseAsync(resourceGroupName, clusterName, parameters)
            .flatMap(
                (Response<OperationalizationClusterInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other
     * properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters supplied to patch the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationalizationClusterInner update(
        String resourceGroupName, String clusterName, OperationalizationClusterUpdateParameters parameters) {
        return updateAsync(resourceGroupName, clusterName, parameters).block();
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other
     * properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters supplied to patch the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of an Azure ML Operationalization Cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationalizationClusterInner> updateWithResponse(
        String resourceGroupName,
        String clusterName,
        OperationalizationClusterUpdateParameters parameters,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, clusterName, parameters, context).block();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String clusterName, Boolean deleteAll) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            deleteAll,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String clusterName, Boolean deleteAll, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                deleteAll,
                accept,
                context);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String clusterName, Boolean deleteAll) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, clusterName, deleteAll);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String clusterName, Boolean deleteAll, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, clusterName, deleteAll, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String clusterName, Boolean deleteAll) {
        return beginDeleteAsync(resourceGroupName, clusterName, deleteAll).getSyncPoller();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String clusterName, Boolean deleteAll, Context context) {
        return beginDeleteAsync(resourceGroupName, clusterName, deleteAll, context).getSyncPoller();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String clusterName, Boolean deleteAll) {
        return beginDeleteAsync(resourceGroupName, clusterName, deleteAll)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String clusterName) {
        final Boolean deleteAll = null;
        return beginDeleteAsync(resourceGroupName, clusterName, deleteAll)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String clusterName, Boolean deleteAll, Context context) {
        return beginDeleteAsync(resourceGroupName, clusterName, deleteAll, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName, Boolean deleteAll) {
        deleteAsync(resourceGroupName, clusterName, deleteAll).block();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName) {
        final Boolean deleteAll = null;
        deleteAsync(resourceGroupName, clusterName, deleteAll).block();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName, Boolean deleteAll, Context context) {
        deleteAsync(resourceGroupName, clusterName, deleteAll, context).block();
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationalizationClusterCredentialsInner>> listKeysWithResponseAsync(
        String resourceGroupName, String clusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listKeys(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationalizationClusterCredentialsInner>> listKeysWithResponseAsync(
        String resourceGroupName, String clusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listKeys(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                accept,
                context);
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationalizationClusterCredentialsInner> listKeysAsync(
        String resourceGroupName, String clusterName) {
        return listKeysWithResponseAsync(resourceGroupName, clusterName)
            .flatMap(
                (Response<OperationalizationClusterCredentialsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationalizationClusterCredentialsInner listKeys(String resourceGroupName, String clusterName) {
        return listKeysAsync(resourceGroupName, clusterName).block();
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationalizationClusterCredentialsInner> listKeysWithResponse(
        String resourceGroupName, String clusterName, Context context) {
        return listKeysWithResponseAsync(resourceGroupName, clusterName, context).block();
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckSystemServicesUpdatesAvailableResponseInner>>
        checkSystemServicesUpdatesAvailableWithResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .checkSystemServicesUpdatesAvailable(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckSystemServicesUpdatesAvailableResponseInner>>
        checkSystemServicesUpdatesAvailableWithResponseAsync(
            String resourceGroupName, String clusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .checkSystemServicesUpdatesAvailable(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                accept,
                context);
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CheckSystemServicesUpdatesAvailableResponseInner> checkSystemServicesUpdatesAvailableAsync(
        String resourceGroupName, String clusterName) {
        return checkSystemServicesUpdatesAvailableWithResponseAsync(resourceGroupName, clusterName)
            .flatMap(
                (Response<CheckSystemServicesUpdatesAvailableResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckSystemServicesUpdatesAvailableResponseInner checkSystemServicesUpdatesAvailable(
        String resourceGroupName, String clusterName) {
        return checkSystemServicesUpdatesAvailableAsync(resourceGroupName, clusterName).block();
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CheckSystemServicesUpdatesAvailableResponseInner> checkSystemServicesUpdatesAvailableWithResponse(
        String resourceGroupName, String clusterName, Context context) {
        return checkSystemServicesUpdatesAvailableWithResponseAsync(resourceGroupName, clusterName, context).block();
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateSystemServicesWithResponseAsync(
        String resourceGroupName, String clusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSystemServices(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateSystemServicesWithResponseAsync(
        String resourceGroupName, String clusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateSystemServices(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                accept,
                context);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<UpdateSystemServicesResponseInner>, UpdateSystemServicesResponseInner>
        beginUpdateSystemServicesAsync(String resourceGroupName, String clusterName) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateSystemServicesWithResponseAsync(resourceGroupName, clusterName);
        return this
            .client
            .<UpdateSystemServicesResponseInner, UpdateSystemServicesResponseInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                UpdateSystemServicesResponseInner.class,
                UpdateSystemServicesResponseInner.class,
                Context.NONE);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<UpdateSystemServicesResponseInner>, UpdateSystemServicesResponseInner>
        beginUpdateSystemServicesAsync(String resourceGroupName, String clusterName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateSystemServicesWithResponseAsync(resourceGroupName, clusterName, context);
        return this
            .client
            .<UpdateSystemServicesResponseInner, UpdateSystemServicesResponseInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                UpdateSystemServicesResponseInner.class,
                UpdateSystemServicesResponseInner.class,
                context);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<UpdateSystemServicesResponseInner>, UpdateSystemServicesResponseInner>
        beginUpdateSystemServices(String resourceGroupName, String clusterName) {
        return beginUpdateSystemServicesAsync(resourceGroupName, clusterName).getSyncPoller();
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<UpdateSystemServicesResponseInner>, UpdateSystemServicesResponseInner>
        beginUpdateSystemServices(String resourceGroupName, String clusterName, Context context) {
        return beginUpdateSystemServicesAsync(resourceGroupName, clusterName, context).getSyncPoller();
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UpdateSystemServicesResponseInner> updateSystemServicesAsync(
        String resourceGroupName, String clusterName) {
        return beginUpdateSystemServicesAsync(resourceGroupName, clusterName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UpdateSystemServicesResponseInner> updateSystemServicesAsync(
        String resourceGroupName, String clusterName, Context context) {
        return beginUpdateSystemServicesAsync(resourceGroupName, clusterName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdateSystemServicesResponseInner updateSystemServices(String resourceGroupName, String clusterName) {
        return updateSystemServicesAsync(resourceGroupName, clusterName).block();
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdateSystemServicesResponseInner updateSystemServices(
        String resourceGroupName, String clusterName, Context context) {
        return updateSystemServicesAsync(resourceGroupName, clusterName, context).block();
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OperationalizationClusterInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, String skiptoken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            skiptoken,
                            accept,
                            context))
            .<PagedResponse<OperationalizationClusterInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OperationalizationClusterInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, String skiptoken, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                skiptoken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OperationalizationClusterInner> listByResourceGroupAsync(
        String resourceGroupName, String skiptoken) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, skiptoken),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OperationalizationClusterInner> listByResourceGroupAsync(String resourceGroupName) {
        final String skiptoken = null;
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, skiptoken),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OperationalizationClusterInner> listByResourceGroupAsync(
        String resourceGroupName, String skiptoken, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, skiptoken, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OperationalizationClusterInner> listByResourceGroup(String resourceGroupName) {
        final String skiptoken = null;
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, skiptoken));
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the clusters in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OperationalizationClusterInner> listByResourceGroup(
        String resourceGroupName, String skiptoken, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, skiptoken, context));
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OperationalizationClusterInner>> listSinglePageAsync(String skiptoken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            skiptoken,
                            accept,
                            context))
            .<PagedResponse<OperationalizationClusterInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OperationalizationClusterInner>> listSinglePageAsync(String skiptoken, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                skiptoken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OperationalizationClusterInner> listAsync(String skiptoken) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(skiptoken), nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OperationalizationClusterInner> listAsync() {
        final String skiptoken = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(skiptoken), nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OperationalizationClusterInner> listAsync(String skiptoken, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(skiptoken, context),
            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OperationalizationClusterInner> list() {
        final String skiptoken = null;
        return new PagedIterable<>(listAsync(skiptoken));
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operationalization clusters in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OperationalizationClusterInner> list(String skiptoken, Context context) {
        return new PagedIterable<>(listAsync(skiptoken, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paginated list of operationalization clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OperationalizationClusterInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<OperationalizationClusterInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paginated list of operationalization clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OperationalizationClusterInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paginated list of operationalization clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OperationalizationClusterInner>> listBySubscriptionIdNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<OperationalizationClusterInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paginated list of operationalization clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OperationalizationClusterInner>> listBySubscriptionIdNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
