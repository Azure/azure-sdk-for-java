// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningcompute.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearningcompute.fluent.models.OperationalizationClusterInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of OperationalizationCluster. */
public interface OperationalizationCluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the description property: The description of the cluster.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the createdOn property: The date and time when the cluster was created.
     *
     * @return the createdOn value.
     */
    OffsetDateTime createdOn();

    /**
     * Gets the modifiedOn property: The date and time when the cluster was last modified.
     *
     * @return the modifiedOn value.
     */
    OffsetDateTime modifiedOn();

    /**
     * Gets the provisioningState property: The provision state of the cluster. Valid values are Unknown, Updating,
     * Provisioning, Succeeded, and Failed.
     *
     * @return the provisioningState value.
     */
    OperationStatus provisioningState();

    /**
     * Gets the provisioningErrors property: List of provisioning errors reported by the resource provider.
     *
     * @return the provisioningErrors value.
     */
    List<ManagementError> provisioningErrors();

    /**
     * Gets the clusterType property: The cluster type.
     *
     * @return the clusterType value.
     */
    ClusterType clusterType();

    /**
     * Gets the storageAccount property: Storage Account properties.
     *
     * @return the storageAccount value.
     */
    StorageAccountProperties storageAccount();

    /**
     * Gets the containerRegistry property: Container Registry properties.
     *
     * @return the containerRegistry value.
     */
    ContainerRegistryProperties containerRegistry();

    /**
     * Gets the containerService property: Parameters for the Azure Container Service cluster.
     *
     * @return the containerService value.
     */
    AcsClusterProperties containerService();

    /**
     * Gets the appInsights property: AppInsights configuration.
     *
     * @return the appInsights value.
     */
    AppInsightsProperties appInsights();

    /**
     * Gets the globalServiceConfiguration property: Contains global configuration for the web services in the cluster.
     *
     * @return the globalServiceConfiguration value.
     */
    GlobalServiceConfiguration globalServiceConfiguration();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.machinelearningcompute.fluent.models.OperationalizationClusterInner
     * object.
     *
     * @return the inner object.
     */
    OperationalizationClusterInner innerModel();

    /** The entirety of the OperationalizationCluster definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The OperationalizationCluster definition stages. */
    interface DefinitionStages {
        /** The first stage of the OperationalizationCluster definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the OperationalizationCluster definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of the resource group in which the cluster is located.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the OperationalizationCluster definition which contains all the minimum required properties for
         * the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithDescription,
                DefinitionStages.WithClusterType,
                DefinitionStages.WithStorageAccount,
                DefinitionStages.WithContainerRegistry,
                DefinitionStages.WithContainerService,
                DefinitionStages.WithAppInsights,
                DefinitionStages.WithGlobalServiceConfiguration {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            OperationalizationCluster create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            OperationalizationCluster create(Context context);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The description of the cluster..
             *
             * @param description The description of the cluster.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify clusterType. */
        interface WithClusterType {
            /**
             * Specifies the clusterType property: The cluster type..
             *
             * @param clusterType The cluster type.
             * @return the next definition stage.
             */
            WithCreate withClusterType(ClusterType clusterType);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify storageAccount. */
        interface WithStorageAccount {
            /**
             * Specifies the storageAccount property: Storage Account properties..
             *
             * @param storageAccount Storage Account properties.
             * @return the next definition stage.
             */
            WithCreate withStorageAccount(StorageAccountProperties storageAccount);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify containerRegistry. */
        interface WithContainerRegistry {
            /**
             * Specifies the containerRegistry property: Container Registry properties..
             *
             * @param containerRegistry Container Registry properties.
             * @return the next definition stage.
             */
            WithCreate withContainerRegistry(ContainerRegistryProperties containerRegistry);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify containerService. */
        interface WithContainerService {
            /**
             * Specifies the containerService property: Parameters for the Azure Container Service cluster..
             *
             * @param containerService Parameters for the Azure Container Service cluster.
             * @return the next definition stage.
             */
            WithCreate withContainerService(AcsClusterProperties containerService);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify appInsights. */
        interface WithAppInsights {
            /**
             * Specifies the appInsights property: AppInsights configuration..
             *
             * @param appInsights AppInsights configuration.
             * @return the next definition stage.
             */
            WithCreate withAppInsights(AppInsightsProperties appInsights);
        }
        /** The stage of the OperationalizationCluster definition allowing to specify globalServiceConfiguration. */
        interface WithGlobalServiceConfiguration {
            /**
             * Specifies the globalServiceConfiguration property: Contains global configuration for the web services in
             * the cluster..
             *
             * @param globalServiceConfiguration Contains global configuration for the web services in the cluster.
             * @return the next definition stage.
             */
            WithCreate withGlobalServiceConfiguration(GlobalServiceConfiguration globalServiceConfiguration);
        }
    }
    /**
     * Begins update for the OperationalizationCluster resource.
     *
     * @return the stage of resource update.
     */
    OperationalizationCluster.Update update();

    /** The template for OperationalizationCluster update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        OperationalizationCluster apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        OperationalizationCluster apply(Context context);
    }
    /** The OperationalizationCluster update stages. */
    interface UpdateStages {
        /** The stage of the OperationalizationCluster update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Gets or sets a list of key value pairs that describe the resource. These
             * tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can
             * be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value
             * no greater in length than 256 characters..
             *
             * @param tags Gets or sets a list of key value pairs that describe the resource. These tags can be used in
             *     viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for
             *     a resource. Each tag must have a key no greater in length than 128 characters and a value no greater
             *     in length than 256 characters.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    OperationalizationCluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    OperationalizationCluster refresh(Context context);

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    OperationalizationClusterCredentials listKeys();

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running
     * operation because it fetches keys from dependencies.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the credentials for the specified cluster such as Storage, ACR and ACS credentials.
     */
    Response<OperationalizationClusterCredentials> listKeysWithResponse(Context context);

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    CheckSystemServicesUpdatesAvailableResponse checkSystemServicesUpdatesAvailable();

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about updates available for system services in a cluster.
     */
    Response<CheckSystemServicesUpdatesAvailableResponse> checkSystemServicesUpdatesAvailableWithResponse(
        Context context);

    /**
     * Updates system services in a cluster.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    UpdateSystemServicesResponse updateSystemServices();

    /**
     * Updates system services in a cluster.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of the update system services API.
     */
    UpdateSystemServicesResponse updateSystemServices(Context context);
}
