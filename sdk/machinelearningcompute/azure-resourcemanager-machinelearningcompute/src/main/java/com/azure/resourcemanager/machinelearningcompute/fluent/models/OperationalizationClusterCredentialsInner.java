// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearningcompute.models.AppInsightsCredentials;
import com.azure.resourcemanager.machinelearningcompute.models.ContainerRegistryCredentials;
import com.azure.resourcemanager.machinelearningcompute.models.ContainerServiceCredentials;
import com.azure.resourcemanager.machinelearningcompute.models.ServiceAuthConfiguration;
import com.azure.resourcemanager.machinelearningcompute.models.SslConfiguration;
import com.azure.resourcemanager.machinelearningcompute.models.StorageAccountCredentials;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Credentials to resources in the cluster. */
@Fluent
public final class OperationalizationClusterCredentialsInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OperationalizationClusterCredentialsInner.class);

    /*
     * Credentials for the Storage Account.
     */
    @JsonProperty(value = "storageAccount")
    private StorageAccountCredentials storageAccount;

    /*
     * Credentials for Azure Container Registry.
     */
    @JsonProperty(value = "containerRegistry")
    private ContainerRegistryCredentials containerRegistry;

    /*
     * Credentials for Azure Container Service.
     */
    @JsonProperty(value = "containerService")
    private ContainerServiceCredentials containerService;

    /*
     * Credentials for Azure AppInsights.
     */
    @JsonProperty(value = "appInsights")
    private AppInsightsCredentials appInsights;

    /*
     * Global authorization keys for all user services deployed in cluster.
     * These are used if the service does not have auth keys.
     */
    @JsonProperty(value = "serviceAuthConfiguration")
    private ServiceAuthConfiguration serviceAuthConfiguration;

    /*
     * The SSL configuration for the services.
     */
    @JsonProperty(value = "sslConfiguration")
    private SslConfiguration sslConfiguration;

    /**
     * Get the storageAccount property: Credentials for the Storage Account.
     *
     * @return the storageAccount value.
     */
    public StorageAccountCredentials storageAccount() {
        return this.storageAccount;
    }

    /**
     * Set the storageAccount property: Credentials for the Storage Account.
     *
     * @param storageAccount the storageAccount value to set.
     * @return the OperationalizationClusterCredentialsInner object itself.
     */
    public OperationalizationClusterCredentialsInner withStorageAccount(StorageAccountCredentials storageAccount) {
        this.storageAccount = storageAccount;
        return this;
    }

    /**
     * Get the containerRegistry property: Credentials for Azure Container Registry.
     *
     * @return the containerRegistry value.
     */
    public ContainerRegistryCredentials containerRegistry() {
        return this.containerRegistry;
    }

    /**
     * Set the containerRegistry property: Credentials for Azure Container Registry.
     *
     * @param containerRegistry the containerRegistry value to set.
     * @return the OperationalizationClusterCredentialsInner object itself.
     */
    public OperationalizationClusterCredentialsInner withContainerRegistry(
        ContainerRegistryCredentials containerRegistry) {
        this.containerRegistry = containerRegistry;
        return this;
    }

    /**
     * Get the containerService property: Credentials for Azure Container Service.
     *
     * @return the containerService value.
     */
    public ContainerServiceCredentials containerService() {
        return this.containerService;
    }

    /**
     * Set the containerService property: Credentials for Azure Container Service.
     *
     * @param containerService the containerService value to set.
     * @return the OperationalizationClusterCredentialsInner object itself.
     */
    public OperationalizationClusterCredentialsInner withContainerService(
        ContainerServiceCredentials containerService) {
        this.containerService = containerService;
        return this;
    }

    /**
     * Get the appInsights property: Credentials for Azure AppInsights.
     *
     * @return the appInsights value.
     */
    public AppInsightsCredentials appInsights() {
        return this.appInsights;
    }

    /**
     * Set the appInsights property: Credentials for Azure AppInsights.
     *
     * @param appInsights the appInsights value to set.
     * @return the OperationalizationClusterCredentialsInner object itself.
     */
    public OperationalizationClusterCredentialsInner withAppInsights(AppInsightsCredentials appInsights) {
        this.appInsights = appInsights;
        return this;
    }

    /**
     * Get the serviceAuthConfiguration property: Global authorization keys for all user services deployed in cluster.
     * These are used if the service does not have auth keys.
     *
     * @return the serviceAuthConfiguration value.
     */
    public ServiceAuthConfiguration serviceAuthConfiguration() {
        return this.serviceAuthConfiguration;
    }

    /**
     * Set the serviceAuthConfiguration property: Global authorization keys for all user services deployed in cluster.
     * These are used if the service does not have auth keys.
     *
     * @param serviceAuthConfiguration the serviceAuthConfiguration value to set.
     * @return the OperationalizationClusterCredentialsInner object itself.
     */
    public OperationalizationClusterCredentialsInner withServiceAuthConfiguration(
        ServiceAuthConfiguration serviceAuthConfiguration) {
        this.serviceAuthConfiguration = serviceAuthConfiguration;
        return this;
    }

    /**
     * Get the sslConfiguration property: The SSL configuration for the services.
     *
     * @return the sslConfiguration value.
     */
    public SslConfiguration sslConfiguration() {
        return this.sslConfiguration;
    }

    /**
     * Set the sslConfiguration property: The SSL configuration for the services.
     *
     * @param sslConfiguration the sslConfiguration value to set.
     * @return the OperationalizationClusterCredentialsInner object itself.
     */
    public OperationalizationClusterCredentialsInner withSslConfiguration(SslConfiguration sslConfiguration) {
        this.sslConfiguration = sslConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageAccount() != null) {
            storageAccount().validate();
        }
        if (containerRegistry() != null) {
            containerRegistry().validate();
        }
        if (containerService() != null) {
            containerService().validate();
        }
        if (appInsights() != null) {
            appInsights().validate();
        }
        if (serviceAuthConfiguration() != null) {
            serviceAuthConfiguration().validate();
        }
        if (sslConfiguration() != null) {
            sslConfiguration().validate();
        }
    }
}
