// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotcentral.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotcentral.fluent.models.AppInner;
import com.azure.resourcemanager.iotcentral.models.AppSku;
import com.azure.resourcemanager.iotcentral.models.AppSkuInfo;
import com.azure.resourcemanager.iotcentral.models.NetworkAction;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSetIpRule;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSets;
import com.azure.resourcemanager.iotcentral.models.PublicNetworkAccess;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AppInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AppInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Creating\",\"applicationId\":\"uv\",\"displayName\":\"xpyb\",\"subdomain\":\"m\",\"template\":\"mtz\",\"state\":\"suspended\",\"publicNetworkAccess\":\"Disabled\",\"networkRuleSets\":{\"applyToDevices\":false,\"applyToIoTCentral\":false,\"defaultAction\":\"Deny\",\"ipRules\":[{\"action\":\"Allow\",\"filterName\":\"jhphoyc\",\"ipMask\":\"xaobhdxbmtqioqjz\"},{\"action\":\"Allow\",\"filterName\":\"muf\",\"ipMask\":\"wnoi\"}]},\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"ybqsoqijg\",\"dmbpazlobcufpdz\",\"rbt\"],\"privateEndpoint\":{\"id\":\"jnqglhqgnu\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"jywif\",\"actionsRequired\":\"esaagdfm\"},\"provisioningState\":\"Failed\"},\"id\":\"hjxri\",\"name\":\"kwm\",\"type\":\"vktsizntocipao\"},{\"properties\":{\"groupIds\":[\"s\",\"ucmpoyfd\",\"fogknygjofjdde\"],\"privateEndpoint\":{\"id\":\"deupewnwrei\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"flusarhmof\",\"actionsRequired\":\"hs\"},\"provisioningState\":\"Creating\"},\"id\":\"kdtmlxhekuk\",\"name\":\"jtxukcdm\",\"type\":\"arcryuanzwuxzdxt\"}]},\"sku\":{\"name\":\"ST1\"},\"identity\":{\"principalId\":\"a630be6c-827e-42ce-9e4e-397d7af0e508\",\"tenantId\":\"aa9c8b3b-b0bf-4f0d-8e3f-739d51cec1c9\",\"type\":\"None\"},\"location\":\"hfpmrqobmtukknr\",\"tags\":{\"mglzufcy\":\"ihfxtijbpzvgnwzs\",\"ufhfcbjysa\":\"kohdbiha\"},\"id\":\"ithxqhabifpi\",\"name\":\"xwczbyscnp\",\"type\":\"x\"}")
            .toObject(AppInner.class);
        Assertions.assertEquals("hfpmrqobmtukknr", model.location());
        Assertions.assertEquals("ihfxtijbpzvgnwzs", model.tags().get("mglzufcy"));
        Assertions.assertEquals(AppSku.ST1, model.sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("xpyb", model.displayName());
        Assertions.assertEquals("m", model.subdomain());
        Assertions.assertEquals("mtz", model.template());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals(false, model.networkRuleSets().applyToDevices());
        Assertions.assertEquals(false, model.networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.DENY, model.networkRuleSets().defaultAction());
        Assertions.assertEquals("jhphoyc", model.networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals("xaobhdxbmtqioqjz", model.networkRuleSets().ipRules().get(0).ipMask());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AppInner model
            = new AppInner().withLocation("hfpmrqobmtukknr")
                .withTags(mapOf("mglzufcy", "ihfxtijbpzvgnwzs", "ufhfcbjysa", "kohdbiha"))
                .withSku(new AppSkuInfo().withName(AppSku.ST1))
                .withIdentity(new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.NONE))
                .withDisplayName("xpyb")
                .withSubdomain("m")
                .withTemplate("mtz")
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                .withNetworkRuleSets(new NetworkRuleSets().withApplyToDevices(false)
                    .withApplyToIoTCentral(false)
                    .withDefaultAction(NetworkAction.DENY)
                    .withIpRules(Arrays.asList(
                        new NetworkRuleSetIpRule().withFilterName("jhphoyc").withIpMask("xaobhdxbmtqioqjz"),
                        new NetworkRuleSetIpRule().withFilterName("muf").withIpMask("wnoi"))));
        model = BinaryData.fromObject(model).toObject(AppInner.class);
        Assertions.assertEquals("hfpmrqobmtukknr", model.location());
        Assertions.assertEquals("ihfxtijbpzvgnwzs", model.tags().get("mglzufcy"));
        Assertions.assertEquals(AppSku.ST1, model.sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("xpyb", model.displayName());
        Assertions.assertEquals("m", model.subdomain());
        Assertions.assertEquals("mtz", model.template());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals(false, model.networkRuleSets().applyToDevices());
        Assertions.assertEquals(false, model.networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.DENY, model.networkRuleSets().defaultAction());
        Assertions.assertEquals("jhphoyc", model.networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals("xaobhdxbmtqioqjz", model.networkRuleSets().ipRules().get(0).ipMask());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
