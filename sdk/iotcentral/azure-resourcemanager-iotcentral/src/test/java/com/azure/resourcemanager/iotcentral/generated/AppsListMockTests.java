// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotcentral.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotcentral.IotCentralManager;
import com.azure.resourcemanager.iotcentral.models.App;
import com.azure.resourcemanager.iotcentral.models.AppSku;
import com.azure.resourcemanager.iotcentral.models.NetworkAction;
import com.azure.resourcemanager.iotcentral.models.PublicNetworkAccess;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"applicationId\":\"lvqhjkbegibtnmx\",\"displayName\":\"bwwaloa\",\"subdomain\":\"cgwrtzjuz\",\"template\":\"yzm\",\"state\":\"suspended\",\"publicNetworkAccess\":\"Disabled\",\"networkRuleSets\":{\"applyToDevices\":false,\"applyToIoTCentral\":false,\"defaultAction\":\"Deny\",\"ipRules\":[{\"action\":\"Allow\",\"filterName\":\"qpsrknftguvri\",\"ipMask\":\"prwmdyvxqt\"}]},\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"ro\",\"qbex\",\"mcqibycnojv\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"qsgzvahapj\",\"name\":\"zhpvgqzcjrvxd\",\"type\":\"zlmwlxkvugfhz\"},{\"properties\":{\"groupIds\":[\"jvzunluthnnp\",\"nxipeil\",\"jzuaejxdultskzbb\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"veekgpwozuhkfp\",\"name\":\"sjyofdx\",\"type\":\"uusdttouwa\"}]},\"sku\":{\"name\":\"ST1\"},\"identity\":{\"principalId\":\"163fabc1-8670-4c26-b735-d440e99f0417\",\"tenantId\":\"cd8cd0b5-efb7-45ab-abd6-52093c7c7511\",\"type\":\"None\"},\"location\":\"elnsmvbxw\",\"tags\":{\"jixisxyawjoyaqcs\":\"flhhcaal\",\"eli\":\"yjpkiidzyexz\"},\"id\":\"hnrztfol\",\"name\":\"bnxknalaulppg\",\"type\":\"dtpnapnyiropuhp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotCentralManager manager = IotCentralManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<App> response = manager.apps().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("elnsmvbxw", response.iterator().next().location());
        Assertions.assertEquals("flhhcaal", response.iterator().next().tags().get("jixisxyawjoyaqcs"));
        Assertions.assertEquals(AppSku.ST1, response.iterator().next().sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("bwwaloa", response.iterator().next().displayName());
        Assertions.assertEquals("cgwrtzjuz", response.iterator().next().subdomain());
        Assertions.assertEquals("yzm", response.iterator().next().template());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals(false, response.iterator().next().networkRuleSets().applyToDevices());
        Assertions.assertEquals(false, response.iterator().next().networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.DENY, response.iterator().next().networkRuleSets().defaultAction());
        Assertions.assertEquals("qpsrknftguvri",
            response.iterator().next().networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals("prwmdyvxqt", response.iterator().next().networkRuleSets().ipRules().get(0).ipMask());
    }
}
