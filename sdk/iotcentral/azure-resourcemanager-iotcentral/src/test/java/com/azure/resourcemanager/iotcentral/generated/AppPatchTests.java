// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotcentral.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotcentral.models.AppPatch;
import com.azure.resourcemanager.iotcentral.models.AppSku;
import com.azure.resourcemanager.iotcentral.models.AppSkuInfo;
import com.azure.resourcemanager.iotcentral.models.NetworkAction;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSetIpRule;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSets;
import com.azure.resourcemanager.iotcentral.models.PublicNetworkAccess;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AppPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AppPatch model = BinaryData.fromString(
            "{\"tags\":{\"kgiawxklryplwck\":\"niwpwcukj\",\"pnddhsgcbacphejk\":\"asy\",\"ndlik\":\"tynqgoul\",\"bmadgak\":\"yqkgfg\"},\"sku\":{\"name\":\"ST2\"},\"properties\":{\"provisioningState\":\"Canceled\",\"applicationId\":\"zqqedq\",\"displayName\":\"bciqfouflm\",\"subdomain\":\"kzsmodm\",\"template\":\"ougpbkwt\",\"state\":\"suspended\",\"publicNetworkAccess\":\"Enabled\",\"networkRuleSets\":{\"applyToDevices\":false,\"applyToIoTCentral\":true,\"defaultAction\":\"Deny\",\"ipRules\":[{\"action\":\"Allow\",\"filterName\":\"rtumkdosvq\",\"ipMask\":\"bmdg\"}]},\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"gmbmbexppbh\"],\"privateEndpoint\":{\"id\":\"rolfpfp\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"bquxigjy\",\"actionsRequired\":\"zjaoyfhrtxil\"},\"provisioningState\":\"Creating\"},\"id\":\"ujysvle\",\"name\":\"uvfqawrlyxwj\",\"type\":\"cpr\"},{\"properties\":{\"groupIds\":[\"xgjvtbv\"],\"privateEndpoint\":{\"id\":\"szdnr\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"uhmuouqfprwzwbn\",\"actionsRequired\":\"itnwuizgazxufi\"},\"provisioningState\":\"Creating\"},\"id\":\"y\",\"name\":\"i\",\"type\":\"rfidfvzwdz\"},{\"properties\":{\"groupIds\":[\"mwisdkfthwxmnt\",\"i\",\"aop\"],\"privateEndpoint\":{\"id\":\"ijcmmx\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"uf\",\"actionsRequired\":\"pymzidnsezcxtbzs\"},\"provisioningState\":\"Succeeded\"},\"id\":\"cs\",\"name\":\"ewmdw\",\"type\":\"jeiachboosfl\"}]},\"identity\":{\"principalId\":\"98719435-248b-45c4-9ec7-e8da5519770a\",\"tenantId\":\"a3f4f77c-692b-4343-82fe-e53917dc3849\",\"type\":\"None\"}}")
            .toObject(AppPatch.class);
        Assertions.assertEquals("niwpwcukj", model.tags().get("kgiawxklryplwck"));
        Assertions.assertEquals(AppSku.ST2, model.sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("bciqfouflm", model.displayName());
        Assertions.assertEquals("kzsmodm", model.subdomain());
        Assertions.assertEquals("ougpbkwt", model.template());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals(false, model.networkRuleSets().applyToDevices());
        Assertions.assertEquals(true, model.networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.DENY, model.networkRuleSets().defaultAction());
        Assertions.assertEquals("rtumkdosvq", model.networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals("bmdg", model.networkRuleSets().ipRules().get(0).ipMask());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AppPatch model = new AppPatch()
            .withTags(mapOf("kgiawxklryplwck", "niwpwcukj", "pnddhsgcbacphejk", "asy", "ndlik", "tynqgoul", "bmadgak",
                "yqkgfg"))
            .withSku(new AppSkuInfo().withName(AppSku.ST2))
            .withIdentity(new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.NONE))
            .withDisplayName("bciqfouflm")
            .withSubdomain("kzsmodm")
            .withTemplate("ougpbkwt")
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withNetworkRuleSets(new NetworkRuleSets().withApplyToDevices(false)
                .withApplyToIoTCentral(true)
                .withDefaultAction(NetworkAction.DENY)
                .withIpRules(
                    Arrays.asList(new NetworkRuleSetIpRule().withFilterName("rtumkdosvq").withIpMask("bmdg"))));
        model = BinaryData.fromObject(model).toObject(AppPatch.class);
        Assertions.assertEquals("niwpwcukj", model.tags().get("kgiawxklryplwck"));
        Assertions.assertEquals(AppSku.ST2, model.sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("bciqfouflm", model.displayName());
        Assertions.assertEquals("kzsmodm", model.subdomain());
        Assertions.assertEquals("ougpbkwt", model.template());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals(false, model.networkRuleSets().applyToDevices());
        Assertions.assertEquals(true, model.networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.DENY, model.networkRuleSets().defaultAction());
        Assertions.assertEquals("rtumkdosvq", model.networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals("bmdg", model.networkRuleSets().ipRules().get(0).ipMask());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
