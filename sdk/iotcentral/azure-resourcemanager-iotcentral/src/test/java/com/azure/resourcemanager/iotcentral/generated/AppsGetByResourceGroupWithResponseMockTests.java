// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotcentral.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotcentral.IotCentralManager;
import com.azure.resourcemanager.iotcentral.models.App;
import com.azure.resourcemanager.iotcentral.models.AppSku;
import com.azure.resourcemanager.iotcentral.models.NetworkAction;
import com.azure.resourcemanager.iotcentral.models.PublicNetworkAccess;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"applicationId\":\"mehhseyvjusrtsl\",\"displayName\":\"pkdeemaofmxagkvt\",\"subdomain\":\"lmqkrhahvlj\",\"template\":\"haquhcdh\",\"state\":\"suspended\",\"publicNetworkAccess\":\"Enabled\",\"networkRuleSets\":{\"applyToDevices\":true,\"applyToIoTCentral\":true,\"defaultAction\":\"Allow\",\"ipRules\":[{\"action\":\"Allow\",\"filterName\":\"rcrgvx\",\"ipMask\":\"gomz\"},{\"action\":\"Allow\",\"filterName\":\"sgwbnbbeld\",\"ipMask\":\"k\"},{\"action\":\"Allow\",\"filterName\":\"io\",\"ipMask\":\"qhakauhashsf\"},{\"action\":\"Allow\",\"filterName\":\"owzxcu\",\"ipMask\":\"cjooxdjebwpucwwf\"}]},\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"euecivyhzceuoj\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"ueiotwmcdyt\",\"name\":\"x\",\"type\":\"it\"},{\"properties\":{\"groupIds\":[\"awgqwgxhni\",\"kxfbkpycgklwndn\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"whvylw\",\"name\":\"btdhxujznbm\",\"type\":\"ow\"}]},\"sku\":{\"name\":\"ST0\"},\"identity\":{\"principalId\":\"2670e151-7034-4741-85b0-73a07b2dc435\",\"tenantId\":\"f3544ab2-66a2-4b58-840e-6e7d8dd4e7f7\",\"type\":\"SystemAssigned\"},\"location\":\"veual\",\"tags\":{\"xobbcswsrt\":\"mkh\"},\"id\":\"riplrbpbewtg\",\"name\":\"fgb\",\"type\":\"c\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotCentralManager manager = IotCentralManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        App response = manager.apps()
            .getByResourceGroupWithResponse("uzbpzkafku", "b", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("veual", response.location());
        Assertions.assertEquals("mkh", response.tags().get("xobbcswsrt"));
        Assertions.assertEquals(AppSku.ST0, response.sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("pkdeemaofmxagkvt", response.displayName());
        Assertions.assertEquals("lmqkrhahvlj", response.subdomain());
        Assertions.assertEquals("haquhcdh", response.template());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals(true, response.networkRuleSets().applyToDevices());
        Assertions.assertEquals(true, response.networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.ALLOW, response.networkRuleSets().defaultAction());
        Assertions.assertEquals("rcrgvx", response.networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals("gomz", response.networkRuleSets().ipRules().get(0).ipMask());
    }
}
