// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotcentral.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotcentral.IotCentralManager;
import com.azure.resourcemanager.iotcentral.models.App;
import com.azure.resourcemanager.iotcentral.models.AppSku;
import com.azure.resourcemanager.iotcentral.models.AppSkuInfo;
import com.azure.resourcemanager.iotcentral.models.NetworkAction;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSetIpRule;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSets;
import com.azure.resourcemanager.iotcentral.models.PublicNetworkAccess;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"applicationId\":\"kcbcue\",\"displayName\":\"jxgciqibrh\",\"subdomain\":\"xsdqrhzoymibmrqy\",\"template\":\"ahwfluszdtmhrk\",\"state\":\"created\",\"publicNetworkAccess\":\"Enabled\",\"networkRuleSets\":{\"applyToDevices\":false,\"applyToIoTCentral\":false,\"defaultAction\":\"Deny\",\"ipRules\":[{\"action\":\"Allow\",\"filterName\":\"giwbwoenwa\",\"ipMask\":\"rtdtkcnqxw\"},{\"action\":\"Allow\",\"filterName\":\"ulpiuj\",\"ipMask\":\"asipqiio\"},{\"action\":\"Allow\",\"filterName\":\"erpqlpqwcciuqg\",\"ipMask\":\"butauvfb\"}]},\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"mhykojoxafnndl\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"o\",\"name\":\"mkcdyhbpkkpwdre\",\"type\":\"novvqfovljxy\"},{\"properties\":{\"groupIds\":[\"syrsndsytgadgvra\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"qnzarrwl\",\"name\":\"uu\",\"type\":\"jfqka\"},{\"properties\":{\"groupIds\":[\"ipfpubji\",\"wwiftohqkvpuv\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"saknynfsyn\",\"name\":\"jphuopxodlqi\",\"type\":\"ntorzihleosjswsr\"},{\"properties\":{\"groupIds\":[\"zrpzb\",\"hckqqzqioxiy\",\"uiizynke\",\"yatrwy\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"zyh\",\"name\":\"itsmypyyn\",\"type\":\"cdpu\"}]},\"sku\":{\"name\":\"ST0\"},\"identity\":{\"principalId\":\"06c35330-cc63-41e7-bb47-42af3d465930\",\"tenantId\":\"33d2b125-7d30-4c1a-bd35-6aa0a4ce5603\",\"type\":\"None\"},\"location\":\"nmabik\",\"tags\":{\"dtlwwrlkd\":\"rgjhxb\",\"lxdy\":\"tncvokot\",\"tdtbnnhadooc\":\"gsyocogj\"},\"id\":\"kvci\",\"name\":\"hnvpamqgxq\",\"type\":\"u\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotCentralManager manager = IotCentralManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        App response = manager.apps()
            .define("lvwiwubmwmbesl")
            .withRegion("pdggkzzlvm")
            .withExistingResourceGroup("d")
            .withSku(new AppSkuInfo().withName(AppSku.ST2))
            .withTags(mapOf("wsbpfvm", "axmodfvuef", "yzvqt", "yhrfouyftaakcpw", "zksmondj", "nubexk", "whojvp",
                "quxvypomgkop"))
            .withIdentity(new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.NONE))
            .withDisplayName("aokonzmnsik")
            .withSubdomain("kqze")
            .withTemplate("kdltfzxmhhvhg")
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withNetworkRuleSets(new NetworkRuleSets().withApplyToDevices(true)
                .withApplyToIoTCentral(true)
                .withDefaultAction(NetworkAction.DENY)
                .withIpRules(
                    Arrays.asList(new NetworkRuleSetIpRule().withFilterName("dxbx").withIpMask("kbogqxndlkzgx"),
                        new NetworkRuleSetIpRule().withFilterName("plbpodxun").withIpMask("ebxmubyynt"),
                        new NetworkRuleSetIpRule().withFilterName("qtkoievs").withIpMask("tgqr"))))
            .create();

        Assertions.assertEquals("nmabik", response.location());
        Assertions.assertEquals("rgjhxb", response.tags().get("dtlwwrlkd"));
        Assertions.assertEquals(AppSku.ST0, response.sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("jxgciqibrh", response.displayName());
        Assertions.assertEquals("xsdqrhzoymibmrqy", response.subdomain());
        Assertions.assertEquals("ahwfluszdtmhrk", response.template());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals(false, response.networkRuleSets().applyToDevices());
        Assertions.assertEquals(false, response.networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.DENY, response.networkRuleSets().defaultAction());
        Assertions.assertEquals("giwbwoenwa", response.networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals("rtdtkcnqxw", response.networkRuleSets().ipRules().get(0).ipMask());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
