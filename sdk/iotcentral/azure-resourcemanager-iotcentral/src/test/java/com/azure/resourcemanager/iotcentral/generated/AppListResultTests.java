// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotcentral.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotcentral.fluent.models.AppInner;
import com.azure.resourcemanager.iotcentral.models.AppListResult;
import com.azure.resourcemanager.iotcentral.models.AppSku;
import com.azure.resourcemanager.iotcentral.models.AppSkuInfo;
import com.azure.resourcemanager.iotcentral.models.NetworkAction;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSetIpRule;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSets;
import com.azure.resourcemanager.iotcentral.models.PublicNetworkAccess;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AppListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AppListResult model = BinaryData.fromString(
            "{\"nextLink\":\"pteehzzv\",\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"applicationId\":\"z\",\"displayName\":\"pvswjdkirso\",\"subdomain\":\"qxhcrmn\",\"template\":\"jtckwhdso\",\"state\":\"created\",\"publicNetworkAccess\":\"Enabled\",\"networkRuleSets\":{\"applyToDevices\":true,\"applyToIoTCentral\":true,\"defaultAction\":\"Allow\",\"ipRules\":[{}]},\"privateEndpointConnections\":[{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"orcjxvsnby\",\"name\":\"qabnmoc\",\"type\":\"cyshurzafbljjgp\"},{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"qcjm\",\"name\":\"ljavbqid\",\"type\":\"qajzyulpkudjkr\"},{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"bzhfepgzgqexz\",\"name\":\"ocxscpaierhhbcs\",\"type\":\"l\"},{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"a\",\"name\":\"tjaodxobnb\",\"type\":\"xkqpxo\"}]},\"sku\":{\"name\":\"ST0\"},\"identity\":{\"principalId\":\"392f9d05-7f21-4806-a601-439703229b1e\",\"tenantId\":\"29c44644-b0d5-4404-88c7-6c463693f34e\",\"type\":\"None\"},\"location\":\"imexgstxgcpodgma\",\"tags\":{\"whijcoejctbza\":\"mvdjwzrlovmc\"},\"id\":\"s\",\"name\":\"sycbkbfk\",\"type\":\"ukdkexxppofmxa\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"applicationId\":\"gddtocj\",\"displayName\":\"hvpmoue\",\"subdomain\":\"dzxibqeojnxqbzvd\",\"template\":\"t\",\"state\":\"suspended\",\"publicNetworkAccess\":\"Disabled\",\"networkRuleSets\":{\"applyToDevices\":true,\"applyToIoTCentral\":false,\"defaultAction\":\"Allow\",\"ipRules\":[{},{}]},\"privateEndpointConnections\":[{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"rhcffcydd\",\"name\":\"lmjthjq\",\"type\":\"wpyeicxmqciwqvh\"},{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"xuigdtopbobj\",\"name\":\"ghmewuam\",\"type\":\"uhrzayvvt\"},{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"dfgiot\",\"name\":\"ftutqxlngxlefgu\",\"type\":\"nxkrx\"},{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"i\",\"name\":\"tthzrvqd\",\"type\":\"abhjybi\"}]},\"sku\":{\"name\":\"ST0\"},\"identity\":{\"principalId\":\"0bf23cd1-fc0d-440a-96b3-65773230bd98\",\"tenantId\":\"dcb5478a-8098-4d67-9197-d35a5c0e4fd9\",\"type\":\"SystemAssigned\"},\"location\":\"owskanyktz\",\"tags\":{\"gpphrcgyn\":\"iywgqywgndrvynh\"},\"id\":\"ocpecfvmmco\",\"name\":\"fsxlzevgbmqjqa\",\"type\":\"c\"}]}")
            .toObject(AppListResult.class);
        Assertions.assertEquals("pteehzzv", model.nextLink());
        Assertions.assertEquals("imexgstxgcpodgma", model.value().get(0).location());
        Assertions.assertEquals("mvdjwzrlovmc", model.value().get(0).tags().get("whijcoejctbza"));
        Assertions.assertEquals(AppSku.ST0, model.value().get(0).sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("pvswjdkirso", model.value().get(0).displayName());
        Assertions.assertEquals("qxhcrmn", model.value().get(0).subdomain());
        Assertions.assertEquals("jtckwhdso", model.value().get(0).template());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(true, model.value().get(0).networkRuleSets().applyToDevices());
        Assertions.assertEquals(true, model.value().get(0).networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.ALLOW, model.value().get(0).networkRuleSets().defaultAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AppListResult model
            = new AppListResult().withNextLink("pteehzzv")
                .withValue(
                    Arrays
                        .asList(
                            new AppInner().withLocation("imexgstxgcpodgma")
                                .withTags(mapOf("whijcoejctbza", "mvdjwzrlovmc"))
                                .withSku(new AppSkuInfo().withName(AppSku.ST0))
                                .withIdentity(new SystemAssignedServiceIdentity()
                                    .withType(SystemAssignedServiceIdentityType.NONE))
                                .withDisplayName("pvswjdkirso")
                                .withSubdomain("qxhcrmn")
                                .withTemplate("jtckwhdso")
                                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                                .withNetworkRuleSets(new NetworkRuleSets()
                                    .withApplyToDevices(true)
                                    .withApplyToIoTCentral(true)
                                    .withDefaultAction(NetworkAction.ALLOW)
                                    .withIpRules(Arrays.asList(new NetworkRuleSetIpRule()))),
                            new AppInner().withLocation("owskanyktz")
                                .withTags(mapOf("gpphrcgyn", "iywgqywgndrvynh"))
                                .withSku(new AppSkuInfo().withName(AppSku.ST0))
                                .withIdentity(new SystemAssignedServiceIdentity()
                                    .withType(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED))
                                .withDisplayName("hvpmoue")
                                .withSubdomain("dzxibqeojnxqbzvd")
                                .withTemplate("t")
                                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                                .withNetworkRuleSets(new NetworkRuleSets().withApplyToDevices(true)
                                    .withApplyToIoTCentral(false)
                                    .withDefaultAction(NetworkAction.ALLOW)
                                    .withIpRules(
                                        Arrays.asList(new NetworkRuleSetIpRule(), new NetworkRuleSetIpRule())))));
        model = BinaryData.fromObject(model).toObject(AppListResult.class);
        Assertions.assertEquals("pteehzzv", model.nextLink());
        Assertions.assertEquals("imexgstxgcpodgma", model.value().get(0).location());
        Assertions.assertEquals("mvdjwzrlovmc", model.value().get(0).tags().get("whijcoejctbza"));
        Assertions.assertEquals(AppSku.ST0, model.value().get(0).sku().name());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("pvswjdkirso", model.value().get(0).displayName());
        Assertions.assertEquals("qxhcrmn", model.value().get(0).subdomain());
        Assertions.assertEquals("jtckwhdso", model.value().get(0).template());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(true, model.value().get(0).networkRuleSets().applyToDevices());
        Assertions.assertEquals(true, model.value().get(0).networkRuleSets().applyToIoTCentral());
        Assertions.assertEquals(NetworkAction.ALLOW, model.value().get(0).networkRuleSets().defaultAction());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
