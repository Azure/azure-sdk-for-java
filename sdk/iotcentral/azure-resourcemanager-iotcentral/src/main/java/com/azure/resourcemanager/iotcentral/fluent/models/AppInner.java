// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotcentral.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotcentral.models.AppSkuInfo;
import com.azure.resourcemanager.iotcentral.models.AppState;
import com.azure.resourcemanager.iotcentral.models.NetworkRuleSets;
import com.azure.resourcemanager.iotcentral.models.ProvisioningState;
import com.azure.resourcemanager.iotcentral.models.PublicNetworkAccess;
import com.azure.resourcemanager.iotcentral.models.SystemAssignedServiceIdentity;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The IoT Central application.
 */
@Fluent
public final class AppInner extends Resource {
    /*
     * The common properties of an IoT Central application.
     */
    private AppProperties innerProperties;

    /*
     * A valid instance SKU.
     */
    private AppSkuInfo sku;

    /*
     * The managed identities for the IoT Central application.
     */
    private SystemAssignedServiceIdentity identity;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AppInner class.
     */
    public AppInner() {
    }

    /**
     * Get the innerProperties property: The common properties of an IoT Central application.
     * 
     * @return the innerProperties value.
     */
    private AppProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the sku property: A valid instance SKU.
     * 
     * @return the sku value.
     */
    public AppSkuInfo sku() {
        return this.sku;
    }

    /**
     * Set the sku property: A valid instance SKU.
     * 
     * @param sku the sku value to set.
     * @return the AppInner object itself.
     */
    public AppInner withSku(AppSkuInfo sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the identity property: The managed identities for the IoT Central application.
     * 
     * @return the identity value.
     */
    public SystemAssignedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed identities for the IoT Central application.
     * 
     * @param identity the identity value to set.
     * @return the AppInner object itself.
     */
    public AppInner withIdentity(SystemAssignedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the application.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the applicationId property: The ID of the application.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.innerProperties() == null ? null : this.innerProperties().applicationId();
    }

    /**
     * Get the displayName property: The display name of the application.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the application.
     * 
     * @param displayName the displayName value to set.
     * @return the AppInner object itself.
     */
    public AppInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the subdomain property: The subdomain of the application.
     * 
     * @return the subdomain value.
     */
    public String subdomain() {
        return this.innerProperties() == null ? null : this.innerProperties().subdomain();
    }

    /**
     * Set the subdomain property: The subdomain of the application.
     * 
     * @param subdomain the subdomain value to set.
     * @return the AppInner object itself.
     */
    public AppInner withSubdomain(String subdomain) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppProperties();
        }
        this.innerProperties().withSubdomain(subdomain);
        return this;
    }

    /**
     * Get the template property: The ID of the application template, which is a blueprint that defines the
     * characteristics and behaviors of an application. Optional; if not specified, defaults to a blank blueprint and
     * allows the application to be defined from scratch.
     * 
     * @return the template value.
     */
    public String template() {
        return this.innerProperties() == null ? null : this.innerProperties().template();
    }

    /**
     * Set the template property: The ID of the application template, which is a blueprint that defines the
     * characteristics and behaviors of an application. Optional; if not specified, defaults to a blank blueprint and
     * allows the application to be defined from scratch.
     * 
     * @param template the template value to set.
     * @return the AppInner object itself.
     */
    public AppInner withTemplate(String template) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppProperties();
        }
        this.innerProperties().withTemplate(template);
        return this;
    }

    /**
     * Get the state property: The current state of the application.
     * 
     * @return the state value.
     */
    public AppState state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the publicNetworkAccess property: Whether requests from the public network are allowed.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerProperties() == null ? null : this.innerProperties().publicNetworkAccess();
    }

    /**
     * Set the publicNetworkAccess property: Whether requests from the public network are allowed.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the AppInner object itself.
     */
    public AppInner withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppProperties();
        }
        this.innerProperties().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * Get the networkRuleSets property: Network Rule Set Properties of this IoT Central application.
     * 
     * @return the networkRuleSets value.
     */
    public NetworkRuleSets networkRuleSets() {
        return this.innerProperties() == null ? null : this.innerProperties().networkRuleSets();
    }

    /**
     * Set the networkRuleSets property: Network Rule Set Properties of this IoT Central application.
     * 
     * @param networkRuleSets the networkRuleSets value to set.
     * @return the AppInner object itself.
     */
    public AppInner withNetworkRuleSets(NetworkRuleSets networkRuleSets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppProperties();
        }
        this.innerProperties().withNetworkRuleSets(networkRuleSets);
        return this;
    }

    /**
     * Get the privateEndpointConnections property: Private endpoint connections created on this IoT Central
     * application.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().privateEndpointConnections();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (sku() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property sku in model AppInner"));
        } else {
            sku().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AppInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AppInner.
     */
    public static AppInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppInner deserializedAppInner = new AppInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAppInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAppInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAppInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAppInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAppInner.withTags(tags);
                } else if ("sku".equals(fieldName)) {
                    deserializedAppInner.sku = AppSkuInfo.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedAppInner.innerProperties = AppProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedAppInner.identity = SystemAssignedServiceIdentity.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAppInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppInner;
        });
    }
}
