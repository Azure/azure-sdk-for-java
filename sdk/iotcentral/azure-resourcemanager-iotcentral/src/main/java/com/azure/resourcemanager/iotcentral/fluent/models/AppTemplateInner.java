// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotcentral.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotcentral.models.AppTemplateLocations;
import java.io.IOException;
import java.util.List;

/**
 * IoT Central Application Template.
 */
@Immutable
public final class AppTemplateInner implements JsonSerializable<AppTemplateInner> {
    /*
     * The ID of the template.
     */
    private String manifestId;

    /*
     * The version of the template.
     */
    private String manifestVersion;

    /*
     * The name of the template.
     */
    private String name;

    /*
     * The title of the template.
     */
    private String title;

    /*
     * The order of the template in the templates list.
     */
    private Float order;

    /*
     * The description of the template.
     */
    private String description;

    /*
     * The industry of the template.
     */
    private String industry;

    /*
     * A list of locations that support the template.
     */
    private List<AppTemplateLocations> locations;

    /**
     * Creates an instance of AppTemplateInner class.
     */
    public AppTemplateInner() {
    }

    /**
     * Get the manifestId property: The ID of the template.
     * 
     * @return the manifestId value.
     */
    public String manifestId() {
        return this.manifestId;
    }

    /**
     * Get the manifestVersion property: The version of the template.
     * 
     * @return the manifestVersion value.
     */
    public String manifestVersion() {
        return this.manifestVersion;
    }

    /**
     * Get the name property: The name of the template.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the title property: The title of the template.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the order property: The order of the template in the templates list.
     * 
     * @return the order value.
     */
    public Float order() {
        return this.order;
    }

    /**
     * Get the description property: The description of the template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the industry property: The industry of the template.
     * 
     * @return the industry value.
     */
    public String industry() {
        return this.industry;
    }

    /**
     * Get the locations property: A list of locations that support the template.
     * 
     * @return the locations value.
     */
    public List<AppTemplateLocations> locations() {
        return this.locations;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locations() != null) {
            locations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppTemplateInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppTemplateInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AppTemplateInner.
     */
    public static AppTemplateInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppTemplateInner deserializedAppTemplateInner = new AppTemplateInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("manifestId".equals(fieldName)) {
                    deserializedAppTemplateInner.manifestId = reader.getString();
                } else if ("manifestVersion".equals(fieldName)) {
                    deserializedAppTemplateInner.manifestVersion = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAppTemplateInner.name = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedAppTemplateInner.title = reader.getString();
                } else if ("order".equals(fieldName)) {
                    deserializedAppTemplateInner.order = reader.getNullable(JsonReader::getFloat);
                } else if ("description".equals(fieldName)) {
                    deserializedAppTemplateInner.description = reader.getString();
                } else if ("industry".equals(fieldName)) {
                    deserializedAppTemplateInner.industry = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<AppTemplateLocations> locations
                        = reader.readArray(reader1 -> AppTemplateLocations.fromJson(reader1));
                    deserializedAppTemplateInner.locations = locations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppTemplateInner;
        });
    }
}
