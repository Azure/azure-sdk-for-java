// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.digitaltwins.AzureDigitalTwinsManager;
import com.azure.resourcemanager.digitaltwins.models.PrivateEndpointConnectionsResponse;
import com.azure.resourcemanager.digitaltwins.models.PrivateLinkServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Disconnected\",\"privateEndpoint\":{\"id\":\"ojknio\"},\"groupIds\":[\"oebwnujhemms\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"kcrodtjinfw\",\"actionsRequired\":\"fltkacjv\"}},\"id\":\"kdlfoa\",\"name\":\"ggkfpagaowpul\",\"type\":\"qblylsyxkqj\"},{\"properties\":{\"provisioningState\":\"Approved\",\"privateEndpoint\":{\"id\":\"vti\"},\"groupIds\":[\"sdszue\",\"psbzkfzbeyvpn\",\"icvi\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"jjxd\",\"actionsRequired\":\"buukzclewyhml\"}},\"id\":\"aztz\",\"name\":\"ofncckwyfzqwhxxb\",\"type\":\"yq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureDigitalTwinsManager manager = AzureDigitalTwinsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnectionsResponse response = manager.privateEndpointConnections()
            .listWithResponse("ramxjezwlwnw", "uqlcvydy", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("oebwnujhemms", response.value().get(0).properties().groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.APPROVED,
            response.value().get(0).properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("kcrodtjinfw",
            response.value().get(0).properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("fltkacjv",
            response.value().get(0).properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
