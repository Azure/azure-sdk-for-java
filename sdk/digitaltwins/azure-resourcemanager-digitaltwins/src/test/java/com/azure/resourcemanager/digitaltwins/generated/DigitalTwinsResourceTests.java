// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsIdentity;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsIdentityType;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsResource;
import com.azure.resourcemanager.digitaltwins.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DigitalTwinsResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DigitalTwinsResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"principalId\":\"zzd\",\"tenantId\":\"qxhocdgeablgphut\",\"userAssignedIdentities\":{\"wcukjfkgiawxk\":{\"clientId\":\"vkaozwyiftyhxhur\",\"principalId\":\"ftyxolniw\"}}},\"location\":\"ypl\",\"tags\":{\"nddhsgcbacph\":\"basyy\",\"nqgoulzndli\":\"jkot\"},\"id\":\"wyqkgfgibm\",\"name\":\"dgak\",\"type\":\"qsrxybzqqed\"}")
            .toObject(DigitalTwinsResource.class);
        Assertions.assertEquals("ypl", model.location());
        Assertions.assertEquals("basyy", model.tags().get("nddhsgcbacph"));
        Assertions.assertEquals(DigitalTwinsIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DigitalTwinsResource model = new DigitalTwinsResource().withLocation("ypl")
            .withTags(mapOf("nddhsgcbacph", "basyy", "nqgoulzndli", "jkot"))
            .withIdentity(new DigitalTwinsIdentity().withType(DigitalTwinsIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("wcukjfkgiawxk", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DigitalTwinsResource.class);
        Assertions.assertEquals("ypl", model.location());
        Assertions.assertEquals("basyy", model.tags().get("nddhsgcbacph"));
        Assertions.assertEquals(DigitalTwinsIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
