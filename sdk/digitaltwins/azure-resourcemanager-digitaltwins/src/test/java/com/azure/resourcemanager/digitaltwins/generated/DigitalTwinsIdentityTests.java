// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsIdentity;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsIdentityType;
import com.azure.resourcemanager.digitaltwins.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DigitalTwinsIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DigitalTwinsIdentity model =
            BinaryData
                .fromString(
                    "{\"type\":\"UserAssigned\",\"principalId\":\"qvkoc\",\"tenantId\":\"jdkwtnhxbnjb\",\"userAssignedIdentities\":{\"xsabkyqdu\":{\"clientId\":\"rglssainqpj\",\"principalId\":\"zlljfmppeebvm\"},\"d\":{\"clientId\":\"itcjczdz\",\"principalId\":\"ndhkrw\"},\"usnhutje\":{\"clientId\":\"p\",\"principalId\":\"bdkvwrwjf\"}}}")
                .toObject(DigitalTwinsIdentity.class);
        Assertions.assertEquals(DigitalTwinsIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DigitalTwinsIdentity model =
            new DigitalTwinsIdentity()
                .withType(DigitalTwinsIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf(
                        "xsabkyqdu",
                        new UserAssignedIdentity(),
                        "d",
                        new UserAssignedIdentity(),
                        "usnhutje",
                        new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(DigitalTwinsIdentity.class);
        Assertions.assertEquals(DigitalTwinsIdentityType.USER_ASSIGNED, model.type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
