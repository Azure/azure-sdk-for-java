// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.digitaltwins.AzureDigitalTwinsManager;
import com.azure.resourcemanager.digitaltwins.models.IdentityType;
import com.azure.resourcemanager.digitaltwins.models.TimeSeriesDatabaseConnection;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TimeSeriesDatabaseConnectionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"connectionType\":\"TimeSeriesDatabaseConnectionProperties\",\"provisioningState\":\"Canceled\",\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"uhhziuiefozbhdm\"}},\"id\":\"l\",\"name\":\"zqhof\",\"type\":\"rmaequ\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureDigitalTwinsManager manager = AzureDigitalTwinsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<TimeSeriesDatabaseConnection> response
            = manager.timeSeriesDatabaseConnections().list("rdgrtw", "enuuzkopbm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.iterator().next().properties().identity().type());
        Assertions.assertEquals("uhhziuiefozbhdm",
            response.iterator().next().properties().identity().userAssignedIdentity());
    }
}
