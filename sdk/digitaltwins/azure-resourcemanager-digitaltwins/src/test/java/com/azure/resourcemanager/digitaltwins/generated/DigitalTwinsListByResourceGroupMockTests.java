// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.digitaltwins.AzureDigitalTwinsManager;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsDescription;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsIdentityType;
import com.azure.resourcemanager.digitaltwins.models.PrivateLinkServiceConnectionStatus;
import com.azure.resourcemanager.digitaltwins.models.PublicNetworkAccess;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DigitalTwinsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"createdTime\":\"2021-07-06T14:56:49Z\",\"lastUpdatedTime\":\"2021-05-07T21:35:27Z\",\"provisioningState\":\"Canceled\",\"hostName\":\"vetvt\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Pending\",\"privateEndpoint\":{},\"groupIds\":[\"mcbxvwvxysl\",\"bhsfxob\",\"ytkblmpew\",\"wfbkrvrns\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"q\"}},\"id\":\"hxcr\",\"name\":\"bfovasrruvwbhsq\",\"type\":\"sub\"},{\"properties\":{\"provisioningState\":\"Pending\",\"privateEndpoint\":{},\"groupIds\":[\"xb\",\"ybsrfbjfdtwss\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"tpvjzbexilzznfqq\"}},\"id\":\"wpmqt\",\"name\":\"ruoujmk\",\"type\":\"jhwqytjrybnw\"},{\"properties\":{\"provisioningState\":\"Disconnected\",\"privateEndpoint\":{},\"groupIds\":[\"jervnaenqpehi\",\"doy\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"fthnzdn\"}},\"id\":\"l\",\"name\":\"nayqi\",\"type\":\"ynduha\"}],\"publicNetworkAccess\":\"Enabled\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"umaq\",\"tenantId\":\"bgycduiertgccym\",\"userAssignedIdentities\":{\"yhz\":{\"clientId\":\"psslqlfmm\",\"principalId\":\"bbglzpswiydmc\"},\"od\":{\"clientId\":\"ss\",\"principalId\":\"bzmnvdfznud\"},\"hxsrzdzucersc\":{\"clientId\":\"zbn\",\"principalId\":\"lylpstdb\"}}},\"location\":\"t\",\"tags\":{\"tmweriofzpyq\":\"fiwjmygtdssls\",\"hhszh\":\"emwabnet\",\"lvwiwubmwmbesl\":\"d\"},\"id\":\"nkww\",\"name\":\"pp\",\"type\":\"flcxoga\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureDigitalTwinsManager manager = AzureDigitalTwinsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DigitalTwinsDescription> response
            = manager.digitalTwins().listByResourceGroup("qzvszjf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("t", response.iterator().next().location());
        Assertions.assertEquals("fiwjmygtdssls", response.iterator().next().tags().get("tmweriofzpyq"));
        Assertions.assertEquals(DigitalTwinsIdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("mcbxvwvxysl",
            response.iterator().next().privateEndpointConnections().get(0).properties().groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.DISCONNECTED,
            response.iterator()
                .next()
                .privateEndpointConnections()
                .get(0)
                .properties()
                .privateLinkServiceConnectionState()
                .status());
        Assertions.assertEquals("q",
            response.iterator()
                .next()
                .privateEndpointConnections()
                .get(0)
                .properties()
                .privateLinkServiceConnectionState()
                .description());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
    }
}
