// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsIdentity;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsIdentityType;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsPatchDescription;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsPatchProperties;
import com.azure.resourcemanager.digitaltwins.models.PublicNetworkAccess;
import com.azure.resourcemanager.digitaltwins.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DigitalTwinsPatchDescriptionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DigitalTwinsPatchDescription model = BinaryData.fromString(
            "{\"tags\":{\"gjvtbv\":\"b\",\"uouq\":\"ysszdnrujqguh\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"wbnguitnwui\",\"tenantId\":\"a\",\"userAssignedIdentities\":{\"nteiwaopv\":{\"clientId\":\"izuckyfihrfidfvz\",\"principalId\":\"zuhtymwisdkfthwx\"},\"mzidnsezcxtb\":{\"clientId\":\"ijcmmx\",\"principalId\":\"ufufsrp\"},\"jeiachboosfl\":{\"clientId\":\"gfycc\",\"principalId\":\"ewmdw\"}}},\"properties\":{\"publicNetworkAccess\":\"Disabled\"}}")
            .toObject(DigitalTwinsPatchDescription.class);
        Assertions.assertEquals("b", model.tags().get("gjvtbv"));
        Assertions.assertEquals(DigitalTwinsIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.properties().publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DigitalTwinsPatchDescription model = new DigitalTwinsPatchDescription()
            .withTags(mapOf("gjvtbv", "b", "uouq", "ysszdnrujqguh"))
            .withIdentity(new DigitalTwinsIdentity().withType(DigitalTwinsIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("nteiwaopv", new UserAssignedIdentity(), "mzidnsezcxtb",
                    new UserAssignedIdentity(), "jeiachboosfl", new UserAssignedIdentity())))
            .withProperties(new DigitalTwinsPatchProperties().withPublicNetworkAccess(PublicNetworkAccess.DISABLED));
        model = BinaryData.fromObject(model).toObject(DigitalTwinsPatchDescription.class);
        Assertions.assertEquals("b", model.tags().get("gjvtbv"));
        Assertions.assertEquals(DigitalTwinsIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
