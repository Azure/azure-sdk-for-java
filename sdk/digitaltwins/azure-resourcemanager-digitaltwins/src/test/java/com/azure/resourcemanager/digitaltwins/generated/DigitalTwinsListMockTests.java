// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.digitaltwins.AzureDigitalTwinsManager;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsDescription;
import com.azure.resourcemanager.digitaltwins.models.DigitalTwinsIdentityType;
import com.azure.resourcemanager.digitaltwins.models.PrivateLinkServiceConnectionStatus;
import com.azure.resourcemanager.digitaltwins.models.PublicNetworkAccess;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DigitalTwinsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"createdTime\":\"2020-12-27T06:38:54Z\",\"lastUpdatedTime\":\"2021-01-10T15:16:49Z\",\"provisioningState\":\"Canceled\",\"hostName\":\"xobbcswsrt\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Disconnected\",\"privateEndpoint\":{},\"groupIds\":[\"bewtghfg\",\"lcgwxzvlvqh\",\"kbegibt\",\"mxiebw\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"oayqc\"}},\"id\":\"rtzju\",\"name\":\"gwyzm\",\"type\":\"txon\"},{\"properties\":{\"provisioningState\":\"Pending\",\"privateEndpoint\":{},\"groupIds\":[\"jcbpwxqpsrknft\",\"uvriuhprwm\",\"yvxqtayriwwroy\",\"bexrmcq\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"cnojvknmefqsg\"}},\"id\":\"ah\",\"name\":\"pjyzhpv\",\"type\":\"qzcjrvxdj\"},{\"properties\":{\"provisioningState\":\"Approved\",\"privateEndpoint\":{},\"groupIds\":[\"kvugfhzovawjvzun\",\"uthnnprnxipeilpj\",\"uaejxdultsk\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"tdzumveekgpw\"}},\"id\":\"uh\",\"name\":\"fpbsjyofdxl\",\"type\":\"us\"},{\"properties\":{\"provisioningState\":\"Rejected\",\"privateEndpoint\":{},\"groupIds\":[\"aboekqv\",\"elnsmvbxw\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"flhhcaal\"}},\"id\":\"ixisxyawjoy\",\"name\":\"qcslyjpkiid\",\"type\":\"yexz\"}],\"publicNetworkAccess\":\"Disabled\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"rzt\",\"tenantId\":\"lhbnxkna\",\"userAssignedIdentities\":{\"pgylg\":{\"clientId\":\"ppg\",\"principalId\":\"tpnapnyiropuhpig\"},\"xgk\":{\"clientId\":\"itxmedjvcslynqww\",\"principalId\":\"wzz\"},\"oellwp\":{\"clientId\":\"mgucna\",\"principalId\":\"t\"},\"rhhuaopppcqeqx\":{\"clientId\":\"d\",\"principalId\":\"pfqbuaceopzf\"}}},\"location\":\"z\",\"tags\":{\"dmoizpostmg\":\"zxctobgb\",\"rmfqjhhkxbpvj\":\"cfbu\"},\"id\":\"mjh\",\"name\":\"xjyngudivk\",\"type\":\"tswb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureDigitalTwinsManager manager = AzureDigitalTwinsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DigitalTwinsDescription> response = manager.digitalTwins().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("z", response.iterator().next().location());
        Assertions.assertEquals("zxctobgb", response.iterator().next().tags().get("dmoizpostmg"));
        Assertions.assertEquals(DigitalTwinsIdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("bewtghfg",
            response.iterator().next().privateEndpointConnections().get(0).properties().groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.APPROVED,
            response.iterator()
                .next()
                .privateEndpointConnections()
                .get(0)
                .properties()
                .privateLinkServiceConnectionState()
                .status());
        Assertions.assertEquals("oayqc",
            response.iterator()
                .next()
                .privateEndpointConnections()
                .get(0)
                .properties()
                .privateLinkServiceConnectionState()
                .description());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().publicNetworkAccess());
    }
}
