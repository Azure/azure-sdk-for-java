// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.digitaltwins.AzureDigitalTwinsManager;
import com.azure.resourcemanager.digitaltwins.models.ConnectionProperties;
import com.azure.resourcemanager.digitaltwins.models.ConnectionPropertiesPrivateLinkServiceConnectionState;
import com.azure.resourcemanager.digitaltwins.models.PrivateEndpoint;
import com.azure.resourcemanager.digitaltwins.models.PrivateEndpointConnection;
import com.azure.resourcemanager.digitaltwins.models.PrivateLinkServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{\"id\":\"gsfraoyzkoow\"},\"groupIds\":[\"nguxawqaldsy\",\"uximerqfobw\",\"znkbykutwpfhpagm\",\"r\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"snfdsdoakgtdl\",\"actionsRequired\":\"kzevdlhewpusds\"}},\"id\":\"wvogvbbejdc\",\"name\":\"gqqmoakufgm\",\"type\":\"zr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureDigitalTwinsManager manager = AzureDigitalTwinsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("jcntuj")
            .withExistingDigitalTwinsInstance("tpuqujmq", "gkfbtndoaong")
            .withProperties(new ConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                .withGroupIds(Arrays.asList("ae", "kojvd", "pzfoqoui"))
                .withPrivateLinkServiceConnectionState(new ConnectionPropertiesPrivateLinkServiceConnectionState()
                    .withStatus(PrivateLinkServiceConnectionStatus.DISCONNECTED)
                    .withDescription("xarzgszufoxciq")
                    .withActionsRequired("idoamciodhkha")))
            .create();

        Assertions.assertEquals("nguxawqaldsy", response.properties().groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.DISCONNECTED,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("snfdsdoakgtdl",
            response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("kzevdlhewpusds",
            response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
