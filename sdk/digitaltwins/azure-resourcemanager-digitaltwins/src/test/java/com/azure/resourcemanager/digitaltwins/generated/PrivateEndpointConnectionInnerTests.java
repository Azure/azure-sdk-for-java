// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.digitaltwins.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.digitaltwins.models.ConnectionProperties;
import com.azure.resourcemanager.digitaltwins.models.ConnectionPropertiesPrivateLinkServiceConnectionState;
import com.azure.resourcemanager.digitaltwins.models.PrivateEndpoint;
import com.azure.resourcemanager.digitaltwins.models.PrivateLinkServiceConnectionStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Disconnected\",\"privateEndpoint\":{\"id\":\"luwfzitonpeqfpjk\"},\"groupIds\":[\"ofpdvh\",\"fxxypininmayhuy\",\"bkpodepooginuv\",\"mihe\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"arxzxtheot\",\"actionsRequired\":\"ivyevcciqihnhun\"}},\"id\":\"wjzrnfygxgisp\",\"name\":\"mvtzfkufub\",\"type\":\"jofxqe\"}")
            .toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("ofpdvh", model.properties().groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.DISCONNECTED,
            model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("arxzxtheot", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("ivyevcciqihnhun",
            model.properties().privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionInner model = new PrivateEndpointConnectionInner()
            .withProperties(new ConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                .withGroupIds(Arrays.asList("ofpdvh", "fxxypininmayhuy", "bkpodepooginuv", "mihe"))
                .withPrivateLinkServiceConnectionState(new ConnectionPropertiesPrivateLinkServiceConnectionState()
                    .withStatus(PrivateLinkServiceConnectionStatus.DISCONNECTED)
                    .withDescription("arxzxtheot")
                    .withActionsRequired("ivyevcciqihnhun")));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("ofpdvh", model.properties().groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.DISCONNECTED,
            model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("arxzxtheot", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("ivyevcciqihnhun",
            model.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
