// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.digitaltwins.models.ConnectionProperties;
import com.azure.resourcemanager.digitaltwins.models.ConnectionPropertiesPrivateLinkServiceConnectionState;
import com.azure.resourcemanager.digitaltwins.models.PrivateEndpoint;
import com.azure.resourcemanager.digitaltwins.models.PrivateLinkServiceConnectionStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Pending\",\"privateEndpoint\":{\"id\":\"qjhqjbas\"},\"groupIds\":[\"mjqulngsn\",\"nbybkzgcwrwcl\",\"xwrljdouskcqvkoc\",\"cjdkwtnhxbnjbi\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"rglssainqpj\",\"actionsRequired\":\"zlljfmppeebvm\"}}")
            .toObject(ConnectionProperties.class);
        Assertions.assertEquals("mjqulngsn", model.groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.DISCONNECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("rglssainqpj", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("zlljfmppeebvm", model.privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionProperties model = new ConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
            .withGroupIds(Arrays.asList("mjqulngsn", "nbybkzgcwrwcl", "xwrljdouskcqvkoc", "cjdkwtnhxbnjbi"))
            .withPrivateLinkServiceConnectionState(new ConnectionPropertiesPrivateLinkServiceConnectionState()
                .withStatus(PrivateLinkServiceConnectionStatus.DISCONNECTED)
                .withDescription("rglssainqpj")
                .withActionsRequired("zlljfmppeebvm"));
        model = BinaryData.fromObject(model).toObject(ConnectionProperties.class);
        Assertions.assertEquals("mjqulngsn", model.groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.DISCONNECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("rglssainqpj", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("zlljfmppeebvm", model.privateLinkServiceConnectionState().actionsRequired());
    }
}
