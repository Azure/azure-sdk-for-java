// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a time series database connection resource.
 */
@Fluent
public class TimeSeriesDatabaseConnectionProperties
    implements JsonSerializable<TimeSeriesDatabaseConnectionProperties> {
    /*
     * The type of time series connection resource.
     */
    private ConnectionType connectionType = ConnectionType.fromString("TimeSeriesDatabaseConnectionProperties");

    /*
     * The provisioning state.
     */
    private TimeSeriesDatabaseConnectionState provisioningState;

    /*
     * Managed identity properties for the time series database connection resource.
     */
    private ManagedIdentityReference identity;

    /**
     * Creates an instance of TimeSeriesDatabaseConnectionProperties class.
     */
    public TimeSeriesDatabaseConnectionProperties() {
    }

    /**
     * Get the connectionType property: The type of time series connection resource.
     * 
     * @return the connectionType value.
     */
    public ConnectionType connectionType() {
        return this.connectionType;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public TimeSeriesDatabaseConnectionState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the TimeSeriesDatabaseConnectionProperties object itself.
     */
    TimeSeriesDatabaseConnectionProperties withProvisioningState(TimeSeriesDatabaseConnectionState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the identity property: Managed identity properties for the time series database connection resource.
     * 
     * @return the identity value.
     */
    public ManagedIdentityReference identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed identity properties for the time series database connection resource.
     * 
     * @param identity the identity value to set.
     * @return the TimeSeriesDatabaseConnectionProperties object itself.
     */
    public TimeSeriesDatabaseConnectionProperties withIdentity(ManagedIdentityReference identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectionType",
            this.connectionType == null ? null : this.connectionType.toString());
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeSeriesDatabaseConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeSeriesDatabaseConnectionProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeSeriesDatabaseConnectionProperties.
     */
    public static TimeSeriesDatabaseConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("connectionType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureDataExplorer".equals(discriminatorValue)) {
                    return AzureDataExplorerConnectionProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static TimeSeriesDatabaseConnectionProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeSeriesDatabaseConnectionProperties deserializedTimeSeriesDatabaseConnectionProperties
                = new TimeSeriesDatabaseConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionType".equals(fieldName)) {
                    deserializedTimeSeriesDatabaseConnectionProperties.connectionType
                        = ConnectionType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedTimeSeriesDatabaseConnectionProperties.provisioningState
                        = TimeSeriesDatabaseConnectionState.fromString(reader.getString());
                } else if ("identity".equals(fieldName)) {
                    deserializedTimeSeriesDatabaseConnectionProperties.identity
                        = ManagedIdentityReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTimeSeriesDatabaseConnectionProperties;
        });
    }
}
