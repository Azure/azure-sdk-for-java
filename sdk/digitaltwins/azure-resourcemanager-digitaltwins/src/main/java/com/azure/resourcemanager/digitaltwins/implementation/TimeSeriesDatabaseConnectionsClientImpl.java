// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.digitaltwins.fluent.TimeSeriesDatabaseConnectionsClient;
import com.azure.resourcemanager.digitaltwins.fluent.models.TimeSeriesDatabaseConnectionInner;
import com.azure.resourcemanager.digitaltwins.models.CleanupConnectionArtifacts;
import com.azure.resourcemanager.digitaltwins.models.TimeSeriesDatabaseConnectionListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TimeSeriesDatabaseConnectionsClient. */
public final class TimeSeriesDatabaseConnectionsClientImpl implements TimeSeriesDatabaseConnectionsClient {
    /** The proxy service used to perform REST calls. */
    private final TimeSeriesDatabaseConnectionsService service;

    /** The service client containing this operation class. */
    private final AzureDigitalTwinsManagementClientImpl client;

    /**
     * Initializes an instance of TimeSeriesDatabaseConnectionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TimeSeriesDatabaseConnectionsClientImpl(AzureDigitalTwinsManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    TimeSeriesDatabaseConnectionsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureDigitalTwinsManagementClientTimeSeriesDatabaseConnections to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureDigitalTwinsMan")
    public interface TimeSeriesDatabaseConnectionsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/timeSeriesDatabaseConnections")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TimeSeriesDatabaseConnectionListResult>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/timeSeriesDatabaseConnections/{timeSeriesDatabaseConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TimeSeriesDatabaseConnectionInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName,
            @PathParam("timeSeriesDatabaseConnectionName") String timeSeriesDatabaseConnectionName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/timeSeriesDatabaseConnections/{timeSeriesDatabaseConnectionName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName,
            @PathParam("timeSeriesDatabaseConnectionName") String timeSeriesDatabaseConnectionName,
            @BodyParam("application/json") TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/timeSeriesDatabaseConnections/{timeSeriesDatabaseConnectionName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName,
            @PathParam("timeSeriesDatabaseConnectionName") String timeSeriesDatabaseConnectionName,
            @QueryParam("cleanupConnectionArtifacts") CleanupConnectionArtifacts cleanupConnectionArtifacts,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TimeSeriesDatabaseConnectionListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all existing time series database connections for this DigitalTwins instance along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TimeSeriesDatabaseConnectionInner>> listSinglePageAsync(
        String resourceGroupName, String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            resourceName,
                            accept,
                            context))
            .<PagedResponse<TimeSeriesDatabaseConnectionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all existing time series database connections for this DigitalTwins instance along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TimeSeriesDatabaseConnectionInner>> listSinglePageAsync(
        String resourceGroupName, String resourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                resourceName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all existing time series database connections for this DigitalTwins instance as paginated response with
     *     {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TimeSeriesDatabaseConnectionInner> listAsync(String resourceGroupName, String resourceName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, resourceName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all existing time series database connections for this DigitalTwins instance as paginated response with
     *     {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TimeSeriesDatabaseConnectionInner> listAsync(
        String resourceGroupName, String resourceName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, resourceName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all existing time series database connections for this DigitalTwins instance as paginated response with
     *     {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TimeSeriesDatabaseConnectionInner> list(String resourceGroupName, String resourceName) {
        return new PagedIterable<>(listAsync(resourceGroupName, resourceName));
    }

    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all existing time series database connections for this DigitalTwins instance as paginated response with
     *     {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TimeSeriesDatabaseConnectionInner> list(
        String resourceGroupName, String resourceName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, resourceName, context));
    }

    /**
     * Get the description of an existing time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of an existing time series database connection along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TimeSeriesDatabaseConnectionInner>> getWithResponseAsync(
        String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (timeSeriesDatabaseConnectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter timeSeriesDatabaseConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            resourceName,
                            timeSeriesDatabaseConnectionName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the description of an existing time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of an existing time series database connection along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TimeSeriesDatabaseConnectionInner>> getWithResponseAsync(
        String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (timeSeriesDatabaseConnectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter timeSeriesDatabaseConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                accept,
                context);
    }

    /**
     * Get the description of an existing time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of an existing time series database connection on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimeSeriesDatabaseConnectionInner> getAsync(
        String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName) {
        return getWithResponseAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the description of an existing time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of an existing time series database connection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TimeSeriesDatabaseConnectionInner> getWithResponse(
        String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName, Context context) {
        return getWithResponseAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, context).block();
    }

    /**
     * Get the description of an existing time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of an existing time series database connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimeSeriesDatabaseConnectionInner get(
        String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName) {
        return getWithResponse(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, Context.NONE)
            .getValue();
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (timeSeriesDatabaseConnectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter timeSeriesDatabaseConnectionName is required and cannot be null."));
        }
        if (timeSeriesDatabaseConnectionDescription == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter timeSeriesDatabaseConnectionDescription is required and cannot be null."));
        } else {
            timeSeriesDatabaseConnectionDescription.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            resourceName,
                            timeSeriesDatabaseConnectionName,
                            timeSeriesDatabaseConnectionDescription,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (timeSeriesDatabaseConnectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter timeSeriesDatabaseConnectionName is required and cannot be null."));
        }
        if (timeSeriesDatabaseConnectionDescription == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter timeSeriesDatabaseConnectionDescription is required and cannot be null."));
        } else {
            timeSeriesDatabaseConnectionDescription.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription,
                accept,
                context);
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner>
        beginCreateOrUpdateAsync(
            String resourceGroupName,
            String resourceName,
            String timeSeriesDatabaseConnectionName,
            TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription);
        return this
            .client
            .<TimeSeriesDatabaseConnectionInner, TimeSeriesDatabaseConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TimeSeriesDatabaseConnectionInner.class,
                TimeSeriesDatabaseConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner>
        beginCreateOrUpdateAsync(
            String resourceGroupName,
            String resourceName,
            String timeSeriesDatabaseConnectionName,
            TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription,
                context);
        return this
            .client
            .<TimeSeriesDatabaseConnectionInner, TimeSeriesDatabaseConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TimeSeriesDatabaseConnectionInner.class,
                TimeSeriesDatabaseConnectionInner.class,
                context);
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner>
        beginCreateOrUpdate(
            String resourceGroupName,
            String resourceName,
            String timeSeriesDatabaseConnectionName,
            TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription) {
        return this
            .beginCreateOrUpdateAsync(
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription)
            .getSyncPoller();
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner>
        beginCreateOrUpdate(
            String resourceGroupName,
            String resourceName,
            String timeSeriesDatabaseConnectionName,
            TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription,
            Context context) {
        return this
            .beginCreateOrUpdateAsync(
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription,
                context)
            .getSyncPoller();
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimeSeriesDatabaseConnectionInner> createOrUpdateAsync(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription) {
        return beginCreateOrUpdateAsync(
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimeSeriesDatabaseConnectionInner> createOrUpdateAsync(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription,
        Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription,
                context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimeSeriesDatabaseConnectionInner createOrUpdate(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription) {
        return createOrUpdateAsync(
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription)
            .block();
    }

    /**
     * Create or update a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimeSeriesDatabaseConnectionInner createOrUpdate(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        TimeSeriesDatabaseConnectionInner timeSeriesDatabaseConnectionDescription,
        Context context) {
        return createOrUpdateAsync(
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                timeSeriesDatabaseConnectionDescription,
                context)
            .block();
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param cleanupConnectionArtifacts Specifies whether or not to attempt to clean up artifacts that were created in
     *     order to establish a connection to the time series database. This is a best-effort attempt that will fail if
     *     appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        CleanupConnectionArtifacts cleanupConnectionArtifacts) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (timeSeriesDatabaseConnectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter timeSeriesDatabaseConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            resourceName,
                            timeSeriesDatabaseConnectionName,
                            cleanupConnectionArtifacts,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param cleanupConnectionArtifacts Specifies whether or not to attempt to clean up artifacts that were created in
     *     order to establish a connection to the time series database. This is a best-effort attempt that will fail if
     *     appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        CleanupConnectionArtifacts cleanupConnectionArtifacts,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (timeSeriesDatabaseConnectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter timeSeriesDatabaseConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                resourceName,
                timeSeriesDatabaseConnectionName,
                cleanupConnectionArtifacts,
                accept,
                context);
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param cleanupConnectionArtifacts Specifies whether or not to attempt to clean up artifacts that were created in
     *     order to establish a connection to the time series database. This is a best-effort attempt that will fail if
     *     appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner>
        beginDeleteAsync(
            String resourceGroupName,
            String resourceName,
            String timeSeriesDatabaseConnectionName,
            CleanupConnectionArtifacts cleanupConnectionArtifacts) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts);
        return this
            .client
            .<TimeSeriesDatabaseConnectionInner, TimeSeriesDatabaseConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TimeSeriesDatabaseConnectionInner.class,
                TimeSeriesDatabaseConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner>
        beginDeleteAsync(String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName) {
        final CleanupConnectionArtifacts cleanupConnectionArtifacts = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts);
        return this
            .client
            .<TimeSeriesDatabaseConnectionInner, TimeSeriesDatabaseConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TimeSeriesDatabaseConnectionInner.class,
                TimeSeriesDatabaseConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param cleanupConnectionArtifacts Specifies whether or not to attempt to clean up artifacts that were created in
     *     order to establish a connection to the time series database. This is a best-effort attempt that will fail if
     *     appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner>
        beginDeleteAsync(
            String resourceGroupName,
            String resourceName,
            String timeSeriesDatabaseConnectionName,
            CleanupConnectionArtifacts cleanupConnectionArtifacts,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts, context);
        return this
            .client
            .<TimeSeriesDatabaseConnectionInner, TimeSeriesDatabaseConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TimeSeriesDatabaseConnectionInner.class,
                TimeSeriesDatabaseConnectionInner.class,
                context);
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner> beginDelete(
        String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName) {
        final CleanupConnectionArtifacts cleanupConnectionArtifacts = null;
        return this
            .beginDeleteAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts)
            .getSyncPoller();
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param cleanupConnectionArtifacts Specifies whether or not to attempt to clean up artifacts that were created in
     *     order to establish a connection to the time series database. This is a best-effort attempt that will fail if
     *     appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<TimeSeriesDatabaseConnectionInner>, TimeSeriesDatabaseConnectionInner> beginDelete(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        CleanupConnectionArtifacts cleanupConnectionArtifacts,
        Context context) {
        return this
            .beginDeleteAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts, context)
            .getSyncPoller();
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param cleanupConnectionArtifacts Specifies whether or not to attempt to clean up artifacts that were created in
     *     order to establish a connection to the time series database. This is a best-effort attempt that will fail if
     *     appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimeSeriesDatabaseConnectionInner> deleteAsync(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        CleanupConnectionArtifacts cleanupConnectionArtifacts) {
        return beginDeleteAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimeSeriesDatabaseConnectionInner> deleteAsync(
        String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName) {
        final CleanupConnectionArtifacts cleanupConnectionArtifacts = null;
        return beginDeleteAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param cleanupConnectionArtifacts Specifies whether or not to attempt to clean up artifacts that were created in
     *     order to establish a connection to the time series database. This is a best-effort attempt that will fail if
     *     appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimeSeriesDatabaseConnectionInner> deleteAsync(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        CleanupConnectionArtifacts cleanupConnectionArtifacts,
        Context context) {
        return beginDeleteAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimeSeriesDatabaseConnectionInner delete(
        String resourceGroupName, String resourceName, String timeSeriesDatabaseConnectionName) {
        final CleanupConnectionArtifacts cleanupConnectionArtifacts = null;
        return deleteAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts)
            .block();
    }

    /**
     * Delete a time series database connection.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param cleanupConnectionArtifacts Specifies whether or not to attempt to clean up artifacts that were created in
     *     order to establish a connection to the time series database. This is a best-effort attempt that will fail if
     *     appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a time series database connection resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimeSeriesDatabaseConnectionInner delete(
        String resourceGroupName,
        String resourceName,
        String timeSeriesDatabaseConnectionName,
        CleanupConnectionArtifacts cleanupConnectionArtifacts,
        Context context) {
        return deleteAsync(
                resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, cleanupConnectionArtifacts, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of time series database connection resources along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TimeSeriesDatabaseConnectionInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<TimeSeriesDatabaseConnectionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of time series database connection resources along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TimeSeriesDatabaseConnectionInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
