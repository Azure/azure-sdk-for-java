// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.digitaltwins.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a time series database connection to Azure Data Explorer with data being sent via an EventHub.
 */
@Fluent
public final class AzureDataExplorerConnectionProperties extends TimeSeriesDatabaseConnectionProperties {
    /*
     * The type of time series connection resource.
     */
    private ConnectionType connectionType = ConnectionType.AZURE_DATA_EXPLORER;

    /*
     * The resource ID of the Azure Data Explorer cluster.
     */
    private String adxResourceId;

    /*
     * The URI of the Azure Data Explorer endpoint.
     */
    private String adxEndpointUri;

    /*
     * The name of the Azure Data Explorer database.
     */
    private String adxDatabaseName;

    /*
     * The name of the Azure Data Explorer table used for storing updates to properties of twins and relationships.
     * Defaults to AdtPropertyEvents.
     */
    private String adxTableName;

    /*
     * The name of the Azure Data Explorer table used for recording twin lifecycle events. The table will not be created
     * if this property is left unspecified.
     */
    private String adxTwinLifecycleEventsTableName;

    /*
     * The name of the Azure Data Explorer table used for recording relationship lifecycle events. The table will not be
     * created if this property is left unspecified.
     */
    private String adxRelationshipLifecycleEventsTableName;

    /*
     * The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
     */
    private String eventHubEndpointUri;

    /*
     * The EventHub name in the EventHub namespace for identity-based authentication.
     */
    private String eventHubEntityPath;

    /*
     * The resource ID of the EventHub namespace.
     */
    private String eventHubNamespaceResourceId;

    /*
     * The EventHub consumer group to use when ADX reads from EventHub. Defaults to $Default.
     */
    private String eventHubConsumerGroup;

    /*
     * Specifies whether or not to record twin / relationship property and item removals, including removals of indexed
     * or keyed values (such as map entries, array elements, etc.). This feature is de-activated unless explicitly set
     * to 'true'. Setting this property to 'true' will generate an additional column in the property events table in
     * ADX.
     */
    private RecordPropertyAndItemRemovals recordPropertyAndItemRemovals;

    /*
     * The provisioning state.
     */
    private TimeSeriesDatabaseConnectionState provisioningState;

    /**
     * Creates an instance of AzureDataExplorerConnectionProperties class.
     */
    public AzureDataExplorerConnectionProperties() {
    }

    /**
     * Get the connectionType property: The type of time series connection resource.
     * 
     * @return the connectionType value.
     */
    @Override
    public ConnectionType connectionType() {
        return this.connectionType;
    }

    /**
     * Get the adxResourceId property: The resource ID of the Azure Data Explorer cluster.
     * 
     * @return the adxResourceId value.
     */
    public String adxResourceId() {
        return this.adxResourceId;
    }

    /**
     * Set the adxResourceId property: The resource ID of the Azure Data Explorer cluster.
     * 
     * @param adxResourceId the adxResourceId value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties withAdxResourceId(String adxResourceId) {
        this.adxResourceId = adxResourceId;
        return this;
    }

    /**
     * Get the adxEndpointUri property: The URI of the Azure Data Explorer endpoint.
     * 
     * @return the adxEndpointUri value.
     */
    public String adxEndpointUri() {
        return this.adxEndpointUri;
    }

    /**
     * Set the adxEndpointUri property: The URI of the Azure Data Explorer endpoint.
     * 
     * @param adxEndpointUri the adxEndpointUri value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties withAdxEndpointUri(String adxEndpointUri) {
        this.adxEndpointUri = adxEndpointUri;
        return this;
    }

    /**
     * Get the adxDatabaseName property: The name of the Azure Data Explorer database.
     * 
     * @return the adxDatabaseName value.
     */
    public String adxDatabaseName() {
        return this.adxDatabaseName;
    }

    /**
     * Set the adxDatabaseName property: The name of the Azure Data Explorer database.
     * 
     * @param adxDatabaseName the adxDatabaseName value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties withAdxDatabaseName(String adxDatabaseName) {
        this.adxDatabaseName = adxDatabaseName;
        return this;
    }

    /**
     * Get the adxTableName property: The name of the Azure Data Explorer table used for storing updates to properties
     * of twins and relationships. Defaults to AdtPropertyEvents.
     * 
     * @return the adxTableName value.
     */
    public String adxTableName() {
        return this.adxTableName;
    }

    /**
     * Set the adxTableName property: The name of the Azure Data Explorer table used for storing updates to properties
     * of twins and relationships. Defaults to AdtPropertyEvents.
     * 
     * @param adxTableName the adxTableName value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties withAdxTableName(String adxTableName) {
        this.adxTableName = adxTableName;
        return this;
    }

    /**
     * Get the adxTwinLifecycleEventsTableName property: The name of the Azure Data Explorer table used for recording
     * twin lifecycle events. The table will not be created if this property is left unspecified.
     * 
     * @return the adxTwinLifecycleEventsTableName value.
     */
    public String adxTwinLifecycleEventsTableName() {
        return this.adxTwinLifecycleEventsTableName;
    }

    /**
     * Set the adxTwinLifecycleEventsTableName property: The name of the Azure Data Explorer table used for recording
     * twin lifecycle events. The table will not be created if this property is left unspecified.
     * 
     * @param adxTwinLifecycleEventsTableName the adxTwinLifecycleEventsTableName value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties
        withAdxTwinLifecycleEventsTableName(String adxTwinLifecycleEventsTableName) {
        this.adxTwinLifecycleEventsTableName = adxTwinLifecycleEventsTableName;
        return this;
    }

    /**
     * Get the adxRelationshipLifecycleEventsTableName property: The name of the Azure Data Explorer table used for
     * recording relationship lifecycle events. The table will not be created if this property is left unspecified.
     * 
     * @return the adxRelationshipLifecycleEventsTableName value.
     */
    public String adxRelationshipLifecycleEventsTableName() {
        return this.adxRelationshipLifecycleEventsTableName;
    }

    /**
     * Set the adxRelationshipLifecycleEventsTableName property: The name of the Azure Data Explorer table used for
     * recording relationship lifecycle events. The table will not be created if this property is left unspecified.
     * 
     * @param adxRelationshipLifecycleEventsTableName the adxRelationshipLifecycleEventsTableName value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties
        withAdxRelationshipLifecycleEventsTableName(String adxRelationshipLifecycleEventsTableName) {
        this.adxRelationshipLifecycleEventsTableName = adxRelationshipLifecycleEventsTableName;
        return this;
    }

    /**
     * Get the eventHubEndpointUri property: The URL of the EventHub namespace for identity-based authentication. It
     * must include the protocol sb://.
     * 
     * @return the eventHubEndpointUri value.
     */
    public String eventHubEndpointUri() {
        return this.eventHubEndpointUri;
    }

    /**
     * Set the eventHubEndpointUri property: The URL of the EventHub namespace for identity-based authentication. It
     * must include the protocol sb://.
     * 
     * @param eventHubEndpointUri the eventHubEndpointUri value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties withEventHubEndpointUri(String eventHubEndpointUri) {
        this.eventHubEndpointUri = eventHubEndpointUri;
        return this;
    }

    /**
     * Get the eventHubEntityPath property: The EventHub name in the EventHub namespace for identity-based
     * authentication.
     * 
     * @return the eventHubEntityPath value.
     */
    public String eventHubEntityPath() {
        return this.eventHubEntityPath;
    }

    /**
     * Set the eventHubEntityPath property: The EventHub name in the EventHub namespace for identity-based
     * authentication.
     * 
     * @param eventHubEntityPath the eventHubEntityPath value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties withEventHubEntityPath(String eventHubEntityPath) {
        this.eventHubEntityPath = eventHubEntityPath;
        return this;
    }

    /**
     * Get the eventHubNamespaceResourceId property: The resource ID of the EventHub namespace.
     * 
     * @return the eventHubNamespaceResourceId value.
     */
    public String eventHubNamespaceResourceId() {
        return this.eventHubNamespaceResourceId;
    }

    /**
     * Set the eventHubNamespaceResourceId property: The resource ID of the EventHub namespace.
     * 
     * @param eventHubNamespaceResourceId the eventHubNamespaceResourceId value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties withEventHubNamespaceResourceId(String eventHubNamespaceResourceId) {
        this.eventHubNamespaceResourceId = eventHubNamespaceResourceId;
        return this;
    }

    /**
     * Get the eventHubConsumerGroup property: The EventHub consumer group to use when ADX reads from EventHub. Defaults
     * to $Default.
     * 
     * @return the eventHubConsumerGroup value.
     */
    public String eventHubConsumerGroup() {
        return this.eventHubConsumerGroup;
    }

    /**
     * Set the eventHubConsumerGroup property: The EventHub consumer group to use when ADX reads from EventHub. Defaults
     * to $Default.
     * 
     * @param eventHubConsumerGroup the eventHubConsumerGroup value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties withEventHubConsumerGroup(String eventHubConsumerGroup) {
        this.eventHubConsumerGroup = eventHubConsumerGroup;
        return this;
    }

    /**
     * Get the recordPropertyAndItemRemovals property: Specifies whether or not to record twin / relationship property
     * and item removals, including removals of indexed or keyed values (such as map entries, array elements, etc.).
     * This feature is de-activated unless explicitly set to 'true'. Setting this property to 'true' will generate an
     * additional column in the property events table in ADX.
     * 
     * @return the recordPropertyAndItemRemovals value.
     */
    public RecordPropertyAndItemRemovals recordPropertyAndItemRemovals() {
        return this.recordPropertyAndItemRemovals;
    }

    /**
     * Set the recordPropertyAndItemRemovals property: Specifies whether or not to record twin / relationship property
     * and item removals, including removals of indexed or keyed values (such as map entries, array elements, etc.).
     * This feature is de-activated unless explicitly set to 'true'. Setting this property to 'true' will generate an
     * additional column in the property events table in ADX.
     * 
     * @param recordPropertyAndItemRemovals the recordPropertyAndItemRemovals value to set.
     * @return the AzureDataExplorerConnectionProperties object itself.
     */
    public AzureDataExplorerConnectionProperties
        withRecordPropertyAndItemRemovals(RecordPropertyAndItemRemovals recordPropertyAndItemRemovals) {
        this.recordPropertyAndItemRemovals = recordPropertyAndItemRemovals;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    @Override
    public TimeSeriesDatabaseConnectionState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureDataExplorerConnectionProperties withIdentity(ManagedIdentityReference identity) {
        super.withIdentity(identity);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (adxResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property adxResourceId in model AzureDataExplorerConnectionProperties"));
        }
        if (adxEndpointUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property adxEndpointUri in model AzureDataExplorerConnectionProperties"));
        }
        if (adxDatabaseName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property adxDatabaseName in model AzureDataExplorerConnectionProperties"));
        }
        if (eventHubEndpointUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property eventHubEndpointUri in model AzureDataExplorerConnectionProperties"));
        }
        if (eventHubEntityPath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property eventHubEntityPath in model AzureDataExplorerConnectionProperties"));
        }
        if (eventHubNamespaceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property eventHubNamespaceResourceId in model AzureDataExplorerConnectionProperties"));
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureDataExplorerConnectionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("identity", identity());
        jsonWriter.writeStringField("adxResourceId", this.adxResourceId);
        jsonWriter.writeStringField("adxEndpointUri", this.adxEndpointUri);
        jsonWriter.writeStringField("adxDatabaseName", this.adxDatabaseName);
        jsonWriter.writeStringField("eventHubEndpointUri", this.eventHubEndpointUri);
        jsonWriter.writeStringField("eventHubEntityPath", this.eventHubEntityPath);
        jsonWriter.writeStringField("eventHubNamespaceResourceId", this.eventHubNamespaceResourceId);
        jsonWriter.writeStringField("connectionType",
            this.connectionType == null ? null : this.connectionType.toString());
        jsonWriter.writeStringField("adxTableName", this.adxTableName);
        jsonWriter.writeStringField("adxTwinLifecycleEventsTableName", this.adxTwinLifecycleEventsTableName);
        jsonWriter.writeStringField("adxRelationshipLifecycleEventsTableName",
            this.adxRelationshipLifecycleEventsTableName);
        jsonWriter.writeStringField("eventHubConsumerGroup", this.eventHubConsumerGroup);
        jsonWriter.writeStringField("recordPropertyAndItemRemovals",
            this.recordPropertyAndItemRemovals == null ? null : this.recordPropertyAndItemRemovals.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureDataExplorerConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureDataExplorerConnectionProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureDataExplorerConnectionProperties.
     */
    public static AzureDataExplorerConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureDataExplorerConnectionProperties deserializedAzureDataExplorerConnectionProperties
                = new AzureDataExplorerConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.provisioningState
                        = TimeSeriesDatabaseConnectionState.fromString(reader.getString());
                } else if ("identity".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties
                        .withIdentity(ManagedIdentityReference.fromJson(reader));
                } else if ("adxResourceId".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.adxResourceId = reader.getString();
                } else if ("adxEndpointUri".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.adxEndpointUri = reader.getString();
                } else if ("adxDatabaseName".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.adxDatabaseName = reader.getString();
                } else if ("eventHubEndpointUri".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.eventHubEndpointUri = reader.getString();
                } else if ("eventHubEntityPath".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.eventHubEntityPath = reader.getString();
                } else if ("eventHubNamespaceResourceId".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.eventHubNamespaceResourceId = reader.getString();
                } else if ("connectionType".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.connectionType
                        = ConnectionType.fromString(reader.getString());
                } else if ("adxTableName".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.adxTableName = reader.getString();
                } else if ("adxTwinLifecycleEventsTableName".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.adxTwinLifecycleEventsTableName
                        = reader.getString();
                } else if ("adxRelationshipLifecycleEventsTableName".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.adxRelationshipLifecycleEventsTableName
                        = reader.getString();
                } else if ("eventHubConsumerGroup".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.eventHubConsumerGroup = reader.getString();
                } else if ("recordPropertyAndItemRemovals".equals(fieldName)) {
                    deserializedAzureDataExplorerConnectionProperties.recordPropertyAndItemRemovals
                        = RecordPropertyAndItemRemovals.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureDataExplorerConnectionProperties;
        });
    }
}
