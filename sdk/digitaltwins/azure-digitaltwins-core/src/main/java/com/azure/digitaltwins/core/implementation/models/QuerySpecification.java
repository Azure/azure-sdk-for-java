// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.digitaltwins.core.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A query specification containing either a query statement or a continuation token from a previous query result.
 */
@Fluent
public final class QuerySpecification implements JsonSerializable<QuerySpecification> {
    /*
     * The query to execute. This value is ignored if a continuation token is provided.
     */
    private String query;

    /*
     * A token which is used to retrieve the next set of results from a previous query.
     */
    private String continuationToken;

    /**
     * Creates an instance of QuerySpecification class.
     */
    public QuerySpecification() {
    }

    /**
     * Get the query property: The query to execute. This value is ignored if a continuation token is provided.
     * 
     * @return the query value.
     */
    public String getQuery() {
        return this.query;
    }

    /**
     * Set the query property: The query to execute. This value is ignored if a continuation token is provided.
     * 
     * @param query the query value to set.
     * @return the QuerySpecification object itself.
     */
    public QuerySpecification setQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the continuationToken property: A token which is used to retrieve the next set of results from a previous
     * query.
     * 
     * @return the continuationToken value.
     */
    public String getContinuationToken() {
        return this.continuationToken;
    }

    /**
     * Set the continuationToken property: A token which is used to retrieve the next set of results from a previous
     * query.
     * 
     * @param continuationToken the continuationToken value to set.
     * @return the QuerySpecification object itself.
     */
    public QuerySpecification setContinuationToken(String continuationToken) {
        this.continuationToken = continuationToken;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("query", this.query);
        jsonWriter.writeStringField("continuationToken", this.continuationToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuerySpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuerySpecification if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuerySpecification.
     */
    public static QuerySpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuerySpecification deserializedQuerySpecification = new QuerySpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("query".equals(fieldName)) {
                    deserializedQuerySpecification.query = reader.getString();
                } else if ("continuationToken".equals(fieldName)) {
                    deserializedQuerySpecification.continuationToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuerySpecification;
        });
    }
}
