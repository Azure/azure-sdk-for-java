// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.digitaltwins.core.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A collection of delete job objects.
 */
@Fluent
public final class DeleteJobCollection implements JsonSerializable<DeleteJobCollection> {
    /*
     * The list of delete job objects.
     */
    @Generated
    private final List<DeleteJob> value;

    /*
     * A URI to retrieve the next page of results.
     */
    @Generated
    private String nextLink;

    /**
     * Creates an instance of DeleteJobCollection class.
     * 
     * @param value the value value to set.
     */
    @Generated
    public DeleteJobCollection(List<DeleteJob> value) {
        this.value = value;
    }

    /**
     * Get the value property: The list of delete job objects.
     * 
     * @return the value value.
     */
    @Generated
    public List<DeleteJob> getValue() {
        return this.value;
    }

    /**
     * Get the nextLink property: A URI to retrieve the next page of results.
     * 
     * @return the nextLink value.
     */
    @Generated
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * Set the nextLink property: A URI to retrieve the next page of results.
     * 
     * @param nextLink the nextLink value to set.
     * @return the DeleteJobCollection object itself.
     */
    @Generated
    public DeleteJobCollection setNextLink(String nextLink) {
        this.nextLink = nextLink;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeleteJobCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeleteJobCollection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeleteJobCollection.
     */
    @Generated
    public static DeleteJobCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean valueFound = false;
            List<DeleteJob> value = null;
            String nextLink = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    value = reader.readArray(reader1 -> DeleteJob.fromJson(reader1));
                    valueFound = true;
                } else if ("nextLink".equals(fieldName)) {
                    nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (valueFound) {
                DeleteJobCollection deserializedDeleteJobCollection = new DeleteJobCollection(value);
                deserializedDeleteJobCollection.nextLink = nextLink;

                return deserializedDeleteJobCollection;
            }
            throw new IllegalStateException("Missing required property: value");
        });
    }
}
