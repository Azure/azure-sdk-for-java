// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.digitaltwins.core;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.digitaltwins.core.models.ErrorResponseException;
import com.azure.digitaltwins.core.models.QuerySpecification;
import com.azure.digitaltwins.core.models.QuerysQueryTwinsResponse;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Querys. */
public final class Querys {
    /** The proxy service used to perform REST calls. */
    private final QuerysService service;

    /** The service client containing this operation class. */
    private final AzureDigitalTwinsAPI client;

    /**
     * Initializes an instance of Querys.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Querys(AzureDigitalTwinsAPI client) {
        this.service = RestProxy.create(QuerysService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureDigitalTwinsAPIQuerys to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureDigitalTwinsAPI")
    private interface QuerysService {
        @Post("/query")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<QuerysQueryTwinsResponse> queryTwins(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") QuerySpecification querySpecification,
                Context context);
    }

    /**
     * Executes a query that allows traversing relationships and filtering by property values. Status codes: 200 (OK):
     * Success. 400 (Bad Request): The request is invalid.
     *
     * @param querySpecification A query specification containing either a query statement or a continuation token from
     *     a previous query result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results of a query operation and an optional continuation token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QuerysQueryTwinsResponse> queryTwinsWithResponseAsync(QuerySpecification querySpecification) {
        return FluxUtil.withContext(
                context ->
                        service.queryTwins(
                                this.client.getHost(), this.client.getApiVersion(), querySpecification, context));
    }
}
