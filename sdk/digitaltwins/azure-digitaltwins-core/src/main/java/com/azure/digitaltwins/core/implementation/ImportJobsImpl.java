// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.digitaltwins.core.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;
import com.azure.digitaltwins.core.implementation.models.ImportJob;
import com.azure.digitaltwins.core.implementation.models.ImportJobCollection;
import com.azure.digitaltwins.core.implementation.models.ImportJobsAddOptions;
import com.azure.digitaltwins.core.implementation.models.ImportJobsCancelOptions;
import com.azure.digitaltwins.core.implementation.models.ImportJobsDeleteOptions;
import com.azure.digitaltwins.core.implementation.models.ImportJobsGetByIdOptions;
import com.azure.digitaltwins.core.implementation.models.ImportJobsListOptions;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ImportJobs.
 */
public final class ImportJobsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ImportJobsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureDigitalTwinsAPIImpl client;

    /**
     * Initializes an instance of ImportJobsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ImportJobsImpl(AzureDigitalTwinsAPIImpl client) {
        this.service
            = RestProxy.create(ImportJobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureDigitalTwinsAPIImportJobs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureDigitalTwinsAPI")
    public interface ImportJobsService {
        @Get("/jobs/imports")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJobCollection>> list(@HostParam("$host") String host,
            @HeaderParam("traceparent") String traceparent, @HeaderParam("tracestate") String tracestate,
            @HeaderParam("max-items-per-page") Integer maxItemsPerPage, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/jobs/imports/{id}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJob>> add(@HostParam("$host") String host, @HeaderParam("traceparent") String traceparent,
            @HeaderParam("tracestate") String tracestate, @PathParam("id") String id,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") ImportJob importJob,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/jobs/imports/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJob>> getById(@HostParam("$host") String host,
            @HeaderParam("traceparent") String traceparent, @HeaderParam("tracestate") String tracestate,
            @PathParam("id") String id, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Delete("/jobs/imports/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @HeaderParam("traceparent") String traceparent,
            @HeaderParam("tracestate") String tracestate, @PathParam("id") String id,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Post("/jobs/imports/{id}/cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJob>> cancel(@HostParam("$host") String host,
            @HeaderParam("traceparent") String traceparent, @HeaderParam("tracestate") String tracestate,
            @PathParam("id") String id, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJobCollection>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String host, @HeaderParam("traceparent") String traceparent,
            @HeaderParam("tracestate") String tracestate, @HeaderParam("max-items-per-page") Integer maxItemsPerPage,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Retrieves all import jobs.
     * Status codes:
     * * 200 OK.
     * 
     * @param importJobsListOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of import job objects along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ImportJob>> listSinglePageAsync(ImportJobsListOptions importJobsListOptions,
        Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (importJobsListOptions != null) {
            traceparentInternal = importJobsListOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsListOptions != null) {
            tracestateInternal = importJobsListOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        Integer maxItemsPerPageInternal = null;
        if (importJobsListOptions != null) {
            maxItemsPerPageInternal = importJobsListOptions.getMaxItemsPerPage();
        }
        Integer maxItemsPerPage = maxItemsPerPageInternal;
        return service
            .list(this.client.getHost(), traceparent, tracestate, maxItemsPerPage, this.client.getApiVersion(), accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().getValue(), res.getValue().getNextLink(), null));
    }

    /**
     * Retrieves all import jobs.
     * Status codes:
     * * 200 OK.
     * 
     * @param importJobsListOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of import job objects as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ImportJob> listAsync(ImportJobsListOptions importJobsListOptions, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(importJobsListOptions, context),
            nextLink -> listNextSinglePageAsync(nextLink, importJobsListOptions, context));
    }

    /**
     * Creates an import job.
     * Status codes:
     * * 201 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of import jobs allowed has been reached.
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJob The import job being added.
     * @param importJobsAddOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> addWithResponseAsync(String id, ImportJob importJob,
        ImportJobsAddOptions importJobsAddOptions) {
        return FluxUtil.withContext(context -> addWithResponseAsync(id, importJob, importJobsAddOptions, context));
    }

    /**
     * Creates an import job.
     * Status codes:
     * * 201 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of import jobs allowed has been reached.
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJob The import job being added.
     * @param importJobsAddOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> addWithResponseAsync(String id, ImportJob importJob,
        ImportJobsAddOptions importJobsAddOptions, Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (importJobsAddOptions != null) {
            traceparentInternal = importJobsAddOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsAddOptions != null) {
            tracestateInternal = importJobsAddOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.add(this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), importJob,
            accept, context);
    }

    /**
     * Creates an import job.
     * Status codes:
     * * 201 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of import jobs allowed has been reached.
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJob The import job being added.
     * @param importJobsAddOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImportJob> addAsync(String id, ImportJob importJob, ImportJobsAddOptions importJobsAddOptions) {
        return addWithResponseAsync(id, importJob, importJobsAddOptions)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates an import job.
     * Status codes:
     * * 201 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of import jobs allowed has been reached.
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJob The import job being added.
     * @param importJobsAddOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImportJob> addAsync(String id, ImportJob importJob, ImportJobsAddOptions importJobsAddOptions,
        Context context) {
        return addWithResponseAsync(id, importJob, importJobsAddOptions, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves an import job.
     * Status codes:
     * * 200 OK
     * * 404 Not Found
     * * ImportJobNotFound - The import job was not found.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsGetByIdOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> getByIdWithResponseAsync(String id,
        ImportJobsGetByIdOptions importJobsGetByIdOptions) {
        return FluxUtil.withContext(context -> getByIdWithResponseAsync(id, importJobsGetByIdOptions, context));
    }

    /**
     * Retrieves an import job.
     * Status codes:
     * * 200 OK
     * * 404 Not Found
     * * ImportJobNotFound - The import job was not found.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsGetByIdOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> getByIdWithResponseAsync(String id,
        ImportJobsGetByIdOptions importJobsGetByIdOptions, Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (importJobsGetByIdOptions != null) {
            traceparentInternal = importJobsGetByIdOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsGetByIdOptions != null) {
            tracestateInternal = importJobsGetByIdOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.getById(this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Retrieves an import job.
     * Status codes:
     * * 200 OK
     * * 404 Not Found
     * * ImportJobNotFound - The import job was not found.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsGetByIdOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImportJob> getByIdAsync(String id, ImportJobsGetByIdOptions importJobsGetByIdOptions) {
        return getByIdWithResponseAsync(id, importJobsGetByIdOptions).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves an import job.
     * Status codes:
     * * 200 OK
     * * 404 Not Found
     * * ImportJobNotFound - The import job was not found.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsGetByIdOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImportJob> getByIdAsync(String id, ImportJobsGetByIdOptions importJobsGetByIdOptions, Context context) {
        return getByIdWithResponseAsync(id, importJobsGetByIdOptions, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Deletes an import job. This is simply used to remove a job id, so it may be reused later. It can not be used to
     * stop entities from being imported.
     * Status codes:
     * * 204 No Content
     * * 400 Bad Request
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsDeleteOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String id, ImportJobsDeleteOptions importJobsDeleteOptions) {
        return FluxUtil.withContext(context -> deleteWithResponseAsync(id, importJobsDeleteOptions, context));
    }

    /**
     * Deletes an import job. This is simply used to remove a job id, so it may be reused later. It can not be used to
     * stop entities from being imported.
     * Status codes:
     * * 204 No Content
     * * 400 Bad Request
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsDeleteOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String id, ImportJobsDeleteOptions importJobsDeleteOptions,
        Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (importJobsDeleteOptions != null) {
            traceparentInternal = importJobsDeleteOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsDeleteOptions != null) {
            tracestateInternal = importJobsDeleteOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.delete(this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Deletes an import job. This is simply used to remove a job id, so it may be reused later. It can not be used to
     * stop entities from being imported.
     * Status codes:
     * * 204 No Content
     * * 400 Bad Request
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsDeleteOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String id, ImportJobsDeleteOptions importJobsDeleteOptions) {
        return deleteWithResponseAsync(id, importJobsDeleteOptions).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes an import job. This is simply used to remove a job id, so it may be reused later. It can not be used to
     * stop entities from being imported.
     * Status codes:
     * * 204 No Content
     * * 400 Bad Request
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsDeleteOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String id, ImportJobsDeleteOptions importJobsDeleteOptions, Context context) {
        return deleteWithResponseAsync(id, importJobsDeleteOptions, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Cancels an import job that is currently running. Service will stop any import operations triggered by the current
     * import job that are in progress, and go to a cancelled state. Please note that this will leave your instance in
     * an unknown state as there won't be any rollback operation.
     * Status codes:
     * * 200 Request Accepted
     * * 400 Bad Request
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsCancelOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> cancelWithResponseAsync(String id,
        ImportJobsCancelOptions importJobsCancelOptions) {
        return FluxUtil.withContext(context -> cancelWithResponseAsync(id, importJobsCancelOptions, context));
    }

    /**
     * Cancels an import job that is currently running. Service will stop any import operations triggered by the current
     * import job that are in progress, and go to a cancelled state. Please note that this will leave your instance in
     * an unknown state as there won't be any rollback operation.
     * Status codes:
     * * 200 Request Accepted
     * * 400 Bad Request
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsCancelOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> cancelWithResponseAsync(String id, ImportJobsCancelOptions importJobsCancelOptions,
        Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (importJobsCancelOptions != null) {
            traceparentInternal = importJobsCancelOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsCancelOptions != null) {
            tracestateInternal = importJobsCancelOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.cancel(this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Cancels an import job that is currently running. Service will stop any import operations triggered by the current
     * import job that are in progress, and go to a cancelled state. Please note that this will leave your instance in
     * an unknown state as there won't be any rollback operation.
     * Status codes:
     * * 200 Request Accepted
     * * 400 Bad Request
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsCancelOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImportJob> cancelAsync(String id, ImportJobsCancelOptions importJobsCancelOptions) {
        return cancelWithResponseAsync(id, importJobsCancelOptions).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Cancels an import job that is currently running. Service will stop any import operations triggered by the current
     * import job that are in progress, and go to a cancelled state. Please note that this will leave your instance in
     * an unknown state as there won't be any rollback operation.
     * Status codes:
     * * 200 Request Accepted
     * * 400 Bad Request
     * * ValidationFailed - The import job request is not valid.
     * 
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsCancelOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImportJob> cancelAsync(String id, ImportJobsCancelOptions importJobsCancelOptions, Context context) {
        return cancelWithResponseAsync(id, importJobsCancelOptions, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param importJobsListOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of import job objects along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ImportJob>> listNextSinglePageAsync(String nextLink,
        ImportJobsListOptions importJobsListOptions, Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (importJobsListOptions != null) {
            traceparentInternal = importJobsListOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsListOptions != null) {
            tracestateInternal = importJobsListOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        Integer maxItemsPerPageInternal = null;
        if (importJobsListOptions != null) {
            maxItemsPerPageInternal = importJobsListOptions.getMaxItemsPerPage();
        }
        Integer maxItemsPerPage = maxItemsPerPageInternal;
        return service
            .listNext(nextLink, this.client.getHost(), traceparent, tracestate, maxItemsPerPage, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().getValue(), res.getValue().getNextLink(), null));
    }
}
