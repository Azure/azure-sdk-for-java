// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.digitaltwins.core.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;
import com.azure.digitaltwins.core.implementation.models.ImportJob;
import com.azure.digitaltwins.core.implementation.models.ImportJobCollection;
import com.azure.digitaltwins.core.implementation.models.ImportJobsAddOptions;
import com.azure.digitaltwins.core.implementation.models.ImportJobsCancelOptions;
import com.azure.digitaltwins.core.implementation.models.ImportJobsDeleteOptions;
import com.azure.digitaltwins.core.implementation.models.ImportJobsGetByIdOptions;
import com.azure.digitaltwins.core.implementation.models.ImportJobsListOptions;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ImportJobs. */
public final class ImportJobsImpl {
    /** The proxy service used to perform REST calls. */
    private final ImportJobsService service;

    /** The service client containing this operation class. */
    private final AzureDigitalTwinsAPIImpl client;

    /**
     * Initializes an instance of ImportJobsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ImportJobsImpl(AzureDigitalTwinsAPIImpl client) {
        this.service =
                RestProxy.create(ImportJobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureDigitalTwinsAPIImportJobs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureDigitalTwinsAPI")
    public interface ImportJobsService {
        @Get("/jobs/imports")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJobCollection>> list(
                @HostParam("$host") String host,
                @HeaderParam("traceparent") String traceparent,
                @HeaderParam("tracestate") String tracestate,
                @HeaderParam("max-items-per-page") Integer maxItemsPerPage,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Put("/jobs/imports/{id}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJob>> add(
                @HostParam("$host") String host,
                @HeaderParam("traceparent") String traceparent,
                @HeaderParam("tracestate") String tracestate,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") ImportJob importJob,
                Context context);

        @Get("/jobs/imports/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJob>> getById(
                @HostParam("$host") String host,
                @HeaderParam("traceparent") String traceparent,
                @HeaderParam("tracestate") String tracestate,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/jobs/imports/{id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("$host") String host,
                @HeaderParam("traceparent") String traceparent,
                @HeaderParam("tracestate") String tracestate,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/jobs/imports/{id}/cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJob>> cancel(
                @HostParam("$host") String host,
                @HeaderParam("traceparent") String traceparent,
                @HeaderParam("tracestate") String tracestate,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ImportJobCollection>> listNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("$host") String host,
                @HeaderParam("traceparent") String traceparent,
                @HeaderParam("tracestate") String tracestate,
                @HeaderParam("max-items-per-page") Integer maxItemsPerPage,
                Context context);
    }

    /**
     * Retrieves all import jobs. Status codes: * 200 OK.
     *
     * @param importJobsListOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of import job objects.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ImportJob>> listSinglePageAsync(
            ImportJobsListOptions importJobsListOptions, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (importJobsListOptions != null) {
            importJobsListOptions.validate();
        }
        String traceparentInternal = null;
        if (importJobsListOptions != null) {
            traceparentInternal = importJobsListOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsListOptions != null) {
            tracestateInternal = importJobsListOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        Integer maxItemsPerPageInternal = null;
        if (importJobsListOptions != null) {
            maxItemsPerPageInternal = importJobsListOptions.getMaxItemsPerPage();
        }
        Integer maxItemsPerPage = maxItemsPerPageInternal;
        return service.list(
                        this.client.getHost(),
                        traceparent,
                        tracestate,
                        maxItemsPerPage,
                        this.client.getApiVersion(),
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Creates an import job. Status codes: * 201 Created * 400 Bad Request * JobLimitReached - The maximum number of
     * import jobs allowed has been reached. * ValidationFailed - The import job request is not valid.
     *
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJob A job which contains a reference to the operations to perform, results, and execution metadata.
     * @param importJobsAddOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> addWithResponseAsync(
            String id, ImportJob importJob, ImportJobsAddOptions importJobsAddOptions, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (importJob == null) {
            return Mono.error(new IllegalArgumentException("Parameter importJob is required and cannot be null."));
        } else {
            importJob.validate();
        }
        if (importJobsAddOptions != null) {
            importJobsAddOptions.validate();
        }
        String traceparentInternal = null;
        if (importJobsAddOptions != null) {
            traceparentInternal = importJobsAddOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsAddOptions != null) {
            tracestateInternal = importJobsAddOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.add(
                this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), importJob, context);
    }

    /**
     * Retrieves an import job. Status codes: * 200 OK * 404 Not Found * ImportJobNotFound - The import job was not
     * found.
     *
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsGetByIdOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> getByIdWithResponseAsync(
            String id, ImportJobsGetByIdOptions importJobsGetByIdOptions, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (importJobsGetByIdOptions != null) {
            importJobsGetByIdOptions.validate();
        }
        String traceparentInternal = null;
        if (importJobsGetByIdOptions != null) {
            traceparentInternal = importJobsGetByIdOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsGetByIdOptions != null) {
            tracestateInternal = importJobsGetByIdOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.getById(
                this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), context);
    }

    /**
     * Deletes an import job. Status codes: * 204 No Content * 400 Bad Request * ValidationFailed - The import job
     * request is not valid.
     *
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsDeleteOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(
            String id, ImportJobsDeleteOptions importJobsDeleteOptions, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (importJobsDeleteOptions != null) {
            importJobsDeleteOptions.validate();
        }
        String traceparentInternal = null;
        if (importJobsDeleteOptions != null) {
            traceparentInternal = importJobsDeleteOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsDeleteOptions != null) {
            tracestateInternal = importJobsDeleteOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.delete(this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), context);
    }

    /**
     * Cancels an import job. Status codes: * 200 Request Accepted * 400 Bad Request * ValidationFailed - The import job
     * request is not valid.
     *
     * @param id The id for the import job. The id is unique within the service and case sensitive.
     * @param importJobsCancelOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImportJob>> cancelWithResponseAsync(
            String id, ImportJobsCancelOptions importJobsCancelOptions, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (importJobsCancelOptions != null) {
            importJobsCancelOptions.validate();
        }
        String traceparentInternal = null;
        if (importJobsCancelOptions != null) {
            traceparentInternal = importJobsCancelOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsCancelOptions != null) {
            tracestateInternal = importJobsCancelOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.cancel(this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param importJobsListOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of import job objects.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ImportJob>> listNextSinglePageAsync(
            String nextLink, ImportJobsListOptions importJobsListOptions, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (importJobsListOptions != null) {
            importJobsListOptions.validate();
        }
        String traceparentInternal = null;
        if (importJobsListOptions != null) {
            traceparentInternal = importJobsListOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (importJobsListOptions != null) {
            tracestateInternal = importJobsListOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        Integer maxItemsPerPageInternal = null;
        if (importJobsListOptions != null) {
            maxItemsPerPageInternal = importJobsListOptions.getMaxItemsPerPage();
        }
        Integer maxItemsPerPage = maxItemsPerPageInternal;
        return service.listNext(nextLink, this.client.getHost(), traceparent, tracestate, maxItemsPerPage, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
