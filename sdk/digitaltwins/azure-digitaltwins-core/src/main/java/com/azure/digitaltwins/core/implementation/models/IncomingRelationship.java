// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.digitaltwins.core.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An incoming relationship.
 */
@Fluent
public final class IncomingRelationship implements JsonSerializable<IncomingRelationship> {
    /*
     * A user-provided string representing the id of this relationship, unique in the context of the source digital twin, i.e. sourceId + relationshipId is unique in the context of the service.
     */
    private String relationshipId;

    /*
     * The id of the source digital twin.
     */
    private String sourceId;

    /*
     * The name of the relationship.
     */
    private String relationshipName;

    /*
     * Link to the relationship, to be used for deletion.
     */
    private String relationshipLink;

    /**
     * Creates an instance of IncomingRelationship class.
     */
    public IncomingRelationship() {
    }

    /**
     * Get the relationshipId property: A user-provided string representing the id of this relationship, unique in the
     * context of the source digital twin, i.e. sourceId + relationshipId is unique in the context of the service.
     * 
     * @return the relationshipId value.
     */
    public String getRelationshipId() {
        return this.relationshipId;
    }

    /**
     * Set the relationshipId property: A user-provided string representing the id of this relationship, unique in the
     * context of the source digital twin, i.e. sourceId + relationshipId is unique in the context of the service.
     * 
     * @param relationshipId the relationshipId value to set.
     * @return the IncomingRelationship object itself.
     */
    public IncomingRelationship setRelationshipId(String relationshipId) {
        this.relationshipId = relationshipId;
        return this;
    }

    /**
     * Get the sourceId property: The id of the source digital twin.
     * 
     * @return the sourceId value.
     */
    public String getSourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: The id of the source digital twin.
     * 
     * @param sourceId the sourceId value to set.
     * @return the IncomingRelationship object itself.
     */
    public IncomingRelationship setSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the relationshipName property: The name of the relationship.
     * 
     * @return the relationshipName value.
     */
    public String getRelationshipName() {
        return this.relationshipName;
    }

    /**
     * Set the relationshipName property: The name of the relationship.
     * 
     * @param relationshipName the relationshipName value to set.
     * @return the IncomingRelationship object itself.
     */
    public IncomingRelationship setRelationshipName(String relationshipName) {
        this.relationshipName = relationshipName;
        return this;
    }

    /**
     * Get the relationshipLink property: Link to the relationship, to be used for deletion.
     * 
     * @return the relationshipLink value.
     */
    public String getRelationshipLink() {
        return this.relationshipLink;
    }

    /**
     * Set the relationshipLink property: Link to the relationship, to be used for deletion.
     * 
     * @param relationshipLink the relationshipLink value to set.
     * @return the IncomingRelationship object itself.
     */
    public IncomingRelationship setRelationshipLink(String relationshipLink) {
        this.relationshipLink = relationshipLink;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("$relationshipId", this.relationshipId);
        jsonWriter.writeStringField("$sourceId", this.sourceId);
        jsonWriter.writeStringField("$relationshipName", this.relationshipName);
        jsonWriter.writeStringField("$relationshipLink", this.relationshipLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IncomingRelationship from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IncomingRelationship if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IncomingRelationship.
     */
    public static IncomingRelationship fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IncomingRelationship deserializedIncomingRelationship = new IncomingRelationship();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("$relationshipId".equals(fieldName)) {
                    deserializedIncomingRelationship.relationshipId = reader.getString();
                } else if ("$sourceId".equals(fieldName)) {
                    deserializedIncomingRelationship.sourceId = reader.getString();
                } else if ("$relationshipName".equals(fieldName)) {
                    deserializedIncomingRelationship.relationshipName = reader.getString();
                } else if ("$relationshipLink".equals(fieldName)) {
                    deserializedIncomingRelationship.relationshipLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIncomingRelationship;
        });
    }
}
