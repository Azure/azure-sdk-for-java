// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.digitaltwins.core.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * A job which contains a reference to the operations to perform, results, and execution metadata.
 */
@Fluent
public final class ImportJob implements JsonSerializable<ImportJob> {
    /*
     * The identifier of the import job.
     */
    @Generated
    private String id;

    /*
     * The path to the input Azure storage blob that contains file(s) describing the operations to perform in the job.
     */
    @Generated
    private final String inputBlobUri;

    /*
     * The path to the output Azure storage blob that will contain the errors and progress logs of import job.
     */
    @Generated
    private final String outputBlobUri;

    /*
     * Status of the job.
     */
    @Generated
    private Status status;

    /*
     * Start time of the job. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * Last time service performed any action from the job. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     */
    @Generated
    private OffsetDateTime lastActionDateTime;

    /*
     * End time of the job. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     */
    @Generated
    private OffsetDateTime finishedDateTime;

    /*
     * Time at which job will be purged by the service from the system. The timestamp is in RFC3339 format:
     * `yyyy-MM-ddTHH:mm:ssZ`.
     */
    @Generated
    private OffsetDateTime purgeDateTime;

    /*
     * Details of the error(s) that occurred executing the import job.
     */
    @Generated
    private Error error;

    /**
     * Creates an instance of ImportJob class.
     * 
     * @param inputBlobUri the inputBlobUri value to set.
     * @param outputBlobUri the outputBlobUri value to set.
     */
    @Generated
    public ImportJob(String inputBlobUri, String outputBlobUri) {
        this.inputBlobUri = inputBlobUri;
        this.outputBlobUri = outputBlobUri;
    }

    /**
     * Get the id property: The identifier of the import job.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the inputBlobUri property: The path to the input Azure storage blob that contains file(s) describing the
     * operations to perform in the job.
     * 
     * @return the inputBlobUri value.
     */
    @Generated
    public String getInputBlobUri() {
        return this.inputBlobUri;
    }

    /**
     * Get the outputBlobUri property: The path to the output Azure storage blob that will contain the errors and
     * progress logs of import job.
     * 
     * @return the outputBlobUri value.
     */
    @Generated
    public String getOutputBlobUri() {
        return this.outputBlobUri;
    }

    /**
     * Get the status property: Status of the job.
     * 
     * @return the status value.
     */
    @Generated
    public Status getStatus() {
        return this.status;
    }

    /**
     * Get the createdDateTime property: Start time of the job. The timestamp is in RFC3339 format:
     * `yyyy-MM-ddTHH:mm:ssZ`.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the lastActionDateTime property: Last time service performed any action from the job. The timestamp is in
     * RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * 
     * @return the lastActionDateTime value.
     */
    @Generated
    public OffsetDateTime getLastActionDateTime() {
        return this.lastActionDateTime;
    }

    /**
     * Get the finishedDateTime property: End time of the job. The timestamp is in RFC3339 format:
     * `yyyy-MM-ddTHH:mm:ssZ`.
     * 
     * @return the finishedDateTime value.
     */
    @Generated
    public OffsetDateTime getFinishedDateTime() {
        return this.finishedDateTime;
    }

    /**
     * Get the purgeDateTime property: Time at which job will be purged by the service from the system. The timestamp is
     * in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * 
     * @return the purgeDateTime value.
     */
    @Generated
    public OffsetDateTime getPurgeDateTime() {
        return this.purgeDateTime;
    }

    /**
     * Get the error property: Details of the error(s) that occurred executing the import job.
     * 
     * @return the error value.
     */
    @Generated
    public Error getError() {
        return this.error;
    }

    /**
     * Set the error property: Details of the error(s) that occurred executing the import job.
     * 
     * @param error the error value to set.
     * @return the ImportJob object itself.
     */
    @Generated
    public ImportJob setError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inputBlobUri", this.inputBlobUri);
        jsonWriter.writeStringField("outputBlobUri", this.outputBlobUri);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImportJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImportJob if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImportJob.
     */
    @Generated
    public static ImportJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean inputBlobUriFound = false;
            String inputBlobUri = null;
            boolean outputBlobUriFound = false;
            String outputBlobUri = null;
            String id = null;
            Status status = null;
            OffsetDateTime createdDateTime = null;
            OffsetDateTime lastActionDateTime = null;
            OffsetDateTime finishedDateTime = null;
            OffsetDateTime purgeDateTime = null;
            Error error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputBlobUri".equals(fieldName)) {
                    inputBlobUri = reader.getString();
                    inputBlobUriFound = true;
                } else if ("outputBlobUri".equals(fieldName)) {
                    outputBlobUri = reader.getString();
                    outputBlobUriFound = true;
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = Status.fromString(reader.getString());
                } else if ("createdDateTime".equals(fieldName)) {
                    createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastActionDateTime".equals(fieldName)) {
                    lastActionDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("finishedDateTime".equals(fieldName)) {
                    finishedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("purgeDateTime".equals(fieldName)) {
                    purgeDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    error = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (inputBlobUriFound && outputBlobUriFound) {
                ImportJob deserializedImportJob = new ImportJob(inputBlobUri, outputBlobUri);
                deserializedImportJob.id = id;
                deserializedImportJob.status = status;
                deserializedImportJob.createdDateTime = createdDateTime;
                deserializedImportJob.lastActionDateTime = lastActionDateTime;
                deserializedImportJob.finishedDateTime = finishedDateTime;
                deserializedImportJob.purgeDateTime = purgeDateTime;
                deserializedImportJob.error = error;

                return deserializedImportJob;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!inputBlobUriFound) {
                missingProperties.add("inputBlobUri");
            }
            if (!outputBlobUriFound) {
                missingProperties.add("outputBlobUri");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
