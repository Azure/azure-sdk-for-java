// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.digitaltwins.core.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.ResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.digitaltwins.core.implementation.models.DeleteJob;
import com.azure.digitaltwins.core.implementation.models.DeleteJobCollection;
import com.azure.digitaltwins.core.implementation.models.DeleteJobsAddHeaders;
import com.azure.digitaltwins.core.implementation.models.DeleteJobsAddOptions;
import com.azure.digitaltwins.core.implementation.models.DeleteJobsGetByIdOptions;
import com.azure.digitaltwins.core.implementation.models.DeleteJobsListOptions;
import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DeleteJobs.
 */
public final class DeleteJobsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DeleteJobsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureDigitalTwinsAPIImpl client;

    /**
     * Initializes an instance of DeleteJobsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DeleteJobsImpl(AzureDigitalTwinsAPIImpl client) {
        this.service
            = RestProxy.create(DeleteJobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureDigitalTwinsAPIDeleteJobs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureDigitalTwinsAPI")
    public interface DeleteJobsService {
        @Post("/jobs/deletions")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<ResponseBase<DeleteJobsAddHeaders, DeleteJob>> add(@HostParam("$host") String host,
            @HeaderParam("traceparent") String traceparent, @HeaderParam("tracestate") String tracestate,
            @QueryParam("api-version") String apiVersion, @HeaderParam("operation-id") String operationId,
            @QueryParam("timeoutInMinutes") Integer timeoutInMinutes, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/jobs/deletions")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DeleteJob>> addNoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("traceparent") String traceparent, @HeaderParam("tracestate") String tracestate,
            @QueryParam("api-version") String apiVersion, @HeaderParam("operation-id") String operationId,
            @QueryParam("timeoutInMinutes") Integer timeoutInMinutes, @HeaderParam("Accept") String accept,
            Context context);

        @Get("/jobs/deletions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DeleteJobCollection>> list(@HostParam("$host") String host,
            @HeaderParam("traceparent") String traceparent, @HeaderParam("tracestate") String tracestate,
            @QueryParam("api-version") String apiVersion, @HeaderParam("max-items-per-page") Integer maxItemsPerPage,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/jobs/deletions/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DeleteJob>> getById(@HostParam("$host") String host,
            @HeaderParam("traceparent") String traceparent, @HeaderParam("tracestate") String tracestate,
            @PathParam("id") String id, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DeleteJobCollection>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String host, @HeaderParam("traceparent") String traceparent,
            @HeaderParam("tracestate") String tracestate, @HeaderParam("max-items-per-page") Integer maxItemsPerPage,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete any other
     * types of entities.
     * Status codes:
     * * 202 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of delete jobs allowed has been reached.
     * * ValidationFailed - Operation-Id already exists.
     * 
     * @param deleteJobsAddOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<DeleteJobsAddHeaders, DeleteJob>>
        addWithResponseAsync(DeleteJobsAddOptions deleteJobsAddOptions) {
        return FluxUtil.withContext(context -> addWithResponseAsync(deleteJobsAddOptions, context));
    }

    /**
     * Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete any other
     * types of entities.
     * Status codes:
     * * 202 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of delete jobs allowed has been reached.
     * * ValidationFailed - Operation-Id already exists.
     * 
     * @param deleteJobsAddOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<DeleteJobsAddHeaders, DeleteJob>>
        addWithResponseAsync(DeleteJobsAddOptions deleteJobsAddOptions, Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (deleteJobsAddOptions != null) {
            traceparentInternal = deleteJobsAddOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (deleteJobsAddOptions != null) {
            tracestateInternal = deleteJobsAddOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.add(this.client.getHost(), traceparent, tracestate, this.client.getApiVersion(),
            this.client.getOperationId(), this.client.getTimeoutInMinutes(), accept, context);
    }

    /**
     * Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete any other
     * types of entities.
     * Status codes:
     * * 202 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of delete jobs allowed has been reached.
     * * ValidationFailed - Operation-Id already exists.
     * 
     * @param deleteJobsAddOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteJob> addAsync(DeleteJobsAddOptions deleteJobsAddOptions) {
        return addWithResponseAsync(deleteJobsAddOptions).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete any other
     * types of entities.
     * Status codes:
     * * 202 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of delete jobs allowed has been reached.
     * * ValidationFailed - Operation-Id already exists.
     * 
     * @param deleteJobsAddOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteJob> addAsync(DeleteJobsAddOptions deleteJobsAddOptions, Context context) {
        return addWithResponseAsync(deleteJobsAddOptions, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete any other
     * types of entities.
     * Status codes:
     * * 202 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of delete jobs allowed has been reached.
     * * ValidationFailed - Operation-Id already exists.
     * 
     * @param deleteJobsAddOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeleteJob>> addNoCustomHeadersWithResponseAsync(DeleteJobsAddOptions deleteJobsAddOptions) {
        return FluxUtil.withContext(context -> addNoCustomHeadersWithResponseAsync(deleteJobsAddOptions, context));
    }

    /**
     * Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete any other
     * types of entities.
     * Status codes:
     * * 202 Created
     * * 400 Bad Request
     * * JobLimitReached - The maximum number of delete jobs allowed has been reached.
     * * ValidationFailed - Operation-Id already exists.
     * 
     * @param deleteJobsAddOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeleteJob>> addNoCustomHeadersWithResponseAsync(DeleteJobsAddOptions deleteJobsAddOptions,
        Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (deleteJobsAddOptions != null) {
            traceparentInternal = deleteJobsAddOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (deleteJobsAddOptions != null) {
            tracestateInternal = deleteJobsAddOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.addNoCustomHeaders(this.client.getHost(), traceparent, tracestate, this.client.getApiVersion(),
            this.client.getOperationId(), this.client.getTimeoutInMinutes(), accept, context);
    }

    /**
     * Retrieves all deletion jobs. This may be useful to find a delete job that was previously requested, or to view a
     * history of delete jobs that have run or are currently running on the instance.
     * Status codes:
     * * 200 OK.
     * 
     * @param deleteJobsListOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of delete job objects along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeleteJob>> listSinglePageAsync(DeleteJobsListOptions deleteJobsListOptions,
        Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (deleteJobsListOptions != null) {
            traceparentInternal = deleteJobsListOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (deleteJobsListOptions != null) {
            tracestateInternal = deleteJobsListOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        Integer maxItemsPerPageInternal = null;
        if (deleteJobsListOptions != null) {
            maxItemsPerPageInternal = deleteJobsListOptions.getMaxItemsPerPage();
        }
        Integer maxItemsPerPage = maxItemsPerPageInternal;
        return service
            .list(this.client.getHost(), traceparent, tracestate, this.client.getApiVersion(), maxItemsPerPage, accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().getValue(), res.getValue().getNextLink(), null));
    }

    /**
     * Retrieves all deletion jobs. This may be useful to find a delete job that was previously requested, or to view a
     * history of delete jobs that have run or are currently running on the instance.
     * Status codes:
     * * 200 OK.
     * 
     * @param deleteJobsListOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of delete job objects as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeleteJob> listAsync(DeleteJobsListOptions deleteJobsListOptions, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(deleteJobsListOptions, context),
            nextLink -> listNextSinglePageAsync(nextLink, deleteJobsListOptions, context));
    }

    /**
     * Retrieves a delete job.
     * Status codes:
     * * 200 OK
     * * 404 Not Found
     * * DeleteJobNotFound - The delete job was not found.
     * 
     * @param id The id for the delete job. The id is unique within the service and case sensitive.
     * @param deleteJobsGetByIdOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeleteJob>> getByIdWithResponseAsync(String id,
        DeleteJobsGetByIdOptions deleteJobsGetByIdOptions) {
        return FluxUtil.withContext(context -> getByIdWithResponseAsync(id, deleteJobsGetByIdOptions, context));
    }

    /**
     * Retrieves a delete job.
     * Status codes:
     * * 200 OK
     * * 404 Not Found
     * * DeleteJobNotFound - The delete job was not found.
     * 
     * @param id The id for the delete job. The id is unique within the service and case sensitive.
     * @param deleteJobsGetByIdOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeleteJob>> getByIdWithResponseAsync(String id,
        DeleteJobsGetByIdOptions deleteJobsGetByIdOptions, Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (deleteJobsGetByIdOptions != null) {
            traceparentInternal = deleteJobsGetByIdOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (deleteJobsGetByIdOptions != null) {
            tracestateInternal = deleteJobsGetByIdOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        return service.getById(this.client.getHost(), traceparent, tracestate, id, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Retrieves a delete job.
     * Status codes:
     * * 200 OK
     * * 404 Not Found
     * * DeleteJobNotFound - The delete job was not found.
     * 
     * @param id The id for the delete job. The id is unique within the service and case sensitive.
     * @param deleteJobsGetByIdOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteJob> getByIdAsync(String id, DeleteJobsGetByIdOptions deleteJobsGetByIdOptions) {
        return getByIdWithResponseAsync(id, deleteJobsGetByIdOptions).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves a delete job.
     * Status codes:
     * * 200 OK
     * * 404 Not Found
     * * DeleteJobNotFound - The delete job was not found.
     * 
     * @param id The id for the delete job. The id is unique within the service and case sensitive.
     * @param deleteJobsGetByIdOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job which contains a reference to the operations to perform, results, and execution metadata on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteJob> getByIdAsync(String id, DeleteJobsGetByIdOptions deleteJobsGetByIdOptions, Context context) {
        return getByIdWithResponseAsync(id, deleteJobsGetByIdOptions, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param deleteJobsListOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of delete job objects along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeleteJob>> listNextSinglePageAsync(String nextLink,
        DeleteJobsListOptions deleteJobsListOptions, Context context) {
        final String accept = "application/json";
        String traceparentInternal = null;
        if (deleteJobsListOptions != null) {
            traceparentInternal = deleteJobsListOptions.getTraceparent();
        }
        String traceparent = traceparentInternal;
        String tracestateInternal = null;
        if (deleteJobsListOptions != null) {
            tracestateInternal = deleteJobsListOptions.getTracestate();
        }
        String tracestate = tracestateInternal;
        Integer maxItemsPerPageInternal = null;
        if (deleteJobsListOptions != null) {
            maxItemsPerPageInternal = deleteJobsListOptions.getMaxItemsPerPage();
        }
        Integer maxItemsPerPage = maxItemsPerPageInternal;
        return service
            .listNext(nextLink, this.client.getHost(), traceparent, tracestate, maxItemsPerPage, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().getValue(), res.getValue().getNextLink(), null));
    }
}
