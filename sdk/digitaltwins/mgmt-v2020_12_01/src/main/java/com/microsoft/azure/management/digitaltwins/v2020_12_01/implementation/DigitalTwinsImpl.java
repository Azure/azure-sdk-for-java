/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.digitaltwins.v2020_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.digitaltwins.v2020_12_01.DigitalTwins;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.digitaltwins.v2020_12_01.DigitalTwinsDescription;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.digitaltwins.v2020_12_01.CheckNameResult;

class DigitalTwinsImpl extends WrapperImpl<DigitalTwinsInner> implements DigitalTwins {
    private final DigitalTwinsManager manager;

    DigitalTwinsImpl(DigitalTwinsManager manager) {
        super(manager.inner().digitalTwins());
        this.manager = manager;
    }

    public DigitalTwinsManager manager() {
        return this.manager;
    }

    @Override
    public DigitalTwinsDescriptionImpl defineDigitalTwinsInstance(String name) {
        return wrapDigitalTwinsInstanceModel(name);
    }

    private DigitalTwinsDescriptionImpl wrapDigitalTwinsInstanceModel(String name) {
        return new DigitalTwinsDescriptionImpl(name, new DigitalTwinsDescriptionInner(), this.manager());
    }

    private DigitalTwinsDescriptionImpl wrapDigitalTwinsDescriptionModel(DigitalTwinsDescriptionInner inner) {
        return  new DigitalTwinsDescriptionImpl(inner.name(), inner, manager());
    }

    private Observable<DigitalTwinsDescriptionInner> getDigitalTwinsDescriptionInnerUsingDigitalTwinsInnerAsync(String resourceGroupName, String name) {
        DigitalTwinsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    public Observable<DigitalTwinsDescription> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getDigitalTwinsDescriptionInnerUsingDigitalTwinsInnerAsync(resourceGroupName, name).flatMap(new Func1<DigitalTwinsDescriptionInner, Observable<DigitalTwinsDescription>> () {
            @Override
            public Observable<DigitalTwinsDescription> call(DigitalTwinsDescriptionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return  Observable.just((DigitalTwinsDescription)wrapDigitalTwinsDescriptionModel(inner));
                }
            }
        });
    }

    @Override
    public Observable<DigitalTwinsDescription> listByResourceGroupAsync(String resourceGroupName) {
        DigitalTwinsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<DigitalTwinsDescriptionInner>, Iterable<DigitalTwinsDescriptionInner>>() {
            @Override
            public Iterable<DigitalTwinsDescriptionInner> call(Page<DigitalTwinsDescriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DigitalTwinsDescriptionInner, DigitalTwinsDescription>() {
            @Override
            public DigitalTwinsDescription call(DigitalTwinsDescriptionInner inner) {
                return wrapDigitalTwinsDescriptionModel(inner);
            }
        });
    }

    @Override
    public Observable<DigitalTwinsDescription> listAsync() {
        DigitalTwinsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<DigitalTwinsDescriptionInner>, Iterable<DigitalTwinsDescriptionInner>>() {
            @Override
            public Iterable<DigitalTwinsDescriptionInner> call(Page<DigitalTwinsDescriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DigitalTwinsDescriptionInner, DigitalTwinsDescription>() {
            @Override
            public DigitalTwinsDescription call(DigitalTwinsDescriptionInner inner) {
                return wrapDigitalTwinsDescriptionModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String name) {
        return this.inner().deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<CheckNameResult> checkNameAvailabilityAsync(String location, String name) {
        DigitalTwinsInner client = this.inner();
        return client.checkNameAvailabilityAsync(location, name)
        .map(new Func1<CheckNameResultInner, CheckNameResult>() {
            @Override
            public CheckNameResult call(CheckNameResultInner inner) {
                return new CheckNameResultImpl(inner, manager());
            }
        });
    }

}
