/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.CheckNameRequest;
import com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwinsPatchDescription;
import com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DigitalTwins.
 */
public class DigitalTwinsInner implements InnerSupportsGet<DigitalTwinsDescriptionInner>, InnerSupportsDelete<DigitalTwinsDescriptionInner>, InnerSupportsListing<DigitalTwinsDescriptionInner> {
    /** The Retrofit service to perform REST calls. */
    private DigitalTwinsService service;
    /** The service client containing this operation class. */
    private AzureDigitalTwinsManagementClientImpl client;

    /**
     * Initializes an instance of DigitalTwinsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DigitalTwinsInner(Retrofit retrofit, AzureDigitalTwinsManagementClientImpl client) {
        this.service = retrofit.create(DigitalTwinsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DigitalTwins to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DigitalTwinsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body DigitalTwinsDescriptionInner digitalTwinsCreate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body DigitalTwinsDescriptionInner digitalTwinsCreate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body DigitalTwinsPatchDescription digitalTwinsPatchDescription, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body DigitalTwinsPatchDescription digitalTwinsPatchDescription, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DigitalTwins/digitalTwinsInstances")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DigitalTwins/locations/{location}/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CheckNameRequest digitalTwinsInstanceCheckName, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwins listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get DigitalTwinsInstances resource.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner getByResourceGroup(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Get DigitalTwinsInstances resource.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String resourceName, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Get DigitalTwinsInstances resource.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<DigitalTwinsDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get DigitalTwinsInstances resource.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DigitalTwinsDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DigitalTwinsDescriptionInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DigitalTwinsDescriptionInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DigitalTwinsDescriptionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner createOrUpdate(String resourceGroupName, String resourceName, DigitalTwinsDescriptionInner digitalTwinsCreate) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, digitalTwinsCreate).toBlocking().last().body();
    }

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, DigitalTwinsDescriptionInner digitalTwinsCreate, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, digitalTwinsCreate), serviceCallback);
    }

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DigitalTwinsDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, DigitalTwinsDescriptionInner digitalTwinsCreate) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, digitalTwinsCreate).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, DigitalTwinsDescriptionInner digitalTwinsCreate) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (digitalTwinsCreate == null) {
            throw new IllegalArgumentException("Parameter digitalTwinsCreate is required and cannot be null.");
        }
        Validator.validate(digitalTwinsCreate);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), digitalTwinsCreate, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType());
    }

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner beginCreateOrUpdate(String resourceGroupName, String resourceName, DigitalTwinsDescriptionInner digitalTwinsCreate) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, digitalTwinsCreate).toBlocking().single().body();
    }

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> beginCreateOrUpdateAsync(String resourceGroupName, String resourceName, DigitalTwinsDescriptionInner digitalTwinsCreate, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, digitalTwinsCreate), serviceCallback);
    }

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<DigitalTwinsDescriptionInner> beginCreateOrUpdateAsync(String resourceGroupName, String resourceName, DigitalTwinsDescriptionInner digitalTwinsCreate) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, digitalTwinsCreate).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, DigitalTwinsDescriptionInner digitalTwinsCreate) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (digitalTwinsCreate == null) {
            throw new IllegalArgumentException("Parameter digitalTwinsCreate is required and cannot be null.");
        }
        Validator.validate(digitalTwinsCreate);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), digitalTwinsCreate, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DigitalTwinsDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DigitalTwinsDescriptionInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DigitalTwinsDescriptionInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DigitalTwinsDescriptionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType())
                .register(201, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner update(String resourceGroupName, String resourceName) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().last().body();
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> updateAsync(String resourceGroupName, String resourceName, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DigitalTwinsDescriptionInner> updateAsync(String resourceGroupName, String resourceName) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> updateWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        DigitalTwinsPatchDescription digitalTwinsPatchDescription = new DigitalTwinsPatchDescription();
        digitalTwinsPatchDescription.withTags(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), digitalTwinsPatchDescription, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType());
    }
    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner update(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName, tags).toBlocking().last().body();
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param tags Instance tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> updateAsync(String resourceGroupName, String resourceName, Map<String, String> tags, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, resourceName, tags), serviceCallback);
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DigitalTwinsDescriptionInner> updateAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName, tags).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> updateWithServiceResponseAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        Validator.validate(tags);
        DigitalTwinsPatchDescription digitalTwinsPatchDescription = new DigitalTwinsPatchDescription();
        digitalTwinsPatchDescription.withTags(tags);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), digitalTwinsPatchDescription, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType());
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner beginUpdate(String resourceGroupName, String resourceName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> beginUpdateAsync(String resourceGroupName, String resourceName, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<DigitalTwinsDescriptionInner> beginUpdateAsync(String resourceGroupName, String resourceName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        DigitalTwinsPatchDescription digitalTwinsPatchDescription = new DigitalTwinsPatchDescription();
        digitalTwinsPatchDescription.withTags(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), digitalTwinsPatchDescription, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DigitalTwinsDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DigitalTwinsDescriptionInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner beginUpdate(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName, tags).toBlocking().single().body();
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param tags Instance tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> beginUpdateAsync(String resourceGroupName, String resourceName, Map<String, String> tags, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName, tags), serviceCallback);
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<DigitalTwinsDescriptionInner> beginUpdateAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName, tags).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update metadata of DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        Validator.validate(tags);
        DigitalTwinsPatchDescription digitalTwinsPatchDescription = new DigitalTwinsPatchDescription();
        digitalTwinsPatchDescription.withTags(tags);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), digitalTwinsPatchDescription, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DigitalTwinsDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DigitalTwinsDescriptionInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DigitalTwinsDescriptionInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DigitalTwinsDescriptionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType())
                .register(201, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete a DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner delete(String resourceGroupName, String resourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().last().body();
    }

    /**
     * Delete a DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> deleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete a DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DigitalTwinsDescriptionInner> deleteAsync(String resourceGroupName, String resourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> deleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType());
    }

    /**
     * Delete a DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DigitalTwinsDescriptionInner object if successful.
     */
    public DigitalTwinsDescriptionInner beginDelete(String resourceGroupName, String resourceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Delete a DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DigitalTwinsDescriptionInner> beginDeleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete a DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<DigitalTwinsDescriptionInner> beginDeleteAsync(String resourceGroupName, String resourceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<DigitalTwinsDescriptionInner>, DigitalTwinsDescriptionInner>() {
            @Override
            public DigitalTwinsDescriptionInner call(ServiceResponse<DigitalTwinsDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a DigitalTwinsInstance.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DigitalTwinsDescriptionInner object
     */
    public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DigitalTwinsDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<DigitalTwinsDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DigitalTwinsDescriptionInner> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DigitalTwinsDescriptionInner> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DigitalTwinsDescriptionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<DigitalTwinsDescriptionInner>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DigitalTwinsDescriptionInner&gt; object if successful.
     */
    public PagedList<DigitalTwinsDescriptionInner> list() {
        ServiceResponse<Page<DigitalTwinsDescriptionInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<DigitalTwinsDescriptionInner>(response.body()) {
            @Override
            public Page<DigitalTwinsDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DigitalTwinsDescriptionInner>> listAsync(final ListOperationCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DigitalTwinsDescriptionInner&gt; object
     */
    public Observable<Page<DigitalTwinsDescriptionInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<DigitalTwinsDescriptionInner>>, Page<DigitalTwinsDescriptionInner>>() {
                @Override
                public Page<DigitalTwinsDescriptionInner> call(ServiceResponse<Page<DigitalTwinsDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DigitalTwinsDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<DigitalTwinsDescriptionInner>>, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(ServiceResponse<Page<DigitalTwinsDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DigitalTwinsDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DigitalTwinsDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DigitalTwinsDescriptionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DigitalTwinsDescriptionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DigitalTwinsDescriptionInner&gt; object if successful.
     */
    public PagedList<DigitalTwinsDescriptionInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<DigitalTwinsDescriptionInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<DigitalTwinsDescriptionInner>(response.body()) {
            @Override
            public Page<DigitalTwinsDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DigitalTwinsDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DigitalTwinsDescriptionInner&gt; object
     */
    public Observable<Page<DigitalTwinsDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<DigitalTwinsDescriptionInner>>, Page<DigitalTwinsDescriptionInner>>() {
                @Override
                public Page<DigitalTwinsDescriptionInner> call(ServiceResponse<Page<DigitalTwinsDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DigitalTwinsDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<DigitalTwinsDescriptionInner>>, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(ServiceResponse<Page<DigitalTwinsDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
    ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DigitalTwinsDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DigitalTwinsDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DigitalTwinsDescriptionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DigitalTwinsDescriptionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Check if a DigitalTwinsInstance name is available.
     *
     * @param location Location of DigitalTwinsInstance.
     * @param name Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckNameResultInner object if successful.
     */
    public CheckNameResultInner checkNameAvailability(String location, String name) {
        return checkNameAvailabilityWithServiceResponseAsync(location, name).toBlocking().single().body();
    }

    /**
     * Check if a DigitalTwinsInstance name is available.
     *
     * @param location Location of DigitalTwinsInstance.
     * @param name Resource name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckNameResultInner> checkNameAvailabilityAsync(String location, String name, final ServiceCallback<CheckNameResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(location, name), serviceCallback);
    }

    /**
     * Check if a DigitalTwinsInstance name is available.
     *
     * @param location Location of DigitalTwinsInstance.
     * @param name Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameResultInner object
     */
    public Observable<CheckNameResultInner> checkNameAvailabilityAsync(String location, String name) {
        return checkNameAvailabilityWithServiceResponseAsync(location, name).map(new Func1<ServiceResponse<CheckNameResultInner>, CheckNameResultInner>() {
            @Override
            public CheckNameResultInner call(ServiceResponse<CheckNameResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check if a DigitalTwinsInstance name is available.
     *
     * @param location Location of DigitalTwinsInstance.
     * @param name Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameResultInner object
     */
    public Observable<ServiceResponse<CheckNameResultInner>> checkNameAvailabilityWithServiceResponseAsync(String location, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        CheckNameRequest digitalTwinsInstanceCheckName = new CheckNameRequest();
        digitalTwinsInstanceCheckName.withName(name);
        return service.checkNameAvailability(this.client.subscriptionId(), location, this.client.apiVersion(), this.client.acceptLanguage(), digitalTwinsInstanceCheckName, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckNameResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckNameResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckNameResultInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckNameResultInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CheckNameResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CheckNameResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DigitalTwinsDescriptionInner&gt; object if successful.
     */
    public PagedList<DigitalTwinsDescriptionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<DigitalTwinsDescriptionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DigitalTwinsDescriptionInner>(response.body()) {
            @Override
            public Page<DigitalTwinsDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DigitalTwinsDescriptionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<DigitalTwinsDescriptionInner>> serviceFuture, final ListOperationCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DigitalTwinsDescriptionInner&gt; object
     */
    public Observable<Page<DigitalTwinsDescriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DigitalTwinsDescriptionInner>>, Page<DigitalTwinsDescriptionInner>>() {
                @Override
                public Page<DigitalTwinsDescriptionInner> call(ServiceResponse<Page<DigitalTwinsDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DigitalTwinsDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DigitalTwinsDescriptionInner>>, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(ServiceResponse<Page<DigitalTwinsDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     *
    ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DigitalTwinsDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DigitalTwinsDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DigitalTwinsDescriptionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DigitalTwinsDescriptionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DigitalTwinsDescriptionInner&gt; object if successful.
     */
    public PagedList<DigitalTwinsDescriptionInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<DigitalTwinsDescriptionInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DigitalTwinsDescriptionInner>(response.body()) {
            @Override
            public Page<DigitalTwinsDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DigitalTwinsDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DigitalTwinsDescriptionInner>> serviceFuture, final ListOperationCallback<DigitalTwinsDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DigitalTwinsDescriptionInner&gt; object
     */
    public Observable<Page<DigitalTwinsDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DigitalTwinsDescriptionInner>>, Page<DigitalTwinsDescriptionInner>>() {
                @Override
                public Page<DigitalTwinsDescriptionInner> call(ServiceResponse<Page<DigitalTwinsDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DigitalTwinsDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DigitalTwinsDescriptionInner>>, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(ServiceResponse<Page<DigitalTwinsDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     *
    ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DigitalTwinsDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DigitalTwinsDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DigitalTwinsDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DigitalTwinsDescriptionInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DigitalTwinsDescriptionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DigitalTwinsDescriptionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
