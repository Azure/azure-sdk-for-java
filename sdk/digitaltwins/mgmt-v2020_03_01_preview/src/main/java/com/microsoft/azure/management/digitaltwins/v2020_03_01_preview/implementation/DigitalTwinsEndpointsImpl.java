/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwinsEndpoints;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.digitaltwins.v2020_03_01_preview.DigitalTwinsEndpointResource;

class DigitalTwinsEndpointsImpl extends WrapperImpl<DigitalTwinsEndpointsInner> implements DigitalTwinsEndpoints {
    private final DigitalTwinsManager manager;

    DigitalTwinsEndpointsImpl(DigitalTwinsManager manager) {
        super(manager.inner().digitalTwinsEndpoints());
        this.manager = manager;
    }

    public DigitalTwinsManager manager() {
        return this.manager;
    }

    @Override
    public DigitalTwinsEndpointResourceImpl define(String name) {
        return wrapModel(name);
    }

    private DigitalTwinsEndpointResourceImpl wrapModel(DigitalTwinsEndpointResourceInner inner) {
        return  new DigitalTwinsEndpointResourceImpl(inner, manager());
    }

    private DigitalTwinsEndpointResourceImpl wrapModel(String name) {
        return new DigitalTwinsEndpointResourceImpl(name, this.manager());
    }

    @Override
    public Observable<DigitalTwinsEndpointResource> listAsync(final String resourceGroupName, final String resourceName) {
        DigitalTwinsEndpointsInner client = this.inner();
        return client.listAsync(resourceGroupName, resourceName)
        .flatMapIterable(new Func1<Page<DigitalTwinsEndpointResourceInner>, Iterable<DigitalTwinsEndpointResourceInner>>() {
            @Override
            public Iterable<DigitalTwinsEndpointResourceInner> call(Page<DigitalTwinsEndpointResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DigitalTwinsEndpointResourceInner, DigitalTwinsEndpointResource>() {
            @Override
            public DigitalTwinsEndpointResource call(DigitalTwinsEndpointResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<DigitalTwinsEndpointResource> getAsync(String resourceGroupName, String resourceName, String endpointName) {
        DigitalTwinsEndpointsInner client = this.inner();
        return client.getAsync(resourceGroupName, resourceName, endpointName)
        .flatMap(new Func1<DigitalTwinsEndpointResourceInner, Observable<DigitalTwinsEndpointResource>>() {
            @Override
            public Observable<DigitalTwinsEndpointResource> call(DigitalTwinsEndpointResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DigitalTwinsEndpointResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String resourceName, String endpointName) {
        DigitalTwinsEndpointsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, resourceName, endpointName).toCompletable();
    }

}
