// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesInfraVnetProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesInfraVnetProfileHci;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesInfraVnetProfileKubevirt;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesInfraVnetProfileVmware;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class VirtualNetworksPropertiesInfraVnetProfileTests {
    @Test
    public void testDeserialize() {
        VirtualNetworksPropertiesInfraVnetProfile model =
            BinaryData
                .fromString(
                    "{\"hci\":{\"mocGroup\":\"ovsm\",\"mocLocation\":\"xwabmqoe\",\"mocVnetName\":\"ifrvtpu\"},\"kubevirt\":{\"vnetName\":\"mqlgk\"},\"vmware\":{\"segmentName\":\"ndo\"}}")
                .toObject(VirtualNetworksPropertiesInfraVnetProfile.class);
        Assertions.assertEquals("ovsm", model.hci().mocGroup());
        Assertions.assertEquals("xwabmqoe", model.hci().mocLocation());
        Assertions.assertEquals("ifrvtpu", model.hci().mocVnetName());
        Assertions.assertEquals("mqlgk", model.kubevirt().vnetName());
        Assertions.assertEquals("ndo", model.vmware().segmentName());
    }

    @Test
    public void testSerialize() {
        VirtualNetworksPropertiesInfraVnetProfile model =
            new VirtualNetworksPropertiesInfraVnetProfile()
                .withHci(
                    new VirtualNetworksPropertiesInfraVnetProfileHci()
                        .withMocGroup("ovsm")
                        .withMocLocation("xwabmqoe")
                        .withMocVnetName("ifrvtpu"))
                .withKubevirt(new VirtualNetworksPropertiesInfraVnetProfileKubevirt().withVnetName("mqlgk"))
                .withVmware(new VirtualNetworksPropertiesInfraVnetProfileVmware().withSegmentName("ndo"));
        model = BinaryData.fromObject(model).toObject(VirtualNetworksPropertiesInfraVnetProfile.class);
        Assertions.assertEquals("ovsm", model.hci().mocGroup());
        Assertions.assertEquals("xwabmqoe", model.hci().mocLocation());
        Assertions.assertEquals("ifrvtpu", model.hci().mocVnetName());
        Assertions.assertEquals("mqlgk", model.kubevirt().vnetName());
        Assertions.assertEquals("ndo", model.vmware().segmentName());
    }
}
