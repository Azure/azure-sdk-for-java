// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolExtendedLocation;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus;
import com.azure.resourcemanager.hybridcontainerservice.models.CloudProviderProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.Mode;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AgentPoolInnerTests {
    @Test
    public void testDeserialize() {
        AgentPoolInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Failed\",\"status\":{\"errorMessage\":\"vjcbpwxqpsrknf\",\"readyReplicas\":1256922904,\"replicas\":1607260782},\"count\":2067966148,\"availabilityZones\":[\"wmdyvxqtay\",\"iwwroyqbexrmc\",\"ibycno\"],\"maxCount\":988905675,\"maxPods\":2121055666,\"minCount\":841332893,\"mode\":\"LB\",\"nodeLabels\":{\"pjyzhpv\":\"vah\",\"lmwlxkvugfhzo\":\"qzcjrvxdj\"},\"nodeTaints\":[\"jvzunluthnnp\",\"nxipeil\",\"jzuaejxdultskzbb\"],\"osType\":\"Windows\",\"nodeImageVersion\":\"mv\",\"vmSize\":\"kgpwoz\",\"cloudProviderProfile\":{}},\"extendedLocation\":{\"type\":\"jyofdxluusdtto\",\"name\":\"aboekqv\"},\"location\":\"elnsmvbxw\",\"tags\":{\"jixisxyawjoyaqcs\":\"flhhcaal\",\"eli\":\"yjpkiidzyexz\"},\"id\":\"hnrztfol\",\"name\":\"bnxknalaulppg\",\"type\":\"dtpnapnyiropuhp\"}")
                .toObject(AgentPoolInner.class);
        Assertions.assertEquals("elnsmvbxw", model.location());
        Assertions.assertEquals("flhhcaal", model.tags().get("jixisxyawjoyaqcs"));
        Assertions.assertEquals("jyofdxluusdtto", model.extendedLocation().type());
        Assertions.assertEquals("aboekqv", model.extendedLocation().name());
        Assertions.assertEquals("vjcbpwxqpsrknf", model.status().errorMessage());
        Assertions.assertEquals(1256922904, model.status().readyReplicas());
        Assertions.assertEquals(1607260782, model.status().replicas());
        Assertions.assertEquals(2067966148, model.count());
        Assertions.assertEquals("wmdyvxqtay", model.availabilityZones().get(0));
        Assertions.assertEquals(988905675, model.maxCount());
        Assertions.assertEquals(2121055666, model.maxPods());
        Assertions.assertEquals(841332893, model.minCount());
        Assertions.assertEquals(Mode.LB, model.mode());
        Assertions.assertEquals("vah", model.nodeLabels().get("pjyzhpv"));
        Assertions.assertEquals("jvzunluthnnp", model.nodeTaints().get(0));
        Assertions.assertEquals(OsType.WINDOWS, model.osType());
        Assertions.assertEquals("mv", model.nodeImageVersion());
        Assertions.assertEquals("kgpwoz", model.vmSize());
    }

    @Test
    public void testSerialize() {
        AgentPoolInner model =
            new AgentPoolInner()
                .withLocation("elnsmvbxw")
                .withTags(mapOf("jixisxyawjoyaqcs", "flhhcaal", "eli", "yjpkiidzyexz"))
                .withExtendedLocation(new AgentPoolExtendedLocation().withType("jyofdxluusdtto").withName("aboekqv"))
                .withStatus(
                    new AgentPoolProvisioningStatusStatus()
                        .withErrorMessage("vjcbpwxqpsrknf")
                        .withReadyReplicas(1256922904)
                        .withReplicas(1607260782))
                .withCount(2067966148)
                .withAvailabilityZones(Arrays.asList("wmdyvxqtay", "iwwroyqbexrmc", "ibycno"))
                .withMaxCount(988905675)
                .withMaxPods(2121055666)
                .withMinCount(841332893)
                .withMode(Mode.LB)
                .withNodeLabels(mapOf("pjyzhpv", "vah", "lmwlxkvugfhzo", "qzcjrvxdj"))
                .withNodeTaints(Arrays.asList("jvzunluthnnp", "nxipeil", "jzuaejxdultskzbb"))
                .withOsType(OsType.WINDOWS)
                .withNodeImageVersion("mv")
                .withVmSize("kgpwoz")
                .withCloudProviderProfile(new CloudProviderProfile());
        model = BinaryData.fromObject(model).toObject(AgentPoolInner.class);
        Assertions.assertEquals("elnsmvbxw", model.location());
        Assertions.assertEquals("flhhcaal", model.tags().get("jixisxyawjoyaqcs"));
        Assertions.assertEquals("jyofdxluusdtto", model.extendedLocation().type());
        Assertions.assertEquals("aboekqv", model.extendedLocation().name());
        Assertions.assertEquals("vjcbpwxqpsrknf", model.status().errorMessage());
        Assertions.assertEquals(1256922904, model.status().readyReplicas());
        Assertions.assertEquals(1607260782, model.status().replicas());
        Assertions.assertEquals(2067966148, model.count());
        Assertions.assertEquals("wmdyvxqtay", model.availabilityZones().get(0));
        Assertions.assertEquals(988905675, model.maxCount());
        Assertions.assertEquals(2121055666, model.maxPods());
        Assertions.assertEquals(841332893, model.minCount());
        Assertions.assertEquals(Mode.LB, model.mode());
        Assertions.assertEquals("vah", model.nodeLabels().get("pjyzhpv"));
        Assertions.assertEquals("jvzunluthnnp", model.nodeTaints().get(0));
        Assertions.assertEquals(OsType.WINDOWS, model.osType());
        Assertions.assertEquals("mv", model.nodeImageVersion());
        Assertions.assertEquals("kgpwoz", model.vmSize());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
