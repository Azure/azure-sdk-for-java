// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolListResult;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProperties;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolUpdateProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.ExtendedLocation;
import com.azure.resourcemanager.hybridcontainerservice.models.ExtendedLocationTypes;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import com.azure.resourcemanager.hybridcontainerservice.models.Ossku;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AgentPoolListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AgentPoolListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"count\":1765758465,\"vmSize\":\"xhdzxibqeojnx\",\"kubernetesVersion\":\"zvddntwndeicbtwn\",\"provisioningState\":\"Pending\",\"status\":{\"currentState\":\"Deleting\",\"errorMessage\":\"hrhcffcyddglmjth\",\"readyReplicas\":[{}]},\"osType\":\"Windows\",\"osSKU\":\"CBLMariner\",\"nodeLabels\":{\"q\":\"xmqci\",\"xuigdtopbobj\":\"hkh\",\"uhrzayvvt\":\"ghmewuam\",\"ln\":\"gvdfgiotkftutq\"},\"nodeTaints\":[\"efgugnxk\",\"xdqmidtthzrvqdra\",\"hjybigehoqfbo\"],\"maxCount\":1382683860,\"minCount\":465330089,\"enableAutoScaling\":true,\"maxPods\":1937589018},\"tags\":{\"y\":\"u\",\"nhzgpphrcgyn\":\"gqywgndrv\",\"fsxlzevgbmqjqa\":\"ocpecfvmmco\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"ivkwlzuvccfwnfnb\"},\"id\":\"fionl\",\"name\":\"bxetqgtzxdpn\",\"type\":\"bqqwxrj\"},{\"properties\":{\"count\":1993000932,\"vmSize\":\"nwsubisnj\",\"kubernetesVersion\":\"pmng\",\"provisioningState\":\"Canceled\",\"status\":{\"currentState\":\"Failed\",\"errorMessage\":\"wooc\",\"readyReplicas\":[{},{},{},{}]},\"osType\":\"Linux\",\"osSKU\":\"Windows2022\",\"nodeLabels\":{\"oflokey\":\"vlrxnjeaseiph\",\"pdjpjumasxazjp\":\"ienjbdlwtgr\"},\"nodeTaints\":[\"gual\"],\"maxCount\":523710647,\"minCount\":1163750271,\"enableAutoScaling\":false,\"maxPods\":497531730},\"tags\":{\"mcy\":\"dudgwdslfhot\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"jnpg\"},\"id\":\"ftadehxnltyfs\",\"name\":\"ppusuesnzwdejba\",\"type\":\"orxzdmohctbqvud\"},{\"properties\":{\"count\":1222672575,\"vmSize\":\"nvowgujju\",\"kubernetesVersion\":\"dkcglhsl\",\"provisioningState\":\"Failed\",\"status\":{\"currentState\":\"Deleting\",\"errorMessage\":\"dtjixhb\",\"readyReplicas\":[{},{},{},{}]},\"osType\":\"Linux\",\"osSKU\":\"Windows2019\",\"nodeLabels\":{\"bvyvdcsity\":\"hmenevfyexfwhybc\"},\"nodeTaints\":[\"amdecte\",\"f\"],\"maxCount\":1860942440,\"minCount\":993666965,\"enableAutoScaling\":true,\"maxPods\":796129419},\"tags\":{\"kqsleyyvxy\":\"zrkgqhcjrefovg\",\"cr\":\"jpkcattpng\",\"ajvnysounqe\":\"czsqpjhvm\",\"oaeupfhyhltrpmo\":\"a\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"atuokthfuiu\"},\"id\":\"dsfcpkvxodpuoz\",\"name\":\"yzydagfuaxbezyi\",\"type\":\"okktwhrdxw\"}],\"nextLink\":\"wqsmbsur\"}")
            .toObject(AgentPoolListResult.class);
        Assertions.assertEquals(OsType.WINDOWS, model.value().get(0).properties().osType());
        Assertions.assertEquals(Ossku.CBLMARINER, model.value().get(0).properties().osSku());
        Assertions.assertEquals("xmqci", model.value().get(0).properties().nodeLabels().get("q"));
        Assertions.assertEquals("efgugnxk", model.value().get(0).properties().nodeTaints().get(0));
        Assertions.assertEquals(1382683860, model.value().get(0).properties().maxCount());
        Assertions.assertEquals(465330089, model.value().get(0).properties().minCount());
        Assertions.assertEquals(true, model.value().get(0).properties().enableAutoScaling());
        Assertions.assertEquals(1937589018, model.value().get(0).properties().maxPods());
        Assertions.assertEquals(1765758465, model.value().get(0).properties().count());
        Assertions.assertEquals("xhdzxibqeojnx", model.value().get(0).properties().vmSize());
        Assertions.assertEquals("hrhcffcyddglmjth", model.value().get(0).properties().status().errorMessage());
        Assertions.assertEquals("u", model.value().get(0).tags().get("y"));
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("ivkwlzuvccfwnfnb", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("wqsmbsur", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AgentPoolListResult model
            = new AgentPoolListResult()
                .withValue(
                    Arrays
                        .asList(
                            new AgentPoolInner()
                                .withProperties(
                                    new AgentPoolProperties().withOsType(OsType.WINDOWS).withOsSku(Ossku.CBLMARINER)
                                        .withNodeLabels(mapOf("q", "xmqci", "xuigdtopbobj", "hkh", "uhrzayvvt",
                                            "ghmewuam", "ln", "gvdfgiotkftutq"))
                                        .withNodeTaints(Arrays.asList("efgugnxk", "xdqmidtthzrvqdra", "hjybigehoqfbo"))
                                        .withMaxCount(1382683860).withMinCount(465330089).withEnableAutoScaling(true)
                                        .withMaxPods(1937589018).withCount(1765758465).withVmSize("xhdzxibqeojnx")
                                        .withStatus(
                                            new AgentPoolProvisioningStatusStatus().withErrorMessage("hrhcffcyddglmjth")
                                                .withReadyReplicas(Arrays.asList(new AgentPoolUpdateProfile()))))
                                .withTags(mapOf("y", "u", "nhzgpphrcgyn", "gqywgndrv", "fsxlzevgbmqjqa", "ocpecfvmmco"))
                                .withExtendedLocation(new ExtendedLocation()
                                    .withType(ExtendedLocationTypes.CUSTOM_LOCATION).withName("ivkwlzuvccfwnfnb")),
                            new AgentPoolInner()
                                .withProperties(
                                    new AgentPoolProperties().withOsType(OsType.LINUX).withOsSku(Ossku.WINDOWS2022)
                                        .withNodeLabels(
                                            mapOf("oflokey", "fakeTokenPlaceholder", "pdjpjumasxazjp", "ienjbdlwtgr"))
                                        .withNodeTaints(Arrays.asList("gual")).withMaxCount(523710647)
                                        .withMinCount(1163750271).withEnableAutoScaling(false).withMaxPods(497531730)
                                        .withCount(1993000932).withVmSize("nwsubisnj")
                                        .withStatus(new AgentPoolProvisioningStatusStatus().withErrorMessage("wooc")
                                            .withReadyReplicas(Arrays.asList(new AgentPoolUpdateProfile(),
                                                new AgentPoolUpdateProfile(), new AgentPoolUpdateProfile(),
                                                new AgentPoolUpdateProfile()))))
                                .withTags(mapOf("mcy", "dudgwdslfhot"))
                                .withExtendedLocation(new ExtendedLocation()
                                    .withType(ExtendedLocationTypes.CUSTOM_LOCATION).withName("jnpg")),
                            new AgentPoolInner()
                                .withProperties(
                                    new AgentPoolProperties().withOsType(OsType.LINUX).withOsSku(Ossku.WINDOWS2019)
                                        .withNodeLabels(mapOf("bvyvdcsity", "hmenevfyexfwhybc"))
                                        .withNodeTaints(Arrays.asList("amdecte", "f")).withMaxCount(1860942440)
                                        .withMinCount(993666965).withEnableAutoScaling(true).withMaxPods(796129419)
                                        .withCount(1222672575).withVmSize("nvowgujju")
                                        .withStatus(new AgentPoolProvisioningStatusStatus().withErrorMessage("dtjixhb")
                                            .withReadyReplicas(Arrays.asList(new AgentPoolUpdateProfile(),
                                                new AgentPoolUpdateProfile(), new AgentPoolUpdateProfile(),
                                                new AgentPoolUpdateProfile()))))
                                .withTags(mapOf("kqsleyyvxy", "zrkgqhcjrefovg", "cr", "jpkcattpng", "ajvnysounqe",
                                    "czsqpjhvm", "oaeupfhyhltrpmo", "a"))
                                .withExtendedLocation(new ExtendedLocation()
                                    .withType(ExtendedLocationTypes.CUSTOM_LOCATION).withName("atuokthfuiu"))))
                .withNextLink("wqsmbsur");
        model = BinaryData.fromObject(model).toObject(AgentPoolListResult.class);
        Assertions.assertEquals(OsType.WINDOWS, model.value().get(0).properties().osType());
        Assertions.assertEquals(Ossku.CBLMARINER, model.value().get(0).properties().osSku());
        Assertions.assertEquals("xmqci", model.value().get(0).properties().nodeLabels().get("q"));
        Assertions.assertEquals("efgugnxk", model.value().get(0).properties().nodeTaints().get(0));
        Assertions.assertEquals(1382683860, model.value().get(0).properties().maxCount());
        Assertions.assertEquals(465330089, model.value().get(0).properties().minCount());
        Assertions.assertEquals(true, model.value().get(0).properties().enableAutoScaling());
        Assertions.assertEquals(1937589018, model.value().get(0).properties().maxPods());
        Assertions.assertEquals(1765758465, model.value().get(0).properties().count());
        Assertions.assertEquals("xhdzxibqeojnx", model.value().get(0).properties().vmSize());
        Assertions.assertEquals("hrhcffcyddglmjth", model.value().get(0).properties().status().errorMessage());
        Assertions.assertEquals("u", model.value().get(0).tags().get("y"));
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("ivkwlzuvccfwnfnb", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("wqsmbsur", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
