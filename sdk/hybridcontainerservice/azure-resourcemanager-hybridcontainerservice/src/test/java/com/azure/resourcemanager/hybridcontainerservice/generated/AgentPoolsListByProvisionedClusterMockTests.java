// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPool;
import com.azure.resourcemanager.hybridcontainerservice.models.ExtendedLocationTypes;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import com.azure.resourcemanager.hybridcontainerservice.models.Ossku;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AgentPoolsListByProvisionedClusterMockTests {
    @Test
    public void testListByProvisionedCluster() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"count\":1730428865,\"vmSize\":\"ramxjezwlwnw\",\"kubernetesVersion\":\"qlcvydy\",\"provisioningState\":\"Pending\",\"status\":{\"currentState\":\"Creating\",\"errorMessage\":\"ojknio\",\"readyReplicas\":[{\"count\":2101936696,\"vmSize\":\"wnujhemmsbvdk\",\"kubernetesVersion\":\"odtji\"}]},\"osType\":\"Windows\",\"osSKU\":\"Windows2022\",\"nodeLabels\":{\"efkdlf\":\"tkacj\"},\"nodeTaints\":[\"ggkfpagaowpul\",\"qblylsyxkqj\"],\"maxCount\":1830521196,\"minCount\":264589788,\"enableAutoScaling\":false,\"maxPods\":853584621},\"tags\":{\"psbzkfzbeyvpn\":\"sdszue\",\"v\":\"icvi\",\"rbuukzclewyhmlwp\":\"jjxd\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"ofncckwyfzqwhxxb\"},\"id\":\"qa\",\"name\":\"zfeqztppri\",\"type\":\"lxorjaltolmncws\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridContainerServiceManager manager = HybridContainerServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AgentPool> response
            = manager.agentPools().listByProvisionedCluster("yfxrx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OsType.WINDOWS, response.iterator().next().properties().osType());
        Assertions.assertEquals(Ossku.WINDOWS2022, response.iterator().next().properties().osSku());
        Assertions.assertEquals("tkacj", response.iterator().next().properties().nodeLabels().get("efkdlf"));
        Assertions.assertEquals("ggkfpagaowpul", response.iterator().next().properties().nodeTaints().get(0));
        Assertions.assertEquals(1830521196, response.iterator().next().properties().maxCount());
        Assertions.assertEquals(264589788, response.iterator().next().properties().minCount());
        Assertions.assertEquals(false, response.iterator().next().properties().enableAutoScaling());
        Assertions.assertEquals(853584621, response.iterator().next().properties().maxPods());
        Assertions.assertEquals(1730428865, response.iterator().next().properties().count());
        Assertions.assertEquals("ramxjezwlwnw", response.iterator().next().properties().vmSize());
        Assertions.assertEquals("ojknio", response.iterator().next().properties().status().errorMessage());
        Assertions.assertEquals(2101936696,
            response.iterator().next().properties().status().readyReplicas().get(0).count());
        Assertions.assertEquals("wnujhemmsbvdk",
            response.iterator().next().properties().status().readyReplicas().get(0).vmSize());
        Assertions.assertEquals("sdszue", response.iterator().next().tags().get("psbzkfzbeyvpn"));
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION,
            response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("ofncckwyfzqwhxxb", response.iterator().next().extendedLocation().name());
    }
}
