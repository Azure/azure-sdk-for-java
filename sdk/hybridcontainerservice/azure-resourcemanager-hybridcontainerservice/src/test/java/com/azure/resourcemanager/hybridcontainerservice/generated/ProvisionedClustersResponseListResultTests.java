// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ProvisionedClustersResponseInner;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClusterIdentity;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClustersResponseExtendedLocation;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClustersResponseListResult;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClustersResponseProperties;
import com.azure.resourcemanager.hybridcontainerservice.models.ResourceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ProvisionedClustersResponseListResultTests {
    @Test
    public void testDeserialize() {
        ProvisionedClustersResponseListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"identity\":{\"principalId\":\"fssxqukkfplg\",\"tenantId\":\"sxnkjzkdeslpvlo\",\"type\":\"SystemAssigned\"},\"properties\":{\"enableRbac\":false,\"addonProfiles\":{},\"kubernetesVersion\":\"dwzbaiue\",\"nodeResourceGroup\":\"umnyqu\",\"agentPoolProfiles\":[],\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"smtxpsieb\",\"name\":\"hvpesapskrdqm\"},\"location\":\"jjdhtld\",\"tags\":{\"otogtwrupqs\":\"zxuutkncwscwsvl\",\"cykvceo\":\"vnm\",\"vnotyfjfcnj\":\"eil\"},\"id\":\"k\",\"name\":\"nxdhbt\",\"type\":\"kphywpnvjto\"},{\"identity\":{\"principalId\":\"rmclfplphoxu\",\"tenantId\":\"rpabg\",\"type\":\"SystemAssigned\"},\"properties\":{\"enableRbac\":true,\"addonProfiles\":{},\"kubernetesVersion\":\"ugxywpmueef\",\"nodeResourceGroup\":\"fqkquj\",\"agentPoolProfiles\":[],\"provisioningState\":\"InProgress\"},\"extendedLocation\":{\"type\":\"ocqxtccmg\",\"name\":\"dxyt\"},\"location\":\"moyrxvwfudwpz\",\"tags\":{\"hckfrlhrx\":\"hdzhlrqj\",\"ca\":\"bkyvp\",\"b\":\"uzbpzkafku\",\"ehhseyvjusrts\":\"rnwb\"},\"id\":\"hspkdeemao\",\"name\":\"mx\",\"type\":\"gkvtmelmqkrhah\"},{\"identity\":{\"principalId\":\"uahaquhcdhmd\",\"tenantId\":\"laexqp\",\"type\":\"None\"},\"properties\":{\"enableRbac\":true,\"addonProfiles\":{},\"kubernetesVersion\":\"gvxp\",\"nodeResourceGroup\":\"mzlfmisgwb\",\"agentPoolProfiles\":[],\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"liourqhak\",\"name\":\"hashsfwxosow\"},\"location\":\"xcug\",\"tags\":{\"wfvovbv\":\"ooxdjebwpuc\",\"jrwjueiotwm\":\"euecivyhzceuoj\",\"rjaw\":\"dytdxwitx\"},\"id\":\"qwgxhniskx\",\"name\":\"bkpyc\",\"type\":\"klwndnhjdauwhv\"}],\"nextLink\":\"wzbtdhxu\"}")
                .toObject(ProvisionedClustersResponseListResult.class);
        Assertions.assertEquals("jjdhtld", model.value().get(0).location());
        Assertions.assertEquals("zxuutkncwscwsvl", model.value().get(0).tags().get("otogtwrupqs"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(false, model.value().get(0).properties().enableRbac());
        Assertions.assertEquals("dwzbaiue", model.value().get(0).properties().kubernetesVersion());
        Assertions.assertEquals("umnyqu", model.value().get(0).properties().nodeResourceGroup());
        Assertions.assertEquals("smtxpsieb", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("hvpesapskrdqm", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("wzbtdhxu", model.nextLink());
    }

    @Test
    public void testSerialize() {
        ProvisionedClustersResponseListResult model =
            new ProvisionedClustersResponseListResult()
                .withValue(
                    Arrays
                        .asList(
                            new ProvisionedClustersResponseInner()
                                .withLocation("jjdhtld")
                                .withTags(
                                    mapOf("otogtwrupqs", "zxuutkncwscwsvl", "cykvceo", "vnm", "vnotyfjfcnj", "eil"))
                                .withIdentity(
                                    new ProvisionedClusterIdentity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                                .withProperties(
                                    new ProvisionedClustersResponseProperties()
                                        .withEnableRbac(false)
                                        .withAddonProfiles(mapOf())
                                        .withKubernetesVersion("dwzbaiue")
                                        .withNodeResourceGroup("umnyqu")
                                        .withAgentPoolProfiles(Arrays.asList()))
                                .withExtendedLocation(
                                    new ProvisionedClustersResponseExtendedLocation()
                                        .withType("smtxpsieb")
                                        .withName("hvpesapskrdqm")),
                            new ProvisionedClustersResponseInner()
                                .withLocation("moyrxvwfudwpz")
                                .withTags(
                                    mapOf(
                                        "hckfrlhrx",
                                        "hdzhlrqj",
                                        "ca",
                                        "bkyvp",
                                        "b",
                                        "uzbpzkafku",
                                        "ehhseyvjusrts",
                                        "rnwb"))
                                .withIdentity(
                                    new ProvisionedClusterIdentity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                                .withProperties(
                                    new ProvisionedClustersResponseProperties()
                                        .withEnableRbac(true)
                                        .withAddonProfiles(mapOf())
                                        .withKubernetesVersion("ugxywpmueef")
                                        .withNodeResourceGroup("fqkquj")
                                        .withAgentPoolProfiles(Arrays.asList()))
                                .withExtendedLocation(
                                    new ProvisionedClustersResponseExtendedLocation()
                                        .withType("ocqxtccmg")
                                        .withName("dxyt")),
                            new ProvisionedClustersResponseInner()
                                .withLocation("xcug")
                                .withTags(
                                    mapOf(
                                        "wfvovbv", "ooxdjebwpuc", "jrwjueiotwm", "euecivyhzceuoj", "rjaw", "dytdxwitx"))
                                .withIdentity(new ProvisionedClusterIdentity().withType(ResourceIdentityType.NONE))
                                .withProperties(
                                    new ProvisionedClustersResponseProperties()
                                        .withEnableRbac(true)
                                        .withAddonProfiles(mapOf())
                                        .withKubernetesVersion("gvxp")
                                        .withNodeResourceGroup("mzlfmisgwb")
                                        .withAgentPoolProfiles(Arrays.asList()))
                                .withExtendedLocation(
                                    new ProvisionedClustersResponseExtendedLocation()
                                        .withType("liourqhak")
                                        .withName("hashsfwxosow"))))
                .withNextLink("wzbtdhxu");
        model = BinaryData.fromObject(model).toObject(ProvisionedClustersResponseListResult.class);
        Assertions.assertEquals("jjdhtld", model.value().get(0).location());
        Assertions.assertEquals("zxuutkncwscwsvl", model.value().get(0).tags().get("otogtwrupqs"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(false, model.value().get(0).properties().enableRbac());
        Assertions.assertEquals("dwzbaiue", model.value().get(0).properties().kubernetesVersion());
        Assertions.assertEquals("umnyqu", model.value().get(0).properties().nodeResourceGroup());
        Assertions.assertEquals("smtxpsieb", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("hvpesapskrdqm", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("wzbtdhxu", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
