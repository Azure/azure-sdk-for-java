// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.StorageSpacesInner;
import com.azure.resourcemanager.hybridcontainerservice.models.StorageSpacesExtendedLocation;
import com.azure.resourcemanager.hybridcontainerservice.models.StorageSpacesProperties;
import com.azure.resourcemanager.hybridcontainerservice.models.StorageSpacesPropertiesHciStorageProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.StorageSpacesPropertiesStatus;
import com.azure.resourcemanager.hybridcontainerservice.models.StorageSpacesPropertiesVmwareStorageProfile;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StorageSpacesInnerTests {
    @Test
    public void testDeserialize() {
        StorageSpacesInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"hciStorageProfile\":{\"mocGroup\":\"bwemhairs\",\"mocLocation\":\"gzd\",\"mocStorageContainer\":\"swe\"},\"vmwareStorageProfile\":{\"datacenter\":\"w\",\"datastore\":\"ggicccnxqhue\",\"folder\":\"ktt\",\"resourcePool\":\"tvlz\"},\"provisioningState\":\"Updating\",\"status\":{}},\"extendedLocation\":{\"type\":\"csdtclusiypbs\",\"name\":\"ytguslf\"},\"location\":\"adcy\",\"tags\":{\"elolppvksrpqvuj\":\"kyhejhzisxgf\",\"wib\":\"raehtwdwrft\",\"cstwity\":\"rcdlbhshfwpr\"},\"id\":\"hevxcced\",\"name\":\"pnmdyodnwzxltjcv\",\"type\":\"hlt\"}")
                .toObject(StorageSpacesInner.class);
        Assertions.assertEquals("adcy", model.location());
        Assertions.assertEquals("kyhejhzisxgf", model.tags().get("elolppvksrpqvuj"));
        Assertions.assertEquals("bwemhairs", model.properties().hciStorageProfile().mocGroup());
        Assertions.assertEquals("gzd", model.properties().hciStorageProfile().mocLocation());
        Assertions.assertEquals("swe", model.properties().hciStorageProfile().mocStorageContainer());
        Assertions.assertEquals("w", model.properties().vmwareStorageProfile().datacenter());
        Assertions.assertEquals("ggicccnxqhue", model.properties().vmwareStorageProfile().datastore());
        Assertions.assertEquals("ktt", model.properties().vmwareStorageProfile().folder());
        Assertions.assertEquals("tvlz", model.properties().vmwareStorageProfile().resourcePool());
        Assertions.assertEquals("csdtclusiypbs", model.extendedLocation().type());
        Assertions.assertEquals("ytguslf", model.extendedLocation().name());
    }

    @Test
    public void testSerialize() {
        StorageSpacesInner model =
            new StorageSpacesInner()
                .withLocation("adcy")
                .withTags(mapOf("elolppvksrpqvuj", "kyhejhzisxgf", "wib", "raehtwdwrft", "cstwity", "rcdlbhshfwpr"))
                .withProperties(
                    new StorageSpacesProperties()
                        .withHciStorageProfile(
                            new StorageSpacesPropertiesHciStorageProfile()
                                .withMocGroup("bwemhairs")
                                .withMocLocation("gzd")
                                .withMocStorageContainer("swe"))
                        .withVmwareStorageProfile(
                            new StorageSpacesPropertiesVmwareStorageProfile()
                                .withDatacenter("w")
                                .withDatastore("ggicccnxqhue")
                                .withFolder("ktt")
                                .withResourcePool("tvlz"))
                        .withStatus(new StorageSpacesPropertiesStatus()))
                .withExtendedLocation(
                    new StorageSpacesExtendedLocation().withType("csdtclusiypbs").withName("ytguslf"));
        model = BinaryData.fromObject(model).toObject(StorageSpacesInner.class);
        Assertions.assertEquals("adcy", model.location());
        Assertions.assertEquals("kyhejhzisxgf", model.tags().get("elolppvksrpqvuj"));
        Assertions.assertEquals("bwemhairs", model.properties().hciStorageProfile().mocGroup());
        Assertions.assertEquals("gzd", model.properties().hciStorageProfile().mocLocation());
        Assertions.assertEquals("swe", model.properties().hciStorageProfile().mocStorageContainer());
        Assertions.assertEquals("w", model.properties().vmwareStorageProfile().datacenter());
        Assertions.assertEquals("ggicccnxqhue", model.properties().vmwareStorageProfile().datastore());
        Assertions.assertEquals("ktt", model.properties().vmwareStorageProfile().folder());
        Assertions.assertEquals("tvlz", model.properties().vmwareStorageProfile().resourcePool());
        Assertions.assertEquals("csdtclusiypbs", model.extendedLocation().type());
        Assertions.assertEquals("ytguslf", model.extendedLocation().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
