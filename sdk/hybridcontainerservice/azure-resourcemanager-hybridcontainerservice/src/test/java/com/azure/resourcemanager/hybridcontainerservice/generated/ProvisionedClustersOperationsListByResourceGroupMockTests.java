// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager;
import com.azure.resourcemanager.hybridcontainerservice.models.LicenseType;
import com.azure.resourcemanager.hybridcontainerservice.models.LoadBalancerSku;
import com.azure.resourcemanager.hybridcontainerservice.models.Mode;
import com.azure.resourcemanager.hybridcontainerservice.models.NetworkPolicy;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClustersResponse;
import com.azure.resourcemanager.hybridcontainerservice.models.ResourceIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ProvisionedClustersOperationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"identity\":{\"principalId\":\"pqlmfe\",\"tenantId\":\"erqwkyhkobopg\",\"type\":\"SystemAssigned\"},\"properties\":{\"enableRbac\":true,\"linuxProfile\":{\"adminUsername\":\"pbqpcrfkbwccsn\"},\"features\":{},\"addonProfiles\":{},\"controlPlane\":{\"name\":\"kftnkhtjsyin\",\"count\":291919724,\"availabilityZones\":[],\"maxCount\":1429918025,\"maxPods\":231439885,\"minCount\":1405342126,\"mode\":\"User\",\"nodeLabels\":{},\"nodeTaints\":[],\"osType\":\"Windows\",\"nodeImageVersion\":\"ikdgszywkbir\",\"vmSize\":\"uzhlhkjoqrv\"},\"kubernetesVersion\":\"atjinrvgoupmfiib\",\"networkProfile\":{\"loadBalancerSku\":\"unmanaged\",\"dnsServiceIP\":\"olvrw\",\"networkPolicy\":\"calico\",\"podCidr\":\"kkgll\",\"podCidrs\":[],\"serviceCidr\":\"ygvjayvblmh\",\"serviceCidrs\":[]},\"nodeResourceGroup\":\"uhbxvvy\",\"agentPoolProfiles\":[],\"cloudProviderProfile\":{},\"provisioningState\":\"Updating\",\"status\":{\"addonStatus\":{},\"errorMessage\":\"g\"},\"aadProfile\":{\"adminGroupObjectIDs\":[],\"clientAppID\":\"fbn\",\"enableAzureRbac\":true,\"managed\":false,\"serverAppID\":\"p\",\"tenantID\":\"gitvg\"},\"windowsProfile\":{\"adminUsername\":\"rixkwmyijejve\",\"enableCsiProxy\":true,\"licenseType\":\"Windows_Server\"},\"httpProxyConfig\":{\"httpProxy\":\"ixexcc\",\"httpsProxy\":\"reaxhcexdr\",\"noProxy\":[],\"trustedCa\":\"ahqkg\",\"username\":\"pwijnhy\"}},\"extendedLocation\":{\"type\":\"ycxzbfvoo\",\"name\":\"rvmtgjq\"},\"location\":\"pyostronzmyhgfi\",\"tags\":{\"fxtsgum\":\"xkmcwaekrrjre\"},\"id\":\"jglikkxwslolb\",\"name\":\"pvuzlmv\",\"type\":\"elfk\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        HybridContainerServiceManager manager =
            HybridContainerServiceManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ProvisionedClustersResponse> response =
            manager.provisionedClustersOperations().listByResourceGroup("celve", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pyostronzmyhgfi", response.iterator().next().location());
        Assertions.assertEquals("xkmcwaekrrjre", response.iterator().next().tags().get("fxtsgum"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("fbn", response.iterator().next().properties().aadProfile().clientAppId());
        Assertions.assertEquals(true, response.iterator().next().properties().aadProfile().enableAzureRbac());
        Assertions.assertEquals(false, response.iterator().next().properties().aadProfile().managed());
        Assertions.assertEquals("p", response.iterator().next().properties().aadProfile().serverAppId());
        Assertions.assertEquals("gitvg", response.iterator().next().properties().aadProfile().tenantId());
        Assertions
            .assertEquals("rixkwmyijejve", response.iterator().next().properties().windowsProfile().adminUsername());
        Assertions.assertEquals(true, response.iterator().next().properties().windowsProfile().enableCsiProxy());
        Assertions
            .assertEquals(
                LicenseType.WINDOWS_SERVER, response.iterator().next().properties().windowsProfile().licenseType());
        Assertions.assertEquals("ixexcc", response.iterator().next().properties().httpProxyConfig().httpProxy());
        Assertions.assertEquals("reaxhcexdr", response.iterator().next().properties().httpProxyConfig().httpsProxy());
        Assertions.assertEquals("ahqkg", response.iterator().next().properties().httpProxyConfig().trustedCa());
        Assertions.assertEquals("pwijnhy", response.iterator().next().properties().httpProxyConfig().username());
        Assertions.assertEquals(true, response.iterator().next().properties().enableRbac());
        Assertions
            .assertEquals("pbqpcrfkbwccsn", response.iterator().next().properties().linuxProfile().adminUsername());
        Assertions.assertEquals(291919724, response.iterator().next().properties().controlPlane().count());
        Assertions.assertEquals(1429918025, response.iterator().next().properties().controlPlane().maxCount());
        Assertions.assertEquals(231439885, response.iterator().next().properties().controlPlane().maxPods());
        Assertions.assertEquals(1405342126, response.iterator().next().properties().controlPlane().minCount());
        Assertions.assertEquals(Mode.USER, response.iterator().next().properties().controlPlane().mode());
        Assertions.assertEquals(OsType.WINDOWS, response.iterator().next().properties().controlPlane().osType());
        Assertions
            .assertEquals("ikdgszywkbir", response.iterator().next().properties().controlPlane().nodeImageVersion());
        Assertions.assertEquals("uzhlhkjoqrv", response.iterator().next().properties().controlPlane().vmSize());
        Assertions.assertEquals("kftnkhtjsyin", response.iterator().next().properties().controlPlane().name());
        Assertions.assertEquals("atjinrvgoupmfiib", response.iterator().next().properties().kubernetesVersion());
        Assertions
            .assertEquals(
                LoadBalancerSku.UNMANAGED, response.iterator().next().properties().networkProfile().loadBalancerSku());
        Assertions.assertEquals("olvrw", response.iterator().next().properties().networkProfile().dnsServiceIp());
        Assertions
            .assertEquals(
                NetworkPolicy.CALICO, response.iterator().next().properties().networkProfile().networkPolicy());
        Assertions.assertEquals("kkgll", response.iterator().next().properties().networkProfile().podCidr());
        Assertions.assertEquals("ygvjayvblmh", response.iterator().next().properties().networkProfile().serviceCidr());
        Assertions.assertEquals("uhbxvvy", response.iterator().next().properties().nodeResourceGroup());
        Assertions.assertEquals("ycxzbfvoo", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("rvmtgjq", response.iterator().next().extendedLocation().name());
    }
}
