// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.models.AadProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.HttpProxyConfig;
import com.azure.resourcemanager.hybridcontainerservice.models.LicenseType;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClustersPropertiesWithSecrets;
import com.azure.resourcemanager.hybridcontainerservice.models.WindowsProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ProvisionedClustersPropertiesWithSecretsTests {
    @Test
    public void testDeserialize() {
        ProvisionedClustersPropertiesWithSecrets model =
            BinaryData
                .fromString(
                    "{\"aadProfile\":{\"adminGroupObjectIDs\":[\"conuqszfkbeype\",\"rmjmwvvjektc\",\"senhwlrs\",\"frzpwvlqdqgb\"],\"clientAppID\":\"ylihkaetckt\",\"enableAzureRbac\":true,\"managed\":false,\"serverAppID\":\"snkymuctq\",\"tenantID\":\"fbebrjcxer\",\"serverAppSecret\":\"wutttxfvjrbi\"},\"windowsProfile\":{\"adminPassword\":\"xepcyvahfn\",\"adminUsername\":\"kyqxjvuujqgidokg\",\"enableCsiProxy\":true,\"licenseType\":\"Windows_Server\"},\"httpProxyConfig\":{\"password\":\"vcltbgsncgh\",\"httpProxy\":\"esz\",\"httpsProxy\":\"bijhtxfvgxbf\",\"noProxy\":[\"nehmpvecx\",\"odebfqkkrbmpu\",\"gr\"],\"trustedCa\":\"flz\",\"username\":\"bxzpuzycisp\"}}")
                .toObject(ProvisionedClustersPropertiesWithSecrets.class);
        Assertions.assertEquals("wutttxfvjrbi", model.aadProfile().serverAppSecret());
        Assertions.assertEquals("conuqszfkbeype", model.aadProfile().adminGroupObjectIDs().get(0));
        Assertions.assertEquals("ylihkaetckt", model.aadProfile().clientAppId());
        Assertions.assertEquals(true, model.aadProfile().enableAzureRbac());
        Assertions.assertEquals(false, model.aadProfile().managed());
        Assertions.assertEquals("snkymuctq", model.aadProfile().serverAppId());
        Assertions.assertEquals("fbebrjcxer", model.aadProfile().tenantId());
        Assertions.assertEquals("kyqxjvuujqgidokg", model.windowsProfile().adminUsername());
        Assertions.assertEquals(true, model.windowsProfile().enableCsiProxy());
        Assertions.assertEquals(LicenseType.WINDOWS_SERVER, model.windowsProfile().licenseType());
        Assertions.assertEquals("xepcyvahfn", model.windowsProfile().adminPassword());
        Assertions.assertEquals("esz", model.httpProxyConfig().httpProxy());
        Assertions.assertEquals("bijhtxfvgxbf", model.httpProxyConfig().httpsProxy());
        Assertions.assertEquals("nehmpvecx", model.httpProxyConfig().noProxy().get(0));
        Assertions.assertEquals("flz", model.httpProxyConfig().trustedCa());
        Assertions.assertEquals("bxzpuzycisp", model.httpProxyConfig().username());
        Assertions.assertEquals("vcltbgsncgh", model.httpProxyConfig().password());
    }

    @Test
    public void testSerialize() {
        ProvisionedClustersPropertiesWithSecrets model =
            new ProvisionedClustersPropertiesWithSecrets()
                .withAadProfile(
                    new AadProfile()
                        .withServerAppSecret("wutttxfvjrbi")
                        .withAdminGroupObjectIDs(
                            Arrays.asList("conuqszfkbeype", "rmjmwvvjektc", "senhwlrs", "frzpwvlqdqgb"))
                        .withClientAppId("ylihkaetckt")
                        .withEnableAzureRbac(true)
                        .withManaged(false)
                        .withServerAppId("snkymuctq")
                        .withTenantId("fbebrjcxer"))
                .withWindowsProfile(
                    new WindowsProfile()
                        .withAdminUsername("kyqxjvuujqgidokg")
                        .withEnableCsiProxy(true)
                        .withLicenseType(LicenseType.WINDOWS_SERVER)
                        .withAdminPassword("xepcyvahfn"))
                .withHttpProxyConfig(
                    new HttpProxyConfig()
                        .withHttpProxy("esz")
                        .withHttpsProxy("bijhtxfvgxbf")
                        .withNoProxy(Arrays.asList("nehmpvecx", "odebfqkkrbmpu", "gr"))
                        .withTrustedCa("flz")
                        .withUsername("bxzpuzycisp")
                        .withPassword("vcltbgsncgh"));
        model = BinaryData.fromObject(model).toObject(ProvisionedClustersPropertiesWithSecrets.class);
        Assertions.assertEquals("wutttxfvjrbi", model.aadProfile().serverAppSecret());
        Assertions.assertEquals("conuqszfkbeype", model.aadProfile().adminGroupObjectIDs().get(0));
        Assertions.assertEquals("ylihkaetckt", model.aadProfile().clientAppId());
        Assertions.assertEquals(true, model.aadProfile().enableAzureRbac());
        Assertions.assertEquals(false, model.aadProfile().managed());
        Assertions.assertEquals("snkymuctq", model.aadProfile().serverAppId());
        Assertions.assertEquals("fbebrjcxer", model.aadProfile().tenantId());
        Assertions.assertEquals("kyqxjvuujqgidokg", model.windowsProfile().adminUsername());
        Assertions.assertEquals(true, model.windowsProfile().enableCsiProxy());
        Assertions.assertEquals(LicenseType.WINDOWS_SERVER, model.windowsProfile().licenseType());
        Assertions.assertEquals("xepcyvahfn", model.windowsProfile().adminPassword());
        Assertions.assertEquals("esz", model.httpProxyConfig().httpProxy());
        Assertions.assertEquals("bijhtxfvgxbf", model.httpProxyConfig().httpsProxy());
        Assertions.assertEquals("nehmpvecx", model.httpProxyConfig().noProxy().get(0));
        Assertions.assertEquals("flz", model.httpProxyConfig().trustedCa());
        Assertions.assertEquals("bxzpuzycisp", model.httpProxyConfig().username());
        Assertions.assertEquals("vcltbgsncgh", model.httpProxyConfig().password());
    }
}
