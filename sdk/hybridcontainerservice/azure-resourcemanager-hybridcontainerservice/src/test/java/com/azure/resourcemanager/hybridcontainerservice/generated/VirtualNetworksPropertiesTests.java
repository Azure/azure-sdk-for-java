// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksProperties;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesInfraVnetProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesInfraVnetProfileHci;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesInfraVnetProfileKubevirt;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesInfraVnetProfileVmware;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesVipPoolItem;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPropertiesVmipPoolItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class VirtualNetworksPropertiesTests {
    @Test
    public void testDeserialize() {
        VirtualNetworksProperties model =
            BinaryData
                .fromString(
                    "{\"infraVnetProfile\":{\"hci\":{\"mocGroup\":\"bw\",\"mocLocation\":\"jhemms\",\"mocVnetName\":\"dkcrodt\"},\"kubevirt\":{\"vnetName\":\"fw\"},\"vmware\":{\"segmentName\":\"lt\"}},\"vipPool\":[{\"endIP\":\"vefkdlfoakggk\",\"startIP\":\"agaowpulpqblylsy\"},{\"endIP\":\"qjnsjervtia\",\"startIP\":\"sdszue\"},{\"endIP\":\"sbzkf\",\"startIP\":\"eyvpnqicvinvkj\"}],\"vmipPool\":[{\"endIP\":\"rbuukzclewyhmlwp\",\"startIP\":\"tzpofncckwyfzq\"},{\"endIP\":\"xxbuyq\",\"startIP\":\"zfeqztppri\"},{\"endIP\":\"xorjaltolmncwsob\",\"startIP\":\"csdbnwdcfhuc\"}],\"dhcpServers\":[\"fuvglsbjjca\",\"vxb\",\"t\"],\"dnsServers\":[\"utncorm\"],\"gateway\":\"xqtvcofu\",\"ipAddressPrefix\":\"lvkgju\",\"vlanID\":\"dknnqvsazn\",\"provisioningState\":\"Failed\",\"status\":{\"provisioningStatus\":{\"operationId\":\"sgsahmkycgr\",\"phase\":\"wjue\",\"status\":\"eburu\"}}}")
                .toObject(VirtualNetworksProperties.class);
        Assertions.assertEquals("bw", model.infraVnetProfile().hci().mocGroup());
        Assertions.assertEquals("jhemms", model.infraVnetProfile().hci().mocLocation());
        Assertions.assertEquals("dkcrodt", model.infraVnetProfile().hci().mocVnetName());
        Assertions.assertEquals("fw", model.infraVnetProfile().kubevirt().vnetName());
        Assertions.assertEquals("lt", model.infraVnetProfile().vmware().segmentName());
        Assertions.assertEquals("vefkdlfoakggk", model.vipPool().get(0).endIp());
        Assertions.assertEquals("agaowpulpqblylsy", model.vipPool().get(0).startIp());
        Assertions.assertEquals("rbuukzclewyhmlwp", model.vmipPool().get(0).endIp());
        Assertions.assertEquals("tzpofncckwyfzq", model.vmipPool().get(0).startIp());
    }

    @Test
    public void testSerialize() {
        VirtualNetworksProperties model =
            new VirtualNetworksProperties()
                .withInfraVnetProfile(
                    new VirtualNetworksPropertiesInfraVnetProfile()
                        .withHci(
                            new VirtualNetworksPropertiesInfraVnetProfileHci()
                                .withMocGroup("bw")
                                .withMocLocation("jhemms")
                                .withMocVnetName("dkcrodt"))
                        .withKubevirt(new VirtualNetworksPropertiesInfraVnetProfileKubevirt().withVnetName("fw"))
                        .withVmware(new VirtualNetworksPropertiesInfraVnetProfileVmware().withSegmentName("lt")))
                .withVipPool(
                    Arrays
                        .asList(
                            new VirtualNetworksPropertiesVipPoolItem()
                                .withEndIp("vefkdlfoakggk")
                                .withStartIp("agaowpulpqblylsy"),
                            new VirtualNetworksPropertiesVipPoolItem().withEndIp("qjnsjervtia").withStartIp("sdszue"),
                            new VirtualNetworksPropertiesVipPoolItem()
                                .withEndIp("sbzkf")
                                .withStartIp("eyvpnqicvinvkj")))
                .withVmipPool(
                    Arrays
                        .asList(
                            new VirtualNetworksPropertiesVmipPoolItem()
                                .withEndIp("rbuukzclewyhmlwp")
                                .withStartIp("tzpofncckwyfzq"),
                            new VirtualNetworksPropertiesVmipPoolItem().withEndIp("xxbuyq").withStartIp("zfeqztppri"),
                            new VirtualNetworksPropertiesVmipPoolItem()
                                .withEndIp("xorjaltolmncwsob")
                                .withStartIp("csdbnwdcfhuc")));
        model = BinaryData.fromObject(model).toObject(VirtualNetworksProperties.class);
        Assertions.assertEquals("bw", model.infraVnetProfile().hci().mocGroup());
        Assertions.assertEquals("jhemms", model.infraVnetProfile().hci().mocLocation());
        Assertions.assertEquals("dkcrodt", model.infraVnetProfile().hci().mocVnetName());
        Assertions.assertEquals("fw", model.infraVnetProfile().kubevirt().vnetName());
        Assertions.assertEquals("lt", model.infraVnetProfile().vmware().segmentName());
        Assertions.assertEquals("vefkdlfoakggk", model.vipPool().get(0).endIp());
        Assertions.assertEquals("agaowpulpqblylsy", model.vipPool().get(0).startIp());
        Assertions.assertEquals("rbuukzclewyhmlwp", model.vmipPool().get(0).endIp());
        Assertions.assertEquals("tzpofncckwyfzq", model.vmipPool().get(0).startIp());
    }
}
