// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolListResultInner;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolExtendedLocation;
import com.azure.resourcemanager.hybridcontainerservice.models.Mode;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AgentPoolListResultInnerTests {
    @Test
    public void testDeserialize() {
        AgentPoolListResultInner model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"count\":1045217690,\"availabilityZones\":[],\"maxCount\":1515008733,\"maxPods\":286824564,\"minCount\":1616602527,\"mode\":\"System\",\"nodeLabels\":{},\"nodeTaints\":[],\"osType\":\"Windows\",\"nodeImageVersion\":\"ylpstdbhhxsrzdz\",\"vmSize\":\"erscdntne\"},\"extendedLocation\":{\"type\":\"mygtdssls\",\"name\":\"mweriofzpy\"},\"location\":\"semwabnet\",\"tags\":{\"wubmwmbesldn\":\"szhedplvw\",\"lcxog\":\"wwtppj\",\"qqkdltfzxmhhvhgu\":\"okonzmnsikvmkqz\",\"xtibqdxbxwakbog\":\"eodkwobda\"},\"id\":\"xndlkzgxhu\",\"name\":\"iplbpodxunkbebxm\",\"type\":\"byyntwlrbqt\"},{\"properties\":{\"provisioningState\":\"InProgress\",\"count\":1053107000,\"availabilityZones\":[],\"maxCount\":670592534,\"maxPods\":1813369281,\"minCount\":1291535699,\"mode\":\"System\",\"nodeLabels\":{},\"nodeTaints\":[],\"osType\":\"Windows\",\"nodeImageVersion\":\"wzizxbmpgcjefuzm\",\"vmSize\":\"pbttdum\"},\"extendedLocation\":{\"type\":\"ebmnzbtbhjpglk\",\"name\":\"ohdneuel\"},\"location\":\"phsdyhto\",\"tags\":{\"wwquuvxzxclvithh\":\"kd\",\"hcohfwdsjnk\":\"zonosgg\",\"swacffgdkzz\":\"ljuti\"},\"id\":\"wkfvhqcrailvp\",\"name\":\"ppfufl\",\"type\":\"wdmhdlxyjrxs\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"count\":1665526827,\"availabilityZones\":[],\"maxCount\":1260393669,\"maxPods\":808700317,\"minCount\":1856225206,\"mode\":\"User\",\"nodeLabels\":{},\"nodeTaints\":[],\"osType\":\"Windows\",\"nodeImageVersion\":\"kcvqvpke\",\"vmSize\":\"cvdrhvoodsot\"},\"extendedLocation\":{\"type\":\"opcjwvnhd\",\"name\":\"wmgxcxrsl\"},\"location\":\"mutwuoe\",\"tags\":{\"yqsluic\":\"khjwn\",\"modfvuefywsbpfvm\":\"dggkzzlvmbmpa\"},\"id\":\"yhrfouyftaakcpw\",\"name\":\"yzvqt\",\"type\":\"nubexk\"},{\"properties\":{\"provisioningState\":\"InProgress\",\"count\":487764269,\"availabilityZones\":[],\"maxCount\":1929847054,\"maxPods\":1598005613,\"minCount\":1083170526,\"mode\":\"LB\",\"nodeLabels\":{},\"nodeTaints\":[],\"osType\":\"Windows\",\"nodeImageVersion\":\"pkwhojvpa\",\"vmSize\":\"gxysmocmbqfqvm\"},\"extendedLocation\":{\"type\":\"apvhelxprgly\",\"name\":\"dd\"},\"location\":\"kcbcue\",\"tags\":{\"qibrhosxsdqrhzoy\":\"xgc\",\"m\":\"i\",\"hwflu\":\"qyib\"},\"id\":\"zdtmhrkwofy\",\"name\":\"voqacpiexpbt\",\"type\":\"iwbwoenwashrtdtk\"}],\"nextLink\":\"qxwbpokulpiu\"}")
                .toObject(AgentPoolListResultInner.class);
        Assertions.assertEquals("semwabnet", model.value().get(0).location());
        Assertions.assertEquals("szhedplvw", model.value().get(0).tags().get("wubmwmbesldn"));
        Assertions.assertEquals("mygtdssls", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("mweriofzpy", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals(1045217690, model.value().get(0).count());
        Assertions.assertEquals(1515008733, model.value().get(0).maxCount());
        Assertions.assertEquals(286824564, model.value().get(0).maxPods());
        Assertions.assertEquals(1616602527, model.value().get(0).minCount());
        Assertions.assertEquals(Mode.SYSTEM, model.value().get(0).mode());
        Assertions.assertEquals(OsType.WINDOWS, model.value().get(0).osType());
        Assertions.assertEquals("ylpstdbhhxsrzdz", model.value().get(0).nodeImageVersion());
        Assertions.assertEquals("erscdntne", model.value().get(0).vmSize());
        Assertions.assertEquals("qxwbpokulpiu", model.nextLink());
    }

    @Test
    public void testSerialize() {
        AgentPoolListResultInner model =
            new AgentPoolListResultInner()
                .withValue(
                    Arrays
                        .asList(
                            new AgentPoolInner()
                                .withLocation("semwabnet")
                                .withTags(
                                    mapOf(
                                        "wubmwmbesldn",
                                        "szhedplvw",
                                        "lcxog",
                                        "wwtppj",
                                        "qqkdltfzxmhhvhgu",
                                        "okonzmnsikvmkqz",
                                        "xtibqdxbxwakbog",
                                        "eodkwobda"))
                                .withExtendedLocation(
                                    new AgentPoolExtendedLocation().withType("mygtdssls").withName("mweriofzpy"))
                                .withCount(1045217690)
                                .withAvailabilityZones(Arrays.asList())
                                .withMaxCount(1515008733)
                                .withMaxPods(286824564)
                                .withMinCount(1616602527)
                                .withMode(Mode.SYSTEM)
                                .withNodeLabels(mapOf())
                                .withNodeTaints(Arrays.asList())
                                .withOsType(OsType.WINDOWS)
                                .withNodeImageVersion("ylpstdbhhxsrzdz")
                                .withVmSize("erscdntne"),
                            new AgentPoolInner()
                                .withLocation("phsdyhto")
                                .withTags(
                                    mapOf("wwquuvxzxclvithh", "kd", "hcohfwdsjnk", "zonosgg", "swacffgdkzz", "ljuti"))
                                .withExtendedLocation(
                                    new AgentPoolExtendedLocation().withType("ebmnzbtbhjpglk").withName("ohdneuel"))
                                .withCount(1053107000)
                                .withAvailabilityZones(Arrays.asList())
                                .withMaxCount(670592534)
                                .withMaxPods(1813369281)
                                .withMinCount(1291535699)
                                .withMode(Mode.SYSTEM)
                                .withNodeLabels(mapOf())
                                .withNodeTaints(Arrays.asList())
                                .withOsType(OsType.WINDOWS)
                                .withNodeImageVersion("wzizxbmpgcjefuzm")
                                .withVmSize("pbttdum"),
                            new AgentPoolInner()
                                .withLocation("mutwuoe")
                                .withTags(mapOf("yqsluic", "khjwn", "modfvuefywsbpfvm", "dggkzzlvmbmpa"))
                                .withExtendedLocation(
                                    new AgentPoolExtendedLocation().withType("opcjwvnhd").withName("wmgxcxrsl"))
                                .withCount(1665526827)
                                .withAvailabilityZones(Arrays.asList())
                                .withMaxCount(1260393669)
                                .withMaxPods(808700317)
                                .withMinCount(1856225206)
                                .withMode(Mode.USER)
                                .withNodeLabels(mapOf())
                                .withNodeTaints(Arrays.asList())
                                .withOsType(OsType.WINDOWS)
                                .withNodeImageVersion("kcvqvpke")
                                .withVmSize("cvdrhvoodsot"),
                            new AgentPoolInner()
                                .withLocation("kcbcue")
                                .withTags(mapOf("qibrhosxsdqrhzoy", "xgc", "m", "i", "hwflu", "qyib"))
                                .withExtendedLocation(
                                    new AgentPoolExtendedLocation().withType("apvhelxprgly").withName("dd"))
                                .withCount(487764269)
                                .withAvailabilityZones(Arrays.asList())
                                .withMaxCount(1929847054)
                                .withMaxPods(1598005613)
                                .withMinCount(1083170526)
                                .withMode(Mode.LB)
                                .withNodeLabels(mapOf())
                                .withNodeTaints(Arrays.asList())
                                .withOsType(OsType.WINDOWS)
                                .withNodeImageVersion("pkwhojvpa")
                                .withVmSize("gxysmocmbqfqvm")))
                .withNextLink("qxwbpokulpiu");
        model = BinaryData.fromObject(model).toObject(AgentPoolListResultInner.class);
        Assertions.assertEquals("semwabnet", model.value().get(0).location());
        Assertions.assertEquals("szhedplvw", model.value().get(0).tags().get("wubmwmbesldn"));
        Assertions.assertEquals("mygtdssls", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("mweriofzpy", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals(1045217690, model.value().get(0).count());
        Assertions.assertEquals(1515008733, model.value().get(0).maxCount());
        Assertions.assertEquals(286824564, model.value().get(0).maxPods());
        Assertions.assertEquals(1616602527, model.value().get(0).minCount());
        Assertions.assertEquals(Mode.SYSTEM, model.value().get(0).mode());
        Assertions.assertEquals(OsType.WINDOWS, model.value().get(0).osType());
        Assertions.assertEquals("ylpstdbhhxsrzdz", model.value().get(0).nodeImageVersion());
        Assertions.assertEquals("erscdntne", model.value().get(0).vmSize());
        Assertions.assertEquals("qxwbpokulpiu", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
