// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolListResultInner;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProvisioningStatusOperationStatus;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProvisioningStatusOperationStatusError;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolUpdateProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.ExtendedLocation;
import com.azure.resourcemanager.hybridcontainerservice.models.ExtendedLocationTypes;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import com.azure.resourcemanager.hybridcontainerservice.models.Ossku;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AgentPoolListResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AgentPoolListResultInner model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"count\":194894857,\"vmSize\":\"z\",\"provisioningState\":\"Succeeded\",\"status\":{\"errorMessage\":\"h\",\"operationStatus\":{\"error\":{},\"operationId\":\"flnrosfqpteehzz\",\"status\":\"pyqr\"},\"readyReplicas\":[{}]},\"availabilityZones\":[\"pvswjdkirso\",\"dqxhcrmnohjtckwh\",\"soifiyipjxsqw\"],\"osType\":\"Windows\",\"osSKU\":\"Windows2019\",\"nodeImageVersion\":\"norcjxvsnbyxqab\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"ysh\"},\"location\":\"rzafbljjgpbtoqcj\",\"tags\":{\"ulpkudjkrl\":\"javbqidtqajz\",\"gqexzlocxs\":\"hbzhfepg\"},\"id\":\"paierh\",\"name\":\"bcsglumma\",\"type\":\"tjaodxobnb\"},{\"properties\":{\"count\":515992017,\"vmSize\":\"xo\",\"provisioningState\":\"Deleting\",\"status\":{\"errorMessage\":\"npime\",\"operationStatus\":{\"error\":{},\"operationId\":\"xgcp\",\"status\":\"gmaajrm\"},\"readyReplicas\":[{},{}]},\"availabilityZones\":[\"rlovmclwhijcoej\",\"tbzaqsqsycbkbfk\",\"ukdkexxppofmxa\",\"c\"],\"osType\":\"Windows\",\"osSKU\":\"Windows2019\",\"nodeImageVersion\":\"toc\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"mouexhdzx\"},\"location\":\"bqe\",\"tags\":{\"icbtwnpzao\":\"xqbzvddntwnd\",\"jthjqkwpyei\":\"vuhrhcffcyddgl\",\"q\":\"xmqci\"},\"id\":\"hkh\",\"name\":\"xuigdtopbobj\",\"type\":\"ghmewuam\"}],\"nextLink\":\"hrzayvvtpgvdf\"}")
            .toObject(AgentPoolListResultInner.class);
        Assertions.assertEquals("rzafbljjgpbtoqcj", model.value().get(0).location());
        Assertions.assertEquals("javbqidtqajz", model.value().get(0).tags().get("ulpkudjkrl"));
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("ysh", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals(194894857, model.value().get(0).count());
        Assertions.assertEquals("z", model.value().get(0).vmSize());
        Assertions.assertEquals("h", model.value().get(0).status().errorMessage());
        Assertions.assertEquals("flnrosfqpteehzz", model.value().get(0).status().operationStatus().operationId());
        Assertions.assertEquals("pyqr", model.value().get(0).status().operationStatus().status());
        Assertions.assertEquals("pvswjdkirso", model.value().get(0).availabilityZones().get(0));
        Assertions.assertEquals(OsType.WINDOWS, model.value().get(0).osType());
        Assertions.assertEquals(Ossku.WINDOWS2019, model.value().get(0).osSku());
        Assertions.assertEquals("norcjxvsnbyxqab", model.value().get(0).nodeImageVersion());
        Assertions.assertEquals("hrzayvvtpgvdf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AgentPoolListResultInner model
            = new AgentPoolListResultInner()
                .withValue(
                    Arrays
                        .asList(
                            new AgentPoolInner().withLocation("rzafbljjgpbtoqcj")
                                .withTags(mapOf("ulpkudjkrl", "javbqidtqajz", "gqexzlocxs", "hbzhfepg"))
                                .withExtendedLocation(new ExtendedLocation()
                                    .withType(ExtendedLocationTypes.CUSTOM_LOCATION).withName("ysh"))
                                .withCount(194894857).withVmSize("z")
                                .withStatus(new AgentPoolProvisioningStatusStatus().withErrorMessage("h")
                                    .withOperationStatus(new AgentPoolProvisioningStatusOperationStatus()
                                        .withError(new AgentPoolProvisioningStatusOperationStatusError())
                                        .withOperationId("flnrosfqpteehzz").withStatus("pyqr"))
                                    .withReadyReplicas(Arrays.asList(new AgentPoolUpdateProfile())))
                                .withAvailabilityZones(
                                    Arrays.asList("pvswjdkirso", "dqxhcrmnohjtckwh", "soifiyipjxsqw"))
                                .withOsType(OsType.WINDOWS).withOsSku(Ossku.WINDOWS2019)
                                .withNodeImageVersion("norcjxvsnbyxqab"),
                            new AgentPoolInner().withLocation("bqe")
                                .withTags(
                                    mapOf("icbtwnpzao", "xqbzvddntwnd", "jthjqkwpyei", "vuhrhcffcyddgl", "q", "xmqci"))
                                .withExtendedLocation(new ExtendedLocation()
                                    .withType(ExtendedLocationTypes.CUSTOM_LOCATION).withName("mouexhdzx"))
                                .withCount(515992017).withVmSize("xo")
                                .withStatus(new AgentPoolProvisioningStatusStatus().withErrorMessage("npime")
                                    .withOperationStatus(new AgentPoolProvisioningStatusOperationStatus()
                                        .withError(new AgentPoolProvisioningStatusOperationStatusError())
                                        .withOperationId("xgcp").withStatus("gmaajrm"))
                                    .withReadyReplicas(
                                        Arrays.asList(new AgentPoolUpdateProfile(), new AgentPoolUpdateProfile())))
                                .withAvailabilityZones(
                                    Arrays.asList("rlovmclwhijcoej", "tbzaqsqsycbkbfk", "ukdkexxppofmxa", "c"))
                                .withOsType(OsType.WINDOWS).withOsSku(Ossku.WINDOWS2019).withNodeImageVersion("toc")))
                .withNextLink("hrzayvvtpgvdf");
        model = BinaryData.fromObject(model).toObject(AgentPoolListResultInner.class);
        Assertions.assertEquals("rzafbljjgpbtoqcj", model.value().get(0).location());
        Assertions.assertEquals("javbqidtqajz", model.value().get(0).tags().get("ulpkudjkrl"));
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("ysh", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals(194894857, model.value().get(0).count());
        Assertions.assertEquals("z", model.value().get(0).vmSize());
        Assertions.assertEquals("h", model.value().get(0).status().errorMessage());
        Assertions.assertEquals("flnrosfqpteehzz", model.value().get(0).status().operationStatus().operationId());
        Assertions.assertEquals("pyqr", model.value().get(0).status().operationStatus().status());
        Assertions.assertEquals("pvswjdkirso", model.value().get(0).availabilityZones().get(0));
        Assertions.assertEquals(OsType.WINDOWS, model.value().get(0).osType());
        Assertions.assertEquals(Ossku.WINDOWS2019, model.value().get(0).osSku());
        Assertions.assertEquals("norcjxvsnbyxqab", model.value().get(0).nodeImageVersion());
        Assertions.assertEquals("hrzayvvtpgvdf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
