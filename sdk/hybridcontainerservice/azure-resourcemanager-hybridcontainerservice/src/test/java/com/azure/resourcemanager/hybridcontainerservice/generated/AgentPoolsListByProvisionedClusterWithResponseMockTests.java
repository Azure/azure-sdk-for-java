// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolListResult;
import com.azure.resourcemanager.hybridcontainerservice.models.ExtendedLocationTypes;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import com.azure.resourcemanager.hybridcontainerservice.models.Ossku;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AgentPoolsListByProvisionedClusterWithResponseMockTests {
    @Test
    public void testListByProvisionedClusterWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"count\":1209152959,\"vmSize\":\"dmsmlm\",\"provisioningState\":\"Succeeded\",\"status\":{\"errorMessage\":\"trmaequiahxicslf\",\"operationStatus\":{},\"readyReplicas\":[{}]},\"availabilityZones\":[\"yylhalnswhccsp\",\"kaivwit\",\"scywuggwoluhc\",\"bwemhairs\"],\"osType\":\"Windows\",\"osSKU\":\"Windows2019\",\"nodeImageVersion\":\"msweypqwdxggicc\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"exmk\"},\"location\":\"tlstvlzywem\",\"tags\":{\"sfgytguslfead\":\"ncsdtclusiyp\",\"isxgfp\":\"ygqukyhejh\",\"vk\":\"lolp\"},\"id\":\"r\",\"name\":\"qvujzraehtwdwrf\",\"type\":\"swibyr\"},{\"properties\":{\"count\":2126474322,\"vmSize\":\"shfwpracstwity\",\"provisioningState\":\"InProgress\",\"status\":{\"errorMessage\":\"c\",\"operationStatus\":{},\"readyReplicas\":[{},{},{}]},\"availabilityZones\":[\"md\",\"odn\",\"zxltjcvn\"],\"osType\":\"Linux\",\"osSKU\":\"Windows2019\",\"nodeImageVersion\":\"cxnavv\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"qunyowxwlmdjr\"},\"location\":\"vfgbvfvpdboda\",\"tags\":{\"hkr\":\"sjq\",\"p\":\"ibdeibq\"},\"id\":\"kghv\",\"name\":\"ndzwmkrefa\",\"type\":\"pjorwkqnyhg\"},{\"properties\":{\"count\":1108411974,\"vmSize\":\"ivfxzsjabibsyst\",\"provisioningState\":\"Deleting\",\"status\":{\"errorMessage\":\"jpvkvpbjxbkzbzkd\",\"operationStatus\":{},\"readyReplicas\":[{},{},{},{}]},\"availabilityZones\":[\"udurgkakmokz\",\"jjklff\",\"mouwqlgzrfzeey\"],\"osType\":\"Linux\",\"osSKU\":\"Windows2019\",\"nodeImageVersion\":\"ayuhqlbjbsy\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"t\"},\"location\":\"dgmfpgvmpipasl\",\"tags\":{\"dsrezpdrhneuyow\":\"qfxssmwutw\",\"t\":\"kdw\"},\"id\":\"sibircgpi\",\"name\":\"pzimejzanlfzxi\",\"type\":\"vrmbzono\"},{\"properties\":{\"count\":988966310,\"vmSize\":\"q\",\"provisioningState\":\"Upgrading\",\"status\":{\"errorMessage\":\"pfrlazsz\",\"operationStatus\":{},\"readyReplicas\":[{},{},{}]},\"availabilityZones\":[\"ndfpwpj\",\"lwbtlhf\",\"sj\"],\"osType\":\"Windows\",\"osSKU\":\"CBLMariner\",\"nodeImageVersion\":\"jvfbgofelja\"},\"extendedLocation\":{\"type\":\"CustomLocation\",\"name\":\"ldvriiiojnalghfk\"},\"location\":\"tvsexsowuel\",\"tags\":{\"wws\":\"hahhxvrhmzkwpj\",\"qxujxukndxd\":\"ughftqsx\",\"syqtfi\":\"grjguufzd\",\"phoszqz\":\"whbotzingamv\"},\"id\":\"dphqamv\",\"name\":\"kfwynw\",\"type\":\"vtbvkayh\"}],\"nextLink\":\"nvyq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HybridContainerServiceManager manager = HybridContainerServiceManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AgentPoolListResult response = manager.agentPools()
            .listByProvisionedClusterWithResponse("yuhhziu", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("tlstvlzywem", response.value().get(0).location());
        Assertions.assertEquals("ncsdtclusiyp", response.value().get(0).tags().get("sfgytguslfead"));
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION,
            response.value().get(0).extendedLocation().type());
        Assertions.assertEquals("exmk", response.value().get(0).extendedLocation().name());
        Assertions.assertEquals(1209152959, response.value().get(0).count());
        Assertions.assertEquals("dmsmlm", response.value().get(0).vmSize());
        Assertions.assertEquals("trmaequiahxicslf", response.value().get(0).status().errorMessage());
        Assertions.assertEquals("yylhalnswhccsp", response.value().get(0).availabilityZones().get(0));
        Assertions.assertEquals(OsType.WINDOWS, response.value().get(0).osType());
        Assertions.assertEquals(Ossku.WINDOWS2019, response.value().get(0).osSku());
        Assertions.assertEquals("msweypqwdxggicc", response.value().get(0).nodeImageVersion());
        Assertions.assertEquals("nvyq", response.nextLink());
    }
}
