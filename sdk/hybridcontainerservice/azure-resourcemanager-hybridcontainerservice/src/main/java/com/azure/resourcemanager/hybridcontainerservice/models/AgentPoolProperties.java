// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Properties of the agent pool resource.
 */
@Fluent
public final class AgentPoolProperties extends AgentPoolProfile {
    /*
     * Number of nodes in the agent pool. The default value is 1.
     */
    private Integer count;

    /*
     * The VM sku size of the agent pool node VMs.
     */
    private String vmSize;

    /*
     * Version of Kubernetes in use by the agent pool. This is inherited from the kubernetesVersion of the provisioned
     * cluster.
     */
    private String kubernetesVersion;

    /*
     * The status of the latest long running operation for the agent pool.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The observed status of the agent pool.
     */
    private AgentPoolProvisioningStatusStatus status;

    /**
     * Creates an instance of AgentPoolProperties class.
     */
    public AgentPoolProperties() {
    }

    /**
     * Get the count property: Number of nodes in the agent pool. The default value is 1.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count property: Number of nodes in the agent pool. The default value is 1.
     * 
     * @param count the count value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the vmSize property: The VM sku size of the agent pool node VMs.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The VM sku size of the agent pool node VMs.
     * 
     * @param vmSize the vmSize value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the kubernetesVersion property: Version of Kubernetes in use by the agent pool. This is inherited from the
     * kubernetesVersion of the provisioned cluster.
     * 
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Get the provisioningState property: The status of the latest long running operation for the agent pool.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The observed status of the agent pool.
     * 
     * @return the status value.
     */
    public AgentPoolProvisioningStatusStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The observed status of the agent pool.
     * 
     * @param status the status value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withStatus(AgentPoolProvisioningStatusStatus status) {
        this.status = status;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withOsType(OsType osType) {
        super.withOsType(osType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withOsSku(Ossku osSku) {
        super.withOsSku(osSku);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withNodeLabels(Map<String, String> nodeLabels) {
        super.withNodeLabels(nodeLabels);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withNodeTaints(List<String> nodeTaints) {
        super.withNodeTaints(nodeTaints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withMaxCount(Integer maxCount) {
        super.withMaxCount(maxCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withMinCount(Integer minCount) {
        super.withMinCount(minCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withEnableAutoScaling(Boolean enableAutoScaling) {
        super.withEnableAutoScaling(enableAutoScaling);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withMaxPods(Integer maxPods) {
        super.withMaxPods(maxPods);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osType", osType() == null ? null : osType().toString());
        jsonWriter.writeStringField("osSKU", osSku() == null ? null : osSku().toString());
        jsonWriter.writeMapField("nodeLabels", nodeLabels(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("nodeTaints", nodeTaints(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("maxCount", maxCount());
        jsonWriter.writeNumberField("minCount", minCount());
        jsonWriter.writeBooleanField("enableAutoScaling", enableAutoScaling());
        jsonWriter.writeNumberField("maxPods", maxPods());
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeJsonField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentPoolProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentPoolProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentPoolProperties.
     */
    public static AgentPoolProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentPoolProperties deserializedAgentPoolProperties = new AgentPoolProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedAgentPoolProperties.withOsType(OsType.fromString(reader.getString()));
                } else if ("osSKU".equals(fieldName)) {
                    deserializedAgentPoolProperties.withOsSku(Ossku.fromString(reader.getString()));
                } else if ("nodeLabels".equals(fieldName)) {
                    Map<String, String> nodeLabels = reader.readMap(reader1 -> reader1.getString());
                    deserializedAgentPoolProperties.withNodeLabels(nodeLabels);
                } else if ("nodeTaints".equals(fieldName)) {
                    List<String> nodeTaints = reader.readArray(reader1 -> reader1.getString());
                    deserializedAgentPoolProperties.withNodeTaints(nodeTaints);
                } else if ("maxCount".equals(fieldName)) {
                    deserializedAgentPoolProperties.withMaxCount(reader.getNullable(JsonReader::getInt));
                } else if ("minCount".equals(fieldName)) {
                    deserializedAgentPoolProperties.withMinCount(reader.getNullable(JsonReader::getInt));
                } else if ("enableAutoScaling".equals(fieldName)) {
                    deserializedAgentPoolProperties.withEnableAutoScaling(reader.getNullable(JsonReader::getBoolean));
                } else if ("maxPods".equals(fieldName)) {
                    deserializedAgentPoolProperties.withMaxPods(reader.getNullable(JsonReader::getInt));
                } else if ("count".equals(fieldName)) {
                    deserializedAgentPoolProperties.count = reader.getNullable(JsonReader::getInt);
                } else if ("vmSize".equals(fieldName)) {
                    deserializedAgentPoolProperties.vmSize = reader.getString();
                } else if ("kubernetesVersion".equals(fieldName)) {
                    deserializedAgentPoolProperties.kubernetesVersion = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAgentPoolProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedAgentPoolProperties.status = AgentPoolProvisioningStatusStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentPoolProperties;
        });
    }
}
