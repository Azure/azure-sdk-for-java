// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The profile for supported VM SKUs.
 */
@Immutable
public final class VmSkuProperties implements JsonSerializable<VmSkuProperties> {
    /*
     * The type of resource the SKU applies to.
     */
    private String resourceType;

    /*
     * The list of name-value pairs to describe VM SKU capabilities like MemoryGB, vCPUs, etc.
     */
    private List<VmSkuCapabilities> capabilities;

    /*
     * The name of the VM SKU
     */
    private String name;

    /*
     * The tier of the VM SKU
     */
    private String tier;

    /*
     * The size of the VM SKU
     */
    private String size;

    /**
     * Creates an instance of VmSkuProperties class.
     */
    public VmSkuProperties() {
    }

    /**
     * Get the resourceType property: The type of resource the SKU applies to.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the capabilities property: The list of name-value pairs to describe VM SKU capabilities like MemoryGB, vCPUs,
     * etc.
     * 
     * @return the capabilities value.
     */
    public List<VmSkuCapabilities> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the name property: The name of the VM SKU.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the tier property: The tier of the VM SKU.
     * 
     * @return the tier value.
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Get the size property: The size of the VM SKU.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmSkuProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmSkuProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VmSkuProperties.
     */
    public static VmSkuProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmSkuProperties deserializedVmSkuProperties = new VmSkuProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedVmSkuProperties.resourceType = reader.getString();
                } else if ("capabilities".equals(fieldName)) {
                    List<VmSkuCapabilities> capabilities
                        = reader.readArray(reader1 -> VmSkuCapabilities.fromJson(reader1));
                    deserializedVmSkuProperties.capabilities = capabilities;
                } else if ("name".equals(fieldName)) {
                    deserializedVmSkuProperties.name = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedVmSkuProperties.tier = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedVmSkuProperties.size = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmSkuProperties;
        });
    }
}
