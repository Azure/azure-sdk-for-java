// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Indicates whether the kubernetes version image is ready or not.
 */
@Fluent
public final class KubernetesVersionReadiness implements JsonSerializable<KubernetesVersionReadiness> {
    /*
     * The particular KubernetesVersion Image OS Type (Linux, Windows)
     */
    private OsType osType;

    /*
     * Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is
     * Windows2019 when OSType is Windows.
     */
    private Ossku osSku;

    /*
     * Whether the kubernetes version image is ready or not
     */
    private Boolean ready;

    /*
     * The error message for version not being ready
     */
    private String errorMessage;

    /**
     * Creates an instance of KubernetesVersionReadiness class.
     */
    public KubernetesVersionReadiness() {
    }

    /**
     * Get the osType property: The particular KubernetesVersion Image OS Type (Linux, Windows).
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is
     * Linux. The default is Windows2019 when OSType is Windows.
     * 
     * @return the osSku value.
     */
    public Ossku osSku() {
        return this.osSku;
    }

    /**
     * Set the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is
     * Linux. The default is Windows2019 when OSType is Windows.
     * 
     * @param osSku the osSku value to set.
     * @return the KubernetesVersionReadiness object itself.
     */
    public KubernetesVersionReadiness withOsSku(Ossku osSku) {
        this.osSku = osSku;
        return this;
    }

    /**
     * Get the ready property: Whether the kubernetes version image is ready or not.
     * 
     * @return the ready value.
     */
    public Boolean ready() {
        return this.ready;
    }

    /**
     * Get the errorMessage property: The error message for version not being ready.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osSku", this.osSku == null ? null : this.osSku.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesVersionReadiness from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesVersionReadiness if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KubernetesVersionReadiness.
     */
    public static KubernetesVersionReadiness fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesVersionReadiness deserializedKubernetesVersionReadiness = new KubernetesVersionReadiness();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedKubernetesVersionReadiness.osType = OsType.fromString(reader.getString());
                } else if ("osSku".equals(fieldName)) {
                    deserializedKubernetesVersionReadiness.osSku = Ossku.fromString(reader.getString());
                } else if ("ready".equals(fieldName)) {
                    deserializedKubernetesVersionReadiness.ready = reader.getNullable(JsonReader::getBoolean);
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedKubernetesVersionReadiness.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesVersionReadiness;
        });
    }
}
