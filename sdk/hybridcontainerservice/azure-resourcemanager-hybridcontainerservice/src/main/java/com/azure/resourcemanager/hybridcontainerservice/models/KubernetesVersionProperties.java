// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Kubernetes version profile for given major.minor release.
 */
@Immutable
public final class KubernetesVersionProperties implements JsonSerializable<KubernetesVersionProperties> {
    /*
     * major.minor version of Kubernetes release
     */
    private String version;

    /*
     * Whether this version is in preview mode.
     */
    private Boolean isPreview;

    /*
     * Patch versions of a Kubernetes release
     */
    private Map<String, KubernetesPatchVersions> patchVersions;

    /**
     * Creates an instance of KubernetesVersionProperties class.
     */
    public KubernetesVersionProperties() {
    }

    /**
     * Get the version property: major.minor version of Kubernetes release.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the isPreview property: Whether this version is in preview mode.
     * 
     * @return the isPreview value.
     */
    public Boolean isPreview() {
        return this.isPreview;
    }

    /**
     * Get the patchVersions property: Patch versions of a Kubernetes release.
     * 
     * @return the patchVersions value.
     */
    public Map<String, KubernetesPatchVersions> patchVersions() {
        return this.patchVersions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (patchVersions() != null) {
            patchVersions().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesVersionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KubernetesVersionProperties.
     */
    public static KubernetesVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesVersionProperties deserializedKubernetesVersionProperties = new KubernetesVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedKubernetesVersionProperties.version = reader.getString();
                } else if ("isPreview".equals(fieldName)) {
                    deserializedKubernetesVersionProperties.isPreview = reader.getNullable(JsonReader::getBoolean);
                } else if ("patchVersions".equals(fieldName)) {
                    Map<String, KubernetesPatchVersions> patchVersions
                        = reader.readMap(reader1 -> KubernetesPatchVersions.fromJson(reader1));
                    deserializedKubernetesVersionProperties.patchVersions = patchVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesVersionProperties;
        });
    }
}
