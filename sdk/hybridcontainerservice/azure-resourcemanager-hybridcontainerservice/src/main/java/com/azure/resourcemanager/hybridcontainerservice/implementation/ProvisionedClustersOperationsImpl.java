// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcontainerservice.fluent.ProvisionedClustersOperationsClient;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ProvisionedClustersResponseInner;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClustersOperations;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClustersResponse;

public final class ProvisionedClustersOperationsImpl implements ProvisionedClustersOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ProvisionedClustersOperationsImpl.class);

    private final ProvisionedClustersOperationsClient innerClient;

    private final com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager;

    public ProvisionedClustersOperationsImpl(
        ProvisionedClustersOperationsClient innerClient,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ProvisionedClustersResponse> getByResourceGroupWithResponse(
        String resourceGroupName, String provisionedClustersName, Context context) {
        Response<ProvisionedClustersResponseInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, provisionedClustersName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProvisionedClustersResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProvisionedClustersResponse getByResourceGroup(String resourceGroupName, String provisionedClustersName) {
        ProvisionedClustersResponseInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, provisionedClustersName);
        if (inner != null) {
            return new ProvisionedClustersResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String provisionedClustersName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, provisionedClustersName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String provisionedClustersName) {
        this.serviceClient().delete(resourceGroupName, provisionedClustersName);
    }

    public PagedIterable<ProvisionedClustersResponse> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ProvisionedClustersResponseInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ProvisionedClustersResponseImpl(inner1, this.manager()));
    }

    public PagedIterable<ProvisionedClustersResponse> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ProvisionedClustersResponseInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ProvisionedClustersResponseImpl(inner1, this.manager()));
    }

    public PagedIterable<ProvisionedClustersResponse> list() {
        PagedIterable<ProvisionedClustersResponseInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ProvisionedClustersResponseImpl(inner1, this.manager()));
    }

    public PagedIterable<ProvisionedClustersResponse> list(Context context) {
        PagedIterable<ProvisionedClustersResponseInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new ProvisionedClustersResponseImpl(inner1, this.manager()));
    }

    public ProvisionedClustersResponse getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisionedClustersName = Utils.getValueFromIdByName(id, "provisionedClusters");
        if (provisionedClustersName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'provisionedClusters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, provisionedClustersName, Context.NONE).getValue();
    }

    public Response<ProvisionedClustersResponse> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisionedClustersName = Utils.getValueFromIdByName(id, "provisionedClusters");
        if (provisionedClustersName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'provisionedClusters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, provisionedClustersName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisionedClustersName = Utils.getValueFromIdByName(id, "provisionedClusters");
        if (provisionedClustersName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'provisionedClusters'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, provisionedClustersName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisionedClustersName = Utils.getValueFromIdByName(id, "provisionedClusters");
        if (provisionedClustersName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'provisionedClusters'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, provisionedClustersName, context);
    }

    private ProvisionedClustersOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager manager() {
        return this.serviceManager;
    }

    public ProvisionedClustersResponseImpl define(String name) {
        return new ProvisionedClustersResponseImpl(name, this.manager());
    }
}
