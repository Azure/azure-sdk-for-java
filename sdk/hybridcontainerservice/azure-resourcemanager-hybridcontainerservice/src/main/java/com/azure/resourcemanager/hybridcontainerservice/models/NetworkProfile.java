// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The network configuration profile for the provisioned cluster.
 */
@Fluent
public final class NetworkProfile implements JsonSerializable<NetworkProfile> {
    /*
     * Profile of the HA Proxy load balancer.
     */
    private NetworkProfileLoadBalancerProfile loadBalancerProfile;

    /*
     * Network policy used for building Kubernetes network. Possible values include: 'calico'.
     */
    private NetworkPolicy networkPolicy;

    /*
     * A CIDR notation IP Address range from which to assign pod IPs.
     */
    private String podCidr;

    /**
     * Creates an instance of NetworkProfile class.
     */
    public NetworkProfile() {
    }

    /**
     * Get the loadBalancerProfile property: Profile of the HA Proxy load balancer.
     * 
     * @return the loadBalancerProfile value.
     */
    public NetworkProfileLoadBalancerProfile loadBalancerProfile() {
        return this.loadBalancerProfile;
    }

    /**
     * Set the loadBalancerProfile property: Profile of the HA Proxy load balancer.
     * 
     * @param loadBalancerProfile the loadBalancerProfile value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withLoadBalancerProfile(NetworkProfileLoadBalancerProfile loadBalancerProfile) {
        this.loadBalancerProfile = loadBalancerProfile;
        return this;
    }

    /**
     * Get the networkPolicy property: Network policy used for building Kubernetes network. Possible values include:
     * 'calico'.
     * 
     * @return the networkPolicy value.
     */
    public NetworkPolicy networkPolicy() {
        return this.networkPolicy;
    }

    /**
     * Set the networkPolicy property: Network policy used for building Kubernetes network. Possible values include:
     * 'calico'.
     * 
     * @param networkPolicy the networkPolicy value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withNetworkPolicy(NetworkPolicy networkPolicy) {
        this.networkPolicy = networkPolicy;
        return this;
    }

    /**
     * Get the podCidr property: A CIDR notation IP Address range from which to assign pod IPs.
     * 
     * @return the podCidr value.
     */
    public String podCidr() {
        return this.podCidr;
    }

    /**
     * Set the podCidr property: A CIDR notation IP Address range from which to assign pod IPs.
     * 
     * @param podCidr the podCidr value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withPodCidr(String podCidr) {
        this.podCidr = podCidr;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (loadBalancerProfile() != null) {
            loadBalancerProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("loadBalancerProfile", this.loadBalancerProfile);
        jsonWriter.writeStringField("networkPolicy", this.networkPolicy == null ? null : this.networkPolicy.toString());
        jsonWriter.writeStringField("podCidr", this.podCidr);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkProfile.
     */
    public static NetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkProfile deserializedNetworkProfile = new NetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("loadBalancerProfile".equals(fieldName)) {
                    deserializedNetworkProfile.loadBalancerProfile = NetworkProfileLoadBalancerProfile.fromJson(reader);
                } else if ("networkPolicy".equals(fieldName)) {
                    deserializedNetworkProfile.networkPolicy = NetworkPolicy.fromString(reader.getString());
                } else if ("podCidr".equals(fieldName)) {
                    deserializedNetworkProfile.podCidr = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkProfile;
        });
    }
}
