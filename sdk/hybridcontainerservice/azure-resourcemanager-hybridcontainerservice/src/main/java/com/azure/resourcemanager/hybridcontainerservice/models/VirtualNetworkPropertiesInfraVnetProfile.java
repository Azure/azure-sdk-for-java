// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The VirtualNetworkPropertiesInfraVnetProfile model.
 */
@Fluent
public final class VirtualNetworkPropertiesInfraVnetProfile
    implements JsonSerializable<VirtualNetworkPropertiesInfraVnetProfile> {
    /*
     * Infrastructure network profile for HCI platform
     */
    private VirtualNetworkPropertiesInfraVnetProfileHci hci;

    /**
     * Creates an instance of VirtualNetworkPropertiesInfraVnetProfile class.
     */
    public VirtualNetworkPropertiesInfraVnetProfile() {
    }

    /**
     * Get the hci property: Infrastructure network profile for HCI platform.
     * 
     * @return the hci value.
     */
    public VirtualNetworkPropertiesInfraVnetProfileHci hci() {
        return this.hci;
    }

    /**
     * Set the hci property: Infrastructure network profile for HCI platform.
     * 
     * @param hci the hci value to set.
     * @return the VirtualNetworkPropertiesInfraVnetProfile object itself.
     */
    public VirtualNetworkPropertiesInfraVnetProfile withHci(VirtualNetworkPropertiesInfraVnetProfileHci hci) {
        this.hci = hci;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hci() != null) {
            hci().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hci", this.hci);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualNetworkPropertiesInfraVnetProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualNetworkPropertiesInfraVnetProfile if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualNetworkPropertiesInfraVnetProfile.
     */
    public static VirtualNetworkPropertiesInfraVnetProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualNetworkPropertiesInfraVnetProfile deserializedVirtualNetworkPropertiesInfraVnetProfile
                = new VirtualNetworkPropertiesInfraVnetProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hci".equals(fieldName)) {
                    deserializedVirtualNetworkPropertiesInfraVnetProfile.hci
                        = VirtualNetworkPropertiesInfraVnetProfileHci.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualNetworkPropertiesInfraVnetProfile;
        });
    }
}
