// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Configurations for provisioning the cluster with HTTP proxy servers. */
@Fluent
public class HttpProxyConfigResponse {
    /*
     * The HTTP proxy server endpoint to use.
     */
    @JsonProperty(value = "httpProxy")
    private String httpProxy;

    /*
     * The HTTPS proxy server endpoint to use.
     */
    @JsonProperty(value = "httpsProxy")
    private String httpsProxy;

    /*
     * The endpoints that should not go through proxy.
     */
    @JsonProperty(value = "noProxy")
    private List<String> noProxy;

    /*
     * Alternative CA cert to use for connecting to proxy servers.
     */
    @JsonProperty(value = "trustedCa")
    private String trustedCa;

    /*
     * Username to use for connecting to proxy server
     */
    @JsonProperty(value = "username")
    private String username;

    /** Creates an instance of HttpProxyConfigResponse class. */
    public HttpProxyConfigResponse() {
    }

    /**
     * Get the httpProxy property: The HTTP proxy server endpoint to use.
     *
     * @return the httpProxy value.
     */
    public String httpProxy() {
        return this.httpProxy;
    }

    /**
     * Set the httpProxy property: The HTTP proxy server endpoint to use.
     *
     * @param httpProxy the httpProxy value to set.
     * @return the HttpProxyConfigResponse object itself.
     */
    public HttpProxyConfigResponse withHttpProxy(String httpProxy) {
        this.httpProxy = httpProxy;
        return this;
    }

    /**
     * Get the httpsProxy property: The HTTPS proxy server endpoint to use.
     *
     * @return the httpsProxy value.
     */
    public String httpsProxy() {
        return this.httpsProxy;
    }

    /**
     * Set the httpsProxy property: The HTTPS proxy server endpoint to use.
     *
     * @param httpsProxy the httpsProxy value to set.
     * @return the HttpProxyConfigResponse object itself.
     */
    public HttpProxyConfigResponse withHttpsProxy(String httpsProxy) {
        this.httpsProxy = httpsProxy;
        return this;
    }

    /**
     * Get the noProxy property: The endpoints that should not go through proxy.
     *
     * @return the noProxy value.
     */
    public List<String> noProxy() {
        return this.noProxy;
    }

    /**
     * Set the noProxy property: The endpoints that should not go through proxy.
     *
     * @param noProxy the noProxy value to set.
     * @return the HttpProxyConfigResponse object itself.
     */
    public HttpProxyConfigResponse withNoProxy(List<String> noProxy) {
        this.noProxy = noProxy;
        return this;
    }

    /**
     * Get the trustedCa property: Alternative CA cert to use for connecting to proxy servers.
     *
     * @return the trustedCa value.
     */
    public String trustedCa() {
        return this.trustedCa;
    }

    /**
     * Set the trustedCa property: Alternative CA cert to use for connecting to proxy servers.
     *
     * @param trustedCa the trustedCa value to set.
     * @return the HttpProxyConfigResponse object itself.
     */
    public HttpProxyConfigResponse withTrustedCa(String trustedCa) {
        this.trustedCa = trustedCa;
        return this;
    }

    /**
     * Get the username property: Username to use for connecting to proxy server.
     *
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Username to use for connecting to proxy server.
     *
     * @param username the username value to set.
     * @return the HttpProxyConfigResponse object itself.
     */
    public HttpProxyConfigResponse withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
