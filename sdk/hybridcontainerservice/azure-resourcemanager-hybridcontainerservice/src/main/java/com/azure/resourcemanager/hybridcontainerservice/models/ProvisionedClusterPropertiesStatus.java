// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The observed status of the provisioned cluster.
 */
@Fluent
public final class ProvisionedClusterPropertiesStatus implements JsonSerializable<ProvisionedClusterPropertiesStatus> {
    /*
     * The detailed status of the provisioned cluster components including addons.
     */
    private List<AddonStatusProfile> controlPlaneStatus;

    /*
     * The current state of the provisioned cluster.
     */
    private ResourceProvisioningState currentState;

    /*
     * Error messages during a provisioned cluster operation or steady state.
     */
    private String errorMessage;

    /**
     * Creates an instance of ProvisionedClusterPropertiesStatus class.
     */
    public ProvisionedClusterPropertiesStatus() {
    }

    /**
     * Get the controlPlaneStatus property: The detailed status of the provisioned cluster components including addons.
     * 
     * @return the controlPlaneStatus value.
     */
    public List<AddonStatusProfile> controlPlaneStatus() {
        return this.controlPlaneStatus;
    }

    /**
     * Set the controlPlaneStatus property: The detailed status of the provisioned cluster components including addons.
     * 
     * @param controlPlaneStatus the controlPlaneStatus value to set.
     * @return the ProvisionedClusterPropertiesStatus object itself.
     */
    public ProvisionedClusterPropertiesStatus withControlPlaneStatus(List<AddonStatusProfile> controlPlaneStatus) {
        this.controlPlaneStatus = controlPlaneStatus;
        return this;
    }

    /**
     * Get the currentState property: The current state of the provisioned cluster.
     * 
     * @return the currentState value.
     */
    public ResourceProvisioningState currentState() {
        return this.currentState;
    }

    /**
     * Get the errorMessage property: Error messages during a provisioned cluster operation or steady state.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Error messages during a provisioned cluster operation or steady state.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the ProvisionedClusterPropertiesStatus object itself.
     */
    public ProvisionedClusterPropertiesStatus withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controlPlaneStatus() != null) {
            controlPlaneStatus().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("controlPlaneStatus", this.controlPlaneStatus,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProvisionedClusterPropertiesStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProvisionedClusterPropertiesStatus if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProvisionedClusterPropertiesStatus.
     */
    public static ProvisionedClusterPropertiesStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProvisionedClusterPropertiesStatus deserializedProvisionedClusterPropertiesStatus
                = new ProvisionedClusterPropertiesStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("controlPlaneStatus".equals(fieldName)) {
                    List<AddonStatusProfile> controlPlaneStatus
                        = reader.readArray(reader1 -> AddonStatusProfile.fromJson(reader1));
                    deserializedProvisionedClusterPropertiesStatus.controlPlaneStatus = controlPlaneStatus;
                } else if ("currentState".equals(fieldName)) {
                    deserializedProvisionedClusterPropertiesStatus.currentState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedProvisionedClusterPropertiesStatus.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProvisionedClusterPropertiesStatus;
        });
    }
}
