// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Kubernetes Patch Version profile.
 */
@Fluent
public final class KubernetesPatchVersions implements JsonSerializable<KubernetesPatchVersions> {
    /*
     * Indicates whether the kubernetes version image is ready or not
     */
    private List<KubernetesVersionReadiness> readiness;

    /*
     * Possible upgrade paths for given patch version
     */
    private List<String> upgrades;

    /**
     * Creates an instance of KubernetesPatchVersions class.
     */
    public KubernetesPatchVersions() {
    }

    /**
     * Get the readiness property: Indicates whether the kubernetes version image is ready or not.
     * 
     * @return the readiness value.
     */
    public List<KubernetesVersionReadiness> readiness() {
        return this.readiness;
    }

    /**
     * Set the readiness property: Indicates whether the kubernetes version image is ready or not.
     * 
     * @param readiness the readiness value to set.
     * @return the KubernetesPatchVersions object itself.
     */
    public KubernetesPatchVersions withReadiness(List<KubernetesVersionReadiness> readiness) {
        this.readiness = readiness;
        return this;
    }

    /**
     * Get the upgrades property: Possible upgrade paths for given patch version.
     * 
     * @return the upgrades value.
     */
    public List<String> upgrades() {
        return this.upgrades;
    }

    /**
     * Set the upgrades property: Possible upgrade paths for given patch version.
     * 
     * @param upgrades the upgrades value to set.
     * @return the KubernetesPatchVersions object itself.
     */
    public KubernetesPatchVersions withUpgrades(List<String> upgrades) {
        this.upgrades = upgrades;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (readiness() != null) {
            readiness().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("readiness", this.readiness, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("upgrades", this.upgrades, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesPatchVersions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesPatchVersions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KubernetesPatchVersions.
     */
    public static KubernetesPatchVersions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesPatchVersions deserializedKubernetesPatchVersions = new KubernetesPatchVersions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("readiness".equals(fieldName)) {
                    List<KubernetesVersionReadiness> readiness
                        = reader.readArray(reader1 -> KubernetesVersionReadiness.fromJson(reader1));
                    deserializedKubernetesPatchVersions.readiness = readiness;
                } else if ("upgrades".equals(fieldName)) {
                    List<String> upgrades = reader.readArray(reader1 -> reader1.getString());
                    deserializedKubernetesPatchVersions.upgrades = upgrades;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesPatchVersions;
        });
    }
}
