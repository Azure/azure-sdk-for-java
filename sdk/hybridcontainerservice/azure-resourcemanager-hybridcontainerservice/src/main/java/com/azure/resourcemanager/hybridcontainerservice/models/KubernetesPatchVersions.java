// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Kubernetes Patch Version profile.
 */
@Fluent
public final class KubernetesPatchVersions {
    /*
     * Indicates whether the kubernetes version image is ready or not
     */
    @JsonProperty(value = "readiness")
    private List<KubernetesVersionReadiness> readiness;

    /*
     * Possible upgrade paths for given patch version
     */
    @JsonProperty(value = "upgrades")
    private List<String> upgrades;

    /**
     * Creates an instance of KubernetesPatchVersions class.
     */
    public KubernetesPatchVersions() {
    }

    /**
     * Get the readiness property: Indicates whether the kubernetes version image is ready or not.
     * 
     * @return the readiness value.
     */
    public List<KubernetesVersionReadiness> readiness() {
        return this.readiness;
    }

    /**
     * Set the readiness property: Indicates whether the kubernetes version image is ready or not.
     * 
     * @param readiness the readiness value to set.
     * @return the KubernetesPatchVersions object itself.
     */
    public KubernetesPatchVersions withReadiness(List<KubernetesVersionReadiness> readiness) {
        this.readiness = readiness;
        return this;
    }

    /**
     * Get the upgrades property: Possible upgrade paths for given patch version.
     * 
     * @return the upgrades value.
     */
    public List<String> upgrades() {
        return this.upgrades;
    }

    /**
     * Set the upgrades property: Possible upgrade paths for given patch version.
     * 
     * @param upgrades the upgrades value to set.
     * @return the KubernetesPatchVersions object itself.
     */
    public KubernetesPatchVersions withUpgrades(List<String> upgrades) {
        this.upgrades = upgrades;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (readiness() != null) {
            readiness().forEach(e -> e.validate());
        }
    }
}
