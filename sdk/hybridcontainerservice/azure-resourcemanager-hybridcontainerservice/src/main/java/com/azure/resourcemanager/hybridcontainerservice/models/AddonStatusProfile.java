// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The status profile of the addons and other kubernetes components.
 */
@Fluent
public final class AddonStatusProfile implements JsonSerializable<AddonStatusProfile> {
    /*
     * Name of the addon or component
     */
    private String name;

    /*
     * Observed phase of the addon or component on the provisioned cluster. Possible values include: 'pending',
     * 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning {MSICertificateDownloaded}', 'provisioned',
     * 'deleting', 'failed', 'upgrading'
     */
    private AddonPhase phase;

    /*
     * Indicates whether the addon or component is ready
     */
    private Boolean ready;

    /*
     * Observed error message from the addon or component
     */
    private String errorMessage;

    /**
     * Creates an instance of AddonStatusProfile class.
     */
    public AddonStatusProfile() {
    }

    /**
     * Get the name property: Name of the addon or component.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the addon or component.
     * 
     * @param name the name value to set.
     * @return the AddonStatusProfile object itself.
     */
    public AddonStatusProfile withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the phase property: Observed phase of the addon or component on the provisioned cluster. Possible values
     * include: 'pending', 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning
     * {MSICertificateDownloaded}', 'provisioned', 'deleting', 'failed', 'upgrading'.
     * 
     * @return the phase value.
     */
    public AddonPhase phase() {
        return this.phase;
    }

    /**
     * Set the phase property: Observed phase of the addon or component on the provisioned cluster. Possible values
     * include: 'pending', 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning
     * {MSICertificateDownloaded}', 'provisioned', 'deleting', 'failed', 'upgrading'.
     * 
     * @param phase the phase value to set.
     * @return the AddonStatusProfile object itself.
     */
    public AddonStatusProfile withPhase(AddonPhase phase) {
        this.phase = phase;
        return this;
    }

    /**
     * Get the ready property: Indicates whether the addon or component is ready.
     * 
     * @return the ready value.
     */
    public Boolean ready() {
        return this.ready;
    }

    /**
     * Set the ready property: Indicates whether the addon or component is ready.
     * 
     * @param ready the ready value to set.
     * @return the AddonStatusProfile object itself.
     */
    public AddonStatusProfile withReady(Boolean ready) {
        this.ready = ready;
        return this;
    }

    /**
     * Get the errorMessage property: Observed error message from the addon or component.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Observed error message from the addon or component.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the AddonStatusProfile object itself.
     */
    public AddonStatusProfile withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("phase", this.phase == null ? null : this.phase.toString());
        jsonWriter.writeBooleanField("ready", this.ready);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddonStatusProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddonStatusProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AddonStatusProfile.
     */
    public static AddonStatusProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddonStatusProfile deserializedAddonStatusProfile = new AddonStatusProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAddonStatusProfile.name = reader.getString();
                } else if ("phase".equals(fieldName)) {
                    deserializedAddonStatusProfile.phase = AddonPhase.fromString(reader.getString());
                } else if ("ready".equals(fieldName)) {
                    deserializedAddonStatusProfile.ready = reader.getNullable(JsonReader::getBoolean);
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedAddonStatusProfile.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddonStatusProfile;
        });
    }
}
