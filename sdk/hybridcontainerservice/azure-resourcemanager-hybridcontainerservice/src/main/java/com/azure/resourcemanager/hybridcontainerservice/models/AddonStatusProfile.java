// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Defines the addon status profile.
 */
@Fluent
public final class AddonStatusProfile {
    /*
     * Name of the addon
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Observed phase of the addon on the target cluster. Possible values include: 'pending', 'provisioning',
     * 'provisioning {HelmChartInstalled}', 'provisioning {MSICertificateDownloaded}', 'provisioned', 'deleting',
     * 'failed', 'upgrading'
     */
    @JsonProperty(value = "phase")
    private AddonPhase phase;

    /*
     * Indicates whether the addon is ready
     */
    @JsonProperty(value = "ready")
    private Boolean ready;

    /*
     * Error message while deploying the addon
     */
    @JsonProperty(value = "errorMessage")
    private String errorMessage;

    /**
     * Creates an instance of AddonStatusProfile class.
     */
    public AddonStatusProfile() {
    }

    /**
     * Get the name property: Name of the addon.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the addon.
     * 
     * @param name the name value to set.
     * @return the AddonStatusProfile object itself.
     */
    public AddonStatusProfile withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the phase property: Observed phase of the addon on the target cluster. Possible values include: 'pending',
     * 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning {MSICertificateDownloaded}', 'provisioned',
     * 'deleting', 'failed', 'upgrading'.
     * 
     * @return the phase value.
     */
    public AddonPhase phase() {
        return this.phase;
    }

    /**
     * Set the phase property: Observed phase of the addon on the target cluster. Possible values include: 'pending',
     * 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning {MSICertificateDownloaded}', 'provisioned',
     * 'deleting', 'failed', 'upgrading'.
     * 
     * @param phase the phase value to set.
     * @return the AddonStatusProfile object itself.
     */
    public AddonStatusProfile withPhase(AddonPhase phase) {
        this.phase = phase;
        return this;
    }

    /**
     * Get the ready property: Indicates whether the addon is ready.
     * 
     * @return the ready value.
     */
    public Boolean ready() {
        return this.ready;
    }

    /**
     * Set the ready property: Indicates whether the addon is ready.
     * 
     * @param ready the ready value to set.
     * @return the AddonStatusProfile object itself.
     */
    public AddonStatusProfile withReady(Boolean ready) {
        this.ready = ready;
        return this;
    }

    /**
     * Get the errorMessage property: Error message while deploying the addon.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Error message while deploying the addon.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the AddonStatusProfile object itself.
     */
    public AddonStatusProfile withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
