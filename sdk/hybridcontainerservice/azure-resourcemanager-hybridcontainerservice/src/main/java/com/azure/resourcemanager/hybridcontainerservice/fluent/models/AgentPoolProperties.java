// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import com.azure.resourcemanager.hybridcontainerservice.models.Ossku;
import com.azure.resourcemanager.hybridcontainerservice.models.ResourceProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The AgentPoolProperties model.
 */
@Fluent
public final class AgentPoolProperties extends AgentPoolProfile {
    /*
     * Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive).
     * The default value is 1.
     */
    @JsonProperty(value = "count")
    private Integer count;

    /*
     * VmSize - The size of the agent pool VMs.
     */
    @JsonProperty(value = "vmSize")
    private String vmSize;

    /*
     * Provisioning state of the resource
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceProvisioningState provisioningState;

    /*
     * Defines the observed state of the agent pool
     */
    @JsonProperty(value = "status")
    private AgentPoolProvisioningStatusStatus status;

    /**
     * Creates an instance of AgentPoolProperties class.
     */
    public AgentPoolProperties() {
    }

    /**
     * Get the count property: Count - Number of agents to host docker containers. Allowed values must be in the range
     * of 1 to 100 (inclusive). The default value is 1.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count property: Count - Number of agents to host docker containers. Allowed values must be in the range
     * of 1 to 100 (inclusive). The default value is 1.
     * 
     * @param count the count value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the vmSize property: VmSize - The size of the agent pool VMs.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: VmSize - The size of the agent pool VMs.
     * 
     * @param vmSize the vmSize value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: Defines the observed state of the agent pool.
     * 
     * @return the status value.
     */
    public AgentPoolProvisioningStatusStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Defines the observed state of the agent pool.
     * 
     * @param status the status value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withStatus(AgentPoolProvisioningStatusStatus status) {
        this.status = status;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withAvailabilityZones(List<String> availabilityZones) {
        super.withAvailabilityZones(availabilityZones);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withOsType(OsType osType) {
        super.withOsType(osType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withOsSku(Ossku osSku) {
        super.withOsSku(osSku);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentPoolProperties withNodeImageVersion(String nodeImageVersion) {
        super.withNodeImageVersion(nodeImageVersion);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (status() != null) {
            status().validate();
        }
    }
}
