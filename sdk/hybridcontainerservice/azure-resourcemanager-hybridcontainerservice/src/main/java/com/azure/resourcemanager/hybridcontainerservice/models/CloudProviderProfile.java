// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The profile for the underlying cloud infrastructure provider for the provisioned cluster.
 */
@Fluent
public final class CloudProviderProfile implements JsonSerializable<CloudProviderProfile> {
    /*
     * The profile for the infrastructure networks used by the provisioned cluster
     */
    private CloudProviderProfileInfraNetworkProfile infraNetworkProfile;

    /**
     * Creates an instance of CloudProviderProfile class.
     */
    public CloudProviderProfile() {
    }

    /**
     * Get the infraNetworkProfile property: The profile for the infrastructure networks used by the provisioned
     * cluster.
     * 
     * @return the infraNetworkProfile value.
     */
    public CloudProviderProfileInfraNetworkProfile infraNetworkProfile() {
        return this.infraNetworkProfile;
    }

    /**
     * Set the infraNetworkProfile property: The profile for the infrastructure networks used by the provisioned
     * cluster.
     * 
     * @param infraNetworkProfile the infraNetworkProfile value to set.
     * @return the CloudProviderProfile object itself.
     */
    public CloudProviderProfile withInfraNetworkProfile(CloudProviderProfileInfraNetworkProfile infraNetworkProfile) {
        this.infraNetworkProfile = infraNetworkProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (infraNetworkProfile() != null) {
            infraNetworkProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("infraNetworkProfile", this.infraNetworkProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudProviderProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudProviderProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudProviderProfile.
     */
    public static CloudProviderProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudProviderProfile deserializedCloudProviderProfile = new CloudProviderProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("infraNetworkProfile".equals(fieldName)) {
                    deserializedCloudProviderProfile.infraNetworkProfile
                        = CloudProviderProfileInfraNetworkProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudProviderProfile;
        });
    }
}
