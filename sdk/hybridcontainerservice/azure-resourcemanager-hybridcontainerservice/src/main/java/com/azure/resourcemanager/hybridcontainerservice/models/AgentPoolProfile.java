// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * AgentPool configuration.
 */
@Fluent
public class AgentPoolProfile {
    /*
     * AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
     */
    @JsonProperty(value = "availabilityZones")
    private List<String> availabilityZones;

    /*
     * The particular KubernetesVersion's Image's OS Type (Linux, Windows)
     */
    @JsonProperty(value = "osType")
    private OsType osType;

    /*
     * Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is
     * Windows2019 when OSType is Windows.
     */
    @JsonProperty(value = "osSKU")
    private Ossku osSku;

    /*
     * The version of node image
     */
    @JsonProperty(value = "nodeImageVersion")
    private String nodeImageVersion;

    /**
     * Creates an instance of AgentPoolProfile class.
     */
    public AgentPoolProfile() {
    }

    /**
     * Get the availabilityZones property: AvailabilityZones - The list of Availability zones to use for nodes.
     * Datacenter racks modelled as zones.
     * 
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: AvailabilityZones - The list of Availability zones to use for nodes.
     * Datacenter racks modelled as zones.
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the AgentPoolProfile object itself.
     */
    public AgentPoolProfile withAvailabilityZones(List<String> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the osType property: The particular KubernetesVersion's Image's OS Type (Linux, Windows).
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: The particular KubernetesVersion's Image's OS Type (Linux, Windows).
     * 
     * @param osType the osType value to set.
     * @return the AgentPoolProfile object itself.
     */
    public AgentPoolProfile withOsType(OsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is
     * Linux. The default is Windows2019 when OSType is Windows.
     * 
     * @return the osSku value.
     */
    public Ossku osSku() {
        return this.osSku;
    }

    /**
     * Set the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is
     * Linux. The default is Windows2019 when OSType is Windows.
     * 
     * @param osSku the osSku value to set.
     * @return the AgentPoolProfile object itself.
     */
    public AgentPoolProfile withOsSku(Ossku osSku) {
        this.osSku = osSku;
        return this;
    }

    /**
     * Get the nodeImageVersion property: The version of node image.
     * 
     * @return the nodeImageVersion value.
     */
    public String nodeImageVersion() {
        return this.nodeImageVersion;
    }

    /**
     * Set the nodeImageVersion property: The version of node image.
     * 
     * @param nodeImageVersion the nodeImageVersion value to set.
     * @return the AgentPoolProfile object itself.
     */
    public AgentPoolProfile withNodeImageVersion(String nodeImageVersion) {
        this.nodeImageVersion = nodeImageVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
