// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** LoadBalancerProfile - Profile of the cluster load balancer. */
@Fluent
public final class LoadBalancerProfile extends NamedAgentPoolProfile {
    /*
     * Profile for Linux VMs in the container service cluster.
     */
    @JsonProperty(value = "linuxProfile")
    private LinuxProfileProperties linuxProfile;

    /** Creates an instance of LoadBalancerProfile class. */
    public LoadBalancerProfile() {
    }

    /**
     * Get the linuxProfile property: Profile for Linux VMs in the container service cluster.
     *
     * @return the linuxProfile value.
     */
    public LinuxProfileProperties linuxProfile() {
        return this.linuxProfile;
    }

    /**
     * Set the linuxProfile property: Profile for Linux VMs in the container service cluster.
     *
     * @param linuxProfile the linuxProfile value to set.
     * @return the LoadBalancerProfile object itself.
     */
    public LoadBalancerProfile withLinuxProfile(LinuxProfileProperties linuxProfile) {
        this.linuxProfile = linuxProfile;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withName(String name) {
        super.withName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withCount(Integer count) {
        super.withCount(count);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withAvailabilityZones(List<String> availabilityZones) {
        super.withAvailabilityZones(availabilityZones);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withMaxCount(Integer maxCount) {
        super.withMaxCount(maxCount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withMaxPods(Integer maxPods) {
        super.withMaxPods(maxPods);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withMinCount(Integer minCount) {
        super.withMinCount(minCount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withMode(Mode mode) {
        super.withMode(mode);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withNodeLabels(Map<String, String> nodeLabels) {
        super.withNodeLabels(nodeLabels);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withNodeTaints(List<String> nodeTaints) {
        super.withNodeTaints(nodeTaints);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withOsType(OsType osType) {
        super.withOsType(osType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withNodeImageVersion(String nodeImageVersion) {
        super.withNodeImageVersion(nodeImageVersion);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withVmSize(String vmSize) {
        super.withVmSize(vmSize);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancerProfile withCloudProviderProfile(CloudProviderProfile cloudProviderProfile) {
        super.withCloudProviderProfile(cloudProviderProfile);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (linuxProfile() != null) {
            linuxProfile().validate();
        }
    }
}
