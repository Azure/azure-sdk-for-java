// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.OrchestratorVersionProfileListResultInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.VMSkuListResultInner;

/** An instance of this class provides access to all the operations defined in HybridContainerServicesClient. */
public interface HybridContainerServicesClient {
    /**
     * Lists the available orchestrators in a custom location
     *
     * <p>Lists the available orchestrators in a custom location for HybridAKS.
     *
     * @param customLocationResourceUri The fully qualified Azure Resource manager identifier of the custom location
     *     resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of versions for supported orchestrators along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OrchestratorVersionProfileListResultInner> listOrchestratorsWithResponse(
        String customLocationResourceUri, Context context);

    /**
     * Lists the available orchestrators in a custom location
     *
     * <p>Lists the available orchestrators in a custom location for HybridAKS.
     *
     * @param customLocationResourceUri The fully qualified Azure Resource manager identifier of the custom location
     *     resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of versions for supported orchestrators.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OrchestratorVersionProfileListResultInner listOrchestrators(String customLocationResourceUri);

    /**
     * Lists the available VM SKUs in a custom location
     *
     * <p>Lists the available VM SKUs in a custom location for HybridAKS.
     *
     * @param customLocationResourceUri The fully qualified Azure Resource manager identifier of the custom location
     *     resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VMSkuListResultInner> listVMSkusWithResponse(String customLocationResourceUri, Context context);

    /**
     * Lists the available VM SKUs in a custom location
     *
     * <p>Lists the available VM SKUs in a custom location for HybridAKS.
     *
     * @param customLocationResourceUri The fully qualified Azure Resource manager identifier of the custom location
     *     resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VMSkuListResultInner listVMSkus(String customLocationResourceUri);
}
