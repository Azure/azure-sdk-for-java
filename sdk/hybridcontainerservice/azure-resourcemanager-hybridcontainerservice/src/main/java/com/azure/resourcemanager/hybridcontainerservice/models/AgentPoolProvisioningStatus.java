// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The agentPool resource provisioning status definition.
 */
@Fluent
public class AgentPoolProvisioningStatus {
    /*
     * The status of the latest long running operation for the agent pool.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceProvisioningState provisioningState;

    /*
     * The observed status of the agent pool.
     */
    @JsonProperty(value = "status")
    private AgentPoolProvisioningStatusStatus status;

    /**
     * Creates an instance of AgentPoolProvisioningStatus class.
     */
    public AgentPoolProvisioningStatus() {
    }

    /**
     * Get the provisioningState property: The status of the latest long running operation for the agent pool.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The observed status of the agent pool.
     * 
     * @return the status value.
     */
    public AgentPoolProvisioningStatusStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The observed status of the agent pool.
     * 
     * @param status the status value to set.
     * @return the AgentPoolProvisioningStatus object itself.
     */
    public AgentPoolProvisioningStatus withStatus(AgentPoolProvisioningStatusStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }
}
