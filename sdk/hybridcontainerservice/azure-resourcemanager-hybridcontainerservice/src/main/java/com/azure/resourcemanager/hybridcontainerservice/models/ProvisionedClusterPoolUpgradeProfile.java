// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The list of available kubernetes versions for upgrade.
 */
@Fluent
public final class ProvisionedClusterPoolUpgradeProfile
    implements JsonSerializable<ProvisionedClusterPoolUpgradeProfile> {
    /*
     * The Kubernetes version (major.minor.patch).
     */
    private String kubernetesVersion;

    /*
     * The particular KubernetesVersion Image OS Type (Linux, Windows)
     */
    private OsType osType;

    /*
     * List of available kubernetes versions for upgrade.
     */
    private List<ProvisionedClusterPoolUpgradeProfileProperties> upgrades;

    /**
     * Creates an instance of ProvisionedClusterPoolUpgradeProfile class.
     */
    public ProvisionedClusterPoolUpgradeProfile() {
    }

    /**
     * Get the kubernetesVersion property: The Kubernetes version (major.minor.patch).
     * 
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Get the osType property: The particular KubernetesVersion Image OS Type (Linux, Windows).
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the upgrades property: List of available kubernetes versions for upgrade.
     * 
     * @return the upgrades value.
     */
    public List<ProvisionedClusterPoolUpgradeProfileProperties> upgrades() {
        return this.upgrades;
    }

    /**
     * Set the upgrades property: List of available kubernetes versions for upgrade.
     * 
     * @param upgrades the upgrades value to set.
     * @return the ProvisionedClusterPoolUpgradeProfile object itself.
     */
    public ProvisionedClusterPoolUpgradeProfile
        withUpgrades(List<ProvisionedClusterPoolUpgradeProfileProperties> upgrades) {
        this.upgrades = upgrades;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (upgrades() != null) {
            upgrades().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("upgrades", this.upgrades, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProvisionedClusterPoolUpgradeProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProvisionedClusterPoolUpgradeProfile if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProvisionedClusterPoolUpgradeProfile.
     */
    public static ProvisionedClusterPoolUpgradeProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProvisionedClusterPoolUpgradeProfile deserializedProvisionedClusterPoolUpgradeProfile
                = new ProvisionedClusterPoolUpgradeProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kubernetesVersion".equals(fieldName)) {
                    deserializedProvisionedClusterPoolUpgradeProfile.kubernetesVersion = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedProvisionedClusterPoolUpgradeProfile.osType = OsType.fromString(reader.getString());
                } else if ("upgrades".equals(fieldName)) {
                    List<ProvisionedClusterPoolUpgradeProfileProperties> upgrades
                        = reader.readArray(reader1 -> ProvisionedClusterPoolUpgradeProfileProperties.fromJson(reader1));
                    deserializedProvisionedClusterPoolUpgradeProfile.upgrades = upgrades;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProvisionedClusterPoolUpgradeProfile;
        });
    }
}
