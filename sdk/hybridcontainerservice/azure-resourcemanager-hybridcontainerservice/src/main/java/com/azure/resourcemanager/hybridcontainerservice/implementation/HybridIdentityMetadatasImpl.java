// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcontainerservice.fluent.HybridIdentityMetadatasClient;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.HybridIdentityMetadataInner;
import com.azure.resourcemanager.hybridcontainerservice.models.HybridIdentityMetadata;
import com.azure.resourcemanager.hybridcontainerservice.models.HybridIdentityMetadatas;

public final class HybridIdentityMetadatasImpl implements HybridIdentityMetadatas {
    private static final ClientLogger LOGGER = new ClientLogger(HybridIdentityMetadatasImpl.class);

    private final HybridIdentityMetadatasClient innerClient;

    private final com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager;

    public HybridIdentityMetadatasImpl(
        HybridIdentityMetadatasClient innerClient,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<HybridIdentityMetadata> getWithResponse(
        String resourceGroupName, String resourceName, String hybridIdentityMetadataResourceName, Context context) {
        Response<HybridIdentityMetadataInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, resourceName, hybridIdentityMetadataResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridIdentityMetadataImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HybridIdentityMetadata get(
        String resourceGroupName, String resourceName, String hybridIdentityMetadataResourceName) {
        HybridIdentityMetadataInner inner =
            this.serviceClient().get(resourceGroupName, resourceName, hybridIdentityMetadataResourceName);
        if (inner != null) {
            return new HybridIdentityMetadataImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String resourceName, String hybridIdentityMetadataResourceName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, resourceName, hybridIdentityMetadataResourceName, context);
    }

    public void delete(String resourceGroupName, String resourceName, String hybridIdentityMetadataResourceName) {
        this.serviceClient().delete(resourceGroupName, resourceName, hybridIdentityMetadataResourceName);
    }

    public PagedIterable<HybridIdentityMetadata> listByCluster(String resourceGroupName, String resourceName) {
        PagedIterable<HybridIdentityMetadataInner> inner =
            this.serviceClient().listByCluster(resourceGroupName, resourceName);
        return Utils.mapPage(inner, inner1 -> new HybridIdentityMetadataImpl(inner1, this.manager()));
    }

    public PagedIterable<HybridIdentityMetadata> listByCluster(
        String resourceGroupName, String resourceName, Context context) {
        PagedIterable<HybridIdentityMetadataInner> inner =
            this.serviceClient().listByCluster(resourceGroupName, resourceName, context);
        return Utils.mapPage(inner, inner1 -> new HybridIdentityMetadataImpl(inner1, this.manager()));
    }

    public HybridIdentityMetadata getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "provisionedClusters");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'provisionedClusters'.", id)));
        }
        String hybridIdentityMetadataResourceName = Utils.getValueFromIdByName(id, "hybridIdentityMetadata");
        if (hybridIdentityMetadataResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridIdentityMetadata'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, resourceName, hybridIdentityMetadataResourceName, Context.NONE)
            .getValue();
    }

    public Response<HybridIdentityMetadata> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "provisionedClusters");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'provisionedClusters'.", id)));
        }
        String hybridIdentityMetadataResourceName = Utils.getValueFromIdByName(id, "hybridIdentityMetadata");
        if (hybridIdentityMetadataResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridIdentityMetadata'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, hybridIdentityMetadataResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "provisionedClusters");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'provisionedClusters'.", id)));
        }
        String hybridIdentityMetadataResourceName = Utils.getValueFromIdByName(id, "hybridIdentityMetadata");
        if (hybridIdentityMetadataResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridIdentityMetadata'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, resourceName, hybridIdentityMetadataResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "provisionedClusters");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'provisionedClusters'.", id)));
        }
        String hybridIdentityMetadataResourceName = Utils.getValueFromIdByName(id, "hybridIdentityMetadata");
        if (hybridIdentityMetadataResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridIdentityMetadata'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, resourceName, hybridIdentityMetadataResourceName, context);
    }

    private HybridIdentityMetadatasClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager manager() {
        return this.serviceManager;
    }

    public HybridIdentityMetadataImpl define(String name) {
        return new HybridIdentityMetadataImpl(name, this.manager());
    }
}
