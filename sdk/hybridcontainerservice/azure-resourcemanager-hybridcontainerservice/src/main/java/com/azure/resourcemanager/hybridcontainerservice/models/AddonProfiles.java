// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Addon configurations. */
@Fluent
public final class AddonProfiles {
    /*
     * Config - Key-value pairs for configuring an add-on.
     */
    @JsonProperty(value = "config")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> config;

    /*
     * Enabled - Whether the add-on is enabled or not.
     */
    @JsonProperty(value = "enabled")
    private Boolean enabled;

    /** Creates an instance of AddonProfiles class. */
    public AddonProfiles() {
    }

    /**
     * Get the config property: Config - Key-value pairs for configuring an add-on.
     *
     * @return the config value.
     */
    public Map<String, String> config() {
        return this.config;
    }

    /**
     * Set the config property: Config - Key-value pairs for configuring an add-on.
     *
     * @param config the config value to set.
     * @return the AddonProfiles object itself.
     */
    public AddonProfiles withConfig(Map<String, String> config) {
        this.config = config;
        return this;
    }

    /**
     * Get the enabled property: Enabled - Whether the add-on is enabled or not.
     *
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Enabled - Whether the add-on is enabled or not.
     *
     * @param enabled the enabled value to set.
     * @return the AddonProfiles object itself.
     */
    public AddonProfiles withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
