// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * All properties of the provisioned cluster.
 */
@Fluent
public final class ProvisionedClusterProperties {
    /*
     * LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
     */
    @JsonProperty(value = "linuxProfile")
    private LinuxProfileProperties linuxProfile;

    /*
     * ControlPlane - ControlPlane Configuration
     */
    @JsonProperty(value = "controlPlane")
    private ControlPlaneProfile controlPlane;

    /*
     * KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
     */
    @JsonProperty(value = "kubernetesVersion")
    private String kubernetesVersion;

    /*
     * NetworkProfile - Profile of network configuration.
     */
    @JsonProperty(value = "networkProfile")
    private NetworkProfile networkProfile;

    /*
     * The agent pools of the cluster.
     */
    @JsonProperty(value = "agentPoolProfiles")
    private List<NamedAgentPoolProfile> agentPoolProfiles;

    /*
     * The underlying cloud infra provider properties.
     */
    @JsonProperty(value = "cloudProviderProfile")
    private CloudProviderProfile cloudProviderProfile;

    /*
     * Provisioning state of the resource
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceProvisioningState provisioningState;

    /*
     * HybridAKSClusterStatus defines the observed state of HybridAKSCluster
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisionedClusterPropertiesStatus status;

    /*
     * The license profile of the provisioned cluster.
     */
    @JsonProperty(value = "licenseProfile")
    private ProvisionedClusterLicenseProfile licenseProfile;

    /**
     * Creates an instance of ProvisionedClusterProperties class.
     */
    public ProvisionedClusterProperties() {
    }

    /**
     * Get the linuxProfile property: LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
     * 
     * @return the linuxProfile value.
     */
    public LinuxProfileProperties linuxProfile() {
        return this.linuxProfile;
    }

    /**
     * Set the linuxProfile property: LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
     * 
     * @param linuxProfile the linuxProfile value to set.
     * @return the ProvisionedClusterProperties object itself.
     */
    public ProvisionedClusterProperties withLinuxProfile(LinuxProfileProperties linuxProfile) {
        this.linuxProfile = linuxProfile;
        return this;
    }

    /**
     * Get the controlPlane property: ControlPlane - ControlPlane Configuration.
     * 
     * @return the controlPlane value.
     */
    public ControlPlaneProfile controlPlane() {
        return this.controlPlane;
    }

    /**
     * Set the controlPlane property: ControlPlane - ControlPlane Configuration.
     * 
     * @param controlPlane the controlPlane value to set.
     * @return the ProvisionedClusterProperties object itself.
     */
    public ProvisionedClusterProperties withControlPlane(ControlPlaneProfile controlPlane) {
        this.controlPlane = controlPlane;
        return this;
    }

    /**
     * Get the kubernetesVersion property: KubernetesVersion - Version of Kubernetes specified when creating the
     * managed cluster.
     * 
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Set the kubernetesVersion property: KubernetesVersion - Version of Kubernetes specified when creating the
     * managed cluster.
     * 
     * @param kubernetesVersion the kubernetesVersion value to set.
     * @return the ProvisionedClusterProperties object itself.
     */
    public ProvisionedClusterProperties withKubernetesVersion(String kubernetesVersion) {
        this.kubernetesVersion = kubernetesVersion;
        return this;
    }

    /**
     * Get the networkProfile property: NetworkProfile - Profile of network configuration.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: NetworkProfile - Profile of network configuration.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the ProvisionedClusterProperties object itself.
     */
    public ProvisionedClusterProperties withNetworkProfile(NetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the agentPoolProfiles property: The agent pools of the cluster.
     * 
     * @return the agentPoolProfiles value.
     */
    public List<NamedAgentPoolProfile> agentPoolProfiles() {
        return this.agentPoolProfiles;
    }

    /**
     * Set the agentPoolProfiles property: The agent pools of the cluster.
     * 
     * @param agentPoolProfiles the agentPoolProfiles value to set.
     * @return the ProvisionedClusterProperties object itself.
     */
    public ProvisionedClusterProperties withAgentPoolProfiles(List<NamedAgentPoolProfile> agentPoolProfiles) {
        this.agentPoolProfiles = agentPoolProfiles;
        return this;
    }

    /**
     * Get the cloudProviderProfile property: The underlying cloud infra provider properties.
     * 
     * @return the cloudProviderProfile value.
     */
    public CloudProviderProfile cloudProviderProfile() {
        return this.cloudProviderProfile;
    }

    /**
     * Set the cloudProviderProfile property: The underlying cloud infra provider properties.
     * 
     * @param cloudProviderProfile the cloudProviderProfile value to set.
     * @return the ProvisionedClusterProperties object itself.
     */
    public ProvisionedClusterProperties withCloudProviderProfile(CloudProviderProfile cloudProviderProfile) {
        this.cloudProviderProfile = cloudProviderProfile;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: HybridAKSClusterStatus defines the observed state of HybridAKSCluster.
     * 
     * @return the status value.
     */
    public ProvisionedClusterPropertiesStatus status() {
        return this.status;
    }

    /**
     * Get the licenseProfile property: The license profile of the provisioned cluster.
     * 
     * @return the licenseProfile value.
     */
    public ProvisionedClusterLicenseProfile licenseProfile() {
        return this.licenseProfile;
    }

    /**
     * Set the licenseProfile property: The license profile of the provisioned cluster.
     * 
     * @param licenseProfile the licenseProfile value to set.
     * @return the ProvisionedClusterProperties object itself.
     */
    public ProvisionedClusterProperties withLicenseProfile(ProvisionedClusterLicenseProfile licenseProfile) {
        this.licenseProfile = licenseProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linuxProfile() != null) {
            linuxProfile().validate();
        }
        if (controlPlane() != null) {
            controlPlane().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (agentPoolProfiles() != null) {
            agentPoolProfiles().forEach(e -> e.validate());
        }
        if (cloudProviderProfile() != null) {
            cloudProviderProfile().validate();
        }
        if (status() != null) {
            status().validate();
        }
        if (licenseProfile() != null) {
            licenseProfile().validate();
        }
    }
}
