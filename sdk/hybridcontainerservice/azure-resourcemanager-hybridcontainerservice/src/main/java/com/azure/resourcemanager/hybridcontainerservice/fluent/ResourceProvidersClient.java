// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.KubernetesVersionProfileInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.VmSkuProfileInner;

/**
 * An instance of this class provides access to all the operations defined in ResourceProvidersClient.
 */
public interface ResourceProvidersClient {
    /**
     * Lists the supported kubernetes versions
     * 
     * Lists the supported kubernetes versions for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<KubernetesVersionProfileInner> getKubernetesVersionsWithResponse(String customLocationResourceUri,
        Context context);

    /**
     * Lists the supported kubernetes versions
     * 
     * Lists the supported kubernetes versions for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    KubernetesVersionProfileInner getKubernetesVersions(String customLocationResourceUri);

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<KubernetesVersionProfileInner>, KubernetesVersionProfileInner>
        beginPutKubernetesVersions(String customLocationResourceUri, KubernetesVersionProfileInner kubernetesVersions);

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<KubernetesVersionProfileInner>, KubernetesVersionProfileInner> beginPutKubernetesVersions(
        String customLocationResourceUri, KubernetesVersionProfileInner kubernetesVersions, Context context);

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    KubernetesVersionProfileInner putKubernetesVersions(String customLocationResourceUri,
        KubernetesVersionProfileInner kubernetesVersions);

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    KubernetesVersionProfileInner putKubernetesVersions(String customLocationResourceUri,
        KubernetesVersionProfileInner kubernetesVersions, Context context);

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteKubernetesVersions(String customLocationResourceUri);

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteKubernetesVersions(String customLocationResourceUri, Context context);

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteKubernetesVersions(String customLocationResourceUri);

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteKubernetesVersions(String customLocationResourceUri, Context context);

    /**
     * Lists the supported VM skus
     * 
     * Lists the supported VM skus for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VmSkuProfileInner> getVMSkusWithResponse(String customLocationResourceUri, Context context);

    /**
     * Lists the supported VM skus
     * 
     * Lists the supported VM skus for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VmSkuProfileInner getVMSkus(String customLocationResourceUri);

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<VmSkuProfileInner>, VmSkuProfileInner> beginPutVMSkus(String customLocationResourceUri,
        VmSkuProfileInner skus);

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<VmSkuProfileInner>, VmSkuProfileInner> beginPutVMSkus(String customLocationResourceUri,
        VmSkuProfileInner skus, Context context);

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VmSkuProfileInner putVMSkus(String customLocationResourceUri, VmSkuProfileInner skus);

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VmSkuProfileInner putVMSkus(String customLocationResourceUri, VmSkuProfileInner skus, Context context);

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteVMSkus(String customLocationResourceUri);

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteVMSkus(String customLocationResourceUri, Context context);

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteVMSkus(String customLocationResourceUri);

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteVMSkus(String customLocationResourceUri, Context context);
}
