// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Control plane and agent pool upgrade profiles.
 */
@Fluent
public final class ProvisionedClusterUpgradeProfileProperties
    implements JsonSerializable<ProvisionedClusterUpgradeProfileProperties> {
    /*
     * Provisioning state of the resource
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The list of available kubernetes version upgrades for the control plane.
     */
    private ProvisionedClusterPoolUpgradeProfile controlPlaneProfile;

    /**
     * Creates an instance of ProvisionedClusterUpgradeProfileProperties class.
     */
    public ProvisionedClusterUpgradeProfileProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the controlPlaneProfile property: The list of available kubernetes version upgrades for the control plane.
     * 
     * @return the controlPlaneProfile value.
     */
    public ProvisionedClusterPoolUpgradeProfile controlPlaneProfile() {
        return this.controlPlaneProfile;
    }

    /**
     * Set the controlPlaneProfile property: The list of available kubernetes version upgrades for the control plane.
     * 
     * @param controlPlaneProfile the controlPlaneProfile value to set.
     * @return the ProvisionedClusterUpgradeProfileProperties object itself.
     */
    public ProvisionedClusterUpgradeProfileProperties
        withControlPlaneProfile(ProvisionedClusterPoolUpgradeProfile controlPlaneProfile) {
        this.controlPlaneProfile = controlPlaneProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controlPlaneProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property controlPlaneProfile in model ProvisionedClusterUpgradeProfileProperties"));
        } else {
            controlPlaneProfile().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ProvisionedClusterUpgradeProfileProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("controlPlaneProfile", this.controlPlaneProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProvisionedClusterUpgradeProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProvisionedClusterUpgradeProfileProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProvisionedClusterUpgradeProfileProperties.
     */
    public static ProvisionedClusterUpgradeProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProvisionedClusterUpgradeProfileProperties deserializedProvisionedClusterUpgradeProfileProperties
                = new ProvisionedClusterUpgradeProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("controlPlaneProfile".equals(fieldName)) {
                    deserializedProvisionedClusterUpgradeProfileProperties.controlPlaneProfile
                        = ProvisionedClusterPoolUpgradeProfile.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProvisionedClusterUpgradeProfileProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProvisionedClusterUpgradeProfileProperties;
        });
    }
}
