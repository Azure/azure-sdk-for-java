// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of AgentPool.
 */
public interface AgentPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the extendedLocation property: Extended Location definition.
     * 
     * @return the extendedLocation value.
     */
    ExtendedLocation extendedLocation();

    /**
     * Gets the count property: Count - Number of agents to host docker containers. Allowed values must be in the range
     * of 1 to 100 (inclusive). The default value is 1.
     * 
     * @return the count value.
     */
    Integer count();

    /**
     * Gets the vmSize property: VmSize - The size of the agent pool VMs.
     * 
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    ResourceProvisioningState provisioningState();

    /**
     * Gets the status property: Defines the observed state of the agent pool.
     * 
     * @return the status value.
     */
    AgentPoolProvisioningStatusStatus status();

    /**
     * Gets the availabilityZones property: AvailabilityZones - The list of Availability zones to use for nodes.
     * Datacenter racks modelled as zones.
     * 
     * @return the availabilityZones value.
     */
    List<String> availabilityZones();

    /**
     * Gets the osType property: The particular KubernetesVersion's Image's OS Type (Linux, Windows).
     * 
     * @return the osType value.
     */
    OsType osType();

    /**
     * Gets the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is
     * Linux. The default is Windows2019 when OSType is Windows.
     * 
     * @return the osSku value.
     */
    Ossku osSku();

    /**
     * Gets the nodeImageVersion property: The version of node image.
     * 
     * @return the nodeImageVersion value.
     */
    String nodeImageVersion();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner object.
     * 
     * @return the inner object.
     */
    AgentPoolInner innerModel();

    /**
     * The entirety of the AgentPool definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation, DefinitionStages.WithScope,
        DefinitionStages.WithCreate {
    }

    /**
     * The AgentPool definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the AgentPool definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the AgentPool definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithScope withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithScope withRegion(String location);
        }

        /**
         * The stage of the AgentPool definition allowing to specify parent resource.
         */
        interface WithScope {
            /**
             * Specifies connectedClusterResourceUri.
             * 
             * @param connectedClusterResourceUri The fully qualified Azure Resource manager identifier of the connected
             * cluster resource.
             * @return the next definition stage.
             */
            WithCreate withExistingConnectedClusterResourceUri(String connectedClusterResourceUri);
        }

        /**
         * The stage of the AgentPool definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags, DefinitionStages.WithExtendedLocation, DefinitionStages.WithCount,
            DefinitionStages.WithVmSize, DefinitionStages.WithStatus, DefinitionStages.WithAvailabilityZones,
            DefinitionStages.WithOsType, DefinitionStages.WithOsSku, DefinitionStages.WithNodeImageVersion {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            AgentPool create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            AgentPool create(Context context);
        }

        /**
         * The stage of the AgentPool definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the AgentPool definition allowing to specify extendedLocation.
         */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: Extended Location definition.
             * 
             * @param extendedLocation Extended Location definition.
             * @return the next definition stage.
             */
            WithCreate withExtendedLocation(ExtendedLocation extendedLocation);
        }

        /**
         * The stage of the AgentPool definition allowing to specify count.
         */
        interface WithCount {
            /**
             * Specifies the count property: Count - Number of agents to host docker containers. Allowed values must be
             * in the range of 1 to 100 (inclusive). The default value is 1..
             * 
             * @param count Count - Number of agents to host docker containers. Allowed values must be in the range of 1
             * to 100 (inclusive). The default value is 1.
             * @return the next definition stage.
             */
            WithCreate withCount(Integer count);
        }

        /**
         * The stage of the AgentPool definition allowing to specify vmSize.
         */
        interface WithVmSize {
            /**
             * Specifies the vmSize property: VmSize - The size of the agent pool VMs..
             * 
             * @param vmSize VmSize - The size of the agent pool VMs.
             * @return the next definition stage.
             */
            WithCreate withVmSize(String vmSize);
        }

        /**
         * The stage of the AgentPool definition allowing to specify status.
         */
        interface WithStatus {
            /**
             * Specifies the status property: Defines the observed state of the agent pool.
             * 
             * @param status Defines the observed state of the agent pool.
             * @return the next definition stage.
             */
            WithCreate withStatus(AgentPoolProvisioningStatusStatus status);
        }

        /**
         * The stage of the AgentPool definition allowing to specify availabilityZones.
         */
        interface WithAvailabilityZones {
            /**
             * Specifies the availabilityZones property: AvailabilityZones - The list of Availability zones to use for
             * nodes. Datacenter racks modelled as zones.
             * 
             * @param availabilityZones AvailabilityZones - The list of Availability zones to use for nodes. Datacenter
             * racks modelled as zones.
             * @return the next definition stage.
             */
            WithCreate withAvailabilityZones(List<String> availabilityZones);
        }

        /**
         * The stage of the AgentPool definition allowing to specify osType.
         */
        interface WithOsType {
            /**
             * Specifies the osType property: The particular KubernetesVersion's Image's OS Type (Linux, Windows).
             * 
             * @param osType The particular KubernetesVersion's Image's OS Type (Linux, Windows).
             * @return the next definition stage.
             */
            WithCreate withOsType(OsType osType);
        }

        /**
         * The stage of the AgentPool definition allowing to specify osSku.
         */
        interface WithOsSku {
            /**
             * Specifies the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
             * OSType is Linux. The default is Windows2019 when OSType is Windows..
             * 
             * @param osSku Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux.
             * The default is Windows2019 when OSType is Windows.
             * @return the next definition stage.
             */
            WithCreate withOsSku(Ossku osSku);
        }

        /**
         * The stage of the AgentPool definition allowing to specify nodeImageVersion.
         */
        interface WithNodeImageVersion {
            /**
             * Specifies the nodeImageVersion property: The version of node image.
             * 
             * @param nodeImageVersion The version of node image.
             * @return the next definition stage.
             */
            WithCreate withNodeImageVersion(String nodeImageVersion);
        }
    }

    /**
     * Begins update for the AgentPool resource.
     * 
     * @return the stage of resource update.
     */
    AgentPool.Update update();

    /**
     * The template for AgentPool update.
     */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        AgentPool apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        AgentPool apply(Context context);
    }

    /**
     * The AgentPool update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the AgentPool update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    AgentPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    AgentPool refresh(Context context);
}
