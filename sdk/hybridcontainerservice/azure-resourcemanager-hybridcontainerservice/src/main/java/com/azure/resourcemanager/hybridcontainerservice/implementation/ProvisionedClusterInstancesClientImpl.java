// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridcontainerservice.fluent.ProvisionedClusterInstancesClient;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ListCredentialResponseInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ProvisionedClusterInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ProvisionedClusterUpgradeProfileInner;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClusterListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ProvisionedClusterInstancesClient.
 */
public final class ProvisionedClusterInstancesClientImpl implements ProvisionedClusterInstancesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ProvisionedClusterInstancesService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridContainerServiceImpl client;

    /**
     * Initializes an instance of ProvisionedClusterInstancesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ProvisionedClusterInstancesClientImpl(HybridContainerServiceImpl client) {
        this.service = RestProxy.create(ProvisionedClusterInstancesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridContainerServiceProvisionedClusterInstances to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridContainerServi")
    public interface ProvisionedClusterInstancesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProvisionedClusterInner>> get(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ProvisionedClusterInner provisionedClusterInstance,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProvisionedClusterListResult>> list(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/upgradeProfiles/default")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProvisionedClusterUpgradeProfileInner>> getUpgradeProfile(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/listUserKubeconfig")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> listUserKubeconfig(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/listAdminKubeconfig")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> listAdminKubeconfig(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProvisionedClusterListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster instance along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProvisionedClusterInner>> getWithResponseAsync(String connectedClusterResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), connectedClusterResourceUri,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster instance along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProvisionedClusterInner>> getWithResponseAsync(String connectedClusterResourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), connectedClusterResourceUri, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Gets the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster instance on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisionedClusterInner> getAsync(String connectedClusterResourceUri) {
        return getWithResponseAsync(connectedClusterResourceUri).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ProvisionedClusterInner> getWithResponse(String connectedClusterResourceUri, Context context) {
        return getWithResponseAsync(connectedClusterResourceUri, context).block();
    }

    /**
     * Gets the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisionedClusterInner get(String connectedClusterResourceUri) {
        return getWithResponse(connectedClusterResourceUri, Context.NONE).getValue();
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster resource definition along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String connectedClusterResourceUri,
        ProvisionedClusterInner provisionedClusterInstance) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        if (provisionedClusterInstance == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisionedClusterInstance is required and cannot be null."));
        } else {
            provisionedClusterInstance.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), connectedClusterResourceUri,
                this.client.getApiVersion(), provisionedClusterInstance, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster resource definition along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String connectedClusterResourceUri,
        ProvisionedClusterInner provisionedClusterInstance, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        if (provisionedClusterInstance == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisionedClusterInstance is required and cannot be null."));
        } else {
            provisionedClusterInstance.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), connectedClusterResourceUri,
            this.client.getApiVersion(), provisionedClusterInstance, accept, context);
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the provisioned cluster resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProvisionedClusterInner>, ProvisionedClusterInner> beginCreateOrUpdateAsync(
        String connectedClusterResourceUri, ProvisionedClusterInner provisionedClusterInstance) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(connectedClusterResourceUri, provisionedClusterInstance);
        return this.client.<ProvisionedClusterInner, ProvisionedClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ProvisionedClusterInner.class, ProvisionedClusterInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the provisioned cluster resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProvisionedClusterInner>, ProvisionedClusterInner> beginCreateOrUpdateAsync(
        String connectedClusterResourceUri, ProvisionedClusterInner provisionedClusterInstance, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(connectedClusterResourceUri, provisionedClusterInstance, context);
        return this.client.<ProvisionedClusterInner, ProvisionedClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ProvisionedClusterInner.class, ProvisionedClusterInner.class, context);
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the provisioned cluster resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProvisionedClusterInner>, ProvisionedClusterInner>
        beginCreateOrUpdate(String connectedClusterResourceUri, ProvisionedClusterInner provisionedClusterInstance) {
        return this.beginCreateOrUpdateAsync(connectedClusterResourceUri, provisionedClusterInstance).getSyncPoller();
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the provisioned cluster resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProvisionedClusterInner>, ProvisionedClusterInner> beginCreateOrUpdate(
        String connectedClusterResourceUri, ProvisionedClusterInner provisionedClusterInstance, Context context) {
        return this.beginCreateOrUpdateAsync(connectedClusterResourceUri, provisionedClusterInstance, context)
            .getSyncPoller();
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisionedClusterInner> createOrUpdateAsync(String connectedClusterResourceUri,
        ProvisionedClusterInner provisionedClusterInstance) {
        return beginCreateOrUpdateAsync(connectedClusterResourceUri, provisionedClusterInstance).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisionedClusterInner> createOrUpdateAsync(String connectedClusterResourceUri,
        ProvisionedClusterInner provisionedClusterInstance, Context context) {
        return beginCreateOrUpdateAsync(connectedClusterResourceUri, provisionedClusterInstance, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisionedClusterInner createOrUpdate(String connectedClusterResourceUri,
        ProvisionedClusterInner provisionedClusterInstance) {
        return createOrUpdateAsync(connectedClusterResourceUri, provisionedClusterInstance).block();
    }

    /**
     * Creates or updates the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param provisionedClusterInstance Provisioned Cluster resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioned cluster resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisionedClusterInner createOrUpdate(String connectedClusterResourceUri,
        ProvisionedClusterInner provisionedClusterInstance, Context context) {
        return createOrUpdateAsync(connectedClusterResourceUri, provisionedClusterInstance, context).block();
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String connectedClusterResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), connectedClusterResourceUri,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String connectedClusterResourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), connectedClusterResourceUri, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String connectedClusterResourceUri) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(connectedClusterResourceUri);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String connectedClusterResourceUri, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(connectedClusterResourceUri, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String connectedClusterResourceUri) {
        return this.beginDeleteAsync(connectedClusterResourceUri).getSyncPoller();
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String connectedClusterResourceUri, Context context) {
        return this.beginDeleteAsync(connectedClusterResourceUri, context).getSyncPoller();
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String connectedClusterResourceUri) {
        return beginDeleteAsync(connectedClusterResourceUri).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String connectedClusterResourceUri, Context context) {
        return beginDeleteAsync(connectedClusterResourceUri, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String connectedClusterResourceUri) {
        deleteAsync(connectedClusterResourceUri).block();
    }

    /**
     * Deletes the provisioned cluster instance.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String connectedClusterResourceUri, Context context) {
        deleteAsync(connectedClusterResourceUri, context).block();
    }

    /**
     * Lists the ProvisionedClusterInstance resource associated with the ConnectedCluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the ProvisionedClusterInstance resource associated with the ConnectedCluster along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProvisionedClusterInner>> listSinglePageAsync(String connectedClusterResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), connectedClusterResourceUri,
                this.client.getApiVersion(), accept, context))
            .<PagedResponse<ProvisionedClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the ProvisionedClusterInstance resource associated with the ConnectedCluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the ProvisionedClusterInstance resource associated with the ConnectedCluster along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProvisionedClusterInner>> listSinglePageAsync(String connectedClusterResourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), connectedClusterResourceUri, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists the ProvisionedClusterInstance resource associated with the ConnectedCluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the ProvisionedClusterInstance resource associated with the ConnectedCluster as paginated response
     * with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProvisionedClusterInner> listAsync(String connectedClusterResourceUri) {
        return new PagedFlux<>(() -> listSinglePageAsync(connectedClusterResourceUri),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the ProvisionedClusterInstance resource associated with the ConnectedCluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the ProvisionedClusterInstance resource associated with the ConnectedCluster as paginated response
     * with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProvisionedClusterInner> listAsync(String connectedClusterResourceUri, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(connectedClusterResourceUri, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the ProvisionedClusterInstance resource associated with the ConnectedCluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the ProvisionedClusterInstance resource associated with the ConnectedCluster as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProvisionedClusterInner> list(String connectedClusterResourceUri) {
        return new PagedIterable<>(listAsync(connectedClusterResourceUri));
    }

    /**
     * Lists the ProvisionedClusterInstance resource associated with the ConnectedCluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the ProvisionedClusterInstance resource associated with the ConnectedCluster as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProvisionedClusterInner> list(String connectedClusterResourceUri, Context context) {
        return new PagedIterable<>(listAsync(connectedClusterResourceUri, context));
    }

    /**
     * Gets the upgrade profile of a provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the upgrade profile of a provisioned cluster along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProvisionedClusterUpgradeProfileInner>>
        getUpgradeProfileWithResponseAsync(String connectedClusterResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getUpgradeProfile(this.client.getEndpoint(), connectedClusterResourceUri,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the upgrade profile of a provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the upgrade profile of a provisioned cluster along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProvisionedClusterUpgradeProfileInner>>
        getUpgradeProfileWithResponseAsync(String connectedClusterResourceUri, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getUpgradeProfile(this.client.getEndpoint(), connectedClusterResourceUri,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the upgrade profile of a provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the upgrade profile of a provisioned cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisionedClusterUpgradeProfileInner> getUpgradeProfileAsync(String connectedClusterResourceUri) {
        return getUpgradeProfileWithResponseAsync(connectedClusterResourceUri)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the upgrade profile of a provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the upgrade profile of a provisioned cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ProvisionedClusterUpgradeProfileInner>
        getUpgradeProfileWithResponse(String connectedClusterResourceUri, Context context) {
        return getUpgradeProfileWithResponseAsync(connectedClusterResourceUri, context).block();
    }

    /**
     * Gets the upgrade profile of a provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the upgrade profile of a provisioned cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisionedClusterUpgradeProfileInner getUpgradeProfile(String connectedClusterResourceUri) {
        return getUpgradeProfileWithResponse(connectedClusterResourceUri, Context.NONE).getValue();
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> listUserKubeconfigWithResponseAsync(String connectedClusterResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listUserKubeconfig(this.client.getEndpoint(), this.client.getApiVersion(),
                connectedClusterResourceUri, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> listUserKubeconfigWithResponseAsync(String connectedClusterResourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listUserKubeconfig(this.client.getEndpoint(), this.client.getApiVersion(),
            connectedClusterResourceUri, accept, context);
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ListCredentialResponseInner>, ListCredentialResponseInner>
        beginListUserKubeconfigAsync(String connectedClusterResourceUri) {
        Mono<Response<Flux<ByteBuffer>>> mono = listUserKubeconfigWithResponseAsync(connectedClusterResourceUri);
        return this.client.<ListCredentialResponseInner, ListCredentialResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ListCredentialResponseInner.class, ListCredentialResponseInner.class,
            this.client.getContext());
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ListCredentialResponseInner>, ListCredentialResponseInner>
        beginListUserKubeconfigAsync(String connectedClusterResourceUri, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = listUserKubeconfigWithResponseAsync(connectedClusterResourceUri, context);
        return this.client.<ListCredentialResponseInner, ListCredentialResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ListCredentialResponseInner.class, ListCredentialResponseInner.class,
            context);
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ListCredentialResponseInner>, ListCredentialResponseInner>
        beginListUserKubeconfig(String connectedClusterResourceUri) {
        return this.beginListUserKubeconfigAsync(connectedClusterResourceUri).getSyncPoller();
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ListCredentialResponseInner>, ListCredentialResponseInner>
        beginListUserKubeconfig(String connectedClusterResourceUri, Context context) {
        return this.beginListUserKubeconfigAsync(connectedClusterResourceUri, context).getSyncPoller();
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ListCredentialResponseInner> listUserKubeconfigAsync(String connectedClusterResourceUri) {
        return beginListUserKubeconfigAsync(connectedClusterResourceUri).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ListCredentialResponseInner> listUserKubeconfigAsync(String connectedClusterResourceUri,
        Context context) {
        return beginListUserKubeconfigAsync(connectedClusterResourceUri, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListCredentialResponseInner listUserKubeconfig(String connectedClusterResourceUri) {
        return listUserKubeconfigAsync(connectedClusterResourceUri).block();
    }

    /**
     * Lists the user credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListCredentialResponseInner listUserKubeconfig(String connectedClusterResourceUri, Context context) {
        return listUserKubeconfigAsync(connectedClusterResourceUri, context).block();
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> listAdminKubeconfigWithResponseAsync(String connectedClusterResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAdminKubeconfig(this.client.getEndpoint(), this.client.getApiVersion(),
                connectedClusterResourceUri, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> listAdminKubeconfigWithResponseAsync(String connectedClusterResourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listAdminKubeconfig(this.client.getEndpoint(), this.client.getApiVersion(),
            connectedClusterResourceUri, accept, context);
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ListCredentialResponseInner>, ListCredentialResponseInner>
        beginListAdminKubeconfigAsync(String connectedClusterResourceUri) {
        Mono<Response<Flux<ByteBuffer>>> mono = listAdminKubeconfigWithResponseAsync(connectedClusterResourceUri);
        return this.client.<ListCredentialResponseInner, ListCredentialResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ListCredentialResponseInner.class, ListCredentialResponseInner.class,
            this.client.getContext());
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ListCredentialResponseInner>, ListCredentialResponseInner>
        beginListAdminKubeconfigAsync(String connectedClusterResourceUri, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = listAdminKubeconfigWithResponseAsync(connectedClusterResourceUri, context);
        return this.client.<ListCredentialResponseInner, ListCredentialResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ListCredentialResponseInner.class, ListCredentialResponseInner.class,
            context);
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ListCredentialResponseInner>, ListCredentialResponseInner>
        beginListAdminKubeconfig(String connectedClusterResourceUri) {
        return this.beginListAdminKubeconfigAsync(connectedClusterResourceUri).getSyncPoller();
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ListCredentialResponseInner>, ListCredentialResponseInner>
        beginListAdminKubeconfig(String connectedClusterResourceUri, Context context) {
        return this.beginListAdminKubeconfigAsync(connectedClusterResourceUri, context).getSyncPoller();
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ListCredentialResponseInner> listAdminKubeconfigAsync(String connectedClusterResourceUri) {
        return beginListAdminKubeconfigAsync(connectedClusterResourceUri).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ListCredentialResponseInner> listAdminKubeconfigAsync(String connectedClusterResourceUri,
        Context context) {
        return beginListAdminKubeconfigAsync(connectedClusterResourceUri, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListCredentialResponseInner listAdminKubeconfig(String connectedClusterResourceUri) {
        return listAdminKubeconfigAsync(connectedClusterResourceUri).block();
    }

    /**
     * Lists the admin credentials of the provisioned cluster (can only be used within private network).
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list kubeconfig result response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListCredentialResponseInner listAdminKubeconfig(String connectedClusterResourceUri, Context context) {
        return listAdminKubeconfigAsync(connectedClusterResourceUri, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the ProvisionedClusterInstance resource associated with the ConnectedCluster along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProvisionedClusterInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ProvisionedClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the ProvisionedClusterInstance resource associated with the ConnectedCluster along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProvisionedClusterInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
