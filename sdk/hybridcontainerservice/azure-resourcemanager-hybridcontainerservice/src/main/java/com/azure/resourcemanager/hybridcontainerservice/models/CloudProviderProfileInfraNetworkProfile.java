// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** InfraNetworkProfile - List of infra network profiles for the provisioned cluster. */
@Fluent
public final class CloudProviderProfileInfraNetworkProfile {
    /*
     * Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g.
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
     */
    @JsonProperty(value = "vnetSubnetIds")
    private List<String> vnetSubnetIds;

    /** Creates an instance of CloudProviderProfileInfraNetworkProfile class. */
    public CloudProviderProfileInfraNetworkProfile() {
    }

    /**
     * Get the vnetSubnetIds property: Array of references to azure resource corresponding to the new HybridAKSNetwork
     * object e.g.
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}.
     *
     * @return the vnetSubnetIds value.
     */
    public List<String> vnetSubnetIds() {
        return this.vnetSubnetIds;
    }

    /**
     * Set the vnetSubnetIds property: Array of references to azure resource corresponding to the new HybridAKSNetwork
     * object e.g.
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}.
     *
     * @param vnetSubnetIds the vnetSubnetIds value to set.
     * @return the CloudProviderProfileInfraNetworkProfile object itself.
     */
    public CloudProviderProfileInfraNetworkProfile withVnetSubnetIds(List<String> vnetSubnetIds) {
        this.vnetSubnetIds = vnetSubnetIds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
