// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The profile for the infrastructure networks used by the provisioned cluster.
 */
@Fluent
public final class CloudProviderProfileInfraNetworkProfile
    implements JsonSerializable<CloudProviderProfileInfraNetworkProfile> {
    /*
     * List of ARM resource Ids (maximum 1) for the infrastructure network object e.g.
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/
     * logicalNetworks/{logicalNetworkName}
     */
    private List<String> vnetSubnetIds;

    /**
     * Creates an instance of CloudProviderProfileInfraNetworkProfile class.
     */
    public CloudProviderProfileInfraNetworkProfile() {
    }

    /**
     * Get the vnetSubnetIds property: List of ARM resource Ids (maximum 1) for the infrastructure network object e.g.
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}.
     * 
     * @return the vnetSubnetIds value.
     */
    public List<String> vnetSubnetIds() {
        return this.vnetSubnetIds;
    }

    /**
     * Set the vnetSubnetIds property: List of ARM resource Ids (maximum 1) for the infrastructure network object e.g.
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}.
     * 
     * @param vnetSubnetIds the vnetSubnetIds value to set.
     * @return the CloudProviderProfileInfraNetworkProfile object itself.
     */
    public CloudProviderProfileInfraNetworkProfile withVnetSubnetIds(List<String> vnetSubnetIds) {
        this.vnetSubnetIds = vnetSubnetIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vnetSubnetIds", this.vnetSubnetIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudProviderProfileInfraNetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudProviderProfileInfraNetworkProfile if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudProviderProfileInfraNetworkProfile.
     */
    public static CloudProviderProfileInfraNetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudProviderProfileInfraNetworkProfile deserializedCloudProviderProfileInfraNetworkProfile
                = new CloudProviderProfileInfraNetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vnetSubnetIds".equals(fieldName)) {
                    List<String> vnetSubnetIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedCloudProviderProfileInfraNetworkProfile.vnetSubnetIds = vnetSubnetIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudProviderProfileInfraNetworkProfile;
        });
    }
}
