// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Infrastructure network profile for HCI platform.
 */
@Fluent
public final class VirtualNetworkPropertiesInfraVnetProfileHci
    implements JsonSerializable<VirtualNetworkPropertiesInfraVnetProfileHci> {
    /*
     * Group in MOC(Microsoft On-premises Cloud)
     */
    private String mocGroup;

    /*
     * Location in MOC(Microsoft On-premises Cloud)
     */
    private String mocLocation;

    /*
     * Virtual Network name in MOC(Microsoft On-premises Cloud)
     */
    private String mocVnetName;

    /**
     * Creates an instance of VirtualNetworkPropertiesInfraVnetProfileHci class.
     */
    public VirtualNetworkPropertiesInfraVnetProfileHci() {
    }

    /**
     * Get the mocGroup property: Group in MOC(Microsoft On-premises Cloud).
     * 
     * @return the mocGroup value.
     */
    public String mocGroup() {
        return this.mocGroup;
    }

    /**
     * Set the mocGroup property: Group in MOC(Microsoft On-premises Cloud).
     * 
     * @param mocGroup the mocGroup value to set.
     * @return the VirtualNetworkPropertiesInfraVnetProfileHci object itself.
     */
    public VirtualNetworkPropertiesInfraVnetProfileHci withMocGroup(String mocGroup) {
        this.mocGroup = mocGroup;
        return this;
    }

    /**
     * Get the mocLocation property: Location in MOC(Microsoft On-premises Cloud).
     * 
     * @return the mocLocation value.
     */
    public String mocLocation() {
        return this.mocLocation;
    }

    /**
     * Set the mocLocation property: Location in MOC(Microsoft On-premises Cloud).
     * 
     * @param mocLocation the mocLocation value to set.
     * @return the VirtualNetworkPropertiesInfraVnetProfileHci object itself.
     */
    public VirtualNetworkPropertiesInfraVnetProfileHci withMocLocation(String mocLocation) {
        this.mocLocation = mocLocation;
        return this;
    }

    /**
     * Get the mocVnetName property: Virtual Network name in MOC(Microsoft On-premises Cloud).
     * 
     * @return the mocVnetName value.
     */
    public String mocVnetName() {
        return this.mocVnetName;
    }

    /**
     * Set the mocVnetName property: Virtual Network name in MOC(Microsoft On-premises Cloud).
     * 
     * @param mocVnetName the mocVnetName value to set.
     * @return the VirtualNetworkPropertiesInfraVnetProfileHci object itself.
     */
    public VirtualNetworkPropertiesInfraVnetProfileHci withMocVnetName(String mocVnetName) {
        this.mocVnetName = mocVnetName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mocGroup", this.mocGroup);
        jsonWriter.writeStringField("mocLocation", this.mocLocation);
        jsonWriter.writeStringField("mocVnetName", this.mocVnetName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualNetworkPropertiesInfraVnetProfileHci from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualNetworkPropertiesInfraVnetProfileHci if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualNetworkPropertiesInfraVnetProfileHci.
     */
    public static VirtualNetworkPropertiesInfraVnetProfileHci fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualNetworkPropertiesInfraVnetProfileHci deserializedVirtualNetworkPropertiesInfraVnetProfileHci
                = new VirtualNetworkPropertiesInfraVnetProfileHci();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mocGroup".equals(fieldName)) {
                    deserializedVirtualNetworkPropertiesInfraVnetProfileHci.mocGroup = reader.getString();
                } else if ("mocLocation".equals(fieldName)) {
                    deserializedVirtualNetworkPropertiesInfraVnetProfileHci.mocLocation = reader.getString();
                } else if ("mocVnetName".equals(fieldName)) {
                    deserializedVirtualNetworkPropertiesInfraVnetProfileHci.mocVnetName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualNetworkPropertiesInfraVnetProfileHci;
        });
    }
}
