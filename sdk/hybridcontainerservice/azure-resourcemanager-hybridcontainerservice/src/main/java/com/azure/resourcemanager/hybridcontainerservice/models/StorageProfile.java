// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The storage configuration profile for the provisioned cluster.
 */
@Fluent
public final class StorageProfile {
    /*
     * SMB CSI Driver settings for the storage profile.
     */
    @JsonProperty(value = "smbCsiDriver")
    private StorageProfileSmbCsiDriver smbCsiDriver;

    /*
     * NFS CSI Driver settings for the storage profile.
     */
    @JsonProperty(value = "nfsCsiDriver")
    private StorageProfileNfsCsiDriver nfsCsiDriver;

    /**
     * Creates an instance of StorageProfile class.
     */
    public StorageProfile() {
    }

    /**
     * Get the smbCsiDriver property: SMB CSI Driver settings for the storage profile.
     * 
     * @return the smbCsiDriver value.
     */
    public StorageProfileSmbCsiDriver smbCsiDriver() {
        return this.smbCsiDriver;
    }

    /**
     * Set the smbCsiDriver property: SMB CSI Driver settings for the storage profile.
     * 
     * @param smbCsiDriver the smbCsiDriver value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withSmbCsiDriver(StorageProfileSmbCsiDriver smbCsiDriver) {
        this.smbCsiDriver = smbCsiDriver;
        return this;
    }

    /**
     * Get the nfsCsiDriver property: NFS CSI Driver settings for the storage profile.
     * 
     * @return the nfsCsiDriver value.
     */
    public StorageProfileNfsCsiDriver nfsCsiDriver() {
        return this.nfsCsiDriver;
    }

    /**
     * Set the nfsCsiDriver property: NFS CSI Driver settings for the storage profile.
     * 
     * @param nfsCsiDriver the nfsCsiDriver value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withNfsCsiDriver(StorageProfileNfsCsiDriver nfsCsiDriver) {
        this.nfsCsiDriver = nfsCsiDriver;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (smbCsiDriver() != null) {
            smbCsiDriver().validate();
        }
        if (nfsCsiDriver() != null) {
            nfsCsiDriver().validate();
        }
    }
}
