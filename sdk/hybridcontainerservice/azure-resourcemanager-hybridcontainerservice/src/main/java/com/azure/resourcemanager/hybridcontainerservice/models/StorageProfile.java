// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The storage configuration profile for the provisioned cluster.
 */
@Fluent
public final class StorageProfile implements JsonSerializable<StorageProfile> {
    /*
     * SMB CSI Driver settings for the storage profile.
     */
    private StorageProfileSmbCsiDriver smbCsiDriver;

    /*
     * NFS CSI Driver settings for the storage profile.
     */
    private StorageProfileNfsCsiDriver nfsCsiDriver;

    /**
     * Creates an instance of StorageProfile class.
     */
    public StorageProfile() {
    }

    /**
     * Get the smbCsiDriver property: SMB CSI Driver settings for the storage profile.
     * 
     * @return the smbCsiDriver value.
     */
    public StorageProfileSmbCsiDriver smbCsiDriver() {
        return this.smbCsiDriver;
    }

    /**
     * Set the smbCsiDriver property: SMB CSI Driver settings for the storage profile.
     * 
     * @param smbCsiDriver the smbCsiDriver value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withSmbCsiDriver(StorageProfileSmbCsiDriver smbCsiDriver) {
        this.smbCsiDriver = smbCsiDriver;
        return this;
    }

    /**
     * Get the nfsCsiDriver property: NFS CSI Driver settings for the storage profile.
     * 
     * @return the nfsCsiDriver value.
     */
    public StorageProfileNfsCsiDriver nfsCsiDriver() {
        return this.nfsCsiDriver;
    }

    /**
     * Set the nfsCsiDriver property: NFS CSI Driver settings for the storage profile.
     * 
     * @param nfsCsiDriver the nfsCsiDriver value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withNfsCsiDriver(StorageProfileNfsCsiDriver nfsCsiDriver) {
        this.nfsCsiDriver = nfsCsiDriver;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (smbCsiDriver() != null) {
            smbCsiDriver().validate();
        }
        if (nfsCsiDriver() != null) {
            nfsCsiDriver().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("smbCsiDriver", this.smbCsiDriver);
        jsonWriter.writeJsonField("nfsCsiDriver", this.nfsCsiDriver);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageProfile.
     */
    public static StorageProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageProfile deserializedStorageProfile = new StorageProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("smbCsiDriver".equals(fieldName)) {
                    deserializedStorageProfile.smbCsiDriver = StorageProfileSmbCsiDriver.fromJson(reader);
                } else if ("nfsCsiDriver".equals(fieldName)) {
                    deserializedStorageProfile.nfsCsiDriver = StorageProfileNfsCsiDriver.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageProfile;
        });
    }
}
