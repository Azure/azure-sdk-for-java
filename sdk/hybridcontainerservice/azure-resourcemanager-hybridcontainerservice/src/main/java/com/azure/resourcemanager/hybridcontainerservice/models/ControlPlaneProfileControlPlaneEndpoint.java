// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IP Address of the Kubernetes API server.
 */
@Fluent
public final class ControlPlaneProfileControlPlaneEndpoint
    implements JsonSerializable<ControlPlaneProfileControlPlaneEndpoint> {
    /*
     * IP address of the Kubernetes API server
     */
    private String hostIp;

    /**
     * Creates an instance of ControlPlaneProfileControlPlaneEndpoint class.
     */
    public ControlPlaneProfileControlPlaneEndpoint() {
    }

    /**
     * Get the hostIp property: IP address of the Kubernetes API server.
     * 
     * @return the hostIp value.
     */
    public String hostIp() {
        return this.hostIp;
    }

    /**
     * Set the hostIp property: IP address of the Kubernetes API server.
     * 
     * @param hostIp the hostIp value to set.
     * @return the ControlPlaneProfileControlPlaneEndpoint object itself.
     */
    public ControlPlaneProfileControlPlaneEndpoint withHostIp(String hostIp) {
        this.hostIp = hostIp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostIP", this.hostIp);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ControlPlaneProfileControlPlaneEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ControlPlaneProfileControlPlaneEndpoint if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ControlPlaneProfileControlPlaneEndpoint.
     */
    public static ControlPlaneProfileControlPlaneEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ControlPlaneProfileControlPlaneEndpoint deserializedControlPlaneProfileControlPlaneEndpoint
                = new ControlPlaneProfileControlPlaneEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostIP".equals(fieldName)) {
                    deserializedControlPlaneProfileControlPlaneEndpoint.hostIp = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedControlPlaneProfileControlPlaneEndpoint;
        });
    }
}
