// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridcontainerservice.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.KubernetesVersionProfileInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.VmSkuProfileInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ResourceProvidersClient.
 */
public final class ResourceProvidersClientImpl implements ResourceProvidersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ResourceProvidersService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridContainerServiceImpl client;

    /**
     * Initializes an instance of ResourceProvidersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ResourceProvidersClientImpl(HybridContainerServiceImpl client) {
        this.service
            = RestProxy.create(ResourceProvidersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridContainerServiceResourceProviders to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridContainerServi")
    public interface ResourceProvidersService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/kubernetesVersions/default")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<KubernetesVersionProfileInner>> getKubernetesVersions(@HostParam("$host") String endpoint,
            @PathParam(value = "customLocationResourceUri", encoded = true) String customLocationResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/kubernetesVersions/default")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> putKubernetesVersions(@HostParam("$host") String endpoint,
            @PathParam(value = "customLocationResourceUri", encoded = true) String customLocationResourceUri,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") KubernetesVersionProfileInner kubernetesVersions,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/kubernetesVersions/default")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> deleteKubernetesVersions(@HostParam("$host") String endpoint,
            @PathParam(value = "customLocationResourceUri", encoded = true) String customLocationResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/skus/default")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VmSkuProfileInner>> getVMSkus(@HostParam("$host") String endpoint,
            @PathParam(value = "customLocationResourceUri", encoded = true) String customLocationResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/skus/default")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> putVMSkus(@HostParam("$host") String endpoint,
            @PathParam(value = "customLocationResourceUri", encoded = true) String customLocationResourceUri,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") VmSkuProfileInner skus,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/skus/default")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> deleteVMSkus(@HostParam("$host") String endpoint,
            @PathParam(value = "customLocationResourceUri", encoded = true) String customLocationResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists the supported kubernetes versions
     * 
     * Lists the supported kubernetes versions for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<KubernetesVersionProfileInner>>
        getKubernetesVersionsWithResponseAsync(String customLocationResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getKubernetesVersions(this.client.getEndpoint(), customLocationResourceUri,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the supported kubernetes versions
     * 
     * Lists the supported kubernetes versions for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<KubernetesVersionProfileInner>>
        getKubernetesVersionsWithResponseAsync(String customLocationResourceUri, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getKubernetesVersions(this.client.getEndpoint(), customLocationResourceUri,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Lists the supported kubernetes versions
     * 
     * Lists the supported kubernetes versions for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesVersionProfileInner> getKubernetesVersionsAsync(String customLocationResourceUri) {
        return getKubernetesVersionsWithResponseAsync(customLocationResourceUri)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists the supported kubernetes versions
     * 
     * Lists the supported kubernetes versions for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KubernetesVersionProfileInner> getKubernetesVersionsWithResponse(String customLocationResourceUri,
        Context context) {
        return getKubernetesVersionsWithResponseAsync(customLocationResourceUri, context).block();
    }

    /**
     * Lists the supported kubernetes versions
     * 
     * Lists the supported kubernetes versions for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KubernetesVersionProfileInner getKubernetesVersions(String customLocationResourceUri) {
        return getKubernetesVersionsWithResponse(customLocationResourceUri, Context.NONE).getValue();
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> putKubernetesVersionsWithResponseAsync(String customLocationResourceUri,
        KubernetesVersionProfileInner kubernetesVersions) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        if (kubernetesVersions == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesVersions is required and cannot be null."));
        } else {
            kubernetesVersions.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.putKubernetesVersions(this.client.getEndpoint(), customLocationResourceUri,
                this.client.getApiVersion(), kubernetesVersions, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> putKubernetesVersionsWithResponseAsync(String customLocationResourceUri,
        KubernetesVersionProfileInner kubernetesVersions, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        if (kubernetesVersions == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesVersions is required and cannot be null."));
        } else {
            kubernetesVersions.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.putKubernetesVersions(this.client.getEndpoint(), customLocationResourceUri,
            this.client.getApiVersion(), kubernetesVersions, accept, context);
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<KubernetesVersionProfileInner>, KubernetesVersionProfileInner>
        beginPutKubernetesVersionsAsync(String customLocationResourceUri,
            KubernetesVersionProfileInner kubernetesVersions) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = putKubernetesVersionsWithResponseAsync(customLocationResourceUri, kubernetesVersions);
        return this.client.<KubernetesVersionProfileInner, KubernetesVersionProfileInner>getLroResult(mono,
            this.client.getHttpPipeline(), KubernetesVersionProfileInner.class, KubernetesVersionProfileInner.class,
            this.client.getContext());
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<KubernetesVersionProfileInner>, KubernetesVersionProfileInner>
        beginPutKubernetesVersionsAsync(String customLocationResourceUri,
            KubernetesVersionProfileInner kubernetesVersions, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = putKubernetesVersionsWithResponseAsync(customLocationResourceUri, kubernetesVersions, context);
        return this.client.<KubernetesVersionProfileInner, KubernetesVersionProfileInner>getLroResult(mono,
            this.client.getHttpPipeline(), KubernetesVersionProfileInner.class, KubernetesVersionProfileInner.class,
            context);
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<KubernetesVersionProfileInner>, KubernetesVersionProfileInner>
        beginPutKubernetesVersions(String customLocationResourceUri, KubernetesVersionProfileInner kubernetesVersions) {
        return this.beginPutKubernetesVersionsAsync(customLocationResourceUri, kubernetesVersions).getSyncPoller();
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<KubernetesVersionProfileInner>, KubernetesVersionProfileInner>
        beginPutKubernetesVersions(String customLocationResourceUri, KubernetesVersionProfileInner kubernetesVersions,
            Context context) {
        return this.beginPutKubernetesVersionsAsync(customLocationResourceUri, kubernetesVersions, context)
            .getSyncPoller();
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesVersionProfileInner> putKubernetesVersionsAsync(String customLocationResourceUri,
        KubernetesVersionProfileInner kubernetesVersions) {
        return beginPutKubernetesVersionsAsync(customLocationResourceUri, kubernetesVersions).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesVersionProfileInner> putKubernetesVersionsAsync(String customLocationResourceUri,
        KubernetesVersionProfileInner kubernetesVersions, Context context) {
        return beginPutKubernetesVersionsAsync(customLocationResourceUri, kubernetesVersions, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KubernetesVersionProfileInner putKubernetesVersions(String customLocationResourceUri,
        KubernetesVersionProfileInner kubernetesVersions) {
        return putKubernetesVersionsAsync(customLocationResourceUri, kubernetesVersions).block();
    }

    /**
     * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes versions).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param kubernetesVersions Kubernetes Versions resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported kubernetes versions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KubernetesVersionProfileInner putKubernetesVersions(String customLocationResourceUri,
        KubernetesVersionProfileInner kubernetesVersions, Context context) {
        return putKubernetesVersionsAsync(customLocationResourceUri, kubernetesVersions, context).block();
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>>
        deleteKubernetesVersionsWithResponseAsync(String customLocationResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteKubernetesVersions(this.client.getEndpoint(),
                customLocationResourceUri, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteKubernetesVersionsWithResponseAsync(String customLocationResourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteKubernetesVersions(this.client.getEndpoint(), customLocationResourceUri,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteKubernetesVersionsAsync(String customLocationResourceUri) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteKubernetesVersionsWithResponseAsync(customLocationResourceUri);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteKubernetesVersionsAsync(String customLocationResourceUri,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteKubernetesVersionsWithResponseAsync(customLocationResourceUri, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteKubernetesVersions(String customLocationResourceUri) {
        return this.beginDeleteKubernetesVersionsAsync(customLocationResourceUri).getSyncPoller();
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteKubernetesVersions(String customLocationResourceUri,
        Context context) {
        return this.beginDeleteKubernetesVersionsAsync(customLocationResourceUri, context).getSyncPoller();
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteKubernetesVersionsAsync(String customLocationResourceUri) {
        return beginDeleteKubernetesVersionsAsync(customLocationResourceUri).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteKubernetesVersionsAsync(String customLocationResourceUri, Context context) {
        return beginDeleteKubernetesVersionsAsync(customLocationResourceUri, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteKubernetesVersions(String customLocationResourceUri) {
        deleteKubernetesVersionsAsync(customLocationResourceUri).block();
    }

    /**
     * Deletes the default kubernetes version resource type
     * 
     * Delete the default kubernetes versions resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteKubernetesVersions(String customLocationResourceUri, Context context) {
        deleteKubernetesVersionsAsync(customLocationResourceUri, context).block();
    }

    /**
     * Lists the supported VM skus
     * 
     * Lists the supported VM skus for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VmSkuProfileInner>> getVMSkusWithResponseAsync(String customLocationResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getVMSkus(this.client.getEndpoint(), customLocationResourceUri,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the supported VM skus
     * 
     * Lists the supported VM skus for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VmSkuProfileInner>> getVMSkusWithResponseAsync(String customLocationResourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getVMSkus(this.client.getEndpoint(), customLocationResourceUri, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Lists the supported VM skus
     * 
     * Lists the supported VM skus for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VmSkuProfileInner> getVMSkusAsync(String customLocationResourceUri) {
        return getVMSkusWithResponseAsync(customLocationResourceUri).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists the supported VM skus
     * 
     * Lists the supported VM skus for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VmSkuProfileInner> getVMSkusWithResponse(String customLocationResourceUri, Context context) {
        return getVMSkusWithResponseAsync(customLocationResourceUri, context).block();
    }

    /**
     * Lists the supported VM skus
     * 
     * Lists the supported VM skus for the specified custom location.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VmSkuProfileInner getVMSkus(String customLocationResourceUri) {
        return getVMSkusWithResponse(customLocationResourceUri, Context.NONE).getValue();
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> putVMSkusWithResponseAsync(String customLocationResourceUri,
        VmSkuProfileInner skus) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        if (skus == null) {
            return Mono.error(new IllegalArgumentException("Parameter skus is required and cannot be null."));
        } else {
            skus.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.putVMSkus(this.client.getEndpoint(), customLocationResourceUri,
                this.client.getApiVersion(), skus, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> putVMSkusWithResponseAsync(String customLocationResourceUri,
        VmSkuProfileInner skus, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        if (skus == null) {
            return Mono.error(new IllegalArgumentException("Parameter skus is required and cannot be null."));
        } else {
            skus.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.putVMSkus(this.client.getEndpoint(), customLocationResourceUri, this.client.getApiVersion(),
            skus, accept, context);
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<VmSkuProfileInner>, VmSkuProfileInner>
        beginPutVMSkusAsync(String customLocationResourceUri, VmSkuProfileInner skus) {
        Mono<Response<Flux<ByteBuffer>>> mono = putVMSkusWithResponseAsync(customLocationResourceUri, skus);
        return this.client.<VmSkuProfileInner, VmSkuProfileInner>getLroResult(mono, this.client.getHttpPipeline(),
            VmSkuProfileInner.class, VmSkuProfileInner.class, this.client.getContext());
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<VmSkuProfileInner>, VmSkuProfileInner>
        beginPutVMSkusAsync(String customLocationResourceUri, VmSkuProfileInner skus, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = putVMSkusWithResponseAsync(customLocationResourceUri, skus, context);
        return this.client.<VmSkuProfileInner, VmSkuProfileInner>getLroResult(mono, this.client.getHttpPipeline(),
            VmSkuProfileInner.class, VmSkuProfileInner.class, context);
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<VmSkuProfileInner>, VmSkuProfileInner> beginPutVMSkus(String customLocationResourceUri,
        VmSkuProfileInner skus) {
        return this.beginPutVMSkusAsync(customLocationResourceUri, skus).getSyncPoller();
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<VmSkuProfileInner>, VmSkuProfileInner> beginPutVMSkus(String customLocationResourceUri,
        VmSkuProfileInner skus, Context context) {
        return this.beginPutVMSkusAsync(customLocationResourceUri, skus, context).getSyncPoller();
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VmSkuProfileInner> putVMSkusAsync(String customLocationResourceUri, VmSkuProfileInner skus) {
        return beginPutVMSkusAsync(customLocationResourceUri, skus).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VmSkuProfileInner> putVMSkusAsync(String customLocationResourceUri, VmSkuProfileInner skus,
        Context context) {
        return beginPutVMSkusAsync(customLocationResourceUri, skus, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VmSkuProfileInner putVMSkus(String customLocationResourceUri, VmSkuProfileInner skus) {
        return putVMSkusAsync(customLocationResourceUri, skus).block();
    }

    /**
     * Puts the default VM skus resource type (one time operation, before listing the VM skus).
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param skus VM SKUs resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of supported VM SKUs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VmSkuProfileInner putVMSkus(String customLocationResourceUri, VmSkuProfileInner skus, Context context) {
        return putVMSkusAsync(customLocationResourceUri, skus, context).block();
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteVMSkusWithResponseAsync(String customLocationResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteVMSkus(this.client.getEndpoint(), customLocationResourceUri,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteVMSkusWithResponseAsync(String customLocationResourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (customLocationResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter customLocationResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteVMSkus(this.client.getEndpoint(), customLocationResourceUri, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteVMSkusAsync(String customLocationResourceUri) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteVMSkusWithResponseAsync(customLocationResourceUri);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteVMSkusAsync(String customLocationResourceUri,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteVMSkusWithResponseAsync(customLocationResourceUri, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteVMSkus(String customLocationResourceUri) {
        return this.beginDeleteVMSkusAsync(customLocationResourceUri).getSyncPoller();
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteVMSkus(String customLocationResourceUri, Context context) {
        return this.beginDeleteVMSkusAsync(customLocationResourceUri, context).getSyncPoller();
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteVMSkusAsync(String customLocationResourceUri) {
        return beginDeleteVMSkusAsync(customLocationResourceUri).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteVMSkusAsync(String customLocationResourceUri, Context context) {
        return beginDeleteVMSkusAsync(customLocationResourceUri, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteVMSkus(String customLocationResourceUri) {
        deleteVMSkusAsync(customLocationResourceUri).block();
    }

    /**
     * Deletes the default VM skus resource type.
     * 
     * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom location
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteVMSkus(String customLocationResourceUri, Context context) {
        deleteVMSkusAsync(customLocationResourceUri, context).block();
    }
}
