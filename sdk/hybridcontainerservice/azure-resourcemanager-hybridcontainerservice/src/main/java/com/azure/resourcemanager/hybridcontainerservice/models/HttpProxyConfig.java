// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Configurations for provisioning the cluster with HTTP proxy servers. */
@Fluent
public final class HttpProxyConfig extends HttpProxyConfigResponse {
    /*
     * Password to use for connecting to proxy server
     */
    @JsonProperty(value = "password")
    private String password;

    /** Creates an instance of HttpProxyConfig class. */
    public HttpProxyConfig() {
    }

    /**
     * Get the password property: Password to use for connecting to proxy server.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password to use for connecting to proxy server.
     *
     * @param password the password value to set.
     * @return the HttpProxyConfig object itself.
     */
    public HttpProxyConfig withPassword(String password) {
        this.password = password;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpProxyConfig withHttpProxy(String httpProxy) {
        super.withHttpProxy(httpProxy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpProxyConfig withHttpsProxy(String httpsProxy) {
        super.withHttpsProxy(httpsProxy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpProxyConfig withNoProxy(List<String> noProxy) {
        super.withNoProxy(noProxy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpProxyConfig withTrustedCa(String trustedCa) {
        super.withTrustedCa(trustedCa);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpProxyConfig withUsername(String username) {
        super.withUsername(username);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
