// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridcontainerservice.fluent.AgentPoolsClient;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AgentPoolsClient.
 */
public final class AgentPoolsClientImpl implements AgentPoolsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AgentPoolsService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridContainerServiceImpl client;

    /**
     * Initializes an instance of AgentPoolsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AgentPoolsClientImpl(HybridContainerServiceImpl client) {
        this.service
            = RestProxy.create(AgentPoolsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridContainerServiceAgentPools to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridContainerServi")
    public interface AgentPoolsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AgentPoolInner>> get(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @PathParam("agentPoolName") String agentPoolName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @PathParam("agentPoolName") String agentPoolName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AgentPoolInner agentPool, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @PathParam("agentPoolName") String agentPoolName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AgentPoolListResult>> listByProvisionedCluster(@HostParam("$host") String endpoint,
            @PathParam(value = "connectedClusterResourceUri", encoded = true) String connectedClusterResourceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AgentPoolListResult>> listByProvisionedClusterNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified agent pool in the provisioned cluster along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AgentPoolInner>> getWithResponseAsync(String connectedClusterResourceUri,
        String agentPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), connectedClusterResourceUri, agentPoolName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified agent pool in the provisioned cluster along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AgentPoolInner>> getWithResponseAsync(String connectedClusterResourceUri,
        String agentPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), connectedClusterResourceUri, agentPoolName,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified agent pool in the provisioned cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> getAsync(String connectedClusterResourceUri, String agentPoolName) {
        return getWithResponseAsync(connectedClusterResourceUri, agentPoolName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified agent pool in the provisioned cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AgentPoolInner> getWithResponse(String connectedClusterResourceUri, String agentPoolName,
        Context context) {
        return getWithResponseAsync(connectedClusterResourceUri, agentPoolName, context).block();
    }

    /**
     * Gets the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified agent pool in the provisioned cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentPoolInner get(String connectedClusterResourceUri, String agentPoolName) {
        return getWithResponse(connectedClusterResourceUri, agentPoolName, Context.NONE).getValue();
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the agentPool resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String connectedClusterResourceUri,
        String agentPoolName, AgentPoolInner agentPool) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        if (agentPool == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPool is required and cannot be null."));
        } else {
            agentPool.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), connectedClusterResourceUri,
                agentPoolName, this.client.getApiVersion(), agentPool, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the agentPool resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String connectedClusterResourceUri,
        String agentPoolName, AgentPoolInner agentPool, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        if (agentPool == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPool is required and cannot be null."));
        } else {
            agentPool.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), connectedClusterResourceUri, agentPoolName,
            this.client.getApiVersion(), agentPool, accept, context);
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the agentPool resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AgentPoolInner>, AgentPoolInner>
        beginCreateOrUpdateAsync(String connectedClusterResourceUri, String agentPoolName, AgentPoolInner agentPool) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(connectedClusterResourceUri, agentPoolName, agentPool);
        return this.client.<AgentPoolInner, AgentPoolInner>getLroResult(mono, this.client.getHttpPipeline(),
            AgentPoolInner.class, AgentPoolInner.class, this.client.getContext());
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the agentPool resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AgentPoolInner>, AgentPoolInner> beginCreateOrUpdateAsync(
        String connectedClusterResourceUri, String agentPoolName, AgentPoolInner agentPool, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(connectedClusterResourceUri, agentPoolName, agentPool, context);
        return this.client.<AgentPoolInner, AgentPoolInner>getLroResult(mono, this.client.getHttpPipeline(),
            AgentPoolInner.class, AgentPoolInner.class, context);
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the agentPool resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AgentPoolInner>, AgentPoolInner>
        beginCreateOrUpdate(String connectedClusterResourceUri, String agentPoolName, AgentPoolInner agentPool) {
        return this.beginCreateOrUpdateAsync(connectedClusterResourceUri, agentPoolName, agentPool).getSyncPoller();
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the agentPool resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AgentPoolInner>, AgentPoolInner> beginCreateOrUpdate(
        String connectedClusterResourceUri, String agentPoolName, AgentPoolInner agentPool, Context context) {
        return this.beginCreateOrUpdateAsync(connectedClusterResourceUri, agentPoolName, agentPool, context)
            .getSyncPoller();
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the agentPool resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> createOrUpdateAsync(String connectedClusterResourceUri, String agentPoolName,
        AgentPoolInner agentPool) {
        return beginCreateOrUpdateAsync(connectedClusterResourceUri, agentPoolName, agentPool).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the agentPool resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> createOrUpdateAsync(String connectedClusterResourceUri, String agentPoolName,
        AgentPoolInner agentPool, Context context) {
        return beginCreateOrUpdateAsync(connectedClusterResourceUri, agentPoolName, agentPool, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the agentPool resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentPoolInner createOrUpdate(String connectedClusterResourceUri, String agentPoolName,
        AgentPoolInner agentPool) {
        return createOrUpdateAsync(connectedClusterResourceUri, agentPoolName, agentPool).block();
    }

    /**
     * Creates or updates the agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param agentPool Agent Pool resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the agentPool resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentPoolInner createOrUpdate(String connectedClusterResourceUri, String agentPoolName,
        AgentPoolInner agentPool, Context context) {
        return createOrUpdateAsync(connectedClusterResourceUri, agentPoolName, agentPool, context).block();
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String connectedClusterResourceUri,
        String agentPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), connectedClusterResourceUri,
                agentPoolName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String connectedClusterResourceUri,
        String agentPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), connectedClusterResourceUri, agentPoolName,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String connectedClusterResourceUri,
        String agentPoolName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(connectedClusterResourceUri, agentPoolName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String connectedClusterResourceUri,
        String agentPoolName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(connectedClusterResourceUri, agentPoolName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String connectedClusterResourceUri, String agentPoolName) {
        return this.beginDeleteAsync(connectedClusterResourceUri, agentPoolName).getSyncPoller();
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String connectedClusterResourceUri, String agentPoolName,
        Context context) {
        return this.beginDeleteAsync(connectedClusterResourceUri, agentPoolName, context).getSyncPoller();
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String connectedClusterResourceUri, String agentPoolName) {
        return beginDeleteAsync(connectedClusterResourceUri, agentPoolName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String connectedClusterResourceUri, String agentPoolName, Context context) {
        return beginDeleteAsync(connectedClusterResourceUri, agentPoolName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String connectedClusterResourceUri, String agentPoolName) {
        deleteAsync(connectedClusterResourceUri, agentPoolName).block();
    }

    /**
     * Deletes the specified agent pool in the provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param agentPoolName Parameter for the name of the agent pool in the provisioned cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String connectedClusterResourceUri, String agentPoolName, Context context) {
        deleteAsync(connectedClusterResourceUri, agentPoolName, context).block();
    }

    /**
     * Gets the list of agent pools in the specified provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of agent pools in the specified provisioned cluster along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AgentPoolInner>>
        listByProvisionedClusterSinglePageAsync(String connectedClusterResourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByProvisionedCluster(this.client.getEndpoint(),
                connectedClusterResourceUri, this.client.getApiVersion(), accept, context))
            .<PagedResponse<AgentPoolInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the list of agent pools in the specified provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of agent pools in the specified provisioned cluster along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AgentPoolInner>>
        listByProvisionedClusterSinglePageAsync(String connectedClusterResourceUri, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (connectedClusterResourceUri == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectedClusterResourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByProvisionedCluster(this.client.getEndpoint(), connectedClusterResourceUri,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets the list of agent pools in the specified provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of agent pools in the specified provisioned cluster as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AgentPoolInner> listByProvisionedClusterAsync(String connectedClusterResourceUri) {
        return new PagedFlux<>(() -> listByProvisionedClusterSinglePageAsync(connectedClusterResourceUri),
            nextLink -> listByProvisionedClusterNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of agent pools in the specified provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of agent pools in the specified provisioned cluster as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AgentPoolInner> listByProvisionedClusterAsync(String connectedClusterResourceUri,
        Context context) {
        return new PagedFlux<>(() -> listByProvisionedClusterSinglePageAsync(connectedClusterResourceUri, context),
            nextLink -> listByProvisionedClusterNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the list of agent pools in the specified provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of agent pools in the specified provisioned cluster as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AgentPoolInner> listByProvisionedCluster(String connectedClusterResourceUri) {
        return new PagedIterable<>(listByProvisionedClusterAsync(connectedClusterResourceUri));
    }

    /**
     * Gets the list of agent pools in the specified provisioned cluster.
     * 
     * @param connectedClusterResourceUri The fully qualified Azure Resource Manager identifier of the connected cluster
     * resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of agent pools in the specified provisioned cluster as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AgentPoolInner> listByProvisionedCluster(String connectedClusterResourceUri, Context context) {
        return new PagedIterable<>(listByProvisionedClusterAsync(connectedClusterResourceUri, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of all agent pool resources associated with the provisioned cluster along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AgentPoolInner>> listByProvisionedClusterNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByProvisionedClusterNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AgentPoolInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of all agent pool resources associated with the provisioned cluster along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AgentPoolInner>> listByProvisionedClusterNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByProvisionedClusterNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
