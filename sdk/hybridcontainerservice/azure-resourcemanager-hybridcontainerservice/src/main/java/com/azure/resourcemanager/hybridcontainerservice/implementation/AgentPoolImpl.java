// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPool;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolPatch;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus;
import com.azure.resourcemanager.hybridcontainerservice.models.ExtendedLocation;
import com.azure.resourcemanager.hybridcontainerservice.models.OsType;
import com.azure.resourcemanager.hybridcontainerservice.models.Ossku;
import com.azure.resourcemanager.hybridcontainerservice.models.ResourceProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class AgentPoolImpl implements AgentPool, AgentPool.Definition, AgentPool.Update {
    private AgentPoolInner innerObject;

    private final com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public Integer count() {
        return this.innerModel().count();
    }

    public String vmSize() {
        return this.innerModel().vmSize();
    }

    public ResourceProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public AgentPoolProvisioningStatusStatus status() {
        return this.innerModel().status();
    }

    public List<String> availabilityZones() {
        List<String> inner = this.innerModel().availabilityZones();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public OsType osType() {
        return this.innerModel().osType();
    }

    public Ossku osSku() {
        return this.innerModel().osSku();
    }

    public String nodeImageVersion() {
        return this.innerModel().nodeImageVersion();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public AgentPoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager manager() {
        return this.serviceManager;
    }

    private String connectedClusterResourceUri;

    private String agentPoolName;

    private AgentPoolPatch updateAgentPool;

    public AgentPoolImpl withExistingConnectedClusterResourceUri(String connectedClusterResourceUri) {
        this.connectedClusterResourceUri = connectedClusterResourceUri;
        return this;
    }

    public AgentPool create() {
        this.innerObject = serviceManager.serviceClient().getAgentPools().createOrUpdate(connectedClusterResourceUri,
            agentPoolName, this.innerModel(), Context.NONE);
        return this;
    }

    public AgentPool create(Context context) {
        this.innerObject = serviceManager.serviceClient().getAgentPools().createOrUpdate(connectedClusterResourceUri,
            agentPoolName, this.innerModel(), context);
        return this;
    }

    AgentPoolImpl(String name,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerObject = new AgentPoolInner();
        this.serviceManager = serviceManager;
        this.agentPoolName = name;
    }

    public AgentPoolImpl update() {
        this.updateAgentPool = new AgentPoolPatch();
        return this;
    }

    public AgentPool apply() {
        this.innerObject = serviceManager.serviceClient().getAgentPools().update(connectedClusterResourceUri,
            agentPoolName, updateAgentPool, Context.NONE);
        return this;
    }

    public AgentPool apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getAgentPools().update(connectedClusterResourceUri,
            agentPoolName, updateAgentPool, context);
        return this;
    }

    AgentPoolImpl(AgentPoolInner innerObject,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.connectedClusterResourceUri = Utils.getValueFromIdByParameterName(innerObject.id(),
            "/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "connectedClusterResourceUri");
        this.agentPoolName = Utils.getValueFromIdByParameterName(innerObject.id(),
            "/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "agentPoolName");
    }

    public AgentPool refresh() {
        this.innerObject = serviceManager.serviceClient().getAgentPools()
            .getWithResponse(connectedClusterResourceUri, agentPoolName, Context.NONE).getValue();
        return this;
    }

    public AgentPool refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getAgentPools()
            .getWithResponse(connectedClusterResourceUri, agentPoolName, context).getValue();
        return this;
    }

    public AgentPoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AgentPoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AgentPoolImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateAgentPool.withTags(tags);
            return this;
        }
    }

    public AgentPoolImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public AgentPoolImpl withCount(Integer count) {
        this.innerModel().withCount(count);
        return this;
    }

    public AgentPoolImpl withVmSize(String vmSize) {
        this.innerModel().withVmSize(vmSize);
        return this;
    }

    public AgentPoolImpl withStatus(AgentPoolProvisioningStatusStatus status) {
        this.innerModel().withStatus(status);
        return this;
    }

    public AgentPoolImpl withAvailabilityZones(List<String> availabilityZones) {
        this.innerModel().withAvailabilityZones(availabilityZones);
        return this;
    }

    public AgentPoolImpl withOsType(OsType osType) {
        this.innerModel().withOsType(osType);
        return this;
    }

    public AgentPoolImpl withOsSku(Ossku osSku) {
        this.innerModel().withOsSku(osSku);
        return this;
    }

    public AgentPoolImpl withNodeImageVersion(String nodeImageVersion) {
        this.innerModel().withNodeImageVersion(nodeImageVersion);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
