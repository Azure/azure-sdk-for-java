// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Status of the virtual network resource.
 */
@Fluent
public final class VirtualNetworkPropertiesStatus implements JsonSerializable<VirtualNetworkPropertiesStatus> {
    /*
     * The detailed status of the long running operation.
     */
    private VirtualNetworkPropertiesStatusOperationStatus operationStatus;

    /**
     * Creates an instance of VirtualNetworkPropertiesStatus class.
     */
    public VirtualNetworkPropertiesStatus() {
    }

    /**
     * Get the operationStatus property: The detailed status of the long running operation.
     * 
     * @return the operationStatus value.
     */
    public VirtualNetworkPropertiesStatusOperationStatus operationStatus() {
        return this.operationStatus;
    }

    /**
     * Set the operationStatus property: The detailed status of the long running operation.
     * 
     * @param operationStatus the operationStatus value to set.
     * @return the VirtualNetworkPropertiesStatus object itself.
     */
    public VirtualNetworkPropertiesStatus
        withOperationStatus(VirtualNetworkPropertiesStatusOperationStatus operationStatus) {
        this.operationStatus = operationStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationStatus() != null) {
            operationStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("operationStatus", this.operationStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualNetworkPropertiesStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualNetworkPropertiesStatus if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualNetworkPropertiesStatus.
     */
    public static VirtualNetworkPropertiesStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualNetworkPropertiesStatus deserializedVirtualNetworkPropertiesStatus
                = new VirtualNetworkPropertiesStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationStatus".equals(fieldName)) {
                    deserializedVirtualNetworkPropertiesStatus.operationStatus
                        = VirtualNetworkPropertiesStatusOperationStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualNetworkPropertiesStatus;
        });
    }
}
