// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * OIDC Issuer Profile specifies attributes for workload identity integration.
 */
@Fluent
public final class OidcIssuerProfile implements JsonSerializable<OidcIssuerProfile> {
    /*
     * Whether to enable oidc issuer for workload identity integration.
     */
    private Boolean enabled;

    /*
     * The issuer url for hybrid clusters connected to Arc used for the workload identity feature.
     */
    private String issuerUrl;

    /*
     * The issuer url for public cloud clusters - AKS, EKS, GKE - used for the workload identity feature.
     */
    private String selfHostedIssuerUrl;

    /**
     * Creates an instance of OidcIssuerProfile class.
     */
    public OidcIssuerProfile() {
    }

    /**
     * Get the enabled property: Whether to enable oidc issuer for workload identity integration.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Whether to enable oidc issuer for workload identity integration.
     * 
     * @param enabled the enabled value to set.
     * @return the OidcIssuerProfile object itself.
     */
    public OidcIssuerProfile withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the issuerUrl property: The issuer url for hybrid clusters connected to Arc used for the workload identity
     * feature.
     * 
     * @return the issuerUrl value.
     */
    public String issuerUrl() {
        return this.issuerUrl;
    }

    /**
     * Get the selfHostedIssuerUrl property: The issuer url for public cloud clusters - AKS, EKS, GKE - used for the
     * workload identity feature.
     * 
     * @return the selfHostedIssuerUrl value.
     */
    public String selfHostedIssuerUrl() {
        return this.selfHostedIssuerUrl;
    }

    /**
     * Set the selfHostedIssuerUrl property: The issuer url for public cloud clusters - AKS, EKS, GKE - used for the
     * workload identity feature.
     * 
     * @param selfHostedIssuerUrl the selfHostedIssuerUrl value to set.
     * @return the OidcIssuerProfile object itself.
     */
    public OidcIssuerProfile withSelfHostedIssuerUrl(String selfHostedIssuerUrl) {
        this.selfHostedIssuerUrl = selfHostedIssuerUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("selfHostedIssuerUrl", this.selfHostedIssuerUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OidcIssuerProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OidcIssuerProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OidcIssuerProfile.
     */
    public static OidcIssuerProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OidcIssuerProfile deserializedOidcIssuerProfile = new OidcIssuerProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedOidcIssuerProfile.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("issuerUrl".equals(fieldName)) {
                    deserializedOidcIssuerProfile.issuerUrl = reader.getString();
                } else if ("selfHostedIssuerUrl".equals(fieldName)) {
                    deserializedOidcIssuerProfile.selfHostedIssuerUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOidcIssuerProfile;
        });
    }
}
