// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridkubernetes.models.AzureHybridBenefit;
import java.io.IOException;

/**
 * Properties which can be patched on the connected cluster resource.
 */
@Fluent
public final class ConnectedClusterPatchProperties implements JsonSerializable<ConnectedClusterPatchProperties> {
    /*
     * Represents the distribution of the connected cluster
     */
    private String distribution;

    /*
     * Represents the Kubernetes distribution version on this connected cluster.
     */
    private String distributionVersion;

    /*
     * Indicates whether Azure Hybrid Benefit is opted in
     */
    private AzureHybridBenefit azureHybridBenefit;

    /**
     * Creates an instance of ConnectedClusterPatchProperties class.
     */
    public ConnectedClusterPatchProperties() {
    }

    /**
     * Get the distribution property: Represents the distribution of the connected cluster.
     * 
     * @return the distribution value.
     */
    public String distribution() {
        return this.distribution;
    }

    /**
     * Set the distribution property: Represents the distribution of the connected cluster.
     * 
     * @param distribution the distribution value to set.
     * @return the ConnectedClusterPatchProperties object itself.
     */
    public ConnectedClusterPatchProperties withDistribution(String distribution) {
        this.distribution = distribution;
        return this;
    }

    /**
     * Get the distributionVersion property: Represents the Kubernetes distribution version on this connected cluster.
     * 
     * @return the distributionVersion value.
     */
    public String distributionVersion() {
        return this.distributionVersion;
    }

    /**
     * Set the distributionVersion property: Represents the Kubernetes distribution version on this connected cluster.
     * 
     * @param distributionVersion the distributionVersion value to set.
     * @return the ConnectedClusterPatchProperties object itself.
     */
    public ConnectedClusterPatchProperties withDistributionVersion(String distributionVersion) {
        this.distributionVersion = distributionVersion;
        return this;
    }

    /**
     * Get the azureHybridBenefit property: Indicates whether Azure Hybrid Benefit is opted in.
     * 
     * @return the azureHybridBenefit value.
     */
    public AzureHybridBenefit azureHybridBenefit() {
        return this.azureHybridBenefit;
    }

    /**
     * Set the azureHybridBenefit property: Indicates whether Azure Hybrid Benefit is opted in.
     * 
     * @param azureHybridBenefit the azureHybridBenefit value to set.
     * @return the ConnectedClusterPatchProperties object itself.
     */
    public ConnectedClusterPatchProperties withAzureHybridBenefit(AzureHybridBenefit azureHybridBenefit) {
        this.azureHybridBenefit = azureHybridBenefit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("distribution", this.distribution);
        jsonWriter.writeStringField("distributionVersion", this.distributionVersion);
        jsonWriter.writeStringField("azureHybridBenefit",
            this.azureHybridBenefit == null ? null : this.azureHybridBenefit.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectedClusterPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectedClusterPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectedClusterPatchProperties.
     */
    public static ConnectedClusterPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectedClusterPatchProperties deserializedConnectedClusterPatchProperties
                = new ConnectedClusterPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("distribution".equals(fieldName)) {
                    deserializedConnectedClusterPatchProperties.distribution = reader.getString();
                } else if ("distributionVersion".equals(fieldName)) {
                    deserializedConnectedClusterPatchProperties.distributionVersion = reader.getString();
                } else if ("azureHybridBenefit".equals(fieldName)) {
                    deserializedConnectedClusterPatchProperties.azureHybridBenefit
                        = AzureHybridBenefit.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectedClusterPatchProperties;
        });
    }
}
