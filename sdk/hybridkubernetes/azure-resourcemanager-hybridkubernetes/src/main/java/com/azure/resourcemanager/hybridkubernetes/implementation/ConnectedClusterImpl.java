// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridkubernetes.fluent.models.ConnectedClusterInner;
import com.azure.resourcemanager.hybridkubernetes.models.AadProfile;
import com.azure.resourcemanager.hybridkubernetes.models.ArcAgentProfile;
import com.azure.resourcemanager.hybridkubernetes.models.ArcAgentryConfigurations;
import com.azure.resourcemanager.hybridkubernetes.models.AzureHybridBenefit;
import com.azure.resourcemanager.hybridkubernetes.models.ConnectedCluster;
import com.azure.resourcemanager.hybridkubernetes.models.ConnectedClusterIdentity;
import com.azure.resourcemanager.hybridkubernetes.models.ConnectedClusterKind;
import com.azure.resourcemanager.hybridkubernetes.models.ConnectedClusterPatch;
import com.azure.resourcemanager.hybridkubernetes.models.ConnectivityStatus;
import com.azure.resourcemanager.hybridkubernetes.models.CredentialResults;
import com.azure.resourcemanager.hybridkubernetes.models.Gateway;
import com.azure.resourcemanager.hybridkubernetes.models.ListClusterUserCredentialProperties;
import com.azure.resourcemanager.hybridkubernetes.models.OidcIssuerProfile;
import com.azure.resourcemanager.hybridkubernetes.models.PrivateLinkState;
import com.azure.resourcemanager.hybridkubernetes.models.ProvisioningState;
import com.azure.resourcemanager.hybridkubernetes.models.SecurityProfile;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ConnectedClusterImpl
    implements ConnectedCluster, ConnectedCluster.Definition, ConnectedCluster.Update {
    private ConnectedClusterInner innerObject;

    private final com.azure.resourcemanager.hybridkubernetes.HybridKubernetesManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ConnectedClusterIdentity identity() {
        return this.innerModel().identity();
    }

    public ConnectedClusterKind kind() {
        return this.innerModel().kind();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String agentPublicKeyCertificate() {
        return this.innerModel().agentPublicKeyCertificate();
    }

    public String kubernetesVersion() {
        return this.innerModel().kubernetesVersion();
    }

    public Integer totalNodeCount() {
        return this.innerModel().totalNodeCount();
    }

    public Integer totalCoreCount() {
        return this.innerModel().totalCoreCount();
    }

    public String agentVersion() {
        return this.innerModel().agentVersion();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String distribution() {
        return this.innerModel().distribution();
    }

    public String distributionVersion() {
        return this.innerModel().distributionVersion();
    }

    public String infrastructure() {
        return this.innerModel().infrastructure();
    }

    public String offering() {
        return this.innerModel().offering();
    }

    public OffsetDateTime managedIdentityCertificateExpirationTime() {
        return this.innerModel().managedIdentityCertificateExpirationTime();
    }

    public OffsetDateTime lastConnectivityTime() {
        return this.innerModel().lastConnectivityTime();
    }

    public ConnectivityStatus connectivityStatus() {
        return this.innerModel().connectivityStatus();
    }

    public PrivateLinkState privateLinkState() {
        return this.innerModel().privateLinkState();
    }

    public String privateLinkScopeResourceId() {
        return this.innerModel().privateLinkScopeResourceId();
    }

    public AzureHybridBenefit azureHybridBenefit() {
        return this.innerModel().azureHybridBenefit();
    }

    public AadProfile aadProfile() {
        return this.innerModel().aadProfile();
    }

    public ArcAgentProfile arcAgentProfile() {
        return this.innerModel().arcAgentProfile();
    }

    public SecurityProfile securityProfile() {
        return this.innerModel().securityProfile();
    }

    public OidcIssuerProfile oidcIssuerProfile() {
        return this.innerModel().oidcIssuerProfile();
    }

    public Gateway gateway() {
        return this.innerModel().gateway();
    }

    public List<ArcAgentryConfigurations> arcAgentryConfigurations() {
        List<ArcAgentryConfigurations> inner = this.innerModel().arcAgentryConfigurations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Map<String, String> miscellaneousProperties() {
        Map<String, String> inner = this.innerModel().miscellaneousProperties();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ConnectedClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridkubernetes.HybridKubernetesManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private ConnectedClusterPatch updateConnectedClusterPatch;

    public ConnectedClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ConnectedCluster create() {
        this.innerObject = serviceManager.serviceClient()
            .getConnectedClusters()
            .createOrReplace(resourceGroupName, clusterName, this.innerModel(), Context.NONE);
        return this;
    }

    public ConnectedCluster create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnectedClusters()
            .createOrReplace(resourceGroupName, clusterName, this.innerModel(), context);
        return this;
    }

    ConnectedClusterImpl(String name,
        com.azure.resourcemanager.hybridkubernetes.HybridKubernetesManager serviceManager) {
        this.innerObject = new ConnectedClusterInner();
        this.serviceManager = serviceManager;
        this.clusterName = name;
    }

    public ConnectedClusterImpl update() {
        this.updateConnectedClusterPatch = new ConnectedClusterPatch();
        return this;
    }

    public ConnectedCluster apply() {
        this.innerObject = serviceManager.serviceClient()
            .getConnectedClusters()
            .updateWithResponse(resourceGroupName, clusterName, updateConnectedClusterPatch, Context.NONE)
            .getValue();
        return this;
    }

    public ConnectedCluster apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnectedClusters()
            .updateWithResponse(resourceGroupName, clusterName, updateConnectedClusterPatch, context)
            .getValue();
        return this;
    }

    ConnectedClusterImpl(ConnectedClusterInner innerObject,
        com.azure.resourcemanager.hybridkubernetes.HybridKubernetesManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourcegroups");
        this.clusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "connectedClusters");
    }

    public ConnectedCluster refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getConnectedClusters()
            .getByResourceGroupWithResponse(resourceGroupName, clusterName, Context.NONE)
            .getValue();
        return this;
    }

    public ConnectedCluster refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnectedClusters()
            .getByResourceGroupWithResponse(resourceGroupName, clusterName, context)
            .getValue();
        return this;
    }

    public Response<CredentialResults>
        listClusterUserCredentialWithResponse(ListClusterUserCredentialProperties properties, Context context) {
        return serviceManager.connectedClusters()
            .listClusterUserCredentialWithResponse(resourceGroupName, clusterName, properties, context);
    }

    public CredentialResults listClusterUserCredential(ListClusterUserCredentialProperties properties) {
        return serviceManager.connectedClusters().listClusterUserCredential(resourceGroupName, clusterName, properties);
    }

    public ConnectedClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ConnectedClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ConnectedClusterImpl withIdentity(ConnectedClusterIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public ConnectedClusterImpl withAgentPublicKeyCertificate(String agentPublicKeyCertificate) {
        this.innerModel().withAgentPublicKeyCertificate(agentPublicKeyCertificate);
        return this;
    }

    public ConnectedClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateConnectedClusterPatch.withTags(tags);
            return this;
        }
    }

    public ConnectedClusterImpl withKind(ConnectedClusterKind kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public ConnectedClusterImpl withProvisioningState(ProvisioningState provisioningState) {
        this.innerModel().withProvisioningState(provisioningState);
        return this;
    }

    public ConnectedClusterImpl withDistribution(String distribution) {
        if (isInCreateMode()) {
            this.innerModel().withDistribution(distribution);
            return this;
        } else {
            this.updateConnectedClusterPatch.withDistribution(distribution);
            return this;
        }
    }

    public ConnectedClusterImpl withDistributionVersion(String distributionVersion) {
        if (isInCreateMode()) {
            this.innerModel().withDistributionVersion(distributionVersion);
            return this;
        } else {
            this.updateConnectedClusterPatch.withDistributionVersion(distributionVersion);
            return this;
        }
    }

    public ConnectedClusterImpl withInfrastructure(String infrastructure) {
        this.innerModel().withInfrastructure(infrastructure);
        return this;
    }

    public ConnectedClusterImpl withPrivateLinkState(PrivateLinkState privateLinkState) {
        this.innerModel().withPrivateLinkState(privateLinkState);
        return this;
    }

    public ConnectedClusterImpl withPrivateLinkScopeResourceId(String privateLinkScopeResourceId) {
        this.innerModel().withPrivateLinkScopeResourceId(privateLinkScopeResourceId);
        return this;
    }

    public ConnectedClusterImpl withAzureHybridBenefit(AzureHybridBenefit azureHybridBenefit) {
        if (isInCreateMode()) {
            this.innerModel().withAzureHybridBenefit(azureHybridBenefit);
            return this;
        } else {
            this.updateConnectedClusterPatch.withAzureHybridBenefit(azureHybridBenefit);
            return this;
        }
    }

    public ConnectedClusterImpl withAadProfile(AadProfile aadProfile) {
        this.innerModel().withAadProfile(aadProfile);
        return this;
    }

    public ConnectedClusterImpl withArcAgentProfile(ArcAgentProfile arcAgentProfile) {
        this.innerModel().withArcAgentProfile(arcAgentProfile);
        return this;
    }

    public ConnectedClusterImpl withSecurityProfile(SecurityProfile securityProfile) {
        this.innerModel().withSecurityProfile(securityProfile);
        return this;
    }

    public ConnectedClusterImpl withOidcIssuerProfile(OidcIssuerProfile oidcIssuerProfile) {
        this.innerModel().withOidcIssuerProfile(oidcIssuerProfile);
        return this;
    }

    public ConnectedClusterImpl withGateway(Gateway gateway) {
        this.innerModel().withGateway(gateway);
        return this;
    }

    public ConnectedClusterImpl withArcAgentryConfigurations(List<ArcAgentryConfigurations> arcAgentryConfigurations) {
        this.innerModel().withArcAgentryConfigurations(arcAgentryConfigurations);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
