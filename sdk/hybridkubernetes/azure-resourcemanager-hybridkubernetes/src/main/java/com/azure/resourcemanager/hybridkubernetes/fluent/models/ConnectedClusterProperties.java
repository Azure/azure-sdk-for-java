// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridkubernetes.models.ConnectivityStatus;
import com.azure.resourcemanager.hybridkubernetes.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of the connected cluster.
 */
@Fluent
public final class ConnectedClusterProperties implements JsonSerializable<ConnectedClusterProperties> {
    /*
     * Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
     */
    private String agentPublicKeyCertificate;

    /*
     * The Kubernetes version of the connected cluster resource
     */
    private String kubernetesVersion;

    /*
     * Number of nodes present in the connected cluster resource
     */
    private Integer totalNodeCount;

    /*
     * Number of CPU cores present in the connected cluster resource
     */
    private Integer totalCoreCount;

    /*
     * Version of the agent running on the connected cluster resource
     */
    private String agentVersion;

    /*
     * Provisioning state of the connected cluster resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The Kubernetes distribution running on this connected cluster.
     */
    private String distribution;

    /*
     * The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
     */
    private String infrastructure;

    /*
     * Connected cluster offering
     */
    private String offering;

    /*
     * Expiration time of the managed identity certificate
     */
    private OffsetDateTime managedIdentityCertificateExpirationTime;

    /*
     * Time representing the last instance when heart beat was received from the cluster
     */
    private OffsetDateTime lastConnectivityTime;

    /*
     * Represents the connectivity status of the connected cluster.
     */
    private ConnectivityStatus connectivityStatus;

    /**
     * Creates an instance of ConnectedClusterProperties class.
     */
    public ConnectedClusterProperties() {
    }

    /**
     * Get the agentPublicKeyCertificate property: Base64 encoded public certificate used by the agent to do the initial
     * handshake to the backend services in Azure.
     * 
     * @return the agentPublicKeyCertificate value.
     */
    public String agentPublicKeyCertificate() {
        return this.agentPublicKeyCertificate;
    }

    /**
     * Set the agentPublicKeyCertificate property: Base64 encoded public certificate used by the agent to do the initial
     * handshake to the backend services in Azure.
     * 
     * @param agentPublicKeyCertificate the agentPublicKeyCertificate value to set.
     * @return the ConnectedClusterProperties object itself.
     */
    public ConnectedClusterProperties withAgentPublicKeyCertificate(String agentPublicKeyCertificate) {
        this.agentPublicKeyCertificate = agentPublicKeyCertificate;
        return this;
    }

    /**
     * Get the kubernetesVersion property: The Kubernetes version of the connected cluster resource.
     * 
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Get the totalNodeCount property: Number of nodes present in the connected cluster resource.
     * 
     * @return the totalNodeCount value.
     */
    public Integer totalNodeCount() {
        return this.totalNodeCount;
    }

    /**
     * Get the totalCoreCount property: Number of CPU cores present in the connected cluster resource.
     * 
     * @return the totalCoreCount value.
     */
    public Integer totalCoreCount() {
        return this.totalCoreCount;
    }

    /**
     * Get the agentVersion property: Version of the agent running on the connected cluster resource.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Get the provisioningState property: Provisioning state of the connected cluster resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning state of the connected cluster resource.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ConnectedClusterProperties object itself.
     */
    public ConnectedClusterProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the distribution property: The Kubernetes distribution running on this connected cluster.
     * 
     * @return the distribution value.
     */
    public String distribution() {
        return this.distribution;
    }

    /**
     * Set the distribution property: The Kubernetes distribution running on this connected cluster.
     * 
     * @param distribution the distribution value to set.
     * @return the ConnectedClusterProperties object itself.
     */
    public ConnectedClusterProperties withDistribution(String distribution) {
        this.distribution = distribution;
        return this;
    }

    /**
     * Get the infrastructure property: The infrastructure on which the Kubernetes cluster represented by this connected
     * cluster is running on.
     * 
     * @return the infrastructure value.
     */
    public String infrastructure() {
        return this.infrastructure;
    }

    /**
     * Set the infrastructure property: The infrastructure on which the Kubernetes cluster represented by this connected
     * cluster is running on.
     * 
     * @param infrastructure the infrastructure value to set.
     * @return the ConnectedClusterProperties object itself.
     */
    public ConnectedClusterProperties withInfrastructure(String infrastructure) {
        this.infrastructure = infrastructure;
        return this;
    }

    /**
     * Get the offering property: Connected cluster offering.
     * 
     * @return the offering value.
     */
    public String offering() {
        return this.offering;
    }

    /**
     * Get the managedIdentityCertificateExpirationTime property: Expiration time of the managed identity certificate.
     * 
     * @return the managedIdentityCertificateExpirationTime value.
     */
    public OffsetDateTime managedIdentityCertificateExpirationTime() {
        return this.managedIdentityCertificateExpirationTime;
    }

    /**
     * Get the lastConnectivityTime property: Time representing the last instance when heart beat was received from the
     * cluster.
     * 
     * @return the lastConnectivityTime value.
     */
    public OffsetDateTime lastConnectivityTime() {
        return this.lastConnectivityTime;
    }

    /**
     * Get the connectivityStatus property: Represents the connectivity status of the connected cluster.
     * 
     * @return the connectivityStatus value.
     */
    public ConnectivityStatus connectivityStatus() {
        return this.connectivityStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (agentPublicKeyCertificate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property agentPublicKeyCertificate in model ConnectedClusterProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectedClusterProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("agentPublicKeyCertificate", this.agentPublicKeyCertificate);
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeStringField("distribution", this.distribution);
        jsonWriter.writeStringField("infrastructure", this.infrastructure);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectedClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectedClusterProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectedClusterProperties.
     */
    public static ConnectedClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectedClusterProperties deserializedConnectedClusterProperties = new ConnectedClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("agentPublicKeyCertificate".equals(fieldName)) {
                    deserializedConnectedClusterProperties.agentPublicKeyCertificate = reader.getString();
                } else if ("kubernetesVersion".equals(fieldName)) {
                    deserializedConnectedClusterProperties.kubernetesVersion = reader.getString();
                } else if ("totalNodeCount".equals(fieldName)) {
                    deserializedConnectedClusterProperties.totalNodeCount = reader.getNullable(JsonReader::getInt);
                } else if ("totalCoreCount".equals(fieldName)) {
                    deserializedConnectedClusterProperties.totalCoreCount = reader.getNullable(JsonReader::getInt);
                } else if ("agentVersion".equals(fieldName)) {
                    deserializedConnectedClusterProperties.agentVersion = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedConnectedClusterProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("distribution".equals(fieldName)) {
                    deserializedConnectedClusterProperties.distribution = reader.getString();
                } else if ("infrastructure".equals(fieldName)) {
                    deserializedConnectedClusterProperties.infrastructure = reader.getString();
                } else if ("offering".equals(fieldName)) {
                    deserializedConnectedClusterProperties.offering = reader.getString();
                } else if ("managedIdentityCertificateExpirationTime".equals(fieldName)) {
                    deserializedConnectedClusterProperties.managedIdentityCertificateExpirationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastConnectivityTime".equals(fieldName)) {
                    deserializedConnectedClusterProperties.lastConnectivityTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("connectivityStatus".equals(fieldName)) {
                    deserializedConnectedClusterProperties.connectivityStatus
                        = ConnectivityStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectedClusterProperties;
        });
    }
}
