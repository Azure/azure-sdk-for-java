// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contains the REP (rendezvous endpoint) and “Sender” access token.
 */
@Immutable
public final class HybridConnectionConfig implements JsonSerializable<HybridConnectionConfig> {
    /*
     * Timestamp when this token will be expired.
     */
    private Long expirationTime;

    /*
     * Name of the connection
     */
    private String hybridConnectionName;

    /*
     * Name of the relay.
     */
    private String relay;

    /*
     * Sender access token
     */
    private String token;

    /**
     * Creates an instance of HybridConnectionConfig class.
     */
    public HybridConnectionConfig() {
    }

    /**
     * Get the expirationTime property: Timestamp when this token will be expired.
     * 
     * @return the expirationTime value.
     */
    public Long expirationTime() {
        return this.expirationTime;
    }

    /**
     * Get the hybridConnectionName property: Name of the connection.
     * 
     * @return the hybridConnectionName value.
     */
    public String hybridConnectionName() {
        return this.hybridConnectionName;
    }

    /**
     * Get the relay property: Name of the relay.
     * 
     * @return the relay value.
     */
    public String relay() {
        return this.relay;
    }

    /**
     * Get the token property: Sender access token.
     * 
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HybridConnectionConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HybridConnectionConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HybridConnectionConfig.
     */
    public static HybridConnectionConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HybridConnectionConfig deserializedHybridConnectionConfig = new HybridConnectionConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expirationTime".equals(fieldName)) {
                    deserializedHybridConnectionConfig.expirationTime = reader.getNullable(JsonReader::getLong);
                } else if ("hybridConnectionName".equals(fieldName)) {
                    deserializedHybridConnectionConfig.hybridConnectionName = reader.getString();
                } else if ("relay".equals(fieldName)) {
                    deserializedHybridConnectionConfig.relay = reader.getString();
                } else if ("token".equals(fieldName)) {
                    deserializedHybridConnectionConfig.token = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHybridConnectionConfig;
        });
    }
}
