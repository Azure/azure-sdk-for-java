// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Contains the REP (rendezvous endpoint) and “Sender” access token. */
@Immutable
public final class HybridConnectionConfig {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HybridConnectionConfig.class);

    /*
     * Timestamp when this token will be expired.
     */
    @JsonProperty(value = "expirationTime", access = JsonProperty.Access.WRITE_ONLY)
    private Long expirationTime;

    /*
     * Name of the connection
     */
    @JsonProperty(value = "hybridConnectionName", access = JsonProperty.Access.WRITE_ONLY)
    private String hybridConnectionName;

    /*
     * Name of the relay.
     */
    @JsonProperty(value = "relay", access = JsonProperty.Access.WRITE_ONLY)
    private String relay;

    /*
     * Sender access token
     */
    @JsonProperty(value = "token", access = JsonProperty.Access.WRITE_ONLY)
    private String token;

    /**
     * Get the expirationTime property: Timestamp when this token will be expired.
     *
     * @return the expirationTime value.
     */
    public Long expirationTime() {
        return this.expirationTime;
    }

    /**
     * Get the hybridConnectionName property: Name of the connection.
     *
     * @return the hybridConnectionName value.
     */
    public String hybridConnectionName() {
        return this.hybridConnectionName;
    }

    /**
     * Get the relay property: Name of the relay.
     *
     * @return the relay value.
     */
    public String relay() {
        return this.relay;
    }

    /**
     * Get the token property: Sender access token.
     *
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
