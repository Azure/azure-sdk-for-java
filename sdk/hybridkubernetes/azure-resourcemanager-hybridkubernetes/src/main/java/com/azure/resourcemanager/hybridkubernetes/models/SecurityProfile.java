// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Security Profile specifies attributes for cluster security features.
 */
@Fluent
public final class SecurityProfile implements JsonSerializable<SecurityProfile> {
    /*
     * The workload identity feature webhook.
     */
    private SecurityProfileWorkloadIdentity workloadIdentity;

    /**
     * Creates an instance of SecurityProfile class.
     */
    public SecurityProfile() {
    }

    /**
     * Get the workloadIdentity property: The workload identity feature webhook.
     * 
     * @return the workloadIdentity value.
     */
    public SecurityProfileWorkloadIdentity workloadIdentity() {
        return this.workloadIdentity;
    }

    /**
     * Set the workloadIdentity property: The workload identity feature webhook.
     * 
     * @param workloadIdentity the workloadIdentity value to set.
     * @return the SecurityProfile object itself.
     */
    public SecurityProfile withWorkloadIdentity(SecurityProfileWorkloadIdentity workloadIdentity) {
        this.workloadIdentity = workloadIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (workloadIdentity() != null) {
            workloadIdentity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("workloadIdentity", this.workloadIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecurityProfile.
     */
    public static SecurityProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityProfile deserializedSecurityProfile = new SecurityProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workloadIdentity".equals(fieldName)) {
                    deserializedSecurityProfile.workloadIdentity = SecurityProfileWorkloadIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityProfile;
        });
    }
}
