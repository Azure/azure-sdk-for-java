// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The ArcAgentryConfigurations model.
 */
@Fluent
public final class ArcAgentryConfigurations implements JsonSerializable<ArcAgentryConfigurations> {
    /*
     * Specifies the name of the feature for the configuration setting.
     */
    private String feature;

    /*
     * The configuration settings for the feature that do not contain any sensitive or secret information.
     */
    private Map<String, String> settings;

    /*
     * The configuration settings for the feature that contain any sensitive or secret information.
     */
    private Map<String, String> protectedSettings;

    /**
     * Creates an instance of ArcAgentryConfigurations class.
     */
    public ArcAgentryConfigurations() {
    }

    /**
     * Get the feature property: Specifies the name of the feature for the configuration setting.
     * 
     * @return the feature value.
     */
    public String feature() {
        return this.feature;
    }

    /**
     * Set the feature property: Specifies the name of the feature for the configuration setting.
     * 
     * @param feature the feature value to set.
     * @return the ArcAgentryConfigurations object itself.
     */
    public ArcAgentryConfigurations withFeature(String feature) {
        this.feature = feature;
        return this;
    }

    /**
     * Get the settings property: The configuration settings for the feature that do not contain any sensitive or secret
     * information.
     * 
     * @return the settings value.
     */
    public Map<String, String> settings() {
        return this.settings;
    }

    /**
     * Set the settings property: The configuration settings for the feature that do not contain any sensitive or secret
     * information.
     * 
     * @param settings the settings value to set.
     * @return the ArcAgentryConfigurations object itself.
     */
    public ArcAgentryConfigurations withSettings(Map<String, String> settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the protectedSettings property: The configuration settings for the feature that contain any sensitive or
     * secret information.
     * 
     * @return the protectedSettings value.
     */
    public Map<String, String> protectedSettings() {
        return this.protectedSettings;
    }

    /**
     * Set the protectedSettings property: The configuration settings for the feature that contain any sensitive or
     * secret information.
     * 
     * @param protectedSettings the protectedSettings value to set.
     * @return the ArcAgentryConfigurations object itself.
     */
    public ArcAgentryConfigurations withProtectedSettings(Map<String, String> protectedSettings) {
        this.protectedSettings = protectedSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("feature", this.feature);
        jsonWriter.writeMapField("settings", this.settings, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("protectedSettings", this.protectedSettings,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArcAgentryConfigurations from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArcAgentryConfigurations if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArcAgentryConfigurations.
     */
    public static ArcAgentryConfigurations fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArcAgentryConfigurations deserializedArcAgentryConfigurations = new ArcAgentryConfigurations();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("feature".equals(fieldName)) {
                    deserializedArcAgentryConfigurations.feature = reader.getString();
                } else if ("settings".equals(fieldName)) {
                    Map<String, String> settings = reader.readMap(reader1 -> reader1.getString());
                    deserializedArcAgentryConfigurations.settings = settings;
                } else if ("protectedSettings".equals(fieldName)) {
                    Map<String, String> protectedSettings = reader.readMap(reader1 -> reader1.getString());
                    deserializedArcAgentryConfigurations.protectedSettings = protectedSettings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArcAgentryConfigurations;
        });
    }
}
