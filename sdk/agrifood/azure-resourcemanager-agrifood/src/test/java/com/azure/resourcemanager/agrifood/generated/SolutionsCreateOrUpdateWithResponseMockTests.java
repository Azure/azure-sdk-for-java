// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.agrifood.AgriFoodManager;
import com.azure.resourcemanager.agrifood.models.Solution;
import com.azure.resourcemanager.agrifood.models.SolutionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"solutionId\":\"vlerchpqbmfpjba\",\"partnerId\":\"idfcxsspuunnoxyh\",\"saasSubscriptionId\":\"xgqddrih\",\"saasSubscriptionName\":\"fhoqca\",\"marketplacePublisherId\":\"ewda\",\"planId\":\"mdjvlpj\",\"offerId\":\"xkzb\",\"termId\":\"msgeivsiykzk\",\"\":{\"zoggculapz\":\"datajdxon\"}},\"eTag\":\"rpgogtqxep\",\"id\":\"lbfu\",\"name\":\"jlyjtlvofq\",\"type\":\"hvfcibyfmow\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AgriFoodManager manager = AgriFoodManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Solution response = manager.solutions()
            .define("jgslordilmyww")
            .withExistingFarmBeat("bteoybf", "jxakv")
            .withProperties(new SolutionProperties().withSaasSubscriptionId("vudtjuewbcihx")
                .withSaasSubscriptionName("uwhcjyxccybv")
                .withMarketplacePublisherId("ayakkudzpx")
                .withPlanId("wjplma")
                .withOfferId("stcyohpfkyrkdbd")
                .withTermId("iogsjkmnwq")
                .withAdditionalProperties(mapOf("solutionId", "kxn", "partnerId", "dabg")))
            .create();

        Assertions.assertEquals("xgqddrih", response.properties().saasSubscriptionId());
        Assertions.assertEquals("fhoqca", response.properties().saasSubscriptionName());
        Assertions.assertEquals("ewda", response.properties().marketplacePublisherId());
        Assertions.assertEquals("mdjvlpj", response.properties().planId());
        Assertions.assertEquals("xkzb", response.properties().offerId());
        Assertions.assertEquals("msgeivsiykzk", response.properties().termId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
