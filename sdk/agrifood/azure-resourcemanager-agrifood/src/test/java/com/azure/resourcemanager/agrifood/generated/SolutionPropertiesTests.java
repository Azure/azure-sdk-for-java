// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.agrifood.models.SolutionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionProperties model = BinaryData.fromString(
            "{\"solutionId\":\"vxyqjpkcattpngjc\",\"partnerId\":\"czsqpjhvm\",\"saasSubscriptionId\":\"ajvnysounqe\",\"saasSubscriptionName\":\"a\",\"marketplacePublisherId\":\"oaeupfhyhltrpmo\",\"planId\":\"jmcmatuokthfu\",\"offerId\":\"uaodsfcpk\",\"termId\":\"xodpuozmyzydagfu\",\"\":{\"ywqsmbsurexim\":\"dataezyiuokktwhrdxw\"}}")
            .toObject(SolutionProperties.class);
        Assertions.assertEquals("ajvnysounqe", model.saasSubscriptionId());
        Assertions.assertEquals("a", model.saasSubscriptionName());
        Assertions.assertEquals("oaeupfhyhltrpmo", model.marketplacePublisherId());
        Assertions.assertEquals("jmcmatuokthfu", model.planId());
        Assertions.assertEquals("uaodsfcpk", model.offerId());
        Assertions.assertEquals("xodpuozmyzydagfu", model.termId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionProperties model = new SolutionProperties().withSaasSubscriptionId("ajvnysounqe")
            .withSaasSubscriptionName("a")
            .withMarketplacePublisherId("oaeupfhyhltrpmo")
            .withPlanId("jmcmatuokthfu")
            .withOfferId("uaodsfcpk")
            .withTermId("xodpuozmyzydagfu")
            .withAdditionalProperties(mapOf("solutionId", "vxyqjpkcattpngjc", "partnerId", "czsqpjhvm"));
        model = BinaryData.fromObject(model).toObject(SolutionProperties.class);
        Assertions.assertEquals("ajvnysounqe", model.saasSubscriptionId());
        Assertions.assertEquals("a", model.saasSubscriptionName());
        Assertions.assertEquals("oaeupfhyhltrpmo", model.marketplacePublisherId());
        Assertions.assertEquals("jmcmatuokthfu", model.planId());
        Assertions.assertEquals("uaodsfcpk", model.offerId());
        Assertions.assertEquals("xodpuozmyzydagfu", model.termId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
