// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.agrifood.models.Insight;
import com.azure.resourcemanager.agrifood.models.InsightAttachment;
import com.azure.resourcemanager.agrifood.models.Measure;
import com.azure.resourcemanager.agrifood.models.SolutionEvaluatedOutput;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionEvaluatedOutputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionEvaluatedOutput model = BinaryData.fromString(
            "{\"insightResponse\":{\"farmerId\":\"lewyhmlwpaz\",\"modelId\":\"pofncck\",\"resourceType\":\"fz\",\"resourceId\":\"hxx\",\"modelVersion\":\"yq\",\"insightStartDateTime\":\"2020-12-30T00:37:41Z\",\"insightEndDateTime\":\"2021-07-31T20:27:49Z\",\"measures\":{\"altol\":{\"unit\":\"ppriol\",\"value\":64.46224529416375},\"dcfhucqdpf\":{\"unit\":\"cwsobqwcs\",\"value\":42.05402405040643},\"bvtvudutncormr\":{\"unit\":\"glsbjjc\",\"value\":14.321605063519183},\"knnqvsaznq\":{\"unit\":\"qtvcofudflvkgj\",\"value\":37.783006681052555}},\"id\":\"orudsgsa\",\"status\":\"kycgrauwj\",\"createdDateTime\":\"2021-04-03T17:36:18Z\",\"modifiedDateTime\":\"2020-12-26T00:25:40Z\",\"eTag\":\"uruv\",\"name\":\"ovsm\",\"description\":\"xwabmqoe\",\"properties\":{\"mqlgk\":\"datafrvtpuqu\",\"ongbjcnt\":\"databtndo\"}},\"insightAttachmentResponse\":{\"insightId\":\"tcje\",\"modelId\":\"twwaezkojvdcpzf\",\"resourceType\":\"ouicybxarzgszu\",\"resourceId\":\"x\",\"fileLink\":\"q\",\"originalFileName\":\"idoamciodhkha\",\"farmerId\":\"khnzbonlw\",\"id\":\"oegokdwbwh\",\"status\":\"z\",\"createdDateTime\":\"2021-11-07T16:03:36Z\",\"modifiedDateTime\":\"2021-02-20T22:35:17Z\",\"name\":\"xztvbtqgsfraoyzk\",\"description\":\"wtl\",\"eTag\":\"guxawqaldsyuuxi\"}}")
            .toObject(SolutionEvaluatedOutput.class);
        Assertions.assertEquals("lewyhmlwpaz", model.insightResponse().farmerId());
        Assertions.assertEquals("pofncck", model.insightResponse().modelId());
        Assertions.assertEquals("fz", model.insightResponse().resourceType());
        Assertions.assertEquals("hxx", model.insightResponse().resourceId());
        Assertions.assertEquals("yq", model.insightResponse().modelVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-30T00:37:41Z"),
            model.insightResponse().insightStartDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T20:27:49Z"),
            model.insightResponse().insightEndDateTime());
        Assertions.assertEquals("ppriol", model.insightResponse().measures().get("altol").unit());
        Assertions.assertEquals(64.46224529416375D, model.insightResponse().measures().get("altol").value());
        Assertions.assertEquals("orudsgsa", model.insightResponse().id());
        Assertions.assertEquals("kycgrauwj", model.insightResponse().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-03T17:36:18Z"),
            model.insightResponse().createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T00:25:40Z"),
            model.insightResponse().modifiedDateTime());
        Assertions.assertEquals("uruv", model.insightResponse().etag());
        Assertions.assertEquals("ovsm", model.insightResponse().name());
        Assertions.assertEquals("xwabmqoe", model.insightResponse().description());
        Assertions.assertEquals("tcje", model.insightAttachmentResponse().insightId());
        Assertions.assertEquals("twwaezkojvdcpzf", model.insightAttachmentResponse().modelId());
        Assertions.assertEquals("ouicybxarzgszu", model.insightAttachmentResponse().resourceType());
        Assertions.assertEquals("x", model.insightAttachmentResponse().resourceId());
        Assertions.assertEquals("q", model.insightAttachmentResponse().fileLink());
        Assertions.assertEquals("idoamciodhkha", model.insightAttachmentResponse().originalFileName());
        Assertions.assertEquals("khnzbonlw", model.insightAttachmentResponse().farmerId());
        Assertions.assertEquals("oegokdwbwh", model.insightAttachmentResponse().id());
        Assertions.assertEquals("z", model.insightAttachmentResponse().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T16:03:36Z"),
            model.insightAttachmentResponse().createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T22:35:17Z"),
            model.insightAttachmentResponse().modifiedDateTime());
        Assertions.assertEquals("xztvbtqgsfraoyzk", model.insightAttachmentResponse().name());
        Assertions.assertEquals("wtl", model.insightAttachmentResponse().description());
        Assertions.assertEquals("guxawqaldsyuuxi", model.insightAttachmentResponse().etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionEvaluatedOutput model = new SolutionEvaluatedOutput()
            .withInsightResponse(new Insight().withFarmerId("lewyhmlwpaz")
                .withModelId("pofncck")
                .withResourceType("fz")
                .withResourceId("hxx")
                .withModelVersion("yq")
                .withInsightStartDateTime(OffsetDateTime.parse("2020-12-30T00:37:41Z"))
                .withInsightEndDateTime(OffsetDateTime.parse("2021-07-31T20:27:49Z"))
                .withMeasures(mapOf("altol", new Measure().withUnit("ppriol").withValue(64.46224529416375D),
                    "dcfhucqdpf", new Measure().withUnit("cwsobqwcs").withValue(42.05402405040643D), "bvtvudutncormr",
                    new Measure().withUnit("glsbjjc").withValue(14.321605063519183D), "knnqvsaznq",
                    new Measure().withUnit("qtvcofudflvkgj").withValue(37.783006681052555D)))
                .withId("orudsgsa")
                .withStatus("kycgrauwj")
                .withCreatedDateTime(OffsetDateTime.parse("2021-04-03T17:36:18Z"))
                .withModifiedDateTime(OffsetDateTime.parse("2020-12-26T00:25:40Z"))
                .withEtag("uruv")
                .withName("ovsm")
                .withDescription("xwabmqoe")
                .withProperties(mapOf("mqlgk", "datafrvtpuqu", "ongbjcnt", "databtndo")))
            .withInsightAttachmentResponse(new InsightAttachment().withInsightId("tcje")
                .withModelId("twwaezkojvdcpzf")
                .withResourceType("ouicybxarzgszu")
                .withResourceId("x")
                .withFileLink("q")
                .withOriginalFileName("idoamciodhkha")
                .withFarmerId("khnzbonlw")
                .withId("oegokdwbwh")
                .withStatus("z")
                .withCreatedDateTime(OffsetDateTime.parse("2021-11-07T16:03:36Z"))
                .withModifiedDateTime(OffsetDateTime.parse("2021-02-20T22:35:17Z"))
                .withName("xztvbtqgsfraoyzk")
                .withDescription("wtl")
                .withEtag("guxawqaldsyuuxi"));
        model = BinaryData.fromObject(model).toObject(SolutionEvaluatedOutput.class);
        Assertions.assertEquals("lewyhmlwpaz", model.insightResponse().farmerId());
        Assertions.assertEquals("pofncck", model.insightResponse().modelId());
        Assertions.assertEquals("fz", model.insightResponse().resourceType());
        Assertions.assertEquals("hxx", model.insightResponse().resourceId());
        Assertions.assertEquals("yq", model.insightResponse().modelVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-30T00:37:41Z"),
            model.insightResponse().insightStartDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T20:27:49Z"),
            model.insightResponse().insightEndDateTime());
        Assertions.assertEquals("ppriol", model.insightResponse().measures().get("altol").unit());
        Assertions.assertEquals(64.46224529416375D, model.insightResponse().measures().get("altol").value());
        Assertions.assertEquals("orudsgsa", model.insightResponse().id());
        Assertions.assertEquals("kycgrauwj", model.insightResponse().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-03T17:36:18Z"),
            model.insightResponse().createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T00:25:40Z"),
            model.insightResponse().modifiedDateTime());
        Assertions.assertEquals("uruv", model.insightResponse().etag());
        Assertions.assertEquals("ovsm", model.insightResponse().name());
        Assertions.assertEquals("xwabmqoe", model.insightResponse().description());
        Assertions.assertEquals("tcje", model.insightAttachmentResponse().insightId());
        Assertions.assertEquals("twwaezkojvdcpzf", model.insightAttachmentResponse().modelId());
        Assertions.assertEquals("ouicybxarzgszu", model.insightAttachmentResponse().resourceType());
        Assertions.assertEquals("x", model.insightAttachmentResponse().resourceId());
        Assertions.assertEquals("q", model.insightAttachmentResponse().fileLink());
        Assertions.assertEquals("idoamciodhkha", model.insightAttachmentResponse().originalFileName());
        Assertions.assertEquals("khnzbonlw", model.insightAttachmentResponse().farmerId());
        Assertions.assertEquals("oegokdwbwh", model.insightAttachmentResponse().id());
        Assertions.assertEquals("z", model.insightAttachmentResponse().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T16:03:36Z"),
            model.insightAttachmentResponse().createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T22:35:17Z"),
            model.insightAttachmentResponse().modifiedDateTime());
        Assertions.assertEquals("xztvbtqgsfraoyzk", model.insightAttachmentResponse().name());
        Assertions.assertEquals("wtl", model.insightAttachmentResponse().description());
        Assertions.assertEquals("guxawqaldsyuuxi", model.insightAttachmentResponse().etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
