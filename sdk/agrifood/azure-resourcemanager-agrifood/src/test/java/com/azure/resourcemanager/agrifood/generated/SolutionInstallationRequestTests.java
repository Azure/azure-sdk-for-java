// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.agrifood.models.SolutionInstallationRequest;
import com.azure.resourcemanager.agrifood.models.SolutionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionInstallationRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionInstallationRequest model = BinaryData.fromString(
            "{\"properties\":{\"solutionId\":\"zj\",\"partnerId\":\"ggd\",\"saasSubscriptionId\":\"jixhbk\",\"saasSubscriptionName\":\"ofqweykhmenevfye\",\"marketplacePublisherId\":\"fwhybcibvy\",\"planId\":\"dcsi\",\"offerId\":\"ynnaam\",\"termId\":\"ectehf\",\"\":{\"ypvhezrkg\":\"datacj\",\"sle\":\"datahcjrefovgmk\"}}}")
            .toObject(SolutionInstallationRequest.class);
        Assertions.assertEquals("jixhbk", model.properties().saasSubscriptionId());
        Assertions.assertEquals("ofqweykhmenevfye", model.properties().saasSubscriptionName());
        Assertions.assertEquals("fwhybcibvy", model.properties().marketplacePublisherId());
        Assertions.assertEquals("dcsi", model.properties().planId());
        Assertions.assertEquals("ynnaam", model.properties().offerId());
        Assertions.assertEquals("ectehf", model.properties().termId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionInstallationRequest model
            = new SolutionInstallationRequest().withProperties(new SolutionProperties().withSaasSubscriptionId("jixhbk")
                .withSaasSubscriptionName("ofqweykhmenevfye")
                .withMarketplacePublisherId("fwhybcibvy")
                .withPlanId("dcsi")
                .withOfferId("ynnaam")
                .withTermId("ectehf")
                .withAdditionalProperties(mapOf("solutionId", "zj", "partnerId", "ggd")));
        model = BinaryData.fromObject(model).toObject(SolutionInstallationRequest.class);
        Assertions.assertEquals("jixhbk", model.properties().saasSubscriptionId());
        Assertions.assertEquals("ofqweykhmenevfye", model.properties().saasSubscriptionName());
        Assertions.assertEquals("fwhybcibvy", model.properties().marketplacePublisherId());
        Assertions.assertEquals("dcsi", model.properties().planId());
        Assertions.assertEquals("ynnaam", model.properties().offerId());
        Assertions.assertEquals("ectehf", model.properties().termId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
