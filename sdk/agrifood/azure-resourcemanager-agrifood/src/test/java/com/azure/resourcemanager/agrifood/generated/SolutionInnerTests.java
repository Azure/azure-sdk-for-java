// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.agrifood.fluent.models.SolutionInner;
import com.azure.resourcemanager.agrifood.models.SolutionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionInner model = BinaryData.fromString(
            "{\"properties\":{\"solutionId\":\"ocfs\",\"partnerId\":\"s\",\"saasSubscriptionId\":\"mddystkiiux\",\"saasSubscriptionName\":\"qyud\",\"marketplacePublisherId\":\"o\",\"planId\":\"rq\",\"offerId\":\"b\",\"termId\":\"oczvy\",\"\":{\"vdfwatkpn\":\"datarvkdvjsllrm\",\"wiqzbqjvsovmyo\":\"dataulexxbczwtr\"}},\"eTag\":\"cspkwlhzdobpxjmf\",\"id\":\"vvnchrkcc\",\"name\":\"wwzjuqkhrsajiwku\",\"type\":\"foskghsauuimj\"}")
            .toObject(SolutionInner.class);
        Assertions.assertEquals("mddystkiiux", model.properties().saasSubscriptionId());
        Assertions.assertEquals("qyud", model.properties().saasSubscriptionName());
        Assertions.assertEquals("o", model.properties().marketplacePublisherId());
        Assertions.assertEquals("rq", model.properties().planId());
        Assertions.assertEquals("b", model.properties().offerId());
        Assertions.assertEquals("oczvy", model.properties().termId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionInner model
            = new SolutionInner().withProperties(new SolutionProperties().withSaasSubscriptionId("mddystkiiux")
                .withSaasSubscriptionName("qyud")
                .withMarketplacePublisherId("o")
                .withPlanId("rq")
                .withOfferId("b")
                .withTermId("oczvy")
                .withAdditionalProperties(mapOf("solutionId", "ocfs", "partnerId", "s")));
        model = BinaryData.fromObject(model).toObject(SolutionInner.class);
        Assertions.assertEquals("mddystkiiux", model.properties().saasSubscriptionId());
        Assertions.assertEquals("qyud", model.properties().saasSubscriptionName());
        Assertions.assertEquals("o", model.properties().marketplacePublisherId());
        Assertions.assertEquals("rq", model.properties().planId());
        Assertions.assertEquals("b", model.properties().offerId());
        Assertions.assertEquals("oczvy", model.properties().termId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
