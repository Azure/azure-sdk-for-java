// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Api properties.
 */
@Fluent
public final class ApiProperties implements JsonSerializable<ApiProperties> {
    /*
     * Interval in minutes for which the weather data for the api needs to be refreshed.
     */
    private Integer apiFreshnessTimeInMinutes;

    /**
     * Creates an instance of ApiProperties class.
     */
    public ApiProperties() {
    }

    /**
     * Get the apiFreshnessTimeInMinutes property: Interval in minutes for which the weather data for the api needs to
     * be refreshed.
     * 
     * @return the apiFreshnessTimeInMinutes value.
     */
    public Integer apiFreshnessTimeInMinutes() {
        return this.apiFreshnessTimeInMinutes;
    }

    /**
     * Set the apiFreshnessTimeInMinutes property: Interval in minutes for which the weather data for the api needs to
     * be refreshed.
     * 
     * @param apiFreshnessTimeInMinutes the apiFreshnessTimeInMinutes value to set.
     * @return the ApiProperties object itself.
     */
    public ApiProperties withApiFreshnessTimeInMinutes(Integer apiFreshnessTimeInMinutes) {
        this.apiFreshnessTimeInMinutes = apiFreshnessTimeInMinutes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("apiFreshnessTimeInMinutes", this.apiFreshnessTimeInMinutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiProperties.
     */
    public static ApiProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiProperties deserializedApiProperties = new ApiProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apiFreshnessTimeInMinutes".equals(fieldName)) {
                    deserializedApiProperties.apiFreshnessTimeInMinutes = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiProperties;
        });
    }
}
