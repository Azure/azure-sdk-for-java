// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.agrifood.fluent.SolutionsClient;
import com.azure.resourcemanager.agrifood.fluent.models.SolutionInner;
import com.azure.resourcemanager.agrifood.models.SolutionInstallationRequest;
import com.azure.resourcemanager.agrifood.models.SolutionListResponse;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SolutionsClient.
 */
public final class SolutionsClientImpl implements SolutionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SolutionsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriFoodManagementClientImpl client;

    /**
     * Initializes an instance of SolutionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SolutionsClientImpl(AgriFoodManagementClientImpl client) {
        this.service
            = RestProxy.create(SolutionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AgriFoodManagementClientSolutions to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AgriFoodManagementCl")
    public interface SolutionsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("farmBeatsResourceName") String farmBeatsResourceName,
            @PathParam("solutionId") String solutionId, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SolutionInstallationRequest body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("farmBeatsResourceName") String farmBeatsResourceName,
            @PathParam("solutionId") String solutionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("farmBeatsResourceName") String farmBeatsResourceName,
            @PathParam("solutionId") String solutionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionListResponse>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("farmBeatsResourceName") String farmBeatsResourceName,
            @QueryParam(value = "solutionIds", multipleQueryParams = true) List<String> solutionIds,
            @QueryParam(value = "ids", multipleQueryParams = true) List<String> ids,
            @QueryParam(value = "names", multipleQueryParams = true) List<String> names,
            @QueryParam(value = "propertyFilters", multipleQueryParams = true) List<String> propertyFilters,
            @QueryParam(value = "statuses", multipleQueryParams = true) List<String> statuses,
            @QueryParam("minCreatedDateTime") OffsetDateTime minCreatedDateTime,
            @QueryParam("maxCreatedDateTime") OffsetDateTime maxCreatedDateTime,
            @QueryParam("minLastModifiedDateTime") OffsetDateTime minLastModifiedDateTime,
            @QueryParam("maxLastModifiedDateTime") OffsetDateTime maxLastModifiedDateTime,
            @QueryParam("$maxPageSize") Integer maxPageSize, @QueryParam("$skipToken") String skipToken,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionListResponse>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Install Or Update Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param body Solution resource request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String farmBeatsResourceName, String solutionId, SolutionInstallationRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (farmBeatsResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter farmBeatsResourceName is required and cannot be null."));
        }
        if (solutionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionId is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, farmBeatsResourceName, solutionId, this.client.getApiVersion(), body, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Install Or Update Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param body Solution resource request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String farmBeatsResourceName, String solutionId, SolutionInstallationRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (farmBeatsResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter farmBeatsResourceName is required and cannot be null."));
        }
        if (solutionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionId is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            farmBeatsResourceName, solutionId, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Install Or Update Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionInner> createOrUpdateAsync(String resourceGroupName, String farmBeatsResourceName,
        String solutionId) {
        final SolutionInstallationRequest body = null;
        return createOrUpdateWithResponseAsync(resourceGroupName, farmBeatsResourceName, solutionId, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Install Or Update Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param body Solution resource request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SolutionInner> createOrUpdateWithResponse(String resourceGroupName, String farmBeatsResourceName,
        String solutionId, SolutionInstallationRequest body, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, farmBeatsResourceName, solutionId, body, context)
            .block();
    }

    /**
     * Install Or Update Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionInner createOrUpdate(String resourceGroupName, String farmBeatsResourceName, String solutionId) {
        final SolutionInstallationRequest body = null;
        return createOrUpdateWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, body, Context.NONE)
            .getValue();
    }

    /**
     * Get installed Solution details by Solution id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionInner>> getWithResponseAsync(String resourceGroupName, String farmBeatsResourceName,
        String solutionId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (farmBeatsResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter farmBeatsResourceName is required and cannot be null."));
        }
        if (solutionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, farmBeatsResourceName, solutionId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get installed Solution details by Solution id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionInner>> getWithResponseAsync(String resourceGroupName, String farmBeatsResourceName,
        String solutionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (farmBeatsResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter farmBeatsResourceName is required and cannot be null."));
        }
        if (solutionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            farmBeatsResourceName, solutionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get installed Solution details by Solution id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionInner> getAsync(String resourceGroupName, String farmBeatsResourceName, String solutionId) {
        return getWithResponseAsync(resourceGroupName, farmBeatsResourceName, solutionId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get installed Solution details by Solution id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SolutionInner> getWithResponse(String resourceGroupName, String farmBeatsResourceName,
        String solutionId, Context context) {
        return getWithResponseAsync(resourceGroupName, farmBeatsResourceName, solutionId, context).block();
    }

    /**
     * Get installed Solution details by Solution id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionInner get(String resourceGroupName, String farmBeatsResourceName, String solutionId) {
        return getWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, Context.NONE).getValue();
    }

    /**
     * Uninstall Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String farmBeatsResourceName,
        String solutionId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (farmBeatsResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter farmBeatsResourceName is required and cannot be null."));
        }
        if (solutionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, farmBeatsResourceName, solutionId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Uninstall Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String farmBeatsResourceName,
        String solutionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (farmBeatsResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter farmBeatsResourceName is required and cannot be null."));
        }
        if (solutionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            farmBeatsResourceName, solutionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Uninstall Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String farmBeatsResourceName, String solutionId) {
        return deleteWithResponseAsync(resourceGroupName, farmBeatsResourceName, solutionId)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Uninstall Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String farmBeatsResourceName, String solutionId,
        Context context) {
        return deleteWithResponseAsync(resourceGroupName, farmBeatsResourceName, solutionId, context).block();
    }

    /**
     * Uninstall Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String farmBeatsResourceName, String solutionId) {
        deleteWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, Context.NONE);
    }

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionIds Installed Solution ids.
     * @param ids Ids of the resource.
     * @param names Names of the resource.
     * @param propertyFilters Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".
     * @param statuses Statuses of the resource.
     * @param minCreatedDateTime Minimum creation date of resource (inclusive).
     * @param maxCreatedDateTime Maximum creation date of resource (inclusive).
     * @param minLastModifiedDateTime Minimum last modified date of resource (inclusive).
     * @param maxLastModifiedDateTime Maximum last modified date of resource (inclusive).
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SolutionInner>> listSinglePageAsync(String resourceGroupName,
        String farmBeatsResourceName, List<String> solutionIds, List<String> ids, List<String> names,
        List<String> propertyFilters, List<String> statuses, OffsetDateTime minCreatedDateTime,
        OffsetDateTime maxCreatedDateTime, OffsetDateTime minLastModifiedDateTime,
        OffsetDateTime maxLastModifiedDateTime, Integer maxPageSize, String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (farmBeatsResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter farmBeatsResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> solutionIdsConverted = (solutionIds == null)
            ? new ArrayList<>()
            : solutionIds.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> idsConverted = (ids == null)
            ? new ArrayList<>()
            : ids.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> namesConverted = (names == null)
            ? new ArrayList<>()
            : names.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> propertyFiltersConverted = (propertyFilters == null)
            ? new ArrayList<>()
            : propertyFilters.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> statusesConverted = (statuses == null)
            ? new ArrayList<>()
            : statuses.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    farmBeatsResourceName, solutionIdsConverted, idsConverted, namesConverted, propertyFiltersConverted,
                    statusesConverted, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime,
                    maxLastModifiedDateTime, maxPageSize, skipToken, this.client.getApiVersion(), accept, context))
            .<PagedResponse<SolutionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionIds Installed Solution ids.
     * @param ids Ids of the resource.
     * @param names Names of the resource.
     * @param propertyFilters Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".
     * @param statuses Statuses of the resource.
     * @param minCreatedDateTime Minimum creation date of resource (inclusive).
     * @param maxCreatedDateTime Maximum creation date of resource (inclusive).
     * @param minLastModifiedDateTime Minimum last modified date of resource (inclusive).
     * @param maxLastModifiedDateTime Maximum last modified date of resource (inclusive).
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SolutionInner>> listSinglePageAsync(String resourceGroupName,
        String farmBeatsResourceName, List<String> solutionIds, List<String> ids, List<String> names,
        List<String> propertyFilters, List<String> statuses, OffsetDateTime minCreatedDateTime,
        OffsetDateTime maxCreatedDateTime, OffsetDateTime minLastModifiedDateTime,
        OffsetDateTime maxLastModifiedDateTime, Integer maxPageSize, String skipToken, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (farmBeatsResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter farmBeatsResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> solutionIdsConverted = (solutionIds == null)
            ? new ArrayList<>()
            : solutionIds.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> idsConverted = (ids == null)
            ? new ArrayList<>()
            : ids.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> namesConverted = (names == null)
            ? new ArrayList<>()
            : names.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> propertyFiltersConverted = (propertyFilters == null)
            ? new ArrayList<>()
            : propertyFilters.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> statusesConverted = (statuses == null)
            ? new ArrayList<>()
            : statuses.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, farmBeatsResourceName,
                solutionIdsConverted, idsConverted, namesConverted, propertyFiltersConverted, statusesConverted,
                minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize,
                skipToken, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionIds Installed Solution ids.
     * @param ids Ids of the resource.
     * @param names Names of the resource.
     * @param propertyFilters Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".
     * @param statuses Statuses of the resource.
     * @param minCreatedDateTime Minimum creation date of resource (inclusive).
     * @param maxCreatedDateTime Maximum creation date of resource (inclusive).
     * @param minLastModifiedDateTime Minimum last modified date of resource (inclusive).
     * @param maxLastModifiedDateTime Maximum last modified date of resource (inclusive).
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SolutionInner> listAsync(String resourceGroupName, String farmBeatsResourceName,
        List<String> solutionIds, List<String> ids, List<String> names, List<String> propertyFilters,
        List<String> statuses, OffsetDateTime minCreatedDateTime, OffsetDateTime maxCreatedDateTime,
        OffsetDateTime minLastModifiedDateTime, OffsetDateTime maxLastModifiedDateTime, Integer maxPageSize,
        String skipToken) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, farmBeatsResourceName, solutionIds, ids,
            names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime,
            maxLastModifiedDateTime, maxPageSize, skipToken), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SolutionInner> listAsync(String resourceGroupName, String farmBeatsResourceName) {
        final List<String> solutionIds = null;
        final List<String> ids = null;
        final List<String> names = null;
        final List<String> propertyFilters = null;
        final List<String> statuses = null;
        final OffsetDateTime minCreatedDateTime = null;
        final OffsetDateTime maxCreatedDateTime = null;
        final OffsetDateTime minLastModifiedDateTime = null;
        final OffsetDateTime maxLastModifiedDateTime = null;
        final Integer maxPageSize = null;
        final String skipToken = null;
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, farmBeatsResourceName, solutionIds, ids,
            names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime,
            maxLastModifiedDateTime, maxPageSize, skipToken), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionIds Installed Solution ids.
     * @param ids Ids of the resource.
     * @param names Names of the resource.
     * @param propertyFilters Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".
     * @param statuses Statuses of the resource.
     * @param minCreatedDateTime Minimum creation date of resource (inclusive).
     * @param maxCreatedDateTime Maximum creation date of resource (inclusive).
     * @param minLastModifiedDateTime Minimum last modified date of resource (inclusive).
     * @param maxLastModifiedDateTime Maximum last modified date of resource (inclusive).
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SolutionInner> listAsync(String resourceGroupName, String farmBeatsResourceName,
        List<String> solutionIds, List<String> ids, List<String> names, List<String> propertyFilters,
        List<String> statuses, OffsetDateTime minCreatedDateTime, OffsetDateTime maxCreatedDateTime,
        OffsetDateTime minLastModifiedDateTime, OffsetDateTime maxLastModifiedDateTime, Integer maxPageSize,
        String skipToken, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, farmBeatsResourceName, solutionIds, ids, names,
                propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime,
                maxLastModifiedDateTime, maxPageSize, skipToken, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SolutionInner> list(String resourceGroupName, String farmBeatsResourceName) {
        final List<String> solutionIds = null;
        final List<String> ids = null;
        final List<String> names = null;
        final List<String> propertyFilters = null;
        final List<String> statuses = null;
        final OffsetDateTime minCreatedDateTime = null;
        final OffsetDateTime maxCreatedDateTime = null;
        final OffsetDateTime minLastModifiedDateTime = null;
        final OffsetDateTime maxLastModifiedDateTime = null;
        final Integer maxPageSize = null;
        final String skipToken = null;
        return new PagedIterable<>(listAsync(resourceGroupName, farmBeatsResourceName, solutionIds, ids, names,
            propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime,
            maxLastModifiedDateTime, maxPageSize, skipToken));
    }

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionIds Installed Solution ids.
     * @param ids Ids of the resource.
     * @param names Names of the resource.
     * @param propertyFilters Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".
     * @param statuses Statuses of the resource.
     * @param minCreatedDateTime Minimum creation date of resource (inclusive).
     * @param maxCreatedDateTime Maximum creation date of resource (inclusive).
     * @param minLastModifiedDateTime Minimum last modified date of resource (inclusive).
     * @param maxLastModifiedDateTime Maximum last modified date of resource (inclusive).
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SolutionInner> list(String resourceGroupName, String farmBeatsResourceName,
        List<String> solutionIds, List<String> ids, List<String> names, List<String> propertyFilters,
        List<String> statuses, OffsetDateTime minCreatedDateTime, OffsetDateTime maxCreatedDateTime,
        OffsetDateTime minLastModifiedDateTime, OffsetDateTime maxLastModifiedDateTime, Integer maxPageSize,
        String skipToken, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, farmBeatsResourceName, solutionIds, ids, names,
            propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime,
            maxLastModifiedDateTime, maxPageSize, skipToken, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SolutionInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SolutionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SolutionInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
