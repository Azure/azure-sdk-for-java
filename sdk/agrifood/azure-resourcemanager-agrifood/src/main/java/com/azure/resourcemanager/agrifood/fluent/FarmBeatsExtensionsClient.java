// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.agrifood.fluent.models.FarmBeatsExtensionInner;
import java.util.List;

/** An instance of this class provides access to all the operations defined in FarmBeatsExtensionsClient. */
public interface FarmBeatsExtensionsClient {
    /**
     * Get list of farmBeats extension.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of farmBeats extension as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FarmBeatsExtensionInner> list();

    /**
     * Get list of farmBeats extension.
     *
     * @param farmBeatsExtensionIds FarmBeatsExtension ids.
     * @param farmBeatsExtensionNames FarmBeats extension names.
     * @param extensionCategories Extension categories.
     * @param publisherIds Publisher ids.
     * @param maxPageSize Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000, Default value = 50.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of farmBeats extension as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FarmBeatsExtensionInner> list(
        List<String> farmBeatsExtensionIds,
        List<String> farmBeatsExtensionNames,
        List<String> extensionCategories,
        List<String> publisherIds,
        Integer maxPageSize,
        Context context);

    /**
     * Get farmBeats extension.
     *
     * @param farmBeatsExtensionId farmBeatsExtensionId to be queried.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return farmBeats extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FarmBeatsExtensionInner get(String farmBeatsExtensionId);

    /**
     * Get farmBeats extension.
     *
     * @param farmBeatsExtensionId farmBeatsExtensionId to be queried.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return farmBeats extension along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FarmBeatsExtensionInner> getWithResponse(String farmBeatsExtensionId, Context context);
}
