// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * FarmBeatsSolution properties.
 */
@Fluent
public final class FarmBeatsSolutionProperties implements JsonSerializable<FarmBeatsSolutionProperties> {
    /*
     * Solution Partner Id.
     */
    private String partnerId;

    /*
     * Solution Partner Tenant Id.
     */
    private String partnerTenantId;

    /*
     * Gets scope of the FarmBeats data access that's required for processing solution request to partner.
     * Example: For gdd they might need weatherScope and satelliteScope.
     */
    private List<String> dataAccessScopes;

    /*
     * The marketplaceOfferDetails property.
     */
    private MarketplaceOfferDetails marketplaceOfferDetails;

    /*
     * Gets scope of the FarmBeats related parameters that need to be validated in apiInputParameters.
     * Example: For if 'FarmHierarchy' is the input scope for 'WeatherScope' data access
     * For working with WeatherScope we need FarmHierarchy info implies 'farmerId', 'resourceId', 'resourceType' in
     * request body.
     */
    private List<ResourceParameter> inputParametersValidationScopes;

    /*
     * Gets apiVersion: Swagger Document Dictionary to capture all api versions of swagger exposed by partner to
     * farmbeats.
     */
    private Map<String, Object> openApiSpecsDictionary;

    /*
     * Gets example name: insight sample response Dictionary to capture all variations of computed results ingested by
     * partner.
     */
    private Map<String, SolutionEvaluatedOutput> evaluatedOutputsDictionary;

    /*
     * Application id of the multi tenant application to be used by partner to access FarmBeats data.
     */
    private UUID accessFBApplicationId;

    /*
     * Application id of the SaaS multi tenant application.
     */
    private UUID saaSApplicationId;

    /*
     * List of ActionIds needed to make the SaaS multi tenant application access relevant fb data.
     */
    private List<String> actionIds;

    /*
     * Role Id of the SaaS multi tenant application to access relevant fb data.
     */
    private String roleId;

    /*
     * Role Name of the SaaS multi tenant application to access relevant fb data.
     */
    private String roleName;

    /*
     * Application name of the multi tenant application to be used by partner to access FarmBeatsData.
     */
    private String accessFBApplicationName;

    /**
     * Creates an instance of FarmBeatsSolutionProperties class.
     */
    public FarmBeatsSolutionProperties() {
    }

    /**
     * Get the partnerId property: Solution Partner Id.
     * 
     * @return the partnerId value.
     */
    public String partnerId() {
        return this.partnerId;
    }

    /**
     * Get the partnerTenantId property: Solution Partner Tenant Id.
     * 
     * @return the partnerTenantId value.
     */
    public String partnerTenantId() {
        return this.partnerTenantId;
    }

    /**
     * Get the dataAccessScopes property: Gets scope of the FarmBeats data access that's required for processing
     * solution request to partner.
     * Example: For gdd they might need weatherScope and satelliteScope.
     * 
     * @return the dataAccessScopes value.
     */
    public List<String> dataAccessScopes() {
        return this.dataAccessScopes;
    }

    /**
     * Get the marketplaceOfferDetails property: The marketplaceOfferDetails property.
     * 
     * @return the marketplaceOfferDetails value.
     */
    public MarketplaceOfferDetails marketplaceOfferDetails() {
        return this.marketplaceOfferDetails;
    }

    /**
     * Set the marketplaceOfferDetails property: The marketplaceOfferDetails property.
     * 
     * @param marketplaceOfferDetails the marketplaceOfferDetails value to set.
     * @return the FarmBeatsSolutionProperties object itself.
     */
    public FarmBeatsSolutionProperties withMarketplaceOfferDetails(MarketplaceOfferDetails marketplaceOfferDetails) {
        this.marketplaceOfferDetails = marketplaceOfferDetails;
        return this;
    }

    /**
     * Get the inputParametersValidationScopes property: Gets scope of the FarmBeats related parameters that need to be
     * validated in apiInputParameters.
     * Example: For if 'FarmHierarchy' is the input scope for 'WeatherScope' data access
     * For working with WeatherScope we need FarmHierarchy info implies 'farmerId', 'resourceId', 'resourceType' in
     * request body.
     * 
     * @return the inputParametersValidationScopes value.
     */
    public List<ResourceParameter> inputParametersValidationScopes() {
        return this.inputParametersValidationScopes;
    }

    /**
     * Get the openApiSpecsDictionary property: Gets apiVersion: Swagger Document Dictionary to capture all api versions
     * of swagger exposed by partner to farmbeats.
     * 
     * @return the openApiSpecsDictionary value.
     */
    public Map<String, Object> openApiSpecsDictionary() {
        return this.openApiSpecsDictionary;
    }

    /**
     * Get the evaluatedOutputsDictionary property: Gets example name: insight sample response Dictionary to capture all
     * variations of computed results ingested by partner.
     * 
     * @return the evaluatedOutputsDictionary value.
     */
    public Map<String, SolutionEvaluatedOutput> evaluatedOutputsDictionary() {
        return this.evaluatedOutputsDictionary;
    }

    /**
     * Get the accessFBApplicationId property: Application id of the multi tenant application to be used by partner to
     * access FarmBeats data.
     * 
     * @return the accessFBApplicationId value.
     */
    public UUID accessFBApplicationId() {
        return this.accessFBApplicationId;
    }

    /**
     * Get the saaSApplicationId property: Application id of the SaaS multi tenant application.
     * 
     * @return the saaSApplicationId value.
     */
    public UUID saaSApplicationId() {
        return this.saaSApplicationId;
    }

    /**
     * Get the actionIds property: List of ActionIds needed to make the SaaS multi tenant application access relevant fb
     * data.
     * 
     * @return the actionIds value.
     */
    public List<String> actionIds() {
        return this.actionIds;
    }

    /**
     * Get the roleId property: Role Id of the SaaS multi tenant application to access relevant fb data.
     * 
     * @return the roleId value.
     */
    public String roleId() {
        return this.roleId;
    }

    /**
     * Get the roleName property: Role Name of the SaaS multi tenant application to access relevant fb data.
     * 
     * @return the roleName value.
     */
    public String roleName() {
        return this.roleName;
    }

    /**
     * Get the accessFBApplicationName property: Application name of the multi tenant application to be used by partner
     * to access FarmBeatsData.
     * 
     * @return the accessFBApplicationName value.
     */
    public String accessFBApplicationName() {
        return this.accessFBApplicationName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplaceOfferDetails() != null) {
            marketplaceOfferDetails().validate();
        }
        if (inputParametersValidationScopes() != null) {
            inputParametersValidationScopes().forEach(e -> e.validate());
        }
        if (evaluatedOutputsDictionary() != null) {
            evaluatedOutputsDictionary().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("marketplaceOfferDetails", this.marketplaceOfferDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FarmBeatsSolutionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FarmBeatsSolutionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FarmBeatsSolutionProperties.
     */
    public static FarmBeatsSolutionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FarmBeatsSolutionProperties deserializedFarmBeatsSolutionProperties = new FarmBeatsSolutionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partnerId".equals(fieldName)) {
                    deserializedFarmBeatsSolutionProperties.partnerId = reader.getString();
                } else if ("partnerTenantId".equals(fieldName)) {
                    deserializedFarmBeatsSolutionProperties.partnerTenantId = reader.getString();
                } else if ("dataAccessScopes".equals(fieldName)) {
                    List<String> dataAccessScopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedFarmBeatsSolutionProperties.dataAccessScopes = dataAccessScopes;
                } else if ("marketplaceOfferDetails".equals(fieldName)) {
                    deserializedFarmBeatsSolutionProperties.marketplaceOfferDetails
                        = MarketplaceOfferDetails.fromJson(reader);
                } else if ("inputParametersValidationScopes".equals(fieldName)) {
                    List<ResourceParameter> inputParametersValidationScopes
                        = reader.readArray(reader1 -> ResourceParameter.fromJson(reader1));
                    deserializedFarmBeatsSolutionProperties.inputParametersValidationScopes
                        = inputParametersValidationScopes;
                } else if ("openApiSpecsDictionary".equals(fieldName)) {
                    Map<String, Object> openApiSpecsDictionary = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedFarmBeatsSolutionProperties.openApiSpecsDictionary = openApiSpecsDictionary;
                } else if ("evaluatedOutputsDictionary".equals(fieldName)) {
                    Map<String, SolutionEvaluatedOutput> evaluatedOutputsDictionary
                        = reader.readMap(reader1 -> SolutionEvaluatedOutput.fromJson(reader1));
                    deserializedFarmBeatsSolutionProperties.evaluatedOutputsDictionary = evaluatedOutputsDictionary;
                } else if ("accessFBApplicationId".equals(fieldName)) {
                    deserializedFarmBeatsSolutionProperties.accessFBApplicationId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("saaSApplicationId".equals(fieldName)) {
                    deserializedFarmBeatsSolutionProperties.saaSApplicationId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("actionIds".equals(fieldName)) {
                    List<String> actionIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedFarmBeatsSolutionProperties.actionIds = actionIds;
                } else if ("roleId".equals(fieldName)) {
                    deserializedFarmBeatsSolutionProperties.roleId = reader.getString();
                } else if ("roleName".equals(fieldName)) {
                    deserializedFarmBeatsSolutionProperties.roleName = reader.getString();
                } else if ("accessFBApplicationName".equals(fieldName)) {
                    deserializedFarmBeatsSolutionProperties.accessFBApplicationName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFarmBeatsSolutionProperties;
        });
    }
}
