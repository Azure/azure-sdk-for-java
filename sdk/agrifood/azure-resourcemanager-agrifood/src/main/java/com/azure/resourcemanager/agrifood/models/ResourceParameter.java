// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResourceParameter model.
 */
@Fluent
public final class ResourceParameter implements JsonSerializable<ResourceParameter> {
    /*
     * The resourceIdName property.
     */
    private String resourceIdName;

    /*
     * The resourceType property.
     */
    private String resourceType;

    /**
     * Creates an instance of ResourceParameter class.
     */
    public ResourceParameter() {
    }

    /**
     * Get the resourceIdName property: The resourceIdName property.
     * 
     * @return the resourceIdName value.
     */
    public String resourceIdName() {
        return this.resourceIdName;
    }

    /**
     * Set the resourceIdName property: The resourceIdName property.
     * 
     * @param resourceIdName the resourceIdName value to set.
     * @return the ResourceParameter object itself.
     */
    public ResourceParameter withResourceIdName(String resourceIdName) {
        this.resourceIdName = resourceIdName;
        return this;
    }

    /**
     * Get the resourceType property: The resourceType property.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The resourceType property.
     * 
     * @param resourceType the resourceType value to set.
     * @return the ResourceParameter object itself.
     */
    public ResourceParameter withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceIdName", this.resourceIdName);
        jsonWriter.writeStringField("resourceType", this.resourceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceParameter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceParameter.
     */
    public static ResourceParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceParameter deserializedResourceParameter = new ResourceParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceIdName".equals(fieldName)) {
                    deserializedResourceParameter.resourceIdName = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedResourceParameter.resourceType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceParameter;
        });
    }
}
