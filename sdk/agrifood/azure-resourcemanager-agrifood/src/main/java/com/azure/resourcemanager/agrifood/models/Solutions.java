// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Resource collection API of Solutions.
 */
public interface Solutions {
    /**
     * Get installed Solution details by Solution id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id along with {@link Response}.
     */
    Response<Solution> getWithResponse(String resourceGroupName, String farmBeatsResourceName, String solutionId,
        Context context);

    /**
     * Get installed Solution details by Solution id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id.
     */
    Solution get(String resourceGroupName, String farmBeatsResourceName, String solutionId);

    /**
     * Uninstall Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String farmBeatsResourceName, String solutionId,
        Context context);

    /**
     * Uninstall Solution.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionId Solution Id of the solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String farmBeatsResourceName, String solutionId);

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Solution> list(String resourceGroupName, String farmBeatsResourceName);

    /**
     * Get installed Solutions details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param farmBeatsResourceName FarmBeats resource name.
     * @param solutionIds Installed Solution ids.
     * @param ids Ids of the resource.
     * @param names Names of the resource.
     * @param propertyFilters Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".
     * @param statuses Statuses of the resource.
     * @param minCreatedDateTime Minimum creation date of resource (inclusive).
     * @param maxCreatedDateTime Maximum creation date of resource (inclusive).
     * @param minLastModifiedDateTime Minimum last modified date of resource (inclusive).
     * @param maxLastModifiedDateTime Maximum last modified date of resource (inclusive).
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solutions details as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Solution> list(String resourceGroupName, String farmBeatsResourceName, List<String> solutionIds,
        List<String> ids, List<String> names, List<String> propertyFilters, List<String> statuses,
        OffsetDateTime minCreatedDateTime, OffsetDateTime maxCreatedDateTime, OffsetDateTime minLastModifiedDateTime,
        OffsetDateTime maxLastModifiedDateTime, Integer maxPageSize, String skipToken, Context context);

    /**
     * Get installed Solution details by Solution id.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id along with {@link Response}.
     */
    Solution getById(String id);

    /**
     * Get installed Solution details by Solution id.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return installed Solution details by Solution id along with {@link Response}.
     */
    Response<Solution> getByIdWithResponse(String id, Context context);

    /**
     * Uninstall Solution.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Uninstall Solution.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Solution resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Solution definition.
     */
    Solution.DefinitionStages.Blank define(String name);
}
