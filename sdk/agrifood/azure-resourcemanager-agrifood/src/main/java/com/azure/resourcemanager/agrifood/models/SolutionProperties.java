// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Solution resource properties.
 */
@Fluent
public final class SolutionProperties implements JsonSerializable<SolutionProperties> {
    /*
     * Solution Id.
     */
    private String solutionId;

    /*
     * Partner Id of the Solution.
     */
    private String partnerId;

    /*
     * SaaS subscriptionId of the installed SaaS application.
     */
    private String saasSubscriptionId;

    /*
     * SaaS subscription name of the installed SaaS application.
     */
    private String saasSubscriptionName;

    /*
     * SaaS application Publisher Id.
     */
    private String marketplacePublisherId;

    /*
     * SaaS application Plan Id.
     */
    private String planId;

    /*
     * SaaS application Offer Id.
     */
    private String offerId;

    /*
     * SaaS application Term Id.
     */
    private String termId;

    /*
     * Solution resource properties.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of SolutionProperties class.
     */
    public SolutionProperties() {
    }

    /**
     * Get the solutionId property: Solution Id.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Get the partnerId property: Partner Id of the Solution.
     * 
     * @return the partnerId value.
     */
    public String partnerId() {
        return this.partnerId;
    }

    /**
     * Get the saasSubscriptionId property: SaaS subscriptionId of the installed SaaS application.
     * 
     * @return the saasSubscriptionId value.
     */
    public String saasSubscriptionId() {
        return this.saasSubscriptionId;
    }

    /**
     * Set the saasSubscriptionId property: SaaS subscriptionId of the installed SaaS application.
     * 
     * @param saasSubscriptionId the saasSubscriptionId value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withSaasSubscriptionId(String saasSubscriptionId) {
        this.saasSubscriptionId = saasSubscriptionId;
        return this;
    }

    /**
     * Get the saasSubscriptionName property: SaaS subscription name of the installed SaaS application.
     * 
     * @return the saasSubscriptionName value.
     */
    public String saasSubscriptionName() {
        return this.saasSubscriptionName;
    }

    /**
     * Set the saasSubscriptionName property: SaaS subscription name of the installed SaaS application.
     * 
     * @param saasSubscriptionName the saasSubscriptionName value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withSaasSubscriptionName(String saasSubscriptionName) {
        this.saasSubscriptionName = saasSubscriptionName;
        return this;
    }

    /**
     * Get the marketplacePublisherId property: SaaS application Publisher Id.
     * 
     * @return the marketplacePublisherId value.
     */
    public String marketplacePublisherId() {
        return this.marketplacePublisherId;
    }

    /**
     * Set the marketplacePublisherId property: SaaS application Publisher Id.
     * 
     * @param marketplacePublisherId the marketplacePublisherId value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withMarketplacePublisherId(String marketplacePublisherId) {
        this.marketplacePublisherId = marketplacePublisherId;
        return this;
    }

    /**
     * Get the planId property: SaaS application Plan Id.
     * 
     * @return the planId value.
     */
    public String planId() {
        return this.planId;
    }

    /**
     * Set the planId property: SaaS application Plan Id.
     * 
     * @param planId the planId value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withPlanId(String planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get the offerId property: SaaS application Offer Id.
     * 
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Set the offerId property: SaaS application Offer Id.
     * 
     * @param offerId the offerId value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withOfferId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Get the termId property: SaaS application Term Id.
     * 
     * @return the termId value.
     */
    public String termId() {
        return this.termId;
    }

    /**
     * Set the termId property: SaaS application Term Id.
     * 
     * @param termId the termId value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withTermId(String termId) {
        this.termId = termId;
        return this;
    }

    /**
     * Get the additionalProperties property: Solution resource properties.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Solution resource properties.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (saasSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property saasSubscriptionId in model SolutionProperties"));
        }
        if (saasSubscriptionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property saasSubscriptionName in model SolutionProperties"));
        }
        if (marketplacePublisherId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property marketplacePublisherId in model SolutionProperties"));
        }
        if (planId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property planId in model SolutionProperties"));
        }
        if (offerId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property offerId in model SolutionProperties"));
        }
        if (termId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property termId in model SolutionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("saasSubscriptionId", this.saasSubscriptionId);
        jsonWriter.writeStringField("saasSubscriptionName", this.saasSubscriptionName);
        jsonWriter.writeStringField("marketplacePublisherId", this.marketplacePublisherId);
        jsonWriter.writeStringField("planId", this.planId);
        jsonWriter.writeStringField("offerId", this.offerId);
        jsonWriter.writeStringField("termId", this.termId);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionProperties.
     */
    public static SolutionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionProperties deserializedSolutionProperties = new SolutionProperties();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("saasSubscriptionId".equals(fieldName)) {
                    deserializedSolutionProperties.saasSubscriptionId = reader.getString();
                } else if ("saasSubscriptionName".equals(fieldName)) {
                    deserializedSolutionProperties.saasSubscriptionName = reader.getString();
                } else if ("marketplacePublisherId".equals(fieldName)) {
                    deserializedSolutionProperties.marketplacePublisherId = reader.getString();
                } else if ("planId".equals(fieldName)) {
                    deserializedSolutionProperties.planId = reader.getString();
                } else if ("offerId".equals(fieldName)) {
                    deserializedSolutionProperties.offerId = reader.getString();
                } else if ("termId".equals(fieldName)) {
                    deserializedSolutionProperties.termId = reader.getString();
                } else if ("solutionId".equals(fieldName)) {
                    deserializedSolutionProperties.solutionId = reader.getString();
                } else if ("partnerId".equals(fieldName)) {
                    deserializedSolutionProperties.partnerId = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedSolutionProperties.additionalProperties = additionalProperties;

            return deserializedSolutionProperties;
        });
    }
}
