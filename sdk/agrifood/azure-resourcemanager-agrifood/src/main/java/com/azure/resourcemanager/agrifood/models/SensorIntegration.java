// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Sensor integration request model.
 */
@Fluent
public final class SensorIntegration implements JsonSerializable<SensorIntegration> {
    /*
     * Sensor integration enable state. Allowed values are True, None
     */
    private String enabled;

    /*
     * Sensor integration instance provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This
     * also follows the OData error response format.).
     */
    private ManagementError provisioningInfo;

    /**
     * Creates an instance of SensorIntegration class.
     */
    public SensorIntegration() {
    }

    /**
     * Get the enabled property: Sensor integration enable state. Allowed values are True, None.
     * 
     * @return the enabled value.
     */
    public String enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Sensor integration enable state. Allowed values are True, None.
     * 
     * @param enabled the enabled value to set.
     * @return the SensorIntegration object itself.
     */
    public SensorIntegration withEnabled(String enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the provisioningState property: Sensor integration instance provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the provisioningInfo property: Common error response for all Azure Resource Manager APIs to return error
     * details for failed operations. (This also follows the OData error response format.).
     * 
     * @return the provisioningInfo value.
     */
    public ManagementError provisioningInfo() {
        return this.provisioningInfo;
    }

    /**
     * Set the provisioningInfo property: Common error response for all Azure Resource Manager APIs to return error
     * details for failed operations. (This also follows the OData error response format.).
     * 
     * @param provisioningInfo the provisioningInfo value to set.
     * @return the SensorIntegration object itself.
     */
    public SensorIntegration withProvisioningInfo(ManagementError provisioningInfo) {
        this.provisioningInfo = provisioningInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enabled", this.enabled);
        jsonWriter.writeJsonField("provisioningInfo", this.provisioningInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SensorIntegration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SensorIntegration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SensorIntegration.
     */
    public static SensorIntegration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SensorIntegration deserializedSensorIntegration = new SensorIntegration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedSensorIntegration.enabled = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSensorIntegration.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("provisioningInfo".equals(fieldName)) {
                    deserializedSensorIntegration.provisioningInfo = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSensorIntegration;
        });
    }
}
