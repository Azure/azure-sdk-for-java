// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.agrifood.fluent.models.SolutionInner;
import com.azure.resourcemanager.agrifood.models.Solution;
import com.azure.resourcemanager.agrifood.models.SolutionInstallationRequest;
import com.azure.resourcemanager.agrifood.models.SolutionProperties;

public final class SolutionImpl implements Solution, Solution.Definition, Solution.Update {
    private SolutionInner innerObject;

    private final com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SolutionProperties properties() {
        return this.innerModel().properties();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SolutionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.agrifood.AgriFoodManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String farmBeatsResourceName;

    private String solutionId;

    private SolutionInstallationRequest createBody;

    private SolutionInstallationRequest updateBody;

    public SolutionImpl withExistingFarmBeat(String resourceGroupName, String farmBeatsResourceName) {
        this.resourceGroupName = resourceGroupName;
        this.farmBeatsResourceName = farmBeatsResourceName;
        return this;
    }

    public Solution create() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutions()
            .createOrUpdateWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, createBody, Context.NONE)
            .getValue();
        return this;
    }

    public Solution create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutions()
            .createOrUpdateWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, createBody, context)
            .getValue();
        return this;
    }

    SolutionImpl(String name, com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager) {
        this.innerObject = new SolutionInner();
        this.serviceManager = serviceManager;
        this.solutionId = name;
        this.createBody = new SolutionInstallationRequest();
    }

    public SolutionImpl update() {
        this.updateBody = new SolutionInstallationRequest();
        return this;
    }

    public Solution apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutions()
            .createOrUpdateWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, updateBody, Context.NONE)
            .getValue();
        return this;
    }

    public Solution apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutions()
            .createOrUpdateWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, updateBody, context)
            .getValue();
        return this;
    }

    SolutionImpl(SolutionInner innerObject, com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.farmBeatsResourceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "farmBeats");
        this.solutionId = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "solutions");
    }

    public Solution refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutions()
            .getWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, Context.NONE)
            .getValue();
        return this;
    }

    public Solution refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutions()
            .getWithResponse(resourceGroupName, farmBeatsResourceName, solutionId, context)
            .getValue();
        return this;
    }

    public SolutionImpl withProperties(SolutionProperties properties) {
        if (isInCreateMode()) {
            this.createBody.withProperties(properties);
            return this;
        } else {
            this.updateBody.withProperties(properties);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
