// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * The Insight model.
 */
@Fluent
public final class Insight implements JsonSerializable<Insight> {
    /*
     * The farmerId property.
     */
    private String farmerId;

    /*
     * The modelId property.
     */
    private String modelId;

    /*
     * The resourceType property.
     */
    private String resourceType;

    /*
     * The resourceId property.
     */
    private String resourceId;

    /*
     * The modelVersion property.
     */
    private String modelVersion;

    /*
     * The insightStartDateTime property.
     */
    private OffsetDateTime insightStartDateTime;

    /*
     * The insightEndDateTime property.
     */
    private OffsetDateTime insightEndDateTime;

    /*
     * Dictionary of <Measure>
     */
    private Map<String, Measure> measures;

    /*
     * The id property.
     */
    private String id;

    /*
     * The status property.
     */
    private String status;

    /*
     * The createdDateTime property.
     */
    private OffsetDateTime createdDateTime;

    /*
     * The modifiedDateTime property.
     */
    private OffsetDateTime modifiedDateTime;

    /*
     * The eTag property.
     */
    private String etag;

    /*
     * The name property.
     */
    private String name;

    /*
     * The description property.
     */
    private String description;

    /*
     * Dictionary of <any>
     */
    private Map<String, Object> properties;

    /**
     * Creates an instance of Insight class.
     */
    public Insight() {
    }

    /**
     * Get the farmerId property: The farmerId property.
     * 
     * @return the farmerId value.
     */
    public String farmerId() {
        return this.farmerId;
    }

    /**
     * Set the farmerId property: The farmerId property.
     * 
     * @param farmerId the farmerId value to set.
     * @return the Insight object itself.
     */
    public Insight withFarmerId(String farmerId) {
        this.farmerId = farmerId;
        return this;
    }

    /**
     * Get the modelId property: The modelId property.
     * 
     * @return the modelId value.
     */
    public String modelId() {
        return this.modelId;
    }

    /**
     * Set the modelId property: The modelId property.
     * 
     * @param modelId the modelId value to set.
     * @return the Insight object itself.
     */
    public Insight withModelId(String modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * Get the resourceType property: The resourceType property.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The resourceType property.
     * 
     * @param resourceType the resourceType value to set.
     * @return the Insight object itself.
     */
    public Insight withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the resourceId property: The resourceId property.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resourceId property.
     * 
     * @param resourceId the resourceId value to set.
     * @return the Insight object itself.
     */
    public Insight withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the modelVersion property: The modelVersion property.
     * 
     * @return the modelVersion value.
     */
    public String modelVersion() {
        return this.modelVersion;
    }

    /**
     * Set the modelVersion property: The modelVersion property.
     * 
     * @param modelVersion the modelVersion value to set.
     * @return the Insight object itself.
     */
    public Insight withModelVersion(String modelVersion) {
        this.modelVersion = modelVersion;
        return this;
    }

    /**
     * Get the insightStartDateTime property: The insightStartDateTime property.
     * 
     * @return the insightStartDateTime value.
     */
    public OffsetDateTime insightStartDateTime() {
        return this.insightStartDateTime;
    }

    /**
     * Set the insightStartDateTime property: The insightStartDateTime property.
     * 
     * @param insightStartDateTime the insightStartDateTime value to set.
     * @return the Insight object itself.
     */
    public Insight withInsightStartDateTime(OffsetDateTime insightStartDateTime) {
        this.insightStartDateTime = insightStartDateTime;
        return this;
    }

    /**
     * Get the insightEndDateTime property: The insightEndDateTime property.
     * 
     * @return the insightEndDateTime value.
     */
    public OffsetDateTime insightEndDateTime() {
        return this.insightEndDateTime;
    }

    /**
     * Set the insightEndDateTime property: The insightEndDateTime property.
     * 
     * @param insightEndDateTime the insightEndDateTime value to set.
     * @return the Insight object itself.
     */
    public Insight withInsightEndDateTime(OffsetDateTime insightEndDateTime) {
        this.insightEndDateTime = insightEndDateTime;
        return this;
    }

    /**
     * Get the measures property: Dictionary of &lt;Measure&gt;.
     * 
     * @return the measures value.
     */
    public Map<String, Measure> measures() {
        return this.measures;
    }

    /**
     * Set the measures property: Dictionary of &lt;Measure&gt;.
     * 
     * @param measures the measures value to set.
     * @return the Insight object itself.
     */
    public Insight withMeasures(Map<String, Measure> measures) {
        this.measures = measures;
        return this;
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The id property.
     * 
     * @param id the id value to set.
     * @return the Insight object itself.
     */
    public Insight withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     * 
     * @param status the status value to set.
     * @return the Insight object itself.
     */
    public Insight withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the createdDateTime property: The createdDateTime property.
     * 
     * @return the createdDateTime value.
     */
    public OffsetDateTime createdDateTime() {
        return this.createdDateTime;
    }

    /**
     * Set the createdDateTime property: The createdDateTime property.
     * 
     * @param createdDateTime the createdDateTime value to set.
     * @return the Insight object itself.
     */
    public Insight withCreatedDateTime(OffsetDateTime createdDateTime) {
        this.createdDateTime = createdDateTime;
        return this;
    }

    /**
     * Get the modifiedDateTime property: The modifiedDateTime property.
     * 
     * @return the modifiedDateTime value.
     */
    public OffsetDateTime modifiedDateTime() {
        return this.modifiedDateTime;
    }

    /**
     * Set the modifiedDateTime property: The modifiedDateTime property.
     * 
     * @param modifiedDateTime the modifiedDateTime value to set.
     * @return the Insight object itself.
     */
    public Insight withModifiedDateTime(OffsetDateTime modifiedDateTime) {
        this.modifiedDateTime = modifiedDateTime;
        return this;
    }

    /**
     * Get the etag property: The eTag property.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: The eTag property.
     * 
     * @param etag the etag value to set.
     * @return the Insight object itself.
     */
    public Insight withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name property.
     * 
     * @param name the name value to set.
     * @return the Insight object itself.
     */
    public Insight withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: The description property.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description property.
     * 
     * @param description the description value to set.
     * @return the Insight object itself.
     */
    public Insight withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the properties property: Dictionary of &lt;any&gt;.
     * 
     * @return the properties value.
     */
    public Map<String, Object> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Dictionary of &lt;any&gt;.
     * 
     * @param properties the properties value to set.
     * @return the Insight object itself.
     */
    public Insight withProperties(Map<String, Object> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (measures() != null) {
            measures().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("farmerId", this.farmerId);
        jsonWriter.writeStringField("modelId", this.modelId);
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("modelVersion", this.modelVersion);
        jsonWriter.writeStringField("insightStartDateTime",
            this.insightStartDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.insightStartDateTime));
        jsonWriter.writeStringField("insightEndDateTime",
            this.insightEndDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.insightEndDateTime));
        jsonWriter.writeMapField("measures", this.measures, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("createdDateTime",
            this.createdDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdDateTime));
        jsonWriter.writeStringField("modifiedDateTime",
            this.modifiedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.modifiedDateTime));
        jsonWriter.writeStringField("eTag", this.etag);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Insight from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Insight if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Insight.
     */
    public static Insight fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Insight deserializedInsight = new Insight();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("farmerId".equals(fieldName)) {
                    deserializedInsight.farmerId = reader.getString();
                } else if ("modelId".equals(fieldName)) {
                    deserializedInsight.modelId = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedInsight.resourceType = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedInsight.resourceId = reader.getString();
                } else if ("modelVersion".equals(fieldName)) {
                    deserializedInsight.modelVersion = reader.getString();
                } else if ("insightStartDateTime".equals(fieldName)) {
                    deserializedInsight.insightStartDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("insightEndDateTime".equals(fieldName)) {
                    deserializedInsight.insightEndDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("measures".equals(fieldName)) {
                    Map<String, Measure> measures = reader.readMap(reader1 -> Measure.fromJson(reader1));
                    deserializedInsight.measures = measures;
                } else if ("id".equals(fieldName)) {
                    deserializedInsight.id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedInsight.status = reader.getString();
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedInsight.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("modifiedDateTime".equals(fieldName)) {
                    deserializedInsight.modifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("eTag".equals(fieldName)) {
                    deserializedInsight.etag = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedInsight.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedInsight.description = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedInsight.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInsight;
        });
    }
}
