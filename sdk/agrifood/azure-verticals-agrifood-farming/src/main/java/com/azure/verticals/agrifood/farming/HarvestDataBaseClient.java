// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.experimental.http.DynamicRequest;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.util.serializer.ObjectSerializer;

/** Initializes a new instance of the HarvestDataBaseClient type. */
@ServiceClient(builder = FarmBeatsClientBuilder.class)
public final class HarvestDataBaseClient {
    private final String endpoint;

    private final String apiVersion;

    private final HttpPipeline httpPipeline;

    private final ObjectSerializer serializer;

    /**
     * Initializes an instance of HarvestDataBaseClient client.
     *
     * @param endpoint The endpoint of your FarmBeats resource (protocol and hostname, for example:
     *     https://{resourceName}.farmbeats.azure.net).
     * @param apiVersion Api Version.
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializer The serializer to serialize an object into a string.
     */
    HarvestDataBaseClient(String endpoint, String apiVersion, HttpPipeline httpPipeline, ObjectSerializer serializer) {
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.httpPipeline = httpPipeline;
        this.serializer = serializer;
    }

    /**
     * Returns a paginated list of harvest data resources under a particular farm.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>minTotalYield</td><td>Double</td><td>Minimum Yield value(inclusive).</td></tr>
     *     <tr><td>maxTotalYield</td><td>Double</td><td>Maximum Yield value (inclusive).</td></tr>
     *     <tr><td>minAvgYield</td><td>Double</td><td>Minimum AvgYield value(inclusive).</td></tr>
     *     <tr><td>maxAvgYield</td><td>Double</td><td>Maximum AvgYield value (inclusive).</td></tr>
     *     <tr><td>minTotalWetMass</td><td>Double</td><td>Minimum Total WetMass value(inclusive).</td></tr>
     *     <tr><td>maxTotalWetMass</td><td>Double</td><td>Maximum Total WetMass value (inclusive).</td></tr>
     *     <tr><td>minAvgWetMass</td><td>Double</td><td>Minimum AvgWetMass value(inclusive).</td></tr>
     *     <tr><td>maxAvgWetMass</td><td>Double</td><td>Maximum AvgWetMass value (inclusive).</td></tr>
     *     <tr><td>minAvgMoisture</td><td>Double</td><td>Minimum AvgMoisture value(inclusive).</td></tr>
     *     <tr><td>maxAvgMoisture</td><td>Double</td><td>Maximum AvgMoisture value (inclusive).</td></tr>
     *     <tr><td>minAvgSpeed</td><td>Double</td><td>Minimum AvgSpeed value(inclusive).</td></tr>
     *     <tr><td>maxAvgSpeed</td><td>Double</td><td>Maximum AvgSpeed value (inclusive).</td></tr>
     *     <tr><td>sources</td><td>List&lt;String&gt;</td><td>Sources of the operation data.</td></tr>
     *     <tr><td>associatedBoundaryIds</td><td>List&lt;String&gt;</td><td>Boundary IDs associated with operation data.</td></tr>
     *     <tr><td>operationBoundaryIds</td><td>List&lt;String&gt;</td><td>Operation boundary IDs associated with operation data.</td></tr>
     *     <tr><td>minOperationStartDateTime</td><td>OffsetDateTime</td><td>Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>maxOperationStartDateTime</td><td>OffsetDateTime</td><td>Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>minOperationEndDateTime</td><td>OffsetDateTime</td><td>Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>maxOperationEndDateTime</td><td>OffsetDateTime</td><td>Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>minOperationModifiedDateTime</td><td>OffsetDateTime</td><td>Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>maxOperationModifiedDateTime</td><td>OffsetDateTime</td><td>Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>minArea</td><td>Double</td><td>Minimum area for which operation was applied (inclusive).</td></tr>
     *     <tr><td>maxArea</td><td>Double</td><td>Maximum area for which operation was applied (inclusive).</td></tr>
     *     <tr><td>ids</td><td>List&lt;String&gt;</td><td>Ids of the resource.</td></tr>
     *     <tr><td>names</td><td>List&lt;String&gt;</td><td>Names of the resource.</td></tr>
     *     <tr><td>propertyFilters</td><td>List&lt;String&gt;</td><td>Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".</td></tr>
     *     <tr><td>statuses</td><td>List&lt;String&gt;</td><td>Statuses of the resource.</td></tr>
     *     <tr><td>minCreatedDateTime</td><td>OffsetDateTime</td><td>Minimum creation date of resource (inclusive).</td></tr>
     *     <tr><td>maxCreatedDateTime</td><td>OffsetDateTime</td><td>Maximum creation date of resource (inclusive).</td></tr>
     *     <tr><td>minLastModifiedDateTime</td><td>OffsetDateTime</td><td>Minimum last modified date of resource (inclusive).</td></tr>
     *     <tr><td>maxLastModifiedDateTime</td><td>OffsetDateTime</td><td>Maximum last modified date of resource (inclusive).</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             totalYield: {
     *                 unit: String
     *                 value: Double
     *             }
     *             avgYield: (recursive schema, see avgYield above)
     *             totalWetMass: (recursive schema, see totalWetMass above)
     *             avgWetMass: (recursive schema, see avgWetMass above)
     *             avgMoisture: (recursive schema, see avgMoisture above)
     *             avgSpeed: (recursive schema, see avgSpeed above)
     *             harvestProductDetails: [
     *                 {
     *                     productName: String
     *                     area: (recursive schema, see area above)
     *                     totalYield: (recursive schema, see totalYield above)
     *                     avgYield: (recursive schema, see avgYield above)
     *                     avgMoisture: (recursive schema, see avgMoisture above)
     *                     totalWetMass: (recursive schema, see totalWetMass above)
     *                     avgWetMass: (recursive schema, see avgWetMass above)
     *                 }
     *             ]
     *             area: (recursive schema, see area above)
     *             source: String
     *             operationModifiedDateTime: OffsetDateTime
     *             operationStartDateTime: OffsetDateTime
     *             operationEndDateTime: OffsetDateTime
     *             attachmentsLink: String
     *             associatedBoundaryId: String
     *             operationBoundaryId: String
     *             farmerId: String
     *             id: String
     *             eTag: String
     *             status: String
     *             createdDateTime: OffsetDateTime
     *             modifiedDateTime: OffsetDateTime
     *             name: String
     *             description: String
     *             properties: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     skipToken: String
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param farmerId ID of the associated farmer.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listByFarmerId(String farmerId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/farmers/{farmerId}/harvest-data")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("farmerId", farmerId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Returns a paginated list of harvest data resources across all farmers.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>minTotalYield</td><td>Double</td><td>Minimum Yield value(inclusive).</td></tr>
     *     <tr><td>maxTotalYield</td><td>Double</td><td>Maximum Yield value (inclusive).</td></tr>
     *     <tr><td>minAvgYield</td><td>Double</td><td>Minimum AvgYield value(inclusive).</td></tr>
     *     <tr><td>maxAvgYield</td><td>Double</td><td>Maximum AvgYield value (inclusive).</td></tr>
     *     <tr><td>minTotalWetMass</td><td>Double</td><td>Minimum Total WetMass value(inclusive).</td></tr>
     *     <tr><td>maxTotalWetMass</td><td>Double</td><td>Maximum Total WetMass value (inclusive).</td></tr>
     *     <tr><td>minAvgWetMass</td><td>Double</td><td>Minimum AvgWetMass value(inclusive).</td></tr>
     *     <tr><td>maxAvgWetMass</td><td>Double</td><td>Maximum AvgWetMass value (inclusive).</td></tr>
     *     <tr><td>minAvgMoisture</td><td>Double</td><td>Minimum AvgMoisture value(inclusive).</td></tr>
     *     <tr><td>maxAvgMoisture</td><td>Double</td><td>Maximum AvgMoisture value (inclusive).</td></tr>
     *     <tr><td>minAvgSpeed</td><td>Double</td><td>Minimum AvgSpeed value(inclusive).</td></tr>
     *     <tr><td>maxAvgSpeed</td><td>Double</td><td>Maximum AvgSpeed value (inclusive).</td></tr>
     *     <tr><td>sources</td><td>List&lt;String&gt;</td><td>Sources of the operation data.</td></tr>
     *     <tr><td>associatedBoundaryIds</td><td>List&lt;String&gt;</td><td>Boundary IDs associated with operation data.</td></tr>
     *     <tr><td>operationBoundaryIds</td><td>List&lt;String&gt;</td><td>Operation boundary IDs associated with operation data.</td></tr>
     *     <tr><td>minOperationStartDateTime</td><td>OffsetDateTime</td><td>Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>maxOperationStartDateTime</td><td>OffsetDateTime</td><td>Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>minOperationEndDateTime</td><td>OffsetDateTime</td><td>Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>maxOperationEndDateTime</td><td>OffsetDateTime</td><td>Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>minOperationModifiedDateTime</td><td>OffsetDateTime</td><td>Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>maxOperationModifiedDateTime</td><td>OffsetDateTime</td><td>Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).</td></tr>
     *     <tr><td>minArea</td><td>Double</td><td>Minimum area for which operation was applied (inclusive).</td></tr>
     *     <tr><td>maxArea</td><td>Double</td><td>Maximum area for which operation was applied (inclusive).</td></tr>
     *     <tr><td>ids</td><td>List&lt;String&gt;</td><td>Ids of the resource.</td></tr>
     *     <tr><td>names</td><td>List&lt;String&gt;</td><td>Names of the resource.</td></tr>
     *     <tr><td>propertyFilters</td><td>List&lt;String&gt;</td><td>Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".</td></tr>
     *     <tr><td>statuses</td><td>List&lt;String&gt;</td><td>Statuses of the resource.</td></tr>
     *     <tr><td>minCreatedDateTime</td><td>OffsetDateTime</td><td>Minimum creation date of resource (inclusive).</td></tr>
     *     <tr><td>maxCreatedDateTime</td><td>OffsetDateTime</td><td>Maximum creation date of resource (inclusive).</td></tr>
     *     <tr><td>minLastModifiedDateTime</td><td>OffsetDateTime</td><td>Minimum last modified date of resource (inclusive).</td></tr>
     *     <tr><td>maxLastModifiedDateTime</td><td>OffsetDateTime</td><td>Maximum last modified date of resource (inclusive).</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             totalYield: {
     *                 unit: String
     *                 value: Double
     *             }
     *             avgYield: (recursive schema, see avgYield above)
     *             totalWetMass: (recursive schema, see totalWetMass above)
     *             avgWetMass: (recursive schema, see avgWetMass above)
     *             avgMoisture: (recursive schema, see avgMoisture above)
     *             avgSpeed: (recursive schema, see avgSpeed above)
     *             harvestProductDetails: [
     *                 {
     *                     productName: String
     *                     area: (recursive schema, see area above)
     *                     totalYield: (recursive schema, see totalYield above)
     *                     avgYield: (recursive schema, see avgYield above)
     *                     avgMoisture: (recursive schema, see avgMoisture above)
     *                     totalWetMass: (recursive schema, see totalWetMass above)
     *                     avgWetMass: (recursive schema, see avgWetMass above)
     *                 }
     *             ]
     *             area: (recursive schema, see area above)
     *             source: String
     *             operationModifiedDateTime: OffsetDateTime
     *             operationStartDateTime: OffsetDateTime
     *             operationEndDateTime: OffsetDateTime
     *             attachmentsLink: String
     *             associatedBoundaryId: String
     *             operationBoundaryId: String
     *             farmerId: String
     *             id: String
     *             eTag: String
     *             status: String
     *             createdDateTime: OffsetDateTime
     *             modifiedDateTime: OffsetDateTime
     *             name: String
     *             description: String
     *             properties: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     skipToken: String
     *     nextLink: String
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest list() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/harvest-data")
                .setPathParam("Endpoint", endpoint)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get a specified harvest data resource under a particular farmer.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalYield: {
     *         unit: String
     *         value: Double
     *     }
     *     avgYield: (recursive schema, see avgYield above)
     *     totalWetMass: (recursive schema, see totalWetMass above)
     *     avgWetMass: (recursive schema, see avgWetMass above)
     *     avgMoisture: (recursive schema, see avgMoisture above)
     *     avgSpeed: (recursive schema, see avgSpeed above)
     *     harvestProductDetails: [
     *         {
     *             productName: String
     *             area: (recursive schema, see area above)
     *             totalYield: (recursive schema, see totalYield above)
     *             avgYield: (recursive schema, see avgYield above)
     *             avgMoisture: (recursive schema, see avgMoisture above)
     *             totalWetMass: (recursive schema, see totalWetMass above)
     *             avgWetMass: (recursive schema, see avgWetMass above)
     *         }
     *     ]
     *     area: (recursive schema, see area above)
     *     source: String
     *     operationModifiedDateTime: OffsetDateTime
     *     operationStartDateTime: OffsetDateTime
     *     operationEndDateTime: OffsetDateTime
     *     attachmentsLink: String
     *     associatedBoundaryId: String
     *     operationBoundaryId: String
     *     farmerId: String
     *     id: String
     *     eTag: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     *
     * @param farmerId ID of the associated farmer resource.
     * @param harvestDataId ID of the harvest data resource.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest get(String farmerId, String harvestDataId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/farmers/{farmerId}/harvest-data/{harvestDataId}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("farmerId", farmerId)
                .setPathParam("harvestDataId", harvestDataId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Creates or updates harvest data resource under a particular farmer.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalYield: {
     *         unit: String
     *         value: Double
     *     }
     *     avgYield: (recursive schema, see avgYield above)
     *     totalWetMass: (recursive schema, see totalWetMass above)
     *     avgWetMass: (recursive schema, see avgWetMass above)
     *     avgMoisture: (recursive schema, see avgMoisture above)
     *     avgSpeed: (recursive schema, see avgSpeed above)
     *     harvestProductDetails: [
     *         {
     *             productName: String
     *             area: (recursive schema, see area above)
     *             totalYield: (recursive schema, see totalYield above)
     *             avgYield: (recursive schema, see avgYield above)
     *             avgMoisture: (recursive schema, see avgMoisture above)
     *             totalWetMass: (recursive schema, see totalWetMass above)
     *             avgWetMass: (recursive schema, see avgWetMass above)
     *         }
     *     ]
     *     area: (recursive schema, see area above)
     *     source: String
     *     operationModifiedDateTime: OffsetDateTime
     *     operationStartDateTime: OffsetDateTime
     *     operationEndDateTime: OffsetDateTime
     *     attachmentsLink: String
     *     associatedBoundaryId: String
     *     operationBoundaryId: String
     *     farmerId: String
     *     id: String
     *     eTag: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param farmerId ID of the farmer.
     * @param harvestDataId ID of the harvest data resource.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest createOrUpdate(String farmerId, String harvestDataId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/farmers/{farmerId}/harvest-data/{harvestDataId}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("farmerId", farmerId)
                .setPathParam("harvestDataId", harvestDataId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/merge-patch+json")
                .setHttpMethod(HttpMethod.PATCH);
    }

    /**
     * Deletes a specified harvest data resource under a particular farmer.
     *
     * @param farmerId ID of the associated farmer resource.
     * @param harvestDataId ID of the harvest data.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest delete(String farmerId, String harvestDataId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/farmers/{farmerId}/harvest-data/{harvestDataId}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("farmerId", farmerId)
                .setPathParam("harvestDataId", harvestDataId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.DELETE);
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             totalYield: {
     *                 unit: String
     *                 value: Double
     *             }
     *             avgYield: (recursive schema, see avgYield above)
     *             totalWetMass: (recursive schema, see totalWetMass above)
     *             avgWetMass: (recursive schema, see avgWetMass above)
     *             avgMoisture: (recursive schema, see avgMoisture above)
     *             avgSpeed: (recursive schema, see avgSpeed above)
     *             harvestProductDetails: [
     *                 {
     *                     productName: String
     *                     area: (recursive schema, see area above)
     *                     totalYield: (recursive schema, see totalYield above)
     *                     avgYield: (recursive schema, see avgYield above)
     *                     avgMoisture: (recursive schema, see avgMoisture above)
     *                     totalWetMass: (recursive schema, see totalWetMass above)
     *                     avgWetMass: (recursive schema, see avgWetMass above)
     *                 }
     *             ]
     *             area: (recursive schema, see area above)
     *             source: String
     *             operationModifiedDateTime: OffsetDateTime
     *             operationStartDateTime: OffsetDateTime
     *             operationEndDateTime: OffsetDateTime
     *             attachmentsLink: String
     *             associatedBoundaryId: String
     *             operationBoundaryId: String
     *             farmerId: String
     *             id: String
     *             eTag: String
     *             status: String
     *             createdDateTime: OffsetDateTime
     *             modifiedDateTime: OffsetDateTime
     *             name: String
     *             description: String
     *             properties: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     skipToken: String
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listByFarmerIdNext(String nextLink) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/{nextLink}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("nextLink", nextLink)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             totalYield: {
     *                 unit: String
     *                 value: Double
     *             }
     *             avgYield: (recursive schema, see avgYield above)
     *             totalWetMass: (recursive schema, see totalWetMass above)
     *             avgWetMass: (recursive schema, see avgWetMass above)
     *             avgMoisture: (recursive schema, see avgMoisture above)
     *             avgSpeed: (recursive schema, see avgSpeed above)
     *             harvestProductDetails: [
     *                 {
     *                     productName: String
     *                     area: (recursive schema, see area above)
     *                     totalYield: (recursive schema, see totalYield above)
     *                     avgYield: (recursive schema, see avgYield above)
     *                     avgMoisture: (recursive schema, see avgMoisture above)
     *                     totalWetMass: (recursive schema, see totalWetMass above)
     *                     avgWetMass: (recursive schema, see avgWetMass above)
     *                 }
     *             ]
     *             area: (recursive schema, see area above)
     *             source: String
     *             operationModifiedDateTime: OffsetDateTime
     *             operationStartDateTime: OffsetDateTime
     *             operationEndDateTime: OffsetDateTime
     *             attachmentsLink: String
     *             associatedBoundaryId: String
     *             operationBoundaryId: String
     *             farmerId: String
     *             id: String
     *             eTag: String
     *             status: String
     *             createdDateTime: OffsetDateTime
     *             modifiedDateTime: OffsetDateTime
     *             name: String
     *             description: String
     *             properties: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     skipToken: String
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listNext(String nextLink) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/{nextLink}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("nextLink", nextLink)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest invoke() {
        return new DynamicRequest(serializer, httpPipeline);
    }
}
