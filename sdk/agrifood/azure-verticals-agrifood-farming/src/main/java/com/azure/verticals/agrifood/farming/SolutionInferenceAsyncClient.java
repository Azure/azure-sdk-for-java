// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.PollerFlux;
import com.azure.verticals.agrifood.farming.implementation.SolutionInferencesImpl;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous FarmBeatsClient type. */
@ServiceClient(builder = SolutionInferenceClientBuilder.class, isAsync = true)
public final class SolutionInferenceAsyncClient {
    @Generated private final SolutionInferencesImpl serviceClient;

    /**
     * Initializes an instance of SolutionInferenceAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    SolutionInferenceAsyncClient(SolutionInferencesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Cancels a job for given solution id.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     requestPath: String (Required)
     *     partnerRequestBody (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     *
     * @param solutionId Id of solution for which job is to be cancelled.
     * @param solutionInferenceRequest solutionInferenceRequest containing input needed for job request processing.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dictionary of &lt;any&gt; along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelWithResponse(
            String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions) {
        return this.serviceClient.cancelWithResponseAsync(solutionId, solutionInferenceRequest, requestOptions);
    }

    /**
     * Creates a job trigger for a solution.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     requestPath: String (Required)
     *     partnerRequestBody (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     *
     * @param solutionId Id of the solution resource.
     * @param solutionInferenceRequest solutionInferenceRequest containing input needed for job request processing.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of dictionary of &lt;any&gt;.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateOrUpdate(
            String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrUpdateAsync(solutionId, solutionInferenceRequest, requestOptions);
    }

    /**
     * Fetches details of triggered job for a solution.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     requestPath: String (Required)
     *     partnerRequestBody (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     *
     * @param solutionId Id of the solution.
     * @param solutionInferenceRequest solutionInferenceRequest containing input needed for job request processing.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dictionary of &lt;any&gt; along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> fetchWithResponse(
            String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions) {
        return this.serviceClient.fetchWithResponseAsync(solutionId, solutionInferenceRequest, requestOptions);
    }
}
