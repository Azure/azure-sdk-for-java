// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Scenes. */
public final class ScenesImpl {
    /** The proxy service used to perform REST calls. */
    private final ScenesService service;

    /** The service client containing this operation class. */
    private final FarmBeatsClientImpl client;

    /**
     * Initializes an instance of ScenesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ScenesImpl(FarmBeatsClientImpl client) {
        this.service = RestProxy.create(ScenesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for FarmBeatsClientScenes to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "FarmBeatsClientScene")
    public interface ScenesService {
        @Get("/scenes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(
                @HostParam("endpoint") String endpoint,
                @QueryParam("provider") String provider,
                @QueryParam("partyId") String partyId,
                @QueryParam("boundaryId") String boundaryId,
                @QueryParam("source") String source,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/scenes/downloadFiles")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> download(
                @HostParam("endpoint") String endpoint,
                @QueryParam("filePath") String filePath,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/scenes/satellite/ingest-data/{jobId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createSatelliteDataIngestionJob(
                @HostParam("endpoint") String endpoint,
                @PathParam("jobId") String jobId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData job,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/scenes/satellite/ingest-data/{jobId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSatelliteDataIngestionJobDetails(
                @HostParam("endpoint") String endpoint,
                @PathParam("jobId") String jobId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/scenes/stac-collections/{collectionId}:search")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> searchFeatures(
                @HostParam("endpoint") String endpoint,
                @PathParam("collectionId") String collectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData searchFeaturesQuery,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/scenes/stac-collections/{collectionId}/features/{featureId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getStacFeature(
                @HostParam("endpoint") String endpoint,
                @PathParam("collectionId") String collectionId,
                @PathParam("featureId") String featureId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Returns a paginated list of scene resources.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>startDateTime</td><td>OffsetDateTime</td><td>No</td><td>Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ.</td></tr>
     *     <tr><td>endDateTime</td><td>OffsetDateTime</td><td>No</td><td>Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ.</td></tr>
     *     <tr><td>maxCloudCoveragePercentage</td><td>Double</td><td>No</td><td>Filter scenes with cloud coverage percentage less than max value. Range [0 to 100.0].</td></tr>
     *     <tr><td>maxDarkPixelCoveragePercentage</td><td>Double</td><td>No</td><td>Filter scenes with dark pixel coverage percentage less than max value. Range [0 to 100.0].</td></tr>
     *     <tr><td>imageNames</td><td>List&lt;String&gt;</td><td>No</td><td>List of image names to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>imageResolutions</td><td>List&lt;Double&gt;</td><td>No</td><td>List of image resolutions in meters to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>imageFormats</td><td>List&lt;String&gt;</td><td>No</td><td>List of image formats to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sceneDateTime: OffsetDateTime (Optional)
     *     provider: String (Optional)
     *     source: String (Optional)
     *     imageFiles (Optional): [
     *          (Optional){
     *             fileLink: String (Optional)
     *             name: String (Required)
     *             imageFormat: String(TIF) (Optional)
     *             resolution: Double (Optional)
     *         }
     *     ]
     *     imageFormat: String(TIF) (Optional)
     *     cloudCoverPercentage: Double (Optional)
     *     darkPixelPercentage: Double (Optional)
     *     ndviMedianValue: Double (Optional)
     *     boundaryId: String (Optional)
     *     partyId: String (Optional)
     *     id: String (Optional)
     *     eTag: String (Optional)
     * }
     * }</pre>
     *
     * @param provider Provider name of scene data.
     * @param partyId PartyId.
     * @param boundaryId BoundaryId.
     * @param source Source name of scene data, Available Values: Sentinel_2_L2A, Sentinel_2_L1C.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     *     with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSinglePageAsync(
            String provider, String partyId, String boundaryId, String source, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.list(
                                        this.client.getEndpoint(),
                                        provider,
                                        partyId,
                                        boundaryId,
                                        source,
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Returns a paginated list of scene resources.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>startDateTime</td><td>OffsetDateTime</td><td>No</td><td>Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ.</td></tr>
     *     <tr><td>endDateTime</td><td>OffsetDateTime</td><td>No</td><td>Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ.</td></tr>
     *     <tr><td>maxCloudCoveragePercentage</td><td>Double</td><td>No</td><td>Filter scenes with cloud coverage percentage less than max value. Range [0 to 100.0].</td></tr>
     *     <tr><td>maxDarkPixelCoveragePercentage</td><td>Double</td><td>No</td><td>Filter scenes with dark pixel coverage percentage less than max value. Range [0 to 100.0].</td></tr>
     *     <tr><td>imageNames</td><td>List&lt;String&gt;</td><td>No</td><td>List of image names to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>imageResolutions</td><td>List&lt;Double&gt;</td><td>No</td><td>List of image resolutions in meters to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>imageFormats</td><td>List&lt;String&gt;</td><td>No</td><td>List of image formats to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sceneDateTime: OffsetDateTime (Optional)
     *     provider: String (Optional)
     *     source: String (Optional)
     *     imageFiles (Optional): [
     *          (Optional){
     *             fileLink: String (Optional)
     *             name: String (Required)
     *             imageFormat: String(TIF) (Optional)
     *             resolution: Double (Optional)
     *         }
     *     ]
     *     imageFormat: String(TIF) (Optional)
     *     cloudCoverPercentage: Double (Optional)
     *     darkPixelPercentage: Double (Optional)
     *     ndviMedianValue: Double (Optional)
     *     boundaryId: String (Optional)
     *     partyId: String (Optional)
     *     id: String (Optional)
     *     eTag: String (Optional)
     * }
     * }</pre>
     *
     * @param provider Provider name of scene data.
     * @param partyId PartyId.
     * @param boundaryId BoundaryId.
     * @param source Source name of scene data, Available Values: Sentinel_2_L2A, Sentinel_2_L1C.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAsync(
            String provider, String partyId, String boundaryId, String source, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listSinglePageAsync(provider, partyId, boundaryId, source, requestOptions),
                nextLink -> listNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Returns a paginated list of scene resources.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>startDateTime</td><td>OffsetDateTime</td><td>No</td><td>Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ.</td></tr>
     *     <tr><td>endDateTime</td><td>OffsetDateTime</td><td>No</td><td>Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ.</td></tr>
     *     <tr><td>maxCloudCoveragePercentage</td><td>Double</td><td>No</td><td>Filter scenes with cloud coverage percentage less than max value. Range [0 to 100.0].</td></tr>
     *     <tr><td>maxDarkPixelCoveragePercentage</td><td>Double</td><td>No</td><td>Filter scenes with dark pixel coverage percentage less than max value. Range [0 to 100.0].</td></tr>
     *     <tr><td>imageNames</td><td>List&lt;String&gt;</td><td>No</td><td>List of image names to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>imageResolutions</td><td>List&lt;Double&gt;</td><td>No</td><td>List of image resolutions in meters to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>imageFormats</td><td>List&lt;String&gt;</td><td>No</td><td>List of image formats to be filtered. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sceneDateTime: OffsetDateTime (Optional)
     *     provider: String (Optional)
     *     source: String (Optional)
     *     imageFiles (Optional): [
     *          (Optional){
     *             fileLink: String (Optional)
     *             name: String (Required)
     *             imageFormat: String(TIF) (Optional)
     *             resolution: Double (Optional)
     *         }
     *     ]
     *     imageFormat: String(TIF) (Optional)
     *     cloudCoverPercentage: Double (Optional)
     *     darkPixelPercentage: Double (Optional)
     *     ndviMedianValue: Double (Optional)
     *     boundaryId: String (Optional)
     *     partyId: String (Optional)
     *     id: String (Optional)
     *     eTag: String (Optional)
     * }
     * }</pre>
     *
     * @param provider Provider name of scene data.
     * @param partyId PartyId.
     * @param boundaryId BoundaryId.
     * @param source Source name of scene data, Available Values: Sentinel_2_L2A, Sentinel_2_L1C.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(
            String provider, String partyId, String boundaryId, String source, RequestOptions requestOptions) {
        return new PagedIterable<>(listAsync(provider, partyId, boundaryId, source, requestOptions));
    }

    /**
     * Downloads and returns file Stream as response for the given input filePath.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param filePath cloud storage path of scene file.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> downloadWithResponseAsync(String filePath, RequestOptions requestOptions) {
        final String accept = "application/json, application/octet-stream";
        return FluxUtil.withContext(
                context ->
                        service.download(
                                this.client.getEndpoint(),
                                filePath,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Downloads and returns file Stream as response for the given input filePath.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param filePath cloud storage path of scene file.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadWithResponse(String filePath, RequestOptions requestOptions) {
        return downloadWithResponseAsync(filePath, requestOptions).block();
    }

    /**
     * Create a satellite data ingestion job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partyId: String (Required)
     *     boundaryId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     provider: String(Microsoft) (Optional)
     *     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)
     *     data (Optional): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Optional)
     *     status: String (Optional)
     *     durationInSeconds: Double (Optional)
     *     message: String (Optional)
     *     errorCode: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partyId: String (Required)
     *     boundaryId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     provider: String(Microsoft) (Optional)
     *     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)
     *     data (Optional): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Optional)
     *     status: String (Optional)
     *     durationInSeconds: Double (Optional)
     *     message: String (Optional)
     *     errorCode: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param jobId JobId provided by user.
     * @param job Job parameters supplied by user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return schema of satellite data ingestion job along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> createSatelliteDataIngestionJobWithResponseAsync(
            String jobId, BinaryData job, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createSatelliteDataIngestionJob(
                                this.client.getEndpoint(),
                                jobId,
                                this.client.getServiceVersion().getVersion(),
                                job,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Create a satellite data ingestion job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partyId: String (Required)
     *     boundaryId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     provider: String(Microsoft) (Optional)
     *     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)
     *     data (Optional): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Optional)
     *     status: String (Optional)
     *     durationInSeconds: Double (Optional)
     *     message: String (Optional)
     *     errorCode: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partyId: String (Required)
     *     boundaryId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     provider: String(Microsoft) (Optional)
     *     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)
     *     data (Optional): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Optional)
     *     status: String (Optional)
     *     durationInSeconds: Double (Optional)
     *     message: String (Optional)
     *     errorCode: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param jobId JobId provided by user.
     * @param job Job parameters supplied by user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of schema of satellite data ingestion job.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateSatelliteDataIngestionJobAsync(
            String jobId, BinaryData job, RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.createSatelliteDataIngestionJobWithResponseAsync(jobId, job, requestOptions),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        "{endpoint}".replace("{endpoint}", this.client.getEndpoint()),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                TypeReference.createInstance(BinaryData.class),
                TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Create a satellite data ingestion job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partyId: String (Required)
     *     boundaryId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     provider: String(Microsoft) (Optional)
     *     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)
     *     data (Optional): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Optional)
     *     status: String (Optional)
     *     durationInSeconds: Double (Optional)
     *     message: String (Optional)
     *     errorCode: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partyId: String (Required)
     *     boundaryId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     provider: String(Microsoft) (Optional)
     *     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)
     *     data (Optional): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Optional)
     *     status: String (Optional)
     *     durationInSeconds: Double (Optional)
     *     message: String (Optional)
     *     errorCode: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param jobId JobId provided by user.
     * @param job Job parameters supplied by user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of schema of satellite data ingestion job.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateSatelliteDataIngestionJob(
            String jobId, BinaryData job, RequestOptions requestOptions) {
        return this.beginCreateSatelliteDataIngestionJobAsync(jobId, job, requestOptions).getSyncPoller();
    }

    /**
     * Get a satellite data ingestion job.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partyId: String (Required)
     *     boundaryId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     provider: String(Microsoft) (Optional)
     *     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)
     *     data (Optional): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Optional)
     *     status: String (Optional)
     *     durationInSeconds: Double (Optional)
     *     message: String (Optional)
     *     errorCode: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a satellite data ingestion job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSatelliteDataIngestionJobDetailsWithResponseAsync(
            String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getSatelliteDataIngestionJobDetails(
                                this.client.getEndpoint(),
                                jobId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get a satellite data ingestion job.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partyId: String (Required)
     *     boundaryId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     provider: String(Microsoft) (Optional)
     *     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)
     *     data (Optional): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     id: String (Optional)
     *     status: String (Optional)
     *     durationInSeconds: Double (Optional)
     *     message: String (Optional)
     *     errorCode: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a satellite data ingestion job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSatelliteDataIngestionJobDetailsWithResponse(
            String jobId, RequestOptions requestOptions) {
        return getSatelliteDataIngestionJobDetailsWithResponseAsync(jobId, requestOptions).block();
    }

    /**
     * Search for STAC features by collection id, bbox, intersecting geometry, start and end datetime.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of features needed (inclusive). Minimum = 1, Maximum = 100, Default value = 10.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     intersects (Optional): {
     *     }
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     featureIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     features (Required): [
     *          (Required){
     *             stacVersion: String (Required)
     *             stacExtensions (Optional): [
     *                 String (Optional)
     *             ]
     *             id: String (Required)
     *             type: String (Required)
     *             geometry: Object (Optional)
     *             bbox (Optional): [
     *                 double (Optional)
     *             ]
     *             properties: Object (Required)
     *             links (Required): [
     *                  (Required){
     *                     href: String (Required)
     *                     rel: String (Required)
     *                     type: String (Optional)
     *                     title: String (Optional)
     *                 }
     *             ]
     *             assets (Required): {
     *                 String (Required): {
     *                     href: String (Required)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             collection: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param collectionId Collection Id to be searched. Allowed values: "Sentinel_2_L2A", "Sentinel_2_L1C".
     * @param searchFeaturesQuery Query filters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of features and next property to get the next set of results along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchFeaturesWithResponseAsync(
            String collectionId, BinaryData searchFeaturesQuery, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.searchFeatures(
                                this.client.getEndpoint(),
                                collectionId,
                                this.client.getServiceVersion().getVersion(),
                                searchFeaturesQuery,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Search for STAC features by collection id, bbox, intersecting geometry, start and end datetime.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of features needed (inclusive). Minimum = 1, Maximum = 100, Default value = 10.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     startDateTime: OffsetDateTime (Required)
     *     endDateTime: OffsetDateTime (Required)
     *     intersects (Optional): {
     *     }
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     featureIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     features (Required): [
     *          (Required){
     *             stacVersion: String (Required)
     *             stacExtensions (Optional): [
     *                 String (Optional)
     *             ]
     *             id: String (Required)
     *             type: String (Required)
     *             geometry: Object (Optional)
     *             bbox (Optional): [
     *                 double (Optional)
     *             ]
     *             properties: Object (Required)
     *             links (Required): [
     *                  (Required){
     *                     href: String (Required)
     *                     rel: String (Required)
     *                     type: String (Optional)
     *                     title: String (Optional)
     *                 }
     *             ]
     *             assets (Required): {
     *                 String (Required): {
     *                     href: String (Required)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             collection: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param collectionId Collection Id to be searched. Allowed values: "Sentinel_2_L2A", "Sentinel_2_L1C".
     * @param searchFeaturesQuery Query filters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of features and next property to get the next set of results along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> searchFeaturesWithResponse(
            String collectionId, BinaryData searchFeaturesQuery, RequestOptions requestOptions) {
        return searchFeaturesWithResponseAsync(collectionId, searchFeaturesQuery, requestOptions).block();
    }

    /**
     * Get a feature(SpatioTemporal Asset Catalog (STAC) Item) for given collection and feature id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     stacVersion: String (Required)
     *     stacExtensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     type: String (Required)
     *     geometry: Object (Optional)
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     properties: Object (Required)
     *     links (Required): [
     *          (Required){
     *             href: String (Required)
     *             rel: String (Required)
     *             type: String (Optional)
     *             title: String (Optional)
     *         }
     *     ]
     *     assets (Required): {
     *         String (Required): {
     *             href: String (Required)
     *             title: String (Optional)
     *             description: String (Optional)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     collection: String (Optional)
     * }
     * }</pre>
     *
     * @param collectionId Collection Id to be fetched. Allowed values: "Sentinel_2_L2A", "Sentinel_2_L1C".
     * @param featureId Feature Id to be fetched.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a feature(SpatioTemporal Asset Catalog (STAC) Item) for given collection and feature id along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getStacFeatureWithResponseAsync(
            String collectionId, String featureId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getStacFeature(
                                this.client.getEndpoint(),
                                collectionId,
                                featureId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get a feature(SpatioTemporal Asset Catalog (STAC) Item) for given collection and feature id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     stacVersion: String (Required)
     *     stacExtensions (Optional): [
     *         String (Optional)
     *     ]
     *     id: String (Required)
     *     type: String (Required)
     *     geometry: Object (Optional)
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     properties: Object (Required)
     *     links (Required): [
     *          (Required){
     *             href: String (Required)
     *             rel: String (Required)
     *             type: String (Optional)
     *             title: String (Optional)
     *         }
     *     ]
     *     assets (Required): {
     *         String (Required): {
     *             href: String (Required)
     *             title: String (Optional)
     *             description: String (Optional)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     collection: String (Optional)
     * }
     * }</pre>
     *
     * @param collectionId Collection Id to be fetched. Allowed values: "Sentinel_2_L2A", "Sentinel_2_L1C".
     * @param featureId Feature Id to be fetched.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a feature(SpatioTemporal Asset Catalog (STAC) Item) for given collection and feature id along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStacFeatureWithResponse(
            String collectionId, String featureId, RequestOptions requestOptions) {
        return getStacFeatureWithResponseAsync(collectionId, featureId, requestOptions).block();
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sceneDateTime: OffsetDateTime (Optional)
     *     provider: String (Optional)
     *     source: String (Optional)
     *     imageFiles (Optional): [
     *          (Optional){
     *             fileLink: String (Optional)
     *             name: String (Required)
     *             imageFormat: String(TIF) (Optional)
     *             resolution: Double (Optional)
     *         }
     *     ]
     *     imageFormat: String(TIF) (Optional)
     *     cloudCoverPercentage: Double (Optional)
     *     darkPixelPercentage: Double (Optional)
     *     ndviMedianValue: Double (Optional)
     *     boundaryId: String (Optional)
     *     partyId: String (Optional)
     *     id: String (Optional)
     *     eTag: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     *     with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listNextSinglePageAsync(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
