/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.commerce.v2015_06_01_preview;

import java.util.UUID;
import java.util.List;
import java.util.Map;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Detailed information about the meter.
 */
public class MeterInfo {
    /**
     * The unique identifier of the resource.
     */
    @JsonProperty(value = "MeterId")
    private UUID meterId;

    /**
     * The name of the meter, within the given meter category.
     */
    @JsonProperty(value = "MeterName")
    private String meterName;

    /**
     * The category of the meter, e.g., 'Cloud services', 'Networking', etc..
     */
    @JsonProperty(value = "MeterCategory")
    private String meterCategory;

    /**
     * The subcategory of the meter, e.g., 'A6 Cloud services', 'ExpressRoute
     * (IXP)', etc..
     */
    @JsonProperty(value = "MeterSubCategory")
    private String meterSubCategory;

    /**
     * The unit in which the meter consumption is charged, e.g., 'Hours', 'GB',
     * etc.
     */
    @JsonProperty(value = "Unit")
    private String unit;

    /**
     * Provides additional meter data. 'Third Party' indicates a meter with no
     * discount. Blanks indicate First Party.
     */
    @JsonProperty(value = "MeterTags")
    private List<String> meterTags;

    /**
     * The region in which the Azure service is available.
     */
    @JsonProperty(value = "MeterRegion")
    private String meterRegion;

    /**
     * The list of key/value pairs for the meter rates, in the format
     * 'key':'value' where key = the meter quantity, and value = the
     * corresponding price.
     */
    @JsonProperty(value = "MeterRates")
    private Map<String, Double> meterRates;

    /**
     * Indicates the date from which the meter rate is effective.
     */
    @JsonProperty(value = "EffectiveDate")
    private DateTime effectiveDate;

    /**
     * The resource quantity that is included in the offer at no cost.
     * Consumption beyond this quantity will be charged.
     */
    @JsonProperty(value = "IncludedQuantity")
    private Double includedQuantity;

    /**
     * Get the unique identifier of the resource.
     *
     * @return the meterId value
     */
    public UUID meterId() {
        return this.meterId;
    }

    /**
     * Set the unique identifier of the resource.
     *
     * @param meterId the meterId value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withMeterId(UUID meterId) {
        this.meterId = meterId;
        return this;
    }

    /**
     * Get the name of the meter, within the given meter category.
     *
     * @return the meterName value
     */
    public String meterName() {
        return this.meterName;
    }

    /**
     * Set the name of the meter, within the given meter category.
     *
     * @param meterName the meterName value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withMeterName(String meterName) {
        this.meterName = meterName;
        return this;
    }

    /**
     * Get the category of the meter, e.g., 'Cloud services', 'Networking', etc..
     *
     * @return the meterCategory value
     */
    public String meterCategory() {
        return this.meterCategory;
    }

    /**
     * Set the category of the meter, e.g., 'Cloud services', 'Networking', etc..
     *
     * @param meterCategory the meterCategory value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withMeterCategory(String meterCategory) {
        this.meterCategory = meterCategory;
        return this;
    }

    /**
     * Get the subcategory of the meter, e.g., 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
     *
     * @return the meterSubCategory value
     */
    public String meterSubCategory() {
        return this.meterSubCategory;
    }

    /**
     * Set the subcategory of the meter, e.g., 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
     *
     * @param meterSubCategory the meterSubCategory value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withMeterSubCategory(String meterSubCategory) {
        this.meterSubCategory = meterSubCategory;
        return this;
    }

    /**
     * Get the unit in which the meter consumption is charged, e.g., 'Hours', 'GB', etc.
     *
     * @return the unit value
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit in which the meter consumption is charged, e.g., 'Hours', 'GB', etc.
     *
     * @param unit the unit value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get provides additional meter data. 'Third Party' indicates a meter with no discount. Blanks indicate First Party.
     *
     * @return the meterTags value
     */
    public List<String> meterTags() {
        return this.meterTags;
    }

    /**
     * Set provides additional meter data. 'Third Party' indicates a meter with no discount. Blanks indicate First Party.
     *
     * @param meterTags the meterTags value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withMeterTags(List<String> meterTags) {
        this.meterTags = meterTags;
        return this;
    }

    /**
     * Get the region in which the Azure service is available.
     *
     * @return the meterRegion value
     */
    public String meterRegion() {
        return this.meterRegion;
    }

    /**
     * Set the region in which the Azure service is available.
     *
     * @param meterRegion the meterRegion value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withMeterRegion(String meterRegion) {
        this.meterRegion = meterRegion;
        return this;
    }

    /**
     * Get the list of key/value pairs for the meter rates, in the format 'key':'value' where key = the meter quantity, and value = the corresponding price.
     *
     * @return the meterRates value
     */
    public Map<String, Double> meterRates() {
        return this.meterRates;
    }

    /**
     * Set the list of key/value pairs for the meter rates, in the format 'key':'value' where key = the meter quantity, and value = the corresponding price.
     *
     * @param meterRates the meterRates value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withMeterRates(Map<String, Double> meterRates) {
        this.meterRates = meterRates;
        return this;
    }

    /**
     * Get indicates the date from which the meter rate is effective.
     *
     * @return the effectiveDate value
     */
    public DateTime effectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Set indicates the date from which the meter rate is effective.
     *
     * @param effectiveDate the effectiveDate value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withEffectiveDate(DateTime effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * Get the resource quantity that is included in the offer at no cost. Consumption beyond this quantity will be charged.
     *
     * @return the includedQuantity value
     */
    public Double includedQuantity() {
        return this.includedQuantity;
    }

    /**
     * Set the resource quantity that is included in the offer at no cost. Consumption beyond this quantity will be charged.
     *
     * @param includedQuantity the includedQuantity value to set
     * @return the MeterInfo object itself.
     */
    public MeterInfo withIncludedQuantity(Double includedQuantity) {
        this.includedQuantity = includedQuantity;
        return this;
    }

}
