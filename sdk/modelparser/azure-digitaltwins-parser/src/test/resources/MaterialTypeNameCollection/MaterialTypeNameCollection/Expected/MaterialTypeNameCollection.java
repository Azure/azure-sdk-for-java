// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) Code Generator

package com.azure.test;

/**
 * A collection of all material type names.
 */
static class MaterialTypeNameCollection {
    private static final HashSet<String> TYPE_NAMES = new HashSet<>();

    /**
     * Initializes a new instance of the {@link MaterialTypeNameCollection} class.
     */
    static MaterialTypeNameCollection() {
        TYPE_NAMES.add("Enum");
        TYPE_NAMES.add("dtmi:dtdl:class:Enum;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Enum;3");
        TYPE_NAMES.add("Entity");
        TYPE_NAMES.add("dtmi:dtdl:class:Entity;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Entity;3");
        TYPE_NAMES.add("EnumValue");
        TYPE_NAMES.add("dtmi:dtdl:class:EnumValue;2");
        TYPE_NAMES.add("dtmi:dtdl:class:EnumValue;3");
        TYPE_NAMES.add("CommandPayload");
        TYPE_NAMES.add("dtmi:dtdl:class:CommandPayload;2");
        TYPE_NAMES.add("dtmi:dtdl:class:CommandPayload;3");
        TYPE_NAMES.add("Schema");
        TYPE_NAMES.add("dtmi:dtdl:class:Schema;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Schema;3");
        TYPE_NAMES.add("PrimitiveSchema");
        TYPE_NAMES.add("dtmi:dtdl:class:PrimitiveSchema;2");
        TYPE_NAMES.add("dtmi:dtdl:class:PrimitiveSchema;3");
        TYPE_NAMES.add("Time");
        TYPE_NAMES.add("dtmi:dtdl:class:Time;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Time;3");
        TYPE_NAMES.add("String");
        TYPE_NAMES.add("dtmi:dtdl:class:String;2");
        TYPE_NAMES.add("dtmi:dtdl:class:String;3");
        TYPE_NAMES.add("CommandResponse");
        TYPE_NAMES.add("dtmi:dtdl:class:CommandResponse;3");
        TYPE_NAMES.add("Unit");
        TYPE_NAMES.add("dtmi:dtdl:class:Unit;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Unit;3");
        TYPE_NAMES.add("NamedLatentType");
        TYPE_NAMES.add("dtmi:dtdl:class:NamedLatentType;3");
        TYPE_NAMES.add("DateTime");
        TYPE_NAMES.add("dtmi:dtdl:class:DateTime;2");
        TYPE_NAMES.add("dtmi:dtdl:class:DateTime;3");
        TYPE_NAMES.add("Field");
        TYPE_NAMES.add("dtmi:dtdl:class:Field;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Field;3");
        TYPE_NAMES.add("CommandType");
        TYPE_NAMES.add("dtmi:dtdl:class:CommandType;2");
        TYPE_NAMES.add("dtmi:dtdl:class:CommandType;3");
        TYPE_NAMES.add("Boolean");
        TYPE_NAMES.add("dtmi:dtdl:class:Boolean;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Boolean;3");
        TYPE_NAMES.add("Component");
        TYPE_NAMES.add("dtmi:dtdl:class:Component;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Component;3");
        TYPE_NAMES.add("Property");
        TYPE_NAMES.add("dtmi:dtdl:class:Property;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Property;3");
        TYPE_NAMES.add("Duration");
        TYPE_NAMES.add("dtmi:dtdl:class:Duration;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Duration;3");
        TYPE_NAMES.add("MapValue");
        TYPE_NAMES.add("dtmi:dtdl:class:MapValue;2");
        TYPE_NAMES.add("dtmi:dtdl:class:MapValue;3");
        TYPE_NAMES.add("ComplexSchema");
        TYPE_NAMES.add("dtmi:dtdl:class:ComplexSchema;2");
        TYPE_NAMES.add("dtmi:dtdl:class:ComplexSchema;3");
        TYPE_NAMES.add("Telemetry");
        TYPE_NAMES.add("dtmi:dtdl:class:Telemetry;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Telemetry;3");
        TYPE_NAMES.add("Double");
        TYPE_NAMES.add("dtmi:dtdl:class:Double;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Double;3");
        TYPE_NAMES.add("Date");
        TYPE_NAMES.add("dtmi:dtdl:class:Date;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Date;3");
        TYPE_NAMES.add("Array");
        TYPE_NAMES.add("dtmi:dtdl:class:Array;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Array;3");
        TYPE_NAMES.add("Integer");
        TYPE_NAMES.add("dtmi:dtdl:class:Integer;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Integer;3");
        TYPE_NAMES.add("SchemaField");
        TYPE_NAMES.add("dtmi:dtdl:class:SchemaField;2");
        TYPE_NAMES.add("dtmi:dtdl:class:SchemaField;3");
        TYPE_NAMES.add("TemporalSchema");
        TYPE_NAMES.add("dtmi:dtdl:class:TemporalSchema;2");
        TYPE_NAMES.add("dtmi:dtdl:class:TemporalSchema;3");
        TYPE_NAMES.add("Float");
        TYPE_NAMES.add("dtmi:dtdl:class:Float;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Float;3");
        TYPE_NAMES.add("NamedEntity");
        TYPE_NAMES.add("dtmi:dtdl:class:NamedEntity;2");
        TYPE_NAMES.add("dtmi:dtdl:class:NamedEntity;3");
        TYPE_NAMES.add("MapKey");
        TYPE_NAMES.add("dtmi:dtdl:class:MapKey;2");
        TYPE_NAMES.add("dtmi:dtdl:class:MapKey;3");
        TYPE_NAMES.add("CommandRequest");
        TYPE_NAMES.add("dtmi:dtdl:class:CommandRequest;3");
        TYPE_NAMES.add("NumericSchema");
        TYPE_NAMES.add("dtmi:dtdl:class:NumericSchema;2");
        TYPE_NAMES.add("dtmi:dtdl:class:NumericSchema;3");
        TYPE_NAMES.add("Command");
        TYPE_NAMES.add("dtmi:dtdl:class:Command;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Command;3");
        TYPE_NAMES.add("Content");
        TYPE_NAMES.add("dtmi:dtdl:class:Content;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Content;3");
        TYPE_NAMES.add("Relationship");
        TYPE_NAMES.add("dtmi:dtdl:class:Relationship;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Relationship;3");
        TYPE_NAMES.add("Long");
        TYPE_NAMES.add("dtmi:dtdl:class:Long;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Long;3");
        TYPE_NAMES.add("Object");
        TYPE_NAMES.add("dtmi:dtdl:class:Object;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Object;3");
        TYPE_NAMES.add("UnitAttribute");
        TYPE_NAMES.add("dtmi:dtdl:class:UnitAttribute;2");
        TYPE_NAMES.add("dtmi:dtdl:class:UnitAttribute;3");
        TYPE_NAMES.add("Map");
        TYPE_NAMES.add("dtmi:dtdl:class:Map;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Map;3");
        TYPE_NAMES.add("Interface");
        TYPE_NAMES.add("dtmi:dtdl:class:Interface;2");
        TYPE_NAMES.add("dtmi:dtdl:class:Interface;3");
        TYPE_NAMES.add("LatentType");
        TYPE_NAMES.add("dtmi:dtdl:class:LatentType;3");
    }

    /**
     * Indicates whether a given type is material or supplemental.
     * @param typeString The type to check.
     * @return True if the type is material.
     */
    public static boolean isMaterialType(String typeString) {
        return TYPE_NAMES.contains(typeString);
    }
}
