// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) Code Generator

package com.azure.test;

/**
 * Class for parsing and storing information from JSON-LD context blocks.
 */
class AggregateContext {
    private static final HashSet<Integer> DTDL_VERSIONS_ALLOWING_LOCAL_TERMS = new HashSet<>(Arrays.asList(3));

    /**
     * Initializes a new instance of the {@link AggregateContext} class.
     */
    static AggregateContext() {
        dtdlContextHistory = getDtdlContextHistory();

        affiliateContextHistories = new HashMap<String, ContextHistory>();

        affiliateContextHistories.put("dtmi:dtdl:extension:historization", getAffiliate2ContextHistory());
        affiliateContextHistories.put("dtmi:dtdl:extension:initialization", getAffiliate0ContextHistory());
        affiliateContextHistories.put("dtmi:dtdl:extension:layering", getAffiliate3ContextHistory());
        affiliateContextHistories.put("dtmi:iotcentral:context", getAffiliate1ContextHistory());
    }

    private static ContextHistory getAffiliate0ContextHistory() {
        List<VersionedContext> versionedContexts = new ArrayList<>();

        VersionedContext context1_0 = new VersionedContext(1, 0);
        context1_0.addDefinition("Initialized", new Dtmi("dtmi:dtdl:extension:initialization:v1:Initialized"));
        context1_0.addDefinition("initialValue", new Dtmi("dtmi:dtdl:extension:initialization:v1:Initialized:initialValue"));
        versionedContexts.add(context1_0);

        return new ContextHistory(versionedContexts);
    }

    private static ContextHistory getAffiliate1ContextHistory() {
        List<VersionedContext> versionedContexts = new ArrayList<>();

        VersionedContext context3_0 = new VersionedContext(3, 0);
        context3_0.addDefinition("AccelerationVector", new Dtmi("dtmi:iotcentral:class:AccelerationVector;3"));
        context3_0.addDefinition("State", new Dtmi("dtmi:iotcentral:class:State;3"));
        context3_0.addDefinition("Event", new Dtmi("dtmi:iotcentral:class:Event;3"));
        context3_0.addDefinition("geopoint", new Dtmi("dtmi:iotcentral:schema:geopoint;3"));
        context3_0.addDefinition("vector", new Dtmi("dtmi:iotcentral:schema:vector;3"));
        context3_0.addDefinition("Location", new Dtmi("dtmi:iotcentral:class:Location;3"));
        context3_0.addDefinition("VelocityVector", new Dtmi("dtmi:iotcentral:class:VelocityVector;3"));
        versionedContexts.add(context3_0);

        VersionedContext context2_0 = new VersionedContext(2, 0);
        context2_0.addDefinition("AccelerationVector", new Dtmi("dtmi:iotcentral:class:AccelerationVector;2"));
        context2_0.addDefinition("State", new Dtmi("dtmi:iotcentral:class:State;2"));
        context2_0.addDefinition("Event", new Dtmi("dtmi:iotcentral:class:Event;2"));
        context2_0.addDefinition("geopoint", new Dtmi("dtmi:iotcentral:schema:geopoint;2"));
        context2_0.addDefinition("vector", new Dtmi("dtmi:iotcentral:schema:vector;2"));
        context2_0.addDefinition("Location", new Dtmi("dtmi:iotcentral:class:Location;2"));
        context2_0.addDefinition("VelocityVector", new Dtmi("dtmi:iotcentral:class:VelocityVector;2"));
        versionedContexts.add(context2_0);

        return new ContextHistory(versionedContexts);
    }

    private static ContextHistory getAffiliate2ContextHistory() {
        List<VersionedContext> versionedContexts = new ArrayList<>();

        VersionedContext context2_0 = new VersionedContext(2, 0);
        context2_0.addDefinition("Historized", new Dtmi("dtmi:dtdl:extension:historization:v2:Historized"));
        versionedContexts.add(context2_0);

        VersionedContext context1_0 = new VersionedContext(1, 0);
        context1_0.addDefinition("Historized", new Dtmi("dtmi:dtdl:extension:historization:v1:Historized"));
        versionedContexts.add(context1_0);

        return new ContextHistory(versionedContexts);
    }

    private static ContextHistory getAffiliate3ContextHistory() {
        List<VersionedContext> versionedContexts = new ArrayList<>();

        VersionedContext context1_0 = new VersionedContext(1, 0);
        context1_0.addDefinition("Layer", new Dtmi("dtmi:dtdl:extension:layering:v1:Layer"));
        versionedContexts.add(context1_0);

        return new ContextHistory(versionedContexts);
    }

    private static ContextHistory getDtdlContextHistory() {
        List<VersionedContext> versionedContexts = new ArrayList<>();

        VersionedContext context2_0 = new VersionedContext(2, 0);
        context2_0.addDefinition("Entity", new Dtmi("dtmi:dtdl:class:Entity;2"));
        context2_0.addDefinition("QuantitativeType", new Dtmi("dtmi:standard:class:QuantitativeType;2"));
        context2_0.addDefinition("kilojoule", new Dtmi("dtmi:standard:unit:kilojoule;2"));
        context2_0.addDefinition("tebibytePerSecond", new Dtmi("dtmi:standard:unit:tebibytePerSecond;2"));
        context2_0.addDefinition("year", new Dtmi("dtmi:standard:unit:year;2"));
        context2_0.addDefinition("synchronous", new Dtmi("dtmi:dtdl:instance:CommandType:synchronous;2"));
        context2_0.addDefinition("zebibytePerSecond", new Dtmi("dtmi:standard:unit:zebibytePerSecond;2"));
        context2_0.addDefinition("MassUnit", new Dtmi("dtmi:standard:class:MassUnit;2"));
        context2_0.addDefinition("gibibyte", new Dtmi("dtmi:standard:unit:gibibyte;2"));
        context2_0.addDefinition("String", new Dtmi("dtmi:dtdl:class:String;2"));
        context2_0.addDefinition("secondOfArc", new Dtmi("dtmi:standard:unit:secondOfArc;2"));
        context2_0.addDefinition("RatioUnit", new Dtmi("dtmi:standard:class:RatioUnit;2"));
        context2_0.addDefinition("lux", new Dtmi("dtmi:standard:unit:lux;2"));
        context2_0.addDefinition("exa", new Dtmi("dtmi:standard:unitprefix:exa;2"));
        context2_0.addDefinition("microfarad", new Dtmi("dtmi:standard:unit:microfarad;2"));
        context2_0.addDefinition("kibibyte", new Dtmi("dtmi:standard:unit:kibibyte;2"));
        context2_0.addDefinition("AngleUnit", new Dtmi("dtmi:standard:class:AngleUnit;2"));
        context2_0.addDefinition("pico", new Dtmi("dtmi:standard:unitprefix:pico;2"));
        context2_0.addDefinition("bar", new Dtmi("dtmi:standard:unit:bar;2"));
        context2_0.addDefinition("DensityUnit", new Dtmi("dtmi:standard:class:DensityUnit;2"));
        context2_0.addDefinition("exbi", new Dtmi("dtmi:standard:unitprefix:exbi;2"));
        context2_0.addDefinition("kibi", new Dtmi("dtmi:standard:unitprefix:kibi;2"));
        context2_0.addDefinition("yobibyte", new Dtmi("dtmi:standard:unit:yobibyte;2"));
        context2_0.addDefinition("newtonMetre", new Dtmi("dtmi:standard:unit:newtonMetre;2"));
        context2_0.addDefinition("TimeUnit", new Dtmi("dtmi:standard:class:TimeUnit;2"));
        context2_0.addDefinition("megahertz", new Dtmi("dtmi:standard:unit:megahertz;2"));
        context2_0.addDefinition("nanosecond", new Dtmi("dtmi:standard:unit:nanosecond;2"));
        context2_0.addDefinition("milePerHour", new Dtmi("dtmi:standard:unit:milePerHour;2"));
        context2_0.addDefinition("mile", new Dtmi("dtmi:standard:unit:mile;2"));
        context2_0.addDefinition("languageVersion", new Dtmi("dtmi:dtdl:property:languageVersion;2"));
        context2_0.addDefinition("Longitude", new Dtmi("dtmi:standard:class:Longitude;2"));
        context2_0.addDefinition("squareKilometre", new Dtmi("dtmi:standard:unit:squareKilometre;2"));
        context2_0.addDefinition("radian", new Dtmi("dtmi:standard:unit:radian;2"));
        context2_0.addDefinition("zetta", new Dtmi("dtmi:standard:unitprefix:zetta;2"));
        context2_0.addDefinition("Float", new Dtmi("dtmi:dtdl:class:Float;2"));
        context2_0.addDefinition("NamedEntity", new Dtmi("dtmi:dtdl:class:NamedEntity;2"));
        context2_0.addDefinition("metrePerSecond", new Dtmi("dtmi:standard:unit:metrePerSecond;2"));
        context2_0.addDefinition("microsecond", new Dtmi("dtmi:standard:unit:microsecond;2"));
        context2_0.addDefinition("Volume", new Dtmi("dtmi:standard:class:Volume;2"));
        context2_0.addDefinition("kibibit", new Dtmi("dtmi:standard:unit:kibibit;2"));
        context2_0.addDefinition("MagneticInductionUnit", new Dtmi("dtmi:standard:class:MagneticInductionUnit;2"));
        context2_0.addDefinition("volt", new Dtmi("dtmi:standard:unit:volt;2"));
        context2_0.addDefinition("centimetre", new Dtmi("dtmi:standard:unit:centimetre;2"));
        context2_0.addDefinition("megaohm", new Dtmi("dtmi:standard:unit:megaohm;2"));
        context2_0.addDefinition("gibibytePerSecond", new Dtmi("dtmi:standard:unit:gibibytePerSecond;2"));
        context2_0.addDefinition("InductanceUnit", new Dtmi("dtmi:standard:class:InductanceUnit;2"));
        context2_0.addDefinition("SoundPressureUnit", new Dtmi("dtmi:standard:class:SoundPressureUnit;2"));
        context2_0.addDefinition("ResistanceUnit", new Dtmi("dtmi:standard:class:ResistanceUnit;2"));
        context2_0.addDefinition("schema", new Dtmi("dtmi:dtdl:property:schema;2"));
        context2_0.addDefinition("mega", new Dtmi("dtmi:standard:unitprefix:mega;2"));
        context2_0.addDefinition("displayName", new Dtmi("dtmi:dtdl:property:displayName;2"));
        context2_0.addDefinition("millilitrePerSecond", new Dtmi("dtmi:standard:unit:millilitrePerSecond;2"));
        context2_0.addDefinition("milligram", new Dtmi("dtmi:standard:unit:milligram;2"));
        context2_0.addDefinition("turn", new Dtmi("dtmi:standard:unit:turn;2"));
        context2_0.addDefinition("long", new Dtmi("dtmi:dtdl:instance:Schema:long;2"));
        context2_0.addDefinition("tebi", new Dtmi("dtmi:standard:unitprefix:tebi;2"));
        context2_0.addDefinition("cubicMetre", new Dtmi("dtmi:standard:unit:cubicMetre;2"));
        context2_0.addDefinition("writable", new Dtmi("dtmi:dtdl:property:writable;2"));
        context2_0.addDefinition("valueSchema", new Dtmi("dtmi:dtdl:property:valueSchema;2"));
        context2_0.addDefinition("Inductance", new Dtmi("dtmi:standard:class:Inductance;2"));
        context2_0.addDefinition("candelaPerSquareMetre", new Dtmi("dtmi:standard:unit:candelaPerSquareMetre;2"));
        context2_0.addDefinition("yobibytePerSecond", new Dtmi("dtmi:standard:unit:yobibytePerSecond;2"));
        context2_0.addDefinition("tera", new Dtmi("dtmi:standard:unitprefix:tera;2"));
        context2_0.addDefinition("Humidity", new Dtmi("dtmi:standard:class:Humidity;2"));
        context2_0.addDefinition("degreeOfArc", new Dtmi("dtmi:standard:unit:degreeOfArc;2"));
        context2_0.addDefinition("AngularVelocityUnit", new Dtmi("dtmi:standard:class:AngularVelocityUnit;2"));
        context2_0.addDefinition("foot", new Dtmi("dtmi:standard:unit:foot;2"));
        context2_0.addDefinition("centi", new Dtmi("dtmi:standard:unitprefix:centi;2"));
        context2_0.addDefinition("LuminousIntensity", new Dtmi("dtmi:standard:class:LuminousIntensity;2"));
        context2_0.addDefinition("gram", new Dtmi("dtmi:standard:unit:gram;2"));
        context2_0.addDefinition("EnergyUnit", new Dtmi("dtmi:standard:class:EnergyUnit;2"));
        context2_0.addDefinition("ForceUnit", new Dtmi("dtmi:standard:class:ForceUnit;2"));
        context2_0.addDefinition("MapValue", new Dtmi("dtmi:dtdl:class:MapValue;2"));
        context2_0.addDefinition("gigahertz", new Dtmi("dtmi:standard:unit:gigahertz;2"));
        context2_0.addDefinition("Telemetry", new Dtmi("dtmi:dtdl:class:Telemetry;2"));
        context2_0.addDefinition("DataSizeUnit", new Dtmi("dtmi:standard:class:DataSizeUnit;2"));
        context2_0.addDefinition("maxwell", new Dtmi("dtmi:standard:unit:maxwell;2"));
        context2_0.addDefinition("SchemaField", new Dtmi("dtmi:dtdl:class:SchemaField;2"));
        context2_0.addDefinition("gramPerHour", new Dtmi("dtmi:standard:unit:gramPerHour;2"));
        context2_0.addDefinition("multiPoint", new Dtmi("dtmi:standard:schema:geospatial:multiPoint;2"));
        context2_0.addDefinition("NumericSchema", new Dtmi("dtmi:dtdl:class:NumericSchema;2"));
        context2_0.addDefinition("Length", new Dtmi("dtmi:standard:class:Length;2"));
        context2_0.addDefinition("megavolt", new Dtmi("dtmi:standard:unit:megavolt;2"));
        context2_0.addDefinition("gallon", new Dtmi("dtmi:standard:unit:gallon;2"));
        context2_0.addDefinition("topUnit", new Dtmi("dtmi:dtdl:property:topUnit;2"));
        context2_0.addDefinition("Relationship", new Dtmi("dtmi:dtdl:class:Relationship;2"));
        context2_0.addDefinition("coulomb", new Dtmi("dtmi:standard:unit:coulomb;2"));
        context2_0.addDefinition("Frequency", new Dtmi("dtmi:standard:class:Frequency;2"));
        context2_0.addDefinition("AngularVelocity", new Dtmi("dtmi:standard:class:AngularVelocity;2"));
        context2_0.addDefinition("AccelerationUnit", new Dtmi("dtmi:standard:class:AccelerationUnit;2"));
        context2_0.addDefinition("VolumeFlowRateUnit", new Dtmi("dtmi:standard:class:VolumeFlowRateUnit;2"));
        context2_0.addDefinition("inch", new Dtmi("dtmi:standard:unit:inch;2"));
        context2_0.addDefinition("inchesOfWater", new Dtmi("dtmi:standard:unit:inchesOfWater;2"));
        context2_0.addDefinition("UnitAttribute", new Dtmi("dtmi:dtdl:class:UnitAttribute;2"));
        context2_0.addDefinition("kilogramPerHour", new Dtmi("dtmi:standard:unit:kilogramPerHour;2"));
        context2_0.addDefinition("DataRateUnit", new Dtmi("dtmi:standard:class:DataRateUnit;2"));
        context2_0.addDefinition("Interface", new Dtmi("dtmi:dtdl:class:Interface;2"));
        context2_0.addDefinition("Power", new Dtmi("dtmi:standard:class:Power;2"));
        context2_0.addDefinition("symbol", new Dtmi("dtmi:dtdl:property:symbol;2"));
        context2_0.addDefinition("CommandPayload", new Dtmi("dtmi:dtdl:class:CommandPayload;2"));
        context2_0.addDefinition("Schema", new Dtmi("dtmi:dtdl:class:Schema;2"));
        context2_0.addDefinition("nano", new Dtmi("dtmi:standard:unitprefix:nano;2"));
        context2_0.addDefinition("metrePerSecondSquared", new Dtmi("dtmi:standard:unit:metrePerSecondSquared;2"));
        context2_0.addDefinition("bel", new Dtmi("dtmi:standard:unit:bel;2"));
        context2_0.addDefinition("deci", new Dtmi("dtmi:standard:unitprefix:deci;2"));
        context2_0.addDefinition("squareCentimetre", new Dtmi("dtmi:standard:unit:squareCentimetre;2"));
        context2_0.addDefinition("Latitude", new Dtmi("dtmi:standard:class:Latitude;2"));
        context2_0.addDefinition("zebi", new Dtmi("dtmi:standard:unitprefix:zebi;2"));
        context2_0.addDefinition("baseUnit", new Dtmi("dtmi:dtdl:property:baseUnit;2"));
        context2_0.addDefinition("RelativeHumidity", new Dtmi("dtmi:standard:class:RelativeHumidity;2"));
        context2_0.addDefinition("millilitrePerHour", new Dtmi("dtmi:standard:unit:millilitrePerHour;2"));
        context2_0.addDefinition("DataSize", new Dtmi("dtmi:standard:class:DataSize;2"));
        context2_0.addDefinition("gigajoule", new Dtmi("dtmi:standard:unit:gigajoule;2"));
        context2_0.addDefinition("gibi", new Dtmi("dtmi:standard:unitprefix:gibi;2"));
        context2_0.addDefinition("nanofarad", new Dtmi("dtmi:standard:unit:nanofarad;2"));
        context2_0.addDefinition("millibar", new Dtmi("dtmi:standard:unit:millibar;2"));
        context2_0.addDefinition("inchesOfMercury", new Dtmi("dtmi:standard:unit:inchesOfMercury;2"));
        context2_0.addDefinition("nanometre", new Dtmi("dtmi:standard:unit:nanometre;2"));
        context2_0.addDefinition("slug", new Dtmi("dtmi:standard:unit:slug;2"));
        context2_0.addDefinition("gibibit", new Dtmi("dtmi:standard:unit:gibibit;2"));
        context2_0.addDefinition("kilometrePerSecond", new Dtmi("dtmi:standard:unit:kilometrePerSecond;2"));
        context2_0.addDefinition("horsepower", new Dtmi("dtmi:standard:unit:horsepower;2"));
        context2_0.addDefinition("millivolt", new Dtmi("dtmi:standard:unit:millivolt;2"));
        context2_0.addDefinition("footcandle", new Dtmi("dtmi:standard:unit:footcandle;2"));
        context2_0.addDefinition("MagneticFluxUnit", new Dtmi("dtmi:standard:class:MagneticFluxUnit;2"));
        context2_0.addDefinition("microvolt", new Dtmi("dtmi:standard:unit:microvolt;2"));
        context2_0.addDefinition("MagneticInduction", new Dtmi("dtmi:standard:class:MagneticInduction;2"));
        context2_0.addDefinition("TemperatureUnit", new Dtmi("dtmi:standard:class:TemperatureUnit;2"));
        context2_0.addDefinition("milliampere", new Dtmi("dtmi:standard:unit:milliampere;2"));
        context2_0.addDefinition("Duration", new Dtmi("dtmi:dtdl:class:Duration;2"));
        context2_0.addDefinition("ampere", new Dtmi("dtmi:standard:unit:ampere;2"));
        context2_0.addDefinition("farad", new Dtmi("dtmi:standard:unit:farad;2"));
        context2_0.addDefinition("exbibyte", new Dtmi("dtmi:standard:unit:exbibyte;2"));
        context2_0.addDefinition("Area", new Dtmi("dtmi:standard:class:Area;2"));
        context2_0.addDefinition("extends", new Dtmi("dtmi:dtdl:property:extends;2"));
        context2_0.addDefinition("schemas", new Dtmi("dtmi:dtdl:property:schemas;2"));
        context2_0.addDefinition("Long", new Dtmi("dtmi:dtdl:class:Long;2"));
        context2_0.addDefinition("name", new Dtmi("dtmi:dtdl:property:name;2"));
        context2_0.addDefinition("knot", new Dtmi("dtmi:standard:unit:knot;2"));
        context2_0.addDefinition("fields", new Dtmi("dtmi:dtdl:property:fields;2"));
        context2_0.addDefinition("zebibit", new Dtmi("dtmi:standard:unit:zebibit;2"));
        context2_0.addDefinition("millimetresOfMercury", new Dtmi("dtmi:standard:unit:millimetresOfMercury;2"));
        context2_0.addDefinition("elementSchema", new Dtmi("dtmi:dtdl:property:elementSchema;2"));
        context2_0.addDefinition("string", new Dtmi("dtmi:dtdl:instance:Schema:string;2"));
        context2_0.addDefinition("degreeCelsius", new Dtmi("dtmi:standard:unit:degreeCelsius;2"));
        context2_0.addDefinition("Force", new Dtmi("dtmi:standard:class:Force;2"));
        context2_0.addDefinition("pebi", new Dtmi("dtmi:standard:unitprefix:pebi;2"));
        context2_0.addDefinition("kilovolt", new Dtmi("dtmi:standard:unit:kilovolt;2"));
        context2_0.addDefinition("description", new Dtmi("dtmi:dtdl:property:description;2"));
        context2_0.addDefinition("Time", new Dtmi("dtmi:dtdl:class:Time;2"));
        context2_0.addDefinition("kilopascal", new Dtmi("dtmi:standard:unit:kilopascal;2"));
        context2_0.addDefinition("newton", new Dtmi("dtmi:standard:unit:newton;2"));
        context2_0.addDefinition("duration", new Dtmi("dtmi:dtdl:instance:Schema:duration;2"));
        context2_0.addDefinition("Field", new Dtmi("dtmi:dtdl:class:Field;2"));
        context2_0.addDefinition("kelvin", new Dtmi("dtmi:standard:unit:kelvin;2"));
        context2_0.addDefinition("pound", new Dtmi("dtmi:standard:unit:pound;2"));
        context2_0.addDefinition("MagneticFlux", new Dtmi("dtmi:standard:class:MagneticFlux;2"));
        context2_0.addDefinition("degreePerSecond", new Dtmi("dtmi:standard:unit:degreePerSecond;2"));
        context2_0.addDefinition("Component", new Dtmi("dtmi:dtdl:class:Component;2"));
        context2_0.addDefinition("tonne", new Dtmi("dtmi:standard:unit:tonne;2"));
        context2_0.addDefinition("exbibitPerSecond", new Dtmi("dtmi:standard:unit:exbibitPerSecond;2"));
        context2_0.addDefinition("mapKey", new Dtmi("dtmi:dtdl:property:mapKey;2"));
        context2_0.addDefinition("hectare", new Dtmi("dtmi:standard:unit:hectare;2"));
        context2_0.addDefinition("radianPerSecondSquared", new Dtmi("dtmi:standard:unit:radianPerSecondSquared;2"));
        context2_0.addDefinition("target", new Dtmi("dtmi:dtdl:property:target;2"));
        context2_0.addDefinition("astronomicalUnit", new Dtmi("dtmi:standard:unit:astronomicalUnit;2"));
        context2_0.addDefinition("Integer", new Dtmi("dtmi:dtdl:class:Integer;2"));
        context2_0.addDefinition("henry", new Dtmi("dtmi:standard:unit:henry;2"));
        context2_0.addDefinition("kilometrePerHour", new Dtmi("dtmi:standard:unit:kilometrePerHour;2"));
        context2_0.addDefinition("Command", new Dtmi("dtmi:dtdl:class:Command;2"));
        context2_0.addDefinition("micro", new Dtmi("dtmi:standard:unitprefix:micro;2"));
        context2_0.addDefinition("gramPerCubicMetre", new Dtmi("dtmi:standard:unit:gramPerCubicMetre;2"));
        context2_0.addDefinition("zebibitPerSecond", new Dtmi("dtmi:standard:unit:zebibitPerSecond;2"));
        context2_0.addDefinition("comment", new Dtmi("dtmi:dtdl:property:comment;2"));
        context2_0.addDefinition("time", new Dtmi("dtmi:dtdl:instance:Schema:time;2"));
        context2_0.addDefinition("watt", new Dtmi("dtmi:standard:unit:watt;2"));
        context2_0.addDefinition("kilometre", new Dtmi("dtmi:standard:unit:kilometre;2"));
        context2_0.addDefinition("Enum", new Dtmi("dtmi:dtdl:class:Enum;2"));
        context2_0.addDefinition("squareMillimetre", new Dtmi("dtmi:standard:unit:squareMillimetre;2"));
        context2_0.addDefinition("gibibitPerSecond", new Dtmi("dtmi:standard:unit:gibibitPerSecond;2"));
        context2_0.addDefinition("prefix", new Dtmi("dtmi:dtdl:property:prefix;2"));
        context2_0.addDefinition("zepto", new Dtmi("dtmi:standard:unitprefix:zepto;2"));
        context2_0.addDefinition("minMultiplicity", new Dtmi("dtmi:dtdl:property:minMultiplicity;2"));
        context2_0.addDefinition("giga", new Dtmi("dtmi:standard:unitprefix:giga;2"));
        context2_0.addDefinition("bit", new Dtmi("dtmi:standard:unit:bit;2"));
        context2_0.addDefinition("Density", new Dtmi("dtmi:standard:class:Density;2"));
        context2_0.addDefinition("DateTime", new Dtmi("dtmi:dtdl:class:DateTime;2"));
        context2_0.addDefinition("microampere", new Dtmi("dtmi:standard:unit:microampere;2"));
        context2_0.addDefinition("bytePerSecond", new Dtmi("dtmi:standard:unit:bytePerSecond;2"));
        context2_0.addDefinition("enumValue", new Dtmi("dtmi:dtdl:property:enumValue;2"));
        context2_0.addDefinition("gForce", new Dtmi("dtmi:standard:unit:gForce;2"));
        context2_0.addDefinition("peta", new Dtmi("dtmi:standard:unitprefix:peta;2"));
        context2_0.addDefinition("Boolean", new Dtmi("dtmi:dtdl:class:Boolean;2"));
        context2_0.addDefinition("kilogram", new Dtmi("dtmi:standard:unit:kilogram;2"));
        context2_0.addDefinition("BinaryUnit", new Dtmi("dtmi:standard:class:BinaryUnit;2"));
        context2_0.addDefinition("Distance", new Dtmi("dtmi:standard:class:Distance;2"));
        context2_0.addDefinition("enumValues", new Dtmi("dtmi:dtdl:property:enumValues;2"));
        context2_0.addDefinition("ChargeUnit", new Dtmi("dtmi:standard:class:ChargeUnit;2"));
        context2_0.addDefinition("metre", new Dtmi("dtmi:standard:unit:metre;2"));
        context2_0.addDefinition("kilogramPerCubicMetre", new Dtmi("dtmi:standard:unit:kilogramPerCubicMetre;2"));
        context2_0.addDefinition("double", new Dtmi("dtmi:dtdl:instance:Schema:double;2"));
        context2_0.addDefinition("byte", new Dtmi("dtmi:standard:unit:byte;2"));
        context2_0.addDefinition("DecimalPrefix", new Dtmi("dtmi:standard:class:DecimalPrefix;2"));
        context2_0.addDefinition("maxMultiplicity", new Dtmi("dtmi:dtdl:property:maxMultiplicity;2"));
        context2_0.addDefinition("litre", new Dtmi("dtmi:standard:unit:litre;2"));
        context2_0.addDefinition("yobibitPerSecond", new Dtmi("dtmi:standard:unit:yobibitPerSecond;2"));
        context2_0.addDefinition("Mass", new Dtmi("dtmi:standard:class:Mass;2"));
        context2_0.addDefinition("multiLineString", new Dtmi("dtmi:standard:schema:geospatial:multiLineString;2"));
        context2_0.addDefinition("contents", new Dtmi("dtmi:dtdl:property:contents;2"));
        context2_0.addDefinition("mebibit", new Dtmi("dtmi:standard:unit:mebibit;2"));
        context2_0.addDefinition("Object", new Dtmi("dtmi:dtdl:class:Object;2"));
        context2_0.addDefinition("PressureUnit", new Dtmi("dtmi:standard:class:PressureUnit;2"));
        context2_0.addDefinition("BinaryPrefix", new Dtmi("dtmi:standard:class:BinaryPrefix;2"));
        context2_0.addDefinition("MassFlowRateUnit", new Dtmi("dtmi:standard:class:MassFlowRateUnit;2"));
        context2_0.addDefinition("kilowattHour", new Dtmi("dtmi:standard:unit:kilowattHour;2"));
        context2_0.addDefinition("megawatt", new Dtmi("dtmi:standard:unit:megawatt;2"));
        context2_0.addDefinition("megajoule", new Dtmi("dtmi:standard:unit:megajoule;2"));
        context2_0.addDefinition("litrePerHour", new Dtmi("dtmi:standard:unit:litrePerHour;2"));
        context2_0.addDefinition("Map", new Dtmi("dtmi:dtdl:class:Map;2"));
        context2_0.addDefinition("Current", new Dtmi("dtmi:standard:class:Current;2"));
        context2_0.addDefinition("CurrentUnit", new Dtmi("dtmi:standard:class:CurrentUnit;2"));
        context2_0.addDefinition("Thrust", new Dtmi("dtmi:standard:class:Thrust;2"));
        context2_0.addDefinition("kiloohm", new Dtmi("dtmi:standard:unit:kiloohm;2"));
        context2_0.addDefinition("dateTime", new Dtmi("dtmi:dtdl:instance:Schema:dateTime;2"));
        context2_0.addDefinition("joule", new Dtmi("dtmi:standard:unit:joule;2"));
        context2_0.addDefinition("micrometre", new Dtmi("dtmi:standard:unit:micrometre;2"));
        context2_0.addDefinition("minuteOfArc", new Dtmi("dtmi:standard:unit:minuteOfArc;2"));
        context2_0.addDefinition("mebibitPerSecond", new Dtmi("dtmi:standard:unit:mebibitPerSecond;2"));
        context2_0.addDefinition("femto", new Dtmi("dtmi:standard:unitprefix:femto;2"));
        context2_0.addDefinition("microgram", new Dtmi("dtmi:standard:unit:microgram;2"));
        context2_0.addDefinition("pascal", new Dtmi("dtmi:standard:unit:pascal;2"));
        context2_0.addDefinition("millisecond", new Dtmi("dtmi:standard:unit:millisecond;2"));
        context2_0.addDefinition("candela", new Dtmi("dtmi:standard:unit:candela;2"));
        context2_0.addDefinition("SoundPressure", new Dtmi("dtmi:standard:class:SoundPressure;2"));
        context2_0.addDefinition("Unitless", new Dtmi("dtmi:standard:class:Unitless;2"));
        context2_0.addDefinition("degreeFahrenheit", new Dtmi("dtmi:standard:unit:degreeFahrenheit;2"));
        context2_0.addDefinition("mapValue", new Dtmi("dtmi:dtdl:property:mapValue;2"));
        context2_0.addDefinition("bitPerSecond", new Dtmi("dtmi:standard:unit:bitPerSecond;2"));
        context2_0.addDefinition("ton", new Dtmi("dtmi:standard:unit:ton;2"));
        context2_0.addDefinition("kilo", new Dtmi("dtmi:standard:unitprefix:kilo;2"));
        context2_0.addDefinition("revolutionPerSecond", new Dtmi("dtmi:standard:unit:revolutionPerSecond;2"));
        context2_0.addDefinition("Energy", new Dtmi("dtmi:standard:class:Energy;2"));
        context2_0.addDefinition("CommandType", new Dtmi("dtmi:dtdl:class:CommandType;2"));
        context2_0.addDefinition("VolumeFlowRate", new Dtmi("dtmi:standard:class:VolumeFlowRate;2"));
        context2_0.addDefinition("tebibitPerSecond", new Dtmi("dtmi:standard:unit:tebibitPerSecond;2"));
        context2_0.addDefinition("AreaUnit", new Dtmi("dtmi:standard:class:AreaUnit;2"));
        context2_0.addDefinition("Property", new Dtmi("dtmi:dtdl:class:Property;2"));
        context2_0.addDefinition("IlluminanceUnit", new Dtmi("dtmi:standard:class:IlluminanceUnit;2"));
        context2_0.addDefinition("gigawatt", new Dtmi("dtmi:standard:unit:gigawatt;2"));
        context2_0.addDefinition("CapacitanceUnit", new Dtmi("dtmi:standard:class:CapacitanceUnit;2"));
        context2_0.addDefinition("kibibytePerSecond", new Dtmi("dtmi:standard:unit:kibibytePerSecond;2"));
        context2_0.addDefinition("DecimalUnit", new Dtmi("dtmi:standard:class:DecimalUnit;2"));
        context2_0.addDefinition("milePerSecond", new Dtmi("dtmi:standard:unit:milePerSecond;2"));
        context2_0.addDefinition("SemanticUnit", new Dtmi("dtmi:dtdl:class:SemanticUnit;2"));
        context2_0.addDefinition("decibel", new Dtmi("dtmi:standard:unit:decibel;2"));
        context2_0.addDefinition("Luminance", new Dtmi("dtmi:standard:class:Luminance;2"));
        context2_0.addDefinition("MapKey", new Dtmi("dtmi:dtdl:class:MapKey;2"));
        context2_0.addDefinition("Angle", new Dtmi("dtmi:standard:class:Angle;2"));
        context2_0.addDefinition("polygon", new Dtmi("dtmi:standard:schema:geospatial:polygon;2"));
        context2_0.addDefinition("milliohm", new Dtmi("dtmi:standard:unit:milliohm;2"));
        context2_0.addDefinition("Acceleration", new Dtmi("dtmi:standard:class:Acceleration;2"));
        context2_0.addDefinition("LuminousFluxUnit", new Dtmi("dtmi:standard:class:LuminousFluxUnit;2"));
        context2_0.addDefinition("Illuminance", new Dtmi("dtmi:standard:class:Illuminance;2"));
        context2_0.addDefinition("FrequencyUnit", new Dtmi("dtmi:standard:class:FrequencyUnit;2"));
        context2_0.addDefinition("date", new Dtmi("dtmi:dtdl:instance:Schema:date;2"));
        context2_0.addDefinition("kilowatt", new Dtmi("dtmi:standard:unit:kilowatt;2"));
        context2_0.addDefinition("mebibyte", new Dtmi("dtmi:standard:unit:mebibyte;2"));
        context2_0.addDefinition("Torque", new Dtmi("dtmi:standard:class:Torque;2"));
        context2_0.addDefinition("lumen", new Dtmi("dtmi:standard:unit:lumen;2"));
        context2_0.addDefinition("tesla", new Dtmi("dtmi:standard:unit:tesla;2"));
        context2_0.addDefinition("kilowattHourPerYear", new Dtmi("dtmi:standard:unit:kilowattHourPerYear;2"));
        context2_0.addDefinition("EnumValue", new Dtmi("dtmi:dtdl:class:EnumValue;2"));
        context2_0.addDefinition("Luminosity", new Dtmi("dtmi:standard:class:Luminosity;2"));
        context2_0.addDefinition("PrimitiveSchema", new Dtmi("dtmi:dtdl:class:PrimitiveSchema;2"));
        context2_0.addDefinition("integer", new Dtmi("dtmi:dtdl:instance:Schema:integer;2"));
        context2_0.addDefinition("Unit", new Dtmi("dtmi:dtdl:class:Unit;2"));
        context2_0.addDefinition("float", new Dtmi("dtmi:dtdl:instance:Schema:float;2"));
        context2_0.addDefinition("poundPerSquareInch", new Dtmi("dtmi:standard:unit:poundPerSquareInch;2"));
        context2_0.addDefinition("tebibyte", new Dtmi("dtmi:standard:unit:tebibyte;2"));
        context2_0.addDefinition("cubicCentimetre", new Dtmi("dtmi:standard:unit:cubicCentimetre;2"));
        context2_0.addDefinition("second", new Dtmi("dtmi:standard:unit:second;2"));
        context2_0.addDefinition("microhenry", new Dtmi("dtmi:standard:unit:microhenry;2"));
        context2_0.addDefinition("squareInch", new Dtmi("dtmi:standard:unit:squareInch;2"));
        context2_0.addDefinition("yocto", new Dtmi("dtmi:standard:unitprefix:yocto;2"));
        context2_0.addDefinition("LuminanceUnit", new Dtmi("dtmi:standard:class:LuminanceUnit;2"));
        context2_0.addDefinition("VolumeUnit", new Dtmi("dtmi:standard:class:VolumeUnit;2"));
        context2_0.addDefinition("AngularAccelerationUnit", new Dtmi("dtmi:standard:class:AngularAccelerationUnit;2"));
        context2_0.addDefinition("megaelectronvolt", new Dtmi("dtmi:standard:unit:megaelectronvolt;2"));
        context2_0.addDefinition("millilitre", new Dtmi("dtmi:standard:unit:millilitre;2"));
        context2_0.addDefinition("nauticalMile", new Dtmi("dtmi:standard:unit:nauticalMile;2"));
        context2_0.addDefinition("cubicFoot", new Dtmi("dtmi:standard:unit:cubicFoot;2"));
        context2_0.addDefinition("day", new Dtmi("dtmi:standard:unit:day;2"));
        context2_0.addDefinition("exponent", new Dtmi("dtmi:dtdl:property:exponent;2"));
        context2_0.addDefinition("SemanticType", new Dtmi("dtmi:dtdl:class:SemanticType;2"));
        context2_0.addDefinition("exbibit", new Dtmi("dtmi:standard:unit:exbibit;2"));
        context2_0.addDefinition("millifarad", new Dtmi("dtmi:standard:unit:millifarad;2"));
        context2_0.addDefinition("electronvolt", new Dtmi("dtmi:standard:unit:electronvolt;2"));
        context2_0.addDefinition("AngularAcceleration", new Dtmi("dtmi:standard:class:AngularAcceleration;2"));
        context2_0.addDefinition("ElectricCharge", new Dtmi("dtmi:standard:class:ElectricCharge;2"));
        context2_0.addDefinition("VoltageUnit", new Dtmi("dtmi:standard:class:VoltageUnit;2"));
        context2_0.addDefinition("Double", new Dtmi("dtmi:dtdl:class:Double;2"));
        context2_0.addDefinition("Pressure", new Dtmi("dtmi:standard:class:Pressure;2"));
        context2_0.addDefinition("LengthUnit", new Dtmi("dtmi:standard:class:LengthUnit;2"));
        context2_0.addDefinition("fluidOunce", new Dtmi("dtmi:standard:unit:fluidOunce;2"));
        context2_0.addDefinition("TemporalSchema", new Dtmi("dtmi:dtdl:class:TemporalSchema;2"));
        context2_0.addDefinition("Resistance", new Dtmi("dtmi:standard:class:Resistance;2"));
        context2_0.addDefinition("millimetre", new Dtmi("dtmi:standard:unit:millimetre;2"));
        context2_0.addDefinition("unit", new Dtmi("dtmi:dtdl:property:unit;2"));
        context2_0.addDefinition("hertz", new Dtmi("dtmi:standard:unit:hertz;2"));
        context2_0.addDefinition("revolutionPerMinute", new Dtmi("dtmi:standard:unit:revolutionPerMinute;2"));
        context2_0.addDefinition("centimetrePerSecond", new Dtmi("dtmi:standard:unit:centimetrePerSecond;2"));
        context2_0.addDefinition("ohm", new Dtmi("dtmi:standard:unit:ohm;2"));
        context2_0.addDefinition("Content", new Dtmi("dtmi:dtdl:class:Content;2"));
        context2_0.addDefinition("DataRate", new Dtmi("dtmi:standard:class:DataRate;2"));
        context2_0.addDefinition("metrePerHour", new Dtmi("dtmi:standard:unit:metrePerHour;2"));
        context2_0.addDefinition("deka", new Dtmi("dtmi:standard:unitprefix:deka;2"));
        context2_0.addDefinition("squareFoot", new Dtmi("dtmi:standard:unit:squareFoot;2"));
        context2_0.addDefinition("litrePerSecond", new Dtmi("dtmi:standard:unit:litrePerSecond;2"));
        context2_0.addDefinition("gramPerSecond", new Dtmi("dtmi:standard:unit:gramPerSecond;2"));
        context2_0.addDefinition("weber", new Dtmi("dtmi:standard:unit:weber;2"));
        context2_0.addDefinition("centimetrePerSecondSquared", new Dtmi("dtmi:standard:unit:centimetrePerSecondSquared;2"));
        context2_0.addDefinition("MassFlowRate", new Dtmi("dtmi:standard:class:MassFlowRate;2"));
        context2_0.addDefinition("request", new Dtmi("dtmi:dtdl:property:request;2"));
        context2_0.addDefinition("Temperature", new Dtmi("dtmi:standard:class:Temperature;2"));
        context2_0.addDefinition("commandType", new Dtmi("dtmi:dtdl:property:commandType;2"));
        context2_0.addDefinition("yobibit", new Dtmi("dtmi:standard:unit:yobibit;2"));
        context2_0.addDefinition("atto", new Dtmi("dtmi:standard:unitprefix:atto;2"));
        context2_0.addDefinition("TorqueUnit", new Dtmi("dtmi:standard:class:TorqueUnit;2"));
        context2_0.addDefinition("multiPolygon", new Dtmi("dtmi:standard:schema:geospatial:multiPolygon;2"));
        context2_0.addDefinition("percent", new Dtmi("dtmi:standard:unit:percent;2"));
        context2_0.addDefinition("point", new Dtmi("dtmi:standard:schema:geospatial:point;2"));
        context2_0.addDefinition("TimeSpan", new Dtmi("dtmi:standard:class:TimeSpan;2"));
        context2_0.addDefinition("unity", new Dtmi("dtmi:standard:unit:unity;2"));
        context2_0.addDefinition("hour", new Dtmi("dtmi:standard:unit:hour;2"));
        context2_0.addDefinition("asynchronous", new Dtmi("dtmi:dtdl:instance:CommandType:asynchronous;2"));
        context2_0.addDefinition("yotta", new Dtmi("dtmi:standard:unitprefix:yotta;2"));
        context2_0.addDefinition("Voltage", new Dtmi("dtmi:standard:class:Voltage;2"));
        context2_0.addDefinition("tebibit", new Dtmi("dtmi:standard:unit:tebibit;2"));
        context2_0.addDefinition("kibibitPerSecond", new Dtmi("dtmi:standard:unit:kibibitPerSecond;2"));
        context2_0.addDefinition("PowerUnit", new Dtmi("dtmi:standard:class:PowerUnit;2"));
        context2_0.addDefinition("yobi", new Dtmi("dtmi:standard:unitprefix:yobi;2"));
        context2_0.addDefinition("LuminousFlux", new Dtmi("dtmi:standard:class:LuminousFlux;2"));
        context2_0.addDefinition("LuminousIntensityUnit", new Dtmi("dtmi:standard:class:LuminousIntensityUnit;2"));
        context2_0.addDefinition("millihenry", new Dtmi("dtmi:standard:unit:millihenry;2"));
        context2_0.addDefinition("hecto", new Dtmi("dtmi:standard:unitprefix:hecto;2"));
        context2_0.addDefinition("ComplexSchema", new Dtmi("dtmi:dtdl:class:ComplexSchema;2"));
        context2_0.addDefinition("mebi", new Dtmi("dtmi:standard:unitprefix:mebi;2"));
        context2_0.addDefinition("Velocity", new Dtmi("dtmi:standard:class:Velocity;2"));
        context2_0.addDefinition("microwatt", new Dtmi("dtmi:standard:unit:microwatt;2"));
        context2_0.addDefinition("Date", new Dtmi("dtmi:dtdl:class:Date;2"));
        context2_0.addDefinition("zebibyte", new Dtmi("dtmi:standard:unit:zebibyte;2"));
        context2_0.addDefinition("minute", new Dtmi("dtmi:standard:unit:minute;2"));
        context2_0.addDefinition("Array", new Dtmi("dtmi:dtdl:class:Array;2"));
        context2_0.addDefinition("radianPerSecond", new Dtmi("dtmi:standard:unit:radianPerSecond;2"));
        context2_0.addDefinition("cubicInch", new Dtmi("dtmi:standard:unit:cubicInch;2"));
        context2_0.addDefinition("boolean", new Dtmi("dtmi:dtdl:instance:Schema:boolean;2"));
        context2_0.addDefinition("kilohertz", new Dtmi("dtmi:standard:unit:kilohertz;2"));
        context2_0.addDefinition("response", new Dtmi("dtmi:dtdl:property:response;2"));
        context2_0.addDefinition("kilogramPerSecond", new Dtmi("dtmi:standard:unit:kilogramPerSecond;2"));
        context2_0.addDefinition("VelocityUnit", new Dtmi("dtmi:standard:class:VelocityUnit;2"));
        context2_0.addDefinition("acre", new Dtmi("dtmi:standard:unit:acre;2"));
        context2_0.addDefinition("Capacitance", new Dtmi("dtmi:standard:class:Capacitance;2"));
        context2_0.addDefinition("bottomUnit", new Dtmi("dtmi:dtdl:property:bottomUnit;2"));
        context2_0.addDefinition("ounce", new Dtmi("dtmi:standard:unit:ounce;2"));
        context2_0.addDefinition("mebibytePerSecond", new Dtmi("dtmi:standard:unit:mebibytePerSecond;2"));
        context2_0.addDefinition("exbibytePerSecond", new Dtmi("dtmi:standard:unit:exbibytePerSecond;2"));
        context2_0.addDefinition("lineString", new Dtmi("dtmi:standard:schema:geospatial:lineString;2"));
        context2_0.addDefinition("milli", new Dtmi("dtmi:standard:unitprefix:milli;2"));
        context2_0.addDefinition("picofarad", new Dtmi("dtmi:standard:unit:picofarad;2"));
        context2_0.addDefinition("milliwatt", new Dtmi("dtmi:standard:unit:milliwatt;2"));
        context2_0.addDefinition("properties", new Dtmi("dtmi:dtdl:property:properties;2"));
        context2_0.addDefinition("squareMetre", new Dtmi("dtmi:standard:unit:squareMetre;2"));
        versionedContexts.add(context2_0);

        VersionedContext context3_0 = new VersionedContext(3, 0);
        context3_0.addDefinition("Entity", new Dtmi("dtmi:dtdl:class:Entity;3"));
        context3_0.addDefinition("QuantitativeType", new Dtmi("dtmi:standard:class:QuantitativeType;3"));
        context3_0.addDefinition("kilojoule", new Dtmi("dtmi:standard:unit:kilojoule;3"));
        context3_0.addDefinition("tebibytePerSecond", new Dtmi("dtmi:standard:unit:tebibytePerSecond;3"));
        context3_0.addDefinition("year", new Dtmi("dtmi:standard:unit:year;3"));
        context3_0.addDefinition("synchronous", new Dtmi("dtmi:dtdl:instance:CommandType:synchronous;3"));
        context3_0.addDefinition("zebibytePerSecond", new Dtmi("dtmi:standard:unit:zebibytePerSecond;3"));
        context3_0.addDefinition("MassUnit", new Dtmi("dtmi:standard:class:MassUnit;3"));
        context3_0.addDefinition("gibibyte", new Dtmi("dtmi:standard:unit:gibibyte;3"));
        context3_0.addDefinition("CommandResponse", new Dtmi("dtmi:dtdl:class:CommandResponse;3"));
        context3_0.addDefinition("String", new Dtmi("dtmi:dtdl:class:String;3"));
        context3_0.addDefinition("secondOfArc", new Dtmi("dtmi:standard:unit:secondOfArc;3"));
        context3_0.addDefinition("RatioUnit", new Dtmi("dtmi:standard:class:RatioUnit;3"));
        context3_0.addDefinition("lux", new Dtmi("dtmi:standard:unit:lux;3"));
        context3_0.addDefinition("exa", new Dtmi("dtmi:standard:unitprefix:exa;3"));
        context3_0.addDefinition("microfarad", new Dtmi("dtmi:standard:unit:microfarad;3"));
        context3_0.addDefinition("kibibyte", new Dtmi("dtmi:standard:unit:kibibyte;3"));
        context3_0.addDefinition("AngleUnit", new Dtmi("dtmi:standard:class:AngleUnit;3"));
        context3_0.addDefinition("pico", new Dtmi("dtmi:standard:unitprefix:pico;3"));
        context3_0.addDefinition("bar", new Dtmi("dtmi:standard:unit:bar;3"));
        context3_0.addDefinition("DensityUnit", new Dtmi("dtmi:standard:class:DensityUnit;3"));
        context3_0.addDefinition("exbi", new Dtmi("dtmi:standard:unitprefix:exbi;3"));
        context3_0.addDefinition("kibi", new Dtmi("dtmi:standard:unitprefix:kibi;3"));
        context3_0.addDefinition("yobibyte", new Dtmi("dtmi:standard:unit:yobibyte;3"));
        context3_0.addDefinition("newtonMetre", new Dtmi("dtmi:standard:unit:newtonMetre;3"));
        context3_0.addDefinition("TimeUnit", new Dtmi("dtmi:standard:class:TimeUnit;3"));
        context3_0.addDefinition("megahertz", new Dtmi("dtmi:standard:unit:megahertz;3"));
        context3_0.addDefinition("nanosecond", new Dtmi("dtmi:standard:unit:nanosecond;3"));
        context3_0.addDefinition("milePerHour", new Dtmi("dtmi:standard:unit:milePerHour;3"));
        context3_0.addDefinition("mile", new Dtmi("dtmi:standard:unit:mile;3"));
        context3_0.addDefinition("languageVersion", new Dtmi("dtmi:dtdl:property:languageVersion;3"));
        context3_0.addDefinition("Longitude", new Dtmi("dtmi:standard:class:Longitude;3"));
        context3_0.addDefinition("squareKilometre", new Dtmi("dtmi:standard:unit:squareKilometre;3"));
        context3_0.addDefinition("radian", new Dtmi("dtmi:standard:unit:radian;3"));
        context3_0.addDefinition("zetta", new Dtmi("dtmi:standard:unitprefix:zetta;3"));
        context3_0.addDefinition("Float", new Dtmi("dtmi:dtdl:class:Float;3"));
        context3_0.addDefinition("NamedEntity", new Dtmi("dtmi:dtdl:class:NamedEntity;3"));
        context3_0.addDefinition("metrePerSecond", new Dtmi("dtmi:standard:unit:metrePerSecond;3"));
        context3_0.addDefinition("microsecond", new Dtmi("dtmi:standard:unit:microsecond;3"));
        context3_0.addDefinition("Volume", new Dtmi("dtmi:standard:class:Volume;3"));
        context3_0.addDefinition("kibibit", new Dtmi("dtmi:standard:unit:kibibit;3"));
        context3_0.addDefinition("MagneticInductionUnit", new Dtmi("dtmi:standard:class:MagneticInductionUnit;3"));
        context3_0.addDefinition("volt", new Dtmi("dtmi:standard:unit:volt;3"));
        context3_0.addDefinition("centimetre", new Dtmi("dtmi:standard:unit:centimetre;3"));
        context3_0.addDefinition("megaohm", new Dtmi("dtmi:standard:unit:megaohm;3"));
        context3_0.addDefinition("gibibytePerSecond", new Dtmi("dtmi:standard:unit:gibibytePerSecond;3"));
        context3_0.addDefinition("InductanceUnit", new Dtmi("dtmi:standard:class:InductanceUnit;3"));
        context3_0.addDefinition("SoundPressureUnit", new Dtmi("dtmi:standard:class:SoundPressureUnit;3"));
        context3_0.addDefinition("ResistanceUnit", new Dtmi("dtmi:standard:class:ResistanceUnit;3"));
        context3_0.addDefinition("schema", new Dtmi("dtmi:dtdl:property:schema;3"));
        context3_0.addDefinition("mega", new Dtmi("dtmi:standard:unitprefix:mega;3"));
        context3_0.addDefinition("displayName", new Dtmi("dtmi:dtdl:property:displayName;3"));
        context3_0.addDefinition("millilitrePerSecond", new Dtmi("dtmi:standard:unit:millilitrePerSecond;3"));
        context3_0.addDefinition("milligram", new Dtmi("dtmi:standard:unit:milligram;3"));
        context3_0.addDefinition("turn", new Dtmi("dtmi:standard:unit:turn;3"));
        context3_0.addDefinition("long", new Dtmi("dtmi:dtdl:instance:Schema:long;3"));
        context3_0.addDefinition("tebi", new Dtmi("dtmi:standard:unitprefix:tebi;3"));
        context3_0.addDefinition("cubicMetre", new Dtmi("dtmi:standard:unit:cubicMetre;3"));
        context3_0.addDefinition("writable", new Dtmi("dtmi:dtdl:property:writable;3"));
        context3_0.addDefinition("valueSchema", new Dtmi("dtmi:dtdl:property:valueSchema;3"));
        context3_0.addDefinition("Inductance", new Dtmi("dtmi:standard:class:Inductance;3"));
        context3_0.addDefinition("candelaPerSquareMetre", new Dtmi("dtmi:standard:unit:candelaPerSquareMetre;3"));
        context3_0.addDefinition("yobibytePerSecond", new Dtmi("dtmi:standard:unit:yobibytePerSecond;3"));
        context3_0.addDefinition("tera", new Dtmi("dtmi:standard:unitprefix:tera;3"));
        context3_0.addDefinition("Humidity", new Dtmi("dtmi:standard:class:Humidity;3"));
        context3_0.addDefinition("degreeOfArc", new Dtmi("dtmi:standard:unit:degreeOfArc;3"));
        context3_0.addDefinition("AngularVelocityUnit", new Dtmi("dtmi:standard:class:AngularVelocityUnit;3"));
        context3_0.addDefinition("foot", new Dtmi("dtmi:standard:unit:foot;3"));
        context3_0.addDefinition("centi", new Dtmi("dtmi:standard:unitprefix:centi;3"));
        context3_0.addDefinition("LuminousIntensity", new Dtmi("dtmi:standard:class:LuminousIntensity;3"));
        context3_0.addDefinition("gram", new Dtmi("dtmi:standard:unit:gram;3"));
        context3_0.addDefinition("EnergyUnit", new Dtmi("dtmi:standard:class:EnergyUnit;3"));
        context3_0.addDefinition("ForceUnit", new Dtmi("dtmi:standard:class:ForceUnit;3"));
        context3_0.addDefinition("MapValue", new Dtmi("dtmi:dtdl:class:MapValue;3"));
        context3_0.addDefinition("gigahertz", new Dtmi("dtmi:standard:unit:gigahertz;3"));
        context3_0.addDefinition("Telemetry", new Dtmi("dtmi:dtdl:class:Telemetry;3"));
        context3_0.addDefinition("DataSizeUnit", new Dtmi("dtmi:standard:class:DataSizeUnit;3"));
        context3_0.addDefinition("maxwell", new Dtmi("dtmi:standard:unit:maxwell;3"));
        context3_0.addDefinition("SchemaField", new Dtmi("dtmi:dtdl:class:SchemaField;3"));
        context3_0.addDefinition("gramPerHour", new Dtmi("dtmi:standard:unit:gramPerHour;3"));
        context3_0.addDefinition("multiPoint", new Dtmi("dtmi:standard:schema:geospatial:multiPoint;3"));
        context3_0.addDefinition("NumericSchema", new Dtmi("dtmi:dtdl:class:NumericSchema;3"));
        context3_0.addDefinition("Length", new Dtmi("dtmi:standard:class:Length;3"));
        context3_0.addDefinition("megavolt", new Dtmi("dtmi:standard:unit:megavolt;3"));
        context3_0.addDefinition("gallon", new Dtmi("dtmi:standard:unit:gallon;3"));
        context3_0.addDefinition("topUnit", new Dtmi("dtmi:dtdl:property:topUnit;3"));
        context3_0.addDefinition("Relationship", new Dtmi("dtmi:dtdl:class:Relationship;3"));
        context3_0.addDefinition("coulomb", new Dtmi("dtmi:standard:unit:coulomb;3"));
        context3_0.addDefinition("Frequency", new Dtmi("dtmi:standard:class:Frequency;3"));
        context3_0.addDefinition("AngularVelocity", new Dtmi("dtmi:standard:class:AngularVelocity;3"));
        context3_0.addDefinition("AccelerationUnit", new Dtmi("dtmi:standard:class:AccelerationUnit;3"));
        context3_0.addDefinition("VolumeFlowRateUnit", new Dtmi("dtmi:standard:class:VolumeFlowRateUnit;3"));
        context3_0.addDefinition("inch", new Dtmi("dtmi:standard:unit:inch;3"));
        context3_0.addDefinition("inchesOfWater", new Dtmi("dtmi:standard:unit:inchesOfWater;3"));
        context3_0.addDefinition("UnitAttribute", new Dtmi("dtmi:dtdl:class:UnitAttribute;3"));
        context3_0.addDefinition("kilogramPerHour", new Dtmi("dtmi:standard:unit:kilogramPerHour;3"));
        context3_0.addDefinition("DataRateUnit", new Dtmi("dtmi:standard:class:DataRateUnit;3"));
        context3_0.addDefinition("Interface", new Dtmi("dtmi:dtdl:class:Interface;3"));
        context3_0.addDefinition("Power", new Dtmi("dtmi:standard:class:Power;3"));
        context3_0.addDefinition("symbol", new Dtmi("dtmi:dtdl:property:symbol;3"));
        context3_0.addDefinition("CommandPayload", new Dtmi("dtmi:dtdl:class:CommandPayload;3"));
        context3_0.addDefinition("Schema", new Dtmi("dtmi:dtdl:class:Schema;3"));
        context3_0.addDefinition("nano", new Dtmi("dtmi:standard:unitprefix:nano;3"));
        context3_0.addDefinition("metrePerSecondSquared", new Dtmi("dtmi:standard:unit:metrePerSecondSquared;3"));
        context3_0.addDefinition("bel", new Dtmi("dtmi:standard:unit:bel;3"));
        context3_0.addDefinition("deci", new Dtmi("dtmi:standard:unitprefix:deci;3"));
        context3_0.addDefinition("squareCentimetre", new Dtmi("dtmi:standard:unit:squareCentimetre;3"));
        context3_0.addDefinition("Latitude", new Dtmi("dtmi:standard:class:Latitude;3"));
        context3_0.addDefinition("zebi", new Dtmi("dtmi:standard:unitprefix:zebi;3"));
        context3_0.addDefinition("baseUnit", new Dtmi("dtmi:dtdl:property:baseUnit;3"));
        context3_0.addDefinition("RelativeHumidity", new Dtmi("dtmi:standard:class:RelativeHumidity;3"));
        context3_0.addDefinition("millilitrePerHour", new Dtmi("dtmi:standard:unit:millilitrePerHour;3"));
        context3_0.addDefinition("DataSize", new Dtmi("dtmi:standard:class:DataSize;3"));
        context3_0.addDefinition("gigajoule", new Dtmi("dtmi:standard:unit:gigajoule;3"));
        context3_0.addDefinition("gibi", new Dtmi("dtmi:standard:unitprefix:gibi;3"));
        context3_0.addDefinition("nanofarad", new Dtmi("dtmi:standard:unit:nanofarad;3"));
        context3_0.addDefinition("millibar", new Dtmi("dtmi:standard:unit:millibar;3"));
        context3_0.addDefinition("inchesOfMercury", new Dtmi("dtmi:standard:unit:inchesOfMercury;3"));
        context3_0.addDefinition("nanometre", new Dtmi("dtmi:standard:unit:nanometre;3"));
        context3_0.addDefinition("slug", new Dtmi("dtmi:standard:unit:slug;3"));
        context3_0.addDefinition("gibibit", new Dtmi("dtmi:standard:unit:gibibit;3"));
        context3_0.addDefinition("kilometrePerSecond", new Dtmi("dtmi:standard:unit:kilometrePerSecond;3"));
        context3_0.addDefinition("horsepower", new Dtmi("dtmi:standard:unit:horsepower;3"));
        context3_0.addDefinition("millivolt", new Dtmi("dtmi:standard:unit:millivolt;3"));
        context3_0.addDefinition("footcandle", new Dtmi("dtmi:standard:unit:footcandle;3"));
        context3_0.addDefinition("MagneticFluxUnit", new Dtmi("dtmi:standard:class:MagneticFluxUnit;3"));
        context3_0.addDefinition("microvolt", new Dtmi("dtmi:standard:unit:microvolt;3"));
        context3_0.addDefinition("MagneticInduction", new Dtmi("dtmi:standard:class:MagneticInduction;3"));
        context3_0.addDefinition("TemperatureUnit", new Dtmi("dtmi:standard:class:TemperatureUnit;3"));
        context3_0.addDefinition("milliampere", new Dtmi("dtmi:standard:unit:milliampere;3"));
        context3_0.addDefinition("Duration", new Dtmi("dtmi:dtdl:class:Duration;3"));
        context3_0.addDefinition("ampere", new Dtmi("dtmi:standard:unit:ampere;3"));
        context3_0.addDefinition("farad", new Dtmi("dtmi:standard:unit:farad;3"));
        context3_0.addDefinition("exbibyte", new Dtmi("dtmi:standard:unit:exbibyte;3"));
        context3_0.addDefinition("Area", new Dtmi("dtmi:standard:class:Area;3"));
        context3_0.addDefinition("extends", new Dtmi("dtmi:dtdl:property:extends;3"));
        context3_0.addDefinition("schemas", new Dtmi("dtmi:dtdl:property:schemas;3"));
        context3_0.addDefinition("Long", new Dtmi("dtmi:dtdl:class:Long;3"));
        context3_0.addDefinition("name", new Dtmi("dtmi:dtdl:property:name;3"));
        context3_0.addDefinition("knot", new Dtmi("dtmi:standard:unit:knot;3"));
        context3_0.addDefinition("fields", new Dtmi("dtmi:dtdl:property:fields;3"));
        context3_0.addDefinition("zebibit", new Dtmi("dtmi:standard:unit:zebibit;3"));
        context3_0.addDefinition("millimetresOfMercury", new Dtmi("dtmi:standard:unit:millimetresOfMercury;3"));
        context3_0.addDefinition("LatentType", new Dtmi("dtmi:dtdl:class:LatentType;3"));
        context3_0.addDefinition("elementSchema", new Dtmi("dtmi:dtdl:property:elementSchema;3"));
        context3_0.addDefinition("string", new Dtmi("dtmi:dtdl:instance:Schema:string;3"));
        context3_0.addDefinition("degreeCelsius", new Dtmi("dtmi:standard:unit:degreeCelsius;3"));
        context3_0.addDefinition("Force", new Dtmi("dtmi:standard:class:Force;3"));
        context3_0.addDefinition("pebi", new Dtmi("dtmi:standard:unitprefix:pebi;3"));
        context3_0.addDefinition("kilovolt", new Dtmi("dtmi:standard:unit:kilovolt;3"));
        context3_0.addDefinition("description", new Dtmi("dtmi:dtdl:property:description;3"));
        context3_0.addDefinition("Time", new Dtmi("dtmi:dtdl:class:Time;3"));
        context3_0.addDefinition("kilopascal", new Dtmi("dtmi:standard:unit:kilopascal;3"));
        context3_0.addDefinition("NamedLatentType", new Dtmi("dtmi:dtdl:class:NamedLatentType;3"));
        context3_0.addDefinition("newton", new Dtmi("dtmi:standard:unit:newton;3"));
        context3_0.addDefinition("duration", new Dtmi("dtmi:dtdl:instance:Schema:duration;3"));
        context3_0.addDefinition("Field", new Dtmi("dtmi:dtdl:class:Field;3"));
        context3_0.addDefinition("kelvin", new Dtmi("dtmi:standard:unit:kelvin;3"));
        context3_0.addDefinition("pound", new Dtmi("dtmi:standard:unit:pound;3"));
        context3_0.addDefinition("MagneticFlux", new Dtmi("dtmi:standard:class:MagneticFlux;3"));
        context3_0.addDefinition("degreePerSecond", new Dtmi("dtmi:standard:unit:degreePerSecond;3"));
        context3_0.addDefinition("Component", new Dtmi("dtmi:dtdl:class:Component;3"));
        context3_0.addDefinition("tonne", new Dtmi("dtmi:standard:unit:tonne;3"));
        context3_0.addDefinition("exbibitPerSecond", new Dtmi("dtmi:standard:unit:exbibitPerSecond;3"));
        context3_0.addDefinition("mapKey", new Dtmi("dtmi:dtdl:property:mapKey;3"));
        context3_0.addDefinition("hectare", new Dtmi("dtmi:standard:unit:hectare;3"));
        context3_0.addDefinition("radianPerSecondSquared", new Dtmi("dtmi:standard:unit:radianPerSecondSquared;3"));
        context3_0.addDefinition("target", new Dtmi("dtmi:dtdl:property:target;3"));
        context3_0.addDefinition("astronomicalUnit", new Dtmi("dtmi:standard:unit:astronomicalUnit;3"));
        context3_0.addDefinition("Integer", new Dtmi("dtmi:dtdl:class:Integer;3"));
        context3_0.addDefinition("henry", new Dtmi("dtmi:standard:unit:henry;3"));
        context3_0.addDefinition("kilometrePerHour", new Dtmi("dtmi:standard:unit:kilometrePerHour;3"));
        context3_0.addDefinition("Command", new Dtmi("dtmi:dtdl:class:Command;3"));
        context3_0.addDefinition("micro", new Dtmi("dtmi:standard:unitprefix:micro;3"));
        context3_0.addDefinition("gramPerCubicMetre", new Dtmi("dtmi:standard:unit:gramPerCubicMetre;3"));
        context3_0.addDefinition("zebibitPerSecond", new Dtmi("dtmi:standard:unit:zebibitPerSecond;3"));
        context3_0.addDefinition("comment", new Dtmi("dtmi:dtdl:property:comment;3"));
        context3_0.addDefinition("time", new Dtmi("dtmi:dtdl:instance:Schema:time;3"));
        context3_0.addDefinition("watt", new Dtmi("dtmi:standard:unit:watt;3"));
        context3_0.addDefinition("kilometre", new Dtmi("dtmi:standard:unit:kilometre;3"));
        context3_0.addDefinition("Enum", new Dtmi("dtmi:dtdl:class:Enum;3"));
        context3_0.addDefinition("squareMillimetre", new Dtmi("dtmi:standard:unit:squareMillimetre;3"));
        context3_0.addDefinition("gibibitPerSecond", new Dtmi("dtmi:standard:unit:gibibitPerSecond;3"));
        context3_0.addDefinition("prefix", new Dtmi("dtmi:dtdl:property:prefix;3"));
        context3_0.addDefinition("zepto", new Dtmi("dtmi:standard:unitprefix:zepto;3"));
        context3_0.addDefinition("minMultiplicity", new Dtmi("dtmi:dtdl:property:minMultiplicity;3"));
        context3_0.addDefinition("giga", new Dtmi("dtmi:standard:unitprefix:giga;3"));
        context3_0.addDefinition("bit", new Dtmi("dtmi:standard:unit:bit;3"));
        context3_0.addDefinition("Density", new Dtmi("dtmi:standard:class:Density;3"));
        context3_0.addDefinition("DateTime", new Dtmi("dtmi:dtdl:class:DateTime;3"));
        context3_0.addDefinition("microampere", new Dtmi("dtmi:standard:unit:microampere;3"));
        context3_0.addDefinition("bytePerSecond", new Dtmi("dtmi:standard:unit:bytePerSecond;3"));
        context3_0.addDefinition("enumValue", new Dtmi("dtmi:dtdl:property:enumValue;3"));
        context3_0.addDefinition("gForce", new Dtmi("dtmi:standard:unit:gForce;3"));
        context3_0.addDefinition("peta", new Dtmi("dtmi:standard:unitprefix:peta;3"));
        context3_0.addDefinition("Boolean", new Dtmi("dtmi:dtdl:class:Boolean;3"));
        context3_0.addDefinition("kilogram", new Dtmi("dtmi:standard:unit:kilogram;3"));
        context3_0.addDefinition("BinaryUnit", new Dtmi("dtmi:standard:class:BinaryUnit;3"));
        context3_0.addDefinition("Distance", new Dtmi("dtmi:standard:class:Distance;3"));
        context3_0.addDefinition("enumValues", new Dtmi("dtmi:dtdl:property:enumValues;3"));
        context3_0.addDefinition("ChargeUnit", new Dtmi("dtmi:standard:class:ChargeUnit;3"));
        context3_0.addDefinition("metre", new Dtmi("dtmi:standard:unit:metre;3"));
        context3_0.addDefinition("kilogramPerCubicMetre", new Dtmi("dtmi:standard:unit:kilogramPerCubicMetre;3"));
        context3_0.addDefinition("double", new Dtmi("dtmi:dtdl:instance:Schema:double;3"));
        context3_0.addDefinition("byte", new Dtmi("dtmi:standard:unit:byte;3"));
        context3_0.addDefinition("DecimalPrefix", new Dtmi("dtmi:standard:class:DecimalPrefix;3"));
        context3_0.addDefinition("maxMultiplicity", new Dtmi("dtmi:dtdl:property:maxMultiplicity;3"));
        context3_0.addDefinition("litre", new Dtmi("dtmi:standard:unit:litre;3"));
        context3_0.addDefinition("yobibitPerSecond", new Dtmi("dtmi:standard:unit:yobibitPerSecond;3"));
        context3_0.addDefinition("Mass", new Dtmi("dtmi:standard:class:Mass;3"));
        context3_0.addDefinition("multiLineString", new Dtmi("dtmi:standard:schema:geospatial:multiLineString;3"));
        context3_0.addDefinition("contents", new Dtmi("dtmi:dtdl:property:contents;3"));
        context3_0.addDefinition("mebibit", new Dtmi("dtmi:standard:unit:mebibit;3"));
        context3_0.addDefinition("Object", new Dtmi("dtmi:dtdl:class:Object;3"));
        context3_0.addDefinition("PressureUnit", new Dtmi("dtmi:standard:class:PressureUnit;3"));
        context3_0.addDefinition("BinaryPrefix", new Dtmi("dtmi:standard:class:BinaryPrefix;3"));
        context3_0.addDefinition("MassFlowRateUnit", new Dtmi("dtmi:standard:class:MassFlowRateUnit;3"));
        context3_0.addDefinition("kilowattHour", new Dtmi("dtmi:standard:unit:kilowattHour;3"));
        context3_0.addDefinition("megawatt", new Dtmi("dtmi:standard:unit:megawatt;3"));
        context3_0.addDefinition("megajoule", new Dtmi("dtmi:standard:unit:megajoule;3"));
        context3_0.addDefinition("litrePerHour", new Dtmi("dtmi:standard:unit:litrePerHour;3"));
        context3_0.addDefinition("Map", new Dtmi("dtmi:dtdl:class:Map;3"));
        context3_0.addDefinition("Current", new Dtmi("dtmi:standard:class:Current;3"));
        context3_0.addDefinition("CurrentUnit", new Dtmi("dtmi:standard:class:CurrentUnit;3"));
        context3_0.addDefinition("Thrust", new Dtmi("dtmi:standard:class:Thrust;3"));
        context3_0.addDefinition("kiloohm", new Dtmi("dtmi:standard:unit:kiloohm;3"));
        context3_0.addDefinition("dateTime", new Dtmi("dtmi:dtdl:instance:Schema:dateTime;3"));
        context3_0.addDefinition("joule", new Dtmi("dtmi:standard:unit:joule;3"));
        context3_0.addDefinition("micrometre", new Dtmi("dtmi:standard:unit:micrometre;3"));
        context3_0.addDefinition("minuteOfArc", new Dtmi("dtmi:standard:unit:minuteOfArc;3"));
        context3_0.addDefinition("mebibitPerSecond", new Dtmi("dtmi:standard:unit:mebibitPerSecond;3"));
        context3_0.addDefinition("femto", new Dtmi("dtmi:standard:unitprefix:femto;3"));
        context3_0.addDefinition("microgram", new Dtmi("dtmi:standard:unit:microgram;3"));
        context3_0.addDefinition("pascal", new Dtmi("dtmi:standard:unit:pascal;3"));
        context3_0.addDefinition("millisecond", new Dtmi("dtmi:standard:unit:millisecond;3"));
        context3_0.addDefinition("candela", new Dtmi("dtmi:standard:unit:candela;3"));
        context3_0.addDefinition("SoundPressure", new Dtmi("dtmi:standard:class:SoundPressure;3"));
        context3_0.addDefinition("Unitless", new Dtmi("dtmi:standard:class:Unitless;3"));
        context3_0.addDefinition("degreeFahrenheit", new Dtmi("dtmi:standard:unit:degreeFahrenheit;3"));
        context3_0.addDefinition("mapValue", new Dtmi("dtmi:dtdl:property:mapValue;3"));
        context3_0.addDefinition("bitPerSecond", new Dtmi("dtmi:standard:unit:bitPerSecond;3"));
        context3_0.addDefinition("ton", new Dtmi("dtmi:standard:unit:ton;3"));
        context3_0.addDefinition("kilo", new Dtmi("dtmi:standard:unitprefix:kilo;3"));
        context3_0.addDefinition("revolutionPerSecond", new Dtmi("dtmi:standard:unit:revolutionPerSecond;3"));
        context3_0.addDefinition("Energy", new Dtmi("dtmi:standard:class:Energy;3"));
        context3_0.addDefinition("CommandType", new Dtmi("dtmi:dtdl:class:CommandType;3"));
        context3_0.addDefinition("VolumeFlowRate", new Dtmi("dtmi:standard:class:VolumeFlowRate;3"));
        context3_0.addDefinition("tebibitPerSecond", new Dtmi("dtmi:standard:unit:tebibitPerSecond;3"));
        context3_0.addDefinition("AreaUnit", new Dtmi("dtmi:standard:class:AreaUnit;3"));
        context3_0.addDefinition("Property", new Dtmi("dtmi:dtdl:class:Property;3"));
        context3_0.addDefinition("IlluminanceUnit", new Dtmi("dtmi:standard:class:IlluminanceUnit;3"));
        context3_0.addDefinition("gigawatt", new Dtmi("dtmi:standard:unit:gigawatt;3"));
        context3_0.addDefinition("CapacitanceUnit", new Dtmi("dtmi:standard:class:CapacitanceUnit;3"));
        context3_0.addDefinition("kibibytePerSecond", new Dtmi("dtmi:standard:unit:kibibytePerSecond;3"));
        context3_0.addDefinition("DecimalUnit", new Dtmi("dtmi:standard:class:DecimalUnit;3"));
        context3_0.addDefinition("milePerSecond", new Dtmi("dtmi:standard:unit:milePerSecond;3"));
        context3_0.addDefinition("SemanticUnit", new Dtmi("dtmi:dtdl:class:SemanticUnit;3"));
        context3_0.addDefinition("decibel", new Dtmi("dtmi:standard:unit:decibel;3"));
        context3_0.addDefinition("Luminance", new Dtmi("dtmi:standard:class:Luminance;3"));
        context3_0.addDefinition("CommandRequest", new Dtmi("dtmi:dtdl:class:CommandRequest;3"));
        context3_0.addDefinition("MapKey", new Dtmi("dtmi:dtdl:class:MapKey;3"));
        context3_0.addDefinition("Angle", new Dtmi("dtmi:standard:class:Angle;3"));
        context3_0.addDefinition("polygon", new Dtmi("dtmi:standard:schema:geospatial:polygon;3"));
        context3_0.addDefinition("milliohm", new Dtmi("dtmi:standard:unit:milliohm;3"));
        context3_0.addDefinition("Acceleration", new Dtmi("dtmi:standard:class:Acceleration;3"));
        context3_0.addDefinition("LuminousFluxUnit", new Dtmi("dtmi:standard:class:LuminousFluxUnit;3"));
        context3_0.addDefinition("Illuminance", new Dtmi("dtmi:standard:class:Illuminance;3"));
        context3_0.addDefinition("FrequencyUnit", new Dtmi("dtmi:standard:class:FrequencyUnit;3"));
        context3_0.addDefinition("date", new Dtmi("dtmi:dtdl:instance:Schema:date;3"));
        context3_0.addDefinition("kilowatt", new Dtmi("dtmi:standard:unit:kilowatt;3"));
        context3_0.addDefinition("mebibyte", new Dtmi("dtmi:standard:unit:mebibyte;3"));
        context3_0.addDefinition("Torque", new Dtmi("dtmi:standard:class:Torque;3"));
        context3_0.addDefinition("lumen", new Dtmi("dtmi:standard:unit:lumen;3"));
        context3_0.addDefinition("tesla", new Dtmi("dtmi:standard:unit:tesla;3"));
        context3_0.addDefinition("kilowattHourPerYear", new Dtmi("dtmi:standard:unit:kilowattHourPerYear;3"));
        context3_0.addDefinition("EnumValue", new Dtmi("dtmi:dtdl:class:EnumValue;3"));
        context3_0.addDefinition("Luminosity", new Dtmi("dtmi:standard:class:Luminosity;3"));
        context3_0.addDefinition("PrimitiveSchema", new Dtmi("dtmi:dtdl:class:PrimitiveSchema;3"));
        context3_0.addDefinition("integer", new Dtmi("dtmi:dtdl:instance:Schema:integer;3"));
        context3_0.addDefinition("Unit", new Dtmi("dtmi:dtdl:class:Unit;3"));
        context3_0.addDefinition("float", new Dtmi("dtmi:dtdl:instance:Schema:float;3"));
        context3_0.addDefinition("poundPerSquareInch", new Dtmi("dtmi:standard:unit:poundPerSquareInch;3"));
        context3_0.addDefinition("tebibyte", new Dtmi("dtmi:standard:unit:tebibyte;3"));
        context3_0.addDefinition("cubicCentimetre", new Dtmi("dtmi:standard:unit:cubicCentimetre;3"));
        context3_0.addDefinition("second", new Dtmi("dtmi:standard:unit:second;3"));
        context3_0.addDefinition("microhenry", new Dtmi("dtmi:standard:unit:microhenry;3"));
        context3_0.addDefinition("squareInch", new Dtmi("dtmi:standard:unit:squareInch;3"));
        context3_0.addDefinition("yocto", new Dtmi("dtmi:standard:unitprefix:yocto;3"));
        context3_0.addDefinition("LuminanceUnit", new Dtmi("dtmi:standard:class:LuminanceUnit;3"));
        context3_0.addDefinition("VolumeUnit", new Dtmi("dtmi:standard:class:VolumeUnit;3"));
        context3_0.addDefinition("AngularAccelerationUnit", new Dtmi("dtmi:standard:class:AngularAccelerationUnit;3"));
        context3_0.addDefinition("megaelectronvolt", new Dtmi("dtmi:standard:unit:megaelectronvolt;3"));
        context3_0.addDefinition("millilitre", new Dtmi("dtmi:standard:unit:millilitre;3"));
        context3_0.addDefinition("nauticalMile", new Dtmi("dtmi:standard:unit:nauticalMile;3"));
        context3_0.addDefinition("cubicFoot", new Dtmi("dtmi:standard:unit:cubicFoot;3"));
        context3_0.addDefinition("day", new Dtmi("dtmi:standard:unit:day;3"));
        context3_0.addDefinition("exponent", new Dtmi("dtmi:dtdl:property:exponent;3"));
        context3_0.addDefinition("SemanticType", new Dtmi("dtmi:dtdl:class:SemanticType;3"));
        context3_0.addDefinition("exbibit", new Dtmi("dtmi:standard:unit:exbibit;3"));
        context3_0.addDefinition("millifarad", new Dtmi("dtmi:standard:unit:millifarad;3"));
        context3_0.addDefinition("electronvolt", new Dtmi("dtmi:standard:unit:electronvolt;3"));
        context3_0.addDefinition("AngularAcceleration", new Dtmi("dtmi:standard:class:AngularAcceleration;3"));
        context3_0.addDefinition("ElectricCharge", new Dtmi("dtmi:standard:class:ElectricCharge;3"));
        context3_0.addDefinition("VoltageUnit", new Dtmi("dtmi:standard:class:VoltageUnit;3"));
        context3_0.addDefinition("Double", new Dtmi("dtmi:dtdl:class:Double;3"));
        context3_0.addDefinition("Pressure", new Dtmi("dtmi:standard:class:Pressure;3"));
        context3_0.addDefinition("LengthUnit", new Dtmi("dtmi:standard:class:LengthUnit;3"));
        context3_0.addDefinition("fluidOunce", new Dtmi("dtmi:standard:unit:fluidOunce;3"));
        context3_0.addDefinition("TemporalSchema", new Dtmi("dtmi:dtdl:class:TemporalSchema;3"));
        context3_0.addDefinition("Resistance", new Dtmi("dtmi:standard:class:Resistance;3"));
        context3_0.addDefinition("millimetre", new Dtmi("dtmi:standard:unit:millimetre;3"));
        context3_0.addDefinition("unit", new Dtmi("dtmi:dtdl:property:unit;3"));
        context3_0.addDefinition("hertz", new Dtmi("dtmi:standard:unit:hertz;3"));
        context3_0.addDefinition("revolutionPerMinute", new Dtmi("dtmi:standard:unit:revolutionPerMinute;3"));
        context3_0.addDefinition("centimetrePerSecond", new Dtmi("dtmi:standard:unit:centimetrePerSecond;3"));
        context3_0.addDefinition("ohm", new Dtmi("dtmi:standard:unit:ohm;3"));
        context3_0.addDefinition("Content", new Dtmi("dtmi:dtdl:class:Content;3"));
        context3_0.addDefinition("DataRate", new Dtmi("dtmi:standard:class:DataRate;3"));
        context3_0.addDefinition("metrePerHour", new Dtmi("dtmi:standard:unit:metrePerHour;3"));
        context3_0.addDefinition("deka", new Dtmi("dtmi:standard:unitprefix:deka;3"));
        context3_0.addDefinition("squareFoot", new Dtmi("dtmi:standard:unit:squareFoot;3"));
        context3_0.addDefinition("litrePerSecond", new Dtmi("dtmi:standard:unit:litrePerSecond;3"));
        context3_0.addDefinition("gramPerSecond", new Dtmi("dtmi:standard:unit:gramPerSecond;3"));
        context3_0.addDefinition("weber", new Dtmi("dtmi:standard:unit:weber;3"));
        context3_0.addDefinition("centimetrePerSecondSquared", new Dtmi("dtmi:standard:unit:centimetrePerSecondSquared;3"));
        context3_0.addDefinition("MassFlowRate", new Dtmi("dtmi:standard:class:MassFlowRate;3"));
        context3_0.addDefinition("request", new Dtmi("dtmi:dtdl:property:request;3"));
        context3_0.addDefinition("Temperature", new Dtmi("dtmi:standard:class:Temperature;3"));
        context3_0.addDefinition("commandType", new Dtmi("dtmi:dtdl:property:commandType;3"));
        context3_0.addDefinition("yobibit", new Dtmi("dtmi:standard:unit:yobibit;3"));
        context3_0.addDefinition("AdjunctType", new Dtmi("dtmi:dtdl:class:AdjunctType;3"));
        context3_0.addDefinition("atto", new Dtmi("dtmi:standard:unitprefix:atto;3"));
        context3_0.addDefinition("TorqueUnit", new Dtmi("dtmi:standard:class:TorqueUnit;3"));
        context3_0.addDefinition("multiPolygon", new Dtmi("dtmi:standard:schema:geospatial:multiPolygon;3"));
        context3_0.addDefinition("percent", new Dtmi("dtmi:standard:unit:percent;3"));
        context3_0.addDefinition("point", new Dtmi("dtmi:standard:schema:geospatial:point;3"));
        context3_0.addDefinition("TimeSpan", new Dtmi("dtmi:standard:class:TimeSpan;3"));
        context3_0.addDefinition("unity", new Dtmi("dtmi:standard:unit:unity;3"));
        context3_0.addDefinition("hour", new Dtmi("dtmi:standard:unit:hour;3"));
        context3_0.addDefinition("asynchronous", new Dtmi("dtmi:dtdl:instance:CommandType:asynchronous;3"));
        context3_0.addDefinition("yotta", new Dtmi("dtmi:standard:unitprefix:yotta;3"));
        context3_0.addDefinition("Voltage", new Dtmi("dtmi:standard:class:Voltage;3"));
        context3_0.addDefinition("tebibit", new Dtmi("dtmi:standard:unit:tebibit;3"));
        context3_0.addDefinition("kibibitPerSecond", new Dtmi("dtmi:standard:unit:kibibitPerSecond;3"));
        context3_0.addDefinition("PowerUnit", new Dtmi("dtmi:standard:class:PowerUnit;3"));
        context3_0.addDefinition("yobi", new Dtmi("dtmi:standard:unitprefix:yobi;3"));
        context3_0.addDefinition("LuminousFlux", new Dtmi("dtmi:standard:class:LuminousFlux;3"));
        context3_0.addDefinition("LuminousIntensityUnit", new Dtmi("dtmi:standard:class:LuminousIntensityUnit;3"));
        context3_0.addDefinition("millihenry", new Dtmi("dtmi:standard:unit:millihenry;3"));
        context3_0.addDefinition("hecto", new Dtmi("dtmi:standard:unitprefix:hecto;3"));
        context3_0.addDefinition("ComplexSchema", new Dtmi("dtmi:dtdl:class:ComplexSchema;3"));
        context3_0.addDefinition("mebi", new Dtmi("dtmi:standard:unitprefix:mebi;3"));
        context3_0.addDefinition("Velocity", new Dtmi("dtmi:standard:class:Velocity;3"));
        context3_0.addDefinition("microwatt", new Dtmi("dtmi:standard:unit:microwatt;3"));
        context3_0.addDefinition("Date", new Dtmi("dtmi:dtdl:class:Date;3"));
        context3_0.addDefinition("zebibyte", new Dtmi("dtmi:standard:unit:zebibyte;3"));
        context3_0.addDefinition("minute", new Dtmi("dtmi:standard:unit:minute;3"));
        context3_0.addDefinition("Array", new Dtmi("dtmi:dtdl:class:Array;3"));
        context3_0.addDefinition("radianPerSecond", new Dtmi("dtmi:standard:unit:radianPerSecond;3"));
        context3_0.addDefinition("cubicInch", new Dtmi("dtmi:standard:unit:cubicInch;3"));
        context3_0.addDefinition("boolean", new Dtmi("dtmi:dtdl:instance:Schema:boolean;3"));
        context3_0.addDefinition("kilohertz", new Dtmi("dtmi:standard:unit:kilohertz;3"));
        context3_0.addDefinition("response", new Dtmi("dtmi:dtdl:property:response;3"));
        context3_0.addDefinition("kilogramPerSecond", new Dtmi("dtmi:standard:unit:kilogramPerSecond;3"));
        context3_0.addDefinition("VelocityUnit", new Dtmi("dtmi:standard:class:VelocityUnit;3"));
        context3_0.addDefinition("acre", new Dtmi("dtmi:standard:unit:acre;3"));
        context3_0.addDefinition("Capacitance", new Dtmi("dtmi:standard:class:Capacitance;3"));
        context3_0.addDefinition("bottomUnit", new Dtmi("dtmi:dtdl:property:bottomUnit;3"));
        context3_0.addDefinition("ounce", new Dtmi("dtmi:standard:unit:ounce;3"));
        context3_0.addDefinition("mebibytePerSecond", new Dtmi("dtmi:standard:unit:mebibytePerSecond;3"));
        context3_0.addDefinition("exbibytePerSecond", new Dtmi("dtmi:standard:unit:exbibytePerSecond;3"));
        context3_0.addDefinition("lineString", new Dtmi("dtmi:standard:schema:geospatial:lineString;3"));
        context3_0.addDefinition("milli", new Dtmi("dtmi:standard:unitprefix:milli;3"));
        context3_0.addDefinition("picofarad", new Dtmi("dtmi:standard:unit:picofarad;3"));
        context3_0.addDefinition("milliwatt", new Dtmi("dtmi:standard:unit:milliwatt;3"));
        context3_0.addDefinition("properties", new Dtmi("dtmi:dtdl:property:properties;3"));
        context3_0.addDefinition("squareMetre", new Dtmi("dtmi:standard:unit:squareMetre;3"));
        versionedContexts.add(context3_0);

        return new ContextHistory(versionedContexts);
    }
}
