/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.imagebuilder.v2019_02_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.imagebuilder.v2019_02_01_preview.implementation.VirtualMachineImagesManager;
import java.util.List;
import com.microsoft.azure.management.imagebuilder.v2019_02_01_preview.implementation.ImageTemplateInner;

/**
 * Type representing ImageTemplate.
 */
public interface ImageTemplate extends HasInner<ImageTemplateInner>, Resource, GroupableResourceCore<VirtualMachineImagesManager, ImageTemplateInner>, HasResourceGroup, Refreshable<ImageTemplate>, Updatable<ImageTemplate.Update>, HasManager<VirtualMachineImagesManager> {
    /**
     * @return the customize value.
     */
    List<ImageTemplateCustomizer> customize();

    /**
     * @return the distribute value.
     */
    List<ImageTemplateDistributor> distribute();

    /**
     * @return the lastRunStatus value.
     */
    ImageTemplateLastRunStatus lastRunStatus();

    /**
     * @return the provisioningError value.
     */
    ProvisioningError provisioningError();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the source value.
     */
    ImageTemplateSource source();

    /**
     * The entirety of the ImageTemplate definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithDistribute, DefinitionStages.WithSource, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ImageTemplate definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ImageTemplate definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the ImageTemplate definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithDistribute> {
        }

        /**
         * The stage of the imagetemplate definition allowing to specify Distribute.
         */
        interface WithDistribute {
           /**
            * Specifies distribute.
            * @param distribute The distribution targets where the image output needs to go to
            * @return the next definition stage
*/
            WithSource withDistribute(List<ImageTemplateDistributor> distribute);
        }

        /**
         * The stage of the imagetemplate definition allowing to specify Source.
         */
        interface WithSource {
           /**
            * Specifies source.
            * @param source Specifies the properties used to describe the source image
            * @return the next definition stage
*/
            WithCreate withSource(ImageTemplateSource source);
        }

        /**
         * The stage of the imagetemplate definition allowing to specify Customize.
         */
        interface WithCustomize {
            /**
             * Specifies customize.
             * @param customize Specifies the properties used to describe the customization steps of the image, like Image source etc
             * @return the next definition stage
             */
            WithCreate withCustomize(List<ImageTemplateCustomizer> customize);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ImageTemplate>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithCustomize {
        }
    }
    /**
     * The template for a ImageTemplate update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ImageTemplate>, Resource.UpdateWithTags<Update>, UpdateStages.WithCustomize {
    }

    /**
     * Grouping of ImageTemplate update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the imagetemplate update allowing to specify Customize.
         */
        interface WithCustomize {
            /**
             * Specifies customize.
             * @param customize Specifies the properties used to describe the customization steps of the image, like Image source etc
             * @return the next update stage
             */
            Update withCustomize(List<ImageTemplateCustomizer> customize);
        }

    }
}
