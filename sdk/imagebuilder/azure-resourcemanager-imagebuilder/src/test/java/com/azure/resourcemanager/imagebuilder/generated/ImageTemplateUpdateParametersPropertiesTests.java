// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateDistributor;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateUpdateParametersProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImageTemplateUpdateParametersPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageTemplateUpdateParametersProperties model = BinaryData.fromString(
            "{\"distribute\":[{\"type\":\"ImageTemplateDistributor\",\"runOutputName\":\"wzwbnguitn\",\"artifactTags\":{\"x\":\"zga\",\"hr\":\"fizuckyf\"}},{\"type\":\"ImageTemplateDistributor\",\"runOutputName\":\"idf\",\"artifactTags\":{\"dkfthwxmnt\":\"dzuhtymwi\",\"aop\":\"i\",\"jcmmxdcufufsrp\":\"km\"}}]}")
            .toObject(ImageTemplateUpdateParametersProperties.class);
        Assertions.assertEquals("wzwbnguitn", model.distribute().get(0).runOutputName());
        Assertions.assertEquals("zga", model.distribute().get(0).artifactTags().get("x"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageTemplateUpdateParametersProperties model
            = new ImageTemplateUpdateParametersProperties().withDistribute(Arrays.asList(
                new ImageTemplateDistributor().withRunOutputName("wzwbnguitn")
                    .withArtifactTags(mapOf("x", "zga", "hr", "fizuckyf")),
                new ImageTemplateDistributor().withRunOutputName("idf")
                    .withArtifactTags(mapOf("dkfthwxmnt", "dzuhtymwi", "aop", "i", "jcmmxdcufufsrp", "km"))));
        model = BinaryData.fromObject(model).toObject(ImageTemplateUpdateParametersProperties.class);
        Assertions.assertEquals("wzwbnguitn", model.distribute().get(0).runOutputName());
        Assertions.assertEquals("zga", model.distribute().get(0).artifactTags().get("x"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
