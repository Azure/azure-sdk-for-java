// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateDistributor;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateIdentity;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateUpdateParameters;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateUpdateParametersProperties;
import com.azure.resourcemanager.imagebuilder.models.ResourceIdentityType;
import com.azure.resourcemanager.imagebuilder.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImageTemplateUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageTemplateUpdateParameters model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"kjfkg\":{\"principalId\":\"ozwyiftyhxhuro\",\"clientId\":\"tyxolniwpwc\"}}},\"tags\":{\"ckbasyypndd\":\"xklrypl\"},\"properties\":{\"distribute\":[{\"type\":\"ImageTemplateDistributor\",\"runOutputName\":\"bacphejko\",\"artifactTags\":{\"i\":\"qgoulznd\",\"dgak\":\"wyqkgfgibm\",\"ytb\":\"qsrxybzqqed\"}},{\"type\":\"ImageTemplateDistributor\",\"runOutputName\":\"iqfouflmmnkz\",\"artifactTags\":{\"b\":\"dmgloug\",\"ta\":\"wtmutduq\"}},{\"type\":\"ImageTemplateDistributor\",\"runOutputName\":\"spwgcuertumkdosv\",\"artifactTags\":{\"bjf\":\"bmdg\",\"bexppb\":\"dgmb\",\"rolfpfp\":\"tq\"}},{\"type\":\"ImageTemplateDistributor\",\"runOutputName\":\"algbquxigjyjg\",\"artifactTags\":{\"fhrtxilnerkujysv\":\"o\",\"fqawrlyxw\":\"eju\",\"xgjvtbv\":\"kcprbnw\",\"uouq\":\"ysszdnrujqguh\"}}]}}")
            .toObject(ImageTemplateUpdateParameters.class);
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xklrypl", model.tags().get("ckbasyypndd"));
        Assertions.assertEquals("bacphejko", model.properties().distribute().get(0).runOutputName());
        Assertions.assertEquals("qgoulznd", model.properties().distribute().get(0).artifactTags().get("i"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageTemplateUpdateParameters model = new ImageTemplateUpdateParameters()
            .withIdentity(new ImageTemplateIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("kjfkg", new UserAssignedIdentity())))
            .withTags(mapOf("ckbasyypndd", "xklrypl"))
            .withProperties(new ImageTemplateUpdateParametersProperties().withDistribute(Arrays.asList(
                new ImageTemplateDistributor().withRunOutputName("bacphejko")
                    .withArtifactTags(mapOf("i", "qgoulznd", "dgak", "wyqkgfgibm", "ytb", "qsrxybzqqed")),
                new ImageTemplateDistributor().withRunOutputName("iqfouflmmnkz")
                    .withArtifactTags(mapOf("b", "dmgloug", "ta", "wtmutduq")),
                new ImageTemplateDistributor().withRunOutputName("spwgcuertumkdosv")
                    .withArtifactTags(mapOf("bjf", "bmdg", "bexppb", "dgmb", "rolfpfp", "tq")),
                new ImageTemplateDistributor().withRunOutputName("algbquxigjyjg").withArtifactTags(mapOf(
                    "fhrtxilnerkujysv", "o", "fqawrlyxw", "eju", "xgjvtbv", "kcprbnw", "uouq", "ysszdnrujqguh")))));
        model = BinaryData.fromObject(model).toObject(ImageTemplateUpdateParameters.class);
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xklrypl", model.tags().get("ckbasyypndd"));
        Assertions.assertEquals("bacphejko", model.properties().distribute().get(0).runOutputName());
        Assertions.assertEquals("qgoulznd", model.properties().distribute().get(0).artifactTags().get("i"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
