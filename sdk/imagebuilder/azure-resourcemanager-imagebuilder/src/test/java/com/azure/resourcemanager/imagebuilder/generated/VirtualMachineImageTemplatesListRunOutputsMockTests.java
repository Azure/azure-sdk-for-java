// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.imagebuilder.ImageBuilderManager;
import com.azure.resourcemanager.imagebuilder.models.RunOutput;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VirtualMachineImageTemplatesListRunOutputsMockTests {
    @Test
    public void testListRunOutputs() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"artifactId\":\"ualupjmkh\",\"artifactUri\":\"obbc\",\"provisioningState\":\"Deleting\"},\"id\":\"tjrip\",\"name\":\"rbpbewtghfgblcg\",\"type\":\"xzvlvqhjkbegib\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ImageBuilderManager manager = ImageBuilderManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RunOutput> response = manager.virtualMachineImageTemplates()
            .listRunOutputs("vylwzbtdhxuj", "nbmpowuwprzq", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ualupjmkh", response.iterator().next().artifactId());
        Assertions.assertEquals("obbc", response.iterator().next().artifactUri());
    }
}
