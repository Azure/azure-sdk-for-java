// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateManagedImageDistributor;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImageTemplateManagedImageDistributorTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageTemplateManagedImageDistributor model = BinaryData.fromString(
            "{\"type\":\"ManagedImage\",\"imageId\":\"e\",\"location\":\"csonpclhoco\",\"runOutputName\":\"slkevle\",\"artifactTags\":{\"ithlvmezyvshxm\":\"fbuhfmvfaxkffe\",\"gigr\":\"sbbzo\"}}")
            .toObject(ImageTemplateManagedImageDistributor.class);
        Assertions.assertEquals("slkevle", model.runOutputName());
        Assertions.assertEquals("fbuhfmvfaxkffe", model.artifactTags().get("ithlvmezyvshxm"));
        Assertions.assertEquals("e", model.imageId());
        Assertions.assertEquals("csonpclhoco", model.location());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageTemplateManagedImageDistributor model = new ImageTemplateManagedImageDistributor()
            .withRunOutputName("slkevle").withArtifactTags(mapOf("ithlvmezyvshxm", "fbuhfmvfaxkffe", "gigr", "sbbzo"))
            .withImageId("e").withLocation("csonpclhoco");
        model = BinaryData.fromObject(model).toObject(ImageTemplateManagedImageDistributor.class);
        Assertions.assertEquals("slkevle", model.runOutputName());
        Assertions.assertEquals("fbuhfmvfaxkffe", model.artifactTags().get("ithlvmezyvshxm"));
        Assertions.assertEquals("e", model.imageId());
        Assertions.assertEquals("csonpclhoco", model.location());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
