// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.imagebuilder.models.DistributeVersioner;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateSharedImageDistributor;
import com.azure.resourcemanager.imagebuilder.models.SharedImageStorageAccountType;
import com.azure.resourcemanager.imagebuilder.models.TargetRegion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImageTemplateSharedImageDistributorTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageTemplateSharedImageDistributor model = BinaryData.fromString(
            "{\"type\":\"SharedImage\",\"galleryImageId\":\"wburvjxxjnspydpt\",\"replicationRegions\":[\"nkoukn\",\"udwtiukbl\",\"ngkpocipazy\"],\"excludeFromLatest\":true,\"storageAccountType\":\"Premium_LRS\",\"targetRegions\":[{\"name\":\"jnpiucgyg\",\"replicaCount\":1701243846,\"storageAccountType\":\"Premium_LRS\"}],\"versioning\":{\"scheme\":\"DistributeVersioner\"},\"runOutputName\":\"yp\",\"artifactTags\":{\"zcdrqjsdpydnfyhx\":\"p\",\"ifsjttgzfbishcb\":\"eoejzic\",\"alpbuxwgipwhon\":\"hajdeyeamdpha\",\"kix\":\"wkgshwa\"}}")
            .toObject(ImageTemplateSharedImageDistributor.class);
        Assertions.assertEquals("yp", model.runOutputName());
        Assertions.assertEquals("p", model.artifactTags().get("zcdrqjsdpydnfyhx"));
        Assertions.assertEquals("wburvjxxjnspydpt", model.galleryImageId());
        Assertions.assertEquals("nkoukn", model.replicationRegions().get(0));
        Assertions.assertEquals(true, model.excludeFromLatest());
        Assertions.assertEquals(SharedImageStorageAccountType.PREMIUM_LRS, model.storageAccountType());
        Assertions.assertEquals("jnpiucgyg", model.targetRegions().get(0).name());
        Assertions.assertEquals(1701243846, model.targetRegions().get(0).replicaCount());
        Assertions.assertEquals(SharedImageStorageAccountType.PREMIUM_LRS,
            model.targetRegions().get(0).storageAccountType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageTemplateSharedImageDistributor model = new ImageTemplateSharedImageDistributor().withRunOutputName("yp")
            .withArtifactTags(mapOf("zcdrqjsdpydnfyhx", "p", "ifsjttgzfbishcb", "eoejzic", "alpbuxwgipwhon",
                "hajdeyeamdpha", "kix", "wkgshwa"))
            .withGalleryImageId("wburvjxxjnspydpt")
            .withReplicationRegions(Arrays.asList("nkoukn", "udwtiukbl", "ngkpocipazy")).withExcludeFromLatest(true)
            .withStorageAccountType(SharedImageStorageAccountType.PREMIUM_LRS)
            .withTargetRegions(Arrays.asList(new TargetRegion().withName("jnpiucgyg").withReplicaCount(1701243846)
                .withStorageAccountType(SharedImageStorageAccountType.PREMIUM_LRS)))
            .withVersioning(new DistributeVersioner());
        model = BinaryData.fromObject(model).toObject(ImageTemplateSharedImageDistributor.class);
        Assertions.assertEquals("yp", model.runOutputName());
        Assertions.assertEquals("p", model.artifactTags().get("zcdrqjsdpydnfyhx"));
        Assertions.assertEquals("wburvjxxjnspydpt", model.galleryImageId());
        Assertions.assertEquals("nkoukn", model.replicationRegions().get(0));
        Assertions.assertEquals(true, model.excludeFromLatest());
        Assertions.assertEquals(SharedImageStorageAccountType.PREMIUM_LRS, model.storageAccountType());
        Assertions.assertEquals("jnpiucgyg", model.targetRegions().get(0).name());
        Assertions.assertEquals(1701243846, model.targetRegions().get(0).replicaCount());
        Assertions.assertEquals(SharedImageStorageAccountType.PREMIUM_LRS,
            model.targetRegions().get(0).storageAccountType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
