// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.imagebuilder.models.DistributeVersioner;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateSharedImageDistributor;
import com.azure.resourcemanager.imagebuilder.models.SharedImageStorageAccountType;
import com.azure.resourcemanager.imagebuilder.models.TargetRegion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImageTemplateSharedImageDistributorTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageTemplateSharedImageDistributor model = BinaryData.fromString(
            "{\"type\":\"SharedImage\",\"galleryImageId\":\"qnwvlrya\",\"replicationRegions\":[\"heun\",\"mqhgyxzkonocuk\",\"klyaxuconu\"],\"excludeFromLatest\":false,\"storageAccountType\":\"Standard_ZRS\",\"targetRegions\":[{\"name\":\"ypewrmjmwvvjekt\",\"replicaCount\":2107215650,\"storageAccountType\":\"Standard_ZRS\"}],\"versioning\":{\"scheme\":\"DistributeVersioner\"},\"runOutputName\":\"wlrsffrzpwv\",\"artifactTags\":{\"biqylihkaet\":\"q\",\"fcivfsnkym\":\"kt\",\"jf\":\"ctq\",\"fuwutttxf\":\"ebrjcxe\"}}")
            .toObject(ImageTemplateSharedImageDistributor.class);
        Assertions.assertEquals("wlrsffrzpwv", model.runOutputName());
        Assertions.assertEquals("q", model.artifactTags().get("biqylihkaet"));
        Assertions.assertEquals("qnwvlrya", model.galleryImageId());
        Assertions.assertEquals("heun", model.replicationRegions().get(0));
        Assertions.assertEquals(false, model.excludeFromLatest());
        Assertions.assertEquals(SharedImageStorageAccountType.STANDARD_ZRS, model.storageAccountType());
        Assertions.assertEquals("ypewrmjmwvvjekt", model.targetRegions().get(0).name());
        Assertions.assertEquals(2107215650, model.targetRegions().get(0).replicaCount());
        Assertions.assertEquals(SharedImageStorageAccountType.STANDARD_ZRS,
            model.targetRegions().get(0).storageAccountType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageTemplateSharedImageDistributor model
            = new ImageTemplateSharedImageDistributor().withRunOutputName("wlrsffrzpwv")
                .withArtifactTags(mapOf("biqylihkaet", "q", "fcivfsnkym", "kt", "jf", "ctq", "fuwutttxf", "ebrjcxe"))
                .withGalleryImageId("qnwvlrya")
                .withReplicationRegions(Arrays.asList("heun", "mqhgyxzkonocuk", "klyaxuconu"))
                .withExcludeFromLatest(false)
                .withStorageAccountType(SharedImageStorageAccountType.STANDARD_ZRS)
                .withTargetRegions(Arrays.asList(new TargetRegion().withName("ypewrmjmwvvjekt")
                    .withReplicaCount(2107215650)
                    .withStorageAccountType(SharedImageStorageAccountType.STANDARD_ZRS)))
                .withVersioning(new DistributeVersioner());
        model = BinaryData.fromObject(model).toObject(ImageTemplateSharedImageDistributor.class);
        Assertions.assertEquals("wlrsffrzpwv", model.runOutputName());
        Assertions.assertEquals("q", model.artifactTags().get("biqylihkaet"));
        Assertions.assertEquals("qnwvlrya", model.galleryImageId());
        Assertions.assertEquals("heun", model.replicationRegions().get(0));
        Assertions.assertEquals(false, model.excludeFromLatest());
        Assertions.assertEquals(SharedImageStorageAccountType.STANDARD_ZRS, model.storageAccountType());
        Assertions.assertEquals("ypewrmjmwvvjekt", model.targetRegions().get(0).name());
        Assertions.assertEquals(2107215650, model.targetRegions().get(0).replicaCount());
        Assertions.assertEquals(SharedImageStorageAccountType.STANDARD_ZRS,
            model.targetRegions().get(0).storageAccountType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
