// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateLastRunStatus;
import com.azure.resourcemanager.imagebuilder.models.RunState;
import com.azure.resourcemanager.imagebuilder.models.RunSubState;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ImageTemplateLastRunStatusTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImageTemplateLastRunStatus model = BinaryData.fromString(
            "{\"startTime\":\"2021-11-20T09:27:06Z\",\"endTime\":\"2021-12-05T12:00:33Z\",\"runState\":\"PartiallySucceeded\",\"runSubState\":\"Optimizing\",\"message\":\"gc\"}")
            .toObject(ImageTemplateLastRunStatus.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-20T09:27:06Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-05T12:00:33Z"), model.endTime());
        Assertions.assertEquals(RunState.PARTIALLY_SUCCEEDED, model.runState());
        Assertions.assertEquals(RunSubState.OPTIMIZING, model.runSubState());
        Assertions.assertEquals("gc", model.message());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImageTemplateLastRunStatus model
            = new ImageTemplateLastRunStatus().withStartTime(OffsetDateTime.parse("2021-11-20T09:27:06Z"))
                .withEndTime(OffsetDateTime.parse("2021-12-05T12:00:33Z"))
                .withRunState(RunState.PARTIALLY_SUCCEEDED)
                .withRunSubState(RunSubState.OPTIMIZING)
                .withMessage("gc");
        model = BinaryData.fromObject(model).toObject(ImageTemplateLastRunStatus.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-20T09:27:06Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-05T12:00:33Z"), model.endTime());
        Assertions.assertEquals(RunState.PARTIALLY_SUCCEEDED, model.runState());
        Assertions.assertEquals(RunSubState.OPTIMIZING, model.runSubState());
        Assertions.assertEquals("gc", model.message());
    }
}
