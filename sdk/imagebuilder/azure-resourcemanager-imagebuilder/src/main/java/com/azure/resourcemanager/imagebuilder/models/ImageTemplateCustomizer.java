// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes a unit of image customization.
 */
@Fluent
public class ImageTemplateCustomizer implements JsonSerializable<ImageTemplateCustomizer> {
    /*
     * The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
     */
    private String type = "ImageTemplateCustomizer";

    /*
     * Friendly Name to provide context on what this customization step does
     */
    private String name;

    /**
     * Creates an instance of ImageTemplateCustomizer class.
     */
    public ImageTemplateCustomizer() {
    }

    /**
     * Get the type property: The type of customization tool you want to use on the Image. For example, "Shell" can be
     * shell customizer.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: Friendly Name to provide context on what this customization step does.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Friendly Name to provide context on what this customization step does.
     * 
     * @param name the name value to set.
     * @return the ImageTemplateCustomizer object itself.
     */
    public ImageTemplateCustomizer withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageTemplateCustomizer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageTemplateCustomizer if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageTemplateCustomizer.
     */
    public static ImageTemplateCustomizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Shell".equals(discriminatorValue)) {
                    return ImageTemplateShellCustomizer.fromJson(readerToUse.reset());
                } else if ("WindowsRestart".equals(discriminatorValue)) {
                    return ImageTemplateRestartCustomizer.fromJson(readerToUse.reset());
                } else if ("WindowsUpdate".equals(discriminatorValue)) {
                    return ImageTemplateWindowsUpdateCustomizer.fromJson(readerToUse.reset());
                } else if ("PowerShell".equals(discriminatorValue)) {
                    return ImageTemplatePowerShellCustomizer.fromJson(readerToUse.reset());
                } else if ("File".equals(discriminatorValue)) {
                    return ImageTemplateFileCustomizer.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ImageTemplateCustomizer fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageTemplateCustomizer deserializedImageTemplateCustomizer = new ImageTemplateCustomizer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedImageTemplateCustomizer.type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedImageTemplateCustomizer.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageTemplateCustomizer;
        });
    }
}
