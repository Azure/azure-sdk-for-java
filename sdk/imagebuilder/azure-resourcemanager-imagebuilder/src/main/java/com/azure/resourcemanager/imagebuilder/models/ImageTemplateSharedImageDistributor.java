// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Distribute via Azure Compute Gallery.
 */
@Fluent
public final class ImageTemplateSharedImageDistributor extends ImageTemplateDistributor {
    /*
     * Type of distribution.
     */
    private String type = "SharedImage";

    /*
     * Resource Id of the Azure Compute Gallery image
     */
    private String galleryImageId;

    /*
     * [Deprecated] A list of regions that the image will be replicated to. This list can be specified only if
     * targetRegions is not specified. This field is deprecated - use targetRegions instead.
     */
    private List<String> replicationRegions;

    /*
     * Flag that indicates whether created image version should be excluded from latest. Omit to use the default
     * (false).
     */
    private Boolean excludeFromLatest;

    /*
     * [Deprecated] Storage account type to be used to store the shared image. Omit to use the default (Standard_LRS).
     * This field can be specified only if replicationRegions is specified. This field is deprecated - use targetRegions
     * instead.
     */
    private SharedImageStorageAccountType storageAccountType;

    /*
     * The target regions where the distributed Image Version is going to be replicated to. This object supersedes
     * replicationRegions and can be specified only if replicationRegions is not specified.
     */
    private List<TargetRegion> targetRegions;

    /*
     * Describes how to generate new x.y.z version number for distribution.
     */
    private DistributeVersioner versioning;

    /**
     * Creates an instance of ImageTemplateSharedImageDistributor class.
     */
    public ImageTemplateSharedImageDistributor() {
    }

    /**
     * Get the type property: Type of distribution.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the galleryImageId property: Resource Id of the Azure Compute Gallery image.
     * 
     * @return the galleryImageId value.
     */
    public String galleryImageId() {
        return this.galleryImageId;
    }

    /**
     * Set the galleryImageId property: Resource Id of the Azure Compute Gallery image.
     * 
     * @param galleryImageId the galleryImageId value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withGalleryImageId(String galleryImageId) {
        this.galleryImageId = galleryImageId;
        return this;
    }

    /**
     * Get the replicationRegions property: [Deprecated] A list of regions that the image will be replicated to. This
     * list can be specified only if targetRegions is not specified. This field is deprecated - use targetRegions
     * instead.
     * 
     * @return the replicationRegions value.
     */
    public List<String> replicationRegions() {
        return this.replicationRegions;
    }

    /**
     * Set the replicationRegions property: [Deprecated] A list of regions that the image will be replicated to. This
     * list can be specified only if targetRegions is not specified. This field is deprecated - use targetRegions
     * instead.
     * 
     * @param replicationRegions the replicationRegions value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withReplicationRegions(List<String> replicationRegions) {
        this.replicationRegions = replicationRegions;
        return this;
    }

    /**
     * Get the excludeFromLatest property: Flag that indicates whether created image version should be excluded from
     * latest. Omit to use the default (false).
     * 
     * @return the excludeFromLatest value.
     */
    public Boolean excludeFromLatest() {
        return this.excludeFromLatest;
    }

    /**
     * Set the excludeFromLatest property: Flag that indicates whether created image version should be excluded from
     * latest. Omit to use the default (false).
     * 
     * @param excludeFromLatest the excludeFromLatest value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withExcludeFromLatest(Boolean excludeFromLatest) {
        this.excludeFromLatest = excludeFromLatest;
        return this;
    }

    /**
     * Get the storageAccountType property: [Deprecated] Storage account type to be used to store the shared image. Omit
     * to use the default (Standard_LRS). This field can be specified only if replicationRegions is specified. This
     * field is deprecated - use targetRegions instead.
     * 
     * @return the storageAccountType value.
     */
    public SharedImageStorageAccountType storageAccountType() {
        return this.storageAccountType;
    }

    /**
     * Set the storageAccountType property: [Deprecated] Storage account type to be used to store the shared image. Omit
     * to use the default (Standard_LRS). This field can be specified only if replicationRegions is specified. This
     * field is deprecated - use targetRegions instead.
     * 
     * @param storageAccountType the storageAccountType value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor
        withStorageAccountType(SharedImageStorageAccountType storageAccountType) {
        this.storageAccountType = storageAccountType;
        return this;
    }

    /**
     * Get the targetRegions property: The target regions where the distributed Image Version is going to be replicated
     * to. This object supersedes replicationRegions and can be specified only if replicationRegions is not specified.
     * 
     * @return the targetRegions value.
     */
    public List<TargetRegion> targetRegions() {
        return this.targetRegions;
    }

    /**
     * Set the targetRegions property: The target regions where the distributed Image Version is going to be replicated
     * to. This object supersedes replicationRegions and can be specified only if replicationRegions is not specified.
     * 
     * @param targetRegions the targetRegions value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withTargetRegions(List<TargetRegion> targetRegions) {
        this.targetRegions = targetRegions;
        return this;
    }

    /**
     * Get the versioning property: Describes how to generate new x.y.z version number for distribution.
     * 
     * @return the versioning value.
     */
    public DistributeVersioner versioning() {
        return this.versioning;
    }

    /**
     * Set the versioning property: Describes how to generate new x.y.z version number for distribution.
     * 
     * @param versioning the versioning value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withVersioning(DistributeVersioner versioning) {
        this.versioning = versioning;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageTemplateSharedImageDistributor withRunOutputName(String runOutputName) {
        super.withRunOutputName(runOutputName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageTemplateSharedImageDistributor withArtifactTags(Map<String, String> artifactTags) {
        super.withArtifactTags(artifactTags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (galleryImageId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property galleryImageId in model ImageTemplateSharedImageDistributor"));
        }
        if (targetRegions() != null) {
            targetRegions().forEach(e -> e.validate());
        }
        if (versioning() != null) {
            versioning().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImageTemplateSharedImageDistributor.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("runOutputName", runOutputName());
        jsonWriter.writeMapField("artifactTags", artifactTags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("galleryImageId", this.galleryImageId);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("replicationRegions", this.replicationRegions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("excludeFromLatest", this.excludeFromLatest);
        jsonWriter.writeStringField("storageAccountType",
            this.storageAccountType == null ? null : this.storageAccountType.toString());
        jsonWriter.writeArrayField("targetRegions", this.targetRegions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("versioning", this.versioning);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageTemplateSharedImageDistributor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageTemplateSharedImageDistributor if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageTemplateSharedImageDistributor.
     */
    public static ImageTemplateSharedImageDistributor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageTemplateSharedImageDistributor deserializedImageTemplateSharedImageDistributor
                = new ImageTemplateSharedImageDistributor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runOutputName".equals(fieldName)) {
                    deserializedImageTemplateSharedImageDistributor.withRunOutputName(reader.getString());
                } else if ("artifactTags".equals(fieldName)) {
                    Map<String, String> artifactTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedImageTemplateSharedImageDistributor.withArtifactTags(artifactTags);
                } else if ("galleryImageId".equals(fieldName)) {
                    deserializedImageTemplateSharedImageDistributor.galleryImageId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedImageTemplateSharedImageDistributor.type = reader.getString();
                } else if ("replicationRegions".equals(fieldName)) {
                    List<String> replicationRegions = reader.readArray(reader1 -> reader1.getString());
                    deserializedImageTemplateSharedImageDistributor.replicationRegions = replicationRegions;
                } else if ("excludeFromLatest".equals(fieldName)) {
                    deserializedImageTemplateSharedImageDistributor.excludeFromLatest
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("storageAccountType".equals(fieldName)) {
                    deserializedImageTemplateSharedImageDistributor.storageAccountType
                        = SharedImageStorageAccountType.fromString(reader.getString());
                } else if ("targetRegions".equals(fieldName)) {
                    List<TargetRegion> targetRegions = reader.readArray(reader1 -> TargetRegion.fromJson(reader1));
                    deserializedImageTemplateSharedImageDistributor.targetRegions = targetRegions;
                } else if ("versioning".equals(fieldName)) {
                    deserializedImageTemplateSharedImageDistributor.versioning = DistributeVersioner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageTemplateSharedImageDistributor;
        });
    }
}
