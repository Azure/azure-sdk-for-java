// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;

/** Distribute via Shared Image Gallery. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("SharedImage")
@Fluent
public final class ImageTemplateSharedImageDistributor extends ImageTemplateDistributor {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ImageTemplateSharedImageDistributor.class);

    /*
     * Resource Id of the Shared Image Gallery image
     */
    @JsonProperty(value = "galleryImageId", required = true)
    private String galleryImageId;

    /*
     * A list of regions that the image will be replicated to
     */
    @JsonProperty(value = "replicationRegions", required = true)
    private List<String> replicationRegions;

    /*
     * Flag that indicates whether created image version should be excluded
     * from latest. Omit to use the default (false).
     */
    @JsonProperty(value = "excludeFromLatest")
    private Boolean excludeFromLatest;

    /*
     * Storage account type to be used to store the shared image. Omit to use
     * the default (Standard_LRS).
     */
    @JsonProperty(value = "storageAccountType")
    private SharedImageStorageAccountType storageAccountType;

    /**
     * Get the galleryImageId property: Resource Id of the Shared Image Gallery image.
     *
     * @return the galleryImageId value.
     */
    public String galleryImageId() {
        return this.galleryImageId;
    }

    /**
     * Set the galleryImageId property: Resource Id of the Shared Image Gallery image.
     *
     * @param galleryImageId the galleryImageId value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withGalleryImageId(String galleryImageId) {
        this.galleryImageId = galleryImageId;
        return this;
    }

    /**
     * Get the replicationRegions property: A list of regions that the image will be replicated to.
     *
     * @return the replicationRegions value.
     */
    public List<String> replicationRegions() {
        return this.replicationRegions;
    }

    /**
     * Set the replicationRegions property: A list of regions that the image will be replicated to.
     *
     * @param replicationRegions the replicationRegions value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withReplicationRegions(List<String> replicationRegions) {
        this.replicationRegions = replicationRegions;
        return this;
    }

    /**
     * Get the excludeFromLatest property: Flag that indicates whether created image version should be excluded from
     * latest. Omit to use the default (false).
     *
     * @return the excludeFromLatest value.
     */
    public Boolean excludeFromLatest() {
        return this.excludeFromLatest;
    }

    /**
     * Set the excludeFromLatest property: Flag that indicates whether created image version should be excluded from
     * latest. Omit to use the default (false).
     *
     * @param excludeFromLatest the excludeFromLatest value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withExcludeFromLatest(Boolean excludeFromLatest) {
        this.excludeFromLatest = excludeFromLatest;
        return this;
    }

    /**
     * Get the storageAccountType property: Storage account type to be used to store the shared image. Omit to use the
     * default (Standard_LRS).
     *
     * @return the storageAccountType value.
     */
    public SharedImageStorageAccountType storageAccountType() {
        return this.storageAccountType;
    }

    /**
     * Set the storageAccountType property: Storage account type to be used to store the shared image. Omit to use the
     * default (Standard_LRS).
     *
     * @param storageAccountType the storageAccountType value to set.
     * @return the ImageTemplateSharedImageDistributor object itself.
     */
    public ImageTemplateSharedImageDistributor withStorageAccountType(
        SharedImageStorageAccountType storageAccountType) {
        this.storageAccountType = storageAccountType;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ImageTemplateSharedImageDistributor withRunOutputName(String runOutputName) {
        super.withRunOutputName(runOutputName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ImageTemplateSharedImageDistributor withArtifactTags(Map<String, String> artifactTags) {
        super.withArtifactTags(artifactTags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (galleryImageId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property galleryImageId in model ImageTemplateSharedImageDistributor"));
        }
        if (replicationRegions() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property replicationRegions in model ImageTemplateSharedImageDistributor"));
        }
    }
}
