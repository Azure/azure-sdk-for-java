// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Purchase plan configuration for platform image.
 */
@Fluent
public final class PlatformImagePurchasePlan implements JsonSerializable<PlatformImagePurchasePlan> {
    /*
     * Name of the purchase plan.
     */
    private String planName;

    /*
     * Product of the purchase plan.
     */
    private String planProduct;

    /*
     * Publisher of the purchase plan.
     */
    private String planPublisher;

    /**
     * Creates an instance of PlatformImagePurchasePlan class.
     */
    public PlatformImagePurchasePlan() {
    }

    /**
     * Get the planName property: Name of the purchase plan.
     * 
     * @return the planName value.
     */
    public String planName() {
        return this.planName;
    }

    /**
     * Set the planName property: Name of the purchase plan.
     * 
     * @param planName the planName value to set.
     * @return the PlatformImagePurchasePlan object itself.
     */
    public PlatformImagePurchasePlan withPlanName(String planName) {
        this.planName = planName;
        return this;
    }

    /**
     * Get the planProduct property: Product of the purchase plan.
     * 
     * @return the planProduct value.
     */
    public String planProduct() {
        return this.planProduct;
    }

    /**
     * Set the planProduct property: Product of the purchase plan.
     * 
     * @param planProduct the planProduct value to set.
     * @return the PlatformImagePurchasePlan object itself.
     */
    public PlatformImagePurchasePlan withPlanProduct(String planProduct) {
        this.planProduct = planProduct;
        return this;
    }

    /**
     * Get the planPublisher property: Publisher of the purchase plan.
     * 
     * @return the planPublisher value.
     */
    public String planPublisher() {
        return this.planPublisher;
    }

    /**
     * Set the planPublisher property: Publisher of the purchase plan.
     * 
     * @param planPublisher the planPublisher value to set.
     * @return the PlatformImagePurchasePlan object itself.
     */
    public PlatformImagePurchasePlan withPlanPublisher(String planPublisher) {
        this.planPublisher = planPublisher;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (planName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property planName in model PlatformImagePurchasePlan"));
        }
        if (planProduct() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property planProduct in model PlatformImagePurchasePlan"));
        }
        if (planPublisher() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property planPublisher in model PlatformImagePurchasePlan"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PlatformImagePurchasePlan.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("planName", this.planName);
        jsonWriter.writeStringField("planProduct", this.planProduct);
        jsonWriter.writeStringField("planPublisher", this.planPublisher);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlatformImagePurchasePlan from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlatformImagePurchasePlan if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PlatformImagePurchasePlan.
     */
    public static PlatformImagePurchasePlan fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlatformImagePurchasePlan deserializedPlatformImagePurchasePlan = new PlatformImagePurchasePlan();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("planName".equals(fieldName)) {
                    deserializedPlatformImagePurchasePlan.planName = reader.getString();
                } else if ("planProduct".equals(fieldName)) {
                    deserializedPlatformImagePurchasePlan.planProduct = reader.getString();
                } else if ("planPublisher".equals(fieldName)) {
                    deserializedPlatformImagePurchasePlan.planPublisher = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlatformImagePurchasePlan;
        });
    }
}
