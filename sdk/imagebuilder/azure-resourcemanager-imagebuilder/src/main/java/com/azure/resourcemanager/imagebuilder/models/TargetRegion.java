// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the target region information.
 */
@Fluent
public final class TargetRegion implements JsonSerializable<TargetRegion> {
    /*
     * The name of the region.
     */
    private String name;

    /*
     * The number of replicas of the Image Version to be created in this region. Omit to use the default (1).
     */
    private Integer replicaCount;

    /*
     * Specifies the storage account type to be used to store the image in this region. Omit to use the default
     * (Standard_LRS).
     */
    private SharedImageStorageAccountType storageAccountType;

    /**
     * Creates an instance of TargetRegion class.
     */
    public TargetRegion() {
    }

    /**
     * Get the name property: The name of the region.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the region.
     * 
     * @param name the name value to set.
     * @return the TargetRegion object itself.
     */
    public TargetRegion withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the replicaCount property: The number of replicas of the Image Version to be created in this region. Omit to
     * use the default (1).
     * 
     * @return the replicaCount value.
     */
    public Integer replicaCount() {
        return this.replicaCount;
    }

    /**
     * Set the replicaCount property: The number of replicas of the Image Version to be created in this region. Omit to
     * use the default (1).
     * 
     * @param replicaCount the replicaCount value to set.
     * @return the TargetRegion object itself.
     */
    public TargetRegion withReplicaCount(Integer replicaCount) {
        this.replicaCount = replicaCount;
        return this;
    }

    /**
     * Get the storageAccountType property: Specifies the storage account type to be used to store the image in this
     * region. Omit to use the default (Standard_LRS).
     * 
     * @return the storageAccountType value.
     */
    public SharedImageStorageAccountType storageAccountType() {
        return this.storageAccountType;
    }

    /**
     * Set the storageAccountType property: Specifies the storage account type to be used to store the image in this
     * region. Omit to use the default (Standard_LRS).
     * 
     * @param storageAccountType the storageAccountType value to set.
     * @return the TargetRegion object itself.
     */
    public TargetRegion withStorageAccountType(SharedImageStorageAccountType storageAccountType) {
        this.storageAccountType = storageAccountType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model TargetRegion"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TargetRegion.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("replicaCount", this.replicaCount);
        jsonWriter.writeStringField("storageAccountType",
            this.storageAccountType == null ? null : this.storageAccountType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetRegion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetRegion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TargetRegion.
     */
    public static TargetRegion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetRegion deserializedTargetRegion = new TargetRegion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedTargetRegion.name = reader.getString();
                } else if ("replicaCount".equals(fieldName)) {
                    deserializedTargetRegion.replicaCount = reader.getNullable(JsonReader::getInt);
                } else if ("storageAccountType".equals(fieldName)) {
                    deserializedTargetRegion.storageAccountType
                        = SharedImageStorageAccountType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetRegion;
        });
    }
}
