// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies optimization to be performed on image.
 */
@Fluent
public final class ImageTemplatePropertiesOptimize implements JsonSerializable<ImageTemplatePropertiesOptimize> {
    /*
     * Optimization is applied on the image for a faster VM boot.
     */
    private ImageTemplatePropertiesOptimizeVmBoot vmBoot;

    /**
     * Creates an instance of ImageTemplatePropertiesOptimize class.
     */
    public ImageTemplatePropertiesOptimize() {
    }

    /**
     * Get the vmBoot property: Optimization is applied on the image for a faster VM boot.
     * 
     * @return the vmBoot value.
     */
    public ImageTemplatePropertiesOptimizeVmBoot vmBoot() {
        return this.vmBoot;
    }

    /**
     * Set the vmBoot property: Optimization is applied on the image for a faster VM boot.
     * 
     * @param vmBoot the vmBoot value to set.
     * @return the ImageTemplatePropertiesOptimize object itself.
     */
    public ImageTemplatePropertiesOptimize withVmBoot(ImageTemplatePropertiesOptimizeVmBoot vmBoot) {
        this.vmBoot = vmBoot;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmBoot() != null) {
            vmBoot().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("vmBoot", this.vmBoot);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageTemplatePropertiesOptimize from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageTemplatePropertiesOptimize if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageTemplatePropertiesOptimize.
     */
    public static ImageTemplatePropertiesOptimize fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageTemplatePropertiesOptimize deserializedImageTemplatePropertiesOptimize
                = new ImageTemplatePropertiesOptimize();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmBoot".equals(fieldName)) {
                    deserializedImageTemplatePropertiesOptimize.vmBoot
                        = ImageTemplatePropertiesOptimizeVmBoot.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageTemplatePropertiesOptimize;
        });
    }
}
