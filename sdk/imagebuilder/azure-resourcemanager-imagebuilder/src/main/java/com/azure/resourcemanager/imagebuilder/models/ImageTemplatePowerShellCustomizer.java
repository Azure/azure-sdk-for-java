// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of
 * 'scriptUri' or 'inline' can be specified.
 */
@Fluent
public final class ImageTemplatePowerShellCustomizer extends ImageTemplateCustomizer {
    /*
     * The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
     */
    private String type = "PowerShell";

    /*
     * URI of the PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
     */
    private String scriptUri;

    /*
     * SHA256 checksum of the power shell script provided in the scriptUri field above
     */
    private String sha256Checksum;

    /*
     * Array of PowerShell commands to execute
     */
    private List<String> inline;

    /*
     * If specified, the PowerShell script will be run with elevated privileges
     */
    private Boolean runElevated;

    /*
     * If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be
     * true when the runElevated field above is set to true.
     */
    private Boolean runAsSystem;

    /*
     * Valid exit codes for the PowerShell script. [Default: 0]
     */
    private List<Integer> validExitCodes;

    /**
     * Creates an instance of ImageTemplatePowerShellCustomizer class.
     */
    public ImageTemplatePowerShellCustomizer() {
    }

    /**
     * Get the type property: The type of customization tool you want to use on the Image. For example, "Shell" can be
     * shell customizer.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the scriptUri property: URI of the PowerShell script to be run for customizing. It can be a github link, SAS
     * URI for Azure Storage, etc.
     * 
     * @return the scriptUri value.
     */
    public String scriptUri() {
        return this.scriptUri;
    }

    /**
     * Set the scriptUri property: URI of the PowerShell script to be run for customizing. It can be a github link, SAS
     * URI for Azure Storage, etc.
     * 
     * @param scriptUri the scriptUri value to set.
     * @return the ImageTemplatePowerShellCustomizer object itself.
     */
    public ImageTemplatePowerShellCustomizer withScriptUri(String scriptUri) {
        this.scriptUri = scriptUri;
        return this;
    }

    /**
     * Get the sha256Checksum property: SHA256 checksum of the power shell script provided in the scriptUri field above.
     * 
     * @return the sha256Checksum value.
     */
    public String sha256Checksum() {
        return this.sha256Checksum;
    }

    /**
     * Set the sha256Checksum property: SHA256 checksum of the power shell script provided in the scriptUri field above.
     * 
     * @param sha256Checksum the sha256Checksum value to set.
     * @return the ImageTemplatePowerShellCustomizer object itself.
     */
    public ImageTemplatePowerShellCustomizer withSha256Checksum(String sha256Checksum) {
        this.sha256Checksum = sha256Checksum;
        return this;
    }

    /**
     * Get the inline property: Array of PowerShell commands to execute.
     * 
     * @return the inline value.
     */
    public List<String> inline() {
        return this.inline;
    }

    /**
     * Set the inline property: Array of PowerShell commands to execute.
     * 
     * @param inline the inline value to set.
     * @return the ImageTemplatePowerShellCustomizer object itself.
     */
    public ImageTemplatePowerShellCustomizer withInline(List<String> inline) {
        this.inline = inline;
        return this;
    }

    /**
     * Get the runElevated property: If specified, the PowerShell script will be run with elevated privileges.
     * 
     * @return the runElevated value.
     */
    public Boolean runElevated() {
        return this.runElevated;
    }

    /**
     * Set the runElevated property: If specified, the PowerShell script will be run with elevated privileges.
     * 
     * @param runElevated the runElevated value to set.
     * @return the ImageTemplatePowerShellCustomizer object itself.
     */
    public ImageTemplatePowerShellCustomizer withRunElevated(Boolean runElevated) {
        this.runElevated = runElevated;
        return this;
    }

    /**
     * Get the runAsSystem property: If specified, the PowerShell script will be run with elevated privileges using the
     * Local System user. Can only be true when the runElevated field above is set to true.
     * 
     * @return the runAsSystem value.
     */
    public Boolean runAsSystem() {
        return this.runAsSystem;
    }

    /**
     * Set the runAsSystem property: If specified, the PowerShell script will be run with elevated privileges using the
     * Local System user. Can only be true when the runElevated field above is set to true.
     * 
     * @param runAsSystem the runAsSystem value to set.
     * @return the ImageTemplatePowerShellCustomizer object itself.
     */
    public ImageTemplatePowerShellCustomizer withRunAsSystem(Boolean runAsSystem) {
        this.runAsSystem = runAsSystem;
        return this;
    }

    /**
     * Get the validExitCodes property: Valid exit codes for the PowerShell script. [Default: 0].
     * 
     * @return the validExitCodes value.
     */
    public List<Integer> validExitCodes() {
        return this.validExitCodes;
    }

    /**
     * Set the validExitCodes property: Valid exit codes for the PowerShell script. [Default: 0].
     * 
     * @param validExitCodes the validExitCodes value to set.
     * @return the ImageTemplatePowerShellCustomizer object itself.
     */
    public ImageTemplatePowerShellCustomizer withValidExitCodes(List<Integer> validExitCodes) {
        this.validExitCodes = validExitCodes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageTemplatePowerShellCustomizer withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("scriptUri", this.scriptUri);
        jsonWriter.writeStringField("sha256Checksum", this.sha256Checksum);
        jsonWriter.writeArrayField("inline", this.inline, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("runElevated", this.runElevated);
        jsonWriter.writeBooleanField("runAsSystem", this.runAsSystem);
        jsonWriter.writeArrayField("validExitCodes", this.validExitCodes,
            (writer, element) -> writer.writeInt(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageTemplatePowerShellCustomizer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageTemplatePowerShellCustomizer if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageTemplatePowerShellCustomizer.
     */
    public static ImageTemplatePowerShellCustomizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageTemplatePowerShellCustomizer deserializedImageTemplatePowerShellCustomizer
                = new ImageTemplatePowerShellCustomizer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedImageTemplatePowerShellCustomizer.withName(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedImageTemplatePowerShellCustomizer.type = reader.getString();
                } else if ("scriptUri".equals(fieldName)) {
                    deserializedImageTemplatePowerShellCustomizer.scriptUri = reader.getString();
                } else if ("sha256Checksum".equals(fieldName)) {
                    deserializedImageTemplatePowerShellCustomizer.sha256Checksum = reader.getString();
                } else if ("inline".equals(fieldName)) {
                    List<String> inline = reader.readArray(reader1 -> reader1.getString());
                    deserializedImageTemplatePowerShellCustomizer.inline = inline;
                } else if ("runElevated".equals(fieldName)) {
                    deserializedImageTemplatePowerShellCustomizer.runElevated
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("runAsSystem".equals(fieldName)) {
                    deserializedImageTemplatePowerShellCustomizer.runAsSystem
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("validExitCodes".equals(fieldName)) {
                    List<Integer> validExitCodes = reader.readArray(reader1 -> reader1.getInt());
                    deserializedImageTemplatePowerShellCustomizer.validExitCodes = validExitCodes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageTemplatePowerShellCustomizer;
        });
    }
}
