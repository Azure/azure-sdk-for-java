// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Uploads files to VMs (Linux, Windows). Corresponds to Packer file provisioner.
 */
@Fluent
public final class ImageTemplateFileCustomizer extends ImageTemplateCustomizer {
    /*
     * The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
     */
    private String type = "File";

    /*
     * The URI of the file to be uploaded for customizing the VM. It can be a github link, SAS URI for Azure Storage,
     * etc
     */
    private String sourceUri;

    /*
     * SHA256 checksum of the file provided in the sourceUri field above
     */
    private String sha256Checksum;

    /*
     * The absolute path to a file (with nested directory structures already created) where the file (from sourceUri)
     * will be uploaded to in the VM
     */
    private String destination;

    /**
     * Creates an instance of ImageTemplateFileCustomizer class.
     */
    public ImageTemplateFileCustomizer() {
    }

    /**
     * Get the type property: The type of customization tool you want to use on the Image. For example, "Shell" can be
     * shell customizer.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the sourceUri property: The URI of the file to be uploaded for customizing the VM. It can be a github link,
     * SAS URI for Azure Storage, etc.
     * 
     * @return the sourceUri value.
     */
    public String sourceUri() {
        return this.sourceUri;
    }

    /**
     * Set the sourceUri property: The URI of the file to be uploaded for customizing the VM. It can be a github link,
     * SAS URI for Azure Storage, etc.
     * 
     * @param sourceUri the sourceUri value to set.
     * @return the ImageTemplateFileCustomizer object itself.
     */
    public ImageTemplateFileCustomizer withSourceUri(String sourceUri) {
        this.sourceUri = sourceUri;
        return this;
    }

    /**
     * Get the sha256Checksum property: SHA256 checksum of the file provided in the sourceUri field above.
     * 
     * @return the sha256Checksum value.
     */
    public String sha256Checksum() {
        return this.sha256Checksum;
    }

    /**
     * Set the sha256Checksum property: SHA256 checksum of the file provided in the sourceUri field above.
     * 
     * @param sha256Checksum the sha256Checksum value to set.
     * @return the ImageTemplateFileCustomizer object itself.
     */
    public ImageTemplateFileCustomizer withSha256Checksum(String sha256Checksum) {
        this.sha256Checksum = sha256Checksum;
        return this;
    }

    /**
     * Get the destination property: The absolute path to a file (with nested directory structures already created)
     * where the file (from sourceUri) will be uploaded to in the VM.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: The absolute path to a file (with nested directory structures already created)
     * where the file (from sourceUri) will be uploaded to in the VM.
     * 
     * @param destination the destination value to set.
     * @return the ImageTemplateFileCustomizer object itself.
     */
    public ImageTemplateFileCustomizer withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageTemplateFileCustomizer withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("sourceUri", this.sourceUri);
        jsonWriter.writeStringField("sha256Checksum", this.sha256Checksum);
        jsonWriter.writeStringField("destination", this.destination);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageTemplateFileCustomizer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageTemplateFileCustomizer if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageTemplateFileCustomizer.
     */
    public static ImageTemplateFileCustomizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageTemplateFileCustomizer deserializedImageTemplateFileCustomizer = new ImageTemplateFileCustomizer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedImageTemplateFileCustomizer.withName(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedImageTemplateFileCustomizer.type = reader.getString();
                } else if ("sourceUri".equals(fieldName)) {
                    deserializedImageTemplateFileCustomizer.sourceUri = reader.getString();
                } else if ("sha256Checksum".equals(fieldName)) {
                    deserializedImageTemplateFileCustomizer.sha256Checksum = reader.getString();
                } else if ("destination".equals(fieldName)) {
                    deserializedImageTemplateFileCustomizer.destination = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageTemplateFileCustomizer;
        });
    }
}
