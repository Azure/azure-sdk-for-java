// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes an image source from [Azure Gallery
 * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
 */
@Fluent
public final class ImageTemplatePlatformImageSource extends ImageTemplateSource {
    /*
     * Specifies the type of source image you want to start with.
     */
    private String type = "PlatformImage";

    /*
     * Image Publisher in [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    private String publisher;

    /*
     * Image offer from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    private String offer;

    /*
     * Image sku from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    private String sku;

    /*
     * Image version from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). If 'latest' is specified here,
     * the version is evaluated when the image build takes place, not when the template is submitted.
     */
    private String version;

    /*
     * Image version from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). This readonly field differs from
     * 'version', only if the value specified in 'version' field is 'latest'.
     */
    private String exactVersion;

    /*
     * Optional configuration of purchase plan for platform image.
     */
    private PlatformImagePurchasePlan planInfo;

    /**
     * Creates an instance of ImageTemplatePlatformImageSource class.
     */
    public ImageTemplatePlatformImageSource() {
    }

    /**
     * Get the type property: Specifies the type of source image you want to start with.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the publisher property: Image Publisher in [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: Image Publisher in [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     * 
     * @param publisher the publisher value to set.
     * @return the ImageTemplatePlatformImageSource object itself.
     */
    public ImageTemplatePlatformImageSource withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Get the offer property: Image offer from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     * 
     * @return the offer value.
     */
    public String offer() {
        return this.offer;
    }

    /**
     * Set the offer property: Image offer from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     * 
     * @param offer the offer value to set.
     * @return the ImageTemplatePlatformImageSource object itself.
     */
    public ImageTemplatePlatformImageSource withOffer(String offer) {
        this.offer = offer;
        return this;
    }

    /**
     * Get the sku property: Image sku from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Image sku from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     * 
     * @param sku the sku value to set.
     * @return the ImageTemplatePlatformImageSource object itself.
     */
    public ImageTemplatePlatformImageSource withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the version property: Image version from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). If 'latest' is specified here,
     * the version is evaluated when the image build takes place, not when the template is submitted.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Image version from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). If 'latest' is specified here,
     * the version is evaluated when the image build takes place, not when the template is submitted.
     * 
     * @param version the version value to set.
     * @return the ImageTemplatePlatformImageSource object itself.
     */
    public ImageTemplatePlatformImageSource withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the exactVersion property: Image version from the [Azure Gallery
     * Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). This readonly field differs from
     * 'version', only if the value specified in 'version' field is 'latest'.
     * 
     * @return the exactVersion value.
     */
    public String exactVersion() {
        return this.exactVersion;
    }

    /**
     * Get the planInfo property: Optional configuration of purchase plan for platform image.
     * 
     * @return the planInfo value.
     */
    public PlatformImagePurchasePlan planInfo() {
        return this.planInfo;
    }

    /**
     * Set the planInfo property: Optional configuration of purchase plan for platform image.
     * 
     * @param planInfo the planInfo value to set.
     * @return the ImageTemplatePlatformImageSource object itself.
     */
    public ImageTemplatePlatformImageSource withPlanInfo(PlatformImagePurchasePlan planInfo) {
        this.planInfo = planInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (planInfo() != null) {
            planInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("publisher", this.publisher);
        jsonWriter.writeStringField("offer", this.offer);
        jsonWriter.writeStringField("sku", this.sku);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeJsonField("planInfo", this.planInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageTemplatePlatformImageSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageTemplatePlatformImageSource if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageTemplatePlatformImageSource.
     */
    public static ImageTemplatePlatformImageSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageTemplatePlatformImageSource deserializedImageTemplatePlatformImageSource
                = new ImageTemplatePlatformImageSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedImageTemplatePlatformImageSource.type = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedImageTemplatePlatformImageSource.publisher = reader.getString();
                } else if ("offer".equals(fieldName)) {
                    deserializedImageTemplatePlatformImageSource.offer = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedImageTemplatePlatformImageSource.sku = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedImageTemplatePlatformImageSource.version = reader.getString();
                } else if ("exactVersion".equals(fieldName)) {
                    deserializedImageTemplatePlatformImageSource.exactVersion = reader.getString();
                } else if ("planInfo".equals(fieldName)) {
                    deserializedImageTemplatePlatformImageSource.planInfo = PlatformImagePurchasePlan.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageTemplatePlatformImageSource;
        });
    }
}
