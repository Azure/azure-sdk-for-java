// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.imagebuilder.models.ProvisioningState;
import java.io.IOException;

/**
 * Describes the properties of a run output.
 */
@Fluent
public final class RunOutputProperties implements JsonSerializable<RunOutputProperties> {
    /*
     * The resource id of the artifact.
     */
    private String artifactId;

    /*
     * The location URI of the artifact.
     */
    private String artifactUri;

    /*
     * Provisioning state of the resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of RunOutputProperties class.
     */
    public RunOutputProperties() {
    }

    /**
     * Get the artifactId property: The resource id of the artifact.
     * 
     * @return the artifactId value.
     */
    public String artifactId() {
        return this.artifactId;
    }

    /**
     * Set the artifactId property: The resource id of the artifact.
     * 
     * @param artifactId the artifactId value to set.
     * @return the RunOutputProperties object itself.
     */
    public RunOutputProperties withArtifactId(String artifactId) {
        this.artifactId = artifactId;
        return this;
    }

    /**
     * Get the artifactUri property: The location URI of the artifact.
     * 
     * @return the artifactUri value.
     */
    public String artifactUri() {
        return this.artifactUri;
    }

    /**
     * Set the artifactUri property: The location URI of the artifact.
     * 
     * @param artifactUri the artifactUri value to set.
     * @return the RunOutputProperties object itself.
     */
    public RunOutputProperties withArtifactUri(String artifactUri) {
        this.artifactUri = artifactUri;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("artifactId", this.artifactId);
        jsonWriter.writeStringField("artifactUri", this.artifactUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunOutputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunOutputProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RunOutputProperties.
     */
    public static RunOutputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunOutputProperties deserializedRunOutputProperties = new RunOutputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifactId".equals(fieldName)) {
                    deserializedRunOutputProperties.artifactId = reader.getString();
                } else if ("artifactUri".equals(fieldName)) {
                    deserializedRunOutputProperties.artifactUri = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRunOutputProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRunOutputProperties;
        });
    }
}
