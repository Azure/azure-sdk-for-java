// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateAutoRun;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateCustomizer;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateDistributor;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateLastRunStatus;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplatePropertiesErrorHandling;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplatePropertiesOptimize;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplatePropertiesValidate;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateSource;
import com.azure.resourcemanager.imagebuilder.models.ImageTemplateVmProfile;
import com.azure.resourcemanager.imagebuilder.models.ProvisioningError;
import com.azure.resourcemanager.imagebuilder.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Describes the properties of an image template.
 */
@Fluent
public final class ImageTemplateProperties implements JsonSerializable<ImageTemplateProperties> {
    /*
     * Specifies the properties used to describe the source image.
     */
    private ImageTemplateSource source;

    /*
     * Specifies the properties used to describe the customization steps of the image, like Image source etc
     */
    private List<ImageTemplateCustomizer> customize;

    /*
     * Specifies optimization to be performed on image.
     */
    private ImageTemplatePropertiesOptimize optimize;

    /*
     * Configuration options and list of validations to be performed on the resulting image.
     */
    private ImageTemplatePropertiesValidate validation;

    /*
     * The distribution targets where the image output needs to go to.
     */
    private List<ImageTemplateDistributor> distribute;

    /*
     * Error handling options upon a build failure
     */
    private ImageTemplatePropertiesErrorHandling errorHandling;

    /*
     * Provisioning state of the resource
     */
    private ProvisioningState provisioningState;

    /*
     * Provisioning error, if any
     */
    private ProvisioningError provisioningError;

    /*
     * State of 'run' that is currently executing or was last executed.
     */
    private ImageTemplateLastRunStatus lastRunStatus;

    /*
     * Maximum duration to wait while building the image template (includes all customizations, optimization,
     * validations, and distributions). Omit or specify 0 to use the default (4 hours).
     */
    private Integer buildTimeoutInMinutes;

    /*
     * Describes how virtual machine is set up to build images
     */
    private ImageTemplateVmProfile vmProfile;

    /*
     * The staging resource group id in the same subscription as the image template that will be used to build the
     * image. If this field is empty, a resource group with a random name will be created. If the resource group
     * specified in this field doesn't exist, it will be created with the same name. If the resource group specified
     * exists, it must be empty and in the same region as the image template. The resource group created will be deleted
     * during template deletion if this field is empty or the resource group specified doesn't exist, but if the
     * resource group specified exists the resources created in the resource group will be deleted during template
     * deletion and the resource group itself will remain.
     */
    private String stagingResourceGroup;

    /*
     * The staging resource group id in the same subscription as the image template that will be used to build the
     * image. This read-only field differs from 'stagingResourceGroup' only if the value specified in the
     * 'stagingResourceGroup' field is empty.
     */
    private String exactStagingResourceGroup;

    /*
     * Indicates whether or not to automatically run the image template build on template creation or update.
     */
    private ImageTemplateAutoRun autoRun;

    /*
     * Tags that will be applied to the resource group and/or resources created by the service.
     */
    private Map<String, String> managedResourceTags;

    /**
     * Creates an instance of ImageTemplateProperties class.
     */
    public ImageTemplateProperties() {
    }

    /**
     * Get the source property: Specifies the properties used to describe the source image.
     * 
     * @return the source value.
     */
    public ImageTemplateSource source() {
        return this.source;
    }

    /**
     * Set the source property: Specifies the properties used to describe the source image.
     * 
     * @param source the source value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withSource(ImageTemplateSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the customize property: Specifies the properties used to describe the customization steps of the image, like
     * Image source etc.
     * 
     * @return the customize value.
     */
    public List<ImageTemplateCustomizer> customize() {
        return this.customize;
    }

    /**
     * Set the customize property: Specifies the properties used to describe the customization steps of the image, like
     * Image source etc.
     * 
     * @param customize the customize value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withCustomize(List<ImageTemplateCustomizer> customize) {
        this.customize = customize;
        return this;
    }

    /**
     * Get the optimize property: Specifies optimization to be performed on image.
     * 
     * @return the optimize value.
     */
    public ImageTemplatePropertiesOptimize optimize() {
        return this.optimize;
    }

    /**
     * Set the optimize property: Specifies optimization to be performed on image.
     * 
     * @param optimize the optimize value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withOptimize(ImageTemplatePropertiesOptimize optimize) {
        this.optimize = optimize;
        return this;
    }

    /**
     * Get the validation property: Configuration options and list of validations to be performed on the resulting
     * image.
     * 
     * @return the validation value.
     */
    public ImageTemplatePropertiesValidate validation() {
        return this.validation;
    }

    /**
     * Set the validation property: Configuration options and list of validations to be performed on the resulting
     * image.
     * 
     * @param validation the validation value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withValidation(ImageTemplatePropertiesValidate validation) {
        this.validation = validation;
        return this;
    }

    /**
     * Get the distribute property: The distribution targets where the image output needs to go to.
     * 
     * @return the distribute value.
     */
    public List<ImageTemplateDistributor> distribute() {
        return this.distribute;
    }

    /**
     * Set the distribute property: The distribution targets where the image output needs to go to.
     * 
     * @param distribute the distribute value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withDistribute(List<ImageTemplateDistributor> distribute) {
        this.distribute = distribute;
        return this;
    }

    /**
     * Get the errorHandling property: Error handling options upon a build failure.
     * 
     * @return the errorHandling value.
     */
    public ImageTemplatePropertiesErrorHandling errorHandling() {
        return this.errorHandling;
    }

    /**
     * Set the errorHandling property: Error handling options upon a build failure.
     * 
     * @param errorHandling the errorHandling value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withErrorHandling(ImageTemplatePropertiesErrorHandling errorHandling) {
        this.errorHandling = errorHandling;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the provisioningError property: Provisioning error, if any.
     * 
     * @return the provisioningError value.
     */
    public ProvisioningError provisioningError() {
        return this.provisioningError;
    }

    /**
     * Get the lastRunStatus property: State of 'run' that is currently executing or was last executed.
     * 
     * @return the lastRunStatus value.
     */
    public ImageTemplateLastRunStatus lastRunStatus() {
        return this.lastRunStatus;
    }

    /**
     * Get the buildTimeoutInMinutes property: Maximum duration to wait while building the image template (includes all
     * customizations, optimization, validations, and distributions). Omit or specify 0 to use the default (4 hours).
     * 
     * @return the buildTimeoutInMinutes value.
     */
    public Integer buildTimeoutInMinutes() {
        return this.buildTimeoutInMinutes;
    }

    /**
     * Set the buildTimeoutInMinutes property: Maximum duration to wait while building the image template (includes all
     * customizations, optimization, validations, and distributions). Omit or specify 0 to use the default (4 hours).
     * 
     * @param buildTimeoutInMinutes the buildTimeoutInMinutes value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withBuildTimeoutInMinutes(Integer buildTimeoutInMinutes) {
        this.buildTimeoutInMinutes = buildTimeoutInMinutes;
        return this;
    }

    /**
     * Get the vmProfile property: Describes how virtual machine is set up to build images.
     * 
     * @return the vmProfile value.
     */
    public ImageTemplateVmProfile vmProfile() {
        return this.vmProfile;
    }

    /**
     * Set the vmProfile property: Describes how virtual machine is set up to build images.
     * 
     * @param vmProfile the vmProfile value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withVmProfile(ImageTemplateVmProfile vmProfile) {
        this.vmProfile = vmProfile;
        return this;
    }

    /**
     * Get the stagingResourceGroup property: The staging resource group id in the same subscription as the image
     * template that will be used to build the image. If this field is empty, a resource group with a random name will
     * be created. If the resource group specified in this field doesn't exist, it will be created with the same name.
     * If the resource group specified exists, it must be empty and in the same region as the image template. The
     * resource group created will be deleted during template deletion if this field is empty or the resource group
     * specified doesn't exist, but if the resource group specified exists the resources created in the resource group
     * will be deleted during template deletion and the resource group itself will remain.
     * 
     * @return the stagingResourceGroup value.
     */
    public String stagingResourceGroup() {
        return this.stagingResourceGroup;
    }

    /**
     * Set the stagingResourceGroup property: The staging resource group id in the same subscription as the image
     * template that will be used to build the image. If this field is empty, a resource group with a random name will
     * be created. If the resource group specified in this field doesn't exist, it will be created with the same name.
     * If the resource group specified exists, it must be empty and in the same region as the image template. The
     * resource group created will be deleted during template deletion if this field is empty or the resource group
     * specified doesn't exist, but if the resource group specified exists the resources created in the resource group
     * will be deleted during template deletion and the resource group itself will remain.
     * 
     * @param stagingResourceGroup the stagingResourceGroup value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withStagingResourceGroup(String stagingResourceGroup) {
        this.stagingResourceGroup = stagingResourceGroup;
        return this;
    }

    /**
     * Get the exactStagingResourceGroup property: The staging resource group id in the same subscription as the image
     * template that will be used to build the image. This read-only field differs from 'stagingResourceGroup' only if
     * the value specified in the 'stagingResourceGroup' field is empty.
     * 
     * @return the exactStagingResourceGroup value.
     */
    public String exactStagingResourceGroup() {
        return this.exactStagingResourceGroup;
    }

    /**
     * Get the autoRun property: Indicates whether or not to automatically run the image template build on template
     * creation or update.
     * 
     * @return the autoRun value.
     */
    public ImageTemplateAutoRun autoRun() {
        return this.autoRun;
    }

    /**
     * Set the autoRun property: Indicates whether or not to automatically run the image template build on template
     * creation or update.
     * 
     * @param autoRun the autoRun value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withAutoRun(ImageTemplateAutoRun autoRun) {
        this.autoRun = autoRun;
        return this;
    }

    /**
     * Get the managedResourceTags property: Tags that will be applied to the resource group and/or resources created by
     * the service.
     * 
     * @return the managedResourceTags value.
     */
    public Map<String, String> managedResourceTags() {
        return this.managedResourceTags;
    }

    /**
     * Set the managedResourceTags property: Tags that will be applied to the resource group and/or resources created by
     * the service.
     * 
     * @param managedResourceTags the managedResourceTags value to set.
     * @return the ImageTemplateProperties object itself.
     */
    public ImageTemplateProperties withManagedResourceTags(Map<String, String> managedResourceTags) {
        this.managedResourceTags = managedResourceTags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (source() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property source in model ImageTemplateProperties"));
        } else {
            source().validate();
        }
        if (customize() != null) {
            customize().forEach(e -> e.validate());
        }
        if (optimize() != null) {
            optimize().validate();
        }
        if (validation() != null) {
            validation().validate();
        }
        if (distribute() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property distribute in model ImageTemplateProperties"));
        } else {
            distribute().forEach(e -> e.validate());
        }
        if (errorHandling() != null) {
            errorHandling().validate();
        }
        if (provisioningError() != null) {
            provisioningError().validate();
        }
        if (lastRunStatus() != null) {
            lastRunStatus().validate();
        }
        if (vmProfile() != null) {
            vmProfile().validate();
        }
        if (autoRun() != null) {
            autoRun().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImageTemplateProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeArrayField("distribute", this.distribute, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("customize", this.customize, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("optimize", this.optimize);
        jsonWriter.writeJsonField("validate", this.validation);
        jsonWriter.writeJsonField("errorHandling", this.errorHandling);
        jsonWriter.writeNumberField("buildTimeoutInMinutes", this.buildTimeoutInMinutes);
        jsonWriter.writeJsonField("vmProfile", this.vmProfile);
        jsonWriter.writeStringField("stagingResourceGroup", this.stagingResourceGroup);
        jsonWriter.writeJsonField("autoRun", this.autoRun);
        jsonWriter.writeMapField("managedResourceTags", this.managedResourceTags,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageTemplateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageTemplateProperties.
     */
    public static ImageTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageTemplateProperties deserializedImageTemplateProperties = new ImageTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("source".equals(fieldName)) {
                    deserializedImageTemplateProperties.source = ImageTemplateSource.fromJson(reader);
                } else if ("distribute".equals(fieldName)) {
                    List<ImageTemplateDistributor> distribute
                        = reader.readArray(reader1 -> ImageTemplateDistributor.fromJson(reader1));
                    deserializedImageTemplateProperties.distribute = distribute;
                } else if ("customize".equals(fieldName)) {
                    List<ImageTemplateCustomizer> customize
                        = reader.readArray(reader1 -> ImageTemplateCustomizer.fromJson(reader1));
                    deserializedImageTemplateProperties.customize = customize;
                } else if ("optimize".equals(fieldName)) {
                    deserializedImageTemplateProperties.optimize = ImageTemplatePropertiesOptimize.fromJson(reader);
                } else if ("validate".equals(fieldName)) {
                    deserializedImageTemplateProperties.validation = ImageTemplatePropertiesValidate.fromJson(reader);
                } else if ("errorHandling".equals(fieldName)) {
                    deserializedImageTemplateProperties.errorHandling
                        = ImageTemplatePropertiesErrorHandling.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedImageTemplateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("provisioningError".equals(fieldName)) {
                    deserializedImageTemplateProperties.provisioningError = ProvisioningError.fromJson(reader);
                } else if ("lastRunStatus".equals(fieldName)) {
                    deserializedImageTemplateProperties.lastRunStatus = ImageTemplateLastRunStatus.fromJson(reader);
                } else if ("buildTimeoutInMinutes".equals(fieldName)) {
                    deserializedImageTemplateProperties.buildTimeoutInMinutes = reader.getNullable(JsonReader::getInt);
                } else if ("vmProfile".equals(fieldName)) {
                    deserializedImageTemplateProperties.vmProfile = ImageTemplateVmProfile.fromJson(reader);
                } else if ("stagingResourceGroup".equals(fieldName)) {
                    deserializedImageTemplateProperties.stagingResourceGroup = reader.getString();
                } else if ("exactStagingResourceGroup".equals(fieldName)) {
                    deserializedImageTemplateProperties.exactStagingResourceGroup = reader.getString();
                } else if ("autoRun".equals(fieldName)) {
                    deserializedImageTemplateProperties.autoRun = ImageTemplateAutoRun.fromJson(reader);
                } else if ("managedResourceTags".equals(fieldName)) {
                    Map<String, String> managedResourceTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedImageTemplateProperties.managedResourceTags = managedResourceTags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageTemplateProperties;
        });
    }
}
