// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes how to generate new x.y.z version number for distribution.
 */
@Immutable
public class DistributeVersioner implements JsonSerializable<DistributeVersioner> {
    /*
     * Version numbering scheme to be used.
     */
    private String scheme = "DistributeVersioner";

    /**
     * Creates an instance of DistributeVersioner class.
     */
    public DistributeVersioner() {
    }

    /**
     * Get the scheme property: Version numbering scheme to be used.
     * 
     * @return the scheme value.
     */
    public String scheme() {
        return this.scheme;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheme", this.scheme);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistributeVersioner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistributeVersioner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DistributeVersioner.
     */
    public static DistributeVersioner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("scheme".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Latest".equals(discriminatorValue)) {
                    return DistributeVersionerLatest.fromJson(readerToUse.reset());
                } else if ("Source".equals(discriminatorValue)) {
                    return DistributeVersionerSource.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DistributeVersioner fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistributeVersioner deserializedDistributeVersioner = new DistributeVersioner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheme".equals(fieldName)) {
                    deserializedDistributeVersioner.scheme = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistributeVersioner;
        });
    }
}
