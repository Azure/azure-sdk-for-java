// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.imagebuilder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Parameters for updating an image template.
 */
@Fluent
public final class ImageTemplateUpdateParametersProperties
    implements JsonSerializable<ImageTemplateUpdateParametersProperties> {
    /*
     * The distribution targets where the image output needs to go to.
     */
    private List<ImageTemplateDistributor> distribute;

    /*
     * Describes how virtual machine is set up to build images
     */
    private ImageTemplateVmProfile vmProfile;

    /**
     * Creates an instance of ImageTemplateUpdateParametersProperties class.
     */
    public ImageTemplateUpdateParametersProperties() {
    }

    /**
     * Get the distribute property: The distribution targets where the image output needs to go to.
     * 
     * @return the distribute value.
     */
    public List<ImageTemplateDistributor> distribute() {
        return this.distribute;
    }

    /**
     * Set the distribute property: The distribution targets where the image output needs to go to.
     * 
     * @param distribute the distribute value to set.
     * @return the ImageTemplateUpdateParametersProperties object itself.
     */
    public ImageTemplateUpdateParametersProperties withDistribute(List<ImageTemplateDistributor> distribute) {
        this.distribute = distribute;
        return this;
    }

    /**
     * Get the vmProfile property: Describes how virtual machine is set up to build images.
     * 
     * @return the vmProfile value.
     */
    public ImageTemplateVmProfile vmProfile() {
        return this.vmProfile;
    }

    /**
     * Set the vmProfile property: Describes how virtual machine is set up to build images.
     * 
     * @param vmProfile the vmProfile value to set.
     * @return the ImageTemplateUpdateParametersProperties object itself.
     */
    public ImageTemplateUpdateParametersProperties withVmProfile(ImageTemplateVmProfile vmProfile) {
        this.vmProfile = vmProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (distribute() != null) {
            distribute().forEach(e -> e.validate());
        }
        if (vmProfile() != null) {
            vmProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("distribute", this.distribute, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("vmProfile", this.vmProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageTemplateUpdateParametersProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageTemplateUpdateParametersProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageTemplateUpdateParametersProperties.
     */
    public static ImageTemplateUpdateParametersProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageTemplateUpdateParametersProperties deserializedImageTemplateUpdateParametersProperties
                = new ImageTemplateUpdateParametersProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("distribute".equals(fieldName)) {
                    List<ImageTemplateDistributor> distribute
                        = reader.readArray(reader1 -> ImageTemplateDistributor.fromJson(reader1));
                    deserializedImageTemplateUpdateParametersProperties.distribute = distribute;
                } else if ("vmProfile".equals(fieldName)) {
                    deserializedImageTemplateUpdateParametersProperties.vmProfile
                        = ImageTemplateVmProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageTemplateUpdateParametersProperties;
        });
    }
}
