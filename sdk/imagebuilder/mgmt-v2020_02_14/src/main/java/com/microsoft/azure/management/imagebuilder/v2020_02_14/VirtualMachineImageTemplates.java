/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.imagebuilder.v2020_02_14;

import rx.Observable;
import com.microsoft.azure.management.imagebuilder.v2020_02_14.ImageTemplate;
import rx.Completable;
import com.microsoft.azure.management.imagebuilder.v2020_02_14.RunOutput;

/**
 * Type representing VirtualMachineImageTemplates.
 */
public interface VirtualMachineImageTemplates {
    /**
     * Begins definition for a new ImageTemplate resource.
     * @param name resource name.
     * @return the first stage of the new ImageTemplate definition.
     */
    ImageTemplate.DefinitionStages.Blank defineImageTemplate(String name);

    /**
     * Get information about a virtual machine image template.
     *
     * @param resourceGroupName resource group name
     * @param name resource name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ImageTemplate> getByResourceGroupAsync(String resourceGroupName, String name);

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param resourceGroupName resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ImageTemplate> listByResourceGroupAsync(String resourceGroupName);

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ImageTemplate> listAsync();

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName resource group name
     * @param name resource name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String name);

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable runAsync(String resourceGroupName, String imageTemplateName);

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable cancelAsync(String resourceGroupName, String imageTemplateName);

    /**
     * Get the specified run output for the specified image template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param runOutputName The name of the run output
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RunOutput> getRunOutputAsync(String resourceGroupName, String imageTemplateName, String runOutputName);

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RunOutput> listRunOutputsAsync(final String resourceGroupName, final String imageTemplateName);

}
