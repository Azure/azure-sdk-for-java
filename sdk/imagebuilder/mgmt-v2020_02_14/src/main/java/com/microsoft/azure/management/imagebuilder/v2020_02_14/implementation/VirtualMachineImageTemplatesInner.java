/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.imagebuilder.v2020_02_14.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.imagebuilder.v2020_02_14.ApiErrorException;
import com.microsoft.azure.management.imagebuilder.v2020_02_14.ImageTemplateUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in VirtualMachineImageTemplates.
 */
public class VirtualMachineImageTemplatesInner implements InnerSupportsGet<ImageTemplateInner>, InnerSupportsDelete<Void>, InnerSupportsListing<ImageTemplateInner> {
    /** The Retrofit service to perform REST calls. */
    private VirtualMachineImageTemplatesService service;
    /** The service client containing this operation class. */
    private ImageBuilderClientImpl client;

    /**
     * Initializes an instance of VirtualMachineImageTemplatesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public VirtualMachineImageTemplatesInner(Retrofit retrofit, ImageBuilderClientImpl client) {
        this.service = retrofit.create(VirtualMachineImageTemplatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for VirtualMachineImageTemplates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface VirtualMachineImageTemplatesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.VirtualMachineImages/imageTemplates")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Body ImageTemplateInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Body ImageTemplateInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Body ImageTemplateUpdateParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Body ImageTemplateUpdateParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates run" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/run")
        Observable<Response<ResponseBody>> run(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates beginRun" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/run")
        Observable<Response<ResponseBody>> beginRun(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates cancel" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/cancel")
        Observable<Response<ResponseBody>> cancel(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates beginCancel" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/cancel")
        Observable<Response<ResponseBody>> beginCancel(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates listRunOutputs" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs")
        Observable<Response<ResponseBody>> listRunOutputs(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates getRunOutput" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs/{runOutputName}")
        Observable<Response<ResponseBody>> getRunOutput(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("imageTemplateName") String imageTemplateName, @Path("runOutputName") String runOutputName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates listRunOutputsNext" })
        @GET
        Observable<Response<ResponseBody>> listRunOutputsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ImageTemplateInner&gt; object if successful.
     */
    public PagedList<ImageTemplateInner> list() {
        ServiceResponse<Page<ImageTemplateInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ImageTemplateInner>(response.body()) {
            @Override
            public Page<ImageTemplateInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ImageTemplateInner>> listAsync(final ListOperationCallback<ImageTemplateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ImageTemplateInner&gt; object
     */
    public Observable<Page<ImageTemplateInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ImageTemplateInner>>, Page<ImageTemplateInner>>() {
                @Override
                public Page<ImageTemplateInner> call(ServiceResponse<Page<ImageTemplateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ImageTemplateInner&gt; object
     */
    public Observable<ServiceResponse<Page<ImageTemplateInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ImageTemplateInner>>, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(ServiceResponse<Page<ImageTemplateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ImageTemplateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ImageTemplateInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ImageTemplateInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ImageTemplateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ImageTemplateInner>> listDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ImageTemplateInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ImageTemplateInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ImageTemplateInner&gt; object if successful.
     */
    public PagedList<ImageTemplateInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<ImageTemplateInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ImageTemplateInner>(response.body()) {
            @Override
            public Page<ImageTemplateInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ImageTemplateInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<ImageTemplateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ImageTemplateInner&gt; object
     */
    public Observable<Page<ImageTemplateInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ImageTemplateInner>>, Page<ImageTemplateInner>>() {
                @Override
                public Page<ImageTemplateInner> call(ServiceResponse<Page<ImageTemplateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ImageTemplateInner&gt; object
     */
    public Observable<ServiceResponse<Page<ImageTemplateInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ImageTemplateInner>>, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(ServiceResponse<Page<ImageTemplateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
    ServiceResponse<PageImpl<ImageTemplateInner>> * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ImageTemplateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ImageTemplateInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ImageTemplateInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ImageTemplateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ImageTemplateInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ImageTemplateInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ImageTemplateInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Create or update a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageTemplateInner object if successful.
     */
    public ImageTemplateInner createOrUpdate(String resourceGroupName, String imageTemplateName, ImageTemplateInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters).toBlocking().last().body();
    }

    /**
     * Create or update a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImageTemplateInner> createOrUpdateAsync(String resourceGroupName, String imageTemplateName, ImageTemplateInner parameters, final ServiceCallback<ImageTemplateInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters), serviceCallback);
    }

    /**
     * Create or update a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ImageTemplateInner> createOrUpdateAsync(String resourceGroupName, String imageTemplateName, ImageTemplateInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters).map(new Func1<ServiceResponse<ImageTemplateInner>, ImageTemplateInner>() {
            @Override
            public ImageTemplateInner call(ServiceResponse<ImageTemplateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ImageTemplateInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String imageTemplateName, ImageTemplateInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, imageTemplateName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ImageTemplateInner>() { }.getType());
    }

    /**
     * Create or update a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageTemplateInner object if successful.
     */
    public ImageTemplateInner beginCreateOrUpdate(String resourceGroupName, String imageTemplateName, ImageTemplateInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImageTemplateInner> beginCreateOrUpdateAsync(String resourceGroupName, String imageTemplateName, ImageTemplateInner parameters, final ServiceCallback<ImageTemplateInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters), serviceCallback);
    }

    /**
     * Create or update a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTemplateInner object
     */
    public Observable<ImageTemplateInner> beginCreateOrUpdateAsync(String resourceGroupName, String imageTemplateName, ImageTemplateInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters).map(new Func1<ServiceResponse<ImageTemplateInner>, ImageTemplateInner>() {
            @Override
            public ImageTemplateInner call(ServiceResponse<ImageTemplateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTemplateInner object
     */
    public Observable<ServiceResponse<ImageTemplateInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String imageTemplateName, ImageTemplateInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, imageTemplateName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImageTemplateInner>>>() {
                @Override
                public Observable<ServiceResponse<ImageTemplateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImageTemplateInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImageTemplateInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ImageTemplateInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ImageTemplateInner>() { }.getType())
                .register(201, new TypeToken<ImageTemplateInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Update the tags for this Virtual Machine Image Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageTemplateInner object if successful.
     */
    public ImageTemplateInner update(String resourceGroupName, String imageTemplateName, ImageTemplateUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters).toBlocking().last().body();
    }

    /**
     * Update the tags for this Virtual Machine Image Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImageTemplateInner> updateAsync(String resourceGroupName, String imageTemplateName, ImageTemplateUpdateParameters parameters, final ServiceCallback<ImageTemplateInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters), serviceCallback);
    }

    /**
     * Update the tags for this Virtual Machine Image Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ImageTemplateInner> updateAsync(String resourceGroupName, String imageTemplateName, ImageTemplateUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters).map(new Func1<ServiceResponse<ImageTemplateInner>, ImageTemplateInner>() {
            @Override
            public ImageTemplateInner call(ServiceResponse<ImageTemplateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the tags for this Virtual Machine Image Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ImageTemplateInner>> updateWithServiceResponseAsync(String resourceGroupName, String imageTemplateName, ImageTemplateUpdateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, imageTemplateName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ImageTemplateInner>() { }.getType());
    }

    /**
     * Update the tags for this Virtual Machine Image Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageTemplateInner object if successful.
     */
    public ImageTemplateInner beginUpdate(String resourceGroupName, String imageTemplateName, ImageTemplateUpdateParameters parameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters).toBlocking().single().body();
    }

    /**
     * Update the tags for this Virtual Machine Image Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImageTemplateInner> beginUpdateAsync(String resourceGroupName, String imageTemplateName, ImageTemplateUpdateParameters parameters, final ServiceCallback<ImageTemplateInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters), serviceCallback);
    }

    /**
     * Update the tags for this Virtual Machine Image Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTemplateInner object
     */
    public Observable<ImageTemplateInner> beginUpdateAsync(String resourceGroupName, String imageTemplateName, ImageTemplateUpdateParameters parameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, imageTemplateName, parameters).map(new Func1<ServiceResponse<ImageTemplateInner>, ImageTemplateInner>() {
            @Override
            public ImageTemplateInner call(ServiceResponse<ImageTemplateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the tags for this Virtual Machine Image Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTemplateInner object
     */
    public Observable<ServiceResponse<ImageTemplateInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String imageTemplateName, ImageTemplateUpdateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, imageTemplateName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImageTemplateInner>>>() {
                @Override
                public Observable<ServiceResponse<ImageTemplateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImageTemplateInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImageTemplateInner> beginUpdateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ImageTemplateInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ImageTemplateInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get information about a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageTemplateInner object if successful.
     */
    public ImageTemplateInner getByResourceGroup(String resourceGroupName, String imageTemplateName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, imageTemplateName).toBlocking().single().body();
    }

    /**
     * Get information about a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImageTemplateInner> getByResourceGroupAsync(String resourceGroupName, String imageTemplateName, final ServiceCallback<ImageTemplateInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, imageTemplateName), serviceCallback);
    }

    /**
     * Get information about a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTemplateInner object
     */
    public Observable<ImageTemplateInner> getByResourceGroupAsync(String resourceGroupName, String imageTemplateName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, imageTemplateName).map(new Func1<ServiceResponse<ImageTemplateInner>, ImageTemplateInner>() {
            @Override
            public ImageTemplateInner call(ServiceResponse<ImageTemplateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get information about a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTemplateInner object
     */
    public Observable<ServiceResponse<ImageTemplateInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String imageTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, imageTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImageTemplateInner>>>() {
                @Override
                public Observable<ServiceResponse<ImageTemplateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImageTemplateInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImageTemplateInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ImageTemplateInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ImageTemplateInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String imageTemplateName) {
        deleteWithServiceResponseAsync(resourceGroupName, imageTemplateName).toBlocking().last().body();
    }

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String imageTemplateName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, imageTemplateName), serviceCallback);
    }

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String imageTemplateName) {
        return deleteWithServiceResponseAsync(resourceGroupName, imageTemplateName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String imageTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, imageTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String imageTemplateName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, imageTemplateName).toBlocking().single().body();
    }

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String imageTemplateName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, imageTemplateName), serviceCallback);
    }

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String imageTemplateName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, imageTemplateName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a virtual machine image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String imageTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, imageTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void run(String resourceGroupName, String imageTemplateName) {
        runWithServiceResponseAsync(resourceGroupName, imageTemplateName).toBlocking().last().body();
    }

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> runAsync(String resourceGroupName, String imageTemplateName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(runWithServiceResponseAsync(resourceGroupName, imageTemplateName), serviceCallback);
    }

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> runAsync(String resourceGroupName, String imageTemplateName) {
        return runWithServiceResponseAsync(resourceGroupName, imageTemplateName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> runWithServiceResponseAsync(String resourceGroupName, String imageTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.run(this.client.subscriptionId(), resourceGroupName, imageTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.AZURE_ASYNC_OPERATION), new TypeToken<Void>() { }.getType());
    }

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginRun(String resourceGroupName, String imageTemplateName) {
        beginRunWithServiceResponseAsync(resourceGroupName, imageTemplateName).toBlocking().single().body();
    }

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginRunAsync(String resourceGroupName, String imageTemplateName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginRunWithServiceResponseAsync(resourceGroupName, imageTemplateName), serviceCallback);
    }

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginRunAsync(String resourceGroupName, String imageTemplateName) {
        return beginRunWithServiceResponseAsync(resourceGroupName, imageTemplateName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create artifacts from a existing image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginRunWithServiceResponseAsync(String resourceGroupName, String imageTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginRun(this.client.subscriptionId(), resourceGroupName, imageTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginRunDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginRunDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void cancel(String resourceGroupName, String imageTemplateName) {
        cancelWithServiceResponseAsync(resourceGroupName, imageTemplateName).toBlocking().last().body();
    }

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> cancelAsync(String resourceGroupName, String imageTemplateName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(cancelWithServiceResponseAsync(resourceGroupName, imageTemplateName), serviceCallback);
    }

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> cancelAsync(String resourceGroupName, String imageTemplateName) {
        return cancelWithServiceResponseAsync(resourceGroupName, imageTemplateName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> cancelWithServiceResponseAsync(String resourceGroupName, String imageTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.cancel(this.client.subscriptionId(), resourceGroupName, imageTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.AZURE_ASYNC_OPERATION), new TypeToken<Void>() { }.getType());
    }

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginCancel(String resourceGroupName, String imageTemplateName) {
        beginCancelWithServiceResponseAsync(resourceGroupName, imageTemplateName).toBlocking().single().body();
    }

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginCancelAsync(String resourceGroupName, String imageTemplateName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginCancelWithServiceResponseAsync(resourceGroupName, imageTemplateName), serviceCallback);
    }

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginCancelAsync(String resourceGroupName, String imageTemplateName) {
        return beginCancelWithServiceResponseAsync(resourceGroupName, imageTemplateName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancel the long running image build based on the image template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginCancelWithServiceResponseAsync(String resourceGroupName, String imageTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCancel(this.client.subscriptionId(), resourceGroupName, imageTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginCancelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginCancelDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RunOutputInner&gt; object if successful.
     */
    public PagedList<RunOutputInner> listRunOutputs(final String resourceGroupName, final String imageTemplateName) {
        ServiceResponse<Page<RunOutputInner>> response = listRunOutputsSinglePageAsync(resourceGroupName, imageTemplateName).toBlocking().single();
        return new PagedList<RunOutputInner>(response.body()) {
            @Override
            public Page<RunOutputInner> nextPage(String nextPageLink) {
                return listRunOutputsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RunOutputInner>> listRunOutputsAsync(final String resourceGroupName, final String imageTemplateName, final ListOperationCallback<RunOutputInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listRunOutputsSinglePageAsync(resourceGroupName, imageTemplateName),
            new Func1<String, Observable<ServiceResponse<Page<RunOutputInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RunOutputInner>>> call(String nextPageLink) {
                    return listRunOutputsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RunOutputInner&gt; object
     */
    public Observable<Page<RunOutputInner>> listRunOutputsAsync(final String resourceGroupName, final String imageTemplateName) {
        return listRunOutputsWithServiceResponseAsync(resourceGroupName, imageTemplateName)
            .map(new Func1<ServiceResponse<Page<RunOutputInner>>, Page<RunOutputInner>>() {
                @Override
                public Page<RunOutputInner> call(ServiceResponse<Page<RunOutputInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RunOutputInner&gt; object
     */
    public Observable<ServiceResponse<Page<RunOutputInner>>> listRunOutputsWithServiceResponseAsync(final String resourceGroupName, final String imageTemplateName) {
        return listRunOutputsSinglePageAsync(resourceGroupName, imageTemplateName)
            .concatMap(new Func1<ServiceResponse<Page<RunOutputInner>>, Observable<ServiceResponse<Page<RunOutputInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RunOutputInner>>> call(ServiceResponse<Page<RunOutputInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listRunOutputsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
    ServiceResponse<PageImpl<RunOutputInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<RunOutputInner>> * @param imageTemplateName The name of the image Template
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RunOutputInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RunOutputInner>>> listRunOutputsSinglePageAsync(final String resourceGroupName, final String imageTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listRunOutputs(this.client.subscriptionId(), resourceGroupName, imageTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RunOutputInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RunOutputInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RunOutputInner>> result = listRunOutputsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RunOutputInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RunOutputInner>> listRunOutputsDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RunOutputInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RunOutputInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get the specified run output for the specified image template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param runOutputName The name of the run output
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RunOutputInner object if successful.
     */
    public RunOutputInner getRunOutput(String resourceGroupName, String imageTemplateName, String runOutputName) {
        return getRunOutputWithServiceResponseAsync(resourceGroupName, imageTemplateName, runOutputName).toBlocking().single().body();
    }

    /**
     * Get the specified run output for the specified image template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param runOutputName The name of the run output
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RunOutputInner> getRunOutputAsync(String resourceGroupName, String imageTemplateName, String runOutputName, final ServiceCallback<RunOutputInner> serviceCallback) {
        return ServiceFuture.fromResponse(getRunOutputWithServiceResponseAsync(resourceGroupName, imageTemplateName, runOutputName), serviceCallback);
    }

    /**
     * Get the specified run output for the specified image template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param runOutputName The name of the run output
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RunOutputInner object
     */
    public Observable<RunOutputInner> getRunOutputAsync(String resourceGroupName, String imageTemplateName, String runOutputName) {
        return getRunOutputWithServiceResponseAsync(resourceGroupName, imageTemplateName, runOutputName).map(new Func1<ServiceResponse<RunOutputInner>, RunOutputInner>() {
            @Override
            public RunOutputInner call(ServiceResponse<RunOutputInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the specified run output for the specified image template resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param runOutputName The name of the run output
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RunOutputInner object
     */
    public Observable<ServiceResponse<RunOutputInner>> getRunOutputWithServiceResponseAsync(String resourceGroupName, String imageTemplateName, String runOutputName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (imageTemplateName == null) {
            throw new IllegalArgumentException("Parameter imageTemplateName is required and cannot be null.");
        }
        if (runOutputName == null) {
            throw new IllegalArgumentException("Parameter runOutputName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getRunOutput(this.client.subscriptionId(), resourceGroupName, imageTemplateName, runOutputName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RunOutputInner>>>() {
                @Override
                public Observable<ServiceResponse<RunOutputInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RunOutputInner> clientResponse = getRunOutputDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RunOutputInner> getRunOutputDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RunOutputInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RunOutputInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ImageTemplateInner&gt; object if successful.
     */
    public PagedList<ImageTemplateInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ImageTemplateInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ImageTemplateInner>(response.body()) {
            @Override
            public Page<ImageTemplateInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ImageTemplateInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ImageTemplateInner>> serviceFuture, final ListOperationCallback<ImageTemplateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ImageTemplateInner&gt; object
     */
    public Observable<Page<ImageTemplateInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ImageTemplateInner>>, Page<ImageTemplateInner>>() {
                @Override
                public Page<ImageTemplateInner> call(ServiceResponse<Page<ImageTemplateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ImageTemplateInner&gt; object
     */
    public Observable<ServiceResponse<Page<ImageTemplateInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ImageTemplateInner>>, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(ServiceResponse<Page<ImageTemplateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets information about the VM image templates associated with the subscription.
     *
    ServiceResponse<PageImpl<ImageTemplateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ImageTemplateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ImageTemplateInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ImageTemplateInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ImageTemplateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ImageTemplateInner>> listNextDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ImageTemplateInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ImageTemplateInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ImageTemplateInner&gt; object if successful.
     */
    public PagedList<ImageTemplateInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ImageTemplateInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ImageTemplateInner>(response.body()) {
            @Override
            public Page<ImageTemplateInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ImageTemplateInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<ImageTemplateInner>> serviceFuture, final ListOperationCallback<ImageTemplateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ImageTemplateInner&gt; object
     */
    public Observable<Page<ImageTemplateInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ImageTemplateInner>>, Page<ImageTemplateInner>>() {
                @Override
                public Page<ImageTemplateInner> call(ServiceResponse<Page<ImageTemplateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ImageTemplateInner&gt; object
     */
    public Observable<ServiceResponse<Page<ImageTemplateInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ImageTemplateInner>>, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(ServiceResponse<Page<ImageTemplateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets information about the VM image templates associated with the specified resource group.
     *
    ServiceResponse<PageImpl<ImageTemplateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ImageTemplateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ImageTemplateInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ImageTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ImageTemplateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ImageTemplateInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ImageTemplateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ImageTemplateInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ImageTemplateInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ImageTemplateInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RunOutputInner&gt; object if successful.
     */
    public PagedList<RunOutputInner> listRunOutputsNext(final String nextPageLink) {
        ServiceResponse<Page<RunOutputInner>> response = listRunOutputsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RunOutputInner>(response.body()) {
            @Override
            public Page<RunOutputInner> nextPage(String nextPageLink) {
                return listRunOutputsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RunOutputInner>> listRunOutputsNextAsync(final String nextPageLink, final ServiceFuture<List<RunOutputInner>> serviceFuture, final ListOperationCallback<RunOutputInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listRunOutputsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RunOutputInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RunOutputInner>>> call(String nextPageLink) {
                    return listRunOutputsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RunOutputInner&gt; object
     */
    public Observable<Page<RunOutputInner>> listRunOutputsNextAsync(final String nextPageLink) {
        return listRunOutputsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RunOutputInner>>, Page<RunOutputInner>>() {
                @Override
                public Page<RunOutputInner> call(ServiceResponse<Page<RunOutputInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RunOutputInner&gt; object
     */
    public Observable<ServiceResponse<Page<RunOutputInner>>> listRunOutputsNextWithServiceResponseAsync(final String nextPageLink) {
        return listRunOutputsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RunOutputInner>>, Observable<ServiceResponse<Page<RunOutputInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RunOutputInner>>> call(ServiceResponse<Page<RunOutputInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listRunOutputsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all run outputs for the specified Image Template resource.
     *
    ServiceResponse<PageImpl<RunOutputInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RunOutputInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RunOutputInner>>> listRunOutputsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listRunOutputsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RunOutputInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RunOutputInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RunOutputInner>> result = listRunOutputsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RunOutputInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RunOutputInner>> listRunOutputsNextDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RunOutputInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RunOutputInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
