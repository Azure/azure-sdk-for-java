/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.imagebuilder.v2020_02_14.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.imagebuilder.v2020_02_14.VirtualMachineImageTemplates;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.imagebuilder.v2020_02_14.ImageTemplate;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.imagebuilder.v2020_02_14.RunOutput;

class VirtualMachineImageTemplatesImpl extends WrapperImpl<VirtualMachineImageTemplatesInner> implements VirtualMachineImageTemplates {
    private final VirtualMachineImagesManager manager;

    VirtualMachineImageTemplatesImpl(VirtualMachineImagesManager manager) {
        super(manager.inner().virtualMachineImageTemplates());
        this.manager = manager;
    }

    public VirtualMachineImagesManager manager() {
        return this.manager;
    }

    @Override
    public ImageTemplateImpl defineImageTemplate(String name) {
        return wrapImageTemplateModel(name);
    }

    private ImageTemplateImpl wrapImageTemplateModel(String name) {
        return new ImageTemplateImpl(name, new ImageTemplateInner(), this.manager());
    }

    private ImageTemplateImpl wrapImageTemplateModel(ImageTemplateInner inner) {
        return  new ImageTemplateImpl(inner.name(), inner, manager());
    }

    private RunOutputImpl wrapRunOutputModel(RunOutputInner inner) {
        return  new RunOutputImpl(inner, manager());
    }

    private Observable<ImageTemplateInner> getImageTemplateInnerUsingVirtualMachineImageTemplatesInnerAsync(String resourceGroupName, String name) {
        VirtualMachineImageTemplatesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    private Observable<RunOutputInner> getRunOutputInnerUsingVirtualMachineImageTemplatesInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String imageTemplateName = IdParsingUtils.getValueFromIdByName(id, "imageTemplates");
        String runOutputName = IdParsingUtils.getValueFromIdByName(id, "runOutputs");
        VirtualMachineImageTemplatesInner client = this.inner();
        return client.getRunOutputAsync(resourceGroupName, imageTemplateName, runOutputName);
    }

    @Override
    public Observable<ImageTemplate> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getImageTemplateInnerUsingVirtualMachineImageTemplatesInnerAsync(resourceGroupName, name).flatMap(new Func1<ImageTemplateInner, Observable<ImageTemplate>> () {
            @Override
            public Observable<ImageTemplate> call(ImageTemplateInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return  Observable.just((ImageTemplate)wrapImageTemplateModel(inner));
                }
            }
        });
    }

    @Override
    public Observable<ImageTemplate> listByResourceGroupAsync(String resourceGroupName) {
        VirtualMachineImageTemplatesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<ImageTemplateInner>, Iterable<ImageTemplateInner>>() {
            @Override
            public Iterable<ImageTemplateInner> call(Page<ImageTemplateInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ImageTemplateInner, ImageTemplate>() {
            @Override
            public ImageTemplate call(ImageTemplateInner inner) {
                return wrapImageTemplateModel(inner);
            }
        });
    }

    @Override
    public Observable<ImageTemplate> listAsync() {
        VirtualMachineImageTemplatesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ImageTemplateInner>, Iterable<ImageTemplateInner>>() {
            @Override
            public Iterable<ImageTemplateInner> call(Page<ImageTemplateInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ImageTemplateInner, ImageTemplate>() {
            @Override
            public ImageTemplate call(ImageTemplateInner inner) {
                return wrapImageTemplateModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String name) {
        return this.inner().deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable runAsync(String resourceGroupName, String imageTemplateName) {
        VirtualMachineImageTemplatesInner client = this.inner();
        return client.runAsync(resourceGroupName, imageTemplateName).toCompletable();
    }

    @Override
    public Completable cancelAsync(String resourceGroupName, String imageTemplateName) {
        VirtualMachineImageTemplatesInner client = this.inner();
        return client.cancelAsync(resourceGroupName, imageTemplateName).toCompletable();
    }

    @Override
    public Observable<RunOutput> getRunOutputAsync(String resourceGroupName, String imageTemplateName, String runOutputName) {
        VirtualMachineImageTemplatesInner client = this.inner();
        return client.getRunOutputAsync(resourceGroupName, imageTemplateName, runOutputName)
        .flatMap(new Func1<RunOutputInner, Observable<RunOutput>>() {
            @Override
            public Observable<RunOutput> call(RunOutputInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RunOutput)wrapRunOutputModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<RunOutput> listRunOutputsAsync(final String resourceGroupName, final String imageTemplateName) {
        VirtualMachineImageTemplatesInner client = this.inner();
        return client.listRunOutputsAsync(resourceGroupName, imageTemplateName)
        .flatMapIterable(new Func1<Page<RunOutputInner>, Iterable<RunOutputInner>>() {
            @Override
            public Iterable<RunOutputInner> call(Page<RunOutputInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RunOutputInner, RunOutput>() {
            @Override
            public RunOutput call(RunOutputInner inner) {
                return wrapRunOutputModel(inner);
            }
        });
    }

}
