// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.app.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The configuration settings of the login flow of users using ContainerApp Authentication/Authorization. */
@Fluent
public final class Login {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Login.class);

    /*
     * The route that specify the endpoint used for login and logout requests.
     */
    @JsonProperty(value = "route")
    private LoginRoute route;

    /*
     * <code>True</code> if the fragments from the request are preserved after
     * the login request is made; otherwise, <code>False</code>.
     */
    @JsonProperty(value = "preserveUrlFragmentsForLogins")
    private PreserveUrlFragmentsForLoginsMode preserveUrlFragmentsForLogins;

    /*
     * External URLs that can be redirected to as part of logging in or logging
     * out of the app. Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store
     * application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     */
    @JsonProperty(value = "allowedExternalRedirectUrls")
    private List<String> allowedExternalRedirectUrls;

    /**
     * Get the route property: The route that specify the endpoint used for login and logout requests.
     *
     * @return the route value.
     */
    public LoginRoute route() {
        return this.route;
    }

    /**
     * Set the route property: The route that specify the endpoint used for login and logout requests.
     *
     * @param route the route value to set.
     * @return the Login object itself.
     */
    public Login withRoute(LoginRoute route) {
        this.route = route;
        return this;
    }

    /**
     * Get the preserveUrlFragmentsForLogins property: &lt;code&gt;True&lt;/code&gt; if the fragments from the request
     * are preserved after the login request is made; otherwise, &lt;code&gt;False&lt;/code&gt;.
     *
     * @return the preserveUrlFragmentsForLogins value.
     */
    public PreserveUrlFragmentsForLoginsMode preserveUrlFragmentsForLogins() {
        return this.preserveUrlFragmentsForLogins;
    }

    /**
     * Set the preserveUrlFragmentsForLogins property: &lt;code&gt;True&lt;/code&gt; if the fragments from the request
     * are preserved after the login request is made; otherwise, &lt;code&gt;False&lt;/code&gt;.
     *
     * @param preserveUrlFragmentsForLogins the preserveUrlFragmentsForLogins value to set.
     * @return the Login object itself.
     */
    public Login withPreserveUrlFragmentsForLogins(PreserveUrlFragmentsForLoginsMode preserveUrlFragmentsForLogins) {
        this.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
        return this;
    }

    /**
     * Get the allowedExternalRedirectUrls property: External URLs that can be redirected to as part of logging in or
     * logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting
     * typically only needed by Windows Store application backends. Note that URLs within the current domain are always
     * implicitly allowed.
     *
     * @return the allowedExternalRedirectUrls value.
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls;
    }

    /**
     * Set the allowedExternalRedirectUrls property: External URLs that can be redirected to as part of logging in or
     * logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting
     * typically only needed by Windows Store application backends. Note that URLs within the current domain are always
     * implicitly allowed.
     *
     * @param allowedExternalRedirectUrls the allowedExternalRedirectUrls value to set.
     * @return the Login object itself.
     */
    public Login withAllowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
        this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (route() != null) {
            route().validate();
        }
    }
}
