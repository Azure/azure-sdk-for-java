// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.app.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings for the ingress component, including workload profile, scaling, and connection handling.
 */
@Fluent
public final class IngressConfiguration implements JsonSerializable<IngressConfiguration> {
    /*
     * Name of the workload profile used by the ingress component. Required.
     */
    private String workloadProfileName;

    /*
     * Time (in seconds) to allow active connections to complete on termination. Must be between 0 and 3600. Defaults to
     * 480 seconds.
     */
    private Integer terminationGracePeriodSeconds;

    /*
     * Maximum number of headers per request allowed by the ingress. Must be at least 1. Defaults to 100.
     */
    private Integer headerCountLimit;

    /*
     * Duration (in minutes) before idle requests are timed out. Must be between 4 and 30 inclusive. Defaults to 4
     * minutes.
     */
    private Integer requestIdleTimeout;

    /**
     * Creates an instance of IngressConfiguration class.
     */
    public IngressConfiguration() {
    }

    /**
     * Get the workloadProfileName property: Name of the workload profile used by the ingress component. Required.
     * 
     * @return the workloadProfileName value.
     */
    public String workloadProfileName() {
        return this.workloadProfileName;
    }

    /**
     * Set the workloadProfileName property: Name of the workload profile used by the ingress component. Required.
     * 
     * @param workloadProfileName the workloadProfileName value to set.
     * @return the IngressConfiguration object itself.
     */
    public IngressConfiguration withWorkloadProfileName(String workloadProfileName) {
        this.workloadProfileName = workloadProfileName;
        return this;
    }

    /**
     * Get the terminationGracePeriodSeconds property: Time (in seconds) to allow active connections to complete on
     * termination. Must be between 0 and 3600. Defaults to 480 seconds.
     * 
     * @return the terminationGracePeriodSeconds value.
     */
    public Integer terminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds;
    }

    /**
     * Set the terminationGracePeriodSeconds property: Time (in seconds) to allow active connections to complete on
     * termination. Must be between 0 and 3600. Defaults to 480 seconds.
     * 
     * @param terminationGracePeriodSeconds the terminationGracePeriodSeconds value to set.
     * @return the IngressConfiguration object itself.
     */
    public IngressConfiguration withTerminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        return this;
    }

    /**
     * Get the headerCountLimit property: Maximum number of headers per request allowed by the ingress. Must be at least
     * 1. Defaults to 100.
     * 
     * @return the headerCountLimit value.
     */
    public Integer headerCountLimit() {
        return this.headerCountLimit;
    }

    /**
     * Set the headerCountLimit property: Maximum number of headers per request allowed by the ingress. Must be at least
     * 1. Defaults to 100.
     * 
     * @param headerCountLimit the headerCountLimit value to set.
     * @return the IngressConfiguration object itself.
     */
    public IngressConfiguration withHeaderCountLimit(Integer headerCountLimit) {
        this.headerCountLimit = headerCountLimit;
        return this;
    }

    /**
     * Get the requestIdleTimeout property: Duration (in minutes) before idle requests are timed out. Must be between 4
     * and 30 inclusive. Defaults to 4 minutes.
     * 
     * @return the requestIdleTimeout value.
     */
    public Integer requestIdleTimeout() {
        return this.requestIdleTimeout;
    }

    /**
     * Set the requestIdleTimeout property: Duration (in minutes) before idle requests are timed out. Must be between 4
     * and 30 inclusive. Defaults to 4 minutes.
     * 
     * @param requestIdleTimeout the requestIdleTimeout value to set.
     * @return the IngressConfiguration object itself.
     */
    public IngressConfiguration withRequestIdleTimeout(Integer requestIdleTimeout) {
        this.requestIdleTimeout = requestIdleTimeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("workloadProfileName", this.workloadProfileName);
        jsonWriter.writeNumberField("terminationGracePeriodSeconds", this.terminationGracePeriodSeconds);
        jsonWriter.writeNumberField("headerCountLimit", this.headerCountLimit);
        jsonWriter.writeNumberField("requestIdleTimeout", this.requestIdleTimeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngressConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngressConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IngressConfiguration.
     */
    public static IngressConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IngressConfiguration deserializedIngressConfiguration = new IngressConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workloadProfileName".equals(fieldName)) {
                    deserializedIngressConfiguration.workloadProfileName = reader.getString();
                } else if ("terminationGracePeriodSeconds".equals(fieldName)) {
                    deserializedIngressConfiguration.terminationGracePeriodSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("headerCountLimit".equals(fieldName)) {
                    deserializedIngressConfiguration.headerCountLimit = reader.getNullable(JsonReader::getInt);
                } else if ("requestIdleTimeout".equals(fieldName)) {
                    deserializedIngressConfiguration.requestIdleTimeout = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIngressConfiguration;
        });
    }
}
