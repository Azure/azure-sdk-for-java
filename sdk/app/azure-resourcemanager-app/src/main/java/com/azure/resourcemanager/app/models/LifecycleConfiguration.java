// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.app.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The lifecycle configuration properties of a session in the dynamic session pool.
 */
@Fluent
public final class LifecycleConfiguration implements JsonSerializable<LifecycleConfiguration> {
    /*
     * The lifecycle type of the session pool.
     */
    private LifecycleType lifecycleType;

    /*
     * The cooldown period of a session in seconds when the lifecycle type is 'Timed'.
     */
    private Integer cooldownPeriodInSeconds;

    /*
     * The maximum alive period of a session in seconds when the lifecycle type is 'OnContainerExit'.
     */
    private Integer maxAlivePeriodInSeconds;

    /**
     * Creates an instance of LifecycleConfiguration class.
     */
    public LifecycleConfiguration() {
    }

    /**
     * Get the lifecycleType property: The lifecycle type of the session pool.
     * 
     * @return the lifecycleType value.
     */
    public LifecycleType lifecycleType() {
        return this.lifecycleType;
    }

    /**
     * Set the lifecycleType property: The lifecycle type of the session pool.
     * 
     * @param lifecycleType the lifecycleType value to set.
     * @return the LifecycleConfiguration object itself.
     */
    public LifecycleConfiguration withLifecycleType(LifecycleType lifecycleType) {
        this.lifecycleType = lifecycleType;
        return this;
    }

    /**
     * Get the cooldownPeriodInSeconds property: The cooldown period of a session in seconds when the lifecycle type is
     * 'Timed'.
     * 
     * @return the cooldownPeriodInSeconds value.
     */
    public Integer cooldownPeriodInSeconds() {
        return this.cooldownPeriodInSeconds;
    }

    /**
     * Set the cooldownPeriodInSeconds property: The cooldown period of a session in seconds when the lifecycle type is
     * 'Timed'.
     * 
     * @param cooldownPeriodInSeconds the cooldownPeriodInSeconds value to set.
     * @return the LifecycleConfiguration object itself.
     */
    public LifecycleConfiguration withCooldownPeriodInSeconds(Integer cooldownPeriodInSeconds) {
        this.cooldownPeriodInSeconds = cooldownPeriodInSeconds;
        return this;
    }

    /**
     * Get the maxAlivePeriodInSeconds property: The maximum alive period of a session in seconds when the lifecycle
     * type is 'OnContainerExit'.
     * 
     * @return the maxAlivePeriodInSeconds value.
     */
    public Integer maxAlivePeriodInSeconds() {
        return this.maxAlivePeriodInSeconds;
    }

    /**
     * Set the maxAlivePeriodInSeconds property: The maximum alive period of a session in seconds when the lifecycle
     * type is 'OnContainerExit'.
     * 
     * @param maxAlivePeriodInSeconds the maxAlivePeriodInSeconds value to set.
     * @return the LifecycleConfiguration object itself.
     */
    public LifecycleConfiguration withMaxAlivePeriodInSeconds(Integer maxAlivePeriodInSeconds) {
        this.maxAlivePeriodInSeconds = maxAlivePeriodInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lifecycleType", this.lifecycleType == null ? null : this.lifecycleType.toString());
        jsonWriter.writeNumberField("cooldownPeriodInSeconds", this.cooldownPeriodInSeconds);
        jsonWriter.writeNumberField("maxAlivePeriodInSeconds", this.maxAlivePeriodInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifecycleConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifecycleConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifecycleConfiguration.
     */
    public static LifecycleConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifecycleConfiguration deserializedLifecycleConfiguration = new LifecycleConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lifecycleType".equals(fieldName)) {
                    deserializedLifecycleConfiguration.lifecycleType = LifecycleType.fromString(reader.getString());
                } else if ("cooldownPeriodInSeconds".equals(fieldName)) {
                    deserializedLifecycleConfiguration.cooldownPeriodInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("maxAlivePeriodInSeconds".equals(fieldName)) {
                    deserializedLifecycleConfiguration.maxAlivePeriodInSeconds = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifecycleConfiguration;
        });
    }
}
