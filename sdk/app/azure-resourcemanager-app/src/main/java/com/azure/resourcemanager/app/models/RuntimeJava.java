// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.app.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Java app configuration.
 */
@Fluent
public final class RuntimeJava implements JsonSerializable<RuntimeJava> {
    /*
     * Enable jmx core metrics for the java app
     */
    private Boolean enableMetrics;

    /**
     * Creates an instance of RuntimeJava class.
     */
    public RuntimeJava() {
    }

    /**
     * Get the enableMetrics property: Enable jmx core metrics for the java app.
     * 
     * @return the enableMetrics value.
     */
    public Boolean enableMetrics() {
        return this.enableMetrics;
    }

    /**
     * Set the enableMetrics property: Enable jmx core metrics for the java app.
     * 
     * @param enableMetrics the enableMetrics value to set.
     * @return the RuntimeJava object itself.
     */
    public RuntimeJava withEnableMetrics(Boolean enableMetrics) {
        this.enableMetrics = enableMetrics;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableMetrics", this.enableMetrics);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuntimeJava from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuntimeJava if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RuntimeJava.
     */
    public static RuntimeJava fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuntimeJava deserializedRuntimeJava = new RuntimeJava();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableMetrics".equals(fieldName)) {
                    deserializedRuntimeJava.enableMetrics = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuntimeJava;
        });
    }
}
