// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.app.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.app.models.EasyAuthState;
import com.azure.resourcemanager.app.models.GlobalValidation;
import com.azure.resourcemanager.app.models.HttpSettings;
import com.azure.resourcemanager.app.models.IdentityProviders;
import com.azure.resourcemanager.app.models.Login;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Easy Auth configuration resource specific properties. */
@Fluent
public final class AuthConfigProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AuthConfigProperties.class);

    /*
     * <code>Enabled</code> if the Authentication / Authorization feature is
     * enabled for the current app; otherwise, <code>Disabled</code>.
     */
    @JsonProperty(value = "state")
    private EasyAuthState state;

    /*
     * The configuration settings that determines the validation flow of users
     * using ContainerApp Authentication/Authorization.
     */
    @JsonProperty(value = "globalValidation")
    private GlobalValidation globalValidation;

    /*
     * The configuration settings of each of the identity providers used to
     * configure ContainerApp Authentication/Authorization.
     */
    @JsonProperty(value = "identityProviders")
    private IdentityProviders identityProviders;

    /*
     * The configuration settings of the login flow of users using ContainerApp
     * Authentication/Authorization.
     */
    @JsonProperty(value = "login")
    private Login login;

    /*
     * The configuration settings of the HTTP requests for authentication and
     * authorization requests made against ContainerApp
     * Authentication/Authorization.
     */
    @JsonProperty(value = "httpSettings")
    private HttpSettings httpSettings;

    /**
     * Get the state property: &lt;code&gt;Enabled&lt;/code&gt; if the Authentication / Authorization feature is enabled
     * for the current app; otherwise, &lt;code&gt;Disabled&lt;/code&gt;.
     *
     * @return the state value.
     */
    public EasyAuthState state() {
        return this.state;
    }

    /**
     * Set the state property: &lt;code&gt;Enabled&lt;/code&gt; if the Authentication / Authorization feature is enabled
     * for the current app; otherwise, &lt;code&gt;Disabled&lt;/code&gt;.
     *
     * @param state the state value to set.
     * @return the AuthConfigProperties object itself.
     */
    public AuthConfigProperties withState(EasyAuthState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the globalValidation property: The configuration settings that determines the validation flow of users using
     * ContainerApp Authentication/Authorization.
     *
     * @return the globalValidation value.
     */
    public GlobalValidation globalValidation() {
        return this.globalValidation;
    }

    /**
     * Set the globalValidation property: The configuration settings that determines the validation flow of users using
     * ContainerApp Authentication/Authorization.
     *
     * @param globalValidation the globalValidation value to set.
     * @return the AuthConfigProperties object itself.
     */
    public AuthConfigProperties withGlobalValidation(GlobalValidation globalValidation) {
        this.globalValidation = globalValidation;
        return this;
    }

    /**
     * Get the identityProviders property: The configuration settings of each of the identity providers used to
     * configure ContainerApp Authentication/Authorization.
     *
     * @return the identityProviders value.
     */
    public IdentityProviders identityProviders() {
        return this.identityProviders;
    }

    /**
     * Set the identityProviders property: The configuration settings of each of the identity providers used to
     * configure ContainerApp Authentication/Authorization.
     *
     * @param identityProviders the identityProviders value to set.
     * @return the AuthConfigProperties object itself.
     */
    public AuthConfigProperties withIdentityProviders(IdentityProviders identityProviders) {
        this.identityProviders = identityProviders;
        return this;
    }

    /**
     * Get the login property: The configuration settings of the login flow of users using ContainerApp
     * Authentication/Authorization.
     *
     * @return the login value.
     */
    public Login login() {
        return this.login;
    }

    /**
     * Set the login property: The configuration settings of the login flow of users using ContainerApp
     * Authentication/Authorization.
     *
     * @param login the login value to set.
     * @return the AuthConfigProperties object itself.
     */
    public AuthConfigProperties withLogin(Login login) {
        this.login = login;
        return this;
    }

    /**
     * Get the httpSettings property: The configuration settings of the HTTP requests for authentication and
     * authorization requests made against ContainerApp Authentication/Authorization.
     *
     * @return the httpSettings value.
     */
    public HttpSettings httpSettings() {
        return this.httpSettings;
    }

    /**
     * Set the httpSettings property: The configuration settings of the HTTP requests for authentication and
     * authorization requests made against ContainerApp Authentication/Authorization.
     *
     * @param httpSettings the httpSettings value to set.
     * @return the AuthConfigProperties object itself.
     */
    public AuthConfigProperties withHttpSettings(HttpSettings httpSettings) {
        this.httpSettings = httpSettings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (globalValidation() != null) {
            globalValidation().validate();
        }
        if (identityProviders() != null) {
            identityProviders().validate();
        }
        if (login() != null) {
            login().validate();
        }
        if (httpSettings() != null) {
            httpSettings().validate();
        }
    }
}
