// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.app.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The configuration settings of the HTTP requests for authentication and authorization requests made against
 * ContainerApp Authentication/Authorization.
 */
@Fluent
public final class HttpSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HttpSettings.class);

    /*
     * <code>false</code> if the authentication/authorization responses not
     * having the HTTPS scheme are permissible; otherwise, <code>true</code>.
     */
    @JsonProperty(value = "requireHttps")
    private RequireHttpsMode requireHttps;

    /*
     * The configuration settings of the paths HTTP requests.
     */
    @JsonProperty(value = "route")
    private HttpSettingsRoute route;

    /**
     * Get the requireHttps property: &lt;code&gt;false&lt;/code&gt; if the authentication/authorization responses not
     * having the HTTPS scheme are permissible; otherwise, &lt;code&gt;true&lt;/code&gt;.
     *
     * @return the requireHttps value.
     */
    public RequireHttpsMode requireHttps() {
        return this.requireHttps;
    }

    /**
     * Set the requireHttps property: &lt;code&gt;false&lt;/code&gt; if the authentication/authorization responses not
     * having the HTTPS scheme are permissible; otherwise, &lt;code&gt;true&lt;/code&gt;.
     *
     * @param requireHttps the requireHttps value to set.
     * @return the HttpSettings object itself.
     */
    public HttpSettings withRequireHttps(RequireHttpsMode requireHttps) {
        this.requireHttps = requireHttps;
        return this;
    }

    /**
     * Get the route property: The configuration settings of the paths HTTP requests.
     *
     * @return the route value.
     */
    public HttpSettingsRoute route() {
        return this.route;
    }

    /**
     * Set the route property: The configuration settings of the paths HTTP requests.
     *
     * @param route the route value to set.
     * @return the HttpSettings object itself.
     */
    public HttpSettings withRoute(HttpSettingsRoute route) {
        this.route = route;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (route() != null) {
            route().validate();
        }
    }
}
