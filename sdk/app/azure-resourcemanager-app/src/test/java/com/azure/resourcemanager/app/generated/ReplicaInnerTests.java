// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.app.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.app.fluent.models.ReplicaInner;
import com.azure.resourcemanager.app.models.ReplicaContainer;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ReplicaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicaInner model = BinaryData.fromString(
            "{\"properties\":{\"createdTime\":\"2021-06-18T14:41:07Z\",\"runningState\":\"Running\",\"runningStateDetails\":\"u\",\"containers\":[{\"name\":\"srezp\",\"containerId\":\"hneuyowqkd\",\"ready\":false,\"started\":true,\"restartCount\":431891008,\"runningState\":\"Running\",\"runningStateDetails\":\"gpikpzimejza\",\"logStreamEndpoint\":\"fzxiavrmb\",\"execEndpoint\":\"nokixrjqcirgz\"},{\"name\":\"rlazszrnw\",\"containerId\":\"indfpwpjyl\",\"ready\":true,\"started\":false,\"restartCount\":775770123,\"runningState\":\"Running\",\"runningStateDetails\":\"dhszfjv\",\"logStreamEndpoint\":\"gofel\",\"execEndpoint\":\"grqmqhldvrii\"}],\"initContainers\":[{\"name\":\"al\",\"containerId\":\"fk\",\"ready\":true,\"started\":false,\"restartCount\":1376433367,\"runningState\":\"Waiting\",\"runningStateDetails\":\"el\",\"logStreamEndpoint\":\"hhahhxvrhmzkwpjg\",\"execEndpoint\":\"spughftqsxhq\"},{\"name\":\"j\",\"containerId\":\"kndxdigrjgu\",\"ready\":true,\"started\":false,\"restartCount\":1986319957,\"runningState\":\"Running\",\"runningStateDetails\":\"ihwhbotzingamvpp\",\"logStreamEndpoint\":\"szqzudphqamv\",\"execEndpoint\":\"fwynwcvtbvkay\"}]},\"id\":\"tnvyqiatkzwp\",\"name\":\"npwzcjaes\",\"type\":\"vvsccyajguq\"}")
            .toObject(ReplicaInner.class);
        Assertions.assertEquals("srezp", model.containers().get(0).name());
        Assertions.assertEquals("hneuyowqkd", model.containers().get(0).containerId());
        Assertions.assertFalse(model.containers().get(0).ready());
        Assertions.assertTrue(model.containers().get(0).started());
        Assertions.assertEquals(431891008, model.containers().get(0).restartCount());
        Assertions.assertEquals("al", model.initContainers().get(0).name());
        Assertions.assertEquals("fk", model.initContainers().get(0).containerId());
        Assertions.assertTrue(model.initContainers().get(0).ready());
        Assertions.assertFalse(model.initContainers().get(0).started());
        Assertions.assertEquals(1376433367, model.initContainers().get(0).restartCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicaInner model = new ReplicaInner()
            .withContainers(Arrays.asList(
                new ReplicaContainer().withName("srezp")
                    .withContainerId("hneuyowqkd")
                    .withReady(false)
                    .withStarted(true)
                    .withRestartCount(431891008),
                new ReplicaContainer().withName("rlazszrnw")
                    .withContainerId("indfpwpjyl")
                    .withReady(true)
                    .withStarted(false)
                    .withRestartCount(775770123)))
            .withInitContainers(Arrays.asList(
                new ReplicaContainer().withName("al")
                    .withContainerId("fk")
                    .withReady(true)
                    .withStarted(false)
                    .withRestartCount(1376433367),
                new ReplicaContainer().withName("j")
                    .withContainerId("kndxdigrjgu")
                    .withReady(true)
                    .withStarted(false)
                    .withRestartCount(1986319957)));
        model = BinaryData.fromObject(model).toObject(ReplicaInner.class);
        Assertions.assertEquals("srezp", model.containers().get(0).name());
        Assertions.assertEquals("hneuyowqkd", model.containers().get(0).containerId());
        Assertions.assertFalse(model.containers().get(0).ready());
        Assertions.assertTrue(model.containers().get(0).started());
        Assertions.assertEquals(431891008, model.containers().get(0).restartCount());
        Assertions.assertEquals("al", model.initContainers().get(0).name());
        Assertions.assertEquals("fk", model.initContainers().get(0).containerId());
        Assertions.assertTrue(model.initContainers().get(0).ready());
        Assertions.assertFalse(model.initContainers().get(0).started());
        Assertions.assertEquals(1376433367, model.initContainers().get(0).restartCount());
    }
}
