// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.app.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.app.ContainerAppsApiManager;
import com.azure.resourcemanager.app.models.BindingType;
import com.azure.resourcemanager.app.models.CustomDomain;
import com.azure.resourcemanager.app.models.HttpRoute;
import com.azure.resourcemanager.app.models.HttpRouteConfig;
import com.azure.resourcemanager.app.models.HttpRouteConfigProperties;
import com.azure.resourcemanager.app.models.HttpRouteRule;
import com.azure.resourcemanager.app.models.HttpRouteTarget;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class HttpRouteConfigsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Updating\",\"provisioningErrors\":[{\"timestamp\":\"2021-11-13T04:32:20Z\",\"message\":\"wixvtbouguxtndop\"}],\"fqdn\":\"ttbas\",\"customDomains\":[{\"name\":\"ap\",\"bindingType\":\"SniEnabled\",\"certificateId\":\"bea\"},{\"name\":\"bkixvvlwyn\",\"bindingType\":\"SniEnabled\",\"certificateId\":\"qvzfj\"}],\"rules\":[{\"targets\":[{\"containerApp\":\"zfe\"},{\"containerApp\":\"zjljmphfk\"}],\"routes\":[{},{},{},{}],\"description\":\"lgjzmi\"}]},\"id\":\"ydoccnxshanzb\",\"name\":\"iadhbatec\",\"type\":\"atsdohzniucbdaom\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerAppsApiManager manager = ContainerAppsApiManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        HttpRouteConfig response = manager.httpRouteConfigs()
            .define("lqxov")
            .withExistingManagedEnvironment("foxqwecrsn", "pcs")
            .withProperties(new HttpRouteConfigProperties().withCustomDomains(Arrays.asList(
                new CustomDomain().withName("zkxitd").withBindingType(BindingType.AUTO).withCertificateId("svkolru"),
                new CustomDomain().withName("jovmozsaye")
                    .withBindingType(BindingType.SNI_ENABLED)
                    .withCertificateId("wzlpzbtz")))
                .withRules(Arrays.asList(
                    new HttpRouteRule()
                        .withTargets(Arrays.asList(new HttpRouteTarget().withContainerApp("ip"),
                            new HttpRouteTarget().withContainerApp("sdyepfno"),
                            new HttpRouteTarget().withContainerApp("mbezacfpztg")))
                        .withRoutes(Arrays.asList(new HttpRoute(), new HttpRoute(), new HttpRoute()))
                        .withDescription("qejg"),
                    new HttpRouteRule()
                        .withTargets(Arrays.asList(new HttpRouteTarget().withContainerApp("kctgkp"),
                            new HttpRouteTarget().withContainerApp("gkqzkcyzmffngdyf"),
                            new HttpRouteTarget().withContainerApp("ixrhl"),
                            new HttpRouteTarget().withContainerApp("qvhoej")))
                        .withRoutes(Arrays.asList(new HttpRoute()))
                        .withDescription("tgwrmkahpqha"),
                    new HttpRouteRule()
                        .withTargets(Arrays.asList(new HttpRouteTarget().withContainerApp("tac"),
                            new HttpRouteTarget().withContainerApp("hncogmipnml")))
                        .withRoutes(Arrays.asList(new HttpRoute(), new HttpRoute(), new HttpRoute(), new HttpRoute()))
                        .withDescription("lbhik"),
                    new HttpRouteRule()
                        .withTargets(Arrays.asList(new HttpRouteTarget().withContainerApp("grvgpomxp"),
                            new HttpRouteTarget().withContainerApp("pdtsdfjyiesocwi")))
                        .withRoutes(Arrays.asList(new HttpRoute(), new HttpRoute()))
                        .withDescription("utmp"))))
            .create();

        Assertions.assertEquals("ap", response.properties().customDomains().get(0).name());
        Assertions.assertEquals(BindingType.SNI_ENABLED, response.properties().customDomains().get(0).bindingType());
        Assertions.assertEquals("bea", response.properties().customDomains().get(0).certificateId());
        Assertions.assertEquals("zfe", response.properties().rules().get(0).targets().get(0).containerApp());
        Assertions.assertEquals("lgjzmi", response.properties().rules().get(0).description());
    }
}
