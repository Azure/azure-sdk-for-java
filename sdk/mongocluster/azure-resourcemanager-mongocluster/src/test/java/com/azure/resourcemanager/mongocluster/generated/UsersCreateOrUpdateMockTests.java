// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mongocluster.MongoClusterManager;
import com.azure.resourcemanager.mongocluster.models.DatabaseRole;
import com.azure.resourcemanager.mongocluster.models.IdentityProvider;
import com.azure.resourcemanager.mongocluster.models.User;
import com.azure.resourcemanager.mongocluster.models.UserProperties;
import com.azure.resourcemanager.mongocluster.models.UserRole;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"identityProvider\":{\"type\":\"IdentityProvider\"},\"roles\":[{\"db\":\"vszjfauvjfdxxi\",\"role\":\"root\"},{\"db\":\"tvtc\",\"role\":\"root\"}]},\"id\":\"tdo\",\"name\":\"mcbxvwvxysl\",\"type\":\"bhsfxob\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MongoClusterManager manager = MongoClusterManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        User response = manager.users()
            .define("oellwp")
            .withExistingMongoCluster("rmgucnap", "t")
            .withProperties(new UserProperties().withIdentityProvider(new IdentityProvider())
                .withRoles(Arrays.asList(new DatabaseRole().withDb("qbuaceopzfqr").withRole(UserRole.ROOT),
                    new DatabaseRole().withDb("uaopppcqeq").withRole(UserRole.ROOT),
                    new DatabaseRole().withDb("lzdahzxctobgbkdm").withRole(UserRole.ROOT))))
            .create();

        Assertions.assertEquals("vszjfauvjfdxxi", response.properties().roles().get(0).db());
        Assertions.assertEquals(UserRole.ROOT, response.properties().roles().get(0).role());
    }
}
