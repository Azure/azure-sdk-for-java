// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mongocluster.MongoClusterManager;
import com.azure.resourcemanager.mongocluster.models.PrivateEndpoint;
import com.azure.resourcemanager.mongocluster.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.mongocluster.models.PrivateEndpointConnectionResource;
import com.azure.resourcemanager.mongocluster.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.mongocluster.models.PrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"groupIds\":[\"xgodebfqkkrbmp\",\"kgriwflzlfbx\"],\"privateEndpoint\":{\"id\":\"zycispn\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"mgkbrpyydhibn\",\"actionsRequired\":\"qkpikadrgvtqagnb\"},\"provisioningState\":\"Succeeded\"},\"id\":\"ijggmebfsiar\",\"name\":\"utrc\",\"type\":\"pnazzm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MongoClusterManager manager = MongoClusterManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnectionResource response
            = manager.privateEndpointConnections()
                .define("jf")
                .withExistingMongoCluster("fcivfsnkym", "ctq")
                .withProperties(new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                    .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                        .withStatus(PrivateEndpointServiceConnectionStatus.APPROVED)
                        .withDescription("qxj")
                        .withActionsRequired("ujqgidok")))
                .create();

        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.APPROVED,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("mgkbrpyydhibn",
            response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("qkpikadrgvtqagnb",
            response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
