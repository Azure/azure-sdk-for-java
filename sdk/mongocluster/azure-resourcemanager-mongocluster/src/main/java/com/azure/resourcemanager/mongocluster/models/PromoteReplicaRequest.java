// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Promote replica request properties.
 */
@Fluent
public final class PromoteReplicaRequest implements JsonSerializable<PromoteReplicaRequest> {
    /*
     * The promote option to apply to the operation.
     */
    private PromoteOption promoteOption;

    /*
     * The mode to apply to the promote operation. Value is optional and default value is 'Switchover'.
     */
    private PromoteMode mode;

    /**
     * Creates an instance of PromoteReplicaRequest class.
     */
    public PromoteReplicaRequest() {
    }

    /**
     * Get the promoteOption property: The promote option to apply to the operation.
     * 
     * @return the promoteOption value.
     */
    public PromoteOption promoteOption() {
        return this.promoteOption;
    }

    /**
     * Set the promoteOption property: The promote option to apply to the operation.
     * 
     * @param promoteOption the promoteOption value to set.
     * @return the PromoteReplicaRequest object itself.
     */
    public PromoteReplicaRequest withPromoteOption(PromoteOption promoteOption) {
        this.promoteOption = promoteOption;
        return this;
    }

    /**
     * Get the mode property: The mode to apply to the promote operation. Value is optional and default value is
     * 'Switchover'.
     * 
     * @return the mode value.
     */
    public PromoteMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The mode to apply to the promote operation. Value is optional and default value is
     * 'Switchover'.
     * 
     * @param mode the mode value to set.
     * @return the PromoteReplicaRequest object itself.
     */
    public PromoteReplicaRequest withMode(PromoteMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (promoteOption() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property promoteOption in model PromoteReplicaRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PromoteReplicaRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("promoteOption", this.promoteOption == null ? null : this.promoteOption.toString());
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PromoteReplicaRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PromoteReplicaRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PromoteReplicaRequest.
     */
    public static PromoteReplicaRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PromoteReplicaRequest deserializedPromoteReplicaRequest = new PromoteReplicaRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("promoteOption".equals(fieldName)) {
                    deserializedPromoteReplicaRequest.promoteOption = PromoteOption.fromString(reader.getString());
                } else if ("mode".equals(fieldName)) {
                    deserializedPromoteReplicaRequest.mode = PromoteMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPromoteReplicaRequest;
        });
    }
}
