// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a mongo cluster.
 */
@Fluent
public final class MongoClusterProperties implements JsonSerializable<MongoClusterProperties> {
    /*
     * The mode to create a mongo cluster.
     */
    private CreateMode createMode;

    /*
     * The parameters to create a point-in-time restore mongo cluster.
     */
    private MongoClusterRestoreParameters restoreParameters;

    /*
     * The administrator's login for the mongo cluster.
     */
    private String administratorLogin;

    /*
     * The password of the administrator login.
     */
    private String administratorLoginPassword;

    /*
     * The Mongo DB server version. Defaults to the latest available version if not specified.
     */
    private String serverVersion;

    /*
     * The default mongo connection string for the cluster.
     */
    private String connectionString;

    /*
     * Earliest restore timestamp in UTC ISO8601 format.
     */
    private String earliestRestoreTime;

    /*
     * The provisioning state of the mongo cluster.
     */
    private ProvisioningState provisioningState;

    /*
     * The status of the mongo cluster.
     */
    private MongoClusterStatus clusterStatus;

    /*
     * Whether or not public endpoint access is allowed for this mongo cluster.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * The list of node group specs in the cluster.
     */
    private List<NodeGroupSpec> nodeGroupSpecs;

    /*
     * List of private endpoint connections.
     */
    private List<PrivateEndpointConnection> privateEndpointConnections;

    /**
     * Creates an instance of MongoClusterProperties class.
     */
    public MongoClusterProperties() {
    }

    /**
     * Get the createMode property: The mode to create a mongo cluster.
     * 
     * @return the createMode value.
     */
    public CreateMode createMode() {
        return this.createMode;
    }

    /**
     * Set the createMode property: The mode to create a mongo cluster.
     * 
     * @param createMode the createMode value to set.
     * @return the MongoClusterProperties object itself.
     */
    public MongoClusterProperties withCreateMode(CreateMode createMode) {
        this.createMode = createMode;
        return this;
    }

    /**
     * Get the restoreParameters property: The parameters to create a point-in-time restore mongo cluster.
     * 
     * @return the restoreParameters value.
     */
    public MongoClusterRestoreParameters restoreParameters() {
        return this.restoreParameters;
    }

    /**
     * Set the restoreParameters property: The parameters to create a point-in-time restore mongo cluster.
     * 
     * @param restoreParameters the restoreParameters value to set.
     * @return the MongoClusterProperties object itself.
     */
    public MongoClusterProperties withRestoreParameters(MongoClusterRestoreParameters restoreParameters) {
        this.restoreParameters = restoreParameters;
        return this;
    }

    /**
     * Get the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @return the administratorLogin value.
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Set the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @param administratorLogin the administratorLogin value to set.
     * @return the MongoClusterProperties object itself.
     */
    public MongoClusterProperties withAdministratorLogin(String administratorLogin) {
        this.administratorLogin = administratorLogin;
        return this;
    }

    /**
     * Get the administratorLoginPassword property: The password of the administrator login.
     * 
     * @return the administratorLoginPassword value.
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * Set the administratorLoginPassword property: The password of the administrator login.
     * 
     * @param administratorLoginPassword the administratorLoginPassword value to set.
     * @return the MongoClusterProperties object itself.
     */
    public MongoClusterProperties withAdministratorLoginPassword(String administratorLoginPassword) {
        this.administratorLoginPassword = administratorLoginPassword;
        return this;
    }

    /**
     * Get the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Set the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @param serverVersion the serverVersion value to set.
     * @return the MongoClusterProperties object itself.
     */
    public MongoClusterProperties withServerVersion(String serverVersion) {
        this.serverVersion = serverVersion;
        return this;
    }

    /**
     * Get the connectionString property: The default mongo connection string for the cluster.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.connectionString;
    }

    /**
     * Get the earliestRestoreTime property: Earliest restore timestamp in UTC ISO8601 format.
     * 
     * @return the earliestRestoreTime value.
     */
    public String earliestRestoreTime() {
        return this.earliestRestoreTime;
    }

    /**
     * Get the provisioningState property: The provisioning state of the mongo cluster.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the clusterStatus property: The status of the mongo cluster.
     * 
     * @return the clusterStatus value.
     */
    public MongoClusterStatus clusterStatus() {
        return this.clusterStatus;
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public endpoint access is allowed for this mongo cluster.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public endpoint access is allowed for this mongo cluster.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the MongoClusterProperties object itself.
     */
    public MongoClusterProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @return the nodeGroupSpecs value.
     */
    public List<NodeGroupSpec> nodeGroupSpecs() {
        return this.nodeGroupSpecs;
    }

    /**
     * Set the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @param nodeGroupSpecs the nodeGroupSpecs value to set.
     * @return the MongoClusterProperties object itself.
     */
    public MongoClusterProperties withNodeGroupSpecs(List<NodeGroupSpec> nodeGroupSpecs) {
        this.nodeGroupSpecs = nodeGroupSpecs;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (restoreParameters() != null) {
            restoreParameters().validate();
        }
        if (nodeGroupSpecs() != null) {
            nodeGroupSpecs().forEach(e -> e.validate());
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createMode", this.createMode == null ? null : this.createMode.toString());
        jsonWriter.writeJsonField("restoreParameters", this.restoreParameters);
        jsonWriter.writeStringField("administratorLogin", this.administratorLogin);
        jsonWriter.writeStringField("administratorLoginPassword", this.administratorLoginPassword);
        jsonWriter.writeStringField("serverVersion", this.serverVersion);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeArrayField("nodeGroupSpecs", this.nodeGroupSpecs,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoClusterProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoClusterProperties.
     */
    public static MongoClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoClusterProperties deserializedMongoClusterProperties = new MongoClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createMode".equals(fieldName)) {
                    deserializedMongoClusterProperties.createMode = CreateMode.fromString(reader.getString());
                } else if ("restoreParameters".equals(fieldName)) {
                    deserializedMongoClusterProperties.restoreParameters
                        = MongoClusterRestoreParameters.fromJson(reader);
                } else if ("administratorLogin".equals(fieldName)) {
                    deserializedMongoClusterProperties.administratorLogin = reader.getString();
                } else if ("administratorLoginPassword".equals(fieldName)) {
                    deserializedMongoClusterProperties.administratorLoginPassword = reader.getString();
                } else if ("serverVersion".equals(fieldName)) {
                    deserializedMongoClusterProperties.serverVersion = reader.getString();
                } else if ("connectionString".equals(fieldName)) {
                    deserializedMongoClusterProperties.connectionString = reader.getString();
                } else if ("earliestRestoreTime".equals(fieldName)) {
                    deserializedMongoClusterProperties.earliestRestoreTime = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMongoClusterProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("clusterStatus".equals(fieldName)) {
                    deserializedMongoClusterProperties.clusterStatus
                        = MongoClusterStatus.fromString(reader.getString());
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedMongoClusterProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("nodeGroupSpecs".equals(fieldName)) {
                    List<NodeGroupSpec> nodeGroupSpecs = reader.readArray(reader1 -> NodeGroupSpec.fromJson(reader1));
                    deserializedMongoClusterProperties.nodeGroupSpecs = nodeGroupSpecs;
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnection> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnection.fromJson(reader1));
                    deserializedMongoClusterProperties.privateEndpointConnections = privateEndpointConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoClusterProperties;
        });
    }
}
