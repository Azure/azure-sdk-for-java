// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mongocluster.fluent.UsersClient;
import com.azure.resourcemanager.mongocluster.fluent.models.UserInner;
import com.azure.resourcemanager.mongocluster.models.User;
import com.azure.resourcemanager.mongocluster.models.Users;

public final class UsersImpl implements Users {
    private static final ClientLogger LOGGER = new ClientLogger(UsersImpl.class);

    private final UsersClient innerClient;

    private final com.azure.resourcemanager.mongocluster.MongoClusterManager serviceManager;

    public UsersImpl(UsersClient innerClient,
        com.azure.resourcemanager.mongocluster.MongoClusterManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<User> getWithResponse(String resourceGroupName, String mongoClusterName, String userName,
        Context context) {
        Response<UserInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, mongoClusterName, userName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new UserImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public User get(String resourceGroupName, String mongoClusterName, String userName) {
        UserInner inner = this.serviceClient().get(resourceGroupName, mongoClusterName, userName);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String mongoClusterName, String userName) {
        this.serviceClient().delete(resourceGroupName, mongoClusterName, userName);
    }

    public void delete(String resourceGroupName, String mongoClusterName, String userName, Context context) {
        this.serviceClient().delete(resourceGroupName, mongoClusterName, userName, context);
    }

    public PagedIterable<User> listByMongoCluster(String resourceGroupName, String mongoClusterName) {
        PagedIterable<UserInner> inner = this.serviceClient().listByMongoCluster(resourceGroupName, mongoClusterName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new UserImpl(inner1, this.manager()));
    }

    public PagedIterable<User> listByMongoCluster(String resourceGroupName, String mongoClusterName, Context context) {
        PagedIterable<UserInner> inner
            = this.serviceClient().listByMongoCluster(resourceGroupName, mongoClusterName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new UserImpl(inner1, this.manager()));
    }

    public User getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mongoClusterName = ResourceManagerUtils.getValueFromIdByName(id, "mongoClusters");
        if (mongoClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'mongoClusters'.", id)));
        }
        String userName = ResourceManagerUtils.getValueFromIdByName(id, "users");
        if (userName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'users'.", id)));
        }
        return this.getWithResponse(resourceGroupName, mongoClusterName, userName, Context.NONE).getValue();
    }

    public Response<User> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mongoClusterName = ResourceManagerUtils.getValueFromIdByName(id, "mongoClusters");
        if (mongoClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'mongoClusters'.", id)));
        }
        String userName = ResourceManagerUtils.getValueFromIdByName(id, "users");
        if (userName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'users'.", id)));
        }
        return this.getWithResponse(resourceGroupName, mongoClusterName, userName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mongoClusterName = ResourceManagerUtils.getValueFromIdByName(id, "mongoClusters");
        if (mongoClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'mongoClusters'.", id)));
        }
        String userName = ResourceManagerUtils.getValueFromIdByName(id, "users");
        if (userName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'users'.", id)));
        }
        this.delete(resourceGroupName, mongoClusterName, userName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mongoClusterName = ResourceManagerUtils.getValueFromIdByName(id, "mongoClusters");
        if (mongoClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'mongoClusters'.", id)));
        }
        String userName = ResourceManagerUtils.getValueFromIdByName(id, "users");
        if (userName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'users'.", id)));
        }
        this.delete(resourceGroupName, mongoClusterName, userName, context);
    }

    private UsersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.mongocluster.MongoClusterManager manager() {
        return this.serviceManager;
    }

    public UserImpl define(String name) {
        return new UserImpl(name, this.manager());
    }
}
