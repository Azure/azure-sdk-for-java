// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The authentication configuration for the Mongo cluster.
 */
@Fluent
public final class AuthConfigProperties implements JsonSerializable<AuthConfigProperties> {
    /*
     * Allowed authentication modes for data access on the cluster.
     */
    private List<AuthenticationMode> allowedModes;

    /**
     * Creates an instance of AuthConfigProperties class.
     */
    public AuthConfigProperties() {
    }

    /**
     * Get the allowedModes property: Allowed authentication modes for data access on the cluster.
     * 
     * @return the allowedModes value.
     */
    public List<AuthenticationMode> allowedModes() {
        return this.allowedModes;
    }

    /**
     * Set the allowedModes property: Allowed authentication modes for data access on the cluster.
     * 
     * @param allowedModes the allowedModes value to set.
     * @return the AuthConfigProperties object itself.
     */
    public AuthConfigProperties withAllowedModes(List<AuthenticationMode> allowedModes) {
        this.allowedModes = allowedModes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("allowedModes", this.allowedModes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthConfigProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthConfigProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AuthConfigProperties.
     */
    public static AuthConfigProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthConfigProperties deserializedAuthConfigProperties = new AuthConfigProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedModes".equals(fieldName)) {
                    List<AuthenticationMode> allowedModes
                        = reader.readArray(reader1 -> AuthenticationMode.fromString(reader1.getString()));
                    deserializedAuthConfigProperties.allowedModes = allowedModes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthConfigProperties;
        });
    }
}
