// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mongocluster.fluent.models.UserInner;
import com.azure.resourcemanager.mongocluster.models.User;
import com.azure.resourcemanager.mongocluster.models.UserProperties;

public final class UserImpl implements User, User.Definition, User.Update {
    private UserInner innerObject;

    private final com.azure.resourcemanager.mongocluster.MongoClusterManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public UserProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public UserInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mongocluster.MongoClusterManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String mongoClusterName;

    private String userName;

    public UserImpl withExistingMongoCluster(String resourceGroupName, String mongoClusterName) {
        this.resourceGroupName = resourceGroupName;
        this.mongoClusterName = mongoClusterName;
        return this;
    }

    public User create() {
        this.innerObject = serviceManager.serviceClient()
            .getUsers()
            .createOrUpdate(resourceGroupName, mongoClusterName, userName, this.innerModel(), Context.NONE);
        return this;
    }

    public User create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getUsers()
            .createOrUpdate(resourceGroupName, mongoClusterName, userName, this.innerModel(), context);
        return this;
    }

    UserImpl(String name, com.azure.resourcemanager.mongocluster.MongoClusterManager serviceManager) {
        this.innerObject = new UserInner();
        this.serviceManager = serviceManager;
        this.userName = name;
    }

    public UserImpl update() {
        return this;
    }

    public User apply() {
        this.innerObject = serviceManager.serviceClient()
            .getUsers()
            .createOrUpdate(resourceGroupName, mongoClusterName, userName, this.innerModel(), Context.NONE);
        return this;
    }

    public User apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getUsers()
            .createOrUpdate(resourceGroupName, mongoClusterName, userName, this.innerModel(), context);
        return this;
    }

    UserImpl(UserInner innerObject, com.azure.resourcemanager.mongocluster.MongoClusterManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.mongoClusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "mongoClusters");
        this.userName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "users");
    }

    public User refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getUsers()
            .getWithResponse(resourceGroupName, mongoClusterName, userName, Context.NONE)
            .getValue();
        return this;
    }

    public User refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getUsers()
            .getWithResponse(resourceGroupName, mongoClusterName, userName, context)
            .getValue();
        return this;
    }

    public UserImpl withProperties(UserProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
