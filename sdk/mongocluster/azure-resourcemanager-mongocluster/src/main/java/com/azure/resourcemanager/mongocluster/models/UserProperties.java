// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Mongo user resource on a cluster.
 */
@Fluent
public final class UserProperties implements JsonSerializable<UserProperties> {
    /*
     * The provisioning state of the user.
     */
    private ProvisioningState provisioningState;

    /*
     * The user's identity provider definition.
     */
    private IdentityProvider identityProvider;

    /*
     * Database roles that are assigned to the user.
     */
    private List<DatabaseRole> roles;

    /**
     * Creates an instance of UserProperties class.
     */
    public UserProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the user.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the identityProvider property: The user's identity provider definition.
     * 
     * @return the identityProvider value.
     */
    public IdentityProvider identityProvider() {
        return this.identityProvider;
    }

    /**
     * Set the identityProvider property: The user's identity provider definition.
     * 
     * @param identityProvider the identityProvider value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withIdentityProvider(IdentityProvider identityProvider) {
        this.identityProvider = identityProvider;
        return this;
    }

    /**
     * Get the roles property: Database roles that are assigned to the user.
     * 
     * @return the roles value.
     */
    public List<DatabaseRole> roles() {
        return this.roles;
    }

    /**
     * Set the roles property: Database roles that are assigned to the user.
     * 
     * @param roles the roles value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withRoles(List<DatabaseRole> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identityProvider() != null) {
            identityProvider().validate();
        }
        if (roles() != null) {
            roles().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("identityProvider", this.identityProvider);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserProperties.
     */
    public static UserProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserProperties deserializedUserProperties = new UserProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedUserProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("identityProvider".equals(fieldName)) {
                    deserializedUserProperties.identityProvider = IdentityProvider.fromJson(reader);
                } else if ("roles".equals(fieldName)) {
                    List<DatabaseRole> roles = reader.readArray(reader1 -> DatabaseRole.fromJson(reader1));
                    deserializedUserProperties.roles = roles;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserProperties;
        });
    }
}
