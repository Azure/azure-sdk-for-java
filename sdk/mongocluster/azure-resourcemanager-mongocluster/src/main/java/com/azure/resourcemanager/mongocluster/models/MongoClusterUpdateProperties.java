// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The updatable properties of the MongoCluster.
 */
@Fluent
public final class MongoClusterUpdateProperties implements JsonSerializable<MongoClusterUpdateProperties> {
    /*
     * The administrator's login for the mongo cluster.
     */
    private String administratorLogin;

    /*
     * The password of the administrator login.
     */
    private String administratorLoginPassword;

    /*
     * The Mongo DB server version. Defaults to the latest available version if not specified.
     */
    private String serverVersion;

    /*
     * Whether or not public endpoint access is allowed for this mongo cluster.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * The list of node group specs in the cluster.
     */
    private List<NodeGroupSpec> nodeGroupSpecs;

    /*
     * List of private endpoint connections.
     */
    private List<PreviewFeature> previewFeatures;

    /**
     * Creates an instance of MongoClusterUpdateProperties class.
     */
    public MongoClusterUpdateProperties() {
    }

    /**
     * Get the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @return the administratorLogin value.
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Set the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @param administratorLogin the administratorLogin value to set.
     * @return the MongoClusterUpdateProperties object itself.
     */
    public MongoClusterUpdateProperties withAdministratorLogin(String administratorLogin) {
        this.administratorLogin = administratorLogin;
        return this;
    }

    /**
     * Get the administratorLoginPassword property: The password of the administrator login.
     * 
     * @return the administratorLoginPassword value.
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * Set the administratorLoginPassword property: The password of the administrator login.
     * 
     * @param administratorLoginPassword the administratorLoginPassword value to set.
     * @return the MongoClusterUpdateProperties object itself.
     */
    public MongoClusterUpdateProperties withAdministratorLoginPassword(String administratorLoginPassword) {
        this.administratorLoginPassword = administratorLoginPassword;
        return this;
    }

    /**
     * Get the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Set the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @param serverVersion the serverVersion value to set.
     * @return the MongoClusterUpdateProperties object itself.
     */
    public MongoClusterUpdateProperties withServerVersion(String serverVersion) {
        this.serverVersion = serverVersion;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public endpoint access is allowed for this mongo cluster.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public endpoint access is allowed for this mongo cluster.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the MongoClusterUpdateProperties object itself.
     */
    public MongoClusterUpdateProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @return the nodeGroupSpecs value.
     */
    public List<NodeGroupSpec> nodeGroupSpecs() {
        return this.nodeGroupSpecs;
    }

    /**
     * Set the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @param nodeGroupSpecs the nodeGroupSpecs value to set.
     * @return the MongoClusterUpdateProperties object itself.
     */
    public MongoClusterUpdateProperties withNodeGroupSpecs(List<NodeGroupSpec> nodeGroupSpecs) {
        this.nodeGroupSpecs = nodeGroupSpecs;
        return this;
    }

    /**
     * Get the previewFeatures property: List of private endpoint connections.
     * 
     * @return the previewFeatures value.
     */
    public List<PreviewFeature> previewFeatures() {
        return this.previewFeatures;
    }

    /**
     * Set the previewFeatures property: List of private endpoint connections.
     * 
     * @param previewFeatures the previewFeatures value to set.
     * @return the MongoClusterUpdateProperties object itself.
     */
    public MongoClusterUpdateProperties withPreviewFeatures(List<PreviewFeature> previewFeatures) {
        this.previewFeatures = previewFeatures;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodeGroupSpecs() != null) {
            nodeGroupSpecs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("administratorLogin", this.administratorLogin);
        jsonWriter.writeStringField("administratorLoginPassword", this.administratorLoginPassword);
        jsonWriter.writeStringField("serverVersion", this.serverVersion);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeArrayField("nodeGroupSpecs", this.nodeGroupSpecs,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("previewFeatures", this.previewFeatures,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoClusterUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoClusterUpdateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoClusterUpdateProperties.
     */
    public static MongoClusterUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoClusterUpdateProperties deserializedMongoClusterUpdateProperties = new MongoClusterUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("administratorLogin".equals(fieldName)) {
                    deserializedMongoClusterUpdateProperties.administratorLogin = reader.getString();
                } else if ("administratorLoginPassword".equals(fieldName)) {
                    deserializedMongoClusterUpdateProperties.administratorLoginPassword = reader.getString();
                } else if ("serverVersion".equals(fieldName)) {
                    deserializedMongoClusterUpdateProperties.serverVersion = reader.getString();
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedMongoClusterUpdateProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("nodeGroupSpecs".equals(fieldName)) {
                    List<NodeGroupSpec> nodeGroupSpecs = reader.readArray(reader1 -> NodeGroupSpec.fromJson(reader1));
                    deserializedMongoClusterUpdateProperties.nodeGroupSpecs = nodeGroupSpecs;
                } else if ("previewFeatures".equals(fieldName)) {
                    List<PreviewFeature> previewFeatures
                        = reader.readArray(reader1 -> PreviewFeature.fromString(reader1.getString()));
                    deserializedMongoClusterUpdateProperties.previewFeatures = previewFeatures;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoClusterUpdateProperties;
        });
    }
}
