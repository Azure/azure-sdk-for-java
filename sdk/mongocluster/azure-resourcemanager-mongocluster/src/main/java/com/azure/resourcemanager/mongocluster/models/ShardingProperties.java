// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The sharding properties of the cluster. This includes the shard count and scaling options for the cluster.
 */
@Fluent
public final class ShardingProperties implements JsonSerializable<ShardingProperties> {
    /*
     * Number of shards to provision on the cluster.
     */
    private Integer shardCount;

    /**
     * Creates an instance of ShardingProperties class.
     */
    public ShardingProperties() {
    }

    /**
     * Get the shardCount property: Number of shards to provision on the cluster.
     * 
     * @return the shardCount value.
     */
    public Integer shardCount() {
        return this.shardCount;
    }

    /**
     * Set the shardCount property: Number of shards to provision on the cluster.
     * 
     * @param shardCount the shardCount value to set.
     * @return the ShardingProperties object itself.
     */
    public ShardingProperties withShardCount(Integer shardCount) {
        this.shardCount = shardCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("shardCount", this.shardCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ShardingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ShardingProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ShardingProperties.
     */
    public static ShardingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ShardingProperties deserializedShardingProperties = new ShardingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("shardCount".equals(fieldName)) {
                    deserializedShardingProperties.shardCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedShardingProperties;
        });
    }
}
