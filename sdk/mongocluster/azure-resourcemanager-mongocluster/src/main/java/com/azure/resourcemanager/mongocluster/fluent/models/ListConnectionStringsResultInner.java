// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mongocluster.models.ConnectionString;
import java.io.IOException;
import java.util.List;

/**
 * The connection strings for the given mongo cluster.
 */
@Immutable
public final class ListConnectionStringsResultInner implements JsonSerializable<ListConnectionStringsResultInner> {
    /*
     * An array that contains the connection strings for a mongo cluster.
     */
    private List<ConnectionString> connectionStrings;

    /**
     * Creates an instance of ListConnectionStringsResultInner class.
     */
    private ListConnectionStringsResultInner() {
    }

    /**
     * Get the connectionStrings property: An array that contains the connection strings for a mongo cluster.
     * 
     * @return the connectionStrings value.
     */
    public List<ConnectionString> connectionStrings() {
        return this.connectionStrings;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionStrings() != null) {
            connectionStrings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListConnectionStringsResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListConnectionStringsResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ListConnectionStringsResultInner.
     */
    public static ListConnectionStringsResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ListConnectionStringsResultInner deserializedListConnectionStringsResultInner
                = new ListConnectionStringsResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionStrings".equals(fieldName)) {
                    List<ConnectionString> connectionStrings
                        = reader.readArray(reader1 -> ConnectionString.fromJson(reader1));
                    deserializedListConnectionStringsResultInner.connectionStrings = connectionStrings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedListConnectionStringsResultInner;
        });
    }
}
